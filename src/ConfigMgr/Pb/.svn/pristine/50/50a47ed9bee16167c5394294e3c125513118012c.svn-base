// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: module/AvatarData.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "module/AvatarData.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace pb {

namespace {

const ::google::protobuf::Descriptor* AvatarVector3_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AvatarVector3_reflection_ = NULL;
const ::google::protobuf::Descriptor* EffectEvent_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  EffectEvent_reflection_ = NULL;
const ::google::protobuf::Descriptor* TriggerEvent_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TriggerEvent_reflection_ = NULL;
const ::google::protobuf::Descriptor* SocketPosition_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SocketPosition_reflection_ = NULL;
const ::google::protobuf::Descriptor* SkillTriggerEvent_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SkillTriggerEvent_reflection_ = NULL;
const ::google::protobuf::Descriptor* TSkillTriggerDeath_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TSkillTriggerDeath_reflection_ = NULL;
const ::google::protobuf::Descriptor* BlendShapeInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BlendShapeInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* AnimData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AnimData_reflection_ = NULL;
const ::google::protobuf::Descriptor* AvatarData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AvatarData_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_module_2fAvatarData_2eproto() {
  protobuf_AddDesc_module_2fAvatarData_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "module/AvatarData.proto");
  GOOGLE_CHECK(file != NULL);
  AvatarVector3_descriptor_ = file->message_type(0);
  static const int AvatarVector3_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AvatarVector3, x_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AvatarVector3, y_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AvatarVector3, z_),
  };
  AvatarVector3_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AvatarVector3_descriptor_,
      AvatarVector3::default_instance_,
      AvatarVector3_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AvatarVector3, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AvatarVector3, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AvatarVector3));
  EffectEvent_descriptor_ = file->message_type(1);
  static const int EffectEvent_offsets_[10] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EffectEvent, socketname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EffectEvent, effectname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EffectEvent, starttime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EffectEvent, effecttimelength_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EffectEvent, effectscale_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EffectEvent, effectspeed_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EffectEvent, effectposition_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EffectEvent, effecteulerangles_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EffectEvent, loop_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EffectEvent, useworldpos_),
  };
  EffectEvent_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      EffectEvent_descriptor_,
      EffectEvent::default_instance_,
      EffectEvent_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EffectEvent, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EffectEvent, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(EffectEvent));
  TriggerEvent_descriptor_ = file->message_type(2);
  static const int TriggerEvent_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TriggerEvent, starttime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TriggerEvent, triggerlength_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TriggerEvent, triggertype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TriggerEvent, triggerparam_),
  };
  TriggerEvent_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TriggerEvent_descriptor_,
      TriggerEvent::default_instance_,
      TriggerEvent_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TriggerEvent, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TriggerEvent, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TriggerEvent));
  SocketPosition_descriptor_ = file->message_type(3);
  static const int SocketPosition_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SocketPosition, socketname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SocketPosition, position_),
  };
  SocketPosition_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SocketPosition_descriptor_,
      SocketPosition::default_instance_,
      SocketPosition_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SocketPosition, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SocketPosition, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SocketPosition));
  SkillTriggerEvent_descriptor_ = file->message_type(4);
  static const int SkillTriggerEvent_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillTriggerEvent, starttime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillTriggerEvent, positions_),
  };
  SkillTriggerEvent_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SkillTriggerEvent_descriptor_,
      SkillTriggerEvent::default_instance_,
      SkillTriggerEvent_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillTriggerEvent, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillTriggerEvent, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SkillTriggerEvent));
  TSkillTriggerDeath_descriptor_ = file->message_type(5);
  static const int TSkillTriggerDeath_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TSkillTriggerDeath, starttime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TSkillTriggerDeath, animname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TSkillTriggerDeath, skillidarr_),
  };
  TSkillTriggerDeath_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TSkillTriggerDeath_descriptor_,
      TSkillTriggerDeath::default_instance_,
      TSkillTriggerDeath_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TSkillTriggerDeath, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TSkillTriggerDeath, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TSkillTriggerDeath));
  BlendShapeInfo_descriptor_ = file->message_type(6);
  static const int BlendShapeInfo_offsets_[11] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlendShapeInfo, index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlendShapeInfo, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlendShapeInfo, starttime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlendShapeInfo, fadeintime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlendShapeInfo, lasttime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlendShapeInfo, fadeouttime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlendShapeInfo, fadeinblendweight_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlendShapeInfo, lastblendweight_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlendShapeInfo, fadeoutblendweight_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlendShapeInfo, showcount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlendShapeInfo, hidecount_),
  };
  BlendShapeInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BlendShapeInfo_descriptor_,
      BlendShapeInfo::default_instance_,
      BlendShapeInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlendShapeInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlendShapeInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BlendShapeInfo));
  AnimData_descriptor_ = file->message_type(7);
  static const int AnimData_offsets_[10] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AnimData, animname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AnimData, animtimelength_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AnimData, pauseendeventtime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AnimData, effectevents_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AnimData, audioinfoarr_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AnimData, triggerevents_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AnimData, skilltriggerevents_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AnimData, blendshapeinfolist_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AnimData, initsocketposition_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AnimData, skilltriggerdeath_),
  };
  AnimData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AnimData_descriptor_,
      AnimData::default_instance_,
      AnimData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AnimData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AnimData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AnimData));
  AvatarData_descriptor_ = file->message_type(8);
  static const int AvatarData_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AvatarData, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AvatarData, avatarname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AvatarData, animdatas_),
  };
  AvatarData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AvatarData_descriptor_,
      AvatarData::default_instance_,
      AvatarData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AvatarData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AvatarData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AvatarData));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_module_2fAvatarData_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AvatarVector3_descriptor_, &AvatarVector3::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    EffectEvent_descriptor_, &EffectEvent::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TriggerEvent_descriptor_, &TriggerEvent::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SocketPosition_descriptor_, &SocketPosition::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SkillTriggerEvent_descriptor_, &SkillTriggerEvent::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TSkillTriggerDeath_descriptor_, &TSkillTriggerDeath::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BlendShapeInfo_descriptor_, &BlendShapeInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AnimData_descriptor_, &AnimData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AvatarData_descriptor_, &AvatarData::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_module_2fAvatarData_2eproto() {
  delete AvatarVector3::default_instance_;
  delete AvatarVector3_reflection_;
  delete EffectEvent::default_instance_;
  delete EffectEvent_reflection_;
  delete TriggerEvent::default_instance_;
  delete TriggerEvent_reflection_;
  delete SocketPosition::default_instance_;
  delete SocketPosition_reflection_;
  delete SkillTriggerEvent::default_instance_;
  delete SkillTriggerEvent_reflection_;
  delete TSkillTriggerDeath::default_instance_;
  delete TSkillTriggerDeath_reflection_;
  delete BlendShapeInfo::default_instance_;
  delete BlendShapeInfo_reflection_;
  delete AnimData::default_instance_;
  delete AnimData_reflection_;
  delete AvatarData::default_instance_;
  delete AvatarData_reflection_;
}

void protobuf_AddDesc_module_2fAvatarData_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::pb::protobuf_AddDesc_module_2fAudioDefine_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\027module/AvatarData.proto\022\002pb\032\030module/Au"
    "dioDefine.proto\"0\n\rAvatarVector3\022\t\n\001X\030\001 "
    "\002(\005\022\t\n\001Y\030\002 \002(\005\022\t\n\001Z\030\003 \002(\005\"\210\002\n\013EffectEven"
    "t\022\022\n\nSocketName\030\001 \002(\t\022\022\n\nEffectName\030\002 \002("
    "\t\022\021\n\tStartTime\030\003 \002(\002\022\030\n\020EffectTimeLength"
    "\030\004 \002(\002\022\023\n\013EffectScale\030\005 \002(\002\022\023\n\013EffectSpe"
    "ed\030\006 \002(\002\022)\n\016EffectPosition\030\007 \002(\0132\021.pb.Av"
    "atarVector3\022,\n\021EffectEulerAngles\030\010 \002(\0132\021"
    ".pb.AvatarVector3\022\014\n\004Loop\030\t \002(\002\022\023\n\013UseWo"
    "rldPos\030\n \001(\010\"c\n\014TriggerEvent\022\021\n\tStartTim"
    "e\030\002 \002(\001\022\025\n\rTriggerLength\030\003 \002(\001\022\023\n\013Trigge"
    "rType\030\004 \002(\005\022\024\n\014TriggerParam\030\005 \003(\002\"I\n\016Soc"
    "ketPosition\022\022\n\nSocketName\030\001 \002(\t\022#\n\010Posit"
    "ion\030\002 \002(\0132\021.pb.AvatarVector3\"M\n\021SkillTri"
    "ggerEvent\022\021\n\tStartTime\030\001 \002(\005\022%\n\tPosition"
    "s\030\002 \003(\0132\022.pb.SocketPosition\"M\n\022TSkillTri"
    "ggerDeath\022\021\n\tStartTime\030\001 \002(\005\022\020\n\010AnimName"
    "\030\002 \002(\t\022\022\n\nSkillIdArr\030\003 \003(\005\"\361\001\n\016BlendShap"
    "eInfo\022\r\n\005Index\030\001 \002(\005\022\014\n\004Name\030\002 \002(\t\022\021\n\tSt"
    "artTime\030\003 \002(\002\022\022\n\nFadeInTime\030\004 \002(\002\022\020\n\010Las"
    "tTime\030\005 \002(\002\022\023\n\013FadeOutTime\030\006 \002(\002\022\031\n\021Fade"
    "InBlendWeight\030\007 \002(\002\022\027\n\017LastBlendWeight\030\010"
    " \002(\002\022\032\n\022FadeOutBlendWeight\030\t \002(\002\022\021\n\tShow"
    "Count\030\n \002(\005\022\021\n\tHideCount\030\013 \002(\005\"\212\003\n\010AnimD"
    "ata\022\020\n\010AnimName\030\001 \002(\t\022\026\n\016AnimTimeLength\030"
    "\002 \002(\005\022\031\n\021PauseEndEventTime\030\004 \002(\005\022%\n\014Effe"
    "ctEvents\030\006 \003(\0132\017.pb.EffectEvent\022#\n\014Audio"
    "InfoArr\030\007 \003(\0132\r.pb.AudioInfo\022\'\n\rTriggerE"
    "vents\030\010 \003(\0132\020.pb.TriggerEvent\0221\n\022SkillTr"
    "iggerEvents\030\t \003(\0132\025.pb.SkillTriggerEvent"
    "\022.\n\022BlendShapeInfoList\030\n \003(\0132\022.pb.BlendS"
    "hapeInfo\022.\n\022InitSocketPosition\030\013 \003(\0132\022.p"
    "b.SocketPosition\0221\n\021SkillTriggerDeath\030\014 "
    "\003(\0132\026.pb.TSkillTriggerDeath\"M\n\nAvatarDat"
    "a\022\n\n\002Id\030\001 \002(\005\022\022\n\nAvatarName\030\002 \002(\t\022\037\n\tAni"
    "mDatas\030\003 \003(\0132\014.pb.AnimData", 1426);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "module/AvatarData.proto", &protobuf_RegisterTypes);
  AvatarVector3::default_instance_ = new AvatarVector3();
  EffectEvent::default_instance_ = new EffectEvent();
  TriggerEvent::default_instance_ = new TriggerEvent();
  SocketPosition::default_instance_ = new SocketPosition();
  SkillTriggerEvent::default_instance_ = new SkillTriggerEvent();
  TSkillTriggerDeath::default_instance_ = new TSkillTriggerDeath();
  BlendShapeInfo::default_instance_ = new BlendShapeInfo();
  AnimData::default_instance_ = new AnimData();
  AvatarData::default_instance_ = new AvatarData();
  AvatarVector3::default_instance_->InitAsDefaultInstance();
  EffectEvent::default_instance_->InitAsDefaultInstance();
  TriggerEvent::default_instance_->InitAsDefaultInstance();
  SocketPosition::default_instance_->InitAsDefaultInstance();
  SkillTriggerEvent::default_instance_->InitAsDefaultInstance();
  TSkillTriggerDeath::default_instance_->InitAsDefaultInstance();
  BlendShapeInfo::default_instance_->InitAsDefaultInstance();
  AnimData::default_instance_->InitAsDefaultInstance();
  AvatarData::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_module_2fAvatarData_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_module_2fAvatarData_2eproto {
  StaticDescriptorInitializer_module_2fAvatarData_2eproto() {
    protobuf_AddDesc_module_2fAvatarData_2eproto();
  }
} static_descriptor_initializer_module_2fAvatarData_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int AvatarVector3::kXFieldNumber;
const int AvatarVector3::kYFieldNumber;
const int AvatarVector3::kZFieldNumber;
#endif  // !_MSC_VER

AvatarVector3::AvatarVector3()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.AvatarVector3)
}

void AvatarVector3::InitAsDefaultInstance() {
}

AvatarVector3::AvatarVector3(const AvatarVector3& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.AvatarVector3)
}

void AvatarVector3::SharedCtor() {
  _cached_size_ = 0;
  x_ = 0;
  y_ = 0;
  z_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AvatarVector3::~AvatarVector3() {
  // @@protoc_insertion_point(destructor:pb.AvatarVector3)
  SharedDtor();
}

void AvatarVector3::SharedDtor() {
  if (this != default_instance_) {
  }
}

void AvatarVector3::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AvatarVector3::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AvatarVector3_descriptor_;
}

const AvatarVector3& AvatarVector3::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_module_2fAvatarData_2eproto();
  return *default_instance_;
}

AvatarVector3* AvatarVector3::default_instance_ = NULL;

AvatarVector3* AvatarVector3::New() const {
  return new AvatarVector3;
}

void AvatarVector3::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<AvatarVector3*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(x_, z_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AvatarVector3::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.AvatarVector3)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 X = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &x_)));
          set_has_x();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_Y;
        break;
      }

      // required int32 Y = 2;
      case 2: {
        if (tag == 16) {
         parse_Y:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &y_)));
          set_has_y();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_Z;
        break;
      }

      // required int32 Z = 3;
      case 3: {
        if (tag == 24) {
         parse_Z:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &z_)));
          set_has_z();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.AvatarVector3)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.AvatarVector3)
  return false;
#undef DO_
}

void AvatarVector3::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.AvatarVector3)
  // required int32 X = 1;
  if (has_x()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->x(), output);
  }

  // required int32 Y = 2;
  if (has_y()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->y(), output);
  }

  // required int32 Z = 3;
  if (has_z()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->z(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.AvatarVector3)
}

::google::protobuf::uint8* AvatarVector3::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.AvatarVector3)
  // required int32 X = 1;
  if (has_x()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->x(), target);
  }

  // required int32 Y = 2;
  if (has_y()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->y(), target);
  }

  // required int32 Z = 3;
  if (has_z()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->z(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.AvatarVector3)
  return target;
}

int AvatarVector3::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 X = 1;
    if (has_x()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->x());
    }

    // required int32 Y = 2;
    if (has_y()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->y());
    }

    // required int32 Z = 3;
    if (has_z()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->z());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AvatarVector3::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AvatarVector3* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AvatarVector3*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AvatarVector3::MergeFrom(const AvatarVector3& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_x()) {
      set_x(from.x());
    }
    if (from.has_y()) {
      set_y(from.y());
    }
    if (from.has_z()) {
      set_z(from.z());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AvatarVector3::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AvatarVector3::CopyFrom(const AvatarVector3& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AvatarVector3::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void AvatarVector3::Swap(AvatarVector3* other) {
  if (other != this) {
    std::swap(x_, other->x_);
    std::swap(y_, other->y_);
    std::swap(z_, other->z_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AvatarVector3::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AvatarVector3_descriptor_;
  metadata.reflection = AvatarVector3_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int EffectEvent::kSocketNameFieldNumber;
const int EffectEvent::kEffectNameFieldNumber;
const int EffectEvent::kStartTimeFieldNumber;
const int EffectEvent::kEffectTimeLengthFieldNumber;
const int EffectEvent::kEffectScaleFieldNumber;
const int EffectEvent::kEffectSpeedFieldNumber;
const int EffectEvent::kEffectPositionFieldNumber;
const int EffectEvent::kEffectEulerAnglesFieldNumber;
const int EffectEvent::kLoopFieldNumber;
const int EffectEvent::kUseWorldPosFieldNumber;
#endif  // !_MSC_VER

EffectEvent::EffectEvent()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.EffectEvent)
}

void EffectEvent::InitAsDefaultInstance() {
  effectposition_ = const_cast< ::pb::AvatarVector3*>(&::pb::AvatarVector3::default_instance());
  effecteulerangles_ = const_cast< ::pb::AvatarVector3*>(&::pb::AvatarVector3::default_instance());
}

EffectEvent::EffectEvent(const EffectEvent& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.EffectEvent)
}

void EffectEvent::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  socketname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  effectname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  starttime_ = 0;
  effecttimelength_ = 0;
  effectscale_ = 0;
  effectspeed_ = 0;
  effectposition_ = NULL;
  effecteulerangles_ = NULL;
  loop_ = 0;
  useworldpos_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

EffectEvent::~EffectEvent() {
  // @@protoc_insertion_point(destructor:pb.EffectEvent)
  SharedDtor();
}

void EffectEvent::SharedDtor() {
  if (socketname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete socketname_;
  }
  if (effectname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete effectname_;
  }
  if (this != default_instance_) {
    delete effectposition_;
    delete effecteulerangles_;
  }
}

void EffectEvent::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* EffectEvent::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EffectEvent_descriptor_;
}

const EffectEvent& EffectEvent::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_module_2fAvatarData_2eproto();
  return *default_instance_;
}

EffectEvent* EffectEvent::default_instance_ = NULL;

EffectEvent* EffectEvent::New() const {
  return new EffectEvent;
}

void EffectEvent::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<EffectEvent*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(starttime_, effectspeed_);
    if (has_socketname()) {
      if (socketname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        socketname_->clear();
      }
    }
    if (has_effectname()) {
      if (effectname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        effectname_->clear();
      }
    }
    if (has_effectposition()) {
      if (effectposition_ != NULL) effectposition_->::pb::AvatarVector3::Clear();
    }
    if (has_effecteulerangles()) {
      if (effecteulerangles_ != NULL) effecteulerangles_->::pb::AvatarVector3::Clear();
    }
  }
  ZR_(loop_, useworldpos_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool EffectEvent::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.EffectEvent)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string SocketName = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_socketname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->socketname().data(), this->socketname().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "socketname");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_EffectName;
        break;
      }

      // required string EffectName = 2;
      case 2: {
        if (tag == 18) {
         parse_EffectName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_effectname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->effectname().data(), this->effectname().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "effectname");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(29)) goto parse_StartTime;
        break;
      }

      // required float StartTime = 3;
      case 3: {
        if (tag == 29) {
         parse_StartTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &starttime_)));
          set_has_starttime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(37)) goto parse_EffectTimeLength;
        break;
      }

      // required float EffectTimeLength = 4;
      case 4: {
        if (tag == 37) {
         parse_EffectTimeLength:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &effecttimelength_)));
          set_has_effecttimelength();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(45)) goto parse_EffectScale;
        break;
      }

      // required float EffectScale = 5;
      case 5: {
        if (tag == 45) {
         parse_EffectScale:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &effectscale_)));
          set_has_effectscale();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(53)) goto parse_EffectSpeed;
        break;
      }

      // required float EffectSpeed = 6;
      case 6: {
        if (tag == 53) {
         parse_EffectSpeed:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &effectspeed_)));
          set_has_effectspeed();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_EffectPosition;
        break;
      }

      // required .pb.AvatarVector3 EffectPosition = 7;
      case 7: {
        if (tag == 58) {
         parse_EffectPosition:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_effectposition()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_EffectEulerAngles;
        break;
      }

      // required .pb.AvatarVector3 EffectEulerAngles = 8;
      case 8: {
        if (tag == 66) {
         parse_EffectEulerAngles:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_effecteulerangles()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(77)) goto parse_Loop;
        break;
      }

      // required float Loop = 9;
      case 9: {
        if (tag == 77) {
         parse_Loop:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &loop_)));
          set_has_loop();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(80)) goto parse_UseWorldPos;
        break;
      }

      // optional bool UseWorldPos = 10;
      case 10: {
        if (tag == 80) {
         parse_UseWorldPos:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &useworldpos_)));
          set_has_useworldpos();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.EffectEvent)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.EffectEvent)
  return false;
#undef DO_
}

void EffectEvent::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.EffectEvent)
  // required string SocketName = 1;
  if (has_socketname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->socketname().data(), this->socketname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "socketname");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->socketname(), output);
  }

  // required string EffectName = 2;
  if (has_effectname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->effectname().data(), this->effectname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "effectname");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->effectname(), output);
  }

  // required float StartTime = 3;
  if (has_starttime()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->starttime(), output);
  }

  // required float EffectTimeLength = 4;
  if (has_effecttimelength()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->effecttimelength(), output);
  }

  // required float EffectScale = 5;
  if (has_effectscale()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(5, this->effectscale(), output);
  }

  // required float EffectSpeed = 6;
  if (has_effectspeed()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(6, this->effectspeed(), output);
  }

  // required .pb.AvatarVector3 EffectPosition = 7;
  if (has_effectposition()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->effectposition(), output);
  }

  // required .pb.AvatarVector3 EffectEulerAngles = 8;
  if (has_effecteulerangles()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, this->effecteulerangles(), output);
  }

  // required float Loop = 9;
  if (has_loop()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(9, this->loop(), output);
  }

  // optional bool UseWorldPos = 10;
  if (has_useworldpos()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(10, this->useworldpos(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.EffectEvent)
}

::google::protobuf::uint8* EffectEvent::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.EffectEvent)
  // required string SocketName = 1;
  if (has_socketname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->socketname().data(), this->socketname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "socketname");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->socketname(), target);
  }

  // required string EffectName = 2;
  if (has_effectname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->effectname().data(), this->effectname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "effectname");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->effectname(), target);
  }

  // required float StartTime = 3;
  if (has_starttime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->starttime(), target);
  }

  // required float EffectTimeLength = 4;
  if (has_effecttimelength()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->effecttimelength(), target);
  }

  // required float EffectScale = 5;
  if (has_effectscale()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(5, this->effectscale(), target);
  }

  // required float EffectSpeed = 6;
  if (has_effectspeed()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(6, this->effectspeed(), target);
  }

  // required .pb.AvatarVector3 EffectPosition = 7;
  if (has_effectposition()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->effectposition(), target);
  }

  // required .pb.AvatarVector3 EffectEulerAngles = 8;
  if (has_effecteulerangles()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        8, this->effecteulerangles(), target);
  }

  // required float Loop = 9;
  if (has_loop()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(9, this->loop(), target);
  }

  // optional bool UseWorldPos = 10;
  if (has_useworldpos()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(10, this->useworldpos(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.EffectEvent)
  return target;
}

int EffectEvent::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string SocketName = 1;
    if (has_socketname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->socketname());
    }

    // required string EffectName = 2;
    if (has_effectname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->effectname());
    }

    // required float StartTime = 3;
    if (has_starttime()) {
      total_size += 1 + 4;
    }

    // required float EffectTimeLength = 4;
    if (has_effecttimelength()) {
      total_size += 1 + 4;
    }

    // required float EffectScale = 5;
    if (has_effectscale()) {
      total_size += 1 + 4;
    }

    // required float EffectSpeed = 6;
    if (has_effectspeed()) {
      total_size += 1 + 4;
    }

    // required .pb.AvatarVector3 EffectPosition = 7;
    if (has_effectposition()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->effectposition());
    }

    // required .pb.AvatarVector3 EffectEulerAngles = 8;
    if (has_effecteulerangles()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->effecteulerangles());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // required float Loop = 9;
    if (has_loop()) {
      total_size += 1 + 4;
    }

    // optional bool UseWorldPos = 10;
    if (has_useworldpos()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void EffectEvent::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const EffectEvent* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const EffectEvent*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void EffectEvent::MergeFrom(const EffectEvent& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_socketname()) {
      set_socketname(from.socketname());
    }
    if (from.has_effectname()) {
      set_effectname(from.effectname());
    }
    if (from.has_starttime()) {
      set_starttime(from.starttime());
    }
    if (from.has_effecttimelength()) {
      set_effecttimelength(from.effecttimelength());
    }
    if (from.has_effectscale()) {
      set_effectscale(from.effectscale());
    }
    if (from.has_effectspeed()) {
      set_effectspeed(from.effectspeed());
    }
    if (from.has_effectposition()) {
      mutable_effectposition()->::pb::AvatarVector3::MergeFrom(from.effectposition());
    }
    if (from.has_effecteulerangles()) {
      mutable_effecteulerangles()->::pb::AvatarVector3::MergeFrom(from.effecteulerangles());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_loop()) {
      set_loop(from.loop());
    }
    if (from.has_useworldpos()) {
      set_useworldpos(from.useworldpos());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void EffectEvent::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EffectEvent::CopyFrom(const EffectEvent& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EffectEvent::IsInitialized() const {
  if ((_has_bits_[0] & 0x000001ff) != 0x000001ff) return false;

  if (has_effectposition()) {
    if (!this->effectposition().IsInitialized()) return false;
  }
  if (has_effecteulerangles()) {
    if (!this->effecteulerangles().IsInitialized()) return false;
  }
  return true;
}

void EffectEvent::Swap(EffectEvent* other) {
  if (other != this) {
    std::swap(socketname_, other->socketname_);
    std::swap(effectname_, other->effectname_);
    std::swap(starttime_, other->starttime_);
    std::swap(effecttimelength_, other->effecttimelength_);
    std::swap(effectscale_, other->effectscale_);
    std::swap(effectspeed_, other->effectspeed_);
    std::swap(effectposition_, other->effectposition_);
    std::swap(effecteulerangles_, other->effecteulerangles_);
    std::swap(loop_, other->loop_);
    std::swap(useworldpos_, other->useworldpos_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata EffectEvent::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = EffectEvent_descriptor_;
  metadata.reflection = EffectEvent_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TriggerEvent::kStartTimeFieldNumber;
const int TriggerEvent::kTriggerLengthFieldNumber;
const int TriggerEvent::kTriggerTypeFieldNumber;
const int TriggerEvent::kTriggerParamFieldNumber;
#endif  // !_MSC_VER

TriggerEvent::TriggerEvent()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TriggerEvent)
}

void TriggerEvent::InitAsDefaultInstance() {
}

TriggerEvent::TriggerEvent(const TriggerEvent& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TriggerEvent)
}

void TriggerEvent::SharedCtor() {
  _cached_size_ = 0;
  starttime_ = 0;
  triggerlength_ = 0;
  triggertype_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TriggerEvent::~TriggerEvent() {
  // @@protoc_insertion_point(destructor:pb.TriggerEvent)
  SharedDtor();
}

void TriggerEvent::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TriggerEvent::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TriggerEvent::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TriggerEvent_descriptor_;
}

const TriggerEvent& TriggerEvent::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_module_2fAvatarData_2eproto();
  return *default_instance_;
}

TriggerEvent* TriggerEvent::default_instance_ = NULL;

TriggerEvent* TriggerEvent::New() const {
  return new TriggerEvent;
}

void TriggerEvent::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<TriggerEvent*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 7) {
    ZR_(starttime_, triggerlength_);
    triggertype_ = 0;
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  triggerparam_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TriggerEvent::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TriggerEvent)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required double StartTime = 2;
      case 2: {
        if (tag == 17) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &starttime_)));
          set_has_starttime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(25)) goto parse_TriggerLength;
        break;
      }

      // required double TriggerLength = 3;
      case 3: {
        if (tag == 25) {
         parse_TriggerLength:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &triggerlength_)));
          set_has_triggerlength();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_TriggerType;
        break;
      }

      // required int32 TriggerType = 4;
      case 4: {
        if (tag == 32) {
         parse_TriggerType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &triggertype_)));
          set_has_triggertype();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(45)) goto parse_TriggerParam;
        break;
      }

      // repeated float TriggerParam = 5;
      case 5: {
        if (tag == 45) {
         parse_TriggerParam:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 1, 45, input, this->mutable_triggerparam())));
        } else if (tag == 42) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_triggerparam())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(45)) goto parse_TriggerParam;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TriggerEvent)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TriggerEvent)
  return false;
#undef DO_
}

void TriggerEvent::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TriggerEvent)
  // required double StartTime = 2;
  if (has_starttime()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->starttime(), output);
  }

  // required double TriggerLength = 3;
  if (has_triggerlength()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->triggerlength(), output);
  }

  // required int32 TriggerType = 4;
  if (has_triggertype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->triggertype(), output);
  }

  // repeated float TriggerParam = 5;
  for (int i = 0; i < this->triggerparam_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(
      5, this->triggerparam(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TriggerEvent)
}

::google::protobuf::uint8* TriggerEvent::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TriggerEvent)
  // required double StartTime = 2;
  if (has_starttime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->starttime(), target);
  }

  // required double TriggerLength = 3;
  if (has_triggerlength()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->triggerlength(), target);
  }

  // required int32 TriggerType = 4;
  if (has_triggertype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->triggertype(), target);
  }

  // repeated float TriggerParam = 5;
  for (int i = 0; i < this->triggerparam_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteFloatToArray(5, this->triggerparam(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TriggerEvent)
  return target;
}

int TriggerEvent::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required double StartTime = 2;
    if (has_starttime()) {
      total_size += 1 + 8;
    }

    // required double TriggerLength = 3;
    if (has_triggerlength()) {
      total_size += 1 + 8;
    }

    // required int32 TriggerType = 4;
    if (has_triggertype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->triggertype());
    }

  }
  // repeated float TriggerParam = 5;
  {
    int data_size = 0;
    data_size = 4 * this->triggerparam_size();
    total_size += 1 * this->triggerparam_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TriggerEvent::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TriggerEvent* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TriggerEvent*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TriggerEvent::MergeFrom(const TriggerEvent& from) {
  GOOGLE_CHECK_NE(&from, this);
  triggerparam_.MergeFrom(from.triggerparam_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_starttime()) {
      set_starttime(from.starttime());
    }
    if (from.has_triggerlength()) {
      set_triggerlength(from.triggerlength());
    }
    if (from.has_triggertype()) {
      set_triggertype(from.triggertype());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TriggerEvent::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TriggerEvent::CopyFrom(const TriggerEvent& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TriggerEvent::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void TriggerEvent::Swap(TriggerEvent* other) {
  if (other != this) {
    std::swap(starttime_, other->starttime_);
    std::swap(triggerlength_, other->triggerlength_);
    std::swap(triggertype_, other->triggertype_);
    triggerparam_.Swap(&other->triggerparam_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TriggerEvent::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TriggerEvent_descriptor_;
  metadata.reflection = TriggerEvent_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SocketPosition::kSocketNameFieldNumber;
const int SocketPosition::kPositionFieldNumber;
#endif  // !_MSC_VER

SocketPosition::SocketPosition()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.SocketPosition)
}

void SocketPosition::InitAsDefaultInstance() {
  position_ = const_cast< ::pb::AvatarVector3*>(&::pb::AvatarVector3::default_instance());
}

SocketPosition::SocketPosition(const SocketPosition& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.SocketPosition)
}

void SocketPosition::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  socketname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  position_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SocketPosition::~SocketPosition() {
  // @@protoc_insertion_point(destructor:pb.SocketPosition)
  SharedDtor();
}

void SocketPosition::SharedDtor() {
  if (socketname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete socketname_;
  }
  if (this != default_instance_) {
    delete position_;
  }
}

void SocketPosition::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SocketPosition::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SocketPosition_descriptor_;
}

const SocketPosition& SocketPosition::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_module_2fAvatarData_2eproto();
  return *default_instance_;
}

SocketPosition* SocketPosition::default_instance_ = NULL;

SocketPosition* SocketPosition::New() const {
  return new SocketPosition;
}

void SocketPosition::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    if (has_socketname()) {
      if (socketname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        socketname_->clear();
      }
    }
    if (has_position()) {
      if (position_ != NULL) position_->::pb::AvatarVector3::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SocketPosition::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.SocketPosition)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string SocketName = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_socketname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->socketname().data(), this->socketname().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "socketname");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_Position;
        break;
      }

      // required .pb.AvatarVector3 Position = 2;
      case 2: {
        if (tag == 18) {
         parse_Position:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_position()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.SocketPosition)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.SocketPosition)
  return false;
#undef DO_
}

void SocketPosition::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.SocketPosition)
  // required string SocketName = 1;
  if (has_socketname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->socketname().data(), this->socketname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "socketname");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->socketname(), output);
  }

  // required .pb.AvatarVector3 Position = 2;
  if (has_position()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->position(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.SocketPosition)
}

::google::protobuf::uint8* SocketPosition::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.SocketPosition)
  // required string SocketName = 1;
  if (has_socketname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->socketname().data(), this->socketname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "socketname");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->socketname(), target);
  }

  // required .pb.AvatarVector3 Position = 2;
  if (has_position()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->position(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.SocketPosition)
  return target;
}

int SocketPosition::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string SocketName = 1;
    if (has_socketname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->socketname());
    }

    // required .pb.AvatarVector3 Position = 2;
    if (has_position()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->position());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SocketPosition::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SocketPosition* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SocketPosition*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SocketPosition::MergeFrom(const SocketPosition& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_socketname()) {
      set_socketname(from.socketname());
    }
    if (from.has_position()) {
      mutable_position()->::pb::AvatarVector3::MergeFrom(from.position());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SocketPosition::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SocketPosition::CopyFrom(const SocketPosition& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SocketPosition::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  if (has_position()) {
    if (!this->position().IsInitialized()) return false;
  }
  return true;
}

void SocketPosition::Swap(SocketPosition* other) {
  if (other != this) {
    std::swap(socketname_, other->socketname_);
    std::swap(position_, other->position_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SocketPosition::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SocketPosition_descriptor_;
  metadata.reflection = SocketPosition_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SkillTriggerEvent::kStartTimeFieldNumber;
const int SkillTriggerEvent::kPositionsFieldNumber;
#endif  // !_MSC_VER

SkillTriggerEvent::SkillTriggerEvent()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.SkillTriggerEvent)
}

void SkillTriggerEvent::InitAsDefaultInstance() {
}

SkillTriggerEvent::SkillTriggerEvent(const SkillTriggerEvent& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.SkillTriggerEvent)
}

void SkillTriggerEvent::SharedCtor() {
  _cached_size_ = 0;
  starttime_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SkillTriggerEvent::~SkillTriggerEvent() {
  // @@protoc_insertion_point(destructor:pb.SkillTriggerEvent)
  SharedDtor();
}

void SkillTriggerEvent::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SkillTriggerEvent::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SkillTriggerEvent::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SkillTriggerEvent_descriptor_;
}

const SkillTriggerEvent& SkillTriggerEvent::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_module_2fAvatarData_2eproto();
  return *default_instance_;
}

SkillTriggerEvent* SkillTriggerEvent::default_instance_ = NULL;

SkillTriggerEvent* SkillTriggerEvent::New() const {
  return new SkillTriggerEvent;
}

void SkillTriggerEvent::Clear() {
  starttime_ = 0;
  positions_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SkillTriggerEvent::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.SkillTriggerEvent)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 StartTime = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &starttime_)));
          set_has_starttime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_Positions;
        break;
      }

      // repeated .pb.SocketPosition Positions = 2;
      case 2: {
        if (tag == 18) {
         parse_Positions:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_positions()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_Positions;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.SkillTriggerEvent)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.SkillTriggerEvent)
  return false;
#undef DO_
}

void SkillTriggerEvent::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.SkillTriggerEvent)
  // required int32 StartTime = 1;
  if (has_starttime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->starttime(), output);
  }

  // repeated .pb.SocketPosition Positions = 2;
  for (int i = 0; i < this->positions_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->positions(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.SkillTriggerEvent)
}

::google::protobuf::uint8* SkillTriggerEvent::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.SkillTriggerEvent)
  // required int32 StartTime = 1;
  if (has_starttime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->starttime(), target);
  }

  // repeated .pb.SocketPosition Positions = 2;
  for (int i = 0; i < this->positions_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->positions(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.SkillTriggerEvent)
  return target;
}

int SkillTriggerEvent::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 StartTime = 1;
    if (has_starttime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->starttime());
    }

  }
  // repeated .pb.SocketPosition Positions = 2;
  total_size += 1 * this->positions_size();
  for (int i = 0; i < this->positions_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->positions(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SkillTriggerEvent::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SkillTriggerEvent* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SkillTriggerEvent*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SkillTriggerEvent::MergeFrom(const SkillTriggerEvent& from) {
  GOOGLE_CHECK_NE(&from, this);
  positions_.MergeFrom(from.positions_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_starttime()) {
      set_starttime(from.starttime());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SkillTriggerEvent::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SkillTriggerEvent::CopyFrom(const SkillTriggerEvent& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SkillTriggerEvent::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (!::google::protobuf::internal::AllAreInitialized(this->positions())) return false;
  return true;
}

void SkillTriggerEvent::Swap(SkillTriggerEvent* other) {
  if (other != this) {
    std::swap(starttime_, other->starttime_);
    positions_.Swap(&other->positions_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SkillTriggerEvent::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SkillTriggerEvent_descriptor_;
  metadata.reflection = SkillTriggerEvent_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TSkillTriggerDeath::kStartTimeFieldNumber;
const int TSkillTriggerDeath::kAnimNameFieldNumber;
const int TSkillTriggerDeath::kSkillIdArrFieldNumber;
#endif  // !_MSC_VER

TSkillTriggerDeath::TSkillTriggerDeath()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TSkillTriggerDeath)
}

void TSkillTriggerDeath::InitAsDefaultInstance() {
}

TSkillTriggerDeath::TSkillTriggerDeath(const TSkillTriggerDeath& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TSkillTriggerDeath)
}

void TSkillTriggerDeath::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  starttime_ = 0;
  animname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TSkillTriggerDeath::~TSkillTriggerDeath() {
  // @@protoc_insertion_point(destructor:pb.TSkillTriggerDeath)
  SharedDtor();
}

void TSkillTriggerDeath::SharedDtor() {
  if (animname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete animname_;
  }
  if (this != default_instance_) {
  }
}

void TSkillTriggerDeath::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TSkillTriggerDeath::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TSkillTriggerDeath_descriptor_;
}

const TSkillTriggerDeath& TSkillTriggerDeath::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_module_2fAvatarData_2eproto();
  return *default_instance_;
}

TSkillTriggerDeath* TSkillTriggerDeath::default_instance_ = NULL;

TSkillTriggerDeath* TSkillTriggerDeath::New() const {
  return new TSkillTriggerDeath;
}

void TSkillTriggerDeath::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    starttime_ = 0;
    if (has_animname()) {
      if (animname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        animname_->clear();
      }
    }
  }
  skillidarr_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TSkillTriggerDeath::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TSkillTriggerDeath)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 StartTime = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &starttime_)));
          set_has_starttime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_AnimName;
        break;
      }

      // required string AnimName = 2;
      case 2: {
        if (tag == 18) {
         parse_AnimName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_animname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->animname().data(), this->animname().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "animname");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_SkillIdArr;
        break;
      }

      // repeated int32 SkillIdArr = 3;
      case 3: {
        if (tag == 24) {
         parse_SkillIdArr:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 24, input, this->mutable_skillidarr())));
        } else if (tag == 26) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_skillidarr())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_SkillIdArr;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TSkillTriggerDeath)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TSkillTriggerDeath)
  return false;
#undef DO_
}

void TSkillTriggerDeath::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TSkillTriggerDeath)
  // required int32 StartTime = 1;
  if (has_starttime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->starttime(), output);
  }

  // required string AnimName = 2;
  if (has_animname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->animname().data(), this->animname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "animname");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->animname(), output);
  }

  // repeated int32 SkillIdArr = 3;
  for (int i = 0; i < this->skillidarr_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      3, this->skillidarr(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TSkillTriggerDeath)
}

::google::protobuf::uint8* TSkillTriggerDeath::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TSkillTriggerDeath)
  // required int32 StartTime = 1;
  if (has_starttime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->starttime(), target);
  }

  // required string AnimName = 2;
  if (has_animname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->animname().data(), this->animname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "animname");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->animname(), target);
  }

  // repeated int32 SkillIdArr = 3;
  for (int i = 0; i < this->skillidarr_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(3, this->skillidarr(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TSkillTriggerDeath)
  return target;
}

int TSkillTriggerDeath::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 StartTime = 1;
    if (has_starttime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->starttime());
    }

    // required string AnimName = 2;
    if (has_animname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->animname());
    }

  }
  // repeated int32 SkillIdArr = 3;
  {
    int data_size = 0;
    for (int i = 0; i < this->skillidarr_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->skillidarr(i));
    }
    total_size += 1 * this->skillidarr_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TSkillTriggerDeath::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TSkillTriggerDeath* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TSkillTriggerDeath*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TSkillTriggerDeath::MergeFrom(const TSkillTriggerDeath& from) {
  GOOGLE_CHECK_NE(&from, this);
  skillidarr_.MergeFrom(from.skillidarr_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_starttime()) {
      set_starttime(from.starttime());
    }
    if (from.has_animname()) {
      set_animname(from.animname());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TSkillTriggerDeath::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TSkillTriggerDeath::CopyFrom(const TSkillTriggerDeath& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TSkillTriggerDeath::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void TSkillTriggerDeath::Swap(TSkillTriggerDeath* other) {
  if (other != this) {
    std::swap(starttime_, other->starttime_);
    std::swap(animname_, other->animname_);
    skillidarr_.Swap(&other->skillidarr_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TSkillTriggerDeath::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TSkillTriggerDeath_descriptor_;
  metadata.reflection = TSkillTriggerDeath_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int BlendShapeInfo::kIndexFieldNumber;
const int BlendShapeInfo::kNameFieldNumber;
const int BlendShapeInfo::kStartTimeFieldNumber;
const int BlendShapeInfo::kFadeInTimeFieldNumber;
const int BlendShapeInfo::kLastTimeFieldNumber;
const int BlendShapeInfo::kFadeOutTimeFieldNumber;
const int BlendShapeInfo::kFadeInBlendWeightFieldNumber;
const int BlendShapeInfo::kLastBlendWeightFieldNumber;
const int BlendShapeInfo::kFadeOutBlendWeightFieldNumber;
const int BlendShapeInfo::kShowCountFieldNumber;
const int BlendShapeInfo::kHideCountFieldNumber;
#endif  // !_MSC_VER

BlendShapeInfo::BlendShapeInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.BlendShapeInfo)
}

void BlendShapeInfo::InitAsDefaultInstance() {
}

BlendShapeInfo::BlendShapeInfo(const BlendShapeInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.BlendShapeInfo)
}

void BlendShapeInfo::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  index_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  starttime_ = 0;
  fadeintime_ = 0;
  lasttime_ = 0;
  fadeouttime_ = 0;
  fadeinblendweight_ = 0;
  lastblendweight_ = 0;
  fadeoutblendweight_ = 0;
  showcount_ = 0;
  hidecount_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BlendShapeInfo::~BlendShapeInfo() {
  // @@protoc_insertion_point(destructor:pb.BlendShapeInfo)
  SharedDtor();
}

void BlendShapeInfo::SharedDtor() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void BlendShapeInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BlendShapeInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BlendShapeInfo_descriptor_;
}

const BlendShapeInfo& BlendShapeInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_module_2fAvatarData_2eproto();
  return *default_instance_;
}

BlendShapeInfo* BlendShapeInfo::default_instance_ = NULL;

BlendShapeInfo* BlendShapeInfo::New() const {
  return new BlendShapeInfo;
}

void BlendShapeInfo::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<BlendShapeInfo*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(index_, lastblendweight_);
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        name_->clear();
      }
    }
  }
  ZR_(fadeoutblendweight_, hidecount_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BlendShapeInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.BlendShapeInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 Index = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &index_)));
          set_has_index();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_Name;
        break;
      }

      // required string Name = 2;
      case 2: {
        if (tag == 18) {
         parse_Name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(29)) goto parse_StartTime;
        break;
      }

      // required float StartTime = 3;
      case 3: {
        if (tag == 29) {
         parse_StartTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &starttime_)));
          set_has_starttime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(37)) goto parse_FadeInTime;
        break;
      }

      // required float FadeInTime = 4;
      case 4: {
        if (tag == 37) {
         parse_FadeInTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &fadeintime_)));
          set_has_fadeintime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(45)) goto parse_LastTime;
        break;
      }

      // required float LastTime = 5;
      case 5: {
        if (tag == 45) {
         parse_LastTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &lasttime_)));
          set_has_lasttime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(53)) goto parse_FadeOutTime;
        break;
      }

      // required float FadeOutTime = 6;
      case 6: {
        if (tag == 53) {
         parse_FadeOutTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &fadeouttime_)));
          set_has_fadeouttime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(61)) goto parse_FadeInBlendWeight;
        break;
      }

      // required float FadeInBlendWeight = 7;
      case 7: {
        if (tag == 61) {
         parse_FadeInBlendWeight:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &fadeinblendweight_)));
          set_has_fadeinblendweight();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(69)) goto parse_LastBlendWeight;
        break;
      }

      // required float LastBlendWeight = 8;
      case 8: {
        if (tag == 69) {
         parse_LastBlendWeight:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &lastblendweight_)));
          set_has_lastblendweight();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(77)) goto parse_FadeOutBlendWeight;
        break;
      }

      // required float FadeOutBlendWeight = 9;
      case 9: {
        if (tag == 77) {
         parse_FadeOutBlendWeight:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &fadeoutblendweight_)));
          set_has_fadeoutblendweight();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(80)) goto parse_ShowCount;
        break;
      }

      // required int32 ShowCount = 10;
      case 10: {
        if (tag == 80) {
         parse_ShowCount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &showcount_)));
          set_has_showcount();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(88)) goto parse_HideCount;
        break;
      }

      // required int32 HideCount = 11;
      case 11: {
        if (tag == 88) {
         parse_HideCount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &hidecount_)));
          set_has_hidecount();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.BlendShapeInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.BlendShapeInfo)
  return false;
#undef DO_
}

void BlendShapeInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.BlendShapeInfo)
  // required int32 Index = 1;
  if (has_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->index(), output);
  }

  // required string Name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->name(), output);
  }

  // required float StartTime = 3;
  if (has_starttime()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->starttime(), output);
  }

  // required float FadeInTime = 4;
  if (has_fadeintime()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->fadeintime(), output);
  }

  // required float LastTime = 5;
  if (has_lasttime()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(5, this->lasttime(), output);
  }

  // required float FadeOutTime = 6;
  if (has_fadeouttime()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(6, this->fadeouttime(), output);
  }

  // required float FadeInBlendWeight = 7;
  if (has_fadeinblendweight()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(7, this->fadeinblendweight(), output);
  }

  // required float LastBlendWeight = 8;
  if (has_lastblendweight()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(8, this->lastblendweight(), output);
  }

  // required float FadeOutBlendWeight = 9;
  if (has_fadeoutblendweight()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(9, this->fadeoutblendweight(), output);
  }

  // required int32 ShowCount = 10;
  if (has_showcount()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->showcount(), output);
  }

  // required int32 HideCount = 11;
  if (has_hidecount()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->hidecount(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.BlendShapeInfo)
}

::google::protobuf::uint8* BlendShapeInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.BlendShapeInfo)
  // required int32 Index = 1;
  if (has_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->index(), target);
  }

  // required string Name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->name(), target);
  }

  // required float StartTime = 3;
  if (has_starttime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->starttime(), target);
  }

  // required float FadeInTime = 4;
  if (has_fadeintime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->fadeintime(), target);
  }

  // required float LastTime = 5;
  if (has_lasttime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(5, this->lasttime(), target);
  }

  // required float FadeOutTime = 6;
  if (has_fadeouttime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(6, this->fadeouttime(), target);
  }

  // required float FadeInBlendWeight = 7;
  if (has_fadeinblendweight()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(7, this->fadeinblendweight(), target);
  }

  // required float LastBlendWeight = 8;
  if (has_lastblendweight()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(8, this->lastblendweight(), target);
  }

  // required float FadeOutBlendWeight = 9;
  if (has_fadeoutblendweight()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(9, this->fadeoutblendweight(), target);
  }

  // required int32 ShowCount = 10;
  if (has_showcount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->showcount(), target);
  }

  // required int32 HideCount = 11;
  if (has_hidecount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(11, this->hidecount(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.BlendShapeInfo)
  return target;
}

int BlendShapeInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 Index = 1;
    if (has_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->index());
    }

    // required string Name = 2;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // required float StartTime = 3;
    if (has_starttime()) {
      total_size += 1 + 4;
    }

    // required float FadeInTime = 4;
    if (has_fadeintime()) {
      total_size += 1 + 4;
    }

    // required float LastTime = 5;
    if (has_lasttime()) {
      total_size += 1 + 4;
    }

    // required float FadeOutTime = 6;
    if (has_fadeouttime()) {
      total_size += 1 + 4;
    }

    // required float FadeInBlendWeight = 7;
    if (has_fadeinblendweight()) {
      total_size += 1 + 4;
    }

    // required float LastBlendWeight = 8;
    if (has_lastblendweight()) {
      total_size += 1 + 4;
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // required float FadeOutBlendWeight = 9;
    if (has_fadeoutblendweight()) {
      total_size += 1 + 4;
    }

    // required int32 ShowCount = 10;
    if (has_showcount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->showcount());
    }

    // required int32 HideCount = 11;
    if (has_hidecount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->hidecount());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BlendShapeInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BlendShapeInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BlendShapeInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BlendShapeInfo::MergeFrom(const BlendShapeInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_index()) {
      set_index(from.index());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_starttime()) {
      set_starttime(from.starttime());
    }
    if (from.has_fadeintime()) {
      set_fadeintime(from.fadeintime());
    }
    if (from.has_lasttime()) {
      set_lasttime(from.lasttime());
    }
    if (from.has_fadeouttime()) {
      set_fadeouttime(from.fadeouttime());
    }
    if (from.has_fadeinblendweight()) {
      set_fadeinblendweight(from.fadeinblendweight());
    }
    if (from.has_lastblendweight()) {
      set_lastblendweight(from.lastblendweight());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_fadeoutblendweight()) {
      set_fadeoutblendweight(from.fadeoutblendweight());
    }
    if (from.has_showcount()) {
      set_showcount(from.showcount());
    }
    if (from.has_hidecount()) {
      set_hidecount(from.hidecount());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BlendShapeInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BlendShapeInfo::CopyFrom(const BlendShapeInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BlendShapeInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x000007ff) != 0x000007ff) return false;

  return true;
}

void BlendShapeInfo::Swap(BlendShapeInfo* other) {
  if (other != this) {
    std::swap(index_, other->index_);
    std::swap(name_, other->name_);
    std::swap(starttime_, other->starttime_);
    std::swap(fadeintime_, other->fadeintime_);
    std::swap(lasttime_, other->lasttime_);
    std::swap(fadeouttime_, other->fadeouttime_);
    std::swap(fadeinblendweight_, other->fadeinblendweight_);
    std::swap(lastblendweight_, other->lastblendweight_);
    std::swap(fadeoutblendweight_, other->fadeoutblendweight_);
    std::swap(showcount_, other->showcount_);
    std::swap(hidecount_, other->hidecount_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BlendShapeInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BlendShapeInfo_descriptor_;
  metadata.reflection = BlendShapeInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AnimData::kAnimNameFieldNumber;
const int AnimData::kAnimTimeLengthFieldNumber;
const int AnimData::kPauseEndEventTimeFieldNumber;
const int AnimData::kEffectEventsFieldNumber;
const int AnimData::kAudioInfoArrFieldNumber;
const int AnimData::kTriggerEventsFieldNumber;
const int AnimData::kSkillTriggerEventsFieldNumber;
const int AnimData::kBlendShapeInfoListFieldNumber;
const int AnimData::kInitSocketPositionFieldNumber;
const int AnimData::kSkillTriggerDeathFieldNumber;
#endif  // !_MSC_VER

AnimData::AnimData()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.AnimData)
}

void AnimData::InitAsDefaultInstance() {
}

AnimData::AnimData(const AnimData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.AnimData)
}

void AnimData::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  animname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  animtimelength_ = 0;
  pauseendeventtime_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AnimData::~AnimData() {
  // @@protoc_insertion_point(destructor:pb.AnimData)
  SharedDtor();
}

void AnimData::SharedDtor() {
  if (animname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete animname_;
  }
  if (this != default_instance_) {
  }
}

void AnimData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AnimData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AnimData_descriptor_;
}

const AnimData& AnimData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_module_2fAvatarData_2eproto();
  return *default_instance_;
}

AnimData* AnimData::default_instance_ = NULL;

AnimData* AnimData::New() const {
  return new AnimData;
}

void AnimData::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<AnimData*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 7) {
    ZR_(animtimelength_, pauseendeventtime_);
    if (has_animname()) {
      if (animname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        animname_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  effectevents_.Clear();
  audioinfoarr_.Clear();
  triggerevents_.Clear();
  skilltriggerevents_.Clear();
  blendshapeinfolist_.Clear();
  initsocketposition_.Clear();
  skilltriggerdeath_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AnimData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.AnimData)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string AnimName = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_animname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->animname().data(), this->animname().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "animname");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_AnimTimeLength;
        break;
      }

      // required int32 AnimTimeLength = 2;
      case 2: {
        if (tag == 16) {
         parse_AnimTimeLength:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &animtimelength_)));
          set_has_animtimelength();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_PauseEndEventTime;
        break;
      }

      // required int32 PauseEndEventTime = 4;
      case 4: {
        if (tag == 32) {
         parse_PauseEndEventTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &pauseendeventtime_)));
          set_has_pauseendeventtime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_EffectEvents;
        break;
      }

      // repeated .pb.EffectEvent EffectEvents = 6;
      case 6: {
        if (tag == 50) {
         parse_EffectEvents:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_effectevents()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_EffectEvents;
        if (input->ExpectTag(58)) goto parse_AudioInfoArr;
        break;
      }

      // repeated .pb.AudioInfo AudioInfoArr = 7;
      case 7: {
        if (tag == 58) {
         parse_AudioInfoArr:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_audioinfoarr()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_AudioInfoArr;
        if (input->ExpectTag(66)) goto parse_TriggerEvents;
        break;
      }

      // repeated .pb.TriggerEvent TriggerEvents = 8;
      case 8: {
        if (tag == 66) {
         parse_TriggerEvents:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_triggerevents()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_TriggerEvents;
        if (input->ExpectTag(74)) goto parse_SkillTriggerEvents;
        break;
      }

      // repeated .pb.SkillTriggerEvent SkillTriggerEvents = 9;
      case 9: {
        if (tag == 74) {
         parse_SkillTriggerEvents:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_skilltriggerevents()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(74)) goto parse_SkillTriggerEvents;
        if (input->ExpectTag(82)) goto parse_BlendShapeInfoList;
        break;
      }

      // repeated .pb.BlendShapeInfo BlendShapeInfoList = 10;
      case 10: {
        if (tag == 82) {
         parse_BlendShapeInfoList:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_blendshapeinfolist()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(82)) goto parse_BlendShapeInfoList;
        if (input->ExpectTag(90)) goto parse_InitSocketPosition;
        break;
      }

      // repeated .pb.SocketPosition InitSocketPosition = 11;
      case 11: {
        if (tag == 90) {
         parse_InitSocketPosition:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_initsocketposition()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(90)) goto parse_InitSocketPosition;
        if (input->ExpectTag(98)) goto parse_SkillTriggerDeath;
        break;
      }

      // repeated .pb.TSkillTriggerDeath SkillTriggerDeath = 12;
      case 12: {
        if (tag == 98) {
         parse_SkillTriggerDeath:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_skilltriggerdeath()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(98)) goto parse_SkillTriggerDeath;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.AnimData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.AnimData)
  return false;
#undef DO_
}

void AnimData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.AnimData)
  // required string AnimName = 1;
  if (has_animname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->animname().data(), this->animname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "animname");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->animname(), output);
  }

  // required int32 AnimTimeLength = 2;
  if (has_animtimelength()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->animtimelength(), output);
  }

  // required int32 PauseEndEventTime = 4;
  if (has_pauseendeventtime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->pauseendeventtime(), output);
  }

  // repeated .pb.EffectEvent EffectEvents = 6;
  for (int i = 0; i < this->effectevents_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->effectevents(i), output);
  }

  // repeated .pb.AudioInfo AudioInfoArr = 7;
  for (int i = 0; i < this->audioinfoarr_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->audioinfoarr(i), output);
  }

  // repeated .pb.TriggerEvent TriggerEvents = 8;
  for (int i = 0; i < this->triggerevents_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, this->triggerevents(i), output);
  }

  // repeated .pb.SkillTriggerEvent SkillTriggerEvents = 9;
  for (int i = 0; i < this->skilltriggerevents_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, this->skilltriggerevents(i), output);
  }

  // repeated .pb.BlendShapeInfo BlendShapeInfoList = 10;
  for (int i = 0; i < this->blendshapeinfolist_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, this->blendshapeinfolist(i), output);
  }

  // repeated .pb.SocketPosition InitSocketPosition = 11;
  for (int i = 0; i < this->initsocketposition_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      11, this->initsocketposition(i), output);
  }

  // repeated .pb.TSkillTriggerDeath SkillTriggerDeath = 12;
  for (int i = 0; i < this->skilltriggerdeath_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      12, this->skilltriggerdeath(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.AnimData)
}

::google::protobuf::uint8* AnimData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.AnimData)
  // required string AnimName = 1;
  if (has_animname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->animname().data(), this->animname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "animname");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->animname(), target);
  }

  // required int32 AnimTimeLength = 2;
  if (has_animtimelength()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->animtimelength(), target);
  }

  // required int32 PauseEndEventTime = 4;
  if (has_pauseendeventtime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->pauseendeventtime(), target);
  }

  // repeated .pb.EffectEvent EffectEvents = 6;
  for (int i = 0; i < this->effectevents_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->effectevents(i), target);
  }

  // repeated .pb.AudioInfo AudioInfoArr = 7;
  for (int i = 0; i < this->audioinfoarr_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->audioinfoarr(i), target);
  }

  // repeated .pb.TriggerEvent TriggerEvents = 8;
  for (int i = 0; i < this->triggerevents_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        8, this->triggerevents(i), target);
  }

  // repeated .pb.SkillTriggerEvent SkillTriggerEvents = 9;
  for (int i = 0; i < this->skilltriggerevents_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        9, this->skilltriggerevents(i), target);
  }

  // repeated .pb.BlendShapeInfo BlendShapeInfoList = 10;
  for (int i = 0; i < this->blendshapeinfolist_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        10, this->blendshapeinfolist(i), target);
  }

  // repeated .pb.SocketPosition InitSocketPosition = 11;
  for (int i = 0; i < this->initsocketposition_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        11, this->initsocketposition(i), target);
  }

  // repeated .pb.TSkillTriggerDeath SkillTriggerDeath = 12;
  for (int i = 0; i < this->skilltriggerdeath_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        12, this->skilltriggerdeath(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.AnimData)
  return target;
}

int AnimData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string AnimName = 1;
    if (has_animname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->animname());
    }

    // required int32 AnimTimeLength = 2;
    if (has_animtimelength()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->animtimelength());
    }

    // required int32 PauseEndEventTime = 4;
    if (has_pauseendeventtime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->pauseendeventtime());
    }

  }
  // repeated .pb.EffectEvent EffectEvents = 6;
  total_size += 1 * this->effectevents_size();
  for (int i = 0; i < this->effectevents_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->effectevents(i));
  }

  // repeated .pb.AudioInfo AudioInfoArr = 7;
  total_size += 1 * this->audioinfoarr_size();
  for (int i = 0; i < this->audioinfoarr_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->audioinfoarr(i));
  }

  // repeated .pb.TriggerEvent TriggerEvents = 8;
  total_size += 1 * this->triggerevents_size();
  for (int i = 0; i < this->triggerevents_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->triggerevents(i));
  }

  // repeated .pb.SkillTriggerEvent SkillTriggerEvents = 9;
  total_size += 1 * this->skilltriggerevents_size();
  for (int i = 0; i < this->skilltriggerevents_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->skilltriggerevents(i));
  }

  // repeated .pb.BlendShapeInfo BlendShapeInfoList = 10;
  total_size += 1 * this->blendshapeinfolist_size();
  for (int i = 0; i < this->blendshapeinfolist_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->blendshapeinfolist(i));
  }

  // repeated .pb.SocketPosition InitSocketPosition = 11;
  total_size += 1 * this->initsocketposition_size();
  for (int i = 0; i < this->initsocketposition_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->initsocketposition(i));
  }

  // repeated .pb.TSkillTriggerDeath SkillTriggerDeath = 12;
  total_size += 1 * this->skilltriggerdeath_size();
  for (int i = 0; i < this->skilltriggerdeath_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->skilltriggerdeath(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AnimData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AnimData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AnimData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AnimData::MergeFrom(const AnimData& from) {
  GOOGLE_CHECK_NE(&from, this);
  effectevents_.MergeFrom(from.effectevents_);
  audioinfoarr_.MergeFrom(from.audioinfoarr_);
  triggerevents_.MergeFrom(from.triggerevents_);
  skilltriggerevents_.MergeFrom(from.skilltriggerevents_);
  blendshapeinfolist_.MergeFrom(from.blendshapeinfolist_);
  initsocketposition_.MergeFrom(from.initsocketposition_);
  skilltriggerdeath_.MergeFrom(from.skilltriggerdeath_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_animname()) {
      set_animname(from.animname());
    }
    if (from.has_animtimelength()) {
      set_animtimelength(from.animtimelength());
    }
    if (from.has_pauseendeventtime()) {
      set_pauseendeventtime(from.pauseendeventtime());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AnimData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AnimData::CopyFrom(const AnimData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AnimData::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  if (!::google::protobuf::internal::AllAreInitialized(this->effectevents())) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->triggerevents())) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->skilltriggerevents())) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->blendshapeinfolist())) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->initsocketposition())) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->skilltriggerdeath())) return false;
  return true;
}

void AnimData::Swap(AnimData* other) {
  if (other != this) {
    std::swap(animname_, other->animname_);
    std::swap(animtimelength_, other->animtimelength_);
    std::swap(pauseendeventtime_, other->pauseendeventtime_);
    effectevents_.Swap(&other->effectevents_);
    audioinfoarr_.Swap(&other->audioinfoarr_);
    triggerevents_.Swap(&other->triggerevents_);
    skilltriggerevents_.Swap(&other->skilltriggerevents_);
    blendshapeinfolist_.Swap(&other->blendshapeinfolist_);
    initsocketposition_.Swap(&other->initsocketposition_);
    skilltriggerdeath_.Swap(&other->skilltriggerdeath_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AnimData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AnimData_descriptor_;
  metadata.reflection = AnimData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AvatarData::kIdFieldNumber;
const int AvatarData::kAvatarNameFieldNumber;
const int AvatarData::kAnimDatasFieldNumber;
#endif  // !_MSC_VER

AvatarData::AvatarData()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.AvatarData)
}

void AvatarData::InitAsDefaultInstance() {
}

AvatarData::AvatarData(const AvatarData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.AvatarData)
}

void AvatarData::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  id_ = 0;
  avatarname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AvatarData::~AvatarData() {
  // @@protoc_insertion_point(destructor:pb.AvatarData)
  SharedDtor();
}

void AvatarData::SharedDtor() {
  if (avatarname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete avatarname_;
  }
  if (this != default_instance_) {
  }
}

void AvatarData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AvatarData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AvatarData_descriptor_;
}

const AvatarData& AvatarData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_module_2fAvatarData_2eproto();
  return *default_instance_;
}

AvatarData* AvatarData::default_instance_ = NULL;

AvatarData* AvatarData::New() const {
  return new AvatarData;
}

void AvatarData::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    id_ = 0;
    if (has_avatarname()) {
      if (avatarname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        avatarname_->clear();
      }
    }
  }
  animdatas_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AvatarData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.AvatarData)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 Id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_AvatarName;
        break;
      }

      // required string AvatarName = 2;
      case 2: {
        if (tag == 18) {
         parse_AvatarName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_avatarname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->avatarname().data(), this->avatarname().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "avatarname");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_AnimDatas;
        break;
      }

      // repeated .pb.AnimData AnimDatas = 3;
      case 3: {
        if (tag == 26) {
         parse_AnimDatas:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_animdatas()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_AnimDatas;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.AvatarData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.AvatarData)
  return false;
#undef DO_
}

void AvatarData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.AvatarData)
  // required int32 Id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // required string AvatarName = 2;
  if (has_avatarname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->avatarname().data(), this->avatarname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "avatarname");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->avatarname(), output);
  }

  // repeated .pb.AnimData AnimDatas = 3;
  for (int i = 0; i < this->animdatas_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->animdatas(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.AvatarData)
}

::google::protobuf::uint8* AvatarData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.AvatarData)
  // required int32 Id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // required string AvatarName = 2;
  if (has_avatarname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->avatarname().data(), this->avatarname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "avatarname");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->avatarname(), target);
  }

  // repeated .pb.AnimData AnimDatas = 3;
  for (int i = 0; i < this->animdatas_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->animdatas(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.AvatarData)
  return target;
}

int AvatarData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 Id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

    // required string AvatarName = 2;
    if (has_avatarname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->avatarname());
    }

  }
  // repeated .pb.AnimData AnimDatas = 3;
  total_size += 1 * this->animdatas_size();
  for (int i = 0; i < this->animdatas_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->animdatas(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AvatarData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AvatarData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AvatarData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AvatarData::MergeFrom(const AvatarData& from) {
  GOOGLE_CHECK_NE(&from, this);
  animdatas_.MergeFrom(from.animdatas_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_avatarname()) {
      set_avatarname(from.avatarname());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AvatarData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AvatarData::CopyFrom(const AvatarData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AvatarData::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  if (!::google::protobuf::internal::AllAreInitialized(this->animdatas())) return false;
  return true;
}

void AvatarData::Swap(AvatarData* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(avatarname_, other->avatarname_);
    animdatas_.Swap(&other->animdatas_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AvatarData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AvatarData_descriptor_;
  metadata.reflection = AvatarData_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace pb

// @@protoc_insertion_point(global_scope)
