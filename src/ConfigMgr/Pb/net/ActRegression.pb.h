// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: net/ActRegression.proto

#ifndef PROTOBUF_net_2fActRegression_2eproto__INCLUDED
#define PROTOBUF_net_2fActRegression_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace pb {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_net_2fActRegression_2eproto();
void protobuf_AssignDesc_net_2fActRegression_2eproto();
void protobuf_ShutdownFile_net_2fActRegression_2eproto();

class TActRegressionGetActInfoRsp;
class TActRegressionTaskInfo;
class TActRegressionTaskStateInfo;
class TActRegressionGoodInfo;
class TActRegressionRmbGoodsNotify;
class TActRegressionExchangeReq;
class TActRegressionBuyGoldGoodsReq;
class TActRegressionFinishTaskReq;
class TActRegressionFinishTaskNotify;
class TActRegressionRetrieveReq;
class TActRegressionExchangeRetrieveNumReq;

enum ETaskState {
  ETaskStateNotReceive = 1,
  ETaskStateReceived = 2,
  ETaskStateNotFinish = 3
};
bool ETaskState_IsValid(int value);
const ETaskState ETaskState_MIN = ETaskStateNotReceive;
const ETaskState ETaskState_MAX = ETaskStateNotFinish;
const int ETaskState_ARRAYSIZE = ETaskState_MAX + 1;

const ::google::protobuf::EnumDescriptor* ETaskState_descriptor();
inline const ::std::string& ETaskState_Name(ETaskState value) {
  return ::google::protobuf::internal::NameOfEnum(
    ETaskState_descriptor(), value);
}
inline bool ETaskState_Parse(
    const ::std::string& name, ETaskState* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ETaskState>(
    ETaskState_descriptor(), name, value);
}
// ===================================================================

/*FOR2LUA
<Record>
	<name>TActRegressionGetActInfoRsp</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/ActRegression.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TActRegressionGetActInfoRsp : public ::google::protobuf::Message {
 public:
  TActRegressionGetActInfoRsp();
  virtual ~TActRegressionGetActInfoRsp();

  TActRegressionGetActInfoRsp(const TActRegressionGetActInfoRsp& from);

  inline TActRegressionGetActInfoRsp& operator=(const TActRegressionGetActInfoRsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TActRegressionGetActInfoRsp& default_instance();

  void Swap(TActRegressionGetActInfoRsp* other);

  // implements Message ----------------------------------------------

  TActRegressionGetActInfoRsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TActRegressionGetActInfoRsp& from);
  void MergeFrom(const TActRegressionGetActInfoRsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 Level = 1;
  inline bool has_level() const;
  inline void clear_level();
  static const int kLevelFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TActRegressionGetActInfoRsp</name>
  	<Function>
  		<name>level</name>
  		<replaceName>Level</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_level</name>
  		<replaceName>Level</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_level</name>
  		<replaceName>Level</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 level() const;
  inline void set_level(::google::protobuf::uint32 value);

  // optional uint32 Score = 2;
  inline bool has_score() const;
  inline void clear_score();
  static const int kScoreFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TActRegressionGetActInfoRsp</name>
  	<Function>
  		<name>score</name>
  		<replaceName>Score</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_score</name>
  		<replaceName>Score</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_score</name>
  		<replaceName>Score</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 score() const;
  inline void set_score(::google::protobuf::uint32 value);

  // repeated .pb.TActRegressionGoodInfo RmbGoodArr = 3;
  inline int rmbgoodarr_size() const;
  inline void clear_rmbgoodarr();
  static const int kRmbGoodArrFieldNumber = 3;
  /*FOR2LUA
  <Record>
  	<name>TActRegressionGetActInfoRsp</name>
  	<Function>
  		<name>rmbgoodarr</name>
  		<replaceName>RmbGoodArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_rmbgoodarr</name>
  		<replaceName>RmbGoodArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_rmbgoodarr</name>
  		<replaceName>RmbGoodArr</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_rmbgoodarr</name>
  		<replaceName>RmbGoodArr</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>rmbgoodarr_size</name>
  		<replaceName>RmbGoodArr</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TActRegressionGoodInfo& rmbgoodarr(int index) const;
  inline ::pb::TActRegressionGoodInfo* mutable_rmbgoodarr(int index);
  inline ::pb::TActRegressionGoodInfo* add_rmbgoodarr();
  inline const ::google::protobuf::RepeatedPtrField< ::pb::TActRegressionGoodInfo >&
      rmbgoodarr() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb::TActRegressionGoodInfo >*
      mutable_rmbgoodarr();

  // repeated .pb.TActRegressionGoodInfo ExchangeGoodArr = 4;
  inline int exchangegoodarr_size() const;
  inline void clear_exchangegoodarr();
  static const int kExchangeGoodArrFieldNumber = 4;
  /*FOR2LUA
  <Record>
  	<name>TActRegressionGetActInfoRsp</name>
  	<Function>
  		<name>exchangegoodarr</name>
  		<replaceName>ExchangeGoodArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_exchangegoodarr</name>
  		<replaceName>ExchangeGoodArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_exchangegoodarr</name>
  		<replaceName>ExchangeGoodArr</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_exchangegoodarr</name>
  		<replaceName>ExchangeGoodArr</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>exchangegoodarr_size</name>
  		<replaceName>ExchangeGoodArr</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TActRegressionGoodInfo& exchangegoodarr(int index) const;
  inline ::pb::TActRegressionGoodInfo* mutable_exchangegoodarr(int index);
  inline ::pb::TActRegressionGoodInfo* add_exchangegoodarr();
  inline const ::google::protobuf::RepeatedPtrField< ::pb::TActRegressionGoodInfo >&
      exchangegoodarr() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb::TActRegressionGoodInfo >*
      mutable_exchangegoodarr();

  // repeated .pb.TActRegressionGoodInfo GoldGoodArr = 9;
  inline int goldgoodarr_size() const;
  inline void clear_goldgoodarr();
  static const int kGoldGoodArrFieldNumber = 9;
  /*FOR2LUA
  <Record>
  	<name>TActRegressionGetActInfoRsp</name>
  	<Function>
  		<name>goldgoodarr</name>
  		<replaceName>GoldGoodArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_goldgoodarr</name>
  		<replaceName>GoldGoodArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_goldgoodarr</name>
  		<replaceName>GoldGoodArr</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_goldgoodarr</name>
  		<replaceName>GoldGoodArr</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>goldgoodarr_size</name>
  		<replaceName>GoldGoodArr</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TActRegressionGoodInfo& goldgoodarr(int index) const;
  inline ::pb::TActRegressionGoodInfo* mutable_goldgoodarr(int index);
  inline ::pb::TActRegressionGoodInfo* add_goldgoodarr();
  inline const ::google::protobuf::RepeatedPtrField< ::pb::TActRegressionGoodInfo >&
      goldgoodarr() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb::TActRegressionGoodInfo >*
      mutable_goldgoodarr();

  // repeated .pb.TActRegressionTaskInfo TaskArr = 5;
  inline int taskarr_size() const;
  inline void clear_taskarr();
  static const int kTaskArrFieldNumber = 5;
  /*FOR2LUA
  <Record>
  	<name>TActRegressionGetActInfoRsp</name>
  	<Function>
  		<name>taskarr</name>
  		<replaceName>TaskArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_taskarr</name>
  		<replaceName>TaskArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_taskarr</name>
  		<replaceName>TaskArr</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_taskarr</name>
  		<replaceName>TaskArr</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>taskarr_size</name>
  		<replaceName>TaskArr</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TActRegressionTaskInfo& taskarr(int index) const;
  inline ::pb::TActRegressionTaskInfo* mutable_taskarr(int index);
  inline ::pb::TActRegressionTaskInfo* add_taskarr();
  inline const ::google::protobuf::RepeatedPtrField< ::pb::TActRegressionTaskInfo >&
      taskarr() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb::TActRegressionTaskInfo >*
      mutable_taskarr();

  // optional uint32 OfflineDays = 6;
  inline bool has_offlinedays() const;
  inline void clear_offlinedays();
  static const int kOfflineDaysFieldNumber = 6;
  /*FOR2LUA
  <Record>
  	<name>TActRegressionGetActInfoRsp</name>
  	<Function>
  		<name>offlinedays</name>
  		<replaceName>OfflineDays</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_offlinedays</name>
  		<replaceName>OfflineDays</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_offlinedays</name>
  		<replaceName>OfflineDays</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 offlinedays() const;
  inline void set_offlinedays(::google::protobuf::uint32 value);

  // optional uint32 ReceivedReturnGift = 7;
  inline bool has_receivedreturngift() const;
  inline void clear_receivedreturngift();
  static const int kReceivedReturnGiftFieldNumber = 7;
  /*FOR2LUA
  <Record>
  	<name>TActRegressionGetActInfoRsp</name>
  	<Function>
  		<name>receivedreturngift</name>
  		<replaceName>ReceivedReturnGift</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_receivedreturngift</name>
  		<replaceName>ReceivedReturnGift</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_receivedreturngift</name>
  		<replaceName>ReceivedReturnGift</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 receivedreturngift() const;
  inline void set_receivedreturngift(::google::protobuf::uint32 value);

  // optional uint64 ReturnTime = 8;
  inline bool has_returntime() const;
  inline void clear_returntime();
  static const int kReturnTimeFieldNumber = 8;
  /*FOR2LUA
  <Record>
  	<name>TActRegressionGetActInfoRsp</name>
  	<Function>
  		<name>returntime</name>
  		<replaceName>ReturnTime</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_returntime</name>
  		<replaceName>ReturnTime</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_returntime</name>
  		<replaceName>ReturnTime</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint64 returntime() const;
  inline void set_returntime(::google::protobuf::uint64 value);

  // optional uint32 AvaRetrieveNum = 10;
  inline bool has_avaretrievenum() const;
  inline void clear_avaretrievenum();
  static const int kAvaRetrieveNumFieldNumber = 10;
  /*FOR2LUA
  <Record>
  	<name>TActRegressionGetActInfoRsp</name>
  	<Function>
  		<name>avaretrievenum</name>
  		<replaceName>AvaRetrieveNum</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_avaretrievenum</name>
  		<replaceName>AvaRetrieveNum</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_avaretrievenum</name>
  		<replaceName>AvaRetrieveNum</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 avaretrievenum() const;
  inline void set_avaretrievenum(::google::protobuf::uint32 value);

  // optional uint32 PaidPoints = 11;
  inline bool has_paidpoints() const;
  inline void clear_paidpoints();
  static const int kPaidPointsFieldNumber = 11;
  /*FOR2LUA
  <Record>
  	<name>TActRegressionGetActInfoRsp</name>
  	<Function>
  		<name>paidpoints</name>
  		<replaceName>PaidPoints</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_paidpoints</name>
  		<replaceName>PaidPoints</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_paidpoints</name>
  		<replaceName>PaidPoints</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 paidpoints() const;
  inline void set_paidpoints(::google::protobuf::uint32 value);

  // optional uint32 FreePoints = 12;
  inline bool has_freepoints() const;
  inline void clear_freepoints();
  static const int kFreePointsFieldNumber = 12;
  /*FOR2LUA
  <Record>
  	<name>TActRegressionGetActInfoRsp</name>
  	<Function>
  		<name>freepoints</name>
  		<replaceName>FreePoints</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_freepoints</name>
  		<replaceName>FreePoints</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_freepoints</name>
  		<replaceName>FreePoints</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 freepoints() const;
  inline void set_freepoints(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:pb.TActRegressionGetActInfoRsp)
 private:
  inline void set_has_level();
  inline void clear_has_level();
  inline void set_has_score();
  inline void clear_has_score();
  inline void set_has_offlinedays();
  inline void clear_has_offlinedays();
  inline void set_has_receivedreturngift();
  inline void clear_has_receivedreturngift();
  inline void set_has_returntime();
  inline void clear_has_returntime();
  inline void set_has_avaretrievenum();
  inline void clear_has_avaretrievenum();
  inline void set_has_paidpoints();
  inline void clear_has_paidpoints();
  inline void set_has_freepoints();
  inline void clear_has_freepoints();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 level_;
  ::google::protobuf::uint32 score_;
  ::google::protobuf::RepeatedPtrField< ::pb::TActRegressionGoodInfo > rmbgoodarr_;
  ::google::protobuf::RepeatedPtrField< ::pb::TActRegressionGoodInfo > exchangegoodarr_;
  ::google::protobuf::RepeatedPtrField< ::pb::TActRegressionGoodInfo > goldgoodarr_;
  ::google::protobuf::RepeatedPtrField< ::pb::TActRegressionTaskInfo > taskarr_;
  ::google::protobuf::uint32 offlinedays_;
  ::google::protobuf::uint32 receivedreturngift_;
  ::google::protobuf::uint64 returntime_;
  ::google::protobuf::uint32 avaretrievenum_;
  ::google::protobuf::uint32 paidpoints_;
  ::google::protobuf::uint32 freepoints_;
  friend void  protobuf_AddDesc_net_2fActRegression_2eproto();
  friend void protobuf_AssignDesc_net_2fActRegression_2eproto();
  friend void protobuf_ShutdownFile_net_2fActRegression_2eproto();

  void InitAsDefaultInstance();
  static TActRegressionGetActInfoRsp* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TActRegressionTaskInfo</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/ActRegression.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TActRegressionTaskInfo : public ::google::protobuf::Message {
 public:
  TActRegressionTaskInfo();
  virtual ~TActRegressionTaskInfo();

  TActRegressionTaskInfo(const TActRegressionTaskInfo& from);

  inline TActRegressionTaskInfo& operator=(const TActRegressionTaskInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TActRegressionTaskInfo& default_instance();

  void Swap(TActRegressionTaskInfo* other);

  // implements Message ----------------------------------------------

  TActRegressionTaskInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TActRegressionTaskInfo& from);
  void MergeFrom(const TActRegressionTaskInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 TaskType = 1;
  inline bool has_tasktype() const;
  inline void clear_tasktype();
  static const int kTaskTypeFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TActRegressionTaskInfo</name>
  	<Function>
  		<name>tasktype</name>
  		<replaceName>TaskType</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_tasktype</name>
  		<replaceName>TaskType</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_tasktype</name>
  		<replaceName>TaskType</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 tasktype() const;
  inline void set_tasktype(::google::protobuf::uint32 value);

  // optional uint32 FinishNum = 2;
  inline bool has_finishnum() const;
  inline void clear_finishnum();
  static const int kFinishNumFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TActRegressionTaskInfo</name>
  	<Function>
  		<name>finishnum</name>
  		<replaceName>FinishNum</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_finishnum</name>
  		<replaceName>FinishNum</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_finishnum</name>
  		<replaceName>FinishNum</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 finishnum() const;
  inline void set_finishnum(::google::protobuf::uint32 value);

  // repeated .pb.TActRegressionTaskStateInfo TaskStateArr = 3;
  inline int taskstatearr_size() const;
  inline void clear_taskstatearr();
  static const int kTaskStateArrFieldNumber = 3;
  /*FOR2LUA
  <Record>
  	<name>TActRegressionTaskInfo</name>
  	<Function>
  		<name>taskstatearr</name>
  		<replaceName>TaskStateArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_taskstatearr</name>
  		<replaceName>TaskStateArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_taskstatearr</name>
  		<replaceName>TaskStateArr</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_taskstatearr</name>
  		<replaceName>TaskStateArr</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>taskstatearr_size</name>
  		<replaceName>TaskStateArr</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TActRegressionTaskStateInfo& taskstatearr(int index) const;
  inline ::pb::TActRegressionTaskStateInfo* mutable_taskstatearr(int index);
  inline ::pb::TActRegressionTaskStateInfo* add_taskstatearr();
  inline const ::google::protobuf::RepeatedPtrField< ::pb::TActRegressionTaskStateInfo >&
      taskstatearr() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb::TActRegressionTaskStateInfo >*
      mutable_taskstatearr();

  // @@protoc_insertion_point(class_scope:pb.TActRegressionTaskInfo)
 private:
  inline void set_has_tasktype();
  inline void clear_has_tasktype();
  inline void set_has_finishnum();
  inline void clear_has_finishnum();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 tasktype_;
  ::google::protobuf::uint32 finishnum_;
  ::google::protobuf::RepeatedPtrField< ::pb::TActRegressionTaskStateInfo > taskstatearr_;
  friend void  protobuf_AddDesc_net_2fActRegression_2eproto();
  friend void protobuf_AssignDesc_net_2fActRegression_2eproto();
  friend void protobuf_ShutdownFile_net_2fActRegression_2eproto();

  void InitAsDefaultInstance();
  static TActRegressionTaskInfo* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TActRegressionTaskStateInfo</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/ActRegression.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TActRegressionTaskStateInfo : public ::google::protobuf::Message {
 public:
  TActRegressionTaskStateInfo();
  virtual ~TActRegressionTaskStateInfo();

  TActRegressionTaskStateInfo(const TActRegressionTaskStateInfo& from);

  inline TActRegressionTaskStateInfo& operator=(const TActRegressionTaskStateInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TActRegressionTaskStateInfo& default_instance();

  void Swap(TActRegressionTaskStateInfo* other);

  // implements Message ----------------------------------------------

  TActRegressionTaskStateInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TActRegressionTaskStateInfo& from);
  void MergeFrom(const TActRegressionTaskStateInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 TaskId = 1;
  inline bool has_taskid() const;
  inline void clear_taskid();
  static const int kTaskIdFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TActRegressionTaskStateInfo</name>
  	<Function>
  		<name>taskid</name>
  		<replaceName>TaskId</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_taskid</name>
  		<replaceName>TaskId</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_taskid</name>
  		<replaceName>TaskId</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 taskid() const;
  inline void set_taskid(::google::protobuf::uint32 value);

  // optional .pb.ETaskState TaskState = 2;
  inline bool has_taskstate() const;
  inline void clear_taskstate();
  static const int kTaskStateFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TActRegressionTaskStateInfo</name>
  	<Function>
  		<name>taskstate</name>
  		<replaceName>TaskState</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_taskstate</name>
  		<replaceName>TaskState</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_taskstate</name>
  		<replaceName>TaskState</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::pb::ETaskState taskstate() const;
  inline void set_taskstate(::pb::ETaskState value);

  // @@protoc_insertion_point(class_scope:pb.TActRegressionTaskStateInfo)
 private:
  inline void set_has_taskid();
  inline void clear_has_taskid();
  inline void set_has_taskstate();
  inline void clear_has_taskstate();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 taskid_;
  int taskstate_;
  friend void  protobuf_AddDesc_net_2fActRegression_2eproto();
  friend void protobuf_AssignDesc_net_2fActRegression_2eproto();
  friend void protobuf_ShutdownFile_net_2fActRegression_2eproto();

  void InitAsDefaultInstance();
  static TActRegressionTaskStateInfo* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TActRegressionGoodInfo</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/ActRegression.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TActRegressionGoodInfo : public ::google::protobuf::Message {
 public:
  TActRegressionGoodInfo();
  virtual ~TActRegressionGoodInfo();

  TActRegressionGoodInfo(const TActRegressionGoodInfo& from);

  inline TActRegressionGoodInfo& operator=(const TActRegressionGoodInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TActRegressionGoodInfo& default_instance();

  void Swap(TActRegressionGoodInfo* other);

  // implements Message ----------------------------------------------

  TActRegressionGoodInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TActRegressionGoodInfo& from);
  void MergeFrom(const TActRegressionGoodInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 GoodId = 1;
  inline bool has_goodid() const;
  inline void clear_goodid();
  static const int kGoodIdFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TActRegressionGoodInfo</name>
  	<Function>
  		<name>goodid</name>
  		<replaceName>GoodId</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_goodid</name>
  		<replaceName>GoodId</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_goodid</name>
  		<replaceName>GoodId</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 goodid() const;
  inline void set_goodid(::google::protobuf::uint32 value);

  // optional uint32 BoughtNum = 2;
  inline bool has_boughtnum() const;
  inline void clear_boughtnum();
  static const int kBoughtNumFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TActRegressionGoodInfo</name>
  	<Function>
  		<name>boughtnum</name>
  		<replaceName>BoughtNum</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_boughtnum</name>
  		<replaceName>BoughtNum</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_boughtnum</name>
  		<replaceName>BoughtNum</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 boughtnum() const;
  inline void set_boughtnum(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:pb.TActRegressionGoodInfo)
 private:
  inline void set_has_goodid();
  inline void clear_has_goodid();
  inline void set_has_boughtnum();
  inline void clear_has_boughtnum();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 goodid_;
  ::google::protobuf::uint32 boughtnum_;
  friend void  protobuf_AddDesc_net_2fActRegression_2eproto();
  friend void protobuf_AssignDesc_net_2fActRegression_2eproto();
  friend void protobuf_ShutdownFile_net_2fActRegression_2eproto();

  void InitAsDefaultInstance();
  static TActRegressionGoodInfo* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TActRegressionRmbGoodsNotify</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/ActRegression.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TActRegressionRmbGoodsNotify : public ::google::protobuf::Message {
 public:
  TActRegressionRmbGoodsNotify();
  virtual ~TActRegressionRmbGoodsNotify();

  TActRegressionRmbGoodsNotify(const TActRegressionRmbGoodsNotify& from);

  inline TActRegressionRmbGoodsNotify& operator=(const TActRegressionRmbGoodsNotify& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TActRegressionRmbGoodsNotify& default_instance();

  void Swap(TActRegressionRmbGoodsNotify* other);

  // implements Message ----------------------------------------------

  TActRegressionRmbGoodsNotify* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TActRegressionRmbGoodsNotify& from);
  void MergeFrom(const TActRegressionRmbGoodsNotify& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .pb.TActRegressionGoodInfo GoodsArr = 1;
  inline int goodsarr_size() const;
  inline void clear_goodsarr();
  static const int kGoodsArrFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TActRegressionRmbGoodsNotify</name>
  	<Function>
  		<name>goodsarr</name>
  		<replaceName>GoodsArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_goodsarr</name>
  		<replaceName>GoodsArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_goodsarr</name>
  		<replaceName>GoodsArr</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_goodsarr</name>
  		<replaceName>GoodsArr</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>goodsarr_size</name>
  		<replaceName>GoodsArr</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TActRegressionGoodInfo& goodsarr(int index) const;
  inline ::pb::TActRegressionGoodInfo* mutable_goodsarr(int index);
  inline ::pb::TActRegressionGoodInfo* add_goodsarr();
  inline const ::google::protobuf::RepeatedPtrField< ::pb::TActRegressionGoodInfo >&
      goodsarr() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb::TActRegressionGoodInfo >*
      mutable_goodsarr();

  // @@protoc_insertion_point(class_scope:pb.TActRegressionRmbGoodsNotify)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::pb::TActRegressionGoodInfo > goodsarr_;
  friend void  protobuf_AddDesc_net_2fActRegression_2eproto();
  friend void protobuf_AssignDesc_net_2fActRegression_2eproto();
  friend void protobuf_ShutdownFile_net_2fActRegression_2eproto();

  void InitAsDefaultInstance();
  static TActRegressionRmbGoodsNotify* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TActRegressionExchangeReq</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/ActRegression.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TActRegressionExchangeReq : public ::google::protobuf::Message {
 public:
  TActRegressionExchangeReq();
  virtual ~TActRegressionExchangeReq();

  TActRegressionExchangeReq(const TActRegressionExchangeReq& from);

  inline TActRegressionExchangeReq& operator=(const TActRegressionExchangeReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TActRegressionExchangeReq& default_instance();

  void Swap(TActRegressionExchangeReq* other);

  // implements Message ----------------------------------------------

  TActRegressionExchangeReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TActRegressionExchangeReq& from);
  void MergeFrom(const TActRegressionExchangeReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 GoodId = 1;
  inline bool has_goodid() const;
  inline void clear_goodid();
  static const int kGoodIdFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TActRegressionExchangeReq</name>
  	<Function>
  		<name>goodid</name>
  		<replaceName>GoodId</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_goodid</name>
  		<replaceName>GoodId</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_goodid</name>
  		<replaceName>GoodId</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 goodid() const;
  inline void set_goodid(::google::protobuf::uint32 value);

  // optional uint32 Num = 2;
  inline bool has_num() const;
  inline void clear_num();
  static const int kNumFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TActRegressionExchangeReq</name>
  	<Function>
  		<name>num</name>
  		<replaceName>Num</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_num</name>
  		<replaceName>Num</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_num</name>
  		<replaceName>Num</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 num() const;
  inline void set_num(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:pb.TActRegressionExchangeReq)
 private:
  inline void set_has_goodid();
  inline void clear_has_goodid();
  inline void set_has_num();
  inline void clear_has_num();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 goodid_;
  ::google::protobuf::uint32 num_;
  friend void  protobuf_AddDesc_net_2fActRegression_2eproto();
  friend void protobuf_AssignDesc_net_2fActRegression_2eproto();
  friend void protobuf_ShutdownFile_net_2fActRegression_2eproto();

  void InitAsDefaultInstance();
  static TActRegressionExchangeReq* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TActRegressionBuyGoldGoodsReq</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/ActRegression.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TActRegressionBuyGoldGoodsReq : public ::google::protobuf::Message {
 public:
  TActRegressionBuyGoldGoodsReq();
  virtual ~TActRegressionBuyGoldGoodsReq();

  TActRegressionBuyGoldGoodsReq(const TActRegressionBuyGoldGoodsReq& from);

  inline TActRegressionBuyGoldGoodsReq& operator=(const TActRegressionBuyGoldGoodsReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TActRegressionBuyGoldGoodsReq& default_instance();

  void Swap(TActRegressionBuyGoldGoodsReq* other);

  // implements Message ----------------------------------------------

  TActRegressionBuyGoldGoodsReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TActRegressionBuyGoldGoodsReq& from);
  void MergeFrom(const TActRegressionBuyGoldGoodsReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 GoodId = 1;
  inline bool has_goodid() const;
  inline void clear_goodid();
  static const int kGoodIdFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TActRegressionBuyGoldGoodsReq</name>
  	<Function>
  		<name>goodid</name>
  		<replaceName>GoodId</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_goodid</name>
  		<replaceName>GoodId</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_goodid</name>
  		<replaceName>GoodId</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 goodid() const;
  inline void set_goodid(::google::protobuf::uint32 value);

  // optional uint32 Num = 2;
  inline bool has_num() const;
  inline void clear_num();
  static const int kNumFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TActRegressionBuyGoldGoodsReq</name>
  	<Function>
  		<name>num</name>
  		<replaceName>Num</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_num</name>
  		<replaceName>Num</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_num</name>
  		<replaceName>Num</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 num() const;
  inline void set_num(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:pb.TActRegressionBuyGoldGoodsReq)
 private:
  inline void set_has_goodid();
  inline void clear_has_goodid();
  inline void set_has_num();
  inline void clear_has_num();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 goodid_;
  ::google::protobuf::uint32 num_;
  friend void  protobuf_AddDesc_net_2fActRegression_2eproto();
  friend void protobuf_AssignDesc_net_2fActRegression_2eproto();
  friend void protobuf_ShutdownFile_net_2fActRegression_2eproto();

  void InitAsDefaultInstance();
  static TActRegressionBuyGoldGoodsReq* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TActRegressionFinishTaskReq</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/ActRegression.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TActRegressionFinishTaskReq : public ::google::protobuf::Message {
 public:
  TActRegressionFinishTaskReq();
  virtual ~TActRegressionFinishTaskReq();

  TActRegressionFinishTaskReq(const TActRegressionFinishTaskReq& from);

  inline TActRegressionFinishTaskReq& operator=(const TActRegressionFinishTaskReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TActRegressionFinishTaskReq& default_instance();

  void Swap(TActRegressionFinishTaskReq* other);

  // implements Message ----------------------------------------------

  TActRegressionFinishTaskReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TActRegressionFinishTaskReq& from);
  void MergeFrom(const TActRegressionFinishTaskReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated uint32 TaskIdArr = 1;
  inline int taskidarr_size() const;
  inline void clear_taskidarr();
  static const int kTaskIdArrFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TActRegressionFinishTaskReq</name>
  	<Function>
  		<name>taskidarr</name>
  		<replaceName>TaskIdArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_taskidarr</name>
  		<replaceName>TaskIdArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_taskidarr</name>
  		<replaceName>TaskIdArr</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_taskidarr</name>
  		<replaceName>TaskIdArr</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>taskidarr_size</name>
  		<replaceName>TaskIdArr</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 taskidarr(int index) const;
  inline void set_taskidarr(int index, ::google::protobuf::uint32 value);
  inline void add_taskidarr(::google::protobuf::uint32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      taskidarr() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_taskidarr();

  // @@protoc_insertion_point(class_scope:pb.TActRegressionFinishTaskReq)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > taskidarr_;
  friend void  protobuf_AddDesc_net_2fActRegression_2eproto();
  friend void protobuf_AssignDesc_net_2fActRegression_2eproto();
  friend void protobuf_ShutdownFile_net_2fActRegression_2eproto();

  void InitAsDefaultInstance();
  static TActRegressionFinishTaskReq* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TActRegressionFinishTaskNotify</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/ActRegression.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TActRegressionFinishTaskNotify : public ::google::protobuf::Message {
 public:
  TActRegressionFinishTaskNotify();
  virtual ~TActRegressionFinishTaskNotify();

  TActRegressionFinishTaskNotify(const TActRegressionFinishTaskNotify& from);

  inline TActRegressionFinishTaskNotify& operator=(const TActRegressionFinishTaskNotify& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TActRegressionFinishTaskNotify& default_instance();

  void Swap(TActRegressionFinishTaskNotify* other);

  // implements Message ----------------------------------------------

  TActRegressionFinishTaskNotify* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TActRegressionFinishTaskNotify& from);
  void MergeFrom(const TActRegressionFinishTaskNotify& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .pb.TActRegressionTaskInfo TaskInfo = 1;
  inline bool has_taskinfo() const;
  inline void clear_taskinfo();
  static const int kTaskInfoFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TActRegressionFinishTaskNotify</name>
  	<Function>
  		<name>taskinfo</name>
  		<replaceName>TaskInfo</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_taskinfo</name>
  		<replaceName>TaskInfo</replaceName>
  		<handler>descripter = pb_set_message_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_allocated_taskinfo</name>
  		<replaceName>TaskInfo</replaceName>
  		<handler>descripter = pb_set_message_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_taskinfo</name>
  		<replaceName>TaskInfo</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TActRegressionTaskInfo& taskinfo() const;
  inline ::pb::TActRegressionTaskInfo* mutable_taskinfo();
  inline ::pb::TActRegressionTaskInfo* release_taskinfo();
  inline void set_allocated_taskinfo(::pb::TActRegressionTaskInfo* taskinfo);

  // @@protoc_insertion_point(class_scope:pb.TActRegressionFinishTaskNotify)
 private:
  inline void set_has_taskinfo();
  inline void clear_has_taskinfo();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::pb::TActRegressionTaskInfo* taskinfo_;
  friend void  protobuf_AddDesc_net_2fActRegression_2eproto();
  friend void protobuf_AssignDesc_net_2fActRegression_2eproto();
  friend void protobuf_ShutdownFile_net_2fActRegression_2eproto();

  void InitAsDefaultInstance();
  static TActRegressionFinishTaskNotify* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TActRegressionRetrieveReq</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/ActRegression.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TActRegressionRetrieveReq : public ::google::protobuf::Message {
 public:
  TActRegressionRetrieveReq();
  virtual ~TActRegressionRetrieveReq();

  TActRegressionRetrieveReq(const TActRegressionRetrieveReq& from);

  inline TActRegressionRetrieveReq& operator=(const TActRegressionRetrieveReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TActRegressionRetrieveReq& default_instance();

  void Swap(TActRegressionRetrieveReq* other);

  // implements Message ----------------------------------------------

  TActRegressionRetrieveReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TActRegressionRetrieveReq& from);
  void MergeFrom(const TActRegressionRetrieveReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 Num = 1;
  inline bool has_num() const;
  inline void clear_num();
  static const int kNumFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TActRegressionRetrieveReq</name>
  	<Function>
  		<name>num</name>
  		<replaceName>Num</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_num</name>
  		<replaceName>Num</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_num</name>
  		<replaceName>Num</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 num() const;
  inline void set_num(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:pb.TActRegressionRetrieveReq)
 private:
  inline void set_has_num();
  inline void clear_has_num();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 num_;
  friend void  protobuf_AddDesc_net_2fActRegression_2eproto();
  friend void protobuf_AssignDesc_net_2fActRegression_2eproto();
  friend void protobuf_ShutdownFile_net_2fActRegression_2eproto();

  void InitAsDefaultInstance();
  static TActRegressionRetrieveReq* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TActRegressionExchangeRetrieveNumReq</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/ActRegression.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TActRegressionExchangeRetrieveNumReq : public ::google::protobuf::Message {
 public:
  TActRegressionExchangeRetrieveNumReq();
  virtual ~TActRegressionExchangeRetrieveNumReq();

  TActRegressionExchangeRetrieveNumReq(const TActRegressionExchangeRetrieveNumReq& from);

  inline TActRegressionExchangeRetrieveNumReq& operator=(const TActRegressionExchangeRetrieveNumReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TActRegressionExchangeRetrieveNumReq& default_instance();

  void Swap(TActRegressionExchangeRetrieveNumReq* other);

  // implements Message ----------------------------------------------

  TActRegressionExchangeRetrieveNumReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TActRegressionExchangeRetrieveNumReq& from);
  void MergeFrom(const TActRegressionExchangeRetrieveNumReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 Num = 1;
  inline bool has_num() const;
  inline void clear_num();
  static const int kNumFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TActRegressionExchangeRetrieveNumReq</name>
  	<Function>
  		<name>num</name>
  		<replaceName>Num</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_num</name>
  		<replaceName>Num</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_num</name>
  		<replaceName>Num</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 num() const;
  inline void set_num(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:pb.TActRegressionExchangeRetrieveNumReq)
 private:
  inline void set_has_num();
  inline void clear_has_num();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 num_;
  friend void  protobuf_AddDesc_net_2fActRegression_2eproto();
  friend void protobuf_AssignDesc_net_2fActRegression_2eproto();
  friend void protobuf_ShutdownFile_net_2fActRegression_2eproto();

  void InitAsDefaultInstance();
  static TActRegressionExchangeRetrieveNumReq* default_instance_;
};
// ===================================================================


// ===================================================================

// TActRegressionGetActInfoRsp

// optional uint32 Level = 1;
inline bool TActRegressionGetActInfoRsp::has_level() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TActRegressionGetActInfoRsp::set_has_level() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TActRegressionGetActInfoRsp::clear_has_level() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TActRegressionGetActInfoRsp::clear_level() {
  level_ = 0u;
  clear_has_level();
}
inline ::google::protobuf::uint32 TActRegressionGetActInfoRsp::level() const {
  // @@protoc_insertion_point(field_get:pb.TActRegressionGetActInfoRsp.Level)
  return level_;
}
inline void TActRegressionGetActInfoRsp::set_level(::google::protobuf::uint32 value) {
  set_has_level();
  level_ = value;
  // @@protoc_insertion_point(field_set:pb.TActRegressionGetActInfoRsp.Level)
}

// optional uint32 Score = 2;
inline bool TActRegressionGetActInfoRsp::has_score() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TActRegressionGetActInfoRsp::set_has_score() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TActRegressionGetActInfoRsp::clear_has_score() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TActRegressionGetActInfoRsp::clear_score() {
  score_ = 0u;
  clear_has_score();
}
inline ::google::protobuf::uint32 TActRegressionGetActInfoRsp::score() const {
  // @@protoc_insertion_point(field_get:pb.TActRegressionGetActInfoRsp.Score)
  return score_;
}
inline void TActRegressionGetActInfoRsp::set_score(::google::protobuf::uint32 value) {
  set_has_score();
  score_ = value;
  // @@protoc_insertion_point(field_set:pb.TActRegressionGetActInfoRsp.Score)
}

// repeated .pb.TActRegressionGoodInfo RmbGoodArr = 3;
inline int TActRegressionGetActInfoRsp::rmbgoodarr_size() const {
  return rmbgoodarr_.size();
}
inline void TActRegressionGetActInfoRsp::clear_rmbgoodarr() {
  rmbgoodarr_.Clear();
}
inline const ::pb::TActRegressionGoodInfo& TActRegressionGetActInfoRsp::rmbgoodarr(int index) const {
  // @@protoc_insertion_point(field_get:pb.TActRegressionGetActInfoRsp.RmbGoodArr)
  return rmbgoodarr_.Get(index);
}
inline ::pb::TActRegressionGoodInfo* TActRegressionGetActInfoRsp::mutable_rmbgoodarr(int index) {
  // @@protoc_insertion_point(field_mutable:pb.TActRegressionGetActInfoRsp.RmbGoodArr)
  return rmbgoodarr_.Mutable(index);
}
inline ::pb::TActRegressionGoodInfo* TActRegressionGetActInfoRsp::add_rmbgoodarr() {
  // @@protoc_insertion_point(field_add:pb.TActRegressionGetActInfoRsp.RmbGoodArr)
  return rmbgoodarr_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::TActRegressionGoodInfo >&
TActRegressionGetActInfoRsp::rmbgoodarr() const {
  // @@protoc_insertion_point(field_list:pb.TActRegressionGetActInfoRsp.RmbGoodArr)
  return rmbgoodarr_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb::TActRegressionGoodInfo >*
TActRegressionGetActInfoRsp::mutable_rmbgoodarr() {
  // @@protoc_insertion_point(field_mutable_list:pb.TActRegressionGetActInfoRsp.RmbGoodArr)
  return &rmbgoodarr_;
}

// repeated .pb.TActRegressionGoodInfo ExchangeGoodArr = 4;
inline int TActRegressionGetActInfoRsp::exchangegoodarr_size() const {
  return exchangegoodarr_.size();
}
inline void TActRegressionGetActInfoRsp::clear_exchangegoodarr() {
  exchangegoodarr_.Clear();
}
inline const ::pb::TActRegressionGoodInfo& TActRegressionGetActInfoRsp::exchangegoodarr(int index) const {
  // @@protoc_insertion_point(field_get:pb.TActRegressionGetActInfoRsp.ExchangeGoodArr)
  return exchangegoodarr_.Get(index);
}
inline ::pb::TActRegressionGoodInfo* TActRegressionGetActInfoRsp::mutable_exchangegoodarr(int index) {
  // @@protoc_insertion_point(field_mutable:pb.TActRegressionGetActInfoRsp.ExchangeGoodArr)
  return exchangegoodarr_.Mutable(index);
}
inline ::pb::TActRegressionGoodInfo* TActRegressionGetActInfoRsp::add_exchangegoodarr() {
  // @@protoc_insertion_point(field_add:pb.TActRegressionGetActInfoRsp.ExchangeGoodArr)
  return exchangegoodarr_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::TActRegressionGoodInfo >&
TActRegressionGetActInfoRsp::exchangegoodarr() const {
  // @@protoc_insertion_point(field_list:pb.TActRegressionGetActInfoRsp.ExchangeGoodArr)
  return exchangegoodarr_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb::TActRegressionGoodInfo >*
TActRegressionGetActInfoRsp::mutable_exchangegoodarr() {
  // @@protoc_insertion_point(field_mutable_list:pb.TActRegressionGetActInfoRsp.ExchangeGoodArr)
  return &exchangegoodarr_;
}

// repeated .pb.TActRegressionGoodInfo GoldGoodArr = 9;
inline int TActRegressionGetActInfoRsp::goldgoodarr_size() const {
  return goldgoodarr_.size();
}
inline void TActRegressionGetActInfoRsp::clear_goldgoodarr() {
  goldgoodarr_.Clear();
}
inline const ::pb::TActRegressionGoodInfo& TActRegressionGetActInfoRsp::goldgoodarr(int index) const {
  // @@protoc_insertion_point(field_get:pb.TActRegressionGetActInfoRsp.GoldGoodArr)
  return goldgoodarr_.Get(index);
}
inline ::pb::TActRegressionGoodInfo* TActRegressionGetActInfoRsp::mutable_goldgoodarr(int index) {
  // @@protoc_insertion_point(field_mutable:pb.TActRegressionGetActInfoRsp.GoldGoodArr)
  return goldgoodarr_.Mutable(index);
}
inline ::pb::TActRegressionGoodInfo* TActRegressionGetActInfoRsp::add_goldgoodarr() {
  // @@protoc_insertion_point(field_add:pb.TActRegressionGetActInfoRsp.GoldGoodArr)
  return goldgoodarr_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::TActRegressionGoodInfo >&
TActRegressionGetActInfoRsp::goldgoodarr() const {
  // @@protoc_insertion_point(field_list:pb.TActRegressionGetActInfoRsp.GoldGoodArr)
  return goldgoodarr_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb::TActRegressionGoodInfo >*
TActRegressionGetActInfoRsp::mutable_goldgoodarr() {
  // @@protoc_insertion_point(field_mutable_list:pb.TActRegressionGetActInfoRsp.GoldGoodArr)
  return &goldgoodarr_;
}

// repeated .pb.TActRegressionTaskInfo TaskArr = 5;
inline int TActRegressionGetActInfoRsp::taskarr_size() const {
  return taskarr_.size();
}
inline void TActRegressionGetActInfoRsp::clear_taskarr() {
  taskarr_.Clear();
}
inline const ::pb::TActRegressionTaskInfo& TActRegressionGetActInfoRsp::taskarr(int index) const {
  // @@protoc_insertion_point(field_get:pb.TActRegressionGetActInfoRsp.TaskArr)
  return taskarr_.Get(index);
}
inline ::pb::TActRegressionTaskInfo* TActRegressionGetActInfoRsp::mutable_taskarr(int index) {
  // @@protoc_insertion_point(field_mutable:pb.TActRegressionGetActInfoRsp.TaskArr)
  return taskarr_.Mutable(index);
}
inline ::pb::TActRegressionTaskInfo* TActRegressionGetActInfoRsp::add_taskarr() {
  // @@protoc_insertion_point(field_add:pb.TActRegressionGetActInfoRsp.TaskArr)
  return taskarr_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::TActRegressionTaskInfo >&
TActRegressionGetActInfoRsp::taskarr() const {
  // @@protoc_insertion_point(field_list:pb.TActRegressionGetActInfoRsp.TaskArr)
  return taskarr_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb::TActRegressionTaskInfo >*
TActRegressionGetActInfoRsp::mutable_taskarr() {
  // @@protoc_insertion_point(field_mutable_list:pb.TActRegressionGetActInfoRsp.TaskArr)
  return &taskarr_;
}

// optional uint32 OfflineDays = 6;
inline bool TActRegressionGetActInfoRsp::has_offlinedays() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void TActRegressionGetActInfoRsp::set_has_offlinedays() {
  _has_bits_[0] |= 0x00000040u;
}
inline void TActRegressionGetActInfoRsp::clear_has_offlinedays() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void TActRegressionGetActInfoRsp::clear_offlinedays() {
  offlinedays_ = 0u;
  clear_has_offlinedays();
}
inline ::google::protobuf::uint32 TActRegressionGetActInfoRsp::offlinedays() const {
  // @@protoc_insertion_point(field_get:pb.TActRegressionGetActInfoRsp.OfflineDays)
  return offlinedays_;
}
inline void TActRegressionGetActInfoRsp::set_offlinedays(::google::protobuf::uint32 value) {
  set_has_offlinedays();
  offlinedays_ = value;
  // @@protoc_insertion_point(field_set:pb.TActRegressionGetActInfoRsp.OfflineDays)
}

// optional uint32 ReceivedReturnGift = 7;
inline bool TActRegressionGetActInfoRsp::has_receivedreturngift() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void TActRegressionGetActInfoRsp::set_has_receivedreturngift() {
  _has_bits_[0] |= 0x00000080u;
}
inline void TActRegressionGetActInfoRsp::clear_has_receivedreturngift() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void TActRegressionGetActInfoRsp::clear_receivedreturngift() {
  receivedreturngift_ = 0u;
  clear_has_receivedreturngift();
}
inline ::google::protobuf::uint32 TActRegressionGetActInfoRsp::receivedreturngift() const {
  // @@protoc_insertion_point(field_get:pb.TActRegressionGetActInfoRsp.ReceivedReturnGift)
  return receivedreturngift_;
}
inline void TActRegressionGetActInfoRsp::set_receivedreturngift(::google::protobuf::uint32 value) {
  set_has_receivedreturngift();
  receivedreturngift_ = value;
  // @@protoc_insertion_point(field_set:pb.TActRegressionGetActInfoRsp.ReceivedReturnGift)
}

// optional uint64 ReturnTime = 8;
inline bool TActRegressionGetActInfoRsp::has_returntime() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void TActRegressionGetActInfoRsp::set_has_returntime() {
  _has_bits_[0] |= 0x00000100u;
}
inline void TActRegressionGetActInfoRsp::clear_has_returntime() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void TActRegressionGetActInfoRsp::clear_returntime() {
  returntime_ = GOOGLE_ULONGLONG(0);
  clear_has_returntime();
}
inline ::google::protobuf::uint64 TActRegressionGetActInfoRsp::returntime() const {
  // @@protoc_insertion_point(field_get:pb.TActRegressionGetActInfoRsp.ReturnTime)
  return returntime_;
}
inline void TActRegressionGetActInfoRsp::set_returntime(::google::protobuf::uint64 value) {
  set_has_returntime();
  returntime_ = value;
  // @@protoc_insertion_point(field_set:pb.TActRegressionGetActInfoRsp.ReturnTime)
}

// optional uint32 AvaRetrieveNum = 10;
inline bool TActRegressionGetActInfoRsp::has_avaretrievenum() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void TActRegressionGetActInfoRsp::set_has_avaretrievenum() {
  _has_bits_[0] |= 0x00000200u;
}
inline void TActRegressionGetActInfoRsp::clear_has_avaretrievenum() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void TActRegressionGetActInfoRsp::clear_avaretrievenum() {
  avaretrievenum_ = 0u;
  clear_has_avaretrievenum();
}
inline ::google::protobuf::uint32 TActRegressionGetActInfoRsp::avaretrievenum() const {
  // @@protoc_insertion_point(field_get:pb.TActRegressionGetActInfoRsp.AvaRetrieveNum)
  return avaretrievenum_;
}
inline void TActRegressionGetActInfoRsp::set_avaretrievenum(::google::protobuf::uint32 value) {
  set_has_avaretrievenum();
  avaretrievenum_ = value;
  // @@protoc_insertion_point(field_set:pb.TActRegressionGetActInfoRsp.AvaRetrieveNum)
}

// optional uint32 PaidPoints = 11;
inline bool TActRegressionGetActInfoRsp::has_paidpoints() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void TActRegressionGetActInfoRsp::set_has_paidpoints() {
  _has_bits_[0] |= 0x00000400u;
}
inline void TActRegressionGetActInfoRsp::clear_has_paidpoints() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void TActRegressionGetActInfoRsp::clear_paidpoints() {
  paidpoints_ = 0u;
  clear_has_paidpoints();
}
inline ::google::protobuf::uint32 TActRegressionGetActInfoRsp::paidpoints() const {
  // @@protoc_insertion_point(field_get:pb.TActRegressionGetActInfoRsp.PaidPoints)
  return paidpoints_;
}
inline void TActRegressionGetActInfoRsp::set_paidpoints(::google::protobuf::uint32 value) {
  set_has_paidpoints();
  paidpoints_ = value;
  // @@protoc_insertion_point(field_set:pb.TActRegressionGetActInfoRsp.PaidPoints)
}

// optional uint32 FreePoints = 12;
inline bool TActRegressionGetActInfoRsp::has_freepoints() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void TActRegressionGetActInfoRsp::set_has_freepoints() {
  _has_bits_[0] |= 0x00000800u;
}
inline void TActRegressionGetActInfoRsp::clear_has_freepoints() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void TActRegressionGetActInfoRsp::clear_freepoints() {
  freepoints_ = 0u;
  clear_has_freepoints();
}
inline ::google::protobuf::uint32 TActRegressionGetActInfoRsp::freepoints() const {
  // @@protoc_insertion_point(field_get:pb.TActRegressionGetActInfoRsp.FreePoints)
  return freepoints_;
}
inline void TActRegressionGetActInfoRsp::set_freepoints(::google::protobuf::uint32 value) {
  set_has_freepoints();
  freepoints_ = value;
  // @@protoc_insertion_point(field_set:pb.TActRegressionGetActInfoRsp.FreePoints)
}

// -------------------------------------------------------------------

// TActRegressionTaskInfo

// optional uint32 TaskType = 1;
inline bool TActRegressionTaskInfo::has_tasktype() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TActRegressionTaskInfo::set_has_tasktype() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TActRegressionTaskInfo::clear_has_tasktype() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TActRegressionTaskInfo::clear_tasktype() {
  tasktype_ = 0u;
  clear_has_tasktype();
}
inline ::google::protobuf::uint32 TActRegressionTaskInfo::tasktype() const {
  // @@protoc_insertion_point(field_get:pb.TActRegressionTaskInfo.TaskType)
  return tasktype_;
}
inline void TActRegressionTaskInfo::set_tasktype(::google::protobuf::uint32 value) {
  set_has_tasktype();
  tasktype_ = value;
  // @@protoc_insertion_point(field_set:pb.TActRegressionTaskInfo.TaskType)
}

// optional uint32 FinishNum = 2;
inline bool TActRegressionTaskInfo::has_finishnum() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TActRegressionTaskInfo::set_has_finishnum() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TActRegressionTaskInfo::clear_has_finishnum() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TActRegressionTaskInfo::clear_finishnum() {
  finishnum_ = 0u;
  clear_has_finishnum();
}
inline ::google::protobuf::uint32 TActRegressionTaskInfo::finishnum() const {
  // @@protoc_insertion_point(field_get:pb.TActRegressionTaskInfo.FinishNum)
  return finishnum_;
}
inline void TActRegressionTaskInfo::set_finishnum(::google::protobuf::uint32 value) {
  set_has_finishnum();
  finishnum_ = value;
  // @@protoc_insertion_point(field_set:pb.TActRegressionTaskInfo.FinishNum)
}

// repeated .pb.TActRegressionTaskStateInfo TaskStateArr = 3;
inline int TActRegressionTaskInfo::taskstatearr_size() const {
  return taskstatearr_.size();
}
inline void TActRegressionTaskInfo::clear_taskstatearr() {
  taskstatearr_.Clear();
}
inline const ::pb::TActRegressionTaskStateInfo& TActRegressionTaskInfo::taskstatearr(int index) const {
  // @@protoc_insertion_point(field_get:pb.TActRegressionTaskInfo.TaskStateArr)
  return taskstatearr_.Get(index);
}
inline ::pb::TActRegressionTaskStateInfo* TActRegressionTaskInfo::mutable_taskstatearr(int index) {
  // @@protoc_insertion_point(field_mutable:pb.TActRegressionTaskInfo.TaskStateArr)
  return taskstatearr_.Mutable(index);
}
inline ::pb::TActRegressionTaskStateInfo* TActRegressionTaskInfo::add_taskstatearr() {
  // @@protoc_insertion_point(field_add:pb.TActRegressionTaskInfo.TaskStateArr)
  return taskstatearr_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::TActRegressionTaskStateInfo >&
TActRegressionTaskInfo::taskstatearr() const {
  // @@protoc_insertion_point(field_list:pb.TActRegressionTaskInfo.TaskStateArr)
  return taskstatearr_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb::TActRegressionTaskStateInfo >*
TActRegressionTaskInfo::mutable_taskstatearr() {
  // @@protoc_insertion_point(field_mutable_list:pb.TActRegressionTaskInfo.TaskStateArr)
  return &taskstatearr_;
}

// -------------------------------------------------------------------

// TActRegressionTaskStateInfo

// optional uint32 TaskId = 1;
inline bool TActRegressionTaskStateInfo::has_taskid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TActRegressionTaskStateInfo::set_has_taskid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TActRegressionTaskStateInfo::clear_has_taskid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TActRegressionTaskStateInfo::clear_taskid() {
  taskid_ = 0u;
  clear_has_taskid();
}
inline ::google::protobuf::uint32 TActRegressionTaskStateInfo::taskid() const {
  // @@protoc_insertion_point(field_get:pb.TActRegressionTaskStateInfo.TaskId)
  return taskid_;
}
inline void TActRegressionTaskStateInfo::set_taskid(::google::protobuf::uint32 value) {
  set_has_taskid();
  taskid_ = value;
  // @@protoc_insertion_point(field_set:pb.TActRegressionTaskStateInfo.TaskId)
}

// optional .pb.ETaskState TaskState = 2;
inline bool TActRegressionTaskStateInfo::has_taskstate() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TActRegressionTaskStateInfo::set_has_taskstate() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TActRegressionTaskStateInfo::clear_has_taskstate() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TActRegressionTaskStateInfo::clear_taskstate() {
  taskstate_ = 1;
  clear_has_taskstate();
}
inline ::pb::ETaskState TActRegressionTaskStateInfo::taskstate() const {
  // @@protoc_insertion_point(field_get:pb.TActRegressionTaskStateInfo.TaskState)
  return static_cast< ::pb::ETaskState >(taskstate_);
}
inline void TActRegressionTaskStateInfo::set_taskstate(::pb::ETaskState value) {
  assert(::pb::ETaskState_IsValid(value));
  set_has_taskstate();
  taskstate_ = value;
  // @@protoc_insertion_point(field_set:pb.TActRegressionTaskStateInfo.TaskState)
}

// -------------------------------------------------------------------

// TActRegressionGoodInfo

// optional uint32 GoodId = 1;
inline bool TActRegressionGoodInfo::has_goodid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TActRegressionGoodInfo::set_has_goodid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TActRegressionGoodInfo::clear_has_goodid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TActRegressionGoodInfo::clear_goodid() {
  goodid_ = 0u;
  clear_has_goodid();
}
inline ::google::protobuf::uint32 TActRegressionGoodInfo::goodid() const {
  // @@protoc_insertion_point(field_get:pb.TActRegressionGoodInfo.GoodId)
  return goodid_;
}
inline void TActRegressionGoodInfo::set_goodid(::google::protobuf::uint32 value) {
  set_has_goodid();
  goodid_ = value;
  // @@protoc_insertion_point(field_set:pb.TActRegressionGoodInfo.GoodId)
}

// optional uint32 BoughtNum = 2;
inline bool TActRegressionGoodInfo::has_boughtnum() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TActRegressionGoodInfo::set_has_boughtnum() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TActRegressionGoodInfo::clear_has_boughtnum() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TActRegressionGoodInfo::clear_boughtnum() {
  boughtnum_ = 0u;
  clear_has_boughtnum();
}
inline ::google::protobuf::uint32 TActRegressionGoodInfo::boughtnum() const {
  // @@protoc_insertion_point(field_get:pb.TActRegressionGoodInfo.BoughtNum)
  return boughtnum_;
}
inline void TActRegressionGoodInfo::set_boughtnum(::google::protobuf::uint32 value) {
  set_has_boughtnum();
  boughtnum_ = value;
  // @@protoc_insertion_point(field_set:pb.TActRegressionGoodInfo.BoughtNum)
}

// -------------------------------------------------------------------

// TActRegressionRmbGoodsNotify

// repeated .pb.TActRegressionGoodInfo GoodsArr = 1;
inline int TActRegressionRmbGoodsNotify::goodsarr_size() const {
  return goodsarr_.size();
}
inline void TActRegressionRmbGoodsNotify::clear_goodsarr() {
  goodsarr_.Clear();
}
inline const ::pb::TActRegressionGoodInfo& TActRegressionRmbGoodsNotify::goodsarr(int index) const {
  // @@protoc_insertion_point(field_get:pb.TActRegressionRmbGoodsNotify.GoodsArr)
  return goodsarr_.Get(index);
}
inline ::pb::TActRegressionGoodInfo* TActRegressionRmbGoodsNotify::mutable_goodsarr(int index) {
  // @@protoc_insertion_point(field_mutable:pb.TActRegressionRmbGoodsNotify.GoodsArr)
  return goodsarr_.Mutable(index);
}
inline ::pb::TActRegressionGoodInfo* TActRegressionRmbGoodsNotify::add_goodsarr() {
  // @@protoc_insertion_point(field_add:pb.TActRegressionRmbGoodsNotify.GoodsArr)
  return goodsarr_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::TActRegressionGoodInfo >&
TActRegressionRmbGoodsNotify::goodsarr() const {
  // @@protoc_insertion_point(field_list:pb.TActRegressionRmbGoodsNotify.GoodsArr)
  return goodsarr_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb::TActRegressionGoodInfo >*
TActRegressionRmbGoodsNotify::mutable_goodsarr() {
  // @@protoc_insertion_point(field_mutable_list:pb.TActRegressionRmbGoodsNotify.GoodsArr)
  return &goodsarr_;
}

// -------------------------------------------------------------------

// TActRegressionExchangeReq

// optional uint32 GoodId = 1;
inline bool TActRegressionExchangeReq::has_goodid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TActRegressionExchangeReq::set_has_goodid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TActRegressionExchangeReq::clear_has_goodid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TActRegressionExchangeReq::clear_goodid() {
  goodid_ = 0u;
  clear_has_goodid();
}
inline ::google::protobuf::uint32 TActRegressionExchangeReq::goodid() const {
  // @@protoc_insertion_point(field_get:pb.TActRegressionExchangeReq.GoodId)
  return goodid_;
}
inline void TActRegressionExchangeReq::set_goodid(::google::protobuf::uint32 value) {
  set_has_goodid();
  goodid_ = value;
  // @@protoc_insertion_point(field_set:pb.TActRegressionExchangeReq.GoodId)
}

// optional uint32 Num = 2;
inline bool TActRegressionExchangeReq::has_num() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TActRegressionExchangeReq::set_has_num() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TActRegressionExchangeReq::clear_has_num() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TActRegressionExchangeReq::clear_num() {
  num_ = 0u;
  clear_has_num();
}
inline ::google::protobuf::uint32 TActRegressionExchangeReq::num() const {
  // @@protoc_insertion_point(field_get:pb.TActRegressionExchangeReq.Num)
  return num_;
}
inline void TActRegressionExchangeReq::set_num(::google::protobuf::uint32 value) {
  set_has_num();
  num_ = value;
  // @@protoc_insertion_point(field_set:pb.TActRegressionExchangeReq.Num)
}

// -------------------------------------------------------------------

// TActRegressionBuyGoldGoodsReq

// optional uint32 GoodId = 1;
inline bool TActRegressionBuyGoldGoodsReq::has_goodid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TActRegressionBuyGoldGoodsReq::set_has_goodid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TActRegressionBuyGoldGoodsReq::clear_has_goodid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TActRegressionBuyGoldGoodsReq::clear_goodid() {
  goodid_ = 0u;
  clear_has_goodid();
}
inline ::google::protobuf::uint32 TActRegressionBuyGoldGoodsReq::goodid() const {
  // @@protoc_insertion_point(field_get:pb.TActRegressionBuyGoldGoodsReq.GoodId)
  return goodid_;
}
inline void TActRegressionBuyGoldGoodsReq::set_goodid(::google::protobuf::uint32 value) {
  set_has_goodid();
  goodid_ = value;
  // @@protoc_insertion_point(field_set:pb.TActRegressionBuyGoldGoodsReq.GoodId)
}

// optional uint32 Num = 2;
inline bool TActRegressionBuyGoldGoodsReq::has_num() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TActRegressionBuyGoldGoodsReq::set_has_num() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TActRegressionBuyGoldGoodsReq::clear_has_num() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TActRegressionBuyGoldGoodsReq::clear_num() {
  num_ = 0u;
  clear_has_num();
}
inline ::google::protobuf::uint32 TActRegressionBuyGoldGoodsReq::num() const {
  // @@protoc_insertion_point(field_get:pb.TActRegressionBuyGoldGoodsReq.Num)
  return num_;
}
inline void TActRegressionBuyGoldGoodsReq::set_num(::google::protobuf::uint32 value) {
  set_has_num();
  num_ = value;
  // @@protoc_insertion_point(field_set:pb.TActRegressionBuyGoldGoodsReq.Num)
}

// -------------------------------------------------------------------

// TActRegressionFinishTaskReq

// repeated uint32 TaskIdArr = 1;
inline int TActRegressionFinishTaskReq::taskidarr_size() const {
  return taskidarr_.size();
}
inline void TActRegressionFinishTaskReq::clear_taskidarr() {
  taskidarr_.Clear();
}
inline ::google::protobuf::uint32 TActRegressionFinishTaskReq::taskidarr(int index) const {
  // @@protoc_insertion_point(field_get:pb.TActRegressionFinishTaskReq.TaskIdArr)
  return taskidarr_.Get(index);
}
inline void TActRegressionFinishTaskReq::set_taskidarr(int index, ::google::protobuf::uint32 value) {
  taskidarr_.Set(index, value);
  // @@protoc_insertion_point(field_set:pb.TActRegressionFinishTaskReq.TaskIdArr)
}
inline void TActRegressionFinishTaskReq::add_taskidarr(::google::protobuf::uint32 value) {
  taskidarr_.Add(value);
  // @@protoc_insertion_point(field_add:pb.TActRegressionFinishTaskReq.TaskIdArr)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
TActRegressionFinishTaskReq::taskidarr() const {
  // @@protoc_insertion_point(field_list:pb.TActRegressionFinishTaskReq.TaskIdArr)
  return taskidarr_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
TActRegressionFinishTaskReq::mutable_taskidarr() {
  // @@protoc_insertion_point(field_mutable_list:pb.TActRegressionFinishTaskReq.TaskIdArr)
  return &taskidarr_;
}

// -------------------------------------------------------------------

// TActRegressionFinishTaskNotify

// optional .pb.TActRegressionTaskInfo TaskInfo = 1;
inline bool TActRegressionFinishTaskNotify::has_taskinfo() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TActRegressionFinishTaskNotify::set_has_taskinfo() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TActRegressionFinishTaskNotify::clear_has_taskinfo() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TActRegressionFinishTaskNotify::clear_taskinfo() {
  if (taskinfo_ != NULL) taskinfo_->::pb::TActRegressionTaskInfo::Clear();
  clear_has_taskinfo();
}
inline const ::pb::TActRegressionTaskInfo& TActRegressionFinishTaskNotify::taskinfo() const {
  // @@protoc_insertion_point(field_get:pb.TActRegressionFinishTaskNotify.TaskInfo)
  return taskinfo_ != NULL ? *taskinfo_ : *default_instance_->taskinfo_;
}
inline ::pb::TActRegressionTaskInfo* TActRegressionFinishTaskNotify::mutable_taskinfo() {
  set_has_taskinfo();
  if (taskinfo_ == NULL) taskinfo_ = new ::pb::TActRegressionTaskInfo;
  // @@protoc_insertion_point(field_mutable:pb.TActRegressionFinishTaskNotify.TaskInfo)
  return taskinfo_;
}
inline ::pb::TActRegressionTaskInfo* TActRegressionFinishTaskNotify::release_taskinfo() {
  clear_has_taskinfo();
  ::pb::TActRegressionTaskInfo* temp = taskinfo_;
  taskinfo_ = NULL;
  return temp;
}
inline void TActRegressionFinishTaskNotify::set_allocated_taskinfo(::pb::TActRegressionTaskInfo* taskinfo) {
  delete taskinfo_;
  taskinfo_ = taskinfo;
  if (taskinfo) {
    set_has_taskinfo();
  } else {
    clear_has_taskinfo();
  }
  // @@protoc_insertion_point(field_set_allocated:pb.TActRegressionFinishTaskNotify.TaskInfo)
}

// -------------------------------------------------------------------

// TActRegressionRetrieveReq

// optional uint32 Num = 1;
inline bool TActRegressionRetrieveReq::has_num() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TActRegressionRetrieveReq::set_has_num() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TActRegressionRetrieveReq::clear_has_num() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TActRegressionRetrieveReq::clear_num() {
  num_ = 0u;
  clear_has_num();
}
inline ::google::protobuf::uint32 TActRegressionRetrieveReq::num() const {
  // @@protoc_insertion_point(field_get:pb.TActRegressionRetrieveReq.Num)
  return num_;
}
inline void TActRegressionRetrieveReq::set_num(::google::protobuf::uint32 value) {
  set_has_num();
  num_ = value;
  // @@protoc_insertion_point(field_set:pb.TActRegressionRetrieveReq.Num)
}

// -------------------------------------------------------------------

// TActRegressionExchangeRetrieveNumReq

// optional uint32 Num = 1;
inline bool TActRegressionExchangeRetrieveNumReq::has_num() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TActRegressionExchangeRetrieveNumReq::set_has_num() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TActRegressionExchangeRetrieveNumReq::clear_has_num() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TActRegressionExchangeRetrieveNumReq::clear_num() {
  num_ = 0u;
  clear_has_num();
}
inline ::google::protobuf::uint32 TActRegressionExchangeRetrieveNumReq::num() const {
  // @@protoc_insertion_point(field_get:pb.TActRegressionExchangeRetrieveNumReq.Num)
  return num_;
}
inline void TActRegressionExchangeRetrieveNumReq::set_num(::google::protobuf::uint32 value) {
  set_has_num();
  num_ = value;
  // @@protoc_insertion_point(field_set:pb.TActRegressionExchangeRetrieveNumReq.Num)
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace pb

#ifndef SWIG
namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::pb::ETaskState> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::pb::ETaskState>() {
  return ::pb::ETaskState_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_net_2fActRegression_2eproto__INCLUDED
