// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: net/UnionParty.proto

#ifndef PROTOBUF_net_2fUnionParty_2eproto__INCLUDED
#define PROTOBUF_net_2fUnionParty_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "net/User.pb.h"
#include "net/CommonReward.pb.h"
// @@protoc_insertion_point(includes)

namespace pb {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_net_2fUnionParty_2eproto();
void protobuf_AssignDesc_net_2fUnionParty_2eproto();
void protobuf_ShutdownFile_net_2fUnionParty_2eproto();

class TUnionPartyShopInfo;
class TUnionPartyShopRecord;
class TUnionPartyLootRecord;
class TUnionPartyGetUserInfoRsp;
class TUnionPartyGetPartyInfoRsp;
class TUnionPartyStartPartyRsp;
class TUnionPartyFreeBoxInfo;
class TUnionPartyRmbBoxInfo;
class TUnionPartyEnterRsp;
class TUnionPartyLootReq;
class TUnionPartyLootRsp;
class TUnionPartyBoxRechargeReq;
class TUnionPartyBoxRechargeRsp;
class TUnionPartyNotify;
class TUnionPartyStartNotify;

enum EUnionPartyStage {
  UP_STAGE_INVALID = 0,
  UP_STAGE_WAIT = 1,
  UP_STAGE_GAME = 2
};
bool EUnionPartyStage_IsValid(int value);
const EUnionPartyStage EUnionPartyStage_MIN = UP_STAGE_INVALID;
const EUnionPartyStage EUnionPartyStage_MAX = UP_STAGE_GAME;
const int EUnionPartyStage_ARRAYSIZE = EUnionPartyStage_MAX + 1;

const ::google::protobuf::EnumDescriptor* EUnionPartyStage_descriptor();
inline const ::std::string& EUnionPartyStage_Name(EUnionPartyStage value) {
  return ::google::protobuf::internal::NameOfEnum(
    EUnionPartyStage_descriptor(), value);
}
inline bool EUnionPartyStage_Parse(
    const ::std::string& name, EUnionPartyStage* value) {
  return ::google::protobuf::internal::ParseNamedEnum<EUnionPartyStage>(
    EUnionPartyStage_descriptor(), name, value);
}
enum EUnionPartyStartResult {
  UP_START_NORMAL = 0,
  UP_START_DONE = 1,
  UP_START_AUTHORITY = 2,
  UP_START_INVALIDPERIOD = 3
};
bool EUnionPartyStartResult_IsValid(int value);
const EUnionPartyStartResult EUnionPartyStartResult_MIN = UP_START_NORMAL;
const EUnionPartyStartResult EUnionPartyStartResult_MAX = UP_START_INVALIDPERIOD;
const int EUnionPartyStartResult_ARRAYSIZE = EUnionPartyStartResult_MAX + 1;

const ::google::protobuf::EnumDescriptor* EUnionPartyStartResult_descriptor();
inline const ::std::string& EUnionPartyStartResult_Name(EUnionPartyStartResult value) {
  return ::google::protobuf::internal::NameOfEnum(
    EUnionPartyStartResult_descriptor(), value);
}
inline bool EUnionPartyStartResult_Parse(
    const ::std::string& name, EUnionPartyStartResult* value) {
  return ::google::protobuf::internal::ParseNamedEnum<EUnionPartyStartResult>(
    EUnionPartyStartResult_descriptor(), name, value);
}
enum EUnionPartyLootResult {
  UP_LOOT_NORMAL = 0,
  UP_LOOT_DONE = 1,
  UP_LOOT_INVALID = 2,
  UP_LOOT_FREEMAX = 3,
  UP_LOOT_RMBMAX = 4
};
bool EUnionPartyLootResult_IsValid(int value);
const EUnionPartyLootResult EUnionPartyLootResult_MIN = UP_LOOT_NORMAL;
const EUnionPartyLootResult EUnionPartyLootResult_MAX = UP_LOOT_RMBMAX;
const int EUnionPartyLootResult_ARRAYSIZE = EUnionPartyLootResult_MAX + 1;

const ::google::protobuf::EnumDescriptor* EUnionPartyLootResult_descriptor();
inline const ::std::string& EUnionPartyLootResult_Name(EUnionPartyLootResult value) {
  return ::google::protobuf::internal::NameOfEnum(
    EUnionPartyLootResult_descriptor(), value);
}
inline bool EUnionPartyLootResult_Parse(
    const ::std::string& name, EUnionPartyLootResult* value) {
  return ::google::protobuf::internal::ParseNamedEnum<EUnionPartyLootResult>(
    EUnionPartyLootResult_descriptor(), name, value);
}
enum EUnionPartyRechargeResult {
  BE_RECHARGE_NORMAL = 0,
  BE_RECHARGE_UPPERLIMIT = 1,
  BE_RECHARGE_NOTOPEN = 2
};
bool EUnionPartyRechargeResult_IsValid(int value);
const EUnionPartyRechargeResult EUnionPartyRechargeResult_MIN = BE_RECHARGE_NORMAL;
const EUnionPartyRechargeResult EUnionPartyRechargeResult_MAX = BE_RECHARGE_NOTOPEN;
const int EUnionPartyRechargeResult_ARRAYSIZE = EUnionPartyRechargeResult_MAX + 1;

const ::google::protobuf::EnumDescriptor* EUnionPartyRechargeResult_descriptor();
inline const ::std::string& EUnionPartyRechargeResult_Name(EUnionPartyRechargeResult value) {
  return ::google::protobuf::internal::NameOfEnum(
    EUnionPartyRechargeResult_descriptor(), value);
}
inline bool EUnionPartyRechargeResult_Parse(
    const ::std::string& name, EUnionPartyRechargeResult* value) {
  return ::google::protobuf::internal::ParseNamedEnum<EUnionPartyRechargeResult>(
    EUnionPartyRechargeResult_descriptor(), name, value);
}
enum EUnionPartyOption {
  UP_CREATE_FREEBOX = 1,
  UP_REMOVE_FREEBOX = 2,
  UP_CREATE_RMBBOX = 3,
  UP_CLOSE_PARTY = 4
};
bool EUnionPartyOption_IsValid(int value);
const EUnionPartyOption EUnionPartyOption_MIN = UP_CREATE_FREEBOX;
const EUnionPartyOption EUnionPartyOption_MAX = UP_CLOSE_PARTY;
const int EUnionPartyOption_ARRAYSIZE = EUnionPartyOption_MAX + 1;

const ::google::protobuf::EnumDescriptor* EUnionPartyOption_descriptor();
inline const ::std::string& EUnionPartyOption_Name(EUnionPartyOption value) {
  return ::google::protobuf::internal::NameOfEnum(
    EUnionPartyOption_descriptor(), value);
}
inline bool EUnionPartyOption_Parse(
    const ::std::string& name, EUnionPartyOption* value) {
  return ::google::protobuf::internal::ParseNamedEnum<EUnionPartyOption>(
    EUnionPartyOption_descriptor(), name, value);
}
// ===================================================================

/*FOR2LUA
<Record>
	<name>TUnionPartyShopInfo</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/UnionParty.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TUnionPartyShopInfo : public ::google::protobuf::Message {
 public:
  TUnionPartyShopInfo();
  virtual ~TUnionPartyShopInfo();

  TUnionPartyShopInfo(const TUnionPartyShopInfo& from);

  inline TUnionPartyShopInfo& operator=(const TUnionPartyShopInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TUnionPartyShopInfo& default_instance();

  void Swap(TUnionPartyShopInfo* other);

  // implements Message ----------------------------------------------

  TUnionPartyShopInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TUnionPartyShopInfo& from);
  void MergeFrom(const TUnionPartyShopInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 GoodsId = 1;
  inline bool has_goodsid() const;
  inline void clear_goodsid();
  static const int kGoodsIdFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TUnionPartyShopInfo</name>
  	<Function>
  		<name>goodsid</name>
  		<replaceName>GoodsId</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_goodsid</name>
  		<replaceName>GoodsId</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_goodsid</name>
  		<replaceName>GoodsId</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::int32 goodsid() const;
  inline void set_goodsid(::google::protobuf::int32 value);

  // optional int32 BoughtNum = 2;
  inline bool has_boughtnum() const;
  inline void clear_boughtnum();
  static const int kBoughtNumFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TUnionPartyShopInfo</name>
  	<Function>
  		<name>boughtnum</name>
  		<replaceName>BoughtNum</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_boughtnum</name>
  		<replaceName>BoughtNum</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_boughtnum</name>
  		<replaceName>BoughtNum</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::int32 boughtnum() const;
  inline void set_boughtnum(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:pb.TUnionPartyShopInfo)
 private:
  inline void set_has_goodsid();
  inline void clear_has_goodsid();
  inline void set_has_boughtnum();
  inline void clear_has_boughtnum();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int32 goodsid_;
  ::google::protobuf::int32 boughtnum_;
  friend void  protobuf_AddDesc_net_2fUnionParty_2eproto();
  friend void protobuf_AssignDesc_net_2fUnionParty_2eproto();
  friend void protobuf_ShutdownFile_net_2fUnionParty_2eproto();

  void InitAsDefaultInstance();
  static TUnionPartyShopInfo* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TUnionPartyShopRecord</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/UnionParty.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TUnionPartyShopRecord : public ::google::protobuf::Message {
 public:
  TUnionPartyShopRecord();
  virtual ~TUnionPartyShopRecord();

  TUnionPartyShopRecord(const TUnionPartyShopRecord& from);

  inline TUnionPartyShopRecord& operator=(const TUnionPartyShopRecord& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TUnionPartyShopRecord& default_instance();

  void Swap(TUnionPartyShopRecord* other);

  // implements Message ----------------------------------------------

  TUnionPartyShopRecord* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TUnionPartyShopRecord& from);
  void MergeFrom(const TUnionPartyShopRecord& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 GoodsId = 1;
  inline bool has_goodsid() const;
  inline void clear_goodsid();
  static const int kGoodsIdFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TUnionPartyShopRecord</name>
  	<Function>
  		<name>goodsid</name>
  		<replaceName>GoodsId</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_goodsid</name>
  		<replaceName>GoodsId</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_goodsid</name>
  		<replaceName>GoodsId</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::int32 goodsid() const;
  inline void set_goodsid(::google::protobuf::int32 value);

  // optional int64 ShopTime = 2;
  inline bool has_shoptime() const;
  inline void clear_shoptime();
  static const int kShopTimeFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TUnionPartyShopRecord</name>
  	<Function>
  		<name>shoptime</name>
  		<replaceName>ShopTime</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_shoptime</name>
  		<replaceName>ShopTime</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_shoptime</name>
  		<replaceName>ShopTime</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::int64 shoptime() const;
  inline void set_shoptime(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:pb.TUnionPartyShopRecord)
 private:
  inline void set_has_goodsid();
  inline void clear_has_goodsid();
  inline void set_has_shoptime();
  inline void clear_has_shoptime();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int64 shoptime_;
  ::google::protobuf::int32 goodsid_;
  friend void  protobuf_AddDesc_net_2fUnionParty_2eproto();
  friend void protobuf_AssignDesc_net_2fUnionParty_2eproto();
  friend void protobuf_ShutdownFile_net_2fUnionParty_2eproto();

  void InitAsDefaultInstance();
  static TUnionPartyShopRecord* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TUnionPartyLootRecord</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/UnionParty.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TUnionPartyLootRecord : public ::google::protobuf::Message {
 public:
  TUnionPartyLootRecord();
  virtual ~TUnionPartyLootRecord();

  TUnionPartyLootRecord(const TUnionPartyLootRecord& from);

  inline TUnionPartyLootRecord& operator=(const TUnionPartyLootRecord& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TUnionPartyLootRecord& default_instance();

  void Swap(TUnionPartyLootRecord* other);

  // implements Message ----------------------------------------------

  TUnionPartyLootRecord* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TUnionPartyLootRecord& from);
  void MergeFrom(const TUnionPartyLootRecord& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 BoxId = 1;
  inline bool has_boxid() const;
  inline void clear_boxid();
  static const int kBoxIdFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TUnionPartyLootRecord</name>
  	<Function>
  		<name>boxid</name>
  		<replaceName>BoxId</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_boxid</name>
  		<replaceName>BoxId</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_boxid</name>
  		<replaceName>BoxId</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::int32 boxid() const;
  inline void set_boxid(::google::protobuf::int32 value);

  // optional int32 GoodsId = 2;
  inline bool has_goodsid() const;
  inline void clear_goodsid();
  static const int kGoodsIdFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TUnionPartyLootRecord</name>
  	<Function>
  		<name>goodsid</name>
  		<replaceName>GoodsId</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_goodsid</name>
  		<replaceName>GoodsId</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_goodsid</name>
  		<replaceName>GoodsId</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::int32 goodsid() const;
  inline void set_goodsid(::google::protobuf::int32 value);

  // optional int64 LootTime = 3;
  inline bool has_loottime() const;
  inline void clear_loottime();
  static const int kLootTimeFieldNumber = 3;
  /*FOR2LUA
  <Record>
  	<name>TUnionPartyLootRecord</name>
  	<Function>
  		<name>loottime</name>
  		<replaceName>LootTime</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_loottime</name>
  		<replaceName>LootTime</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_loottime</name>
  		<replaceName>LootTime</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::int64 loottime() const;
  inline void set_loottime(::google::protobuf::int64 value);

  // repeated .pb.TCommonReward ArrReward = 4;
  inline int arrreward_size() const;
  inline void clear_arrreward();
  static const int kArrRewardFieldNumber = 4;
  /*FOR2LUA
  <Record>
  	<name>TUnionPartyLootRecord</name>
  	<Function>
  		<name>arrreward</name>
  		<replaceName>ArrReward</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_arrreward</name>
  		<replaceName>ArrReward</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_arrreward</name>
  		<replaceName>ArrReward</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_arrreward</name>
  		<replaceName>ArrReward</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>arrreward_size</name>
  		<replaceName>ArrReward</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TCommonReward& arrreward(int index) const;
  inline ::pb::TCommonReward* mutable_arrreward(int index);
  inline ::pb::TCommonReward* add_arrreward();
  inline const ::google::protobuf::RepeatedPtrField< ::pb::TCommonReward >&
      arrreward() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb::TCommonReward >*
      mutable_arrreward();

  // optional .pb.TUserSimpleInfo UserInfo = 5;
  inline bool has_userinfo() const;
  inline void clear_userinfo();
  static const int kUserInfoFieldNumber = 5;
  /*FOR2LUA
  <Record>
  	<name>TUnionPartyLootRecord</name>
  	<Function>
  		<name>userinfo</name>
  		<replaceName>UserInfo</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_userinfo</name>
  		<replaceName>UserInfo</replaceName>
  		<handler>descripter = pb_set_message_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_allocated_userinfo</name>
  		<replaceName>UserInfo</replaceName>
  		<handler>descripter = pb_set_message_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_userinfo</name>
  		<replaceName>UserInfo</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TUserSimpleInfo& userinfo() const;
  inline ::pb::TUserSimpleInfo* mutable_userinfo();
  inline ::pb::TUserSimpleInfo* release_userinfo();
  inline void set_allocated_userinfo(::pb::TUserSimpleInfo* userinfo);

  // @@protoc_insertion_point(class_scope:pb.TUnionPartyLootRecord)
 private:
  inline void set_has_boxid();
  inline void clear_has_boxid();
  inline void set_has_goodsid();
  inline void clear_has_goodsid();
  inline void set_has_loottime();
  inline void clear_has_loottime();
  inline void set_has_userinfo();
  inline void clear_has_userinfo();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int32 boxid_;
  ::google::protobuf::int32 goodsid_;
  ::google::protobuf::int64 loottime_;
  ::google::protobuf::RepeatedPtrField< ::pb::TCommonReward > arrreward_;
  ::pb::TUserSimpleInfo* userinfo_;
  friend void  protobuf_AddDesc_net_2fUnionParty_2eproto();
  friend void protobuf_AssignDesc_net_2fUnionParty_2eproto();
  friend void protobuf_ShutdownFile_net_2fUnionParty_2eproto();

  void InitAsDefaultInstance();
  static TUnionPartyLootRecord* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TUnionPartyGetUserInfoRsp</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/UnionParty.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TUnionPartyGetUserInfoRsp : public ::google::protobuf::Message {
 public:
  TUnionPartyGetUserInfoRsp();
  virtual ~TUnionPartyGetUserInfoRsp();

  TUnionPartyGetUserInfoRsp(const TUnionPartyGetUserInfoRsp& from);

  inline TUnionPartyGetUserInfoRsp& operator=(const TUnionPartyGetUserInfoRsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TUnionPartyGetUserInfoRsp& default_instance();

  void Swap(TUnionPartyGetUserInfoRsp* other);

  // implements Message ----------------------------------------------

  TUnionPartyGetUserInfoRsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TUnionPartyGetUserInfoRsp& from);
  void MergeFrom(const TUnionPartyGetUserInfoRsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .pb.TUnionPartyShopInfo ArrShopInfo = 1;
  inline int arrshopinfo_size() const;
  inline void clear_arrshopinfo();
  static const int kArrShopInfoFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TUnionPartyGetUserInfoRsp</name>
  	<Function>
  		<name>arrshopinfo</name>
  		<replaceName>ArrShopInfo</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_arrshopinfo</name>
  		<replaceName>ArrShopInfo</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_arrshopinfo</name>
  		<replaceName>ArrShopInfo</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_arrshopinfo</name>
  		<replaceName>ArrShopInfo</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>arrshopinfo_size</name>
  		<replaceName>ArrShopInfo</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TUnionPartyShopInfo& arrshopinfo(int index) const;
  inline ::pb::TUnionPartyShopInfo* mutable_arrshopinfo(int index);
  inline ::pb::TUnionPartyShopInfo* add_arrshopinfo();
  inline const ::google::protobuf::RepeatedPtrField< ::pb::TUnionPartyShopInfo >&
      arrshopinfo() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb::TUnionPartyShopInfo >*
      mutable_arrshopinfo();

  // repeated .pb.TUnionPartyLootRecord ArrLootRecord = 2;
  inline int arrlootrecord_size() const;
  inline void clear_arrlootrecord();
  static const int kArrLootRecordFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TUnionPartyGetUserInfoRsp</name>
  	<Function>
  		<name>arrlootrecord</name>
  		<replaceName>ArrLootRecord</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_arrlootrecord</name>
  		<replaceName>ArrLootRecord</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_arrlootrecord</name>
  		<replaceName>ArrLootRecord</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_arrlootrecord</name>
  		<replaceName>ArrLootRecord</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>arrlootrecord_size</name>
  		<replaceName>ArrLootRecord</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TUnionPartyLootRecord& arrlootrecord(int index) const;
  inline ::pb::TUnionPartyLootRecord* mutable_arrlootrecord(int index);
  inline ::pb::TUnionPartyLootRecord* add_arrlootrecord();
  inline const ::google::protobuf::RepeatedPtrField< ::pb::TUnionPartyLootRecord >&
      arrlootrecord() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb::TUnionPartyLootRecord >*
      mutable_arrlootrecord();

  // repeated .pb.TUnionPartyShopRecord ArrShopRecord = 3;
  inline int arrshoprecord_size() const;
  inline void clear_arrshoprecord();
  static const int kArrShopRecordFieldNumber = 3;
  /*FOR2LUA
  <Record>
  	<name>TUnionPartyGetUserInfoRsp</name>
  	<Function>
  		<name>arrshoprecord</name>
  		<replaceName>ArrShopRecord</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_arrshoprecord</name>
  		<replaceName>ArrShopRecord</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_arrshoprecord</name>
  		<replaceName>ArrShopRecord</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_arrshoprecord</name>
  		<replaceName>ArrShopRecord</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>arrshoprecord_size</name>
  		<replaceName>ArrShopRecord</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TUnionPartyShopRecord& arrshoprecord(int index) const;
  inline ::pb::TUnionPartyShopRecord* mutable_arrshoprecord(int index);
  inline ::pb::TUnionPartyShopRecord* add_arrshoprecord();
  inline const ::google::protobuf::RepeatedPtrField< ::pb::TUnionPartyShopRecord >&
      arrshoprecord() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb::TUnionPartyShopRecord >*
      mutable_arrshoprecord();

  // optional bool CheckEnterFailed = 4;
  inline bool has_checkenterfailed() const;
  inline void clear_checkenterfailed();
  static const int kCheckEnterFailedFieldNumber = 4;
  /*FOR2LUA
  <Record>
  	<name>TUnionPartyGetUserInfoRsp</name>
  	<Function>
  		<name>checkenterfailed</name>
  		<replaceName>CheckEnterFailed</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_checkenterfailed</name>
  		<replaceName>CheckEnterFailed</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_checkenterfailed</name>
  		<replaceName>CheckEnterFailed</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline bool checkenterfailed() const;
  inline void set_checkenterfailed(bool value);

  // @@protoc_insertion_point(class_scope:pb.TUnionPartyGetUserInfoRsp)
 private:
  inline void set_has_checkenterfailed();
  inline void clear_has_checkenterfailed();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::pb::TUnionPartyShopInfo > arrshopinfo_;
  ::google::protobuf::RepeatedPtrField< ::pb::TUnionPartyLootRecord > arrlootrecord_;
  ::google::protobuf::RepeatedPtrField< ::pb::TUnionPartyShopRecord > arrshoprecord_;
  bool checkenterfailed_;
  friend void  protobuf_AddDesc_net_2fUnionParty_2eproto();
  friend void protobuf_AssignDesc_net_2fUnionParty_2eproto();
  friend void protobuf_ShutdownFile_net_2fUnionParty_2eproto();

  void InitAsDefaultInstance();
  static TUnionPartyGetUserInfoRsp* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TUnionPartyGetPartyInfoRsp</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/UnionParty.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TUnionPartyGetPartyInfoRsp : public ::google::protobuf::Message {
 public:
  TUnionPartyGetPartyInfoRsp();
  virtual ~TUnionPartyGetPartyInfoRsp();

  TUnionPartyGetPartyInfoRsp(const TUnionPartyGetPartyInfoRsp& from);

  inline TUnionPartyGetPartyInfoRsp& operator=(const TUnionPartyGetPartyInfoRsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TUnionPartyGetPartyInfoRsp& default_instance();

  void Swap(TUnionPartyGetPartyInfoRsp* other);

  // implements Message ----------------------------------------------

  TUnionPartyGetPartyInfoRsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TUnionPartyGetPartyInfoRsp& from);
  void MergeFrom(const TUnionPartyGetPartyInfoRsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint64 PartyId = 1;
  inline bool has_partyid() const;
  inline void clear_partyid();
  static const int kPartyIdFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TUnionPartyGetPartyInfoRsp</name>
  	<Function>
  		<name>partyid</name>
  		<replaceName>PartyId</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_partyid</name>
  		<replaceName>PartyId</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_partyid</name>
  		<replaceName>PartyId</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint64 partyid() const;
  inline void set_partyid(::google::protobuf::uint64 value);

  // optional .pb.EUnionPartyStage PartyStage = 2;
  inline bool has_partystage() const;
  inline void clear_partystage();
  static const int kPartyStageFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TUnionPartyGetPartyInfoRsp</name>
  	<Function>
  		<name>partystage</name>
  		<replaceName>PartyStage</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_partystage</name>
  		<replaceName>PartyStage</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_partystage</name>
  		<replaceName>PartyStage</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::pb::EUnionPartyStage partystage() const;
  inline void set_partystage(::pb::EUnionPartyStage value);

  // optional int64 StartTime = 3;
  inline bool has_starttime() const;
  inline void clear_starttime();
  static const int kStartTimeFieldNumber = 3;
  /*FOR2LUA
  <Record>
  	<name>TUnionPartyGetPartyInfoRsp</name>
  	<Function>
  		<name>starttime</name>
  		<replaceName>StartTime</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_starttime</name>
  		<replaceName>StartTime</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_starttime</name>
  		<replaceName>StartTime</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::int64 starttime() const;
  inline void set_starttime(::google::protobuf::int64 value);

  // optional uint64 JoinPartyId = 4;
  inline bool has_joinpartyid() const;
  inline void clear_joinpartyid();
  static const int kJoinPartyIdFieldNumber = 4;
  /*FOR2LUA
  <Record>
  	<name>TUnionPartyGetPartyInfoRsp</name>
  	<Function>
  		<name>joinpartyid</name>
  		<replaceName>JoinPartyId</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_joinpartyid</name>
  		<replaceName>JoinPartyId</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_joinpartyid</name>
  		<replaceName>JoinPartyId</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint64 joinpartyid() const;
  inline void set_joinpartyid(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:pb.TUnionPartyGetPartyInfoRsp)
 private:
  inline void set_has_partyid();
  inline void clear_has_partyid();
  inline void set_has_partystage();
  inline void clear_has_partystage();
  inline void set_has_starttime();
  inline void clear_has_starttime();
  inline void set_has_joinpartyid();
  inline void clear_has_joinpartyid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint64 partyid_;
  ::google::protobuf::int64 starttime_;
  ::google::protobuf::uint64 joinpartyid_;
  int partystage_;
  friend void  protobuf_AddDesc_net_2fUnionParty_2eproto();
  friend void protobuf_AssignDesc_net_2fUnionParty_2eproto();
  friend void protobuf_ShutdownFile_net_2fUnionParty_2eproto();

  void InitAsDefaultInstance();
  static TUnionPartyGetPartyInfoRsp* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TUnionPartyStartPartyRsp</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/UnionParty.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TUnionPartyStartPartyRsp : public ::google::protobuf::Message {
 public:
  TUnionPartyStartPartyRsp();
  virtual ~TUnionPartyStartPartyRsp();

  TUnionPartyStartPartyRsp(const TUnionPartyStartPartyRsp& from);

  inline TUnionPartyStartPartyRsp& operator=(const TUnionPartyStartPartyRsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TUnionPartyStartPartyRsp& default_instance();

  void Swap(TUnionPartyStartPartyRsp* other);

  // implements Message ----------------------------------------------

  TUnionPartyStartPartyRsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TUnionPartyStartPartyRsp& from);
  void MergeFrom(const TUnionPartyStartPartyRsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .pb.EUnionPartyStartResult ResultCode = 1;
  inline bool has_resultcode() const;
  inline void clear_resultcode();
  static const int kResultCodeFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TUnionPartyStartPartyRsp</name>
  	<Function>
  		<name>resultcode</name>
  		<replaceName>ResultCode</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_resultcode</name>
  		<replaceName>ResultCode</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_resultcode</name>
  		<replaceName>ResultCode</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::pb::EUnionPartyStartResult resultcode() const;
  inline void set_resultcode(::pb::EUnionPartyStartResult value);

  // @@protoc_insertion_point(class_scope:pb.TUnionPartyStartPartyRsp)
 private:
  inline void set_has_resultcode();
  inline void clear_has_resultcode();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  int resultcode_;
  friend void  protobuf_AddDesc_net_2fUnionParty_2eproto();
  friend void protobuf_AssignDesc_net_2fUnionParty_2eproto();
  friend void protobuf_ShutdownFile_net_2fUnionParty_2eproto();

  void InitAsDefaultInstance();
  static TUnionPartyStartPartyRsp* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TUnionPartyFreeBoxInfo</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/UnionParty.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TUnionPartyFreeBoxInfo : public ::google::protobuf::Message {
 public:
  TUnionPartyFreeBoxInfo();
  virtual ~TUnionPartyFreeBoxInfo();

  TUnionPartyFreeBoxInfo(const TUnionPartyFreeBoxInfo& from);

  inline TUnionPartyFreeBoxInfo& operator=(const TUnionPartyFreeBoxInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TUnionPartyFreeBoxInfo& default_instance();

  void Swap(TUnionPartyFreeBoxInfo* other);

  // implements Message ----------------------------------------------

  TUnionPartyFreeBoxInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TUnionPartyFreeBoxInfo& from);
  void MergeFrom(const TUnionPartyFreeBoxInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 BoxId = 1;
  inline bool has_boxid() const;
  inline void clear_boxid();
  static const int kBoxIdFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TUnionPartyFreeBoxInfo</name>
  	<Function>
  		<name>boxid</name>
  		<replaceName>BoxId</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_boxid</name>
  		<replaceName>BoxId</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_boxid</name>
  		<replaceName>BoxId</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::int32 boxid() const;
  inline void set_boxid(::google::protobuf::int32 value);

  // optional int64 CreateTime = 2;
  inline bool has_createtime() const;
  inline void clear_createtime();
  static const int kCreateTimeFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TUnionPartyFreeBoxInfo</name>
  	<Function>
  		<name>createtime</name>
  		<replaceName>CreateTime</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_createtime</name>
  		<replaceName>CreateTime</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_createtime</name>
  		<replaceName>CreateTime</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::int64 createtime() const;
  inline void set_createtime(::google::protobuf::int64 value);

  // optional int32 PosId = 3;
  inline bool has_posid() const;
  inline void clear_posid();
  static const int kPosIdFieldNumber = 3;
  /*FOR2LUA
  <Record>
  	<name>TUnionPartyFreeBoxInfo</name>
  	<Function>
  		<name>posid</name>
  		<replaceName>PosId</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_posid</name>
  		<replaceName>PosId</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_posid</name>
  		<replaceName>PosId</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::int32 posid() const;
  inline void set_posid(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:pb.TUnionPartyFreeBoxInfo)
 private:
  inline void set_has_boxid();
  inline void clear_has_boxid();
  inline void set_has_createtime();
  inline void clear_has_createtime();
  inline void set_has_posid();
  inline void clear_has_posid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int64 createtime_;
  ::google::protobuf::int32 boxid_;
  ::google::protobuf::int32 posid_;
  friend void  protobuf_AddDesc_net_2fUnionParty_2eproto();
  friend void protobuf_AssignDesc_net_2fUnionParty_2eproto();
  friend void protobuf_ShutdownFile_net_2fUnionParty_2eproto();

  void InitAsDefaultInstance();
  static TUnionPartyFreeBoxInfo* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TUnionPartyRmbBoxInfo</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/UnionParty.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TUnionPartyRmbBoxInfo : public ::google::protobuf::Message {
 public:
  TUnionPartyRmbBoxInfo();
  virtual ~TUnionPartyRmbBoxInfo();

  TUnionPartyRmbBoxInfo(const TUnionPartyRmbBoxInfo& from);

  inline TUnionPartyRmbBoxInfo& operator=(const TUnionPartyRmbBoxInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TUnionPartyRmbBoxInfo& default_instance();

  void Swap(TUnionPartyRmbBoxInfo* other);

  // implements Message ----------------------------------------------

  TUnionPartyRmbBoxInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TUnionPartyRmbBoxInfo& from);
  void MergeFrom(const TUnionPartyRmbBoxInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 BoxId = 1;
  inline bool has_boxid() const;
  inline void clear_boxid();
  static const int kBoxIdFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TUnionPartyRmbBoxInfo</name>
  	<Function>
  		<name>boxid</name>
  		<replaceName>BoxId</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_boxid</name>
  		<replaceName>BoxId</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_boxid</name>
  		<replaceName>BoxId</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::int32 boxid() const;
  inline void set_boxid(::google::protobuf::int32 value);

  // optional int64 CreateTime = 2;
  inline bool has_createtime() const;
  inline void clear_createtime();
  static const int kCreateTimeFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TUnionPartyRmbBoxInfo</name>
  	<Function>
  		<name>createtime</name>
  		<replaceName>CreateTime</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_createtime</name>
  		<replaceName>CreateTime</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_createtime</name>
  		<replaceName>CreateTime</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::int64 createtime() const;
  inline void set_createtime(::google::protobuf::int64 value);

  // optional int32 PosX = 3;
  inline bool has_posx() const;
  inline void clear_posx();
  static const int kPosXFieldNumber = 3;
  /*FOR2LUA
  <Record>
  	<name>TUnionPartyRmbBoxInfo</name>
  	<Function>
  		<name>posx</name>
  		<replaceName>PosX</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_posx</name>
  		<replaceName>PosX</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_posx</name>
  		<replaceName>PosX</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::int32 posx() const;
  inline void set_posx(::google::protobuf::int32 value);

  // optional int32 PosY = 4;
  inline bool has_posy() const;
  inline void clear_posy();
  static const int kPosYFieldNumber = 4;
  /*FOR2LUA
  <Record>
  	<name>TUnionPartyRmbBoxInfo</name>
  	<Function>
  		<name>posy</name>
  		<replaceName>PosY</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_posy</name>
  		<replaceName>PosY</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_posy</name>
  		<replaceName>PosY</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::int32 posy() const;
  inline void set_posy(::google::protobuf::int32 value);

  // optional int32 GoodsId = 5;
  inline bool has_goodsid() const;
  inline void clear_goodsid();
  static const int kGoodsIdFieldNumber = 5;
  /*FOR2LUA
  <Record>
  	<name>TUnionPartyRmbBoxInfo</name>
  	<Function>
  		<name>goodsid</name>
  		<replaceName>GoodsId</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_goodsid</name>
  		<replaceName>GoodsId</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_goodsid</name>
  		<replaceName>GoodsId</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::int32 goodsid() const;
  inline void set_goodsid(::google::protobuf::int32 value);

  // optional .pb.TUserSimpleInfo UserInfo = 6;
  inline bool has_userinfo() const;
  inline void clear_userinfo();
  static const int kUserInfoFieldNumber = 6;
  /*FOR2LUA
  <Record>
  	<name>TUnionPartyRmbBoxInfo</name>
  	<Function>
  		<name>userinfo</name>
  		<replaceName>UserInfo</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_userinfo</name>
  		<replaceName>UserInfo</replaceName>
  		<handler>descripter = pb_set_message_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_allocated_userinfo</name>
  		<replaceName>UserInfo</replaceName>
  		<handler>descripter = pb_set_message_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_userinfo</name>
  		<replaceName>UserInfo</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TUserSimpleInfo& userinfo() const;
  inline ::pb::TUserSimpleInfo* mutable_userinfo();
  inline ::pb::TUserSimpleInfo* release_userinfo();
  inline void set_allocated_userinfo(::pb::TUserSimpleInfo* userinfo);

  // @@protoc_insertion_point(class_scope:pb.TUnionPartyRmbBoxInfo)
 private:
  inline void set_has_boxid();
  inline void clear_has_boxid();
  inline void set_has_createtime();
  inline void clear_has_createtime();
  inline void set_has_posx();
  inline void clear_has_posx();
  inline void set_has_posy();
  inline void clear_has_posy();
  inline void set_has_goodsid();
  inline void clear_has_goodsid();
  inline void set_has_userinfo();
  inline void clear_has_userinfo();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int64 createtime_;
  ::google::protobuf::int32 boxid_;
  ::google::protobuf::int32 posx_;
  ::google::protobuf::int32 posy_;
  ::google::protobuf::int32 goodsid_;
  ::pb::TUserSimpleInfo* userinfo_;
  friend void  protobuf_AddDesc_net_2fUnionParty_2eproto();
  friend void protobuf_AssignDesc_net_2fUnionParty_2eproto();
  friend void protobuf_ShutdownFile_net_2fUnionParty_2eproto();

  void InitAsDefaultInstance();
  static TUnionPartyRmbBoxInfo* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TUnionPartyEnterRsp</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/UnionParty.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TUnionPartyEnterRsp : public ::google::protobuf::Message {
 public:
  TUnionPartyEnterRsp();
  virtual ~TUnionPartyEnterRsp();

  TUnionPartyEnterRsp(const TUnionPartyEnterRsp& from);

  inline TUnionPartyEnterRsp& operator=(const TUnionPartyEnterRsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TUnionPartyEnterRsp& default_instance();

  void Swap(TUnionPartyEnterRsp* other);

  // implements Message ----------------------------------------------

  TUnionPartyEnterRsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TUnionPartyEnterRsp& from);
  void MergeFrom(const TUnionPartyEnterRsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .pb.EUnionPartyStage StageId = 1;
  inline bool has_stageid() const;
  inline void clear_stageid();
  static const int kStageIdFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TUnionPartyEnterRsp</name>
  	<Function>
  		<name>stageid</name>
  		<replaceName>StageId</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_stageid</name>
  		<replaceName>StageId</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_stageid</name>
  		<replaceName>StageId</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::pb::EUnionPartyStage stageid() const;
  inline void set_stageid(::pb::EUnionPartyStage value);

  // repeated .pb.TUnionPartyFreeBoxInfo ArrFreeBoxInfo = 2;
  inline int arrfreeboxinfo_size() const;
  inline void clear_arrfreeboxinfo();
  static const int kArrFreeBoxInfoFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TUnionPartyEnterRsp</name>
  	<Function>
  		<name>arrfreeboxinfo</name>
  		<replaceName>ArrFreeBoxInfo</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_arrfreeboxinfo</name>
  		<replaceName>ArrFreeBoxInfo</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_arrfreeboxinfo</name>
  		<replaceName>ArrFreeBoxInfo</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_arrfreeboxinfo</name>
  		<replaceName>ArrFreeBoxInfo</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>arrfreeboxinfo_size</name>
  		<replaceName>ArrFreeBoxInfo</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TUnionPartyFreeBoxInfo& arrfreeboxinfo(int index) const;
  inline ::pb::TUnionPartyFreeBoxInfo* mutable_arrfreeboxinfo(int index);
  inline ::pb::TUnionPartyFreeBoxInfo* add_arrfreeboxinfo();
  inline const ::google::protobuf::RepeatedPtrField< ::pb::TUnionPartyFreeBoxInfo >&
      arrfreeboxinfo() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb::TUnionPartyFreeBoxInfo >*
      mutable_arrfreeboxinfo();

  // repeated .pb.TUnionPartyRmbBoxInfo ArrRmbBoxInfo = 3;
  inline int arrrmbboxinfo_size() const;
  inline void clear_arrrmbboxinfo();
  static const int kArrRmbBoxInfoFieldNumber = 3;
  /*FOR2LUA
  <Record>
  	<name>TUnionPartyEnterRsp</name>
  	<Function>
  		<name>arrrmbboxinfo</name>
  		<replaceName>ArrRmbBoxInfo</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_arrrmbboxinfo</name>
  		<replaceName>ArrRmbBoxInfo</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_arrrmbboxinfo</name>
  		<replaceName>ArrRmbBoxInfo</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_arrrmbboxinfo</name>
  		<replaceName>ArrRmbBoxInfo</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>arrrmbboxinfo_size</name>
  		<replaceName>ArrRmbBoxInfo</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TUnionPartyRmbBoxInfo& arrrmbboxinfo(int index) const;
  inline ::pb::TUnionPartyRmbBoxInfo* mutable_arrrmbboxinfo(int index);
  inline ::pb::TUnionPartyRmbBoxInfo* add_arrrmbboxinfo();
  inline const ::google::protobuf::RepeatedPtrField< ::pb::TUnionPartyRmbBoxInfo >&
      arrrmbboxinfo() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb::TUnionPartyRmbBoxInfo >*
      mutable_arrrmbboxinfo();

  // @@protoc_insertion_point(class_scope:pb.TUnionPartyEnterRsp)
 private:
  inline void set_has_stageid();
  inline void clear_has_stageid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::pb::TUnionPartyFreeBoxInfo > arrfreeboxinfo_;
  ::google::protobuf::RepeatedPtrField< ::pb::TUnionPartyRmbBoxInfo > arrrmbboxinfo_;
  int stageid_;
  friend void  protobuf_AddDesc_net_2fUnionParty_2eproto();
  friend void protobuf_AssignDesc_net_2fUnionParty_2eproto();
  friend void protobuf_ShutdownFile_net_2fUnionParty_2eproto();

  void InitAsDefaultInstance();
  static TUnionPartyEnterRsp* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TUnionPartyLootReq</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/UnionParty.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TUnionPartyLootReq : public ::google::protobuf::Message {
 public:
  TUnionPartyLootReq();
  virtual ~TUnionPartyLootReq();

  TUnionPartyLootReq(const TUnionPartyLootReq& from);

  inline TUnionPartyLootReq& operator=(const TUnionPartyLootReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TUnionPartyLootReq& default_instance();

  void Swap(TUnionPartyLootReq* other);

  // implements Message ----------------------------------------------

  TUnionPartyLootReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TUnionPartyLootReq& from);
  void MergeFrom(const TUnionPartyLootReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 BoxId = 1;
  inline bool has_boxid() const;
  inline void clear_boxid();
  static const int kBoxIdFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TUnionPartyLootReq</name>
  	<Function>
  		<name>boxid</name>
  		<replaceName>BoxId</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_boxid</name>
  		<replaceName>BoxId</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_boxid</name>
  		<replaceName>BoxId</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::int32 boxid() const;
  inline void set_boxid(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:pb.TUnionPartyLootReq)
 private:
  inline void set_has_boxid();
  inline void clear_has_boxid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int32 boxid_;
  friend void  protobuf_AddDesc_net_2fUnionParty_2eproto();
  friend void protobuf_AssignDesc_net_2fUnionParty_2eproto();
  friend void protobuf_ShutdownFile_net_2fUnionParty_2eproto();

  void InitAsDefaultInstance();
  static TUnionPartyLootReq* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TUnionPartyLootRsp</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/UnionParty.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TUnionPartyLootRsp : public ::google::protobuf::Message {
 public:
  TUnionPartyLootRsp();
  virtual ~TUnionPartyLootRsp();

  TUnionPartyLootRsp(const TUnionPartyLootRsp& from);

  inline TUnionPartyLootRsp& operator=(const TUnionPartyLootRsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TUnionPartyLootRsp& default_instance();

  void Swap(TUnionPartyLootRsp* other);

  // implements Message ----------------------------------------------

  TUnionPartyLootRsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TUnionPartyLootRsp& from);
  void MergeFrom(const TUnionPartyLootRsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .pb.EUnionPartyLootResult ResultCode = 1;
  inline bool has_resultcode() const;
  inline void clear_resultcode();
  static const int kResultCodeFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TUnionPartyLootRsp</name>
  	<Function>
  		<name>resultcode</name>
  		<replaceName>ResultCode</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_resultcode</name>
  		<replaceName>ResultCode</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_resultcode</name>
  		<replaceName>ResultCode</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::pb::EUnionPartyLootResult resultcode() const;
  inline void set_resultcode(::pb::EUnionPartyLootResult value);

  // repeated .pb.TCommonReward ArrReward = 2;
  inline int arrreward_size() const;
  inline void clear_arrreward();
  static const int kArrRewardFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TUnionPartyLootRsp</name>
  	<Function>
  		<name>arrreward</name>
  		<replaceName>ArrReward</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_arrreward</name>
  		<replaceName>ArrReward</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_arrreward</name>
  		<replaceName>ArrReward</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_arrreward</name>
  		<replaceName>ArrReward</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>arrreward_size</name>
  		<replaceName>ArrReward</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TCommonReward& arrreward(int index) const;
  inline ::pb::TCommonReward* mutable_arrreward(int index);
  inline ::pb::TCommonReward* add_arrreward();
  inline const ::google::protobuf::RepeatedPtrField< ::pb::TCommonReward >&
      arrreward() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb::TCommonReward >*
      mutable_arrreward();

  // optional bool IsFreeBox = 3;
  inline bool has_isfreebox() const;
  inline void clear_isfreebox();
  static const int kIsFreeBoxFieldNumber = 3;
  /*FOR2LUA
  <Record>
  	<name>TUnionPartyLootRsp</name>
  	<Function>
  		<name>isfreebox</name>
  		<replaceName>IsFreeBox</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_isfreebox</name>
  		<replaceName>IsFreeBox</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_isfreebox</name>
  		<replaceName>IsFreeBox</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline bool isfreebox() const;
  inline void set_isfreebox(bool value);

  // @@protoc_insertion_point(class_scope:pb.TUnionPartyLootRsp)
 private:
  inline void set_has_resultcode();
  inline void clear_has_resultcode();
  inline void set_has_isfreebox();
  inline void clear_has_isfreebox();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::pb::TCommonReward > arrreward_;
  int resultcode_;
  bool isfreebox_;
  friend void  protobuf_AddDesc_net_2fUnionParty_2eproto();
  friend void protobuf_AssignDesc_net_2fUnionParty_2eproto();
  friend void protobuf_ShutdownFile_net_2fUnionParty_2eproto();

  void InitAsDefaultInstance();
  static TUnionPartyLootRsp* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TUnionPartyBoxRechargeReq</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/UnionParty.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TUnionPartyBoxRechargeReq : public ::google::protobuf::Message {
 public:
  TUnionPartyBoxRechargeReq();
  virtual ~TUnionPartyBoxRechargeReq();

  TUnionPartyBoxRechargeReq(const TUnionPartyBoxRechargeReq& from);

  inline TUnionPartyBoxRechargeReq& operator=(const TUnionPartyBoxRechargeReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TUnionPartyBoxRechargeReq& default_instance();

  void Swap(TUnionPartyBoxRechargeReq* other);

  // implements Message ----------------------------------------------

  TUnionPartyBoxRechargeReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TUnionPartyBoxRechargeReq& from);
  void MergeFrom(const TUnionPartyBoxRechargeReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 GoodsId = 1;
  inline bool has_goodsid() const;
  inline void clear_goodsid();
  static const int kGoodsIdFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TUnionPartyBoxRechargeReq</name>
  	<Function>
  		<name>goodsid</name>
  		<replaceName>GoodsId</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_goodsid</name>
  		<replaceName>GoodsId</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_goodsid</name>
  		<replaceName>GoodsId</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::int32 goodsid() const;
  inline void set_goodsid(::google::protobuf::int32 value);

  // optional int32 PosX = 3;
  inline bool has_posx() const;
  inline void clear_posx();
  static const int kPosXFieldNumber = 3;
  /*FOR2LUA
  <Record>
  	<name>TUnionPartyBoxRechargeReq</name>
  	<Function>
  		<name>posx</name>
  		<replaceName>PosX</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_posx</name>
  		<replaceName>PosX</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_posx</name>
  		<replaceName>PosX</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::int32 posx() const;
  inline void set_posx(::google::protobuf::int32 value);

  // optional int32 PosY = 4;
  inline bool has_posy() const;
  inline void clear_posy();
  static const int kPosYFieldNumber = 4;
  /*FOR2LUA
  <Record>
  	<name>TUnionPartyBoxRechargeReq</name>
  	<Function>
  		<name>posy</name>
  		<replaceName>PosY</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_posy</name>
  		<replaceName>PosY</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_posy</name>
  		<replaceName>PosY</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::int32 posy() const;
  inline void set_posy(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:pb.TUnionPartyBoxRechargeReq)
 private:
  inline void set_has_goodsid();
  inline void clear_has_goodsid();
  inline void set_has_posx();
  inline void clear_has_posx();
  inline void set_has_posy();
  inline void clear_has_posy();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int32 goodsid_;
  ::google::protobuf::int32 posx_;
  ::google::protobuf::int32 posy_;
  friend void  protobuf_AddDesc_net_2fUnionParty_2eproto();
  friend void protobuf_AssignDesc_net_2fUnionParty_2eproto();
  friend void protobuf_ShutdownFile_net_2fUnionParty_2eproto();

  void InitAsDefaultInstance();
  static TUnionPartyBoxRechargeReq* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TUnionPartyBoxRechargeRsp</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/UnionParty.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TUnionPartyBoxRechargeRsp : public ::google::protobuf::Message {
 public:
  TUnionPartyBoxRechargeRsp();
  virtual ~TUnionPartyBoxRechargeRsp();

  TUnionPartyBoxRechargeRsp(const TUnionPartyBoxRechargeRsp& from);

  inline TUnionPartyBoxRechargeRsp& operator=(const TUnionPartyBoxRechargeRsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TUnionPartyBoxRechargeRsp& default_instance();

  void Swap(TUnionPartyBoxRechargeRsp* other);

  // implements Message ----------------------------------------------

  TUnionPartyBoxRechargeRsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TUnionPartyBoxRechargeRsp& from);
  void MergeFrom(const TUnionPartyBoxRechargeRsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 GoodsId = 1;
  inline bool has_goodsid() const;
  inline void clear_goodsid();
  static const int kGoodsIdFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TUnionPartyBoxRechargeRsp</name>
  	<Function>
  		<name>goodsid</name>
  		<replaceName>GoodsId</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_goodsid</name>
  		<replaceName>GoodsId</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_goodsid</name>
  		<replaceName>GoodsId</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::int32 goodsid() const;
  inline void set_goodsid(::google::protobuf::int32 value);

  // optional .pb.EUnionPartyRechargeResult ResultCode = 2;
  inline bool has_resultcode() const;
  inline void clear_resultcode();
  static const int kResultCodeFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TUnionPartyBoxRechargeRsp</name>
  	<Function>
  		<name>resultcode</name>
  		<replaceName>ResultCode</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_resultcode</name>
  		<replaceName>ResultCode</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_resultcode</name>
  		<replaceName>ResultCode</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::pb::EUnionPartyRechargeResult resultcode() const;
  inline void set_resultcode(::pb::EUnionPartyRechargeResult value);

  // @@protoc_insertion_point(class_scope:pb.TUnionPartyBoxRechargeRsp)
 private:
  inline void set_has_goodsid();
  inline void clear_has_goodsid();
  inline void set_has_resultcode();
  inline void clear_has_resultcode();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int32 goodsid_;
  int resultcode_;
  friend void  protobuf_AddDesc_net_2fUnionParty_2eproto();
  friend void protobuf_AssignDesc_net_2fUnionParty_2eproto();
  friend void protobuf_ShutdownFile_net_2fUnionParty_2eproto();

  void InitAsDefaultInstance();
  static TUnionPartyBoxRechargeRsp* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TUnionPartyNotify</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/UnionParty.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TUnionPartyNotify : public ::google::protobuf::Message {
 public:
  TUnionPartyNotify();
  virtual ~TUnionPartyNotify();

  TUnionPartyNotify(const TUnionPartyNotify& from);

  inline TUnionPartyNotify& operator=(const TUnionPartyNotify& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TUnionPartyNotify& default_instance();

  void Swap(TUnionPartyNotify* other);

  // implements Message ----------------------------------------------

  TUnionPartyNotify* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TUnionPartyNotify& from);
  void MergeFrom(const TUnionPartyNotify& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .pb.EUnionPartyStage StageId = 1;
  inline bool has_stageid() const;
  inline void clear_stageid();
  static const int kStageIdFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TUnionPartyNotify</name>
  	<Function>
  		<name>stageid</name>
  		<replaceName>StageId</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_stageid</name>
  		<replaceName>StageId</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_stageid</name>
  		<replaceName>StageId</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::pb::EUnionPartyStage stageid() const;
  inline void set_stageid(::pb::EUnionPartyStage value);

  // repeated .pb.TUnionPartyFreeBoxInfo ArrFreeBoxInfo = 2;
  inline int arrfreeboxinfo_size() const;
  inline void clear_arrfreeboxinfo();
  static const int kArrFreeBoxInfoFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TUnionPartyNotify</name>
  	<Function>
  		<name>arrfreeboxinfo</name>
  		<replaceName>ArrFreeBoxInfo</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_arrfreeboxinfo</name>
  		<replaceName>ArrFreeBoxInfo</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_arrfreeboxinfo</name>
  		<replaceName>ArrFreeBoxInfo</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_arrfreeboxinfo</name>
  		<replaceName>ArrFreeBoxInfo</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>arrfreeboxinfo_size</name>
  		<replaceName>ArrFreeBoxInfo</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TUnionPartyFreeBoxInfo& arrfreeboxinfo(int index) const;
  inline ::pb::TUnionPartyFreeBoxInfo* mutable_arrfreeboxinfo(int index);
  inline ::pb::TUnionPartyFreeBoxInfo* add_arrfreeboxinfo();
  inline const ::google::protobuf::RepeatedPtrField< ::pb::TUnionPartyFreeBoxInfo >&
      arrfreeboxinfo() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb::TUnionPartyFreeBoxInfo >*
      mutable_arrfreeboxinfo();

  // repeated .pb.TUnionPartyRmbBoxInfo ArrRmbBoxInfo = 3;
  inline int arrrmbboxinfo_size() const;
  inline void clear_arrrmbboxinfo();
  static const int kArrRmbBoxInfoFieldNumber = 3;
  /*FOR2LUA
  <Record>
  	<name>TUnionPartyNotify</name>
  	<Function>
  		<name>arrrmbboxinfo</name>
  		<replaceName>ArrRmbBoxInfo</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_arrrmbboxinfo</name>
  		<replaceName>ArrRmbBoxInfo</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_arrrmbboxinfo</name>
  		<replaceName>ArrRmbBoxInfo</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_arrrmbboxinfo</name>
  		<replaceName>ArrRmbBoxInfo</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>arrrmbboxinfo_size</name>
  		<replaceName>ArrRmbBoxInfo</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TUnionPartyRmbBoxInfo& arrrmbboxinfo(int index) const;
  inline ::pb::TUnionPartyRmbBoxInfo* mutable_arrrmbboxinfo(int index);
  inline ::pb::TUnionPartyRmbBoxInfo* add_arrrmbboxinfo();
  inline const ::google::protobuf::RepeatedPtrField< ::pb::TUnionPartyRmbBoxInfo >&
      arrrmbboxinfo() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb::TUnionPartyRmbBoxInfo >*
      mutable_arrrmbboxinfo();

  // optional .pb.EUnionPartyOption Option = 4;
  inline bool has_option() const;
  inline void clear_option();
  static const int kOptionFieldNumber = 4;
  /*FOR2LUA
  <Record>
  	<name>TUnionPartyNotify</name>
  	<Function>
  		<name>option</name>
  		<replaceName>Option</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_option</name>
  		<replaceName>Option</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_option</name>
  		<replaceName>Option</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::pb::EUnionPartyOption option() const;
  inline void set_option(::pb::EUnionPartyOption value);

  // @@protoc_insertion_point(class_scope:pb.TUnionPartyNotify)
 private:
  inline void set_has_stageid();
  inline void clear_has_stageid();
  inline void set_has_option();
  inline void clear_has_option();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::pb::TUnionPartyFreeBoxInfo > arrfreeboxinfo_;
  int stageid_;
  int option_;
  ::google::protobuf::RepeatedPtrField< ::pb::TUnionPartyRmbBoxInfo > arrrmbboxinfo_;
  friend void  protobuf_AddDesc_net_2fUnionParty_2eproto();
  friend void protobuf_AssignDesc_net_2fUnionParty_2eproto();
  friend void protobuf_ShutdownFile_net_2fUnionParty_2eproto();

  void InitAsDefaultInstance();
  static TUnionPartyNotify* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TUnionPartyStartNotify</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/UnionParty.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TUnionPartyStartNotify : public ::google::protobuf::Message {
 public:
  TUnionPartyStartNotify();
  virtual ~TUnionPartyStartNotify();

  TUnionPartyStartNotify(const TUnionPartyStartNotify& from);

  inline TUnionPartyStartNotify& operator=(const TUnionPartyStartNotify& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TUnionPartyStartNotify& default_instance();

  void Swap(TUnionPartyStartNotify* other);

  // implements Message ----------------------------------------------

  TUnionPartyStartNotify* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TUnionPartyStartNotify& from);
  void MergeFrom(const TUnionPartyStartNotify& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint64 PartyId = 1;
  inline bool has_partyid() const;
  inline void clear_partyid();
  static const int kPartyIdFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TUnionPartyStartNotify</name>
  	<Function>
  		<name>partyid</name>
  		<replaceName>PartyId</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_partyid</name>
  		<replaceName>PartyId</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_partyid</name>
  		<replaceName>PartyId</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint64 partyid() const;
  inline void set_partyid(::google::protobuf::uint64 value);

  // optional int64 StartTime = 2;
  inline bool has_starttime() const;
  inline void clear_starttime();
  static const int kStartTimeFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TUnionPartyStartNotify</name>
  	<Function>
  		<name>starttime</name>
  		<replaceName>StartTime</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_starttime</name>
  		<replaceName>StartTime</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_starttime</name>
  		<replaceName>StartTime</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::int64 starttime() const;
  inline void set_starttime(::google::protobuf::int64 value);

  // optional .pb.EUnionPartyStage StageId = 3;
  inline bool has_stageid() const;
  inline void clear_stageid();
  static const int kStageIdFieldNumber = 3;
  /*FOR2LUA
  <Record>
  	<name>TUnionPartyStartNotify</name>
  	<Function>
  		<name>stageid</name>
  		<replaceName>StageId</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_stageid</name>
  		<replaceName>StageId</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_stageid</name>
  		<replaceName>StageId</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::pb::EUnionPartyStage stageid() const;
  inline void set_stageid(::pb::EUnionPartyStage value);

  // @@protoc_insertion_point(class_scope:pb.TUnionPartyStartNotify)
 private:
  inline void set_has_partyid();
  inline void clear_has_partyid();
  inline void set_has_starttime();
  inline void clear_has_starttime();
  inline void set_has_stageid();
  inline void clear_has_stageid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint64 partyid_;
  ::google::protobuf::int64 starttime_;
  int stageid_;
  friend void  protobuf_AddDesc_net_2fUnionParty_2eproto();
  friend void protobuf_AssignDesc_net_2fUnionParty_2eproto();
  friend void protobuf_ShutdownFile_net_2fUnionParty_2eproto();

  void InitAsDefaultInstance();
  static TUnionPartyStartNotify* default_instance_;
};
// ===================================================================


// ===================================================================

// TUnionPartyShopInfo

// optional int32 GoodsId = 1;
inline bool TUnionPartyShopInfo::has_goodsid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TUnionPartyShopInfo::set_has_goodsid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TUnionPartyShopInfo::clear_has_goodsid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TUnionPartyShopInfo::clear_goodsid() {
  goodsid_ = 0;
  clear_has_goodsid();
}
inline ::google::protobuf::int32 TUnionPartyShopInfo::goodsid() const {
  // @@protoc_insertion_point(field_get:pb.TUnionPartyShopInfo.GoodsId)
  return goodsid_;
}
inline void TUnionPartyShopInfo::set_goodsid(::google::protobuf::int32 value) {
  set_has_goodsid();
  goodsid_ = value;
  // @@protoc_insertion_point(field_set:pb.TUnionPartyShopInfo.GoodsId)
}

// optional int32 BoughtNum = 2;
inline bool TUnionPartyShopInfo::has_boughtnum() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TUnionPartyShopInfo::set_has_boughtnum() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TUnionPartyShopInfo::clear_has_boughtnum() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TUnionPartyShopInfo::clear_boughtnum() {
  boughtnum_ = 0;
  clear_has_boughtnum();
}
inline ::google::protobuf::int32 TUnionPartyShopInfo::boughtnum() const {
  // @@protoc_insertion_point(field_get:pb.TUnionPartyShopInfo.BoughtNum)
  return boughtnum_;
}
inline void TUnionPartyShopInfo::set_boughtnum(::google::protobuf::int32 value) {
  set_has_boughtnum();
  boughtnum_ = value;
  // @@protoc_insertion_point(field_set:pb.TUnionPartyShopInfo.BoughtNum)
}

// -------------------------------------------------------------------

// TUnionPartyShopRecord

// optional int32 GoodsId = 1;
inline bool TUnionPartyShopRecord::has_goodsid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TUnionPartyShopRecord::set_has_goodsid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TUnionPartyShopRecord::clear_has_goodsid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TUnionPartyShopRecord::clear_goodsid() {
  goodsid_ = 0;
  clear_has_goodsid();
}
inline ::google::protobuf::int32 TUnionPartyShopRecord::goodsid() const {
  // @@protoc_insertion_point(field_get:pb.TUnionPartyShopRecord.GoodsId)
  return goodsid_;
}
inline void TUnionPartyShopRecord::set_goodsid(::google::protobuf::int32 value) {
  set_has_goodsid();
  goodsid_ = value;
  // @@protoc_insertion_point(field_set:pb.TUnionPartyShopRecord.GoodsId)
}

// optional int64 ShopTime = 2;
inline bool TUnionPartyShopRecord::has_shoptime() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TUnionPartyShopRecord::set_has_shoptime() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TUnionPartyShopRecord::clear_has_shoptime() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TUnionPartyShopRecord::clear_shoptime() {
  shoptime_ = GOOGLE_LONGLONG(0);
  clear_has_shoptime();
}
inline ::google::protobuf::int64 TUnionPartyShopRecord::shoptime() const {
  // @@protoc_insertion_point(field_get:pb.TUnionPartyShopRecord.ShopTime)
  return shoptime_;
}
inline void TUnionPartyShopRecord::set_shoptime(::google::protobuf::int64 value) {
  set_has_shoptime();
  shoptime_ = value;
  // @@protoc_insertion_point(field_set:pb.TUnionPartyShopRecord.ShopTime)
}

// -------------------------------------------------------------------

// TUnionPartyLootRecord

// optional int32 BoxId = 1;
inline bool TUnionPartyLootRecord::has_boxid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TUnionPartyLootRecord::set_has_boxid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TUnionPartyLootRecord::clear_has_boxid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TUnionPartyLootRecord::clear_boxid() {
  boxid_ = 0;
  clear_has_boxid();
}
inline ::google::protobuf::int32 TUnionPartyLootRecord::boxid() const {
  // @@protoc_insertion_point(field_get:pb.TUnionPartyLootRecord.BoxId)
  return boxid_;
}
inline void TUnionPartyLootRecord::set_boxid(::google::protobuf::int32 value) {
  set_has_boxid();
  boxid_ = value;
  // @@protoc_insertion_point(field_set:pb.TUnionPartyLootRecord.BoxId)
}

// optional int32 GoodsId = 2;
inline bool TUnionPartyLootRecord::has_goodsid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TUnionPartyLootRecord::set_has_goodsid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TUnionPartyLootRecord::clear_has_goodsid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TUnionPartyLootRecord::clear_goodsid() {
  goodsid_ = 0;
  clear_has_goodsid();
}
inline ::google::protobuf::int32 TUnionPartyLootRecord::goodsid() const {
  // @@protoc_insertion_point(field_get:pb.TUnionPartyLootRecord.GoodsId)
  return goodsid_;
}
inline void TUnionPartyLootRecord::set_goodsid(::google::protobuf::int32 value) {
  set_has_goodsid();
  goodsid_ = value;
  // @@protoc_insertion_point(field_set:pb.TUnionPartyLootRecord.GoodsId)
}

// optional int64 LootTime = 3;
inline bool TUnionPartyLootRecord::has_loottime() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void TUnionPartyLootRecord::set_has_loottime() {
  _has_bits_[0] |= 0x00000004u;
}
inline void TUnionPartyLootRecord::clear_has_loottime() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void TUnionPartyLootRecord::clear_loottime() {
  loottime_ = GOOGLE_LONGLONG(0);
  clear_has_loottime();
}
inline ::google::protobuf::int64 TUnionPartyLootRecord::loottime() const {
  // @@protoc_insertion_point(field_get:pb.TUnionPartyLootRecord.LootTime)
  return loottime_;
}
inline void TUnionPartyLootRecord::set_loottime(::google::protobuf::int64 value) {
  set_has_loottime();
  loottime_ = value;
  // @@protoc_insertion_point(field_set:pb.TUnionPartyLootRecord.LootTime)
}

// repeated .pb.TCommonReward ArrReward = 4;
inline int TUnionPartyLootRecord::arrreward_size() const {
  return arrreward_.size();
}
inline void TUnionPartyLootRecord::clear_arrreward() {
  arrreward_.Clear();
}
inline const ::pb::TCommonReward& TUnionPartyLootRecord::arrreward(int index) const {
  // @@protoc_insertion_point(field_get:pb.TUnionPartyLootRecord.ArrReward)
  return arrreward_.Get(index);
}
inline ::pb::TCommonReward* TUnionPartyLootRecord::mutable_arrreward(int index) {
  // @@protoc_insertion_point(field_mutable:pb.TUnionPartyLootRecord.ArrReward)
  return arrreward_.Mutable(index);
}
inline ::pb::TCommonReward* TUnionPartyLootRecord::add_arrreward() {
  // @@protoc_insertion_point(field_add:pb.TUnionPartyLootRecord.ArrReward)
  return arrreward_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::TCommonReward >&
TUnionPartyLootRecord::arrreward() const {
  // @@protoc_insertion_point(field_list:pb.TUnionPartyLootRecord.ArrReward)
  return arrreward_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb::TCommonReward >*
TUnionPartyLootRecord::mutable_arrreward() {
  // @@protoc_insertion_point(field_mutable_list:pb.TUnionPartyLootRecord.ArrReward)
  return &arrreward_;
}

// optional .pb.TUserSimpleInfo UserInfo = 5;
inline bool TUnionPartyLootRecord::has_userinfo() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void TUnionPartyLootRecord::set_has_userinfo() {
  _has_bits_[0] |= 0x00000010u;
}
inline void TUnionPartyLootRecord::clear_has_userinfo() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void TUnionPartyLootRecord::clear_userinfo() {
  if (userinfo_ != NULL) userinfo_->::pb::TUserSimpleInfo::Clear();
  clear_has_userinfo();
}
inline const ::pb::TUserSimpleInfo& TUnionPartyLootRecord::userinfo() const {
  // @@protoc_insertion_point(field_get:pb.TUnionPartyLootRecord.UserInfo)
  return userinfo_ != NULL ? *userinfo_ : *default_instance_->userinfo_;
}
inline ::pb::TUserSimpleInfo* TUnionPartyLootRecord::mutable_userinfo() {
  set_has_userinfo();
  if (userinfo_ == NULL) userinfo_ = new ::pb::TUserSimpleInfo;
  // @@protoc_insertion_point(field_mutable:pb.TUnionPartyLootRecord.UserInfo)
  return userinfo_;
}
inline ::pb::TUserSimpleInfo* TUnionPartyLootRecord::release_userinfo() {
  clear_has_userinfo();
  ::pb::TUserSimpleInfo* temp = userinfo_;
  userinfo_ = NULL;
  return temp;
}
inline void TUnionPartyLootRecord::set_allocated_userinfo(::pb::TUserSimpleInfo* userinfo) {
  delete userinfo_;
  userinfo_ = userinfo;
  if (userinfo) {
    set_has_userinfo();
  } else {
    clear_has_userinfo();
  }
  // @@protoc_insertion_point(field_set_allocated:pb.TUnionPartyLootRecord.UserInfo)
}

// -------------------------------------------------------------------

// TUnionPartyGetUserInfoRsp

// repeated .pb.TUnionPartyShopInfo ArrShopInfo = 1;
inline int TUnionPartyGetUserInfoRsp::arrshopinfo_size() const {
  return arrshopinfo_.size();
}
inline void TUnionPartyGetUserInfoRsp::clear_arrshopinfo() {
  arrshopinfo_.Clear();
}
inline const ::pb::TUnionPartyShopInfo& TUnionPartyGetUserInfoRsp::arrshopinfo(int index) const {
  // @@protoc_insertion_point(field_get:pb.TUnionPartyGetUserInfoRsp.ArrShopInfo)
  return arrshopinfo_.Get(index);
}
inline ::pb::TUnionPartyShopInfo* TUnionPartyGetUserInfoRsp::mutable_arrshopinfo(int index) {
  // @@protoc_insertion_point(field_mutable:pb.TUnionPartyGetUserInfoRsp.ArrShopInfo)
  return arrshopinfo_.Mutable(index);
}
inline ::pb::TUnionPartyShopInfo* TUnionPartyGetUserInfoRsp::add_arrshopinfo() {
  // @@protoc_insertion_point(field_add:pb.TUnionPartyGetUserInfoRsp.ArrShopInfo)
  return arrshopinfo_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::TUnionPartyShopInfo >&
TUnionPartyGetUserInfoRsp::arrshopinfo() const {
  // @@protoc_insertion_point(field_list:pb.TUnionPartyGetUserInfoRsp.ArrShopInfo)
  return arrshopinfo_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb::TUnionPartyShopInfo >*
TUnionPartyGetUserInfoRsp::mutable_arrshopinfo() {
  // @@protoc_insertion_point(field_mutable_list:pb.TUnionPartyGetUserInfoRsp.ArrShopInfo)
  return &arrshopinfo_;
}

// repeated .pb.TUnionPartyLootRecord ArrLootRecord = 2;
inline int TUnionPartyGetUserInfoRsp::arrlootrecord_size() const {
  return arrlootrecord_.size();
}
inline void TUnionPartyGetUserInfoRsp::clear_arrlootrecord() {
  arrlootrecord_.Clear();
}
inline const ::pb::TUnionPartyLootRecord& TUnionPartyGetUserInfoRsp::arrlootrecord(int index) const {
  // @@protoc_insertion_point(field_get:pb.TUnionPartyGetUserInfoRsp.ArrLootRecord)
  return arrlootrecord_.Get(index);
}
inline ::pb::TUnionPartyLootRecord* TUnionPartyGetUserInfoRsp::mutable_arrlootrecord(int index) {
  // @@protoc_insertion_point(field_mutable:pb.TUnionPartyGetUserInfoRsp.ArrLootRecord)
  return arrlootrecord_.Mutable(index);
}
inline ::pb::TUnionPartyLootRecord* TUnionPartyGetUserInfoRsp::add_arrlootrecord() {
  // @@protoc_insertion_point(field_add:pb.TUnionPartyGetUserInfoRsp.ArrLootRecord)
  return arrlootrecord_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::TUnionPartyLootRecord >&
TUnionPartyGetUserInfoRsp::arrlootrecord() const {
  // @@protoc_insertion_point(field_list:pb.TUnionPartyGetUserInfoRsp.ArrLootRecord)
  return arrlootrecord_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb::TUnionPartyLootRecord >*
TUnionPartyGetUserInfoRsp::mutable_arrlootrecord() {
  // @@protoc_insertion_point(field_mutable_list:pb.TUnionPartyGetUserInfoRsp.ArrLootRecord)
  return &arrlootrecord_;
}

// repeated .pb.TUnionPartyShopRecord ArrShopRecord = 3;
inline int TUnionPartyGetUserInfoRsp::arrshoprecord_size() const {
  return arrshoprecord_.size();
}
inline void TUnionPartyGetUserInfoRsp::clear_arrshoprecord() {
  arrshoprecord_.Clear();
}
inline const ::pb::TUnionPartyShopRecord& TUnionPartyGetUserInfoRsp::arrshoprecord(int index) const {
  // @@protoc_insertion_point(field_get:pb.TUnionPartyGetUserInfoRsp.ArrShopRecord)
  return arrshoprecord_.Get(index);
}
inline ::pb::TUnionPartyShopRecord* TUnionPartyGetUserInfoRsp::mutable_arrshoprecord(int index) {
  // @@protoc_insertion_point(field_mutable:pb.TUnionPartyGetUserInfoRsp.ArrShopRecord)
  return arrshoprecord_.Mutable(index);
}
inline ::pb::TUnionPartyShopRecord* TUnionPartyGetUserInfoRsp::add_arrshoprecord() {
  // @@protoc_insertion_point(field_add:pb.TUnionPartyGetUserInfoRsp.ArrShopRecord)
  return arrshoprecord_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::TUnionPartyShopRecord >&
TUnionPartyGetUserInfoRsp::arrshoprecord() const {
  // @@protoc_insertion_point(field_list:pb.TUnionPartyGetUserInfoRsp.ArrShopRecord)
  return arrshoprecord_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb::TUnionPartyShopRecord >*
TUnionPartyGetUserInfoRsp::mutable_arrshoprecord() {
  // @@protoc_insertion_point(field_mutable_list:pb.TUnionPartyGetUserInfoRsp.ArrShopRecord)
  return &arrshoprecord_;
}

// optional bool CheckEnterFailed = 4;
inline bool TUnionPartyGetUserInfoRsp::has_checkenterfailed() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void TUnionPartyGetUserInfoRsp::set_has_checkenterfailed() {
  _has_bits_[0] |= 0x00000008u;
}
inline void TUnionPartyGetUserInfoRsp::clear_has_checkenterfailed() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void TUnionPartyGetUserInfoRsp::clear_checkenterfailed() {
  checkenterfailed_ = false;
  clear_has_checkenterfailed();
}
inline bool TUnionPartyGetUserInfoRsp::checkenterfailed() const {
  // @@protoc_insertion_point(field_get:pb.TUnionPartyGetUserInfoRsp.CheckEnterFailed)
  return checkenterfailed_;
}
inline void TUnionPartyGetUserInfoRsp::set_checkenterfailed(bool value) {
  set_has_checkenterfailed();
  checkenterfailed_ = value;
  // @@protoc_insertion_point(field_set:pb.TUnionPartyGetUserInfoRsp.CheckEnterFailed)
}

// -------------------------------------------------------------------

// TUnionPartyGetPartyInfoRsp

// optional uint64 PartyId = 1;
inline bool TUnionPartyGetPartyInfoRsp::has_partyid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TUnionPartyGetPartyInfoRsp::set_has_partyid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TUnionPartyGetPartyInfoRsp::clear_has_partyid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TUnionPartyGetPartyInfoRsp::clear_partyid() {
  partyid_ = GOOGLE_ULONGLONG(0);
  clear_has_partyid();
}
inline ::google::protobuf::uint64 TUnionPartyGetPartyInfoRsp::partyid() const {
  // @@protoc_insertion_point(field_get:pb.TUnionPartyGetPartyInfoRsp.PartyId)
  return partyid_;
}
inline void TUnionPartyGetPartyInfoRsp::set_partyid(::google::protobuf::uint64 value) {
  set_has_partyid();
  partyid_ = value;
  // @@protoc_insertion_point(field_set:pb.TUnionPartyGetPartyInfoRsp.PartyId)
}

// optional .pb.EUnionPartyStage PartyStage = 2;
inline bool TUnionPartyGetPartyInfoRsp::has_partystage() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TUnionPartyGetPartyInfoRsp::set_has_partystage() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TUnionPartyGetPartyInfoRsp::clear_has_partystage() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TUnionPartyGetPartyInfoRsp::clear_partystage() {
  partystage_ = 0;
  clear_has_partystage();
}
inline ::pb::EUnionPartyStage TUnionPartyGetPartyInfoRsp::partystage() const {
  // @@protoc_insertion_point(field_get:pb.TUnionPartyGetPartyInfoRsp.PartyStage)
  return static_cast< ::pb::EUnionPartyStage >(partystage_);
}
inline void TUnionPartyGetPartyInfoRsp::set_partystage(::pb::EUnionPartyStage value) {
  assert(::pb::EUnionPartyStage_IsValid(value));
  set_has_partystage();
  partystage_ = value;
  // @@protoc_insertion_point(field_set:pb.TUnionPartyGetPartyInfoRsp.PartyStage)
}

// optional int64 StartTime = 3;
inline bool TUnionPartyGetPartyInfoRsp::has_starttime() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void TUnionPartyGetPartyInfoRsp::set_has_starttime() {
  _has_bits_[0] |= 0x00000004u;
}
inline void TUnionPartyGetPartyInfoRsp::clear_has_starttime() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void TUnionPartyGetPartyInfoRsp::clear_starttime() {
  starttime_ = GOOGLE_LONGLONG(0);
  clear_has_starttime();
}
inline ::google::protobuf::int64 TUnionPartyGetPartyInfoRsp::starttime() const {
  // @@protoc_insertion_point(field_get:pb.TUnionPartyGetPartyInfoRsp.StartTime)
  return starttime_;
}
inline void TUnionPartyGetPartyInfoRsp::set_starttime(::google::protobuf::int64 value) {
  set_has_starttime();
  starttime_ = value;
  // @@protoc_insertion_point(field_set:pb.TUnionPartyGetPartyInfoRsp.StartTime)
}

// optional uint64 JoinPartyId = 4;
inline bool TUnionPartyGetPartyInfoRsp::has_joinpartyid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void TUnionPartyGetPartyInfoRsp::set_has_joinpartyid() {
  _has_bits_[0] |= 0x00000008u;
}
inline void TUnionPartyGetPartyInfoRsp::clear_has_joinpartyid() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void TUnionPartyGetPartyInfoRsp::clear_joinpartyid() {
  joinpartyid_ = GOOGLE_ULONGLONG(0);
  clear_has_joinpartyid();
}
inline ::google::protobuf::uint64 TUnionPartyGetPartyInfoRsp::joinpartyid() const {
  // @@protoc_insertion_point(field_get:pb.TUnionPartyGetPartyInfoRsp.JoinPartyId)
  return joinpartyid_;
}
inline void TUnionPartyGetPartyInfoRsp::set_joinpartyid(::google::protobuf::uint64 value) {
  set_has_joinpartyid();
  joinpartyid_ = value;
  // @@protoc_insertion_point(field_set:pb.TUnionPartyGetPartyInfoRsp.JoinPartyId)
}

// -------------------------------------------------------------------

// TUnionPartyStartPartyRsp

// optional .pb.EUnionPartyStartResult ResultCode = 1;
inline bool TUnionPartyStartPartyRsp::has_resultcode() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TUnionPartyStartPartyRsp::set_has_resultcode() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TUnionPartyStartPartyRsp::clear_has_resultcode() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TUnionPartyStartPartyRsp::clear_resultcode() {
  resultcode_ = 0;
  clear_has_resultcode();
}
inline ::pb::EUnionPartyStartResult TUnionPartyStartPartyRsp::resultcode() const {
  // @@protoc_insertion_point(field_get:pb.TUnionPartyStartPartyRsp.ResultCode)
  return static_cast< ::pb::EUnionPartyStartResult >(resultcode_);
}
inline void TUnionPartyStartPartyRsp::set_resultcode(::pb::EUnionPartyStartResult value) {
  assert(::pb::EUnionPartyStartResult_IsValid(value));
  set_has_resultcode();
  resultcode_ = value;
  // @@protoc_insertion_point(field_set:pb.TUnionPartyStartPartyRsp.ResultCode)
}

// -------------------------------------------------------------------

// TUnionPartyFreeBoxInfo

// optional int32 BoxId = 1;
inline bool TUnionPartyFreeBoxInfo::has_boxid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TUnionPartyFreeBoxInfo::set_has_boxid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TUnionPartyFreeBoxInfo::clear_has_boxid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TUnionPartyFreeBoxInfo::clear_boxid() {
  boxid_ = 0;
  clear_has_boxid();
}
inline ::google::protobuf::int32 TUnionPartyFreeBoxInfo::boxid() const {
  // @@protoc_insertion_point(field_get:pb.TUnionPartyFreeBoxInfo.BoxId)
  return boxid_;
}
inline void TUnionPartyFreeBoxInfo::set_boxid(::google::protobuf::int32 value) {
  set_has_boxid();
  boxid_ = value;
  // @@protoc_insertion_point(field_set:pb.TUnionPartyFreeBoxInfo.BoxId)
}

// optional int64 CreateTime = 2;
inline bool TUnionPartyFreeBoxInfo::has_createtime() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TUnionPartyFreeBoxInfo::set_has_createtime() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TUnionPartyFreeBoxInfo::clear_has_createtime() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TUnionPartyFreeBoxInfo::clear_createtime() {
  createtime_ = GOOGLE_LONGLONG(0);
  clear_has_createtime();
}
inline ::google::protobuf::int64 TUnionPartyFreeBoxInfo::createtime() const {
  // @@protoc_insertion_point(field_get:pb.TUnionPartyFreeBoxInfo.CreateTime)
  return createtime_;
}
inline void TUnionPartyFreeBoxInfo::set_createtime(::google::protobuf::int64 value) {
  set_has_createtime();
  createtime_ = value;
  // @@protoc_insertion_point(field_set:pb.TUnionPartyFreeBoxInfo.CreateTime)
}

// optional int32 PosId = 3;
inline bool TUnionPartyFreeBoxInfo::has_posid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void TUnionPartyFreeBoxInfo::set_has_posid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void TUnionPartyFreeBoxInfo::clear_has_posid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void TUnionPartyFreeBoxInfo::clear_posid() {
  posid_ = 0;
  clear_has_posid();
}
inline ::google::protobuf::int32 TUnionPartyFreeBoxInfo::posid() const {
  // @@protoc_insertion_point(field_get:pb.TUnionPartyFreeBoxInfo.PosId)
  return posid_;
}
inline void TUnionPartyFreeBoxInfo::set_posid(::google::protobuf::int32 value) {
  set_has_posid();
  posid_ = value;
  // @@protoc_insertion_point(field_set:pb.TUnionPartyFreeBoxInfo.PosId)
}

// -------------------------------------------------------------------

// TUnionPartyRmbBoxInfo

// optional int32 BoxId = 1;
inline bool TUnionPartyRmbBoxInfo::has_boxid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TUnionPartyRmbBoxInfo::set_has_boxid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TUnionPartyRmbBoxInfo::clear_has_boxid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TUnionPartyRmbBoxInfo::clear_boxid() {
  boxid_ = 0;
  clear_has_boxid();
}
inline ::google::protobuf::int32 TUnionPartyRmbBoxInfo::boxid() const {
  // @@protoc_insertion_point(field_get:pb.TUnionPartyRmbBoxInfo.BoxId)
  return boxid_;
}
inline void TUnionPartyRmbBoxInfo::set_boxid(::google::protobuf::int32 value) {
  set_has_boxid();
  boxid_ = value;
  // @@protoc_insertion_point(field_set:pb.TUnionPartyRmbBoxInfo.BoxId)
}

// optional int64 CreateTime = 2;
inline bool TUnionPartyRmbBoxInfo::has_createtime() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TUnionPartyRmbBoxInfo::set_has_createtime() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TUnionPartyRmbBoxInfo::clear_has_createtime() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TUnionPartyRmbBoxInfo::clear_createtime() {
  createtime_ = GOOGLE_LONGLONG(0);
  clear_has_createtime();
}
inline ::google::protobuf::int64 TUnionPartyRmbBoxInfo::createtime() const {
  // @@protoc_insertion_point(field_get:pb.TUnionPartyRmbBoxInfo.CreateTime)
  return createtime_;
}
inline void TUnionPartyRmbBoxInfo::set_createtime(::google::protobuf::int64 value) {
  set_has_createtime();
  createtime_ = value;
  // @@protoc_insertion_point(field_set:pb.TUnionPartyRmbBoxInfo.CreateTime)
}

// optional int32 PosX = 3;
inline bool TUnionPartyRmbBoxInfo::has_posx() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void TUnionPartyRmbBoxInfo::set_has_posx() {
  _has_bits_[0] |= 0x00000004u;
}
inline void TUnionPartyRmbBoxInfo::clear_has_posx() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void TUnionPartyRmbBoxInfo::clear_posx() {
  posx_ = 0;
  clear_has_posx();
}
inline ::google::protobuf::int32 TUnionPartyRmbBoxInfo::posx() const {
  // @@protoc_insertion_point(field_get:pb.TUnionPartyRmbBoxInfo.PosX)
  return posx_;
}
inline void TUnionPartyRmbBoxInfo::set_posx(::google::protobuf::int32 value) {
  set_has_posx();
  posx_ = value;
  // @@protoc_insertion_point(field_set:pb.TUnionPartyRmbBoxInfo.PosX)
}

// optional int32 PosY = 4;
inline bool TUnionPartyRmbBoxInfo::has_posy() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void TUnionPartyRmbBoxInfo::set_has_posy() {
  _has_bits_[0] |= 0x00000008u;
}
inline void TUnionPartyRmbBoxInfo::clear_has_posy() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void TUnionPartyRmbBoxInfo::clear_posy() {
  posy_ = 0;
  clear_has_posy();
}
inline ::google::protobuf::int32 TUnionPartyRmbBoxInfo::posy() const {
  // @@protoc_insertion_point(field_get:pb.TUnionPartyRmbBoxInfo.PosY)
  return posy_;
}
inline void TUnionPartyRmbBoxInfo::set_posy(::google::protobuf::int32 value) {
  set_has_posy();
  posy_ = value;
  // @@protoc_insertion_point(field_set:pb.TUnionPartyRmbBoxInfo.PosY)
}

// optional int32 GoodsId = 5;
inline bool TUnionPartyRmbBoxInfo::has_goodsid() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void TUnionPartyRmbBoxInfo::set_has_goodsid() {
  _has_bits_[0] |= 0x00000010u;
}
inline void TUnionPartyRmbBoxInfo::clear_has_goodsid() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void TUnionPartyRmbBoxInfo::clear_goodsid() {
  goodsid_ = 0;
  clear_has_goodsid();
}
inline ::google::protobuf::int32 TUnionPartyRmbBoxInfo::goodsid() const {
  // @@protoc_insertion_point(field_get:pb.TUnionPartyRmbBoxInfo.GoodsId)
  return goodsid_;
}
inline void TUnionPartyRmbBoxInfo::set_goodsid(::google::protobuf::int32 value) {
  set_has_goodsid();
  goodsid_ = value;
  // @@protoc_insertion_point(field_set:pb.TUnionPartyRmbBoxInfo.GoodsId)
}

// optional .pb.TUserSimpleInfo UserInfo = 6;
inline bool TUnionPartyRmbBoxInfo::has_userinfo() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void TUnionPartyRmbBoxInfo::set_has_userinfo() {
  _has_bits_[0] |= 0x00000020u;
}
inline void TUnionPartyRmbBoxInfo::clear_has_userinfo() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void TUnionPartyRmbBoxInfo::clear_userinfo() {
  if (userinfo_ != NULL) userinfo_->::pb::TUserSimpleInfo::Clear();
  clear_has_userinfo();
}
inline const ::pb::TUserSimpleInfo& TUnionPartyRmbBoxInfo::userinfo() const {
  // @@protoc_insertion_point(field_get:pb.TUnionPartyRmbBoxInfo.UserInfo)
  return userinfo_ != NULL ? *userinfo_ : *default_instance_->userinfo_;
}
inline ::pb::TUserSimpleInfo* TUnionPartyRmbBoxInfo::mutable_userinfo() {
  set_has_userinfo();
  if (userinfo_ == NULL) userinfo_ = new ::pb::TUserSimpleInfo;
  // @@protoc_insertion_point(field_mutable:pb.TUnionPartyRmbBoxInfo.UserInfo)
  return userinfo_;
}
inline ::pb::TUserSimpleInfo* TUnionPartyRmbBoxInfo::release_userinfo() {
  clear_has_userinfo();
  ::pb::TUserSimpleInfo* temp = userinfo_;
  userinfo_ = NULL;
  return temp;
}
inline void TUnionPartyRmbBoxInfo::set_allocated_userinfo(::pb::TUserSimpleInfo* userinfo) {
  delete userinfo_;
  userinfo_ = userinfo;
  if (userinfo) {
    set_has_userinfo();
  } else {
    clear_has_userinfo();
  }
  // @@protoc_insertion_point(field_set_allocated:pb.TUnionPartyRmbBoxInfo.UserInfo)
}

// -------------------------------------------------------------------

// TUnionPartyEnterRsp

// optional .pb.EUnionPartyStage StageId = 1;
inline bool TUnionPartyEnterRsp::has_stageid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TUnionPartyEnterRsp::set_has_stageid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TUnionPartyEnterRsp::clear_has_stageid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TUnionPartyEnterRsp::clear_stageid() {
  stageid_ = 0;
  clear_has_stageid();
}
inline ::pb::EUnionPartyStage TUnionPartyEnterRsp::stageid() const {
  // @@protoc_insertion_point(field_get:pb.TUnionPartyEnterRsp.StageId)
  return static_cast< ::pb::EUnionPartyStage >(stageid_);
}
inline void TUnionPartyEnterRsp::set_stageid(::pb::EUnionPartyStage value) {
  assert(::pb::EUnionPartyStage_IsValid(value));
  set_has_stageid();
  stageid_ = value;
  // @@protoc_insertion_point(field_set:pb.TUnionPartyEnterRsp.StageId)
}

// repeated .pb.TUnionPartyFreeBoxInfo ArrFreeBoxInfo = 2;
inline int TUnionPartyEnterRsp::arrfreeboxinfo_size() const {
  return arrfreeboxinfo_.size();
}
inline void TUnionPartyEnterRsp::clear_arrfreeboxinfo() {
  arrfreeboxinfo_.Clear();
}
inline const ::pb::TUnionPartyFreeBoxInfo& TUnionPartyEnterRsp::arrfreeboxinfo(int index) const {
  // @@protoc_insertion_point(field_get:pb.TUnionPartyEnterRsp.ArrFreeBoxInfo)
  return arrfreeboxinfo_.Get(index);
}
inline ::pb::TUnionPartyFreeBoxInfo* TUnionPartyEnterRsp::mutable_arrfreeboxinfo(int index) {
  // @@protoc_insertion_point(field_mutable:pb.TUnionPartyEnterRsp.ArrFreeBoxInfo)
  return arrfreeboxinfo_.Mutable(index);
}
inline ::pb::TUnionPartyFreeBoxInfo* TUnionPartyEnterRsp::add_arrfreeboxinfo() {
  // @@protoc_insertion_point(field_add:pb.TUnionPartyEnterRsp.ArrFreeBoxInfo)
  return arrfreeboxinfo_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::TUnionPartyFreeBoxInfo >&
TUnionPartyEnterRsp::arrfreeboxinfo() const {
  // @@protoc_insertion_point(field_list:pb.TUnionPartyEnterRsp.ArrFreeBoxInfo)
  return arrfreeboxinfo_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb::TUnionPartyFreeBoxInfo >*
TUnionPartyEnterRsp::mutable_arrfreeboxinfo() {
  // @@protoc_insertion_point(field_mutable_list:pb.TUnionPartyEnterRsp.ArrFreeBoxInfo)
  return &arrfreeboxinfo_;
}

// repeated .pb.TUnionPartyRmbBoxInfo ArrRmbBoxInfo = 3;
inline int TUnionPartyEnterRsp::arrrmbboxinfo_size() const {
  return arrrmbboxinfo_.size();
}
inline void TUnionPartyEnterRsp::clear_arrrmbboxinfo() {
  arrrmbboxinfo_.Clear();
}
inline const ::pb::TUnionPartyRmbBoxInfo& TUnionPartyEnterRsp::arrrmbboxinfo(int index) const {
  // @@protoc_insertion_point(field_get:pb.TUnionPartyEnterRsp.ArrRmbBoxInfo)
  return arrrmbboxinfo_.Get(index);
}
inline ::pb::TUnionPartyRmbBoxInfo* TUnionPartyEnterRsp::mutable_arrrmbboxinfo(int index) {
  // @@protoc_insertion_point(field_mutable:pb.TUnionPartyEnterRsp.ArrRmbBoxInfo)
  return arrrmbboxinfo_.Mutable(index);
}
inline ::pb::TUnionPartyRmbBoxInfo* TUnionPartyEnterRsp::add_arrrmbboxinfo() {
  // @@protoc_insertion_point(field_add:pb.TUnionPartyEnterRsp.ArrRmbBoxInfo)
  return arrrmbboxinfo_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::TUnionPartyRmbBoxInfo >&
TUnionPartyEnterRsp::arrrmbboxinfo() const {
  // @@protoc_insertion_point(field_list:pb.TUnionPartyEnterRsp.ArrRmbBoxInfo)
  return arrrmbboxinfo_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb::TUnionPartyRmbBoxInfo >*
TUnionPartyEnterRsp::mutable_arrrmbboxinfo() {
  // @@protoc_insertion_point(field_mutable_list:pb.TUnionPartyEnterRsp.ArrRmbBoxInfo)
  return &arrrmbboxinfo_;
}

// -------------------------------------------------------------------

// TUnionPartyLootReq

// optional int32 BoxId = 1;
inline bool TUnionPartyLootReq::has_boxid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TUnionPartyLootReq::set_has_boxid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TUnionPartyLootReq::clear_has_boxid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TUnionPartyLootReq::clear_boxid() {
  boxid_ = 0;
  clear_has_boxid();
}
inline ::google::protobuf::int32 TUnionPartyLootReq::boxid() const {
  // @@protoc_insertion_point(field_get:pb.TUnionPartyLootReq.BoxId)
  return boxid_;
}
inline void TUnionPartyLootReq::set_boxid(::google::protobuf::int32 value) {
  set_has_boxid();
  boxid_ = value;
  // @@protoc_insertion_point(field_set:pb.TUnionPartyLootReq.BoxId)
}

// -------------------------------------------------------------------

// TUnionPartyLootRsp

// optional .pb.EUnionPartyLootResult ResultCode = 1;
inline bool TUnionPartyLootRsp::has_resultcode() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TUnionPartyLootRsp::set_has_resultcode() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TUnionPartyLootRsp::clear_has_resultcode() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TUnionPartyLootRsp::clear_resultcode() {
  resultcode_ = 0;
  clear_has_resultcode();
}
inline ::pb::EUnionPartyLootResult TUnionPartyLootRsp::resultcode() const {
  // @@protoc_insertion_point(field_get:pb.TUnionPartyLootRsp.ResultCode)
  return static_cast< ::pb::EUnionPartyLootResult >(resultcode_);
}
inline void TUnionPartyLootRsp::set_resultcode(::pb::EUnionPartyLootResult value) {
  assert(::pb::EUnionPartyLootResult_IsValid(value));
  set_has_resultcode();
  resultcode_ = value;
  // @@protoc_insertion_point(field_set:pb.TUnionPartyLootRsp.ResultCode)
}

// repeated .pb.TCommonReward ArrReward = 2;
inline int TUnionPartyLootRsp::arrreward_size() const {
  return arrreward_.size();
}
inline void TUnionPartyLootRsp::clear_arrreward() {
  arrreward_.Clear();
}
inline const ::pb::TCommonReward& TUnionPartyLootRsp::arrreward(int index) const {
  // @@protoc_insertion_point(field_get:pb.TUnionPartyLootRsp.ArrReward)
  return arrreward_.Get(index);
}
inline ::pb::TCommonReward* TUnionPartyLootRsp::mutable_arrreward(int index) {
  // @@protoc_insertion_point(field_mutable:pb.TUnionPartyLootRsp.ArrReward)
  return arrreward_.Mutable(index);
}
inline ::pb::TCommonReward* TUnionPartyLootRsp::add_arrreward() {
  // @@protoc_insertion_point(field_add:pb.TUnionPartyLootRsp.ArrReward)
  return arrreward_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::TCommonReward >&
TUnionPartyLootRsp::arrreward() const {
  // @@protoc_insertion_point(field_list:pb.TUnionPartyLootRsp.ArrReward)
  return arrreward_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb::TCommonReward >*
TUnionPartyLootRsp::mutable_arrreward() {
  // @@protoc_insertion_point(field_mutable_list:pb.TUnionPartyLootRsp.ArrReward)
  return &arrreward_;
}

// optional bool IsFreeBox = 3;
inline bool TUnionPartyLootRsp::has_isfreebox() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void TUnionPartyLootRsp::set_has_isfreebox() {
  _has_bits_[0] |= 0x00000004u;
}
inline void TUnionPartyLootRsp::clear_has_isfreebox() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void TUnionPartyLootRsp::clear_isfreebox() {
  isfreebox_ = false;
  clear_has_isfreebox();
}
inline bool TUnionPartyLootRsp::isfreebox() const {
  // @@protoc_insertion_point(field_get:pb.TUnionPartyLootRsp.IsFreeBox)
  return isfreebox_;
}
inline void TUnionPartyLootRsp::set_isfreebox(bool value) {
  set_has_isfreebox();
  isfreebox_ = value;
  // @@protoc_insertion_point(field_set:pb.TUnionPartyLootRsp.IsFreeBox)
}

// -------------------------------------------------------------------

// TUnionPartyBoxRechargeReq

// optional int32 GoodsId = 1;
inline bool TUnionPartyBoxRechargeReq::has_goodsid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TUnionPartyBoxRechargeReq::set_has_goodsid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TUnionPartyBoxRechargeReq::clear_has_goodsid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TUnionPartyBoxRechargeReq::clear_goodsid() {
  goodsid_ = 0;
  clear_has_goodsid();
}
inline ::google::protobuf::int32 TUnionPartyBoxRechargeReq::goodsid() const {
  // @@protoc_insertion_point(field_get:pb.TUnionPartyBoxRechargeReq.GoodsId)
  return goodsid_;
}
inline void TUnionPartyBoxRechargeReq::set_goodsid(::google::protobuf::int32 value) {
  set_has_goodsid();
  goodsid_ = value;
  // @@protoc_insertion_point(field_set:pb.TUnionPartyBoxRechargeReq.GoodsId)
}

// optional int32 PosX = 3;
inline bool TUnionPartyBoxRechargeReq::has_posx() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TUnionPartyBoxRechargeReq::set_has_posx() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TUnionPartyBoxRechargeReq::clear_has_posx() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TUnionPartyBoxRechargeReq::clear_posx() {
  posx_ = 0;
  clear_has_posx();
}
inline ::google::protobuf::int32 TUnionPartyBoxRechargeReq::posx() const {
  // @@protoc_insertion_point(field_get:pb.TUnionPartyBoxRechargeReq.PosX)
  return posx_;
}
inline void TUnionPartyBoxRechargeReq::set_posx(::google::protobuf::int32 value) {
  set_has_posx();
  posx_ = value;
  // @@protoc_insertion_point(field_set:pb.TUnionPartyBoxRechargeReq.PosX)
}

// optional int32 PosY = 4;
inline bool TUnionPartyBoxRechargeReq::has_posy() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void TUnionPartyBoxRechargeReq::set_has_posy() {
  _has_bits_[0] |= 0x00000004u;
}
inline void TUnionPartyBoxRechargeReq::clear_has_posy() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void TUnionPartyBoxRechargeReq::clear_posy() {
  posy_ = 0;
  clear_has_posy();
}
inline ::google::protobuf::int32 TUnionPartyBoxRechargeReq::posy() const {
  // @@protoc_insertion_point(field_get:pb.TUnionPartyBoxRechargeReq.PosY)
  return posy_;
}
inline void TUnionPartyBoxRechargeReq::set_posy(::google::protobuf::int32 value) {
  set_has_posy();
  posy_ = value;
  // @@protoc_insertion_point(field_set:pb.TUnionPartyBoxRechargeReq.PosY)
}

// -------------------------------------------------------------------

// TUnionPartyBoxRechargeRsp

// optional int32 GoodsId = 1;
inline bool TUnionPartyBoxRechargeRsp::has_goodsid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TUnionPartyBoxRechargeRsp::set_has_goodsid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TUnionPartyBoxRechargeRsp::clear_has_goodsid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TUnionPartyBoxRechargeRsp::clear_goodsid() {
  goodsid_ = 0;
  clear_has_goodsid();
}
inline ::google::protobuf::int32 TUnionPartyBoxRechargeRsp::goodsid() const {
  // @@protoc_insertion_point(field_get:pb.TUnionPartyBoxRechargeRsp.GoodsId)
  return goodsid_;
}
inline void TUnionPartyBoxRechargeRsp::set_goodsid(::google::protobuf::int32 value) {
  set_has_goodsid();
  goodsid_ = value;
  // @@protoc_insertion_point(field_set:pb.TUnionPartyBoxRechargeRsp.GoodsId)
}

// optional .pb.EUnionPartyRechargeResult ResultCode = 2;
inline bool TUnionPartyBoxRechargeRsp::has_resultcode() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TUnionPartyBoxRechargeRsp::set_has_resultcode() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TUnionPartyBoxRechargeRsp::clear_has_resultcode() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TUnionPartyBoxRechargeRsp::clear_resultcode() {
  resultcode_ = 0;
  clear_has_resultcode();
}
inline ::pb::EUnionPartyRechargeResult TUnionPartyBoxRechargeRsp::resultcode() const {
  // @@protoc_insertion_point(field_get:pb.TUnionPartyBoxRechargeRsp.ResultCode)
  return static_cast< ::pb::EUnionPartyRechargeResult >(resultcode_);
}
inline void TUnionPartyBoxRechargeRsp::set_resultcode(::pb::EUnionPartyRechargeResult value) {
  assert(::pb::EUnionPartyRechargeResult_IsValid(value));
  set_has_resultcode();
  resultcode_ = value;
  // @@protoc_insertion_point(field_set:pb.TUnionPartyBoxRechargeRsp.ResultCode)
}

// -------------------------------------------------------------------

// TUnionPartyNotify

// optional .pb.EUnionPartyStage StageId = 1;
inline bool TUnionPartyNotify::has_stageid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TUnionPartyNotify::set_has_stageid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TUnionPartyNotify::clear_has_stageid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TUnionPartyNotify::clear_stageid() {
  stageid_ = 0;
  clear_has_stageid();
}
inline ::pb::EUnionPartyStage TUnionPartyNotify::stageid() const {
  // @@protoc_insertion_point(field_get:pb.TUnionPartyNotify.StageId)
  return static_cast< ::pb::EUnionPartyStage >(stageid_);
}
inline void TUnionPartyNotify::set_stageid(::pb::EUnionPartyStage value) {
  assert(::pb::EUnionPartyStage_IsValid(value));
  set_has_stageid();
  stageid_ = value;
  // @@protoc_insertion_point(field_set:pb.TUnionPartyNotify.StageId)
}

// repeated .pb.TUnionPartyFreeBoxInfo ArrFreeBoxInfo = 2;
inline int TUnionPartyNotify::arrfreeboxinfo_size() const {
  return arrfreeboxinfo_.size();
}
inline void TUnionPartyNotify::clear_arrfreeboxinfo() {
  arrfreeboxinfo_.Clear();
}
inline const ::pb::TUnionPartyFreeBoxInfo& TUnionPartyNotify::arrfreeboxinfo(int index) const {
  // @@protoc_insertion_point(field_get:pb.TUnionPartyNotify.ArrFreeBoxInfo)
  return arrfreeboxinfo_.Get(index);
}
inline ::pb::TUnionPartyFreeBoxInfo* TUnionPartyNotify::mutable_arrfreeboxinfo(int index) {
  // @@protoc_insertion_point(field_mutable:pb.TUnionPartyNotify.ArrFreeBoxInfo)
  return arrfreeboxinfo_.Mutable(index);
}
inline ::pb::TUnionPartyFreeBoxInfo* TUnionPartyNotify::add_arrfreeboxinfo() {
  // @@protoc_insertion_point(field_add:pb.TUnionPartyNotify.ArrFreeBoxInfo)
  return arrfreeboxinfo_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::TUnionPartyFreeBoxInfo >&
TUnionPartyNotify::arrfreeboxinfo() const {
  // @@protoc_insertion_point(field_list:pb.TUnionPartyNotify.ArrFreeBoxInfo)
  return arrfreeboxinfo_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb::TUnionPartyFreeBoxInfo >*
TUnionPartyNotify::mutable_arrfreeboxinfo() {
  // @@protoc_insertion_point(field_mutable_list:pb.TUnionPartyNotify.ArrFreeBoxInfo)
  return &arrfreeboxinfo_;
}

// repeated .pb.TUnionPartyRmbBoxInfo ArrRmbBoxInfo = 3;
inline int TUnionPartyNotify::arrrmbboxinfo_size() const {
  return arrrmbboxinfo_.size();
}
inline void TUnionPartyNotify::clear_arrrmbboxinfo() {
  arrrmbboxinfo_.Clear();
}
inline const ::pb::TUnionPartyRmbBoxInfo& TUnionPartyNotify::arrrmbboxinfo(int index) const {
  // @@protoc_insertion_point(field_get:pb.TUnionPartyNotify.ArrRmbBoxInfo)
  return arrrmbboxinfo_.Get(index);
}
inline ::pb::TUnionPartyRmbBoxInfo* TUnionPartyNotify::mutable_arrrmbboxinfo(int index) {
  // @@protoc_insertion_point(field_mutable:pb.TUnionPartyNotify.ArrRmbBoxInfo)
  return arrrmbboxinfo_.Mutable(index);
}
inline ::pb::TUnionPartyRmbBoxInfo* TUnionPartyNotify::add_arrrmbboxinfo() {
  // @@protoc_insertion_point(field_add:pb.TUnionPartyNotify.ArrRmbBoxInfo)
  return arrrmbboxinfo_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::TUnionPartyRmbBoxInfo >&
TUnionPartyNotify::arrrmbboxinfo() const {
  // @@protoc_insertion_point(field_list:pb.TUnionPartyNotify.ArrRmbBoxInfo)
  return arrrmbboxinfo_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb::TUnionPartyRmbBoxInfo >*
TUnionPartyNotify::mutable_arrrmbboxinfo() {
  // @@protoc_insertion_point(field_mutable_list:pb.TUnionPartyNotify.ArrRmbBoxInfo)
  return &arrrmbboxinfo_;
}

// optional .pb.EUnionPartyOption Option = 4;
inline bool TUnionPartyNotify::has_option() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void TUnionPartyNotify::set_has_option() {
  _has_bits_[0] |= 0x00000008u;
}
inline void TUnionPartyNotify::clear_has_option() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void TUnionPartyNotify::clear_option() {
  option_ = 1;
  clear_has_option();
}
inline ::pb::EUnionPartyOption TUnionPartyNotify::option() const {
  // @@protoc_insertion_point(field_get:pb.TUnionPartyNotify.Option)
  return static_cast< ::pb::EUnionPartyOption >(option_);
}
inline void TUnionPartyNotify::set_option(::pb::EUnionPartyOption value) {
  assert(::pb::EUnionPartyOption_IsValid(value));
  set_has_option();
  option_ = value;
  // @@protoc_insertion_point(field_set:pb.TUnionPartyNotify.Option)
}

// -------------------------------------------------------------------

// TUnionPartyStartNotify

// optional uint64 PartyId = 1;
inline bool TUnionPartyStartNotify::has_partyid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TUnionPartyStartNotify::set_has_partyid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TUnionPartyStartNotify::clear_has_partyid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TUnionPartyStartNotify::clear_partyid() {
  partyid_ = GOOGLE_ULONGLONG(0);
  clear_has_partyid();
}
inline ::google::protobuf::uint64 TUnionPartyStartNotify::partyid() const {
  // @@protoc_insertion_point(field_get:pb.TUnionPartyStartNotify.PartyId)
  return partyid_;
}
inline void TUnionPartyStartNotify::set_partyid(::google::protobuf::uint64 value) {
  set_has_partyid();
  partyid_ = value;
  // @@protoc_insertion_point(field_set:pb.TUnionPartyStartNotify.PartyId)
}

// optional int64 StartTime = 2;
inline bool TUnionPartyStartNotify::has_starttime() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TUnionPartyStartNotify::set_has_starttime() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TUnionPartyStartNotify::clear_has_starttime() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TUnionPartyStartNotify::clear_starttime() {
  starttime_ = GOOGLE_LONGLONG(0);
  clear_has_starttime();
}
inline ::google::protobuf::int64 TUnionPartyStartNotify::starttime() const {
  // @@protoc_insertion_point(field_get:pb.TUnionPartyStartNotify.StartTime)
  return starttime_;
}
inline void TUnionPartyStartNotify::set_starttime(::google::protobuf::int64 value) {
  set_has_starttime();
  starttime_ = value;
  // @@protoc_insertion_point(field_set:pb.TUnionPartyStartNotify.StartTime)
}

// optional .pb.EUnionPartyStage StageId = 3;
inline bool TUnionPartyStartNotify::has_stageid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void TUnionPartyStartNotify::set_has_stageid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void TUnionPartyStartNotify::clear_has_stageid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void TUnionPartyStartNotify::clear_stageid() {
  stageid_ = 0;
  clear_has_stageid();
}
inline ::pb::EUnionPartyStage TUnionPartyStartNotify::stageid() const {
  // @@protoc_insertion_point(field_get:pb.TUnionPartyStartNotify.StageId)
  return static_cast< ::pb::EUnionPartyStage >(stageid_);
}
inline void TUnionPartyStartNotify::set_stageid(::pb::EUnionPartyStage value) {
  assert(::pb::EUnionPartyStage_IsValid(value));
  set_has_stageid();
  stageid_ = value;
  // @@protoc_insertion_point(field_set:pb.TUnionPartyStartNotify.StageId)
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace pb

#ifndef SWIG
namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::pb::EUnionPartyStage> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::pb::EUnionPartyStage>() {
  return ::pb::EUnionPartyStage_descriptor();
}
template <> struct is_proto_enum< ::pb::EUnionPartyStartResult> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::pb::EUnionPartyStartResult>() {
  return ::pb::EUnionPartyStartResult_descriptor();
}
template <> struct is_proto_enum< ::pb::EUnionPartyLootResult> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::pb::EUnionPartyLootResult>() {
  return ::pb::EUnionPartyLootResult_descriptor();
}
template <> struct is_proto_enum< ::pb::EUnionPartyRechargeResult> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::pb::EUnionPartyRechargeResult>() {
  return ::pb::EUnionPartyRechargeResult_descriptor();
}
template <> struct is_proto_enum< ::pb::EUnionPartyOption> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::pb::EUnionPartyOption>() {
  return ::pb::EUnionPartyOption_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_net_2fUnionParty_2eproto__INCLUDED
