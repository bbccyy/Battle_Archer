// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: net/ActCelebration.proto

#ifndef PROTOBUF_net_2fActCelebration_2eproto__INCLUDED
#define PROTOBUF_net_2fActCelebration_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
#include "net/CommonReward.pb.h"
#include "net/OpenActivity.pb.h"
// @@protoc_insertion_point(includes)

namespace pb {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_net_2fActCelebration_2eproto();
void protobuf_AssignDesc_net_2fActCelebration_2eproto();
void protobuf_ShutdownFile_net_2fActCelebration_2eproto();

class TActCelebrationBuyInfo;
class TActCelebrationTaskInfo;
class TActCelebrationGetInfoRsp;
class TActCelebrationBuyGoodsReq;
class TActCelebrationBuyGoodsRsp;
class TActCelebrationGetTaskRewardReq;
class TActCelebrationGetTaskRewardRsp;
class TActCelebrationExchangeReq;
class TActCelebrationExchangeRsp;
class TActCelebrationNotify;

// ===================================================================

/*FOR2LUA
<Record>
	<name>TActCelebrationBuyInfo</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/ActCelebration.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TActCelebrationBuyInfo : public ::google::protobuf::Message {
 public:
  TActCelebrationBuyInfo();
  virtual ~TActCelebrationBuyInfo();

  TActCelebrationBuyInfo(const TActCelebrationBuyInfo& from);

  inline TActCelebrationBuyInfo& operator=(const TActCelebrationBuyInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TActCelebrationBuyInfo& default_instance();

  void Swap(TActCelebrationBuyInfo* other);

  // implements Message ----------------------------------------------

  TActCelebrationBuyInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TActCelebrationBuyInfo& from);
  void MergeFrom(const TActCelebrationBuyInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 Id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TActCelebrationBuyInfo</name>
  	<Function>
  		<name>id</name>
  		<replaceName>Id</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_id</name>
  		<replaceName>Id</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_id</name>
  		<replaceName>Id</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 id() const;
  inline void set_id(::google::protobuf::uint32 value);

  // optional uint32 Num = 2;
  inline bool has_num() const;
  inline void clear_num();
  static const int kNumFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TActCelebrationBuyInfo</name>
  	<Function>
  		<name>num</name>
  		<replaceName>Num</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_num</name>
  		<replaceName>Num</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_num</name>
  		<replaceName>Num</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 num() const;
  inline void set_num(::google::protobuf::uint32 value);

  // optional uint64 BuyTime = 3;
  inline bool has_buytime() const;
  inline void clear_buytime();
  static const int kBuyTimeFieldNumber = 3;
  /*FOR2LUA
  <Record>
  	<name>TActCelebrationBuyInfo</name>
  	<Function>
  		<name>buytime</name>
  		<replaceName>BuyTime</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_buytime</name>
  		<replaceName>BuyTime</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_buytime</name>
  		<replaceName>BuyTime</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint64 buytime() const;
  inline void set_buytime(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:pb.TActCelebrationBuyInfo)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_num();
  inline void clear_has_num();
  inline void set_has_buytime();
  inline void clear_has_buytime();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 id_;
  ::google::protobuf::uint32 num_;
  ::google::protobuf::uint64 buytime_;
  friend void  protobuf_AddDesc_net_2fActCelebration_2eproto();
  friend void protobuf_AssignDesc_net_2fActCelebration_2eproto();
  friend void protobuf_ShutdownFile_net_2fActCelebration_2eproto();

  void InitAsDefaultInstance();
  static TActCelebrationBuyInfo* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TActCelebrationTaskInfo</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/ActCelebration.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TActCelebrationTaskInfo : public ::google::protobuf::Message {
 public:
  TActCelebrationTaskInfo();
  virtual ~TActCelebrationTaskInfo();

  TActCelebrationTaskInfo(const TActCelebrationTaskInfo& from);

  inline TActCelebrationTaskInfo& operator=(const TActCelebrationTaskInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TActCelebrationTaskInfo& default_instance();

  void Swap(TActCelebrationTaskInfo* other);

  // implements Message ----------------------------------------------

  TActCelebrationTaskInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TActCelebrationTaskInfo& from);
  void MergeFrom(const TActCelebrationTaskInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 TaskType = 1;
  inline bool has_tasktype() const;
  inline void clear_tasktype();
  static const int kTaskTypeFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TActCelebrationTaskInfo</name>
  	<Function>
  		<name>tasktype</name>
  		<replaceName>TaskType</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_tasktype</name>
  		<replaceName>TaskType</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_tasktype</name>
  		<replaceName>TaskType</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 tasktype() const;
  inline void set_tasktype(::google::protobuf::uint32 value);

  // optional uint32 Num = 2;
  inline bool has_num() const;
  inline void clear_num();
  static const int kNumFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TActCelebrationTaskInfo</name>
  	<Function>
  		<name>num</name>
  		<replaceName>Num</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_num</name>
  		<replaceName>Num</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_num</name>
  		<replaceName>Num</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 num() const;
  inline void set_num(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:pb.TActCelebrationTaskInfo)
 private:
  inline void set_has_tasktype();
  inline void clear_has_tasktype();
  inline void set_has_num();
  inline void clear_has_num();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 tasktype_;
  ::google::protobuf::uint32 num_;
  friend void  protobuf_AddDesc_net_2fActCelebration_2eproto();
  friend void protobuf_AssignDesc_net_2fActCelebration_2eproto();
  friend void protobuf_ShutdownFile_net_2fActCelebration_2eproto();

  void InitAsDefaultInstance();
  static TActCelebrationTaskInfo* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TActCelebrationGetInfoRsp</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/ActCelebration.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TActCelebrationGetInfoRsp : public ::google::protobuf::Message {
 public:
  TActCelebrationGetInfoRsp();
  virtual ~TActCelebrationGetInfoRsp();

  TActCelebrationGetInfoRsp(const TActCelebrationGetInfoRsp& from);

  inline TActCelebrationGetInfoRsp& operator=(const TActCelebrationGetInfoRsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TActCelebrationGetInfoRsp& default_instance();

  void Swap(TActCelebrationGetInfoRsp* other);

  // implements Message ----------------------------------------------

  TActCelebrationGetInfoRsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TActCelebrationGetInfoRsp& from);
  void MergeFrom(const TActCelebrationGetInfoRsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .pb.TActCelebrationBuyInfo ArrRmbGoodBuyInfo = 1;
  inline int arrrmbgoodbuyinfo_size() const;
  inline void clear_arrrmbgoodbuyinfo();
  static const int kArrRmbGoodBuyInfoFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TActCelebrationGetInfoRsp</name>
  	<Function>
  		<name>arrrmbgoodbuyinfo</name>
  		<replaceName>ArrRmbGoodBuyInfo</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_arrrmbgoodbuyinfo</name>
  		<replaceName>ArrRmbGoodBuyInfo</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_arrrmbgoodbuyinfo</name>
  		<replaceName>ArrRmbGoodBuyInfo</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_arrrmbgoodbuyinfo</name>
  		<replaceName>ArrRmbGoodBuyInfo</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>arrrmbgoodbuyinfo_size</name>
  		<replaceName>ArrRmbGoodBuyInfo</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TActCelebrationBuyInfo& arrrmbgoodbuyinfo(int index) const;
  inline ::pb::TActCelebrationBuyInfo* mutable_arrrmbgoodbuyinfo(int index);
  inline ::pb::TActCelebrationBuyInfo* add_arrrmbgoodbuyinfo();
  inline const ::google::protobuf::RepeatedPtrField< ::pb::TActCelebrationBuyInfo >&
      arrrmbgoodbuyinfo() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb::TActCelebrationBuyInfo >*
      mutable_arrrmbgoodbuyinfo();

  // repeated .pb.TActCelebrationBuyInfo ArrGoodBuyInfo = 2;
  inline int arrgoodbuyinfo_size() const;
  inline void clear_arrgoodbuyinfo();
  static const int kArrGoodBuyInfoFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TActCelebrationGetInfoRsp</name>
  	<Function>
  		<name>arrgoodbuyinfo</name>
  		<replaceName>ArrGoodBuyInfo</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_arrgoodbuyinfo</name>
  		<replaceName>ArrGoodBuyInfo</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_arrgoodbuyinfo</name>
  		<replaceName>ArrGoodBuyInfo</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_arrgoodbuyinfo</name>
  		<replaceName>ArrGoodBuyInfo</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>arrgoodbuyinfo_size</name>
  		<replaceName>ArrGoodBuyInfo</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TActCelebrationBuyInfo& arrgoodbuyinfo(int index) const;
  inline ::pb::TActCelebrationBuyInfo* mutable_arrgoodbuyinfo(int index);
  inline ::pb::TActCelebrationBuyInfo* add_arrgoodbuyinfo();
  inline const ::google::protobuf::RepeatedPtrField< ::pb::TActCelebrationBuyInfo >&
      arrgoodbuyinfo() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb::TActCelebrationBuyInfo >*
      mutable_arrgoodbuyinfo();

  // repeated .pb.TActivityRewardInfo ArrTaskRewardInfo = 3;
  inline int arrtaskrewardinfo_size() const;
  inline void clear_arrtaskrewardinfo();
  static const int kArrTaskRewardInfoFieldNumber = 3;
  /*FOR2LUA
  <Record>
  	<name>TActCelebrationGetInfoRsp</name>
  	<Function>
  		<name>arrtaskrewardinfo</name>
  		<replaceName>ArrTaskRewardInfo</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_arrtaskrewardinfo</name>
  		<replaceName>ArrTaskRewardInfo</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_arrtaskrewardinfo</name>
  		<replaceName>ArrTaskRewardInfo</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_arrtaskrewardinfo</name>
  		<replaceName>ArrTaskRewardInfo</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>arrtaskrewardinfo_size</name>
  		<replaceName>ArrTaskRewardInfo</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TActivityRewardInfo& arrtaskrewardinfo(int index) const;
  inline ::pb::TActivityRewardInfo* mutable_arrtaskrewardinfo(int index);
  inline ::pb::TActivityRewardInfo* add_arrtaskrewardinfo();
  inline const ::google::protobuf::RepeatedPtrField< ::pb::TActivityRewardInfo >&
      arrtaskrewardinfo() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb::TActivityRewardInfo >*
      mutable_arrtaskrewardinfo();

  // repeated .pb.TActCelebrationBuyInfo ArrExchangedInfo = 4;
  inline int arrexchangedinfo_size() const;
  inline void clear_arrexchangedinfo();
  static const int kArrExchangedInfoFieldNumber = 4;
  /*FOR2LUA
  <Record>
  	<name>TActCelebrationGetInfoRsp</name>
  	<Function>
  		<name>arrexchangedinfo</name>
  		<replaceName>ArrExchangedInfo</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_arrexchangedinfo</name>
  		<replaceName>ArrExchangedInfo</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_arrexchangedinfo</name>
  		<replaceName>ArrExchangedInfo</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_arrexchangedinfo</name>
  		<replaceName>ArrExchangedInfo</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>arrexchangedinfo_size</name>
  		<replaceName>ArrExchangedInfo</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TActCelebrationBuyInfo& arrexchangedinfo(int index) const;
  inline ::pb::TActCelebrationBuyInfo* mutable_arrexchangedinfo(int index);
  inline ::pb::TActCelebrationBuyInfo* add_arrexchangedinfo();
  inline const ::google::protobuf::RepeatedPtrField< ::pb::TActCelebrationBuyInfo >&
      arrexchangedinfo() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb::TActCelebrationBuyInfo >*
      mutable_arrexchangedinfo();

  // repeated .pb.TActCelebrationTaskInfo ArrTaskInfo = 5;
  inline int arrtaskinfo_size() const;
  inline void clear_arrtaskinfo();
  static const int kArrTaskInfoFieldNumber = 5;
  /*FOR2LUA
  <Record>
  	<name>TActCelebrationGetInfoRsp</name>
  	<Function>
  		<name>arrtaskinfo</name>
  		<replaceName>ArrTaskInfo</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_arrtaskinfo</name>
  		<replaceName>ArrTaskInfo</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_arrtaskinfo</name>
  		<replaceName>ArrTaskInfo</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_arrtaskinfo</name>
  		<replaceName>ArrTaskInfo</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>arrtaskinfo_size</name>
  		<replaceName>ArrTaskInfo</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TActCelebrationTaskInfo& arrtaskinfo(int index) const;
  inline ::pb::TActCelebrationTaskInfo* mutable_arrtaskinfo(int index);
  inline ::pb::TActCelebrationTaskInfo* add_arrtaskinfo();
  inline const ::google::protobuf::RepeatedPtrField< ::pb::TActCelebrationTaskInfo >&
      arrtaskinfo() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb::TActCelebrationTaskInfo >*
      mutable_arrtaskinfo();

  // @@protoc_insertion_point(class_scope:pb.TActCelebrationGetInfoRsp)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::pb::TActCelebrationBuyInfo > arrrmbgoodbuyinfo_;
  ::google::protobuf::RepeatedPtrField< ::pb::TActCelebrationBuyInfo > arrgoodbuyinfo_;
  ::google::protobuf::RepeatedPtrField< ::pb::TActivityRewardInfo > arrtaskrewardinfo_;
  ::google::protobuf::RepeatedPtrField< ::pb::TActCelebrationBuyInfo > arrexchangedinfo_;
  ::google::protobuf::RepeatedPtrField< ::pb::TActCelebrationTaskInfo > arrtaskinfo_;
  friend void  protobuf_AddDesc_net_2fActCelebration_2eproto();
  friend void protobuf_AssignDesc_net_2fActCelebration_2eproto();
  friend void protobuf_ShutdownFile_net_2fActCelebration_2eproto();

  void InitAsDefaultInstance();
  static TActCelebrationGetInfoRsp* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TActCelebrationBuyGoodsReq</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/ActCelebration.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TActCelebrationBuyGoodsReq : public ::google::protobuf::Message {
 public:
  TActCelebrationBuyGoodsReq();
  virtual ~TActCelebrationBuyGoodsReq();

  TActCelebrationBuyGoodsReq(const TActCelebrationBuyGoodsReq& from);

  inline TActCelebrationBuyGoodsReq& operator=(const TActCelebrationBuyGoodsReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TActCelebrationBuyGoodsReq& default_instance();

  void Swap(TActCelebrationBuyGoodsReq* other);

  // implements Message ----------------------------------------------

  TActCelebrationBuyGoodsReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TActCelebrationBuyGoodsReq& from);
  void MergeFrom(const TActCelebrationBuyGoodsReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 GoodId = 1;
  inline bool has_goodid() const;
  inline void clear_goodid();
  static const int kGoodIdFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TActCelebrationBuyGoodsReq</name>
  	<Function>
  		<name>goodid</name>
  		<replaceName>GoodId</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_goodid</name>
  		<replaceName>GoodId</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_goodid</name>
  		<replaceName>GoodId</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 goodid() const;
  inline void set_goodid(::google::protobuf::uint32 value);

  // optional uint32 Num = 2;
  inline bool has_num() const;
  inline void clear_num();
  static const int kNumFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TActCelebrationBuyGoodsReq</name>
  	<Function>
  		<name>num</name>
  		<replaceName>Num</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_num</name>
  		<replaceName>Num</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_num</name>
  		<replaceName>Num</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 num() const;
  inline void set_num(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:pb.TActCelebrationBuyGoodsReq)
 private:
  inline void set_has_goodid();
  inline void clear_has_goodid();
  inline void set_has_num();
  inline void clear_has_num();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 goodid_;
  ::google::protobuf::uint32 num_;
  friend void  protobuf_AddDesc_net_2fActCelebration_2eproto();
  friend void protobuf_AssignDesc_net_2fActCelebration_2eproto();
  friend void protobuf_ShutdownFile_net_2fActCelebration_2eproto();

  void InitAsDefaultInstance();
  static TActCelebrationBuyGoodsReq* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TActCelebrationBuyGoodsRsp</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/ActCelebration.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TActCelebrationBuyGoodsRsp : public ::google::protobuf::Message {
 public:
  TActCelebrationBuyGoodsRsp();
  virtual ~TActCelebrationBuyGoodsRsp();

  TActCelebrationBuyGoodsRsp(const TActCelebrationBuyGoodsRsp& from);

  inline TActCelebrationBuyGoodsRsp& operator=(const TActCelebrationBuyGoodsRsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TActCelebrationBuyGoodsRsp& default_instance();

  void Swap(TActCelebrationBuyGoodsRsp* other);

  // implements Message ----------------------------------------------

  TActCelebrationBuyGoodsRsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TActCelebrationBuyGoodsRsp& from);
  void MergeFrom(const TActCelebrationBuyGoodsRsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .pb.TCommonReward ArrReward = 1;
  inline int arrreward_size() const;
  inline void clear_arrreward();
  static const int kArrRewardFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TActCelebrationBuyGoodsRsp</name>
  	<Function>
  		<name>arrreward</name>
  		<replaceName>ArrReward</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_arrreward</name>
  		<replaceName>ArrReward</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_arrreward</name>
  		<replaceName>ArrReward</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_arrreward</name>
  		<replaceName>ArrReward</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>arrreward_size</name>
  		<replaceName>ArrReward</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TCommonReward& arrreward(int index) const;
  inline ::pb::TCommonReward* mutable_arrreward(int index);
  inline ::pb::TCommonReward* add_arrreward();
  inline const ::google::protobuf::RepeatedPtrField< ::pb::TCommonReward >&
      arrreward() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb::TCommonReward >*
      mutable_arrreward();

  // @@protoc_insertion_point(class_scope:pb.TActCelebrationBuyGoodsRsp)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::pb::TCommonReward > arrreward_;
  friend void  protobuf_AddDesc_net_2fActCelebration_2eproto();
  friend void protobuf_AssignDesc_net_2fActCelebration_2eproto();
  friend void protobuf_ShutdownFile_net_2fActCelebration_2eproto();

  void InitAsDefaultInstance();
  static TActCelebrationBuyGoodsRsp* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TActCelebrationGetTaskRewardReq</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/ActCelebration.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TActCelebrationGetTaskRewardReq : public ::google::protobuf::Message {
 public:
  TActCelebrationGetTaskRewardReq();
  virtual ~TActCelebrationGetTaskRewardReq();

  TActCelebrationGetTaskRewardReq(const TActCelebrationGetTaskRewardReq& from);

  inline TActCelebrationGetTaskRewardReq& operator=(const TActCelebrationGetTaskRewardReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TActCelebrationGetTaskRewardReq& default_instance();

  void Swap(TActCelebrationGetTaskRewardReq* other);

  // implements Message ----------------------------------------------

  TActCelebrationGetTaskRewardReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TActCelebrationGetTaskRewardReq& from);
  void MergeFrom(const TActCelebrationGetTaskRewardReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 TaskId = 1;
  inline bool has_taskid() const;
  inline void clear_taskid();
  static const int kTaskIdFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TActCelebrationGetTaskRewardReq</name>
  	<Function>
  		<name>taskid</name>
  		<replaceName>TaskId</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_taskid</name>
  		<replaceName>TaskId</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_taskid</name>
  		<replaceName>TaskId</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 taskid() const;
  inline void set_taskid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:pb.TActCelebrationGetTaskRewardReq)
 private:
  inline void set_has_taskid();
  inline void clear_has_taskid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 taskid_;
  friend void  protobuf_AddDesc_net_2fActCelebration_2eproto();
  friend void protobuf_AssignDesc_net_2fActCelebration_2eproto();
  friend void protobuf_ShutdownFile_net_2fActCelebration_2eproto();

  void InitAsDefaultInstance();
  static TActCelebrationGetTaskRewardReq* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TActCelebrationGetTaskRewardRsp</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/ActCelebration.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TActCelebrationGetTaskRewardRsp : public ::google::protobuf::Message {
 public:
  TActCelebrationGetTaskRewardRsp();
  virtual ~TActCelebrationGetTaskRewardRsp();

  TActCelebrationGetTaskRewardRsp(const TActCelebrationGetTaskRewardRsp& from);

  inline TActCelebrationGetTaskRewardRsp& operator=(const TActCelebrationGetTaskRewardRsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TActCelebrationGetTaskRewardRsp& default_instance();

  void Swap(TActCelebrationGetTaskRewardRsp* other);

  // implements Message ----------------------------------------------

  TActCelebrationGetTaskRewardRsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TActCelebrationGetTaskRewardRsp& from);
  void MergeFrom(const TActCelebrationGetTaskRewardRsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .pb.TCommonReward ArrReward = 1;
  inline int arrreward_size() const;
  inline void clear_arrreward();
  static const int kArrRewardFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TActCelebrationGetTaskRewardRsp</name>
  	<Function>
  		<name>arrreward</name>
  		<replaceName>ArrReward</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_arrreward</name>
  		<replaceName>ArrReward</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_arrreward</name>
  		<replaceName>ArrReward</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_arrreward</name>
  		<replaceName>ArrReward</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>arrreward_size</name>
  		<replaceName>ArrReward</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TCommonReward& arrreward(int index) const;
  inline ::pb::TCommonReward* mutable_arrreward(int index);
  inline ::pb::TCommonReward* add_arrreward();
  inline const ::google::protobuf::RepeatedPtrField< ::pb::TCommonReward >&
      arrreward() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb::TCommonReward >*
      mutable_arrreward();

  // @@protoc_insertion_point(class_scope:pb.TActCelebrationGetTaskRewardRsp)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::pb::TCommonReward > arrreward_;
  friend void  protobuf_AddDesc_net_2fActCelebration_2eproto();
  friend void protobuf_AssignDesc_net_2fActCelebration_2eproto();
  friend void protobuf_ShutdownFile_net_2fActCelebration_2eproto();

  void InitAsDefaultInstance();
  static TActCelebrationGetTaskRewardRsp* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TActCelebrationExchangeReq</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/ActCelebration.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TActCelebrationExchangeReq : public ::google::protobuf::Message {
 public:
  TActCelebrationExchangeReq();
  virtual ~TActCelebrationExchangeReq();

  TActCelebrationExchangeReq(const TActCelebrationExchangeReq& from);

  inline TActCelebrationExchangeReq& operator=(const TActCelebrationExchangeReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TActCelebrationExchangeReq& default_instance();

  void Swap(TActCelebrationExchangeReq* other);

  // implements Message ----------------------------------------------

  TActCelebrationExchangeReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TActCelebrationExchangeReq& from);
  void MergeFrom(const TActCelebrationExchangeReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 ExchangeId = 1;
  inline bool has_exchangeid() const;
  inline void clear_exchangeid();
  static const int kExchangeIdFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TActCelebrationExchangeReq</name>
  	<Function>
  		<name>exchangeid</name>
  		<replaceName>ExchangeId</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_exchangeid</name>
  		<replaceName>ExchangeId</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_exchangeid</name>
  		<replaceName>ExchangeId</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 exchangeid() const;
  inline void set_exchangeid(::google::protobuf::uint32 value);

  // optional uint32 Num = 2;
  inline bool has_num() const;
  inline void clear_num();
  static const int kNumFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TActCelebrationExchangeReq</name>
  	<Function>
  		<name>num</name>
  		<replaceName>Num</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_num</name>
  		<replaceName>Num</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_num</name>
  		<replaceName>Num</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 num() const;
  inline void set_num(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:pb.TActCelebrationExchangeReq)
 private:
  inline void set_has_exchangeid();
  inline void clear_has_exchangeid();
  inline void set_has_num();
  inline void clear_has_num();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 exchangeid_;
  ::google::protobuf::uint32 num_;
  friend void  protobuf_AddDesc_net_2fActCelebration_2eproto();
  friend void protobuf_AssignDesc_net_2fActCelebration_2eproto();
  friend void protobuf_ShutdownFile_net_2fActCelebration_2eproto();

  void InitAsDefaultInstance();
  static TActCelebrationExchangeReq* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TActCelebrationExchangeRsp</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/ActCelebration.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TActCelebrationExchangeRsp : public ::google::protobuf::Message {
 public:
  TActCelebrationExchangeRsp();
  virtual ~TActCelebrationExchangeRsp();

  TActCelebrationExchangeRsp(const TActCelebrationExchangeRsp& from);

  inline TActCelebrationExchangeRsp& operator=(const TActCelebrationExchangeRsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TActCelebrationExchangeRsp& default_instance();

  void Swap(TActCelebrationExchangeRsp* other);

  // implements Message ----------------------------------------------

  TActCelebrationExchangeRsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TActCelebrationExchangeRsp& from);
  void MergeFrom(const TActCelebrationExchangeRsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .pb.TCommonReward ArrReward = 1;
  inline int arrreward_size() const;
  inline void clear_arrreward();
  static const int kArrRewardFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TActCelebrationExchangeRsp</name>
  	<Function>
  		<name>arrreward</name>
  		<replaceName>ArrReward</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_arrreward</name>
  		<replaceName>ArrReward</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_arrreward</name>
  		<replaceName>ArrReward</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_arrreward</name>
  		<replaceName>ArrReward</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>arrreward_size</name>
  		<replaceName>ArrReward</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TCommonReward& arrreward(int index) const;
  inline ::pb::TCommonReward* mutable_arrreward(int index);
  inline ::pb::TCommonReward* add_arrreward();
  inline const ::google::protobuf::RepeatedPtrField< ::pb::TCommonReward >&
      arrreward() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb::TCommonReward >*
      mutable_arrreward();

  // @@protoc_insertion_point(class_scope:pb.TActCelebrationExchangeRsp)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::pb::TCommonReward > arrreward_;
  friend void  protobuf_AddDesc_net_2fActCelebration_2eproto();
  friend void protobuf_AssignDesc_net_2fActCelebration_2eproto();
  friend void protobuf_ShutdownFile_net_2fActCelebration_2eproto();

  void InitAsDefaultInstance();
  static TActCelebrationExchangeRsp* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TActCelebrationNotify</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/ActCelebration.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TActCelebrationNotify : public ::google::protobuf::Message {
 public:
  TActCelebrationNotify();
  virtual ~TActCelebrationNotify();

  TActCelebrationNotify(const TActCelebrationNotify& from);

  inline TActCelebrationNotify& operator=(const TActCelebrationNotify& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TActCelebrationNotify& default_instance();

  void Swap(TActCelebrationNotify* other);

  // implements Message ----------------------------------------------

  TActCelebrationNotify* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TActCelebrationNotify& from);
  void MergeFrom(const TActCelebrationNotify& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .pb.TActCelebrationBuyInfo ArrRmbGoodBuyInfo = 1;
  inline int arrrmbgoodbuyinfo_size() const;
  inline void clear_arrrmbgoodbuyinfo();
  static const int kArrRmbGoodBuyInfoFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TActCelebrationNotify</name>
  	<Function>
  		<name>arrrmbgoodbuyinfo</name>
  		<replaceName>ArrRmbGoodBuyInfo</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_arrrmbgoodbuyinfo</name>
  		<replaceName>ArrRmbGoodBuyInfo</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_arrrmbgoodbuyinfo</name>
  		<replaceName>ArrRmbGoodBuyInfo</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_arrrmbgoodbuyinfo</name>
  		<replaceName>ArrRmbGoodBuyInfo</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>arrrmbgoodbuyinfo_size</name>
  		<replaceName>ArrRmbGoodBuyInfo</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TActCelebrationBuyInfo& arrrmbgoodbuyinfo(int index) const;
  inline ::pb::TActCelebrationBuyInfo* mutable_arrrmbgoodbuyinfo(int index);
  inline ::pb::TActCelebrationBuyInfo* add_arrrmbgoodbuyinfo();
  inline const ::google::protobuf::RepeatedPtrField< ::pb::TActCelebrationBuyInfo >&
      arrrmbgoodbuyinfo() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb::TActCelebrationBuyInfo >*
      mutable_arrrmbgoodbuyinfo();

  // repeated .pb.TActCelebrationTaskInfo ArrTaskInfo = 2;
  inline int arrtaskinfo_size() const;
  inline void clear_arrtaskinfo();
  static const int kArrTaskInfoFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TActCelebrationNotify</name>
  	<Function>
  		<name>arrtaskinfo</name>
  		<replaceName>ArrTaskInfo</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_arrtaskinfo</name>
  		<replaceName>ArrTaskInfo</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_arrtaskinfo</name>
  		<replaceName>ArrTaskInfo</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_arrtaskinfo</name>
  		<replaceName>ArrTaskInfo</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>arrtaskinfo_size</name>
  		<replaceName>ArrTaskInfo</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TActCelebrationTaskInfo& arrtaskinfo(int index) const;
  inline ::pb::TActCelebrationTaskInfo* mutable_arrtaskinfo(int index);
  inline ::pb::TActCelebrationTaskInfo* add_arrtaskinfo();
  inline const ::google::protobuf::RepeatedPtrField< ::pb::TActCelebrationTaskInfo >&
      arrtaskinfo() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb::TActCelebrationTaskInfo >*
      mutable_arrtaskinfo();

  // @@protoc_insertion_point(class_scope:pb.TActCelebrationNotify)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::pb::TActCelebrationBuyInfo > arrrmbgoodbuyinfo_;
  ::google::protobuf::RepeatedPtrField< ::pb::TActCelebrationTaskInfo > arrtaskinfo_;
  friend void  protobuf_AddDesc_net_2fActCelebration_2eproto();
  friend void protobuf_AssignDesc_net_2fActCelebration_2eproto();
  friend void protobuf_ShutdownFile_net_2fActCelebration_2eproto();

  void InitAsDefaultInstance();
  static TActCelebrationNotify* default_instance_;
};
// ===================================================================


// ===================================================================

// TActCelebrationBuyInfo

// optional uint32 Id = 1;
inline bool TActCelebrationBuyInfo::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TActCelebrationBuyInfo::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TActCelebrationBuyInfo::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TActCelebrationBuyInfo::clear_id() {
  id_ = 0u;
  clear_has_id();
}
inline ::google::protobuf::uint32 TActCelebrationBuyInfo::id() const {
  // @@protoc_insertion_point(field_get:pb.TActCelebrationBuyInfo.Id)
  return id_;
}
inline void TActCelebrationBuyInfo::set_id(::google::protobuf::uint32 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:pb.TActCelebrationBuyInfo.Id)
}

// optional uint32 Num = 2;
inline bool TActCelebrationBuyInfo::has_num() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TActCelebrationBuyInfo::set_has_num() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TActCelebrationBuyInfo::clear_has_num() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TActCelebrationBuyInfo::clear_num() {
  num_ = 0u;
  clear_has_num();
}
inline ::google::protobuf::uint32 TActCelebrationBuyInfo::num() const {
  // @@protoc_insertion_point(field_get:pb.TActCelebrationBuyInfo.Num)
  return num_;
}
inline void TActCelebrationBuyInfo::set_num(::google::protobuf::uint32 value) {
  set_has_num();
  num_ = value;
  // @@protoc_insertion_point(field_set:pb.TActCelebrationBuyInfo.Num)
}

// optional uint64 BuyTime = 3;
inline bool TActCelebrationBuyInfo::has_buytime() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void TActCelebrationBuyInfo::set_has_buytime() {
  _has_bits_[0] |= 0x00000004u;
}
inline void TActCelebrationBuyInfo::clear_has_buytime() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void TActCelebrationBuyInfo::clear_buytime() {
  buytime_ = GOOGLE_ULONGLONG(0);
  clear_has_buytime();
}
inline ::google::protobuf::uint64 TActCelebrationBuyInfo::buytime() const {
  // @@protoc_insertion_point(field_get:pb.TActCelebrationBuyInfo.BuyTime)
  return buytime_;
}
inline void TActCelebrationBuyInfo::set_buytime(::google::protobuf::uint64 value) {
  set_has_buytime();
  buytime_ = value;
  // @@protoc_insertion_point(field_set:pb.TActCelebrationBuyInfo.BuyTime)
}

// -------------------------------------------------------------------

// TActCelebrationTaskInfo

// optional uint32 TaskType = 1;
inline bool TActCelebrationTaskInfo::has_tasktype() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TActCelebrationTaskInfo::set_has_tasktype() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TActCelebrationTaskInfo::clear_has_tasktype() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TActCelebrationTaskInfo::clear_tasktype() {
  tasktype_ = 0u;
  clear_has_tasktype();
}
inline ::google::protobuf::uint32 TActCelebrationTaskInfo::tasktype() const {
  // @@protoc_insertion_point(field_get:pb.TActCelebrationTaskInfo.TaskType)
  return tasktype_;
}
inline void TActCelebrationTaskInfo::set_tasktype(::google::protobuf::uint32 value) {
  set_has_tasktype();
  tasktype_ = value;
  // @@protoc_insertion_point(field_set:pb.TActCelebrationTaskInfo.TaskType)
}

// optional uint32 Num = 2;
inline bool TActCelebrationTaskInfo::has_num() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TActCelebrationTaskInfo::set_has_num() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TActCelebrationTaskInfo::clear_has_num() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TActCelebrationTaskInfo::clear_num() {
  num_ = 0u;
  clear_has_num();
}
inline ::google::protobuf::uint32 TActCelebrationTaskInfo::num() const {
  // @@protoc_insertion_point(field_get:pb.TActCelebrationTaskInfo.Num)
  return num_;
}
inline void TActCelebrationTaskInfo::set_num(::google::protobuf::uint32 value) {
  set_has_num();
  num_ = value;
  // @@protoc_insertion_point(field_set:pb.TActCelebrationTaskInfo.Num)
}

// -------------------------------------------------------------------

// TActCelebrationGetInfoRsp

// repeated .pb.TActCelebrationBuyInfo ArrRmbGoodBuyInfo = 1;
inline int TActCelebrationGetInfoRsp::arrrmbgoodbuyinfo_size() const {
  return arrrmbgoodbuyinfo_.size();
}
inline void TActCelebrationGetInfoRsp::clear_arrrmbgoodbuyinfo() {
  arrrmbgoodbuyinfo_.Clear();
}
inline const ::pb::TActCelebrationBuyInfo& TActCelebrationGetInfoRsp::arrrmbgoodbuyinfo(int index) const {
  // @@protoc_insertion_point(field_get:pb.TActCelebrationGetInfoRsp.ArrRmbGoodBuyInfo)
  return arrrmbgoodbuyinfo_.Get(index);
}
inline ::pb::TActCelebrationBuyInfo* TActCelebrationGetInfoRsp::mutable_arrrmbgoodbuyinfo(int index) {
  // @@protoc_insertion_point(field_mutable:pb.TActCelebrationGetInfoRsp.ArrRmbGoodBuyInfo)
  return arrrmbgoodbuyinfo_.Mutable(index);
}
inline ::pb::TActCelebrationBuyInfo* TActCelebrationGetInfoRsp::add_arrrmbgoodbuyinfo() {
  // @@protoc_insertion_point(field_add:pb.TActCelebrationGetInfoRsp.ArrRmbGoodBuyInfo)
  return arrrmbgoodbuyinfo_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::TActCelebrationBuyInfo >&
TActCelebrationGetInfoRsp::arrrmbgoodbuyinfo() const {
  // @@protoc_insertion_point(field_list:pb.TActCelebrationGetInfoRsp.ArrRmbGoodBuyInfo)
  return arrrmbgoodbuyinfo_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb::TActCelebrationBuyInfo >*
TActCelebrationGetInfoRsp::mutable_arrrmbgoodbuyinfo() {
  // @@protoc_insertion_point(field_mutable_list:pb.TActCelebrationGetInfoRsp.ArrRmbGoodBuyInfo)
  return &arrrmbgoodbuyinfo_;
}

// repeated .pb.TActCelebrationBuyInfo ArrGoodBuyInfo = 2;
inline int TActCelebrationGetInfoRsp::arrgoodbuyinfo_size() const {
  return arrgoodbuyinfo_.size();
}
inline void TActCelebrationGetInfoRsp::clear_arrgoodbuyinfo() {
  arrgoodbuyinfo_.Clear();
}
inline const ::pb::TActCelebrationBuyInfo& TActCelebrationGetInfoRsp::arrgoodbuyinfo(int index) const {
  // @@protoc_insertion_point(field_get:pb.TActCelebrationGetInfoRsp.ArrGoodBuyInfo)
  return arrgoodbuyinfo_.Get(index);
}
inline ::pb::TActCelebrationBuyInfo* TActCelebrationGetInfoRsp::mutable_arrgoodbuyinfo(int index) {
  // @@protoc_insertion_point(field_mutable:pb.TActCelebrationGetInfoRsp.ArrGoodBuyInfo)
  return arrgoodbuyinfo_.Mutable(index);
}
inline ::pb::TActCelebrationBuyInfo* TActCelebrationGetInfoRsp::add_arrgoodbuyinfo() {
  // @@protoc_insertion_point(field_add:pb.TActCelebrationGetInfoRsp.ArrGoodBuyInfo)
  return arrgoodbuyinfo_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::TActCelebrationBuyInfo >&
TActCelebrationGetInfoRsp::arrgoodbuyinfo() const {
  // @@protoc_insertion_point(field_list:pb.TActCelebrationGetInfoRsp.ArrGoodBuyInfo)
  return arrgoodbuyinfo_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb::TActCelebrationBuyInfo >*
TActCelebrationGetInfoRsp::mutable_arrgoodbuyinfo() {
  // @@protoc_insertion_point(field_mutable_list:pb.TActCelebrationGetInfoRsp.ArrGoodBuyInfo)
  return &arrgoodbuyinfo_;
}

// repeated .pb.TActivityRewardInfo ArrTaskRewardInfo = 3;
inline int TActCelebrationGetInfoRsp::arrtaskrewardinfo_size() const {
  return arrtaskrewardinfo_.size();
}
inline void TActCelebrationGetInfoRsp::clear_arrtaskrewardinfo() {
  arrtaskrewardinfo_.Clear();
}
inline const ::pb::TActivityRewardInfo& TActCelebrationGetInfoRsp::arrtaskrewardinfo(int index) const {
  // @@protoc_insertion_point(field_get:pb.TActCelebrationGetInfoRsp.ArrTaskRewardInfo)
  return arrtaskrewardinfo_.Get(index);
}
inline ::pb::TActivityRewardInfo* TActCelebrationGetInfoRsp::mutable_arrtaskrewardinfo(int index) {
  // @@protoc_insertion_point(field_mutable:pb.TActCelebrationGetInfoRsp.ArrTaskRewardInfo)
  return arrtaskrewardinfo_.Mutable(index);
}
inline ::pb::TActivityRewardInfo* TActCelebrationGetInfoRsp::add_arrtaskrewardinfo() {
  // @@protoc_insertion_point(field_add:pb.TActCelebrationGetInfoRsp.ArrTaskRewardInfo)
  return arrtaskrewardinfo_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::TActivityRewardInfo >&
TActCelebrationGetInfoRsp::arrtaskrewardinfo() const {
  // @@protoc_insertion_point(field_list:pb.TActCelebrationGetInfoRsp.ArrTaskRewardInfo)
  return arrtaskrewardinfo_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb::TActivityRewardInfo >*
TActCelebrationGetInfoRsp::mutable_arrtaskrewardinfo() {
  // @@protoc_insertion_point(field_mutable_list:pb.TActCelebrationGetInfoRsp.ArrTaskRewardInfo)
  return &arrtaskrewardinfo_;
}

// repeated .pb.TActCelebrationBuyInfo ArrExchangedInfo = 4;
inline int TActCelebrationGetInfoRsp::arrexchangedinfo_size() const {
  return arrexchangedinfo_.size();
}
inline void TActCelebrationGetInfoRsp::clear_arrexchangedinfo() {
  arrexchangedinfo_.Clear();
}
inline const ::pb::TActCelebrationBuyInfo& TActCelebrationGetInfoRsp::arrexchangedinfo(int index) const {
  // @@protoc_insertion_point(field_get:pb.TActCelebrationGetInfoRsp.ArrExchangedInfo)
  return arrexchangedinfo_.Get(index);
}
inline ::pb::TActCelebrationBuyInfo* TActCelebrationGetInfoRsp::mutable_arrexchangedinfo(int index) {
  // @@protoc_insertion_point(field_mutable:pb.TActCelebrationGetInfoRsp.ArrExchangedInfo)
  return arrexchangedinfo_.Mutable(index);
}
inline ::pb::TActCelebrationBuyInfo* TActCelebrationGetInfoRsp::add_arrexchangedinfo() {
  // @@protoc_insertion_point(field_add:pb.TActCelebrationGetInfoRsp.ArrExchangedInfo)
  return arrexchangedinfo_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::TActCelebrationBuyInfo >&
TActCelebrationGetInfoRsp::arrexchangedinfo() const {
  // @@protoc_insertion_point(field_list:pb.TActCelebrationGetInfoRsp.ArrExchangedInfo)
  return arrexchangedinfo_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb::TActCelebrationBuyInfo >*
TActCelebrationGetInfoRsp::mutable_arrexchangedinfo() {
  // @@protoc_insertion_point(field_mutable_list:pb.TActCelebrationGetInfoRsp.ArrExchangedInfo)
  return &arrexchangedinfo_;
}

// repeated .pb.TActCelebrationTaskInfo ArrTaskInfo = 5;
inline int TActCelebrationGetInfoRsp::arrtaskinfo_size() const {
  return arrtaskinfo_.size();
}
inline void TActCelebrationGetInfoRsp::clear_arrtaskinfo() {
  arrtaskinfo_.Clear();
}
inline const ::pb::TActCelebrationTaskInfo& TActCelebrationGetInfoRsp::arrtaskinfo(int index) const {
  // @@protoc_insertion_point(field_get:pb.TActCelebrationGetInfoRsp.ArrTaskInfo)
  return arrtaskinfo_.Get(index);
}
inline ::pb::TActCelebrationTaskInfo* TActCelebrationGetInfoRsp::mutable_arrtaskinfo(int index) {
  // @@protoc_insertion_point(field_mutable:pb.TActCelebrationGetInfoRsp.ArrTaskInfo)
  return arrtaskinfo_.Mutable(index);
}
inline ::pb::TActCelebrationTaskInfo* TActCelebrationGetInfoRsp::add_arrtaskinfo() {
  // @@protoc_insertion_point(field_add:pb.TActCelebrationGetInfoRsp.ArrTaskInfo)
  return arrtaskinfo_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::TActCelebrationTaskInfo >&
TActCelebrationGetInfoRsp::arrtaskinfo() const {
  // @@protoc_insertion_point(field_list:pb.TActCelebrationGetInfoRsp.ArrTaskInfo)
  return arrtaskinfo_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb::TActCelebrationTaskInfo >*
TActCelebrationGetInfoRsp::mutable_arrtaskinfo() {
  // @@protoc_insertion_point(field_mutable_list:pb.TActCelebrationGetInfoRsp.ArrTaskInfo)
  return &arrtaskinfo_;
}

// -------------------------------------------------------------------

// TActCelebrationBuyGoodsReq

// optional uint32 GoodId = 1;
inline bool TActCelebrationBuyGoodsReq::has_goodid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TActCelebrationBuyGoodsReq::set_has_goodid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TActCelebrationBuyGoodsReq::clear_has_goodid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TActCelebrationBuyGoodsReq::clear_goodid() {
  goodid_ = 0u;
  clear_has_goodid();
}
inline ::google::protobuf::uint32 TActCelebrationBuyGoodsReq::goodid() const {
  // @@protoc_insertion_point(field_get:pb.TActCelebrationBuyGoodsReq.GoodId)
  return goodid_;
}
inline void TActCelebrationBuyGoodsReq::set_goodid(::google::protobuf::uint32 value) {
  set_has_goodid();
  goodid_ = value;
  // @@protoc_insertion_point(field_set:pb.TActCelebrationBuyGoodsReq.GoodId)
}

// optional uint32 Num = 2;
inline bool TActCelebrationBuyGoodsReq::has_num() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TActCelebrationBuyGoodsReq::set_has_num() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TActCelebrationBuyGoodsReq::clear_has_num() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TActCelebrationBuyGoodsReq::clear_num() {
  num_ = 0u;
  clear_has_num();
}
inline ::google::protobuf::uint32 TActCelebrationBuyGoodsReq::num() const {
  // @@protoc_insertion_point(field_get:pb.TActCelebrationBuyGoodsReq.Num)
  return num_;
}
inline void TActCelebrationBuyGoodsReq::set_num(::google::protobuf::uint32 value) {
  set_has_num();
  num_ = value;
  // @@protoc_insertion_point(field_set:pb.TActCelebrationBuyGoodsReq.Num)
}

// -------------------------------------------------------------------

// TActCelebrationBuyGoodsRsp

// repeated .pb.TCommonReward ArrReward = 1;
inline int TActCelebrationBuyGoodsRsp::arrreward_size() const {
  return arrreward_.size();
}
inline void TActCelebrationBuyGoodsRsp::clear_arrreward() {
  arrreward_.Clear();
}
inline const ::pb::TCommonReward& TActCelebrationBuyGoodsRsp::arrreward(int index) const {
  // @@protoc_insertion_point(field_get:pb.TActCelebrationBuyGoodsRsp.ArrReward)
  return arrreward_.Get(index);
}
inline ::pb::TCommonReward* TActCelebrationBuyGoodsRsp::mutable_arrreward(int index) {
  // @@protoc_insertion_point(field_mutable:pb.TActCelebrationBuyGoodsRsp.ArrReward)
  return arrreward_.Mutable(index);
}
inline ::pb::TCommonReward* TActCelebrationBuyGoodsRsp::add_arrreward() {
  // @@protoc_insertion_point(field_add:pb.TActCelebrationBuyGoodsRsp.ArrReward)
  return arrreward_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::TCommonReward >&
TActCelebrationBuyGoodsRsp::arrreward() const {
  // @@protoc_insertion_point(field_list:pb.TActCelebrationBuyGoodsRsp.ArrReward)
  return arrreward_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb::TCommonReward >*
TActCelebrationBuyGoodsRsp::mutable_arrreward() {
  // @@protoc_insertion_point(field_mutable_list:pb.TActCelebrationBuyGoodsRsp.ArrReward)
  return &arrreward_;
}

// -------------------------------------------------------------------

// TActCelebrationGetTaskRewardReq

// optional uint32 TaskId = 1;
inline bool TActCelebrationGetTaskRewardReq::has_taskid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TActCelebrationGetTaskRewardReq::set_has_taskid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TActCelebrationGetTaskRewardReq::clear_has_taskid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TActCelebrationGetTaskRewardReq::clear_taskid() {
  taskid_ = 0u;
  clear_has_taskid();
}
inline ::google::protobuf::uint32 TActCelebrationGetTaskRewardReq::taskid() const {
  // @@protoc_insertion_point(field_get:pb.TActCelebrationGetTaskRewardReq.TaskId)
  return taskid_;
}
inline void TActCelebrationGetTaskRewardReq::set_taskid(::google::protobuf::uint32 value) {
  set_has_taskid();
  taskid_ = value;
  // @@protoc_insertion_point(field_set:pb.TActCelebrationGetTaskRewardReq.TaskId)
}

// -------------------------------------------------------------------

// TActCelebrationGetTaskRewardRsp

// repeated .pb.TCommonReward ArrReward = 1;
inline int TActCelebrationGetTaskRewardRsp::arrreward_size() const {
  return arrreward_.size();
}
inline void TActCelebrationGetTaskRewardRsp::clear_arrreward() {
  arrreward_.Clear();
}
inline const ::pb::TCommonReward& TActCelebrationGetTaskRewardRsp::arrreward(int index) const {
  // @@protoc_insertion_point(field_get:pb.TActCelebrationGetTaskRewardRsp.ArrReward)
  return arrreward_.Get(index);
}
inline ::pb::TCommonReward* TActCelebrationGetTaskRewardRsp::mutable_arrreward(int index) {
  // @@protoc_insertion_point(field_mutable:pb.TActCelebrationGetTaskRewardRsp.ArrReward)
  return arrreward_.Mutable(index);
}
inline ::pb::TCommonReward* TActCelebrationGetTaskRewardRsp::add_arrreward() {
  // @@protoc_insertion_point(field_add:pb.TActCelebrationGetTaskRewardRsp.ArrReward)
  return arrreward_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::TCommonReward >&
TActCelebrationGetTaskRewardRsp::arrreward() const {
  // @@protoc_insertion_point(field_list:pb.TActCelebrationGetTaskRewardRsp.ArrReward)
  return arrreward_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb::TCommonReward >*
TActCelebrationGetTaskRewardRsp::mutable_arrreward() {
  // @@protoc_insertion_point(field_mutable_list:pb.TActCelebrationGetTaskRewardRsp.ArrReward)
  return &arrreward_;
}

// -------------------------------------------------------------------

// TActCelebrationExchangeReq

// optional uint32 ExchangeId = 1;
inline bool TActCelebrationExchangeReq::has_exchangeid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TActCelebrationExchangeReq::set_has_exchangeid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TActCelebrationExchangeReq::clear_has_exchangeid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TActCelebrationExchangeReq::clear_exchangeid() {
  exchangeid_ = 0u;
  clear_has_exchangeid();
}
inline ::google::protobuf::uint32 TActCelebrationExchangeReq::exchangeid() const {
  // @@protoc_insertion_point(field_get:pb.TActCelebrationExchangeReq.ExchangeId)
  return exchangeid_;
}
inline void TActCelebrationExchangeReq::set_exchangeid(::google::protobuf::uint32 value) {
  set_has_exchangeid();
  exchangeid_ = value;
  // @@protoc_insertion_point(field_set:pb.TActCelebrationExchangeReq.ExchangeId)
}

// optional uint32 Num = 2;
inline bool TActCelebrationExchangeReq::has_num() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TActCelebrationExchangeReq::set_has_num() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TActCelebrationExchangeReq::clear_has_num() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TActCelebrationExchangeReq::clear_num() {
  num_ = 0u;
  clear_has_num();
}
inline ::google::protobuf::uint32 TActCelebrationExchangeReq::num() const {
  // @@protoc_insertion_point(field_get:pb.TActCelebrationExchangeReq.Num)
  return num_;
}
inline void TActCelebrationExchangeReq::set_num(::google::protobuf::uint32 value) {
  set_has_num();
  num_ = value;
  // @@protoc_insertion_point(field_set:pb.TActCelebrationExchangeReq.Num)
}

// -------------------------------------------------------------------

// TActCelebrationExchangeRsp

// repeated .pb.TCommonReward ArrReward = 1;
inline int TActCelebrationExchangeRsp::arrreward_size() const {
  return arrreward_.size();
}
inline void TActCelebrationExchangeRsp::clear_arrreward() {
  arrreward_.Clear();
}
inline const ::pb::TCommonReward& TActCelebrationExchangeRsp::arrreward(int index) const {
  // @@protoc_insertion_point(field_get:pb.TActCelebrationExchangeRsp.ArrReward)
  return arrreward_.Get(index);
}
inline ::pb::TCommonReward* TActCelebrationExchangeRsp::mutable_arrreward(int index) {
  // @@protoc_insertion_point(field_mutable:pb.TActCelebrationExchangeRsp.ArrReward)
  return arrreward_.Mutable(index);
}
inline ::pb::TCommonReward* TActCelebrationExchangeRsp::add_arrreward() {
  // @@protoc_insertion_point(field_add:pb.TActCelebrationExchangeRsp.ArrReward)
  return arrreward_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::TCommonReward >&
TActCelebrationExchangeRsp::arrreward() const {
  // @@protoc_insertion_point(field_list:pb.TActCelebrationExchangeRsp.ArrReward)
  return arrreward_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb::TCommonReward >*
TActCelebrationExchangeRsp::mutable_arrreward() {
  // @@protoc_insertion_point(field_mutable_list:pb.TActCelebrationExchangeRsp.ArrReward)
  return &arrreward_;
}

// -------------------------------------------------------------------

// TActCelebrationNotify

// repeated .pb.TActCelebrationBuyInfo ArrRmbGoodBuyInfo = 1;
inline int TActCelebrationNotify::arrrmbgoodbuyinfo_size() const {
  return arrrmbgoodbuyinfo_.size();
}
inline void TActCelebrationNotify::clear_arrrmbgoodbuyinfo() {
  arrrmbgoodbuyinfo_.Clear();
}
inline const ::pb::TActCelebrationBuyInfo& TActCelebrationNotify::arrrmbgoodbuyinfo(int index) const {
  // @@protoc_insertion_point(field_get:pb.TActCelebrationNotify.ArrRmbGoodBuyInfo)
  return arrrmbgoodbuyinfo_.Get(index);
}
inline ::pb::TActCelebrationBuyInfo* TActCelebrationNotify::mutable_arrrmbgoodbuyinfo(int index) {
  // @@protoc_insertion_point(field_mutable:pb.TActCelebrationNotify.ArrRmbGoodBuyInfo)
  return arrrmbgoodbuyinfo_.Mutable(index);
}
inline ::pb::TActCelebrationBuyInfo* TActCelebrationNotify::add_arrrmbgoodbuyinfo() {
  // @@protoc_insertion_point(field_add:pb.TActCelebrationNotify.ArrRmbGoodBuyInfo)
  return arrrmbgoodbuyinfo_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::TActCelebrationBuyInfo >&
TActCelebrationNotify::arrrmbgoodbuyinfo() const {
  // @@protoc_insertion_point(field_list:pb.TActCelebrationNotify.ArrRmbGoodBuyInfo)
  return arrrmbgoodbuyinfo_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb::TActCelebrationBuyInfo >*
TActCelebrationNotify::mutable_arrrmbgoodbuyinfo() {
  // @@protoc_insertion_point(field_mutable_list:pb.TActCelebrationNotify.ArrRmbGoodBuyInfo)
  return &arrrmbgoodbuyinfo_;
}

// repeated .pb.TActCelebrationTaskInfo ArrTaskInfo = 2;
inline int TActCelebrationNotify::arrtaskinfo_size() const {
  return arrtaskinfo_.size();
}
inline void TActCelebrationNotify::clear_arrtaskinfo() {
  arrtaskinfo_.Clear();
}
inline const ::pb::TActCelebrationTaskInfo& TActCelebrationNotify::arrtaskinfo(int index) const {
  // @@protoc_insertion_point(field_get:pb.TActCelebrationNotify.ArrTaskInfo)
  return arrtaskinfo_.Get(index);
}
inline ::pb::TActCelebrationTaskInfo* TActCelebrationNotify::mutable_arrtaskinfo(int index) {
  // @@protoc_insertion_point(field_mutable:pb.TActCelebrationNotify.ArrTaskInfo)
  return arrtaskinfo_.Mutable(index);
}
inline ::pb::TActCelebrationTaskInfo* TActCelebrationNotify::add_arrtaskinfo() {
  // @@protoc_insertion_point(field_add:pb.TActCelebrationNotify.ArrTaskInfo)
  return arrtaskinfo_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::TActCelebrationTaskInfo >&
TActCelebrationNotify::arrtaskinfo() const {
  // @@protoc_insertion_point(field_list:pb.TActCelebrationNotify.ArrTaskInfo)
  return arrtaskinfo_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb::TActCelebrationTaskInfo >*
TActCelebrationNotify::mutable_arrtaskinfo() {
  // @@protoc_insertion_point(field_mutable_list:pb.TActCelebrationNotify.ArrTaskInfo)
  return &arrtaskinfo_;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace pb

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_net_2fActCelebration_2eproto__INCLUDED
