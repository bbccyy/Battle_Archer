// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: net/SlgScience.proto

#ifndef PROTOBUF_net_2fSlgScience_2eproto__INCLUDED
#define PROTOBUF_net_2fSlgScience_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
#include "net/CommonReward.pb.h"
// @@protoc_insertion_point(includes)

namespace pb {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_net_2fSlgScience_2eproto();
void protobuf_AssignDesc_net_2fSlgScience_2eproto();
void protobuf_ShutdownFile_net_2fSlgScience_2eproto();

class TSlgScienceScience;
class TSlgScienceScienceQueue;
class TSlgScienceGetScienceInfoRsp;
class TSlgScienceUpdateDataNotify;
class TSlgScienceScienceLevelUpReq;
class TSlgScienceReduceScienceQueueCDByItemReq;
class TSlgScienceReduceScienceQueueAllCDByItemReq;
class TSlgScienceReduceScienceQueueCDByGoldReq;
class TSlgScienceReduceScienceQueueAllCDByGoldReq;
class TSlgScienceReduceScienceCDByGuildHelpReq;
class TSlgScienceReduceScienceCDFreeReq;

// ===================================================================

/*FOR2LUA
<Record>
	<name>TSlgScienceScience</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/SlgScience.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TSlgScienceScience : public ::google::protobuf::Message {
 public:
  TSlgScienceScience();
  virtual ~TSlgScienceScience();

  TSlgScienceScience(const TSlgScienceScience& from);

  inline TSlgScienceScience& operator=(const TSlgScienceScience& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TSlgScienceScience& default_instance();

  void Swap(TSlgScienceScience* other);

  // implements Message ----------------------------------------------

  TSlgScienceScience* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TSlgScienceScience& from);
  void MergeFrom(const TSlgScienceScience& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 ScienceId = 1;
  inline bool has_scienceid() const;
  inline void clear_scienceid();
  static const int kScienceIdFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TSlgScienceScience</name>
  	<Function>
  		<name>scienceid</name>
  		<replaceName>ScienceId</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_scienceid</name>
  		<replaceName>ScienceId</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_scienceid</name>
  		<replaceName>ScienceId</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 scienceid() const;
  inline void set_scienceid(::google::protobuf::uint32 value);

  // optional uint32 Level = 2;
  inline bool has_level() const;
  inline void clear_level();
  static const int kLevelFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TSlgScienceScience</name>
  	<Function>
  		<name>level</name>
  		<replaceName>Level</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_level</name>
  		<replaceName>Level</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_level</name>
  		<replaceName>Level</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 level() const;
  inline void set_level(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:pb.TSlgScienceScience)
 private:
  inline void set_has_scienceid();
  inline void clear_has_scienceid();
  inline void set_has_level();
  inline void clear_has_level();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 scienceid_;
  ::google::protobuf::uint32 level_;
  friend void  protobuf_AddDesc_net_2fSlgScience_2eproto();
  friend void protobuf_AssignDesc_net_2fSlgScience_2eproto();
  friend void protobuf_ShutdownFile_net_2fSlgScience_2eproto();

  void InitAsDefaultInstance();
  static TSlgScienceScience* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TSlgScienceScienceQueue</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/SlgScience.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TSlgScienceScienceQueue : public ::google::protobuf::Message {
 public:
  TSlgScienceScienceQueue();
  virtual ~TSlgScienceScienceQueue();

  TSlgScienceScienceQueue(const TSlgScienceScienceQueue& from);

  inline TSlgScienceScienceQueue& operator=(const TSlgScienceScienceQueue& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TSlgScienceScienceQueue& default_instance();

  void Swap(TSlgScienceScienceQueue* other);

  // implements Message ----------------------------------------------

  TSlgScienceScienceQueue* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TSlgScienceScienceQueue& from);
  void MergeFrom(const TSlgScienceScienceQueue& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 QueueId = 1;
  inline bool has_queueid() const;
  inline void clear_queueid();
  static const int kQueueIdFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TSlgScienceScienceQueue</name>
  	<Function>
  		<name>queueid</name>
  		<replaceName>QueueId</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_queueid</name>
  		<replaceName>QueueId</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_queueid</name>
  		<replaceName>QueueId</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 queueid() const;
  inline void set_queueid(::google::protobuf::uint32 value);

  // optional int64 EndCDTime = 2;
  inline bool has_endcdtime() const;
  inline void clear_endcdtime();
  static const int kEndCDTimeFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TSlgScienceScienceQueue</name>
  	<Function>
  		<name>endcdtime</name>
  		<replaceName>EndCDTime</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_endcdtime</name>
  		<replaceName>EndCDTime</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_endcdtime</name>
  		<replaceName>EndCDTime</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::int64 endcdtime() const;
  inline void set_endcdtime(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:pb.TSlgScienceScienceQueue)
 private:
  inline void set_has_queueid();
  inline void clear_has_queueid();
  inline void set_has_endcdtime();
  inline void clear_has_endcdtime();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int64 endcdtime_;
  ::google::protobuf::uint32 queueid_;
  friend void  protobuf_AddDesc_net_2fSlgScience_2eproto();
  friend void protobuf_AssignDesc_net_2fSlgScience_2eproto();
  friend void protobuf_ShutdownFile_net_2fSlgScience_2eproto();

  void InitAsDefaultInstance();
  static TSlgScienceScienceQueue* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TSlgScienceGetScienceInfoRsp</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/SlgScience.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TSlgScienceGetScienceInfoRsp : public ::google::protobuf::Message {
 public:
  TSlgScienceGetScienceInfoRsp();
  virtual ~TSlgScienceGetScienceInfoRsp();

  TSlgScienceGetScienceInfoRsp(const TSlgScienceGetScienceInfoRsp& from);

  inline TSlgScienceGetScienceInfoRsp& operator=(const TSlgScienceGetScienceInfoRsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TSlgScienceGetScienceInfoRsp& default_instance();

  void Swap(TSlgScienceGetScienceInfoRsp* other);

  // implements Message ----------------------------------------------

  TSlgScienceGetScienceInfoRsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TSlgScienceGetScienceInfoRsp& from);
  void MergeFrom(const TSlgScienceGetScienceInfoRsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .pb.TSlgScienceScience ScienceArr = 1;
  inline int sciencearr_size() const;
  inline void clear_sciencearr();
  static const int kScienceArrFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TSlgScienceGetScienceInfoRsp</name>
  	<Function>
  		<name>sciencearr</name>
  		<replaceName>ScienceArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_sciencearr</name>
  		<replaceName>ScienceArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_sciencearr</name>
  		<replaceName>ScienceArr</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_sciencearr</name>
  		<replaceName>ScienceArr</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>sciencearr_size</name>
  		<replaceName>ScienceArr</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TSlgScienceScience& sciencearr(int index) const;
  inline ::pb::TSlgScienceScience* mutable_sciencearr(int index);
  inline ::pb::TSlgScienceScience* add_sciencearr();
  inline const ::google::protobuf::RepeatedPtrField< ::pb::TSlgScienceScience >&
      sciencearr() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb::TSlgScienceScience >*
      mutable_sciencearr();

  // repeated .pb.TSlgScienceScienceQueue QueueArr = 2;
  inline int queuearr_size() const;
  inline void clear_queuearr();
  static const int kQueueArrFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TSlgScienceGetScienceInfoRsp</name>
  	<Function>
  		<name>queuearr</name>
  		<replaceName>QueueArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_queuearr</name>
  		<replaceName>QueueArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_queuearr</name>
  		<replaceName>QueueArr</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_queuearr</name>
  		<replaceName>QueueArr</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>queuearr_size</name>
  		<replaceName>QueueArr</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TSlgScienceScienceQueue& queuearr(int index) const;
  inline ::pb::TSlgScienceScienceQueue* mutable_queuearr(int index);
  inline ::pb::TSlgScienceScienceQueue* add_queuearr();
  inline const ::google::protobuf::RepeatedPtrField< ::pb::TSlgScienceScienceQueue >&
      queuearr() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb::TSlgScienceScienceQueue >*
      mutable_queuearr();

  // @@protoc_insertion_point(class_scope:pb.TSlgScienceGetScienceInfoRsp)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::pb::TSlgScienceScience > sciencearr_;
  ::google::protobuf::RepeatedPtrField< ::pb::TSlgScienceScienceQueue > queuearr_;
  friend void  protobuf_AddDesc_net_2fSlgScience_2eproto();
  friend void protobuf_AssignDesc_net_2fSlgScience_2eproto();
  friend void protobuf_ShutdownFile_net_2fSlgScience_2eproto();

  void InitAsDefaultInstance();
  static TSlgScienceGetScienceInfoRsp* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TSlgScienceUpdateDataNotify</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/SlgScience.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TSlgScienceUpdateDataNotify : public ::google::protobuf::Message {
 public:
  TSlgScienceUpdateDataNotify();
  virtual ~TSlgScienceUpdateDataNotify();

  TSlgScienceUpdateDataNotify(const TSlgScienceUpdateDataNotify& from);

  inline TSlgScienceUpdateDataNotify& operator=(const TSlgScienceUpdateDataNotify& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TSlgScienceUpdateDataNotify& default_instance();

  void Swap(TSlgScienceUpdateDataNotify* other);

  // implements Message ----------------------------------------------

  TSlgScienceUpdateDataNotify* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TSlgScienceUpdateDataNotify& from);
  void MergeFrom(const TSlgScienceUpdateDataNotify& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .pb.TSlgScienceScience ScienceArr = 1;
  inline int sciencearr_size() const;
  inline void clear_sciencearr();
  static const int kScienceArrFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TSlgScienceUpdateDataNotify</name>
  	<Function>
  		<name>sciencearr</name>
  		<replaceName>ScienceArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_sciencearr</name>
  		<replaceName>ScienceArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_sciencearr</name>
  		<replaceName>ScienceArr</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_sciencearr</name>
  		<replaceName>ScienceArr</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>sciencearr_size</name>
  		<replaceName>ScienceArr</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TSlgScienceScience& sciencearr(int index) const;
  inline ::pb::TSlgScienceScience* mutable_sciencearr(int index);
  inline ::pb::TSlgScienceScience* add_sciencearr();
  inline const ::google::protobuf::RepeatedPtrField< ::pb::TSlgScienceScience >&
      sciencearr() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb::TSlgScienceScience >*
      mutable_sciencearr();

  // repeated .pb.TSlgScienceScienceQueue QueueArr = 2;
  inline int queuearr_size() const;
  inline void clear_queuearr();
  static const int kQueueArrFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TSlgScienceUpdateDataNotify</name>
  	<Function>
  		<name>queuearr</name>
  		<replaceName>QueueArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_queuearr</name>
  		<replaceName>QueueArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_queuearr</name>
  		<replaceName>QueueArr</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_queuearr</name>
  		<replaceName>QueueArr</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>queuearr_size</name>
  		<replaceName>QueueArr</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TSlgScienceScienceQueue& queuearr(int index) const;
  inline ::pb::TSlgScienceScienceQueue* mutable_queuearr(int index);
  inline ::pb::TSlgScienceScienceQueue* add_queuearr();
  inline const ::google::protobuf::RepeatedPtrField< ::pb::TSlgScienceScienceQueue >&
      queuearr() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb::TSlgScienceScienceQueue >*
      mutable_queuearr();

  // @@protoc_insertion_point(class_scope:pb.TSlgScienceUpdateDataNotify)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::pb::TSlgScienceScience > sciencearr_;
  ::google::protobuf::RepeatedPtrField< ::pb::TSlgScienceScienceQueue > queuearr_;
  friend void  protobuf_AddDesc_net_2fSlgScience_2eproto();
  friend void protobuf_AssignDesc_net_2fSlgScience_2eproto();
  friend void protobuf_ShutdownFile_net_2fSlgScience_2eproto();

  void InitAsDefaultInstance();
  static TSlgScienceUpdateDataNotify* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TSlgScienceScienceLevelUpReq</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/SlgScience.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TSlgScienceScienceLevelUpReq : public ::google::protobuf::Message {
 public:
  TSlgScienceScienceLevelUpReq();
  virtual ~TSlgScienceScienceLevelUpReq();

  TSlgScienceScienceLevelUpReq(const TSlgScienceScienceLevelUpReq& from);

  inline TSlgScienceScienceLevelUpReq& operator=(const TSlgScienceScienceLevelUpReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TSlgScienceScienceLevelUpReq& default_instance();

  void Swap(TSlgScienceScienceLevelUpReq* other);

  // implements Message ----------------------------------------------

  TSlgScienceScienceLevelUpReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TSlgScienceScienceLevelUpReq& from);
  void MergeFrom(const TSlgScienceScienceLevelUpReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 ScienceTid = 1;
  inline bool has_sciencetid() const;
  inline void clear_sciencetid();
  static const int kScienceTidFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TSlgScienceScienceLevelUpReq</name>
  	<Function>
  		<name>sciencetid</name>
  		<replaceName>ScienceTid</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_sciencetid</name>
  		<replaceName>ScienceTid</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_sciencetid</name>
  		<replaceName>ScienceTid</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 sciencetid() const;
  inline void set_sciencetid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:pb.TSlgScienceScienceLevelUpReq)
 private:
  inline void set_has_sciencetid();
  inline void clear_has_sciencetid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 sciencetid_;
  friend void  protobuf_AddDesc_net_2fSlgScience_2eproto();
  friend void protobuf_AssignDesc_net_2fSlgScience_2eproto();
  friend void protobuf_ShutdownFile_net_2fSlgScience_2eproto();

  void InitAsDefaultInstance();
  static TSlgScienceScienceLevelUpReq* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TSlgScienceReduceScienceQueueCDByItemReq</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/SlgScience.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TSlgScienceReduceScienceQueueCDByItemReq : public ::google::protobuf::Message {
 public:
  TSlgScienceReduceScienceQueueCDByItemReq();
  virtual ~TSlgScienceReduceScienceQueueCDByItemReq();

  TSlgScienceReduceScienceQueueCDByItemReq(const TSlgScienceReduceScienceQueueCDByItemReq& from);

  inline TSlgScienceReduceScienceQueueCDByItemReq& operator=(const TSlgScienceReduceScienceQueueCDByItemReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TSlgScienceReduceScienceQueueCDByItemReq& default_instance();

  void Swap(TSlgScienceReduceScienceQueueCDByItemReq* other);

  // implements Message ----------------------------------------------

  TSlgScienceReduceScienceQueueCDByItemReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TSlgScienceReduceScienceQueueCDByItemReq& from);
  void MergeFrom(const TSlgScienceReduceScienceQueueCDByItemReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 QueueId = 1;
  inline bool has_queueid() const;
  inline void clear_queueid();
  static const int kQueueIdFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TSlgScienceReduceScienceQueueCDByItemReq</name>
  	<Function>
  		<name>queueid</name>
  		<replaceName>QueueId</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_queueid</name>
  		<replaceName>QueueId</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_queueid</name>
  		<replaceName>QueueId</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 queueid() const;
  inline void set_queueid(::google::protobuf::uint32 value);

  // repeated .pb.TCommonReward ItemArr = 2;
  inline int itemarr_size() const;
  inline void clear_itemarr();
  static const int kItemArrFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TSlgScienceReduceScienceQueueCDByItemReq</name>
  	<Function>
  		<name>itemarr</name>
  		<replaceName>ItemArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_itemarr</name>
  		<replaceName>ItemArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_itemarr</name>
  		<replaceName>ItemArr</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_itemarr</name>
  		<replaceName>ItemArr</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>itemarr_size</name>
  		<replaceName>ItemArr</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TCommonReward& itemarr(int index) const;
  inline ::pb::TCommonReward* mutable_itemarr(int index);
  inline ::pb::TCommonReward* add_itemarr();
  inline const ::google::protobuf::RepeatedPtrField< ::pb::TCommonReward >&
      itemarr() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb::TCommonReward >*
      mutable_itemarr();

  // @@protoc_insertion_point(class_scope:pb.TSlgScienceReduceScienceQueueCDByItemReq)
 private:
  inline void set_has_queueid();
  inline void clear_has_queueid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::pb::TCommonReward > itemarr_;
  ::google::protobuf::uint32 queueid_;
  friend void  protobuf_AddDesc_net_2fSlgScience_2eproto();
  friend void protobuf_AssignDesc_net_2fSlgScience_2eproto();
  friend void protobuf_ShutdownFile_net_2fSlgScience_2eproto();

  void InitAsDefaultInstance();
  static TSlgScienceReduceScienceQueueCDByItemReq* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TSlgScienceReduceScienceQueueAllCDByItemReq</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/SlgScience.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TSlgScienceReduceScienceQueueAllCDByItemReq : public ::google::protobuf::Message {
 public:
  TSlgScienceReduceScienceQueueAllCDByItemReq();
  virtual ~TSlgScienceReduceScienceQueueAllCDByItemReq();

  TSlgScienceReduceScienceQueueAllCDByItemReq(const TSlgScienceReduceScienceQueueAllCDByItemReq& from);

  inline TSlgScienceReduceScienceQueueAllCDByItemReq& operator=(const TSlgScienceReduceScienceQueueAllCDByItemReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TSlgScienceReduceScienceQueueAllCDByItemReq& default_instance();

  void Swap(TSlgScienceReduceScienceQueueAllCDByItemReq* other);

  // implements Message ----------------------------------------------

  TSlgScienceReduceScienceQueueAllCDByItemReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TSlgScienceReduceScienceQueueAllCDByItemReq& from);
  void MergeFrom(const TSlgScienceReduceScienceQueueAllCDByItemReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 QueueId = 1;
  inline bool has_queueid() const;
  inline void clear_queueid();
  static const int kQueueIdFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TSlgScienceReduceScienceQueueAllCDByItemReq</name>
  	<Function>
  		<name>queueid</name>
  		<replaceName>QueueId</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_queueid</name>
  		<replaceName>QueueId</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_queueid</name>
  		<replaceName>QueueId</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 queueid() const;
  inline void set_queueid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:pb.TSlgScienceReduceScienceQueueAllCDByItemReq)
 private:
  inline void set_has_queueid();
  inline void clear_has_queueid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 queueid_;
  friend void  protobuf_AddDesc_net_2fSlgScience_2eproto();
  friend void protobuf_AssignDesc_net_2fSlgScience_2eproto();
  friend void protobuf_ShutdownFile_net_2fSlgScience_2eproto();

  void InitAsDefaultInstance();
  static TSlgScienceReduceScienceQueueAllCDByItemReq* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TSlgScienceReduceScienceQueueCDByGoldReq</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/SlgScience.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TSlgScienceReduceScienceQueueCDByGoldReq : public ::google::protobuf::Message {
 public:
  TSlgScienceReduceScienceQueueCDByGoldReq();
  virtual ~TSlgScienceReduceScienceQueueCDByGoldReq();

  TSlgScienceReduceScienceQueueCDByGoldReq(const TSlgScienceReduceScienceQueueCDByGoldReq& from);

  inline TSlgScienceReduceScienceQueueCDByGoldReq& operator=(const TSlgScienceReduceScienceQueueCDByGoldReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TSlgScienceReduceScienceQueueCDByGoldReq& default_instance();

  void Swap(TSlgScienceReduceScienceQueueCDByGoldReq* other);

  // implements Message ----------------------------------------------

  TSlgScienceReduceScienceQueueCDByGoldReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TSlgScienceReduceScienceQueueCDByGoldReq& from);
  void MergeFrom(const TSlgScienceReduceScienceQueueCDByGoldReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 QueueId = 1;
  inline bool has_queueid() const;
  inline void clear_queueid();
  static const int kQueueIdFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TSlgScienceReduceScienceQueueCDByGoldReq</name>
  	<Function>
  		<name>queueid</name>
  		<replaceName>QueueId</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_queueid</name>
  		<replaceName>QueueId</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_queueid</name>
  		<replaceName>QueueId</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 queueid() const;
  inline void set_queueid(::google::protobuf::uint32 value);

  // optional uint32 GoldNum = 2;
  inline bool has_goldnum() const;
  inline void clear_goldnum();
  static const int kGoldNumFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TSlgScienceReduceScienceQueueCDByGoldReq</name>
  	<Function>
  		<name>goldnum</name>
  		<replaceName>GoldNum</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_goldnum</name>
  		<replaceName>GoldNum</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_goldnum</name>
  		<replaceName>GoldNum</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 goldnum() const;
  inline void set_goldnum(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:pb.TSlgScienceReduceScienceQueueCDByGoldReq)
 private:
  inline void set_has_queueid();
  inline void clear_has_queueid();
  inline void set_has_goldnum();
  inline void clear_has_goldnum();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 queueid_;
  ::google::protobuf::uint32 goldnum_;
  friend void  protobuf_AddDesc_net_2fSlgScience_2eproto();
  friend void protobuf_AssignDesc_net_2fSlgScience_2eproto();
  friend void protobuf_ShutdownFile_net_2fSlgScience_2eproto();

  void InitAsDefaultInstance();
  static TSlgScienceReduceScienceQueueCDByGoldReq* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TSlgScienceReduceScienceQueueAllCDByGoldReq</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/SlgScience.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TSlgScienceReduceScienceQueueAllCDByGoldReq : public ::google::protobuf::Message {
 public:
  TSlgScienceReduceScienceQueueAllCDByGoldReq();
  virtual ~TSlgScienceReduceScienceQueueAllCDByGoldReq();

  TSlgScienceReduceScienceQueueAllCDByGoldReq(const TSlgScienceReduceScienceQueueAllCDByGoldReq& from);

  inline TSlgScienceReduceScienceQueueAllCDByGoldReq& operator=(const TSlgScienceReduceScienceQueueAllCDByGoldReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TSlgScienceReduceScienceQueueAllCDByGoldReq& default_instance();

  void Swap(TSlgScienceReduceScienceQueueAllCDByGoldReq* other);

  // implements Message ----------------------------------------------

  TSlgScienceReduceScienceQueueAllCDByGoldReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TSlgScienceReduceScienceQueueAllCDByGoldReq& from);
  void MergeFrom(const TSlgScienceReduceScienceQueueAllCDByGoldReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 QueueId = 1;
  inline bool has_queueid() const;
  inline void clear_queueid();
  static const int kQueueIdFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TSlgScienceReduceScienceQueueAllCDByGoldReq</name>
  	<Function>
  		<name>queueid</name>
  		<replaceName>QueueId</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_queueid</name>
  		<replaceName>QueueId</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_queueid</name>
  		<replaceName>QueueId</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 queueid() const;
  inline void set_queueid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:pb.TSlgScienceReduceScienceQueueAllCDByGoldReq)
 private:
  inline void set_has_queueid();
  inline void clear_has_queueid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 queueid_;
  friend void  protobuf_AddDesc_net_2fSlgScience_2eproto();
  friend void protobuf_AssignDesc_net_2fSlgScience_2eproto();
  friend void protobuf_ShutdownFile_net_2fSlgScience_2eproto();

  void InitAsDefaultInstance();
  static TSlgScienceReduceScienceQueueAllCDByGoldReq* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TSlgScienceReduceScienceCDByGuildHelpReq</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/SlgScience.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TSlgScienceReduceScienceCDByGuildHelpReq : public ::google::protobuf::Message {
 public:
  TSlgScienceReduceScienceCDByGuildHelpReq();
  virtual ~TSlgScienceReduceScienceCDByGuildHelpReq();

  TSlgScienceReduceScienceCDByGuildHelpReq(const TSlgScienceReduceScienceCDByGuildHelpReq& from);

  inline TSlgScienceReduceScienceCDByGuildHelpReq& operator=(const TSlgScienceReduceScienceCDByGuildHelpReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TSlgScienceReduceScienceCDByGuildHelpReq& default_instance();

  void Swap(TSlgScienceReduceScienceCDByGuildHelpReq* other);

  // implements Message ----------------------------------------------

  TSlgScienceReduceScienceCDByGuildHelpReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TSlgScienceReduceScienceCDByGuildHelpReq& from);
  void MergeFrom(const TSlgScienceReduceScienceCDByGuildHelpReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 QueueId = 1;
  inline bool has_queueid() const;
  inline void clear_queueid();
  static const int kQueueIdFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TSlgScienceReduceScienceCDByGuildHelpReq</name>
  	<Function>
  		<name>queueid</name>
  		<replaceName>QueueId</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_queueid</name>
  		<replaceName>QueueId</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_queueid</name>
  		<replaceName>QueueId</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 queueid() const;
  inline void set_queueid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:pb.TSlgScienceReduceScienceCDByGuildHelpReq)
 private:
  inline void set_has_queueid();
  inline void clear_has_queueid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 queueid_;
  friend void  protobuf_AddDesc_net_2fSlgScience_2eproto();
  friend void protobuf_AssignDesc_net_2fSlgScience_2eproto();
  friend void protobuf_ShutdownFile_net_2fSlgScience_2eproto();

  void InitAsDefaultInstance();
  static TSlgScienceReduceScienceCDByGuildHelpReq* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TSlgScienceReduceScienceCDFreeReq</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/SlgScience.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TSlgScienceReduceScienceCDFreeReq : public ::google::protobuf::Message {
 public:
  TSlgScienceReduceScienceCDFreeReq();
  virtual ~TSlgScienceReduceScienceCDFreeReq();

  TSlgScienceReduceScienceCDFreeReq(const TSlgScienceReduceScienceCDFreeReq& from);

  inline TSlgScienceReduceScienceCDFreeReq& operator=(const TSlgScienceReduceScienceCDFreeReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TSlgScienceReduceScienceCDFreeReq& default_instance();

  void Swap(TSlgScienceReduceScienceCDFreeReq* other);

  // implements Message ----------------------------------------------

  TSlgScienceReduceScienceCDFreeReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TSlgScienceReduceScienceCDFreeReq& from);
  void MergeFrom(const TSlgScienceReduceScienceCDFreeReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 QueueId = 1;
  inline bool has_queueid() const;
  inline void clear_queueid();
  static const int kQueueIdFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TSlgScienceReduceScienceCDFreeReq</name>
  	<Function>
  		<name>queueid</name>
  		<replaceName>QueueId</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_queueid</name>
  		<replaceName>QueueId</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_queueid</name>
  		<replaceName>QueueId</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 queueid() const;
  inline void set_queueid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:pb.TSlgScienceReduceScienceCDFreeReq)
 private:
  inline void set_has_queueid();
  inline void clear_has_queueid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 queueid_;
  friend void  protobuf_AddDesc_net_2fSlgScience_2eproto();
  friend void protobuf_AssignDesc_net_2fSlgScience_2eproto();
  friend void protobuf_ShutdownFile_net_2fSlgScience_2eproto();

  void InitAsDefaultInstance();
  static TSlgScienceReduceScienceCDFreeReq* default_instance_;
};
// ===================================================================


// ===================================================================

// TSlgScienceScience

// optional uint32 ScienceId = 1;
inline bool TSlgScienceScience::has_scienceid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TSlgScienceScience::set_has_scienceid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TSlgScienceScience::clear_has_scienceid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TSlgScienceScience::clear_scienceid() {
  scienceid_ = 0u;
  clear_has_scienceid();
}
inline ::google::protobuf::uint32 TSlgScienceScience::scienceid() const {
  // @@protoc_insertion_point(field_get:pb.TSlgScienceScience.ScienceId)
  return scienceid_;
}
inline void TSlgScienceScience::set_scienceid(::google::protobuf::uint32 value) {
  set_has_scienceid();
  scienceid_ = value;
  // @@protoc_insertion_point(field_set:pb.TSlgScienceScience.ScienceId)
}

// optional uint32 Level = 2;
inline bool TSlgScienceScience::has_level() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TSlgScienceScience::set_has_level() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TSlgScienceScience::clear_has_level() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TSlgScienceScience::clear_level() {
  level_ = 0u;
  clear_has_level();
}
inline ::google::protobuf::uint32 TSlgScienceScience::level() const {
  // @@protoc_insertion_point(field_get:pb.TSlgScienceScience.Level)
  return level_;
}
inline void TSlgScienceScience::set_level(::google::protobuf::uint32 value) {
  set_has_level();
  level_ = value;
  // @@protoc_insertion_point(field_set:pb.TSlgScienceScience.Level)
}

// -------------------------------------------------------------------

// TSlgScienceScienceQueue

// optional uint32 QueueId = 1;
inline bool TSlgScienceScienceQueue::has_queueid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TSlgScienceScienceQueue::set_has_queueid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TSlgScienceScienceQueue::clear_has_queueid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TSlgScienceScienceQueue::clear_queueid() {
  queueid_ = 0u;
  clear_has_queueid();
}
inline ::google::protobuf::uint32 TSlgScienceScienceQueue::queueid() const {
  // @@protoc_insertion_point(field_get:pb.TSlgScienceScienceQueue.QueueId)
  return queueid_;
}
inline void TSlgScienceScienceQueue::set_queueid(::google::protobuf::uint32 value) {
  set_has_queueid();
  queueid_ = value;
  // @@protoc_insertion_point(field_set:pb.TSlgScienceScienceQueue.QueueId)
}

// optional int64 EndCDTime = 2;
inline bool TSlgScienceScienceQueue::has_endcdtime() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TSlgScienceScienceQueue::set_has_endcdtime() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TSlgScienceScienceQueue::clear_has_endcdtime() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TSlgScienceScienceQueue::clear_endcdtime() {
  endcdtime_ = GOOGLE_LONGLONG(0);
  clear_has_endcdtime();
}
inline ::google::protobuf::int64 TSlgScienceScienceQueue::endcdtime() const {
  // @@protoc_insertion_point(field_get:pb.TSlgScienceScienceQueue.EndCDTime)
  return endcdtime_;
}
inline void TSlgScienceScienceQueue::set_endcdtime(::google::protobuf::int64 value) {
  set_has_endcdtime();
  endcdtime_ = value;
  // @@protoc_insertion_point(field_set:pb.TSlgScienceScienceQueue.EndCDTime)
}

// -------------------------------------------------------------------

// TSlgScienceGetScienceInfoRsp

// repeated .pb.TSlgScienceScience ScienceArr = 1;
inline int TSlgScienceGetScienceInfoRsp::sciencearr_size() const {
  return sciencearr_.size();
}
inline void TSlgScienceGetScienceInfoRsp::clear_sciencearr() {
  sciencearr_.Clear();
}
inline const ::pb::TSlgScienceScience& TSlgScienceGetScienceInfoRsp::sciencearr(int index) const {
  // @@protoc_insertion_point(field_get:pb.TSlgScienceGetScienceInfoRsp.ScienceArr)
  return sciencearr_.Get(index);
}
inline ::pb::TSlgScienceScience* TSlgScienceGetScienceInfoRsp::mutable_sciencearr(int index) {
  // @@protoc_insertion_point(field_mutable:pb.TSlgScienceGetScienceInfoRsp.ScienceArr)
  return sciencearr_.Mutable(index);
}
inline ::pb::TSlgScienceScience* TSlgScienceGetScienceInfoRsp::add_sciencearr() {
  // @@protoc_insertion_point(field_add:pb.TSlgScienceGetScienceInfoRsp.ScienceArr)
  return sciencearr_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::TSlgScienceScience >&
TSlgScienceGetScienceInfoRsp::sciencearr() const {
  // @@protoc_insertion_point(field_list:pb.TSlgScienceGetScienceInfoRsp.ScienceArr)
  return sciencearr_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb::TSlgScienceScience >*
TSlgScienceGetScienceInfoRsp::mutable_sciencearr() {
  // @@protoc_insertion_point(field_mutable_list:pb.TSlgScienceGetScienceInfoRsp.ScienceArr)
  return &sciencearr_;
}

// repeated .pb.TSlgScienceScienceQueue QueueArr = 2;
inline int TSlgScienceGetScienceInfoRsp::queuearr_size() const {
  return queuearr_.size();
}
inline void TSlgScienceGetScienceInfoRsp::clear_queuearr() {
  queuearr_.Clear();
}
inline const ::pb::TSlgScienceScienceQueue& TSlgScienceGetScienceInfoRsp::queuearr(int index) const {
  // @@protoc_insertion_point(field_get:pb.TSlgScienceGetScienceInfoRsp.QueueArr)
  return queuearr_.Get(index);
}
inline ::pb::TSlgScienceScienceQueue* TSlgScienceGetScienceInfoRsp::mutable_queuearr(int index) {
  // @@protoc_insertion_point(field_mutable:pb.TSlgScienceGetScienceInfoRsp.QueueArr)
  return queuearr_.Mutable(index);
}
inline ::pb::TSlgScienceScienceQueue* TSlgScienceGetScienceInfoRsp::add_queuearr() {
  // @@protoc_insertion_point(field_add:pb.TSlgScienceGetScienceInfoRsp.QueueArr)
  return queuearr_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::TSlgScienceScienceQueue >&
TSlgScienceGetScienceInfoRsp::queuearr() const {
  // @@protoc_insertion_point(field_list:pb.TSlgScienceGetScienceInfoRsp.QueueArr)
  return queuearr_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb::TSlgScienceScienceQueue >*
TSlgScienceGetScienceInfoRsp::mutable_queuearr() {
  // @@protoc_insertion_point(field_mutable_list:pb.TSlgScienceGetScienceInfoRsp.QueueArr)
  return &queuearr_;
}

// -------------------------------------------------------------------

// TSlgScienceUpdateDataNotify

// repeated .pb.TSlgScienceScience ScienceArr = 1;
inline int TSlgScienceUpdateDataNotify::sciencearr_size() const {
  return sciencearr_.size();
}
inline void TSlgScienceUpdateDataNotify::clear_sciencearr() {
  sciencearr_.Clear();
}
inline const ::pb::TSlgScienceScience& TSlgScienceUpdateDataNotify::sciencearr(int index) const {
  // @@protoc_insertion_point(field_get:pb.TSlgScienceUpdateDataNotify.ScienceArr)
  return sciencearr_.Get(index);
}
inline ::pb::TSlgScienceScience* TSlgScienceUpdateDataNotify::mutable_sciencearr(int index) {
  // @@protoc_insertion_point(field_mutable:pb.TSlgScienceUpdateDataNotify.ScienceArr)
  return sciencearr_.Mutable(index);
}
inline ::pb::TSlgScienceScience* TSlgScienceUpdateDataNotify::add_sciencearr() {
  // @@protoc_insertion_point(field_add:pb.TSlgScienceUpdateDataNotify.ScienceArr)
  return sciencearr_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::TSlgScienceScience >&
TSlgScienceUpdateDataNotify::sciencearr() const {
  // @@protoc_insertion_point(field_list:pb.TSlgScienceUpdateDataNotify.ScienceArr)
  return sciencearr_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb::TSlgScienceScience >*
TSlgScienceUpdateDataNotify::mutable_sciencearr() {
  // @@protoc_insertion_point(field_mutable_list:pb.TSlgScienceUpdateDataNotify.ScienceArr)
  return &sciencearr_;
}

// repeated .pb.TSlgScienceScienceQueue QueueArr = 2;
inline int TSlgScienceUpdateDataNotify::queuearr_size() const {
  return queuearr_.size();
}
inline void TSlgScienceUpdateDataNotify::clear_queuearr() {
  queuearr_.Clear();
}
inline const ::pb::TSlgScienceScienceQueue& TSlgScienceUpdateDataNotify::queuearr(int index) const {
  // @@protoc_insertion_point(field_get:pb.TSlgScienceUpdateDataNotify.QueueArr)
  return queuearr_.Get(index);
}
inline ::pb::TSlgScienceScienceQueue* TSlgScienceUpdateDataNotify::mutable_queuearr(int index) {
  // @@protoc_insertion_point(field_mutable:pb.TSlgScienceUpdateDataNotify.QueueArr)
  return queuearr_.Mutable(index);
}
inline ::pb::TSlgScienceScienceQueue* TSlgScienceUpdateDataNotify::add_queuearr() {
  // @@protoc_insertion_point(field_add:pb.TSlgScienceUpdateDataNotify.QueueArr)
  return queuearr_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::TSlgScienceScienceQueue >&
TSlgScienceUpdateDataNotify::queuearr() const {
  // @@protoc_insertion_point(field_list:pb.TSlgScienceUpdateDataNotify.QueueArr)
  return queuearr_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb::TSlgScienceScienceQueue >*
TSlgScienceUpdateDataNotify::mutable_queuearr() {
  // @@protoc_insertion_point(field_mutable_list:pb.TSlgScienceUpdateDataNotify.QueueArr)
  return &queuearr_;
}

// -------------------------------------------------------------------

// TSlgScienceScienceLevelUpReq

// optional uint32 ScienceTid = 1;
inline bool TSlgScienceScienceLevelUpReq::has_sciencetid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TSlgScienceScienceLevelUpReq::set_has_sciencetid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TSlgScienceScienceLevelUpReq::clear_has_sciencetid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TSlgScienceScienceLevelUpReq::clear_sciencetid() {
  sciencetid_ = 0u;
  clear_has_sciencetid();
}
inline ::google::protobuf::uint32 TSlgScienceScienceLevelUpReq::sciencetid() const {
  // @@protoc_insertion_point(field_get:pb.TSlgScienceScienceLevelUpReq.ScienceTid)
  return sciencetid_;
}
inline void TSlgScienceScienceLevelUpReq::set_sciencetid(::google::protobuf::uint32 value) {
  set_has_sciencetid();
  sciencetid_ = value;
  // @@protoc_insertion_point(field_set:pb.TSlgScienceScienceLevelUpReq.ScienceTid)
}

// -------------------------------------------------------------------

// TSlgScienceReduceScienceQueueCDByItemReq

// optional uint32 QueueId = 1;
inline bool TSlgScienceReduceScienceQueueCDByItemReq::has_queueid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TSlgScienceReduceScienceQueueCDByItemReq::set_has_queueid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TSlgScienceReduceScienceQueueCDByItemReq::clear_has_queueid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TSlgScienceReduceScienceQueueCDByItemReq::clear_queueid() {
  queueid_ = 0u;
  clear_has_queueid();
}
inline ::google::protobuf::uint32 TSlgScienceReduceScienceQueueCDByItemReq::queueid() const {
  // @@protoc_insertion_point(field_get:pb.TSlgScienceReduceScienceQueueCDByItemReq.QueueId)
  return queueid_;
}
inline void TSlgScienceReduceScienceQueueCDByItemReq::set_queueid(::google::protobuf::uint32 value) {
  set_has_queueid();
  queueid_ = value;
  // @@protoc_insertion_point(field_set:pb.TSlgScienceReduceScienceQueueCDByItemReq.QueueId)
}

// repeated .pb.TCommonReward ItemArr = 2;
inline int TSlgScienceReduceScienceQueueCDByItemReq::itemarr_size() const {
  return itemarr_.size();
}
inline void TSlgScienceReduceScienceQueueCDByItemReq::clear_itemarr() {
  itemarr_.Clear();
}
inline const ::pb::TCommonReward& TSlgScienceReduceScienceQueueCDByItemReq::itemarr(int index) const {
  // @@protoc_insertion_point(field_get:pb.TSlgScienceReduceScienceQueueCDByItemReq.ItemArr)
  return itemarr_.Get(index);
}
inline ::pb::TCommonReward* TSlgScienceReduceScienceQueueCDByItemReq::mutable_itemarr(int index) {
  // @@protoc_insertion_point(field_mutable:pb.TSlgScienceReduceScienceQueueCDByItemReq.ItemArr)
  return itemarr_.Mutable(index);
}
inline ::pb::TCommonReward* TSlgScienceReduceScienceQueueCDByItemReq::add_itemarr() {
  // @@protoc_insertion_point(field_add:pb.TSlgScienceReduceScienceQueueCDByItemReq.ItemArr)
  return itemarr_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::TCommonReward >&
TSlgScienceReduceScienceQueueCDByItemReq::itemarr() const {
  // @@protoc_insertion_point(field_list:pb.TSlgScienceReduceScienceQueueCDByItemReq.ItemArr)
  return itemarr_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb::TCommonReward >*
TSlgScienceReduceScienceQueueCDByItemReq::mutable_itemarr() {
  // @@protoc_insertion_point(field_mutable_list:pb.TSlgScienceReduceScienceQueueCDByItemReq.ItemArr)
  return &itemarr_;
}

// -------------------------------------------------------------------

// TSlgScienceReduceScienceQueueAllCDByItemReq

// optional uint32 QueueId = 1;
inline bool TSlgScienceReduceScienceQueueAllCDByItemReq::has_queueid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TSlgScienceReduceScienceQueueAllCDByItemReq::set_has_queueid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TSlgScienceReduceScienceQueueAllCDByItemReq::clear_has_queueid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TSlgScienceReduceScienceQueueAllCDByItemReq::clear_queueid() {
  queueid_ = 0u;
  clear_has_queueid();
}
inline ::google::protobuf::uint32 TSlgScienceReduceScienceQueueAllCDByItemReq::queueid() const {
  // @@protoc_insertion_point(field_get:pb.TSlgScienceReduceScienceQueueAllCDByItemReq.QueueId)
  return queueid_;
}
inline void TSlgScienceReduceScienceQueueAllCDByItemReq::set_queueid(::google::protobuf::uint32 value) {
  set_has_queueid();
  queueid_ = value;
  // @@protoc_insertion_point(field_set:pb.TSlgScienceReduceScienceQueueAllCDByItemReq.QueueId)
}

// -------------------------------------------------------------------

// TSlgScienceReduceScienceQueueCDByGoldReq

// optional uint32 QueueId = 1;
inline bool TSlgScienceReduceScienceQueueCDByGoldReq::has_queueid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TSlgScienceReduceScienceQueueCDByGoldReq::set_has_queueid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TSlgScienceReduceScienceQueueCDByGoldReq::clear_has_queueid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TSlgScienceReduceScienceQueueCDByGoldReq::clear_queueid() {
  queueid_ = 0u;
  clear_has_queueid();
}
inline ::google::protobuf::uint32 TSlgScienceReduceScienceQueueCDByGoldReq::queueid() const {
  // @@protoc_insertion_point(field_get:pb.TSlgScienceReduceScienceQueueCDByGoldReq.QueueId)
  return queueid_;
}
inline void TSlgScienceReduceScienceQueueCDByGoldReq::set_queueid(::google::protobuf::uint32 value) {
  set_has_queueid();
  queueid_ = value;
  // @@protoc_insertion_point(field_set:pb.TSlgScienceReduceScienceQueueCDByGoldReq.QueueId)
}

// optional uint32 GoldNum = 2;
inline bool TSlgScienceReduceScienceQueueCDByGoldReq::has_goldnum() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TSlgScienceReduceScienceQueueCDByGoldReq::set_has_goldnum() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TSlgScienceReduceScienceQueueCDByGoldReq::clear_has_goldnum() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TSlgScienceReduceScienceQueueCDByGoldReq::clear_goldnum() {
  goldnum_ = 0u;
  clear_has_goldnum();
}
inline ::google::protobuf::uint32 TSlgScienceReduceScienceQueueCDByGoldReq::goldnum() const {
  // @@protoc_insertion_point(field_get:pb.TSlgScienceReduceScienceQueueCDByGoldReq.GoldNum)
  return goldnum_;
}
inline void TSlgScienceReduceScienceQueueCDByGoldReq::set_goldnum(::google::protobuf::uint32 value) {
  set_has_goldnum();
  goldnum_ = value;
  // @@protoc_insertion_point(field_set:pb.TSlgScienceReduceScienceQueueCDByGoldReq.GoldNum)
}

// -------------------------------------------------------------------

// TSlgScienceReduceScienceQueueAllCDByGoldReq

// optional uint32 QueueId = 1;
inline bool TSlgScienceReduceScienceQueueAllCDByGoldReq::has_queueid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TSlgScienceReduceScienceQueueAllCDByGoldReq::set_has_queueid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TSlgScienceReduceScienceQueueAllCDByGoldReq::clear_has_queueid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TSlgScienceReduceScienceQueueAllCDByGoldReq::clear_queueid() {
  queueid_ = 0u;
  clear_has_queueid();
}
inline ::google::protobuf::uint32 TSlgScienceReduceScienceQueueAllCDByGoldReq::queueid() const {
  // @@protoc_insertion_point(field_get:pb.TSlgScienceReduceScienceQueueAllCDByGoldReq.QueueId)
  return queueid_;
}
inline void TSlgScienceReduceScienceQueueAllCDByGoldReq::set_queueid(::google::protobuf::uint32 value) {
  set_has_queueid();
  queueid_ = value;
  // @@protoc_insertion_point(field_set:pb.TSlgScienceReduceScienceQueueAllCDByGoldReq.QueueId)
}

// -------------------------------------------------------------------

// TSlgScienceReduceScienceCDByGuildHelpReq

// optional uint32 QueueId = 1;
inline bool TSlgScienceReduceScienceCDByGuildHelpReq::has_queueid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TSlgScienceReduceScienceCDByGuildHelpReq::set_has_queueid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TSlgScienceReduceScienceCDByGuildHelpReq::clear_has_queueid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TSlgScienceReduceScienceCDByGuildHelpReq::clear_queueid() {
  queueid_ = 0u;
  clear_has_queueid();
}
inline ::google::protobuf::uint32 TSlgScienceReduceScienceCDByGuildHelpReq::queueid() const {
  // @@protoc_insertion_point(field_get:pb.TSlgScienceReduceScienceCDByGuildHelpReq.QueueId)
  return queueid_;
}
inline void TSlgScienceReduceScienceCDByGuildHelpReq::set_queueid(::google::protobuf::uint32 value) {
  set_has_queueid();
  queueid_ = value;
  // @@protoc_insertion_point(field_set:pb.TSlgScienceReduceScienceCDByGuildHelpReq.QueueId)
}

// -------------------------------------------------------------------

// TSlgScienceReduceScienceCDFreeReq

// optional uint32 QueueId = 1;
inline bool TSlgScienceReduceScienceCDFreeReq::has_queueid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TSlgScienceReduceScienceCDFreeReq::set_has_queueid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TSlgScienceReduceScienceCDFreeReq::clear_has_queueid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TSlgScienceReduceScienceCDFreeReq::clear_queueid() {
  queueid_ = 0u;
  clear_has_queueid();
}
inline ::google::protobuf::uint32 TSlgScienceReduceScienceCDFreeReq::queueid() const {
  // @@protoc_insertion_point(field_get:pb.TSlgScienceReduceScienceCDFreeReq.QueueId)
  return queueid_;
}
inline void TSlgScienceReduceScienceCDFreeReq::set_queueid(::google::protobuf::uint32 value) {
  set_has_queueid();
  queueid_ = value;
  // @@protoc_insertion_point(field_set:pb.TSlgScienceReduceScienceCDFreeReq.QueueId)
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace pb

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_net_2fSlgScience_2eproto__INCLUDED
