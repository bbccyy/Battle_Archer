// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: net/PlatformArena.proto

#ifndef PROTOBUF_net_2fPlatformArena_2eproto__INCLUDED
#define PROTOBUF_net_2fPlatformArena_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "net/User.pb.h"
#include "net/CommonReward.pb.h"
// @@protoc_insertion_point(includes)

namespace pb {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_net_2fPlatformArena_2eproto();
void protobuf_AssignDesc_net_2fPlatformArena_2eproto();
void protobuf_ShutdownFile_net_2fPlatformArena_2eproto();

class TPlatformArenaExpectProcess;
class TPlatformArenaActualProcess;
class TPlatformArenaGetBaseInfoRsp;
class TPlatformArenaSignRsp;
class TPlatformArenaData;
class TPlatformArenaGetArenaInfoRsp;
class TPlatformArenaChallengeReq;
class TPlatformArenaChallengeRsp;
class THistorySeasonData;
class TPlatformArenaGetHistorySeasonRsp;
class TPlatformArenaGetSeasonPmRankReq;
class TSeasonPmRankData;
class TPlatformArenaGetSeasonPmRankRsp;
class TPersonalReportData;
class TPlatformArenaGetPersonalReport;
class TFoeUserData;
class TPlatformArenaGetFoeInfoRsp;
class TBattlePosInfo;
class TPlatformArenaFmtInfo;
class TPlatformArenaGetFmtRsp;
class TPlatformArenaSetFmtReq;
class TPlatformArenaMatchData;
class TPlatformArenaGetPmMatchInfoReq;
class TPlatformArenaGetPmMatchInfoRsp;
class TGuessRecordData;
class TPlatformArenaGetGuessRecordRsp;
class TPlatformArenaGuessiongReq;
class TPlatformArenaGetGuessingRewardReq;
class TPlatformArenaGetGuessingRewardRsp;
class TGuessRecordNotify;
class TPlatformArenaGiveThumbReq;
class TPlatformArenaGiveThumbRsp;
class TPlatformArenaBattleHeroStatus;
class TPlatformArenaPreviewBattleResult;
class TPlatformArenaGetBattlePreviewReq;
class TPlatformArenaGetBattlePreviewRsp;
class TPlatformArenaFormationInfo;
class TPlatformArenaGetFormationReq;
class TPlatformArenaGetFormationRsp;
class TArenaBattleReportData;
class TPlatformArenaGetArenaBattleReportRsp;
class TPlatformArenaGetPeakInfoReq;
class TPlatformArenaPeakData;
class TPlatformArenaGetPeakInfoRsp;
class TPlatformArenaBeAtkNotify;
class TPlatformArenaLeaveMessageReq;
class TPlatformArenaDelLeaveMessageReq;
class TPlatformArenaThumbLeaveMessageReq;
class TPlatformArenaThumbLeaveMessageRsp;
class TPlatformArenaGetLeaveMessageLstReq;
class TPlatformArenaLeaveMessageData;
class TPlatformArenaGetLeaveMessageLstRsp;

enum EPlatformArenaStage {
  EPLATFORMARENA_STAGE_INVALID = 0,
  EPLATFORMARENA_STAGE_SIGN = 1,
  EPLATFORMARENA_STAGE_GROUP = 2,
  EPLATFORMARENA_STAGE_AUDITION = 3,
  EPLATFORMARENA_STAGE_PROMOTION_PREPAREFMT = 4,
  EPLATFORMARENA_STAGE_PROMOTION_LOCKFMT = 5,
  EPLATFORMARENA_STAGE_PROMOTION_FIGHT = 6,
  EPLATFORMARENA_STAGE_SHOW = 100
};
bool EPlatformArenaStage_IsValid(int value);
const EPlatformArenaStage EPlatformArenaStage_MIN = EPLATFORMARENA_STAGE_INVALID;
const EPlatformArenaStage EPlatformArenaStage_MAX = EPLATFORMARENA_STAGE_SHOW;
const int EPlatformArenaStage_ARRAYSIZE = EPlatformArenaStage_MAX + 1;

const ::google::protobuf::EnumDescriptor* EPlatformArenaStage_descriptor();
inline const ::std::string& EPlatformArenaStage_Name(EPlatformArenaStage value) {
  return ::google::protobuf::internal::NameOfEnum(
    EPlatformArenaStage_descriptor(), value);
}
inline bool EPlatformArenaStage_Parse(
    const ::std::string& name, EPlatformArenaStage* value) {
  return ::google::protobuf::internal::ParseNamedEnum<EPlatformArenaStage>(
    EPlatformArenaStage_descriptor(), name, value);
}
// ===================================================================

/*FOR2LUA
<Record>
	<name>TPlatformArenaExpectProcess</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/PlatformArena.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TPlatformArenaExpectProcess : public ::google::protobuf::Message {
 public:
  TPlatformArenaExpectProcess();
  virtual ~TPlatformArenaExpectProcess();

  TPlatformArenaExpectProcess(const TPlatformArenaExpectProcess& from);

  inline TPlatformArenaExpectProcess& operator=(const TPlatformArenaExpectProcess& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TPlatformArenaExpectProcess& default_instance();

  void Swap(TPlatformArenaExpectProcess* other);

  // implements Message ----------------------------------------------

  TPlatformArenaExpectProcess* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TPlatformArenaExpectProcess& from);
  void MergeFrom(const TPlatformArenaExpectProcess& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 Round = 1;
  inline bool has_round() const;
  inline void clear_round();
  static const int kRoundFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TPlatformArenaExpectProcess</name>
  	<Function>
  		<name>round</name>
  		<replaceName>Round</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_round</name>
  		<replaceName>Round</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_round</name>
  		<replaceName>Round</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 round() const;
  inline void set_round(::google::protobuf::uint32 value);

  // optional .pb.EPlatformArenaStage Stage = 2;
  inline bool has_stage() const;
  inline void clear_stage();
  static const int kStageFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TPlatformArenaExpectProcess</name>
  	<Function>
  		<name>stage</name>
  		<replaceName>Stage</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_stage</name>
  		<replaceName>Stage</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_stage</name>
  		<replaceName>Stage</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::pb::EPlatformArenaStage stage() const;
  inline void set_stage(::pb::EPlatformArenaStage value);

  // optional uint64 BegTime = 3;
  inline bool has_begtime() const;
  inline void clear_begtime();
  static const int kBegTimeFieldNumber = 3;
  /*FOR2LUA
  <Record>
  	<name>TPlatformArenaExpectProcess</name>
  	<Function>
  		<name>begtime</name>
  		<replaceName>BegTime</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_begtime</name>
  		<replaceName>BegTime</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_begtime</name>
  		<replaceName>BegTime</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint64 begtime() const;
  inline void set_begtime(::google::protobuf::uint64 value);

  // optional uint64 EndTime = 4;
  inline bool has_endtime() const;
  inline void clear_endtime();
  static const int kEndTimeFieldNumber = 4;
  /*FOR2LUA
  <Record>
  	<name>TPlatformArenaExpectProcess</name>
  	<Function>
  		<name>endtime</name>
  		<replaceName>EndTime</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_endtime</name>
  		<replaceName>EndTime</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_endtime</name>
  		<replaceName>EndTime</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint64 endtime() const;
  inline void set_endtime(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:pb.TPlatformArenaExpectProcess)
 private:
  inline void set_has_round();
  inline void clear_has_round();
  inline void set_has_stage();
  inline void clear_has_stage();
  inline void set_has_begtime();
  inline void clear_has_begtime();
  inline void set_has_endtime();
  inline void clear_has_endtime();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 round_;
  int stage_;
  ::google::protobuf::uint64 begtime_;
  ::google::protobuf::uint64 endtime_;
  friend void  protobuf_AddDesc_net_2fPlatformArena_2eproto();
  friend void protobuf_AssignDesc_net_2fPlatformArena_2eproto();
  friend void protobuf_ShutdownFile_net_2fPlatformArena_2eproto();

  void InitAsDefaultInstance();
  static TPlatformArenaExpectProcess* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TPlatformArenaActualProcess</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/PlatformArena.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TPlatformArenaActualProcess : public ::google::protobuf::Message {
 public:
  TPlatformArenaActualProcess();
  virtual ~TPlatformArenaActualProcess();

  TPlatformArenaActualProcess(const TPlatformArenaActualProcess& from);

  inline TPlatformArenaActualProcess& operator=(const TPlatformArenaActualProcess& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TPlatformArenaActualProcess& default_instance();

  void Swap(TPlatformArenaActualProcess* other);

  // implements Message ----------------------------------------------

  TPlatformArenaActualProcess* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TPlatformArenaActualProcess& from);
  void MergeFrom(const TPlatformArenaActualProcess& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .pb.TPlatformArenaExpectProcess ExpectProcess = 1;
  inline bool has_expectprocess() const;
  inline void clear_expectprocess();
  static const int kExpectProcessFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TPlatformArenaActualProcess</name>
  	<Function>
  		<name>expectprocess</name>
  		<replaceName>ExpectProcess</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_expectprocess</name>
  		<replaceName>ExpectProcess</replaceName>
  		<handler>descripter = pb_set_message_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_allocated_expectprocess</name>
  		<replaceName>ExpectProcess</replaceName>
  		<handler>descripter = pb_set_message_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_expectprocess</name>
  		<replaceName>ExpectProcess</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TPlatformArenaExpectProcess& expectprocess() const;
  inline ::pb::TPlatformArenaExpectProcess* mutable_expectprocess();
  inline ::pb::TPlatformArenaExpectProcess* release_expectprocess();
  inline void set_allocated_expectprocess(::pb::TPlatformArenaExpectProcess* expectprocess);

  // optional uint64 DoneTime = 2;
  inline bool has_donetime() const;
  inline void clear_donetime();
  static const int kDoneTimeFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TPlatformArenaActualProcess</name>
  	<Function>
  		<name>donetime</name>
  		<replaceName>DoneTime</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_donetime</name>
  		<replaceName>DoneTime</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_donetime</name>
  		<replaceName>DoneTime</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint64 donetime() const;
  inline void set_donetime(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:pb.TPlatformArenaActualProcess)
 private:
  inline void set_has_expectprocess();
  inline void clear_has_expectprocess();
  inline void set_has_donetime();
  inline void clear_has_donetime();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::pb::TPlatformArenaExpectProcess* expectprocess_;
  ::google::protobuf::uint64 donetime_;
  friend void  protobuf_AddDesc_net_2fPlatformArena_2eproto();
  friend void protobuf_AssignDesc_net_2fPlatformArena_2eproto();
  friend void protobuf_ShutdownFile_net_2fPlatformArena_2eproto();

  void InitAsDefaultInstance();
  static TPlatformArenaActualProcess* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TPlatformArenaGetBaseInfoRsp</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/PlatformArena.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TPlatformArenaGetBaseInfoRsp : public ::google::protobuf::Message {
 public:
  TPlatformArenaGetBaseInfoRsp();
  virtual ~TPlatformArenaGetBaseInfoRsp();

  TPlatformArenaGetBaseInfoRsp(const TPlatformArenaGetBaseInfoRsp& from);

  inline TPlatformArenaGetBaseInfoRsp& operator=(const TPlatformArenaGetBaseInfoRsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TPlatformArenaGetBaseInfoRsp& default_instance();

  void Swap(TPlatformArenaGetBaseInfoRsp* other);

  // implements Message ----------------------------------------------

  TPlatformArenaGetBaseInfoRsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TPlatformArenaGetBaseInfoRsp& from);
  void MergeFrom(const TPlatformArenaGetBaseInfoRsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .pb.TPlatformArenaExpectProcess ArrExpectProcess = 1;
  inline int arrexpectprocess_size() const;
  inline void clear_arrexpectprocess();
  static const int kArrExpectProcessFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TPlatformArenaGetBaseInfoRsp</name>
  	<Function>
  		<name>arrexpectprocess</name>
  		<replaceName>ArrExpectProcess</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_arrexpectprocess</name>
  		<replaceName>ArrExpectProcess</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_arrexpectprocess</name>
  		<replaceName>ArrExpectProcess</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_arrexpectprocess</name>
  		<replaceName>ArrExpectProcess</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>arrexpectprocess_size</name>
  		<replaceName>ArrExpectProcess</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TPlatformArenaExpectProcess& arrexpectprocess(int index) const;
  inline ::pb::TPlatformArenaExpectProcess* mutable_arrexpectprocess(int index);
  inline ::pb::TPlatformArenaExpectProcess* add_arrexpectprocess();
  inline const ::google::protobuf::RepeatedPtrField< ::pb::TPlatformArenaExpectProcess >&
      arrexpectprocess() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb::TPlatformArenaExpectProcess >*
      mutable_arrexpectprocess();

  // optional bool FuncOpen = 2;
  inline bool has_funcopen() const;
  inline void clear_funcopen();
  static const int kFuncOpenFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TPlatformArenaGetBaseInfoRsp</name>
  	<Function>
  		<name>funcopen</name>
  		<replaceName>FuncOpen</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_funcopen</name>
  		<replaceName>FuncOpen</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_funcopen</name>
  		<replaceName>FuncOpen</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline bool funcopen() const;
  inline void set_funcopen(bool value);

  // optional .pb.TPlatformArenaActualProcess ActualProcess = 3;
  inline bool has_actualprocess() const;
  inline void clear_actualprocess();
  static const int kActualProcessFieldNumber = 3;
  /*FOR2LUA
  <Record>
  	<name>TPlatformArenaGetBaseInfoRsp</name>
  	<Function>
  		<name>actualprocess</name>
  		<replaceName>ActualProcess</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_actualprocess</name>
  		<replaceName>ActualProcess</replaceName>
  		<handler>descripter = pb_set_message_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_allocated_actualprocess</name>
  		<replaceName>ActualProcess</replaceName>
  		<handler>descripter = pb_set_message_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_actualprocess</name>
  		<replaceName>ActualProcess</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TPlatformArenaActualProcess& actualprocess() const;
  inline ::pb::TPlatformArenaActualProcess* mutable_actualprocess();
  inline ::pb::TPlatformArenaActualProcess* release_actualprocess();
  inline void set_allocated_actualprocess(::pb::TPlatformArenaActualProcess* actualprocess);

  // optional uint32 SeasonId = 4;
  inline bool has_seasonid() const;
  inline void clear_seasonid();
  static const int kSeasonIdFieldNumber = 4;
  /*FOR2LUA
  <Record>
  	<name>TPlatformArenaGetBaseInfoRsp</name>
  	<Function>
  		<name>seasonid</name>
  		<replaceName>SeasonId</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_seasonid</name>
  		<replaceName>SeasonId</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_seasonid</name>
  		<replaceName>SeasonId</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 seasonid() const;
  inline void set_seasonid(::google::protobuf::uint32 value);

  // optional uint32 GroupId = 5;
  inline bool has_groupid() const;
  inline void clear_groupid();
  static const int kGroupIdFieldNumber = 5;
  /*FOR2LUA
  <Record>
  	<name>TPlatformArenaGetBaseInfoRsp</name>
  	<Function>
  		<name>groupid</name>
  		<replaceName>GroupId</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_groupid</name>
  		<replaceName>GroupId</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_groupid</name>
  		<replaceName>GroupId</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 groupid() const;
  inline void set_groupid(::google::protobuf::uint32 value);

  // optional uint32 TodayThumbNum = 6;
  inline bool has_todaythumbnum() const;
  inline void clear_todaythumbnum();
  static const int kTodayThumbNumFieldNumber = 6;
  /*FOR2LUA
  <Record>
  	<name>TPlatformArenaGetBaseInfoRsp</name>
  	<Function>
  		<name>todaythumbnum</name>
  		<replaceName>TodayThumbNum</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_todaythumbnum</name>
  		<replaceName>TodayThumbNum</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_todaythumbnum</name>
  		<replaceName>TodayThumbNum</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 todaythumbnum() const;
  inline void set_todaythumbnum(::google::protobuf::uint32 value);

  // optional uint64 CoolTime = 7;
  inline bool has_cooltime() const;
  inline void clear_cooltime();
  static const int kCoolTimeFieldNumber = 7;
  /*FOR2LUA
  <Record>
  	<name>TPlatformArenaGetBaseInfoRsp</name>
  	<Function>
  		<name>cooltime</name>
  		<replaceName>CoolTime</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_cooltime</name>
  		<replaceName>CoolTime</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_cooltime</name>
  		<replaceName>CoolTime</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint64 cooltime() const;
  inline void set_cooltime(::google::protobuf::uint64 value);

  // optional string SceneId = 8;
  inline bool has_sceneid() const;
  inline void clear_sceneid();
  static const int kSceneIdFieldNumber = 8;
  /*FOR2LUA
  <Record>
  	<name>TPlatformArenaGetBaseInfoRsp</name>
  	<Function>
  		<name>sceneid</name>
  		<replaceName>SceneId</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_sceneid</name>
  		<replaceName>SceneId</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_sceneid</name>
  		<replaceName>SceneId</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::std::string& sceneid() const;
  inline void set_sceneid(const ::std::string& value);
  inline void set_sceneid(const char* value);
  inline void set_sceneid(const char* value, size_t size);
  inline ::std::string* mutable_sceneid();
  inline ::std::string* release_sceneid();
  inline void set_allocated_sceneid(::std::string* sceneid);

  // optional uint64 SignTime = 9;
  inline bool has_signtime() const;
  inline void clear_signtime();
  static const int kSignTimeFieldNumber = 9;
  /*FOR2LUA
  <Record>
  	<name>TPlatformArenaGetBaseInfoRsp</name>
  	<Function>
  		<name>signtime</name>
  		<replaceName>SignTime</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_signtime</name>
  		<replaceName>SignTime</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_signtime</name>
  		<replaceName>SignTime</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint64 signtime() const;
  inline void set_signtime(::google::protobuf::uint64 value);

  // optional uint64 MaxFightForce = 10;
  inline bool has_maxfightforce() const;
  inline void clear_maxfightforce();
  static const int kMaxFightForceFieldNumber = 10;
  /*FOR2LUA
  <Record>
  	<name>TPlatformArenaGetBaseInfoRsp</name>
  	<Function>
  		<name>maxfightforce</name>
  		<replaceName>MaxFightForce</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_maxfightforce</name>
  		<replaceName>MaxFightForce</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_maxfightforce</name>
  		<replaceName>MaxFightForce</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint64 maxfightforce() const;
  inline void set_maxfightforce(::google::protobuf::uint64 value);

  // optional uint64 NextSeasonStartTime = 11;
  inline bool has_nextseasonstarttime() const;
  inline void clear_nextseasonstarttime();
  static const int kNextSeasonStartTimeFieldNumber = 11;
  /*FOR2LUA
  <Record>
  	<name>TPlatformArenaGetBaseInfoRsp</name>
  	<Function>
  		<name>nextseasonstarttime</name>
  		<replaceName>NextSeasonStartTime</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_nextseasonstarttime</name>
  		<replaceName>NextSeasonStartTime</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_nextseasonstarttime</name>
  		<replaceName>NextSeasonStartTime</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint64 nextseasonstarttime() const;
  inline void set_nextseasonstarttime(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:pb.TPlatformArenaGetBaseInfoRsp)
 private:
  inline void set_has_funcopen();
  inline void clear_has_funcopen();
  inline void set_has_actualprocess();
  inline void clear_has_actualprocess();
  inline void set_has_seasonid();
  inline void clear_has_seasonid();
  inline void set_has_groupid();
  inline void clear_has_groupid();
  inline void set_has_todaythumbnum();
  inline void clear_has_todaythumbnum();
  inline void set_has_cooltime();
  inline void clear_has_cooltime();
  inline void set_has_sceneid();
  inline void clear_has_sceneid();
  inline void set_has_signtime();
  inline void clear_has_signtime();
  inline void set_has_maxfightforce();
  inline void clear_has_maxfightforce();
  inline void set_has_nextseasonstarttime();
  inline void clear_has_nextseasonstarttime();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::pb::TPlatformArenaExpectProcess > arrexpectprocess_;
  ::pb::TPlatformArenaActualProcess* actualprocess_;
  bool funcopen_;
  ::google::protobuf::uint32 seasonid_;
  ::google::protobuf::uint32 groupid_;
  ::google::protobuf::uint32 todaythumbnum_;
  ::google::protobuf::uint64 cooltime_;
  ::std::string* sceneid_;
  ::google::protobuf::uint64 signtime_;
  ::google::protobuf::uint64 maxfightforce_;
  ::google::protobuf::uint64 nextseasonstarttime_;
  friend void  protobuf_AddDesc_net_2fPlatformArena_2eproto();
  friend void protobuf_AssignDesc_net_2fPlatformArena_2eproto();
  friend void protobuf_ShutdownFile_net_2fPlatformArena_2eproto();

  void InitAsDefaultInstance();
  static TPlatformArenaGetBaseInfoRsp* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TPlatformArenaSignRsp</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/PlatformArena.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TPlatformArenaSignRsp : public ::google::protobuf::Message {
 public:
  TPlatformArenaSignRsp();
  virtual ~TPlatformArenaSignRsp();

  TPlatformArenaSignRsp(const TPlatformArenaSignRsp& from);

  inline TPlatformArenaSignRsp& operator=(const TPlatformArenaSignRsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TPlatformArenaSignRsp& default_instance();

  void Swap(TPlatformArenaSignRsp* other);

  // implements Message ----------------------------------------------

  TPlatformArenaSignRsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TPlatformArenaSignRsp& from);
  void MergeFrom(const TPlatformArenaSignRsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint64 SignTime = 1;
  inline bool has_signtime() const;
  inline void clear_signtime();
  static const int kSignTimeFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TPlatformArenaSignRsp</name>
  	<Function>
  		<name>signtime</name>
  		<replaceName>SignTime</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_signtime</name>
  		<replaceName>SignTime</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_signtime</name>
  		<replaceName>SignTime</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint64 signtime() const;
  inline void set_signtime(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:pb.TPlatformArenaSignRsp)
 private:
  inline void set_has_signtime();
  inline void clear_has_signtime();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint64 signtime_;
  friend void  protobuf_AddDesc_net_2fPlatformArena_2eproto();
  friend void protobuf_AssignDesc_net_2fPlatformArena_2eproto();
  friend void protobuf_ShutdownFile_net_2fPlatformArena_2eproto();

  void InitAsDefaultInstance();
  static TPlatformArenaSignRsp* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TPlatformArenaData</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/PlatformArena.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TPlatformArenaData : public ::google::protobuf::Message {
 public:
  TPlatformArenaData();
  virtual ~TPlatformArenaData();

  TPlatformArenaData(const TPlatformArenaData& from);

  inline TPlatformArenaData& operator=(const TPlatformArenaData& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TPlatformArenaData& default_instance();

  void Swap(TPlatformArenaData* other);

  // implements Message ----------------------------------------------

  TPlatformArenaData* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TPlatformArenaData& from);
  void MergeFrom(const TPlatformArenaData& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 GroupId = 1;
  inline bool has_groupid() const;
  inline void clear_groupid();
  static const int kGroupIdFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TPlatformArenaData</name>
  	<Function>
  		<name>groupid</name>
  		<replaceName>GroupId</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_groupid</name>
  		<replaceName>GroupId</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_groupid</name>
  		<replaceName>GroupId</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 groupid() const;
  inline void set_groupid(::google::protobuf::uint32 value);

  // optional uint32 ArenaTeamId = 2;
  inline bool has_arenateamid() const;
  inline void clear_arenateamid();
  static const int kArenaTeamIdFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TPlatformArenaData</name>
  	<Function>
  		<name>arenateamid</name>
  		<replaceName>ArenaTeamId</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_arenateamid</name>
  		<replaceName>ArenaTeamId</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_arenateamid</name>
  		<replaceName>ArenaTeamId</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 arenateamid() const;
  inline void set_arenateamid(::google::protobuf::uint32 value);

  // optional uint32 ArenaId = 3;
  inline bool has_arenaid() const;
  inline void clear_arenaid();
  static const int kArenaIdFieldNumber = 3;
  /*FOR2LUA
  <Record>
  	<name>TPlatformArenaData</name>
  	<Function>
  		<name>arenaid</name>
  		<replaceName>ArenaId</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_arenaid</name>
  		<replaceName>ArenaId</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_arenaid</name>
  		<replaceName>ArenaId</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 arenaid() const;
  inline void set_arenaid(::google::protobuf::uint32 value);

  // optional uint32 ArenaType = 4;
  inline bool has_arenatype() const;
  inline void clear_arenatype();
  static const int kArenaTypeFieldNumber = 4;
  /*FOR2LUA
  <Record>
  	<name>TPlatformArenaData</name>
  	<Function>
  		<name>arenatype</name>
  		<replaceName>ArenaType</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_arenatype</name>
  		<replaceName>ArenaType</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_arenatype</name>
  		<replaceName>ArenaType</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 arenatype() const;
  inline void set_arenatype(::google::protobuf::uint32 value);

  // optional .pb.TUserSimpleInfo WinUserInfo = 5;
  inline bool has_winuserinfo() const;
  inline void clear_winuserinfo();
  static const int kWinUserInfoFieldNumber = 5;
  /*FOR2LUA
  <Record>
  	<name>TPlatformArenaData</name>
  	<Function>
  		<name>winuserinfo</name>
  		<replaceName>WinUserInfo</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_winuserinfo</name>
  		<replaceName>WinUserInfo</replaceName>
  		<handler>descripter = pb_set_message_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_allocated_winuserinfo</name>
  		<replaceName>WinUserInfo</replaceName>
  		<handler>descripter = pb_set_message_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_winuserinfo</name>
  		<replaceName>WinUserInfo</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TUserSimpleInfo& winuserinfo() const;
  inline ::pb::TUserSimpleInfo* mutable_winuserinfo();
  inline ::pb::TUserSimpleInfo* release_winuserinfo();
  inline void set_allocated_winuserinfo(::pb::TUserSimpleInfo* winuserinfo);

  // @@protoc_insertion_point(class_scope:pb.TPlatformArenaData)
 private:
  inline void set_has_groupid();
  inline void clear_has_groupid();
  inline void set_has_arenateamid();
  inline void clear_has_arenateamid();
  inline void set_has_arenaid();
  inline void clear_has_arenaid();
  inline void set_has_arenatype();
  inline void clear_has_arenatype();
  inline void set_has_winuserinfo();
  inline void clear_has_winuserinfo();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 groupid_;
  ::google::protobuf::uint32 arenateamid_;
  ::google::protobuf::uint32 arenaid_;
  ::google::protobuf::uint32 arenatype_;
  ::pb::TUserSimpleInfo* winuserinfo_;
  friend void  protobuf_AddDesc_net_2fPlatformArena_2eproto();
  friend void protobuf_AssignDesc_net_2fPlatformArena_2eproto();
  friend void protobuf_ShutdownFile_net_2fPlatformArena_2eproto();

  void InitAsDefaultInstance();
  static TPlatformArenaData* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TPlatformArenaGetArenaInfoRsp</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/PlatformArena.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TPlatformArenaGetArenaInfoRsp : public ::google::protobuf::Message {
 public:
  TPlatformArenaGetArenaInfoRsp();
  virtual ~TPlatformArenaGetArenaInfoRsp();

  TPlatformArenaGetArenaInfoRsp(const TPlatformArenaGetArenaInfoRsp& from);

  inline TPlatformArenaGetArenaInfoRsp& operator=(const TPlatformArenaGetArenaInfoRsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TPlatformArenaGetArenaInfoRsp& default_instance();

  void Swap(TPlatformArenaGetArenaInfoRsp* other);

  // implements Message ----------------------------------------------

  TPlatformArenaGetArenaInfoRsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TPlatformArenaGetArenaInfoRsp& from);
  void MergeFrom(const TPlatformArenaGetArenaInfoRsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .pb.TPlatformArenaData ArrArenaData = 1;
  inline int arrarenadata_size() const;
  inline void clear_arrarenadata();
  static const int kArrArenaDataFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TPlatformArenaGetArenaInfoRsp</name>
  	<Function>
  		<name>arrarenadata</name>
  		<replaceName>ArrArenaData</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_arrarenadata</name>
  		<replaceName>ArrArenaData</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_arrarenadata</name>
  		<replaceName>ArrArenaData</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_arrarenadata</name>
  		<replaceName>ArrArenaData</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>arrarenadata_size</name>
  		<replaceName>ArrArenaData</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TPlatformArenaData& arrarenadata(int index) const;
  inline ::pb::TPlatformArenaData* mutable_arrarenadata(int index);
  inline ::pb::TPlatformArenaData* add_arrarenadata();
  inline const ::google::protobuf::RepeatedPtrField< ::pb::TPlatformArenaData >&
      arrarenadata() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb::TPlatformArenaData >*
      mutable_arrarenadata();

  // @@protoc_insertion_point(class_scope:pb.TPlatformArenaGetArenaInfoRsp)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::pb::TPlatformArenaData > arrarenadata_;
  friend void  protobuf_AddDesc_net_2fPlatformArena_2eproto();
  friend void protobuf_AssignDesc_net_2fPlatformArena_2eproto();
  friend void protobuf_ShutdownFile_net_2fPlatformArena_2eproto();

  void InitAsDefaultInstance();
  static TPlatformArenaGetArenaInfoRsp* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TPlatformArenaChallengeReq</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/PlatformArena.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TPlatformArenaChallengeReq : public ::google::protobuf::Message {
 public:
  TPlatformArenaChallengeReq();
  virtual ~TPlatformArenaChallengeReq();

  TPlatformArenaChallengeReq(const TPlatformArenaChallengeReq& from);

  inline TPlatformArenaChallengeReq& operator=(const TPlatformArenaChallengeReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TPlatformArenaChallengeReq& default_instance();

  void Swap(TPlatformArenaChallengeReq* other);

  // implements Message ----------------------------------------------

  TPlatformArenaChallengeReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TPlatformArenaChallengeReq& from);
  void MergeFrom(const TPlatformArenaChallengeReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 GroupId = 1;
  inline bool has_groupid() const;
  inline void clear_groupid();
  static const int kGroupIdFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TPlatformArenaChallengeReq</name>
  	<Function>
  		<name>groupid</name>
  		<replaceName>GroupId</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_groupid</name>
  		<replaceName>GroupId</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_groupid</name>
  		<replaceName>GroupId</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 groupid() const;
  inline void set_groupid(::google::protobuf::uint32 value);

  // optional uint32 ArenaId = 2;
  inline bool has_arenaid() const;
  inline void clear_arenaid();
  static const int kArenaIdFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TPlatformArenaChallengeReq</name>
  	<Function>
  		<name>arenaid</name>
  		<replaceName>ArenaId</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_arenaid</name>
  		<replaceName>ArenaId</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_arenaid</name>
  		<replaceName>ArenaId</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 arenaid() const;
  inline void set_arenaid(::google::protobuf::uint32 value);

  // optional uint64 Uid = 3;
  inline bool has_uid() const;
  inline void clear_uid();
  static const int kUidFieldNumber = 3;
  /*FOR2LUA
  <Record>
  	<name>TPlatformArenaChallengeReq</name>
  	<Function>
  		<name>uid</name>
  		<replaceName>Uid</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_uid</name>
  		<replaceName>Uid</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_uid</name>
  		<replaceName>Uid</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint64 uid() const;
  inline void set_uid(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:pb.TPlatformArenaChallengeReq)
 private:
  inline void set_has_groupid();
  inline void clear_has_groupid();
  inline void set_has_arenaid();
  inline void clear_has_arenaid();
  inline void set_has_uid();
  inline void clear_has_uid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 groupid_;
  ::google::protobuf::uint32 arenaid_;
  ::google::protobuf::uint64 uid_;
  friend void  protobuf_AddDesc_net_2fPlatformArena_2eproto();
  friend void protobuf_AssignDesc_net_2fPlatformArena_2eproto();
  friend void protobuf_ShutdownFile_net_2fPlatformArena_2eproto();

  void InitAsDefaultInstance();
  static TPlatformArenaChallengeReq* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TPlatformArenaChallengeRsp</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/PlatformArena.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TPlatformArenaChallengeRsp : public ::google::protobuf::Message {
 public:
  TPlatformArenaChallengeRsp();
  virtual ~TPlatformArenaChallengeRsp();

  TPlatformArenaChallengeRsp(const TPlatformArenaChallengeRsp& from);

  inline TPlatformArenaChallengeRsp& operator=(const TPlatformArenaChallengeRsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TPlatformArenaChallengeRsp& default_instance();

  void Swap(TPlatformArenaChallengeRsp* other);

  // implements Message ----------------------------------------------

  TPlatformArenaChallengeRsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TPlatformArenaChallengeRsp& from);
  void MergeFrom(const TPlatformArenaChallengeRsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 Result = 1;
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TPlatformArenaChallengeRsp</name>
  	<Function>
  		<name>result</name>
  		<replaceName>Result</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_result</name>
  		<replaceName>Result</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_result</name>
  		<replaceName>Result</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 result() const;
  inline void set_result(::google::protobuf::uint32 value);

  // optional uint64 CoolTime = 2;
  inline bool has_cooltime() const;
  inline void clear_cooltime();
  static const int kCoolTimeFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TPlatformArenaChallengeRsp</name>
  	<Function>
  		<name>cooltime</name>
  		<replaceName>CoolTime</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_cooltime</name>
  		<replaceName>CoolTime</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_cooltime</name>
  		<replaceName>CoolTime</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint64 cooltime() const;
  inline void set_cooltime(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:pb.TPlatformArenaChallengeRsp)
 private:
  inline void set_has_result();
  inline void clear_has_result();
  inline void set_has_cooltime();
  inline void clear_has_cooltime();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint64 cooltime_;
  ::google::protobuf::uint32 result_;
  friend void  protobuf_AddDesc_net_2fPlatformArena_2eproto();
  friend void protobuf_AssignDesc_net_2fPlatformArena_2eproto();
  friend void protobuf_ShutdownFile_net_2fPlatformArena_2eproto();

  void InitAsDefaultInstance();
  static TPlatformArenaChallengeRsp* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>THistorySeasonData</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/PlatformArena.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class THistorySeasonData : public ::google::protobuf::Message {
 public:
  THistorySeasonData();
  virtual ~THistorySeasonData();

  THistorySeasonData(const THistorySeasonData& from);

  inline THistorySeasonData& operator=(const THistorySeasonData& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const THistorySeasonData& default_instance();

  void Swap(THistorySeasonData* other);

  // implements Message ----------------------------------------------

  THistorySeasonData* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const THistorySeasonData& from);
  void MergeFrom(const THistorySeasonData& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 SeasonId = 1;
  inline bool has_seasonid() const;
  inline void clear_seasonid();
  static const int kSeasonIdFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>THistorySeasonData</name>
  	<Function>
  		<name>seasonid</name>
  		<replaceName>SeasonId</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_seasonid</name>
  		<replaceName>SeasonId</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_seasonid</name>
  		<replaceName>SeasonId</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 seasonid() const;
  inline void set_seasonid(::google::protobuf::uint32 value);

  // optional uint64 StartTime = 2;
  inline bool has_starttime() const;
  inline void clear_starttime();
  static const int kStartTimeFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>THistorySeasonData</name>
  	<Function>
  		<name>starttime</name>
  		<replaceName>StartTime</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_starttime</name>
  		<replaceName>StartTime</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_starttime</name>
  		<replaceName>StartTime</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint64 starttime() const;
  inline void set_starttime(::google::protobuf::uint64 value);

  // optional uint64 EndTime = 3;
  inline bool has_endtime() const;
  inline void clear_endtime();
  static const int kEndTimeFieldNumber = 3;
  /*FOR2LUA
  <Record>
  	<name>THistorySeasonData</name>
  	<Function>
  		<name>endtime</name>
  		<replaceName>EndTime</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_endtime</name>
  		<replaceName>EndTime</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_endtime</name>
  		<replaceName>EndTime</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint64 endtime() const;
  inline void set_endtime(::google::protobuf::uint64 value);

  // optional uint32 GroupNum = 4;
  inline bool has_groupnum() const;
  inline void clear_groupnum();
  static const int kGroupNumFieldNumber = 4;
  /*FOR2LUA
  <Record>
  	<name>THistorySeasonData</name>
  	<Function>
  		<name>groupnum</name>
  		<replaceName>GroupNum</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_groupnum</name>
  		<replaceName>GroupNum</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_groupnum</name>
  		<replaceName>GroupNum</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 groupnum() const;
  inline void set_groupnum(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:pb.THistorySeasonData)
 private:
  inline void set_has_seasonid();
  inline void clear_has_seasonid();
  inline void set_has_starttime();
  inline void clear_has_starttime();
  inline void set_has_endtime();
  inline void clear_has_endtime();
  inline void set_has_groupnum();
  inline void clear_has_groupnum();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint64 starttime_;
  ::google::protobuf::uint32 seasonid_;
  ::google::protobuf::uint32 groupnum_;
  ::google::protobuf::uint64 endtime_;
  friend void  protobuf_AddDesc_net_2fPlatformArena_2eproto();
  friend void protobuf_AssignDesc_net_2fPlatformArena_2eproto();
  friend void protobuf_ShutdownFile_net_2fPlatformArena_2eproto();

  void InitAsDefaultInstance();
  static THistorySeasonData* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TPlatformArenaGetHistorySeasonRsp</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/PlatformArena.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TPlatformArenaGetHistorySeasonRsp : public ::google::protobuf::Message {
 public:
  TPlatformArenaGetHistorySeasonRsp();
  virtual ~TPlatformArenaGetHistorySeasonRsp();

  TPlatformArenaGetHistorySeasonRsp(const TPlatformArenaGetHistorySeasonRsp& from);

  inline TPlatformArenaGetHistorySeasonRsp& operator=(const TPlatformArenaGetHistorySeasonRsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TPlatformArenaGetHistorySeasonRsp& default_instance();

  void Swap(TPlatformArenaGetHistorySeasonRsp* other);

  // implements Message ----------------------------------------------

  TPlatformArenaGetHistorySeasonRsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TPlatformArenaGetHistorySeasonRsp& from);
  void MergeFrom(const TPlatformArenaGetHistorySeasonRsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .pb.THistorySeasonData ArrHistorySeason = 1;
  inline int arrhistoryseason_size() const;
  inline void clear_arrhistoryseason();
  static const int kArrHistorySeasonFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TPlatformArenaGetHistorySeasonRsp</name>
  	<Function>
  		<name>arrhistoryseason</name>
  		<replaceName>ArrHistorySeason</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_arrhistoryseason</name>
  		<replaceName>ArrHistorySeason</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_arrhistoryseason</name>
  		<replaceName>ArrHistorySeason</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_arrhistoryseason</name>
  		<replaceName>ArrHistorySeason</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>arrhistoryseason_size</name>
  		<replaceName>ArrHistorySeason</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::THistorySeasonData& arrhistoryseason(int index) const;
  inline ::pb::THistorySeasonData* mutable_arrhistoryseason(int index);
  inline ::pb::THistorySeasonData* add_arrhistoryseason();
  inline const ::google::protobuf::RepeatedPtrField< ::pb::THistorySeasonData >&
      arrhistoryseason() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb::THistorySeasonData >*
      mutable_arrhistoryseason();

  // @@protoc_insertion_point(class_scope:pb.TPlatformArenaGetHistorySeasonRsp)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::pb::THistorySeasonData > arrhistoryseason_;
  friend void  protobuf_AddDesc_net_2fPlatformArena_2eproto();
  friend void protobuf_AssignDesc_net_2fPlatformArena_2eproto();
  friend void protobuf_ShutdownFile_net_2fPlatformArena_2eproto();

  void InitAsDefaultInstance();
  static TPlatformArenaGetHistorySeasonRsp* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TPlatformArenaGetSeasonPmRankReq</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/PlatformArena.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TPlatformArenaGetSeasonPmRankReq : public ::google::protobuf::Message {
 public:
  TPlatformArenaGetSeasonPmRankReq();
  virtual ~TPlatformArenaGetSeasonPmRankReq();

  TPlatformArenaGetSeasonPmRankReq(const TPlatformArenaGetSeasonPmRankReq& from);

  inline TPlatformArenaGetSeasonPmRankReq& operator=(const TPlatformArenaGetSeasonPmRankReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TPlatformArenaGetSeasonPmRankReq& default_instance();

  void Swap(TPlatformArenaGetSeasonPmRankReq* other);

  // implements Message ----------------------------------------------

  TPlatformArenaGetSeasonPmRankReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TPlatformArenaGetSeasonPmRankReq& from);
  void MergeFrom(const TPlatformArenaGetSeasonPmRankReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 SeasonId = 1;
  inline bool has_seasonid() const;
  inline void clear_seasonid();
  static const int kSeasonIdFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TPlatformArenaGetSeasonPmRankReq</name>
  	<Function>
  		<name>seasonid</name>
  		<replaceName>SeasonId</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_seasonid</name>
  		<replaceName>SeasonId</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_seasonid</name>
  		<replaceName>SeasonId</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 seasonid() const;
  inline void set_seasonid(::google::protobuf::uint32 value);

  // optional uint32 GroupId = 2;
  inline bool has_groupid() const;
  inline void clear_groupid();
  static const int kGroupIdFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TPlatformArenaGetSeasonPmRankReq</name>
  	<Function>
  		<name>groupid</name>
  		<replaceName>GroupId</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_groupid</name>
  		<replaceName>GroupId</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_groupid</name>
  		<replaceName>GroupId</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 groupid() const;
  inline void set_groupid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:pb.TPlatformArenaGetSeasonPmRankReq)
 private:
  inline void set_has_seasonid();
  inline void clear_has_seasonid();
  inline void set_has_groupid();
  inline void clear_has_groupid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 seasonid_;
  ::google::protobuf::uint32 groupid_;
  friend void  protobuf_AddDesc_net_2fPlatformArena_2eproto();
  friend void protobuf_AssignDesc_net_2fPlatformArena_2eproto();
  friend void protobuf_ShutdownFile_net_2fPlatformArena_2eproto();

  void InitAsDefaultInstance();
  static TPlatformArenaGetSeasonPmRankReq* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TSeasonPmRankData</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/PlatformArena.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TSeasonPmRankData : public ::google::protobuf::Message {
 public:
  TSeasonPmRankData();
  virtual ~TSeasonPmRankData();

  TSeasonPmRankData(const TSeasonPmRankData& from);

  inline TSeasonPmRankData& operator=(const TSeasonPmRankData& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TSeasonPmRankData& default_instance();

  void Swap(TSeasonPmRankData* other);

  // implements Message ----------------------------------------------

  TSeasonPmRankData* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TSeasonPmRankData& from);
  void MergeFrom(const TSeasonPmRankData& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .pb.TUserSimpleInfo UserInfo = 1;
  inline bool has_userinfo() const;
  inline void clear_userinfo();
  static const int kUserInfoFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TSeasonPmRankData</name>
  	<Function>
  		<name>userinfo</name>
  		<replaceName>UserInfo</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_userinfo</name>
  		<replaceName>UserInfo</replaceName>
  		<handler>descripter = pb_set_message_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_allocated_userinfo</name>
  		<replaceName>UserInfo</replaceName>
  		<handler>descripter = pb_set_message_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_userinfo</name>
  		<replaceName>UserInfo</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TUserSimpleInfo& userinfo() const;
  inline ::pb::TUserSimpleInfo* mutable_userinfo();
  inline ::pb::TUserSimpleInfo* release_userinfo();
  inline void set_allocated_userinfo(::pb::TUserSimpleInfo* userinfo);

  // optional uint32 Rank = 2;
  inline bool has_rank() const;
  inline void clear_rank();
  static const int kRankFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TSeasonPmRankData</name>
  	<Function>
  		<name>rank</name>
  		<replaceName>Rank</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_rank</name>
  		<replaceName>Rank</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_rank</name>
  		<replaceName>Rank</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 rank() const;
  inline void set_rank(::google::protobuf::uint32 value);

  // optional uint32 ThumbNum = 3;
  inline bool has_thumbnum() const;
  inline void clear_thumbnum();
  static const int kThumbNumFieldNumber = 3;
  /*FOR2LUA
  <Record>
  	<name>TSeasonPmRankData</name>
  	<Function>
  		<name>thumbnum</name>
  		<replaceName>ThumbNum</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_thumbnum</name>
  		<replaceName>ThumbNum</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_thumbnum</name>
  		<replaceName>ThumbNum</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 thumbnum() const;
  inline void set_thumbnum(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:pb.TSeasonPmRankData)
 private:
  inline void set_has_userinfo();
  inline void clear_has_userinfo();
  inline void set_has_rank();
  inline void clear_has_rank();
  inline void set_has_thumbnum();
  inline void clear_has_thumbnum();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::pb::TUserSimpleInfo* userinfo_;
  ::google::protobuf::uint32 rank_;
  ::google::protobuf::uint32 thumbnum_;
  friend void  protobuf_AddDesc_net_2fPlatformArena_2eproto();
  friend void protobuf_AssignDesc_net_2fPlatformArena_2eproto();
  friend void protobuf_ShutdownFile_net_2fPlatformArena_2eproto();

  void InitAsDefaultInstance();
  static TSeasonPmRankData* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TPlatformArenaGetSeasonPmRankRsp</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/PlatformArena.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TPlatformArenaGetSeasonPmRankRsp : public ::google::protobuf::Message {
 public:
  TPlatformArenaGetSeasonPmRankRsp();
  virtual ~TPlatformArenaGetSeasonPmRankRsp();

  TPlatformArenaGetSeasonPmRankRsp(const TPlatformArenaGetSeasonPmRankRsp& from);

  inline TPlatformArenaGetSeasonPmRankRsp& operator=(const TPlatformArenaGetSeasonPmRankRsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TPlatformArenaGetSeasonPmRankRsp& default_instance();

  void Swap(TPlatformArenaGetSeasonPmRankRsp* other);

  // implements Message ----------------------------------------------

  TPlatformArenaGetSeasonPmRankRsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TPlatformArenaGetSeasonPmRankRsp& from);
  void MergeFrom(const TPlatformArenaGetSeasonPmRankRsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 SeasonId = 1;
  inline bool has_seasonid() const;
  inline void clear_seasonid();
  static const int kSeasonIdFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TPlatformArenaGetSeasonPmRankRsp</name>
  	<Function>
  		<name>seasonid</name>
  		<replaceName>SeasonId</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_seasonid</name>
  		<replaceName>SeasonId</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_seasonid</name>
  		<replaceName>SeasonId</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 seasonid() const;
  inline void set_seasonid(::google::protobuf::uint32 value);

  // optional uint32 GroupId = 2;
  inline bool has_groupid() const;
  inline void clear_groupid();
  static const int kGroupIdFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TPlatformArenaGetSeasonPmRankRsp</name>
  	<Function>
  		<name>groupid</name>
  		<replaceName>GroupId</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_groupid</name>
  		<replaceName>GroupId</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_groupid</name>
  		<replaceName>GroupId</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 groupid() const;
  inline void set_groupid(::google::protobuf::uint32 value);

  // repeated .pb.TSeasonPmRankData ArrRankData = 3;
  inline int arrrankdata_size() const;
  inline void clear_arrrankdata();
  static const int kArrRankDataFieldNumber = 3;
  /*FOR2LUA
  <Record>
  	<name>TPlatformArenaGetSeasonPmRankRsp</name>
  	<Function>
  		<name>arrrankdata</name>
  		<replaceName>ArrRankData</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_arrrankdata</name>
  		<replaceName>ArrRankData</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_arrrankdata</name>
  		<replaceName>ArrRankData</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_arrrankdata</name>
  		<replaceName>ArrRankData</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>arrrankdata_size</name>
  		<replaceName>ArrRankData</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TSeasonPmRankData& arrrankdata(int index) const;
  inline ::pb::TSeasonPmRankData* mutable_arrrankdata(int index);
  inline ::pb::TSeasonPmRankData* add_arrrankdata();
  inline const ::google::protobuf::RepeatedPtrField< ::pb::TSeasonPmRankData >&
      arrrankdata() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb::TSeasonPmRankData >*
      mutable_arrrankdata();

  // @@protoc_insertion_point(class_scope:pb.TPlatformArenaGetSeasonPmRankRsp)
 private:
  inline void set_has_seasonid();
  inline void clear_has_seasonid();
  inline void set_has_groupid();
  inline void clear_has_groupid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 seasonid_;
  ::google::protobuf::uint32 groupid_;
  ::google::protobuf::RepeatedPtrField< ::pb::TSeasonPmRankData > arrrankdata_;
  friend void  protobuf_AddDesc_net_2fPlatformArena_2eproto();
  friend void protobuf_AssignDesc_net_2fPlatformArena_2eproto();
  friend void protobuf_ShutdownFile_net_2fPlatformArena_2eproto();

  void InitAsDefaultInstance();
  static TPlatformArenaGetSeasonPmRankRsp* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TPersonalReportData</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/PlatformArena.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TPersonalReportData : public ::google::protobuf::Message {
 public:
  TPersonalReportData();
  virtual ~TPersonalReportData();

  TPersonalReportData(const TPersonalReportData& from);

  inline TPersonalReportData& operator=(const TPersonalReportData& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TPersonalReportData& default_instance();

  void Swap(TPersonalReportData* other);

  // implements Message ----------------------------------------------

  TPersonalReportData* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TPersonalReportData& from);
  void MergeFrom(const TPersonalReportData& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 Rid = 1;
  inline bool has_rid() const;
  inline void clear_rid();
  static const int kRidFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TPersonalReportData</name>
  	<Function>
  		<name>rid</name>
  		<replaceName>Rid</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_rid</name>
  		<replaceName>Rid</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_rid</name>
  		<replaceName>Rid</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 rid() const;
  inline void set_rid(::google::protobuf::uint32 value);

  // optional uint32 ReportType = 2;
  inline bool has_reporttype() const;
  inline void clear_reporttype();
  static const int kReportTypeFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TPersonalReportData</name>
  	<Function>
  		<name>reporttype</name>
  		<replaceName>ReportType</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_reporttype</name>
  		<replaceName>ReportType</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_reporttype</name>
  		<replaceName>ReportType</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 reporttype() const;
  inline void set_reporttype(::google::protobuf::uint32 value);

  // optional uint32 Result = 3;
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 3;
  /*FOR2LUA
  <Record>
  	<name>TPersonalReportData</name>
  	<Function>
  		<name>result</name>
  		<replaceName>Result</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_result</name>
  		<replaceName>Result</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_result</name>
  		<replaceName>Result</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 result() const;
  inline void set_result(::google::protobuf::uint32 value);

  // optional uint32 ArenaId = 4;
  inline bool has_arenaid() const;
  inline void clear_arenaid();
  static const int kArenaIdFieldNumber = 4;
  /*FOR2LUA
  <Record>
  	<name>TPersonalReportData</name>
  	<Function>
  		<name>arenaid</name>
  		<replaceName>ArenaId</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_arenaid</name>
  		<replaceName>ArenaId</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_arenaid</name>
  		<replaceName>ArenaId</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 arenaid() const;
  inline void set_arenaid(::google::protobuf::uint32 value);

  // optional uint64 ReportTime = 5;
  inline bool has_reporttime() const;
  inline void clear_reporttime();
  static const int kReportTimeFieldNumber = 5;
  /*FOR2LUA
  <Record>
  	<name>TPersonalReportData</name>
  	<Function>
  		<name>reporttime</name>
  		<replaceName>ReportTime</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_reporttime</name>
  		<replaceName>ReportTime</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_reporttime</name>
  		<replaceName>ReportTime</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint64 reporttime() const;
  inline void set_reporttime(::google::protobuf::uint64 value);

  // optional uint32 RTid = 6;
  inline bool has_rtid() const;
  inline void clear_rtid();
  static const int kRTidFieldNumber = 6;
  /*FOR2LUA
  <Record>
  	<name>TPersonalReportData</name>
  	<Function>
  		<name>rtid</name>
  		<replaceName>RTid</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_rtid</name>
  		<replaceName>RTid</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_rtid</name>
  		<replaceName>RTid</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 rtid() const;
  inline void set_rtid(::google::protobuf::uint32 value);

  // optional uint32 ArenaType = 7;
  inline bool has_arenatype() const;
  inline void clear_arenatype();
  static const int kArenaTypeFieldNumber = 7;
  /*FOR2LUA
  <Record>
  	<name>TPersonalReportData</name>
  	<Function>
  		<name>arenatype</name>
  		<replaceName>ArenaType</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_arenatype</name>
  		<replaceName>ArenaType</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_arenatype</name>
  		<replaceName>ArenaType</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 arenatype() const;
  inline void set_arenatype(::google::protobuf::uint32 value);

  // optional .pb.TUserSimpleInfo AtkUserInfo = 8;
  inline bool has_atkuserinfo() const;
  inline void clear_atkuserinfo();
  static const int kAtkUserInfoFieldNumber = 8;
  /*FOR2LUA
  <Record>
  	<name>TPersonalReportData</name>
  	<Function>
  		<name>atkuserinfo</name>
  		<replaceName>AtkUserInfo</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_atkuserinfo</name>
  		<replaceName>AtkUserInfo</replaceName>
  		<handler>descripter = pb_set_message_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_allocated_atkuserinfo</name>
  		<replaceName>AtkUserInfo</replaceName>
  		<handler>descripter = pb_set_message_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_atkuserinfo</name>
  		<replaceName>AtkUserInfo</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TUserSimpleInfo& atkuserinfo() const;
  inline ::pb::TUserSimpleInfo* mutable_atkuserinfo();
  inline ::pb::TUserSimpleInfo* release_atkuserinfo();
  inline void set_allocated_atkuserinfo(::pb::TUserSimpleInfo* atkuserinfo);

  // optional .pb.TUserSimpleInfo DefUserInfo = 9;
  inline bool has_defuserinfo() const;
  inline void clear_defuserinfo();
  static const int kDefUserInfoFieldNumber = 9;
  /*FOR2LUA
  <Record>
  	<name>TPersonalReportData</name>
  	<Function>
  		<name>defuserinfo</name>
  		<replaceName>DefUserInfo</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_defuserinfo</name>
  		<replaceName>DefUserInfo</replaceName>
  		<handler>descripter = pb_set_message_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_allocated_defuserinfo</name>
  		<replaceName>DefUserInfo</replaceName>
  		<handler>descripter = pb_set_message_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_defuserinfo</name>
  		<replaceName>DefUserInfo</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TUserSimpleInfo& defuserinfo() const;
  inline ::pb::TUserSimpleInfo* mutable_defuserinfo();
  inline ::pb::TUserSimpleInfo* release_defuserinfo();
  inline void set_allocated_defuserinfo(::pb::TUserSimpleInfo* defuserinfo);

  // @@protoc_insertion_point(class_scope:pb.TPersonalReportData)
 private:
  inline void set_has_rid();
  inline void clear_has_rid();
  inline void set_has_reporttype();
  inline void clear_has_reporttype();
  inline void set_has_result();
  inline void clear_has_result();
  inline void set_has_arenaid();
  inline void clear_has_arenaid();
  inline void set_has_reporttime();
  inline void clear_has_reporttime();
  inline void set_has_rtid();
  inline void clear_has_rtid();
  inline void set_has_arenatype();
  inline void clear_has_arenatype();
  inline void set_has_atkuserinfo();
  inline void clear_has_atkuserinfo();
  inline void set_has_defuserinfo();
  inline void clear_has_defuserinfo();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 rid_;
  ::google::protobuf::uint32 reporttype_;
  ::google::protobuf::uint32 result_;
  ::google::protobuf::uint32 arenaid_;
  ::google::protobuf::uint64 reporttime_;
  ::google::protobuf::uint32 rtid_;
  ::google::protobuf::uint32 arenatype_;
  ::pb::TUserSimpleInfo* atkuserinfo_;
  ::pb::TUserSimpleInfo* defuserinfo_;
  friend void  protobuf_AddDesc_net_2fPlatformArena_2eproto();
  friend void protobuf_AssignDesc_net_2fPlatformArena_2eproto();
  friend void protobuf_ShutdownFile_net_2fPlatformArena_2eproto();

  void InitAsDefaultInstance();
  static TPersonalReportData* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TPlatformArenaGetPersonalReport</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/PlatformArena.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TPlatformArenaGetPersonalReport : public ::google::protobuf::Message {
 public:
  TPlatformArenaGetPersonalReport();
  virtual ~TPlatformArenaGetPersonalReport();

  TPlatformArenaGetPersonalReport(const TPlatformArenaGetPersonalReport& from);

  inline TPlatformArenaGetPersonalReport& operator=(const TPlatformArenaGetPersonalReport& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TPlatformArenaGetPersonalReport& default_instance();

  void Swap(TPlatformArenaGetPersonalReport* other);

  // implements Message ----------------------------------------------

  TPlatformArenaGetPersonalReport* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TPlatformArenaGetPersonalReport& from);
  void MergeFrom(const TPlatformArenaGetPersonalReport& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .pb.TPersonalReportData ArrReport = 1;
  inline int arrreport_size() const;
  inline void clear_arrreport();
  static const int kArrReportFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TPlatformArenaGetPersonalReport</name>
  	<Function>
  		<name>arrreport</name>
  		<replaceName>ArrReport</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_arrreport</name>
  		<replaceName>ArrReport</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_arrreport</name>
  		<replaceName>ArrReport</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_arrreport</name>
  		<replaceName>ArrReport</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>arrreport_size</name>
  		<replaceName>ArrReport</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TPersonalReportData& arrreport(int index) const;
  inline ::pb::TPersonalReportData* mutable_arrreport(int index);
  inline ::pb::TPersonalReportData* add_arrreport();
  inline const ::google::protobuf::RepeatedPtrField< ::pb::TPersonalReportData >&
      arrreport() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb::TPersonalReportData >*
      mutable_arrreport();

  // @@protoc_insertion_point(class_scope:pb.TPlatformArenaGetPersonalReport)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::pb::TPersonalReportData > arrreport_;
  friend void  protobuf_AddDesc_net_2fPlatformArena_2eproto();
  friend void protobuf_AssignDesc_net_2fPlatformArena_2eproto();
  friend void protobuf_ShutdownFile_net_2fPlatformArena_2eproto();

  void InitAsDefaultInstance();
  static TPlatformArenaGetPersonalReport* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TFoeUserData</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/PlatformArena.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TFoeUserData : public ::google::protobuf::Message {
 public:
  TFoeUserData();
  virtual ~TFoeUserData();

  TFoeUserData(const TFoeUserData& from);

  inline TFoeUserData& operator=(const TFoeUserData& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TFoeUserData& default_instance();

  void Swap(TFoeUserData* other);

  // implements Message ----------------------------------------------

  TFoeUserData* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TFoeUserData& from);
  void MergeFrom(const TFoeUserData& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .pb.TUserSimpleInfo UserInfo = 1;
  inline bool has_userinfo() const;
  inline void clear_userinfo();
  static const int kUserInfoFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TFoeUserData</name>
  	<Function>
  		<name>userinfo</name>
  		<replaceName>UserInfo</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_userinfo</name>
  		<replaceName>UserInfo</replaceName>
  		<handler>descripter = pb_set_message_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_allocated_userinfo</name>
  		<replaceName>UserInfo</replaceName>
  		<handler>descripter = pb_set_message_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_userinfo</name>
  		<replaceName>UserInfo</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TUserSimpleInfo& userinfo() const;
  inline ::pb::TUserSimpleInfo* mutable_userinfo();
  inline ::pb::TUserSimpleInfo* release_userinfo();
  inline void set_allocated_userinfo(::pb::TUserSimpleInfo* userinfo);

  // optional uint32 FoeValue = 2;
  inline bool has_foevalue() const;
  inline void clear_foevalue();
  static const int kFoeValueFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TFoeUserData</name>
  	<Function>
  		<name>foevalue</name>
  		<replaceName>FoeValue</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_foevalue</name>
  		<replaceName>FoeValue</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_foevalue</name>
  		<replaceName>FoeValue</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 foevalue() const;
  inline void set_foevalue(::google::protobuf::uint32 value);

  // optional uint64 FoeTimeStamp = 3;
  inline bool has_foetimestamp() const;
  inline void clear_foetimestamp();
  static const int kFoeTimeStampFieldNumber = 3;
  /*FOR2LUA
  <Record>
  	<name>TFoeUserData</name>
  	<Function>
  		<name>foetimestamp</name>
  		<replaceName>FoeTimeStamp</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_foetimestamp</name>
  		<replaceName>FoeTimeStamp</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_foetimestamp</name>
  		<replaceName>FoeTimeStamp</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint64 foetimestamp() const;
  inline void set_foetimestamp(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:pb.TFoeUserData)
 private:
  inline void set_has_userinfo();
  inline void clear_has_userinfo();
  inline void set_has_foevalue();
  inline void clear_has_foevalue();
  inline void set_has_foetimestamp();
  inline void clear_has_foetimestamp();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::pb::TUserSimpleInfo* userinfo_;
  ::google::protobuf::uint64 foetimestamp_;
  ::google::protobuf::uint32 foevalue_;
  friend void  protobuf_AddDesc_net_2fPlatformArena_2eproto();
  friend void protobuf_AssignDesc_net_2fPlatformArena_2eproto();
  friend void protobuf_ShutdownFile_net_2fPlatformArena_2eproto();

  void InitAsDefaultInstance();
  static TFoeUserData* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TPlatformArenaGetFoeInfoRsp</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/PlatformArena.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TPlatformArenaGetFoeInfoRsp : public ::google::protobuf::Message {
 public:
  TPlatformArenaGetFoeInfoRsp();
  virtual ~TPlatformArenaGetFoeInfoRsp();

  TPlatformArenaGetFoeInfoRsp(const TPlatformArenaGetFoeInfoRsp& from);

  inline TPlatformArenaGetFoeInfoRsp& operator=(const TPlatformArenaGetFoeInfoRsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TPlatformArenaGetFoeInfoRsp& default_instance();

  void Swap(TPlatformArenaGetFoeInfoRsp* other);

  // implements Message ----------------------------------------------

  TPlatformArenaGetFoeInfoRsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TPlatformArenaGetFoeInfoRsp& from);
  void MergeFrom(const TPlatformArenaGetFoeInfoRsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .pb.TFoeUserData ArrFoeUser = 1;
  inline int arrfoeuser_size() const;
  inline void clear_arrfoeuser();
  static const int kArrFoeUserFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TPlatformArenaGetFoeInfoRsp</name>
  	<Function>
  		<name>arrfoeuser</name>
  		<replaceName>ArrFoeUser</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_arrfoeuser</name>
  		<replaceName>ArrFoeUser</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_arrfoeuser</name>
  		<replaceName>ArrFoeUser</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_arrfoeuser</name>
  		<replaceName>ArrFoeUser</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>arrfoeuser_size</name>
  		<replaceName>ArrFoeUser</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TFoeUserData& arrfoeuser(int index) const;
  inline ::pb::TFoeUserData* mutable_arrfoeuser(int index);
  inline ::pb::TFoeUserData* add_arrfoeuser();
  inline const ::google::protobuf::RepeatedPtrField< ::pb::TFoeUserData >&
      arrfoeuser() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb::TFoeUserData >*
      mutable_arrfoeuser();

  // @@protoc_insertion_point(class_scope:pb.TPlatformArenaGetFoeInfoRsp)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::pb::TFoeUserData > arrfoeuser_;
  friend void  protobuf_AddDesc_net_2fPlatformArena_2eproto();
  friend void protobuf_AssignDesc_net_2fPlatformArena_2eproto();
  friend void protobuf_ShutdownFile_net_2fPlatformArena_2eproto();

  void InitAsDefaultInstance();
  static TPlatformArenaGetFoeInfoRsp* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TBattlePosInfo</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/PlatformArena.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TBattlePosInfo : public ::google::protobuf::Message {
 public:
  TBattlePosInfo();
  virtual ~TBattlePosInfo();

  TBattlePosInfo(const TBattlePosInfo& from);

  inline TBattlePosInfo& operator=(const TBattlePosInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TBattlePosInfo& default_instance();

  void Swap(TBattlePosInfo* other);

  // implements Message ----------------------------------------------

  TBattlePosInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TBattlePosInfo& from);
  void MergeFrom(const TBattlePosInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 Pos = 1;
  inline bool has_pos() const;
  inline void clear_pos();
  static const int kPosFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TBattlePosInfo</name>
  	<Function>
  		<name>pos</name>
  		<replaceName>Pos</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_pos</name>
  		<replaceName>Pos</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_pos</name>
  		<replaceName>Pos</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 pos() const;
  inline void set_pos(::google::protobuf::uint32 value);

  // optional uint32 Hid = 2;
  inline bool has_hid() const;
  inline void clear_hid();
  static const int kHidFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TBattlePosInfo</name>
  	<Function>
  		<name>hid</name>
  		<replaceName>Hid</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_hid</name>
  		<replaceName>Hid</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_hid</name>
  		<replaceName>Hid</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 hid() const;
  inline void set_hid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:pb.TBattlePosInfo)
 private:
  inline void set_has_pos();
  inline void clear_has_pos();
  inline void set_has_hid();
  inline void clear_has_hid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 pos_;
  ::google::protobuf::uint32 hid_;
  friend void  protobuf_AddDesc_net_2fPlatformArena_2eproto();
  friend void protobuf_AssignDesc_net_2fPlatformArena_2eproto();
  friend void protobuf_ShutdownFile_net_2fPlatformArena_2eproto();

  void InitAsDefaultInstance();
  static TBattlePosInfo* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TPlatformArenaFmtInfo</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/PlatformArena.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TPlatformArenaFmtInfo : public ::google::protobuf::Message {
 public:
  TPlatformArenaFmtInfo();
  virtual ~TPlatformArenaFmtInfo();

  TPlatformArenaFmtInfo(const TPlatformArenaFmtInfo& from);

  inline TPlatformArenaFmtInfo& operator=(const TPlatformArenaFmtInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TPlatformArenaFmtInfo& default_instance();

  void Swap(TPlatformArenaFmtInfo* other);

  // implements Message ----------------------------------------------

  TPlatformArenaFmtInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TPlatformArenaFmtInfo& from);
  void MergeFrom(const TPlatformArenaFmtInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 FmtId = 1;
  inline bool has_fmtid() const;
  inline void clear_fmtid();
  static const int kFmtIdFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TPlatformArenaFmtInfo</name>
  	<Function>
  		<name>fmtid</name>
  		<replaceName>FmtId</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_fmtid</name>
  		<replaceName>FmtId</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_fmtid</name>
  		<replaceName>FmtId</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 fmtid() const;
  inline void set_fmtid(::google::protobuf::uint32 value);

  // repeated .pb.TBattlePosInfo ArrPos = 2;
  inline int arrpos_size() const;
  inline void clear_arrpos();
  static const int kArrPosFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TPlatformArenaFmtInfo</name>
  	<Function>
  		<name>arrpos</name>
  		<replaceName>ArrPos</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_arrpos</name>
  		<replaceName>ArrPos</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_arrpos</name>
  		<replaceName>ArrPos</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_arrpos</name>
  		<replaceName>ArrPos</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>arrpos_size</name>
  		<replaceName>ArrPos</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TBattlePosInfo& arrpos(int index) const;
  inline ::pb::TBattlePosInfo* mutable_arrpos(int index);
  inline ::pb::TBattlePosInfo* add_arrpos();
  inline const ::google::protobuf::RepeatedPtrField< ::pb::TBattlePosInfo >&
      arrpos() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb::TBattlePosInfo >*
      mutable_arrpos();

  // @@protoc_insertion_point(class_scope:pb.TPlatformArenaFmtInfo)
 private:
  inline void set_has_fmtid();
  inline void clear_has_fmtid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::pb::TBattlePosInfo > arrpos_;
  ::google::protobuf::uint32 fmtid_;
  friend void  protobuf_AddDesc_net_2fPlatformArena_2eproto();
  friend void protobuf_AssignDesc_net_2fPlatformArena_2eproto();
  friend void protobuf_ShutdownFile_net_2fPlatformArena_2eproto();

  void InitAsDefaultInstance();
  static TPlatformArenaFmtInfo* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TPlatformArenaGetFmtRsp</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/PlatformArena.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TPlatformArenaGetFmtRsp : public ::google::protobuf::Message {
 public:
  TPlatformArenaGetFmtRsp();
  virtual ~TPlatformArenaGetFmtRsp();

  TPlatformArenaGetFmtRsp(const TPlatformArenaGetFmtRsp& from);

  inline TPlatformArenaGetFmtRsp& operator=(const TPlatformArenaGetFmtRsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TPlatformArenaGetFmtRsp& default_instance();

  void Swap(TPlatformArenaGetFmtRsp* other);

  // implements Message ----------------------------------------------

  TPlatformArenaGetFmtRsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TPlatformArenaGetFmtRsp& from);
  void MergeFrom(const TPlatformArenaGetFmtRsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .pb.TPlatformArenaFmtInfo ArrFmt = 1;
  inline int arrfmt_size() const;
  inline void clear_arrfmt();
  static const int kArrFmtFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TPlatformArenaGetFmtRsp</name>
  	<Function>
  		<name>arrfmt</name>
  		<replaceName>ArrFmt</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_arrfmt</name>
  		<replaceName>ArrFmt</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_arrfmt</name>
  		<replaceName>ArrFmt</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_arrfmt</name>
  		<replaceName>ArrFmt</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>arrfmt_size</name>
  		<replaceName>ArrFmt</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TPlatformArenaFmtInfo& arrfmt(int index) const;
  inline ::pb::TPlatformArenaFmtInfo* mutable_arrfmt(int index);
  inline ::pb::TPlatformArenaFmtInfo* add_arrfmt();
  inline const ::google::protobuf::RepeatedPtrField< ::pb::TPlatformArenaFmtInfo >&
      arrfmt() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb::TPlatformArenaFmtInfo >*
      mutable_arrfmt();

  // @@protoc_insertion_point(class_scope:pb.TPlatformArenaGetFmtRsp)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::pb::TPlatformArenaFmtInfo > arrfmt_;
  friend void  protobuf_AddDesc_net_2fPlatformArena_2eproto();
  friend void protobuf_AssignDesc_net_2fPlatformArena_2eproto();
  friend void protobuf_ShutdownFile_net_2fPlatformArena_2eproto();

  void InitAsDefaultInstance();
  static TPlatformArenaGetFmtRsp* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TPlatformArenaSetFmtReq</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/PlatformArena.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TPlatformArenaSetFmtReq : public ::google::protobuf::Message {
 public:
  TPlatformArenaSetFmtReq();
  virtual ~TPlatformArenaSetFmtReq();

  TPlatformArenaSetFmtReq(const TPlatformArenaSetFmtReq& from);

  inline TPlatformArenaSetFmtReq& operator=(const TPlatformArenaSetFmtReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TPlatformArenaSetFmtReq& default_instance();

  void Swap(TPlatformArenaSetFmtReq* other);

  // implements Message ----------------------------------------------

  TPlatformArenaSetFmtReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TPlatformArenaSetFmtReq& from);
  void MergeFrom(const TPlatformArenaSetFmtReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .pb.TPlatformArenaFmtInfo ArrFmt = 1;
  inline int arrfmt_size() const;
  inline void clear_arrfmt();
  static const int kArrFmtFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TPlatformArenaSetFmtReq</name>
  	<Function>
  		<name>arrfmt</name>
  		<replaceName>ArrFmt</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_arrfmt</name>
  		<replaceName>ArrFmt</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_arrfmt</name>
  		<replaceName>ArrFmt</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_arrfmt</name>
  		<replaceName>ArrFmt</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>arrfmt_size</name>
  		<replaceName>ArrFmt</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TPlatformArenaFmtInfo& arrfmt(int index) const;
  inline ::pb::TPlatformArenaFmtInfo* mutable_arrfmt(int index);
  inline ::pb::TPlatformArenaFmtInfo* add_arrfmt();
  inline const ::google::protobuf::RepeatedPtrField< ::pb::TPlatformArenaFmtInfo >&
      arrfmt() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb::TPlatformArenaFmtInfo >*
      mutable_arrfmt();

  // @@protoc_insertion_point(class_scope:pb.TPlatformArenaSetFmtReq)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::pb::TPlatformArenaFmtInfo > arrfmt_;
  friend void  protobuf_AddDesc_net_2fPlatformArena_2eproto();
  friend void protobuf_AssignDesc_net_2fPlatformArena_2eproto();
  friend void protobuf_ShutdownFile_net_2fPlatformArena_2eproto();

  void InitAsDefaultInstance();
  static TPlatformArenaSetFmtReq* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TPlatformArenaMatchData</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/PlatformArena.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TPlatformArenaMatchData : public ::google::protobuf::Message {
 public:
  TPlatformArenaMatchData();
  virtual ~TPlatformArenaMatchData();

  TPlatformArenaMatchData(const TPlatformArenaMatchData& from);

  inline TPlatformArenaMatchData& operator=(const TPlatformArenaMatchData& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TPlatformArenaMatchData& default_instance();

  void Swap(TPlatformArenaMatchData* other);

  // implements Message ----------------------------------------------

  TPlatformArenaMatchData* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TPlatformArenaMatchData& from);
  void MergeFrom(const TPlatformArenaMatchData& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 MatchId = 1;
  inline bool has_matchid() const;
  inline void clear_matchid();
  static const int kMatchIdFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TPlatformArenaMatchData</name>
  	<Function>
  		<name>matchid</name>
  		<replaceName>MatchId</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_matchid</name>
  		<replaceName>MatchId</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_matchid</name>
  		<replaceName>MatchId</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 matchid() const;
  inline void set_matchid(::google::protobuf::uint32 value);

  // optional uint64 AtkUid = 2;
  inline bool has_atkuid() const;
  inline void clear_atkuid();
  static const int kAtkUidFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TPlatformArenaMatchData</name>
  	<Function>
  		<name>atkuid</name>
  		<replaceName>AtkUid</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_atkuid</name>
  		<replaceName>AtkUid</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_atkuid</name>
  		<replaceName>AtkUid</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint64 atkuid() const;
  inline void set_atkuid(::google::protobuf::uint64 value);

  // optional uint64 DefUid = 3;
  inline bool has_defuid() const;
  inline void clear_defuid();
  static const int kDefUidFieldNumber = 3;
  /*FOR2LUA
  <Record>
  	<name>TPlatformArenaMatchData</name>
  	<Function>
  		<name>defuid</name>
  		<replaceName>DefUid</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_defuid</name>
  		<replaceName>DefUid</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_defuid</name>
  		<replaceName>DefUid</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint64 defuid() const;
  inline void set_defuid(::google::protobuf::uint64 value);

  // optional uint64 DoneTime = 4;
  inline bool has_donetime() const;
  inline void clear_donetime();
  static const int kDoneTimeFieldNumber = 4;
  /*FOR2LUA
  <Record>
  	<name>TPlatformArenaMatchData</name>
  	<Function>
  		<name>donetime</name>
  		<replaceName>DoneTime</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_donetime</name>
  		<replaceName>DoneTime</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_donetime</name>
  		<replaceName>DoneTime</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint64 donetime() const;
  inline void set_donetime(::google::protobuf::uint64 value);

  // optional uint64 WinUid = 5;
  inline bool has_winuid() const;
  inline void clear_winuid();
  static const int kWinUidFieldNumber = 5;
  /*FOR2LUA
  <Record>
  	<name>TPlatformArenaMatchData</name>
  	<Function>
  		<name>winuid</name>
  		<replaceName>WinUid</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_winuid</name>
  		<replaceName>WinUid</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_winuid</name>
  		<replaceName>WinUid</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint64 winuid() const;
  inline void set_winuid(::google::protobuf::uint64 value);

  // optional uint64 AtkFightForce = 6;
  inline bool has_atkfightforce() const;
  inline void clear_atkfightforce();
  static const int kAtkFightForceFieldNumber = 6;
  /*FOR2LUA
  <Record>
  	<name>TPlatformArenaMatchData</name>
  	<Function>
  		<name>atkfightforce</name>
  		<replaceName>AtkFightForce</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_atkfightforce</name>
  		<replaceName>AtkFightForce</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_atkfightforce</name>
  		<replaceName>AtkFightForce</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint64 atkfightforce() const;
  inline void set_atkfightforce(::google::protobuf::uint64 value);

  // optional uint64 DefFightForce = 7;
  inline bool has_deffightforce() const;
  inline void clear_deffightforce();
  static const int kDefFightForceFieldNumber = 7;
  /*FOR2LUA
  <Record>
  	<name>TPlatformArenaMatchData</name>
  	<Function>
  		<name>deffightforce</name>
  		<replaceName>DefFightForce</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_deffightforce</name>
  		<replaceName>DefFightForce</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_deffightforce</name>
  		<replaceName>DefFightForce</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint64 deffightforce() const;
  inline void set_deffightforce(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:pb.TPlatformArenaMatchData)
 private:
  inline void set_has_matchid();
  inline void clear_has_matchid();
  inline void set_has_atkuid();
  inline void clear_has_atkuid();
  inline void set_has_defuid();
  inline void clear_has_defuid();
  inline void set_has_donetime();
  inline void clear_has_donetime();
  inline void set_has_winuid();
  inline void clear_has_winuid();
  inline void set_has_atkfightforce();
  inline void clear_has_atkfightforce();
  inline void set_has_deffightforce();
  inline void clear_has_deffightforce();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint64 atkuid_;
  ::google::protobuf::uint64 defuid_;
  ::google::protobuf::uint64 donetime_;
  ::google::protobuf::uint64 winuid_;
  ::google::protobuf::uint64 atkfightforce_;
  ::google::protobuf::uint64 deffightforce_;
  ::google::protobuf::uint32 matchid_;
  friend void  protobuf_AddDesc_net_2fPlatformArena_2eproto();
  friend void protobuf_AssignDesc_net_2fPlatformArena_2eproto();
  friend void protobuf_ShutdownFile_net_2fPlatformArena_2eproto();

  void InitAsDefaultInstance();
  static TPlatformArenaMatchData* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TPlatformArenaGetPmMatchInfoReq</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/PlatformArena.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TPlatformArenaGetPmMatchInfoReq : public ::google::protobuf::Message {
 public:
  TPlatformArenaGetPmMatchInfoReq();
  virtual ~TPlatformArenaGetPmMatchInfoReq();

  TPlatformArenaGetPmMatchInfoReq(const TPlatformArenaGetPmMatchInfoReq& from);

  inline TPlatformArenaGetPmMatchInfoReq& operator=(const TPlatformArenaGetPmMatchInfoReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TPlatformArenaGetPmMatchInfoReq& default_instance();

  void Swap(TPlatformArenaGetPmMatchInfoReq* other);

  // implements Message ----------------------------------------------

  TPlatformArenaGetPmMatchInfoReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TPlatformArenaGetPmMatchInfoReq& from);
  void MergeFrom(const TPlatformArenaGetPmMatchInfoReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 GroupId = 1;
  inline bool has_groupid() const;
  inline void clear_groupid();
  static const int kGroupIdFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TPlatformArenaGetPmMatchInfoReq</name>
  	<Function>
  		<name>groupid</name>
  		<replaceName>GroupId</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_groupid</name>
  		<replaceName>GroupId</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_groupid</name>
  		<replaceName>GroupId</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 groupid() const;
  inline void set_groupid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:pb.TPlatformArenaGetPmMatchInfoReq)
 private:
  inline void set_has_groupid();
  inline void clear_has_groupid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 groupid_;
  friend void  protobuf_AddDesc_net_2fPlatformArena_2eproto();
  friend void protobuf_AssignDesc_net_2fPlatformArena_2eproto();
  friend void protobuf_ShutdownFile_net_2fPlatformArena_2eproto();

  void InitAsDefaultInstance();
  static TPlatformArenaGetPmMatchInfoReq* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TPlatformArenaGetPmMatchInfoRsp</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/PlatformArena.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TPlatformArenaGetPmMatchInfoRsp : public ::google::protobuf::Message {
 public:
  TPlatformArenaGetPmMatchInfoRsp();
  virtual ~TPlatformArenaGetPmMatchInfoRsp();

  TPlatformArenaGetPmMatchInfoRsp(const TPlatformArenaGetPmMatchInfoRsp& from);

  inline TPlatformArenaGetPmMatchInfoRsp& operator=(const TPlatformArenaGetPmMatchInfoRsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TPlatformArenaGetPmMatchInfoRsp& default_instance();

  void Swap(TPlatformArenaGetPmMatchInfoRsp* other);

  // implements Message ----------------------------------------------

  TPlatformArenaGetPmMatchInfoRsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TPlatformArenaGetPmMatchInfoRsp& from);
  void MergeFrom(const TPlatformArenaGetPmMatchInfoRsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 GroupId = 1;
  inline bool has_groupid() const;
  inline void clear_groupid();
  static const int kGroupIdFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TPlatformArenaGetPmMatchInfoRsp</name>
  	<Function>
  		<name>groupid</name>
  		<replaceName>GroupId</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_groupid</name>
  		<replaceName>GroupId</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_groupid</name>
  		<replaceName>GroupId</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 groupid() const;
  inline void set_groupid(::google::protobuf::uint32 value);

  // repeated .pb.TUserSimpleInfo ArrUserInfo = 2;
  inline int arruserinfo_size() const;
  inline void clear_arruserinfo();
  static const int kArrUserInfoFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TPlatformArenaGetPmMatchInfoRsp</name>
  	<Function>
  		<name>arruserinfo</name>
  		<replaceName>ArrUserInfo</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_arruserinfo</name>
  		<replaceName>ArrUserInfo</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_arruserinfo</name>
  		<replaceName>ArrUserInfo</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_arruserinfo</name>
  		<replaceName>ArrUserInfo</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>arruserinfo_size</name>
  		<replaceName>ArrUserInfo</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TUserSimpleInfo& arruserinfo(int index) const;
  inline ::pb::TUserSimpleInfo* mutable_arruserinfo(int index);
  inline ::pb::TUserSimpleInfo* add_arruserinfo();
  inline const ::google::protobuf::RepeatedPtrField< ::pb::TUserSimpleInfo >&
      arruserinfo() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb::TUserSimpleInfo >*
      mutable_arruserinfo();

  // repeated .pb.TPlatformArenaMatchData ArrArenaMatchData = 3;
  inline int arrarenamatchdata_size() const;
  inline void clear_arrarenamatchdata();
  static const int kArrArenaMatchDataFieldNumber = 3;
  /*FOR2LUA
  <Record>
  	<name>TPlatformArenaGetPmMatchInfoRsp</name>
  	<Function>
  		<name>arrarenamatchdata</name>
  		<replaceName>ArrArenaMatchData</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_arrarenamatchdata</name>
  		<replaceName>ArrArenaMatchData</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_arrarenamatchdata</name>
  		<replaceName>ArrArenaMatchData</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_arrarenamatchdata</name>
  		<replaceName>ArrArenaMatchData</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>arrarenamatchdata_size</name>
  		<replaceName>ArrArenaMatchData</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TPlatformArenaMatchData& arrarenamatchdata(int index) const;
  inline ::pb::TPlatformArenaMatchData* mutable_arrarenamatchdata(int index);
  inline ::pb::TPlatformArenaMatchData* add_arrarenamatchdata();
  inline const ::google::protobuf::RepeatedPtrField< ::pb::TPlatformArenaMatchData >&
      arrarenamatchdata() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb::TPlatformArenaMatchData >*
      mutable_arrarenamatchdata();

  // @@protoc_insertion_point(class_scope:pb.TPlatformArenaGetPmMatchInfoRsp)
 private:
  inline void set_has_groupid();
  inline void clear_has_groupid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::pb::TUserSimpleInfo > arruserinfo_;
  ::google::protobuf::RepeatedPtrField< ::pb::TPlatformArenaMatchData > arrarenamatchdata_;
  ::google::protobuf::uint32 groupid_;
  friend void  protobuf_AddDesc_net_2fPlatformArena_2eproto();
  friend void protobuf_AssignDesc_net_2fPlatformArena_2eproto();
  friend void protobuf_ShutdownFile_net_2fPlatformArena_2eproto();

  void InitAsDefaultInstance();
  static TPlatformArenaGetPmMatchInfoRsp* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TGuessRecordData</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/PlatformArena.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TGuessRecordData : public ::google::protobuf::Message {
 public:
  TGuessRecordData();
  virtual ~TGuessRecordData();

  TGuessRecordData(const TGuessRecordData& from);

  inline TGuessRecordData& operator=(const TGuessRecordData& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TGuessRecordData& default_instance();

  void Swap(TGuessRecordData* other);

  // implements Message ----------------------------------------------

  TGuessRecordData* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TGuessRecordData& from);
  void MergeFrom(const TGuessRecordData& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 GroupId = 1;
  inline bool has_groupid() const;
  inline void clear_groupid();
  static const int kGroupIdFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TGuessRecordData</name>
  	<Function>
  		<name>groupid</name>
  		<replaceName>GroupId</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_groupid</name>
  		<replaceName>GroupId</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_groupid</name>
  		<replaceName>GroupId</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 groupid() const;
  inline void set_groupid(::google::protobuf::uint32 value);

  // optional uint32 MatchId = 2;
  inline bool has_matchid() const;
  inline void clear_matchid();
  static const int kMatchIdFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TGuessRecordData</name>
  	<Function>
  		<name>matchid</name>
  		<replaceName>MatchId</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_matchid</name>
  		<replaceName>MatchId</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_matchid</name>
  		<replaceName>MatchId</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 matchid() const;
  inline void set_matchid(::google::protobuf::uint32 value);

  // optional uint64 WinUid = 3;
  inline bool has_winuid() const;
  inline void clear_winuid();
  static const int kWinUidFieldNumber = 3;
  /*FOR2LUA
  <Record>
  	<name>TGuessRecordData</name>
  	<Function>
  		<name>winuid</name>
  		<replaceName>WinUid</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_winuid</name>
  		<replaceName>WinUid</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_winuid</name>
  		<replaceName>WinUid</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint64 winuid() const;
  inline void set_winuid(::google::protobuf::uint64 value);

  // optional uint32 GuessStatus = 4;
  inline bool has_guessstatus() const;
  inline void clear_guessstatus();
  static const int kGuessStatusFieldNumber = 4;
  /*FOR2LUA
  <Record>
  	<name>TGuessRecordData</name>
  	<Function>
  		<name>guessstatus</name>
  		<replaceName>GuessStatus</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_guessstatus</name>
  		<replaceName>GuessStatus</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_guessstatus</name>
  		<replaceName>GuessStatus</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 guessstatus() const;
  inline void set_guessstatus(::google::protobuf::uint32 value);

  // optional uint32 BetIndex = 5;
  inline bool has_betindex() const;
  inline void clear_betindex();
  static const int kBetIndexFieldNumber = 5;
  /*FOR2LUA
  <Record>
  	<name>TGuessRecordData</name>
  	<Function>
  		<name>betindex</name>
  		<replaceName>BetIndex</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_betindex</name>
  		<replaceName>BetIndex</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_betindex</name>
  		<replaceName>BetIndex</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 betindex() const;
  inline void set_betindex(::google::protobuf::uint32 value);

  // optional uint32 GuessAtkWinNum = 6;
  inline bool has_guessatkwinnum() const;
  inline void clear_guessatkwinnum();
  static const int kGuessAtkWinNumFieldNumber = 6;
  /*FOR2LUA
  <Record>
  	<name>TGuessRecordData</name>
  	<Function>
  		<name>guessatkwinnum</name>
  		<replaceName>GuessAtkWinNum</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_guessatkwinnum</name>
  		<replaceName>GuessAtkWinNum</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_guessatkwinnum</name>
  		<replaceName>GuessAtkWinNum</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 guessatkwinnum() const;
  inline void set_guessatkwinnum(::google::protobuf::uint32 value);

  // optional uint32 GuessDefWinNum = 7;
  inline bool has_guessdefwinnum() const;
  inline void clear_guessdefwinnum();
  static const int kGuessDefWinNumFieldNumber = 7;
  /*FOR2LUA
  <Record>
  	<name>TGuessRecordData</name>
  	<Function>
  		<name>guessdefwinnum</name>
  		<replaceName>GuessDefWinNum</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_guessdefwinnum</name>
  		<replaceName>GuessDefWinNum</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_guessdefwinnum</name>
  		<replaceName>GuessDefWinNum</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 guessdefwinnum() const;
  inline void set_guessdefwinnum(::google::protobuf::uint32 value);

  // repeated .pb.TPlatformArenaLeaveMessageData MsgLst = 8;
  inline int msglst_size() const;
  inline void clear_msglst();
  static const int kMsgLstFieldNumber = 8;
  /*FOR2LUA
  <Record>
  	<name>TGuessRecordData</name>
  	<Function>
  		<name>msglst</name>
  		<replaceName>MsgLst</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_msglst</name>
  		<replaceName>MsgLst</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_msglst</name>
  		<replaceName>MsgLst</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_msglst</name>
  		<replaceName>MsgLst</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>msglst_size</name>
  		<replaceName>MsgLst</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TPlatformArenaLeaveMessageData& msglst(int index) const;
  inline ::pb::TPlatformArenaLeaveMessageData* mutable_msglst(int index);
  inline ::pb::TPlatformArenaLeaveMessageData* add_msglst();
  inline const ::google::protobuf::RepeatedPtrField< ::pb::TPlatformArenaLeaveMessageData >&
      msglst() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb::TPlatformArenaLeaveMessageData >*
      mutable_msglst();

  // @@protoc_insertion_point(class_scope:pb.TGuessRecordData)
 private:
  inline void set_has_groupid();
  inline void clear_has_groupid();
  inline void set_has_matchid();
  inline void clear_has_matchid();
  inline void set_has_winuid();
  inline void clear_has_winuid();
  inline void set_has_guessstatus();
  inline void clear_has_guessstatus();
  inline void set_has_betindex();
  inline void clear_has_betindex();
  inline void set_has_guessatkwinnum();
  inline void clear_has_guessatkwinnum();
  inline void set_has_guessdefwinnum();
  inline void clear_has_guessdefwinnum();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 groupid_;
  ::google::protobuf::uint32 matchid_;
  ::google::protobuf::uint64 winuid_;
  ::google::protobuf::uint32 guessstatus_;
  ::google::protobuf::uint32 betindex_;
  ::google::protobuf::uint32 guessatkwinnum_;
  ::google::protobuf::uint32 guessdefwinnum_;
  ::google::protobuf::RepeatedPtrField< ::pb::TPlatformArenaLeaveMessageData > msglst_;
  friend void  protobuf_AddDesc_net_2fPlatformArena_2eproto();
  friend void protobuf_AssignDesc_net_2fPlatformArena_2eproto();
  friend void protobuf_ShutdownFile_net_2fPlatformArena_2eproto();

  void InitAsDefaultInstance();
  static TGuessRecordData* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TPlatformArenaGetGuessRecordRsp</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/PlatformArena.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TPlatformArenaGetGuessRecordRsp : public ::google::protobuf::Message {
 public:
  TPlatformArenaGetGuessRecordRsp();
  virtual ~TPlatformArenaGetGuessRecordRsp();

  TPlatformArenaGetGuessRecordRsp(const TPlatformArenaGetGuessRecordRsp& from);

  inline TPlatformArenaGetGuessRecordRsp& operator=(const TPlatformArenaGetGuessRecordRsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TPlatformArenaGetGuessRecordRsp& default_instance();

  void Swap(TPlatformArenaGetGuessRecordRsp* other);

  // implements Message ----------------------------------------------

  TPlatformArenaGetGuessRecordRsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TPlatformArenaGetGuessRecordRsp& from);
  void MergeFrom(const TPlatformArenaGetGuessRecordRsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .pb.TGuessRecordData ArrGuessRecord = 1;
  inline int arrguessrecord_size() const;
  inline void clear_arrguessrecord();
  static const int kArrGuessRecordFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TPlatformArenaGetGuessRecordRsp</name>
  	<Function>
  		<name>arrguessrecord</name>
  		<replaceName>ArrGuessRecord</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_arrguessrecord</name>
  		<replaceName>ArrGuessRecord</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_arrguessrecord</name>
  		<replaceName>ArrGuessRecord</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_arrguessrecord</name>
  		<replaceName>ArrGuessRecord</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>arrguessrecord_size</name>
  		<replaceName>ArrGuessRecord</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TGuessRecordData& arrguessrecord(int index) const;
  inline ::pb::TGuessRecordData* mutable_arrguessrecord(int index);
  inline ::pb::TGuessRecordData* add_arrguessrecord();
  inline const ::google::protobuf::RepeatedPtrField< ::pb::TGuessRecordData >&
      arrguessrecord() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb::TGuessRecordData >*
      mutable_arrguessrecord();

  // @@protoc_insertion_point(class_scope:pb.TPlatformArenaGetGuessRecordRsp)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::pb::TGuessRecordData > arrguessrecord_;
  friend void  protobuf_AddDesc_net_2fPlatformArena_2eproto();
  friend void protobuf_AssignDesc_net_2fPlatformArena_2eproto();
  friend void protobuf_ShutdownFile_net_2fPlatformArena_2eproto();

  void InitAsDefaultInstance();
  static TPlatformArenaGetGuessRecordRsp* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TPlatformArenaGuessiongReq</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/PlatformArena.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TPlatformArenaGuessiongReq : public ::google::protobuf::Message {
 public:
  TPlatformArenaGuessiongReq();
  virtual ~TPlatformArenaGuessiongReq();

  TPlatformArenaGuessiongReq(const TPlatformArenaGuessiongReq& from);

  inline TPlatformArenaGuessiongReq& operator=(const TPlatformArenaGuessiongReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TPlatformArenaGuessiongReq& default_instance();

  void Swap(TPlatformArenaGuessiongReq* other);

  // implements Message ----------------------------------------------

  TPlatformArenaGuessiongReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TPlatformArenaGuessiongReq& from);
  void MergeFrom(const TPlatformArenaGuessiongReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 GroupId = 1;
  inline bool has_groupid() const;
  inline void clear_groupid();
  static const int kGroupIdFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TPlatformArenaGuessiongReq</name>
  	<Function>
  		<name>groupid</name>
  		<replaceName>GroupId</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_groupid</name>
  		<replaceName>GroupId</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_groupid</name>
  		<replaceName>GroupId</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 groupid() const;
  inline void set_groupid(::google::protobuf::uint32 value);

  // optional uint32 MatchId = 2;
  inline bool has_matchid() const;
  inline void clear_matchid();
  static const int kMatchIdFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TPlatformArenaGuessiongReq</name>
  	<Function>
  		<name>matchid</name>
  		<replaceName>MatchId</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_matchid</name>
  		<replaceName>MatchId</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_matchid</name>
  		<replaceName>MatchId</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 matchid() const;
  inline void set_matchid(::google::protobuf::uint32 value);

  // optional uint64 Uid = 3;
  inline bool has_uid() const;
  inline void clear_uid();
  static const int kUidFieldNumber = 3;
  /*FOR2LUA
  <Record>
  	<name>TPlatformArenaGuessiongReq</name>
  	<Function>
  		<name>uid</name>
  		<replaceName>Uid</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_uid</name>
  		<replaceName>Uid</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_uid</name>
  		<replaceName>Uid</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint64 uid() const;
  inline void set_uid(::google::protobuf::uint64 value);

  // optional uint32 BetIndex = 4;
  inline bool has_betindex() const;
  inline void clear_betindex();
  static const int kBetIndexFieldNumber = 4;
  /*FOR2LUA
  <Record>
  	<name>TPlatformArenaGuessiongReq</name>
  	<Function>
  		<name>betindex</name>
  		<replaceName>BetIndex</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_betindex</name>
  		<replaceName>BetIndex</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_betindex</name>
  		<replaceName>BetIndex</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 betindex() const;
  inline void set_betindex(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:pb.TPlatformArenaGuessiongReq)
 private:
  inline void set_has_groupid();
  inline void clear_has_groupid();
  inline void set_has_matchid();
  inline void clear_has_matchid();
  inline void set_has_uid();
  inline void clear_has_uid();
  inline void set_has_betindex();
  inline void clear_has_betindex();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 groupid_;
  ::google::protobuf::uint32 matchid_;
  ::google::protobuf::uint64 uid_;
  ::google::protobuf::uint32 betindex_;
  friend void  protobuf_AddDesc_net_2fPlatformArena_2eproto();
  friend void protobuf_AssignDesc_net_2fPlatformArena_2eproto();
  friend void protobuf_ShutdownFile_net_2fPlatformArena_2eproto();

  void InitAsDefaultInstance();
  static TPlatformArenaGuessiongReq* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TPlatformArenaGetGuessingRewardReq</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/PlatformArena.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TPlatformArenaGetGuessingRewardReq : public ::google::protobuf::Message {
 public:
  TPlatformArenaGetGuessingRewardReq();
  virtual ~TPlatformArenaGetGuessingRewardReq();

  TPlatformArenaGetGuessingRewardReq(const TPlatformArenaGetGuessingRewardReq& from);

  inline TPlatformArenaGetGuessingRewardReq& operator=(const TPlatformArenaGetGuessingRewardReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TPlatformArenaGetGuessingRewardReq& default_instance();

  void Swap(TPlatformArenaGetGuessingRewardReq* other);

  // implements Message ----------------------------------------------

  TPlatformArenaGetGuessingRewardReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TPlatformArenaGetGuessingRewardReq& from);
  void MergeFrom(const TPlatformArenaGetGuessingRewardReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated uint32 ArrMatchId = 1;
  inline int arrmatchid_size() const;
  inline void clear_arrmatchid();
  static const int kArrMatchIdFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TPlatformArenaGetGuessingRewardReq</name>
  	<Function>
  		<name>arrmatchid</name>
  		<replaceName>ArrMatchId</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_arrmatchid</name>
  		<replaceName>ArrMatchId</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_arrmatchid</name>
  		<replaceName>ArrMatchId</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_arrmatchid</name>
  		<replaceName>ArrMatchId</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>arrmatchid_size</name>
  		<replaceName>ArrMatchId</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 arrmatchid(int index) const;
  inline void set_arrmatchid(int index, ::google::protobuf::uint32 value);
  inline void add_arrmatchid(::google::protobuf::uint32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      arrmatchid() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_arrmatchid();

  // @@protoc_insertion_point(class_scope:pb.TPlatformArenaGetGuessingRewardReq)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > arrmatchid_;
  friend void  protobuf_AddDesc_net_2fPlatformArena_2eproto();
  friend void protobuf_AssignDesc_net_2fPlatformArena_2eproto();
  friend void protobuf_ShutdownFile_net_2fPlatformArena_2eproto();

  void InitAsDefaultInstance();
  static TPlatformArenaGetGuessingRewardReq* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TPlatformArenaGetGuessingRewardRsp</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/PlatformArena.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TPlatformArenaGetGuessingRewardRsp : public ::google::protobuf::Message {
 public:
  TPlatformArenaGetGuessingRewardRsp();
  virtual ~TPlatformArenaGetGuessingRewardRsp();

  TPlatformArenaGetGuessingRewardRsp(const TPlatformArenaGetGuessingRewardRsp& from);

  inline TPlatformArenaGetGuessingRewardRsp& operator=(const TPlatformArenaGetGuessingRewardRsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TPlatformArenaGetGuessingRewardRsp& default_instance();

  void Swap(TPlatformArenaGetGuessingRewardRsp* other);

  // implements Message ----------------------------------------------

  TPlatformArenaGetGuessingRewardRsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TPlatformArenaGetGuessingRewardRsp& from);
  void MergeFrom(const TPlatformArenaGetGuessingRewardRsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .pb.TCommonReward ArrRewardInfo = 1;
  inline int arrrewardinfo_size() const;
  inline void clear_arrrewardinfo();
  static const int kArrRewardInfoFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TPlatformArenaGetGuessingRewardRsp</name>
  	<Function>
  		<name>arrrewardinfo</name>
  		<replaceName>ArrRewardInfo</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_arrrewardinfo</name>
  		<replaceName>ArrRewardInfo</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_arrrewardinfo</name>
  		<replaceName>ArrRewardInfo</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_arrrewardinfo</name>
  		<replaceName>ArrRewardInfo</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>arrrewardinfo_size</name>
  		<replaceName>ArrRewardInfo</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TCommonReward& arrrewardinfo(int index) const;
  inline ::pb::TCommonReward* mutable_arrrewardinfo(int index);
  inline ::pb::TCommonReward* add_arrrewardinfo();
  inline const ::google::protobuf::RepeatedPtrField< ::pb::TCommonReward >&
      arrrewardinfo() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb::TCommonReward >*
      mutable_arrrewardinfo();

  // @@protoc_insertion_point(class_scope:pb.TPlatformArenaGetGuessingRewardRsp)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::pb::TCommonReward > arrrewardinfo_;
  friend void  protobuf_AddDesc_net_2fPlatformArena_2eproto();
  friend void protobuf_AssignDesc_net_2fPlatformArena_2eproto();
  friend void protobuf_ShutdownFile_net_2fPlatformArena_2eproto();

  void InitAsDefaultInstance();
  static TPlatformArenaGetGuessingRewardRsp* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TGuessRecordNotify</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/PlatformArena.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TGuessRecordNotify : public ::google::protobuf::Message {
 public:
  TGuessRecordNotify();
  virtual ~TGuessRecordNotify();

  TGuessRecordNotify(const TGuessRecordNotify& from);

  inline TGuessRecordNotify& operator=(const TGuessRecordNotify& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TGuessRecordNotify& default_instance();

  void Swap(TGuessRecordNotify* other);

  // implements Message ----------------------------------------------

  TGuessRecordNotify* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TGuessRecordNotify& from);
  void MergeFrom(const TGuessRecordNotify& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .pb.TGuessRecordData GuessRecord = 1;
  inline bool has_guessrecord() const;
  inline void clear_guessrecord();
  static const int kGuessRecordFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TGuessRecordNotify</name>
  	<Function>
  		<name>guessrecord</name>
  		<replaceName>GuessRecord</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_guessrecord</name>
  		<replaceName>GuessRecord</replaceName>
  		<handler>descripter = pb_set_message_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_allocated_guessrecord</name>
  		<replaceName>GuessRecord</replaceName>
  		<handler>descripter = pb_set_message_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_guessrecord</name>
  		<replaceName>GuessRecord</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TGuessRecordData& guessrecord() const;
  inline ::pb::TGuessRecordData* mutable_guessrecord();
  inline ::pb::TGuessRecordData* release_guessrecord();
  inline void set_allocated_guessrecord(::pb::TGuessRecordData* guessrecord);

  // @@protoc_insertion_point(class_scope:pb.TGuessRecordNotify)
 private:
  inline void set_has_guessrecord();
  inline void clear_has_guessrecord();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::pb::TGuessRecordData* guessrecord_;
  friend void  protobuf_AddDesc_net_2fPlatformArena_2eproto();
  friend void protobuf_AssignDesc_net_2fPlatformArena_2eproto();
  friend void protobuf_ShutdownFile_net_2fPlatformArena_2eproto();

  void InitAsDefaultInstance();
  static TGuessRecordNotify* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TPlatformArenaGiveThumbReq</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/PlatformArena.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TPlatformArenaGiveThumbReq : public ::google::protobuf::Message {
 public:
  TPlatformArenaGiveThumbReq();
  virtual ~TPlatformArenaGiveThumbReq();

  TPlatformArenaGiveThumbReq(const TPlatformArenaGiveThumbReq& from);

  inline TPlatformArenaGiveThumbReq& operator=(const TPlatformArenaGiveThumbReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TPlatformArenaGiveThumbReq& default_instance();

  void Swap(TPlatformArenaGiveThumbReq* other);

  // implements Message ----------------------------------------------

  TPlatformArenaGiveThumbReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TPlatformArenaGiveThumbReq& from);
  void MergeFrom(const TPlatformArenaGiveThumbReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 GroupId = 1;
  inline bool has_groupid() const;
  inline void clear_groupid();
  static const int kGroupIdFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TPlatformArenaGiveThumbReq</name>
  	<Function>
  		<name>groupid</name>
  		<replaceName>GroupId</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_groupid</name>
  		<replaceName>GroupId</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_groupid</name>
  		<replaceName>GroupId</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 groupid() const;
  inline void set_groupid(::google::protobuf::uint32 value);

  // optional uint64 Uid = 2;
  inline bool has_uid() const;
  inline void clear_uid();
  static const int kUidFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TPlatformArenaGiveThumbReq</name>
  	<Function>
  		<name>uid</name>
  		<replaceName>Uid</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_uid</name>
  		<replaceName>Uid</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_uid</name>
  		<replaceName>Uid</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint64 uid() const;
  inline void set_uid(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:pb.TPlatformArenaGiveThumbReq)
 private:
  inline void set_has_groupid();
  inline void clear_has_groupid();
  inline void set_has_uid();
  inline void clear_has_uid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint64 uid_;
  ::google::protobuf::uint32 groupid_;
  friend void  protobuf_AddDesc_net_2fPlatformArena_2eproto();
  friend void protobuf_AssignDesc_net_2fPlatformArena_2eproto();
  friend void protobuf_ShutdownFile_net_2fPlatformArena_2eproto();

  void InitAsDefaultInstance();
  static TPlatformArenaGiveThumbReq* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TPlatformArenaGiveThumbRsp</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/PlatformArena.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TPlatformArenaGiveThumbRsp : public ::google::protobuf::Message {
 public:
  TPlatformArenaGiveThumbRsp();
  virtual ~TPlatformArenaGiveThumbRsp();

  TPlatformArenaGiveThumbRsp(const TPlatformArenaGiveThumbRsp& from);

  inline TPlatformArenaGiveThumbRsp& operator=(const TPlatformArenaGiveThumbRsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TPlatformArenaGiveThumbRsp& default_instance();

  void Swap(TPlatformArenaGiveThumbRsp* other);

  // implements Message ----------------------------------------------

  TPlatformArenaGiveThumbRsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TPlatformArenaGiveThumbRsp& from);
  void MergeFrom(const TPlatformArenaGiveThumbRsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint64 Uid = 1;
  inline bool has_uid() const;
  inline void clear_uid();
  static const int kUidFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TPlatformArenaGiveThumbRsp</name>
  	<Function>
  		<name>uid</name>
  		<replaceName>Uid</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_uid</name>
  		<replaceName>Uid</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_uid</name>
  		<replaceName>Uid</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint64 uid() const;
  inline void set_uid(::google::protobuf::uint64 value);

  // optional uint32 ThumbNum = 2;
  inline bool has_thumbnum() const;
  inline void clear_thumbnum();
  static const int kThumbNumFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TPlatformArenaGiveThumbRsp</name>
  	<Function>
  		<name>thumbnum</name>
  		<replaceName>ThumbNum</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_thumbnum</name>
  		<replaceName>ThumbNum</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_thumbnum</name>
  		<replaceName>ThumbNum</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 thumbnum() const;
  inline void set_thumbnum(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:pb.TPlatformArenaGiveThumbRsp)
 private:
  inline void set_has_uid();
  inline void clear_has_uid();
  inline void set_has_thumbnum();
  inline void clear_has_thumbnum();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint64 uid_;
  ::google::protobuf::uint32 thumbnum_;
  friend void  protobuf_AddDesc_net_2fPlatformArena_2eproto();
  friend void protobuf_AssignDesc_net_2fPlatformArena_2eproto();
  friend void protobuf_ShutdownFile_net_2fPlatformArena_2eproto();

  void InitAsDefaultInstance();
  static TPlatformArenaGiveThumbRsp* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TPlatformArenaBattleHeroStatus</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/PlatformArena.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TPlatformArenaBattleHeroStatus : public ::google::protobuf::Message {
 public:
  TPlatformArenaBattleHeroStatus();
  virtual ~TPlatformArenaBattleHeroStatus();

  TPlatformArenaBattleHeroStatus(const TPlatformArenaBattleHeroStatus& from);

  inline TPlatformArenaBattleHeroStatus& operator=(const TPlatformArenaBattleHeroStatus& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TPlatformArenaBattleHeroStatus& default_instance();

  void Swap(TPlatformArenaBattleHeroStatus* other);

  // implements Message ----------------------------------------------

  TPlatformArenaBattleHeroStatus* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TPlatformArenaBattleHeroStatus& from);
  void MergeFrom(const TPlatformArenaBattleHeroStatus& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 Htid = 1;
  inline bool has_htid() const;
  inline void clear_htid();
  static const int kHtidFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TPlatformArenaBattleHeroStatus</name>
  	<Function>
  		<name>htid</name>
  		<replaceName>Htid</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_htid</name>
  		<replaceName>Htid</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_htid</name>
  		<replaceName>Htid</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 htid() const;
  inline void set_htid(::google::protobuf::uint32 value);

  // optional uint32 Pos = 2;
  inline bool has_pos() const;
  inline void clear_pos();
  static const int kPosFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TPlatformArenaBattleHeroStatus</name>
  	<Function>
  		<name>pos</name>
  		<replaceName>Pos</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_pos</name>
  		<replaceName>Pos</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_pos</name>
  		<replaceName>Pos</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 pos() const;
  inline void set_pos(::google::protobuf::uint32 value);

  // optional uint32 IsKilled = 3;
  inline bool has_iskilled() const;
  inline void clear_iskilled();
  static const int kIsKilledFieldNumber = 3;
  /*FOR2LUA
  <Record>
  	<name>TPlatformArenaBattleHeroStatus</name>
  	<Function>
  		<name>iskilled</name>
  		<replaceName>IsKilled</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_iskilled</name>
  		<replaceName>IsKilled</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_iskilled</name>
  		<replaceName>IsKilled</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 iskilled() const;
  inline void set_iskilled(::google::protobuf::uint32 value);

  // optional uint32 Level = 4;
  inline bool has_level() const;
  inline void clear_level();
  static const int kLevelFieldNumber = 4;
  /*FOR2LUA
  <Record>
  	<name>TPlatformArenaBattleHeroStatus</name>
  	<Function>
  		<name>level</name>
  		<replaceName>Level</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_level</name>
  		<replaceName>Level</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_level</name>
  		<replaceName>Level</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 level() const;
  inline void set_level(::google::protobuf::uint32 value);

  // optional uint32 StarLv = 5;
  inline bool has_starlv() const;
  inline void clear_starlv();
  static const int kStarLvFieldNumber = 5;
  /*FOR2LUA
  <Record>
  	<name>TPlatformArenaBattleHeroStatus</name>
  	<Function>
  		<name>starlv</name>
  		<replaceName>StarLv</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_starlv</name>
  		<replaceName>StarLv</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_starlv</name>
  		<replaceName>StarLv</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 starlv() const;
  inline void set_starlv(::google::protobuf::uint32 value);

  // optional uint32 Hid = 6;
  inline bool has_hid() const;
  inline void clear_hid();
  static const int kHidFieldNumber = 6;
  /*FOR2LUA
  <Record>
  	<name>TPlatformArenaBattleHeroStatus</name>
  	<Function>
  		<name>hid</name>
  		<replaceName>Hid</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_hid</name>
  		<replaceName>Hid</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_hid</name>
  		<replaceName>Hid</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 hid() const;
  inline void set_hid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:pb.TPlatformArenaBattleHeroStatus)
 private:
  inline void set_has_htid();
  inline void clear_has_htid();
  inline void set_has_pos();
  inline void clear_has_pos();
  inline void set_has_iskilled();
  inline void clear_has_iskilled();
  inline void set_has_level();
  inline void clear_has_level();
  inline void set_has_starlv();
  inline void clear_has_starlv();
  inline void set_has_hid();
  inline void clear_has_hid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 htid_;
  ::google::protobuf::uint32 pos_;
  ::google::protobuf::uint32 iskilled_;
  ::google::protobuf::uint32 level_;
  ::google::protobuf::uint32 starlv_;
  ::google::protobuf::uint32 hid_;
  friend void  protobuf_AddDesc_net_2fPlatformArena_2eproto();
  friend void protobuf_AssignDesc_net_2fPlatformArena_2eproto();
  friend void protobuf_ShutdownFile_net_2fPlatformArena_2eproto();

  void InitAsDefaultInstance();
  static TPlatformArenaBattleHeroStatus* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TPlatformArenaPreviewBattleResult</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/PlatformArena.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TPlatformArenaPreviewBattleResult : public ::google::protobuf::Message {
 public:
  TPlatformArenaPreviewBattleResult();
  virtual ~TPlatformArenaPreviewBattleResult();

  TPlatformArenaPreviewBattleResult(const TPlatformArenaPreviewBattleResult& from);

  inline TPlatformArenaPreviewBattleResult& operator=(const TPlatformArenaPreviewBattleResult& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TPlatformArenaPreviewBattleResult& default_instance();

  void Swap(TPlatformArenaPreviewBattleResult* other);

  // implements Message ----------------------------------------------

  TPlatformArenaPreviewBattleResult* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TPlatformArenaPreviewBattleResult& from);
  void MergeFrom(const TPlatformArenaPreviewBattleResult& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 FormationId = 1;
  inline bool has_formationid() const;
  inline void clear_formationid();
  static const int kFormationIdFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TPlatformArenaPreviewBattleResult</name>
  	<Function>
  		<name>formationid</name>
  		<replaceName>FormationId</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_formationid</name>
  		<replaceName>FormationId</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_formationid</name>
  		<replaceName>FormationId</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 formationid() const;
  inline void set_formationid(::google::protobuf::uint32 value);

  // repeated .pb.TPlatformArenaBattleHeroStatus ArrAtkHeroInfo = 2;
  inline int arratkheroinfo_size() const;
  inline void clear_arratkheroinfo();
  static const int kArrAtkHeroInfoFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TPlatformArenaPreviewBattleResult</name>
  	<Function>
  		<name>arratkheroinfo</name>
  		<replaceName>ArrAtkHeroInfo</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_arratkheroinfo</name>
  		<replaceName>ArrAtkHeroInfo</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_arratkheroinfo</name>
  		<replaceName>ArrAtkHeroInfo</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_arratkheroinfo</name>
  		<replaceName>ArrAtkHeroInfo</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>arratkheroinfo_size</name>
  		<replaceName>ArrAtkHeroInfo</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TPlatformArenaBattleHeroStatus& arratkheroinfo(int index) const;
  inline ::pb::TPlatformArenaBattleHeroStatus* mutable_arratkheroinfo(int index);
  inline ::pb::TPlatformArenaBattleHeroStatus* add_arratkheroinfo();
  inline const ::google::protobuf::RepeatedPtrField< ::pb::TPlatformArenaBattleHeroStatus >&
      arratkheroinfo() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb::TPlatformArenaBattleHeroStatus >*
      mutable_arratkheroinfo();

  // repeated .pb.TPlatformArenaBattleHeroStatus ArrDefHeroInfo = 3;
  inline int arrdefheroinfo_size() const;
  inline void clear_arrdefheroinfo();
  static const int kArrDefHeroInfoFieldNumber = 3;
  /*FOR2LUA
  <Record>
  	<name>TPlatformArenaPreviewBattleResult</name>
  	<Function>
  		<name>arrdefheroinfo</name>
  		<replaceName>ArrDefHeroInfo</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_arrdefheroinfo</name>
  		<replaceName>ArrDefHeroInfo</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_arrdefheroinfo</name>
  		<replaceName>ArrDefHeroInfo</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_arrdefheroinfo</name>
  		<replaceName>ArrDefHeroInfo</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>arrdefheroinfo_size</name>
  		<replaceName>ArrDefHeroInfo</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TPlatformArenaBattleHeroStatus& arrdefheroinfo(int index) const;
  inline ::pb::TPlatformArenaBattleHeroStatus* mutable_arrdefheroinfo(int index);
  inline ::pb::TPlatformArenaBattleHeroStatus* add_arrdefheroinfo();
  inline const ::google::protobuf::RepeatedPtrField< ::pb::TPlatformArenaBattleHeroStatus >&
      arrdefheroinfo() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb::TPlatformArenaBattleHeroStatus >*
      mutable_arrdefheroinfo();

  // optional uint32 IsAtkWin = 4;
  inline bool has_isatkwin() const;
  inline void clear_isatkwin();
  static const int kIsAtkWinFieldNumber = 4;
  /*FOR2LUA
  <Record>
  	<name>TPlatformArenaPreviewBattleResult</name>
  	<Function>
  		<name>isatkwin</name>
  		<replaceName>IsAtkWin</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_isatkwin</name>
  		<replaceName>IsAtkWin</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_isatkwin</name>
  		<replaceName>IsAtkWin</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 isatkwin() const;
  inline void set_isatkwin(::google::protobuf::uint32 value);

  // optional uint64 Rid = 5;
  inline bool has_rid() const;
  inline void clear_rid();
  static const int kRidFieldNumber = 5;
  /*FOR2LUA
  <Record>
  	<name>TPlatformArenaPreviewBattleResult</name>
  	<Function>
  		<name>rid</name>
  		<replaceName>Rid</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_rid</name>
  		<replaceName>Rid</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_rid</name>
  		<replaceName>Rid</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint64 rid() const;
  inline void set_rid(::google::protobuf::uint64 value);

  // optional uint64 atkFightForce = 6;
  inline bool has_atkfightforce() const;
  inline void clear_atkfightforce();
  static const int kAtkFightForceFieldNumber = 6;
  /*FOR2LUA
  <Record>
  	<name>TPlatformArenaPreviewBattleResult</name>
  	<Function>
  		<name>atkfightforce</name>
  		<replaceName>atkFightForce</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_atkfightforce</name>
  		<replaceName>atkFightForce</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_atkfightforce</name>
  		<replaceName>atkFightForce</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint64 atkfightforce() const;
  inline void set_atkfightforce(::google::protobuf::uint64 value);

  // optional uint64 defFightForce = 7;
  inline bool has_deffightforce() const;
  inline void clear_deffightforce();
  static const int kDefFightForceFieldNumber = 7;
  /*FOR2LUA
  <Record>
  	<name>TPlatformArenaPreviewBattleResult</name>
  	<Function>
  		<name>deffightforce</name>
  		<replaceName>defFightForce</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_deffightforce</name>
  		<replaceName>defFightForce</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_deffightforce</name>
  		<replaceName>defFightForce</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint64 deffightforce() const;
  inline void set_deffightforce(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:pb.TPlatformArenaPreviewBattleResult)
 private:
  inline void set_has_formationid();
  inline void clear_has_formationid();
  inline void set_has_isatkwin();
  inline void clear_has_isatkwin();
  inline void set_has_rid();
  inline void clear_has_rid();
  inline void set_has_atkfightforce();
  inline void clear_has_atkfightforce();
  inline void set_has_deffightforce();
  inline void clear_has_deffightforce();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::pb::TPlatformArenaBattleHeroStatus > arratkheroinfo_;
  ::google::protobuf::uint32 formationid_;
  ::google::protobuf::uint32 isatkwin_;
  ::google::protobuf::RepeatedPtrField< ::pb::TPlatformArenaBattleHeroStatus > arrdefheroinfo_;
  ::google::protobuf::uint64 rid_;
  ::google::protobuf::uint64 atkfightforce_;
  ::google::protobuf::uint64 deffightforce_;
  friend void  protobuf_AddDesc_net_2fPlatformArena_2eproto();
  friend void protobuf_AssignDesc_net_2fPlatformArena_2eproto();
  friend void protobuf_ShutdownFile_net_2fPlatformArena_2eproto();

  void InitAsDefaultInstance();
  static TPlatformArenaPreviewBattleResult* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TPlatformArenaGetBattlePreviewReq</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/PlatformArena.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TPlatformArenaGetBattlePreviewReq : public ::google::protobuf::Message {
 public:
  TPlatformArenaGetBattlePreviewReq();
  virtual ~TPlatformArenaGetBattlePreviewReq();

  TPlatformArenaGetBattlePreviewReq(const TPlatformArenaGetBattlePreviewReq& from);

  inline TPlatformArenaGetBattlePreviewReq& operator=(const TPlatformArenaGetBattlePreviewReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TPlatformArenaGetBattlePreviewReq& default_instance();

  void Swap(TPlatformArenaGetBattlePreviewReq* other);

  // implements Message ----------------------------------------------

  TPlatformArenaGetBattlePreviewReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TPlatformArenaGetBattlePreviewReq& from);
  void MergeFrom(const TPlatformArenaGetBattlePreviewReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 ReqType = 1;
  inline bool has_reqtype() const;
  inline void clear_reqtype();
  static const int kReqTypeFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TPlatformArenaGetBattlePreviewReq</name>
  	<Function>
  		<name>reqtype</name>
  		<replaceName>ReqType</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_reqtype</name>
  		<replaceName>ReqType</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_reqtype</name>
  		<replaceName>ReqType</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 reqtype() const;
  inline void set_reqtype(::google::protobuf::uint32 value);

  // optional uint32 MatchId = 2;
  inline bool has_matchid() const;
  inline void clear_matchid();
  static const int kMatchIdFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TPlatformArenaGetBattlePreviewReq</name>
  	<Function>
  		<name>matchid</name>
  		<replaceName>MatchId</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_matchid</name>
  		<replaceName>MatchId</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_matchid</name>
  		<replaceName>MatchId</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 matchid() const;
  inline void set_matchid(::google::protobuf::uint32 value);

  // optional uint32 ReportId = 3;
  inline bool has_reportid() const;
  inline void clear_reportid();
  static const int kReportIdFieldNumber = 3;
  /*FOR2LUA
  <Record>
  	<name>TPlatformArenaGetBattlePreviewReq</name>
  	<Function>
  		<name>reportid</name>
  		<replaceName>ReportId</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_reportid</name>
  		<replaceName>ReportId</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_reportid</name>
  		<replaceName>ReportId</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 reportid() const;
  inline void set_reportid(::google::protobuf::uint32 value);

  // optional uint32 SeasonId = 4;
  inline bool has_seasonid() const;
  inline void clear_seasonid();
  static const int kSeasonIdFieldNumber = 4;
  /*FOR2LUA
  <Record>
  	<name>TPlatformArenaGetBattlePreviewReq</name>
  	<Function>
  		<name>seasonid</name>
  		<replaceName>SeasonId</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_seasonid</name>
  		<replaceName>SeasonId</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_seasonid</name>
  		<replaceName>SeasonId</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 seasonid() const;
  inline void set_seasonid(::google::protobuf::uint32 value);

  // optional uint32 GroupId = 5;
  inline bool has_groupid() const;
  inline void clear_groupid();
  static const int kGroupIdFieldNumber = 5;
  /*FOR2LUA
  <Record>
  	<name>TPlatformArenaGetBattlePreviewReq</name>
  	<Function>
  		<name>groupid</name>
  		<replaceName>GroupId</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_groupid</name>
  		<replaceName>GroupId</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_groupid</name>
  		<replaceName>GroupId</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 groupid() const;
  inline void set_groupid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:pb.TPlatformArenaGetBattlePreviewReq)
 private:
  inline void set_has_reqtype();
  inline void clear_has_reqtype();
  inline void set_has_matchid();
  inline void clear_has_matchid();
  inline void set_has_reportid();
  inline void clear_has_reportid();
  inline void set_has_seasonid();
  inline void clear_has_seasonid();
  inline void set_has_groupid();
  inline void clear_has_groupid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 reqtype_;
  ::google::protobuf::uint32 matchid_;
  ::google::protobuf::uint32 reportid_;
  ::google::protobuf::uint32 seasonid_;
  ::google::protobuf::uint32 groupid_;
  friend void  protobuf_AddDesc_net_2fPlatformArena_2eproto();
  friend void protobuf_AssignDesc_net_2fPlatformArena_2eproto();
  friend void protobuf_ShutdownFile_net_2fPlatformArena_2eproto();

  void InitAsDefaultInstance();
  static TPlatformArenaGetBattlePreviewReq* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TPlatformArenaGetBattlePreviewRsp</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/PlatformArena.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TPlatformArenaGetBattlePreviewRsp : public ::google::protobuf::Message {
 public:
  TPlatformArenaGetBattlePreviewRsp();
  virtual ~TPlatformArenaGetBattlePreviewRsp();

  TPlatformArenaGetBattlePreviewRsp(const TPlatformArenaGetBattlePreviewRsp& from);

  inline TPlatformArenaGetBattlePreviewRsp& operator=(const TPlatformArenaGetBattlePreviewRsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TPlatformArenaGetBattlePreviewRsp& default_instance();

  void Swap(TPlatformArenaGetBattlePreviewRsp* other);

  // implements Message ----------------------------------------------

  TPlatformArenaGetBattlePreviewRsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TPlatformArenaGetBattlePreviewRsp& from);
  void MergeFrom(const TPlatformArenaGetBattlePreviewRsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .pb.TUserSimpleInfo AtkUserInfo = 1;
  inline bool has_atkuserinfo() const;
  inline void clear_atkuserinfo();
  static const int kAtkUserInfoFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TPlatformArenaGetBattlePreviewRsp</name>
  	<Function>
  		<name>atkuserinfo</name>
  		<replaceName>AtkUserInfo</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_atkuserinfo</name>
  		<replaceName>AtkUserInfo</replaceName>
  		<handler>descripter = pb_set_message_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_allocated_atkuserinfo</name>
  		<replaceName>AtkUserInfo</replaceName>
  		<handler>descripter = pb_set_message_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_atkuserinfo</name>
  		<replaceName>AtkUserInfo</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TUserSimpleInfo& atkuserinfo() const;
  inline ::pb::TUserSimpleInfo* mutable_atkuserinfo();
  inline ::pb::TUserSimpleInfo* release_atkuserinfo();
  inline void set_allocated_atkuserinfo(::pb::TUserSimpleInfo* atkuserinfo);

  // optional .pb.TUserSimpleInfo DefUserInfo = 2;
  inline bool has_defuserinfo() const;
  inline void clear_defuserinfo();
  static const int kDefUserInfoFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TPlatformArenaGetBattlePreviewRsp</name>
  	<Function>
  		<name>defuserinfo</name>
  		<replaceName>DefUserInfo</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_defuserinfo</name>
  		<replaceName>DefUserInfo</replaceName>
  		<handler>descripter = pb_set_message_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_allocated_defuserinfo</name>
  		<replaceName>DefUserInfo</replaceName>
  		<handler>descripter = pb_set_message_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_defuserinfo</name>
  		<replaceName>DefUserInfo</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TUserSimpleInfo& defuserinfo() const;
  inline ::pb::TUserSimpleInfo* mutable_defuserinfo();
  inline ::pb::TUserSimpleInfo* release_defuserinfo();
  inline void set_allocated_defuserinfo(::pb::TUserSimpleInfo* defuserinfo);

  // repeated .pb.TPlatformArenaPreviewBattleResult ArrBattleInfo = 3;
  inline int arrbattleinfo_size() const;
  inline void clear_arrbattleinfo();
  static const int kArrBattleInfoFieldNumber = 3;
  /*FOR2LUA
  <Record>
  	<name>TPlatformArenaGetBattlePreviewRsp</name>
  	<Function>
  		<name>arrbattleinfo</name>
  		<replaceName>ArrBattleInfo</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_arrbattleinfo</name>
  		<replaceName>ArrBattleInfo</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_arrbattleinfo</name>
  		<replaceName>ArrBattleInfo</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_arrbattleinfo</name>
  		<replaceName>ArrBattleInfo</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>arrbattleinfo_size</name>
  		<replaceName>ArrBattleInfo</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TPlatformArenaPreviewBattleResult& arrbattleinfo(int index) const;
  inline ::pb::TPlatformArenaPreviewBattleResult* mutable_arrbattleinfo(int index);
  inline ::pb::TPlatformArenaPreviewBattleResult* add_arrbattleinfo();
  inline const ::google::protobuf::RepeatedPtrField< ::pb::TPlatformArenaPreviewBattleResult >&
      arrbattleinfo() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb::TPlatformArenaPreviewBattleResult >*
      mutable_arrbattleinfo();

  // @@protoc_insertion_point(class_scope:pb.TPlatformArenaGetBattlePreviewRsp)
 private:
  inline void set_has_atkuserinfo();
  inline void clear_has_atkuserinfo();
  inline void set_has_defuserinfo();
  inline void clear_has_defuserinfo();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::pb::TUserSimpleInfo* atkuserinfo_;
  ::pb::TUserSimpleInfo* defuserinfo_;
  ::google::protobuf::RepeatedPtrField< ::pb::TPlatformArenaPreviewBattleResult > arrbattleinfo_;
  friend void  protobuf_AddDesc_net_2fPlatformArena_2eproto();
  friend void protobuf_AssignDesc_net_2fPlatformArena_2eproto();
  friend void protobuf_ShutdownFile_net_2fPlatformArena_2eproto();

  void InitAsDefaultInstance();
  static TPlatformArenaGetBattlePreviewRsp* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TPlatformArenaFormationInfo</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/PlatformArena.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TPlatformArenaFormationInfo : public ::google::protobuf::Message {
 public:
  TPlatformArenaFormationInfo();
  virtual ~TPlatformArenaFormationInfo();

  TPlatformArenaFormationInfo(const TPlatformArenaFormationInfo& from);

  inline TPlatformArenaFormationInfo& operator=(const TPlatformArenaFormationInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TPlatformArenaFormationInfo& default_instance();

  void Swap(TPlatformArenaFormationInfo* other);

  // implements Message ----------------------------------------------

  TPlatformArenaFormationInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TPlatformArenaFormationInfo& from);
  void MergeFrom(const TPlatformArenaFormationInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 FormationId = 1;
  inline bool has_formationid() const;
  inline void clear_formationid();
  static const int kFormationIdFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TPlatformArenaFormationInfo</name>
  	<Function>
  		<name>formationid</name>
  		<replaceName>FormationId</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_formationid</name>
  		<replaceName>FormationId</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_formationid</name>
  		<replaceName>FormationId</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 formationid() const;
  inline void set_formationid(::google::protobuf::uint32 value);

  // repeated .pb.TPlatformArenaBattleHeroStatus UnitArr = 2;
  inline int unitarr_size() const;
  inline void clear_unitarr();
  static const int kUnitArrFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TPlatformArenaFormationInfo</name>
  	<Function>
  		<name>unitarr</name>
  		<replaceName>UnitArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_unitarr</name>
  		<replaceName>UnitArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_unitarr</name>
  		<replaceName>UnitArr</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_unitarr</name>
  		<replaceName>UnitArr</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>unitarr_size</name>
  		<replaceName>UnitArr</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TPlatformArenaBattleHeroStatus& unitarr(int index) const;
  inline ::pb::TPlatformArenaBattleHeroStatus* mutable_unitarr(int index);
  inline ::pb::TPlatformArenaBattleHeroStatus* add_unitarr();
  inline const ::google::protobuf::RepeatedPtrField< ::pb::TPlatformArenaBattleHeroStatus >&
      unitarr() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb::TPlatformArenaBattleHeroStatus >*
      mutable_unitarr();

  // optional uint64 FightForce = 3;
  inline bool has_fightforce() const;
  inline void clear_fightforce();
  static const int kFightForceFieldNumber = 3;
  /*FOR2LUA
  <Record>
  	<name>TPlatformArenaFormationInfo</name>
  	<Function>
  		<name>fightforce</name>
  		<replaceName>FightForce</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_fightforce</name>
  		<replaceName>FightForce</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_fightforce</name>
  		<replaceName>FightForce</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint64 fightforce() const;
  inline void set_fightforce(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:pb.TPlatformArenaFormationInfo)
 private:
  inline void set_has_formationid();
  inline void clear_has_formationid();
  inline void set_has_fightforce();
  inline void clear_has_fightforce();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::pb::TPlatformArenaBattleHeroStatus > unitarr_;
  ::google::protobuf::uint64 fightforce_;
  ::google::protobuf::uint32 formationid_;
  friend void  protobuf_AddDesc_net_2fPlatformArena_2eproto();
  friend void protobuf_AssignDesc_net_2fPlatformArena_2eproto();
  friend void protobuf_ShutdownFile_net_2fPlatformArena_2eproto();

  void InitAsDefaultInstance();
  static TPlatformArenaFormationInfo* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TPlatformArenaGetFormationReq</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/PlatformArena.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TPlatformArenaGetFormationReq : public ::google::protobuf::Message {
 public:
  TPlatformArenaGetFormationReq();
  virtual ~TPlatformArenaGetFormationReq();

  TPlatformArenaGetFormationReq(const TPlatformArenaGetFormationReq& from);

  inline TPlatformArenaGetFormationReq& operator=(const TPlatformArenaGetFormationReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TPlatformArenaGetFormationReq& default_instance();

  void Swap(TPlatformArenaGetFormationReq* other);

  // implements Message ----------------------------------------------

  TPlatformArenaGetFormationReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TPlatformArenaGetFormationReq& from);
  void MergeFrom(const TPlatformArenaGetFormationReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 Round = 1;
  inline bool has_round() const;
  inline void clear_round();
  static const int kRoundFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TPlatformArenaGetFormationReq</name>
  	<Function>
  		<name>round</name>
  		<replaceName>Round</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_round</name>
  		<replaceName>Round</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_round</name>
  		<replaceName>Round</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 round() const;
  inline void set_round(::google::protobuf::uint32 value);

  // optional uint64 Uid = 2;
  inline bool has_uid() const;
  inline void clear_uid();
  static const int kUidFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TPlatformArenaGetFormationReq</name>
  	<Function>
  		<name>uid</name>
  		<replaceName>Uid</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_uid</name>
  		<replaceName>Uid</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_uid</name>
  		<replaceName>Uid</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint64 uid() const;
  inline void set_uid(::google::protobuf::uint64 value);

  // optional uint32 GroupId = 3;
  inline bool has_groupid() const;
  inline void clear_groupid();
  static const int kGroupIdFieldNumber = 3;
  /*FOR2LUA
  <Record>
  	<name>TPlatformArenaGetFormationReq</name>
  	<Function>
  		<name>groupid</name>
  		<replaceName>GroupId</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_groupid</name>
  		<replaceName>GroupId</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_groupid</name>
  		<replaceName>GroupId</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 groupid() const;
  inline void set_groupid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:pb.TPlatformArenaGetFormationReq)
 private:
  inline void set_has_round();
  inline void clear_has_round();
  inline void set_has_uid();
  inline void clear_has_uid();
  inline void set_has_groupid();
  inline void clear_has_groupid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint64 uid_;
  ::google::protobuf::uint32 round_;
  ::google::protobuf::uint32 groupid_;
  friend void  protobuf_AddDesc_net_2fPlatformArena_2eproto();
  friend void protobuf_AssignDesc_net_2fPlatformArena_2eproto();
  friend void protobuf_ShutdownFile_net_2fPlatformArena_2eproto();

  void InitAsDefaultInstance();
  static TPlatformArenaGetFormationReq* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TPlatformArenaGetFormationRsp</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/PlatformArena.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TPlatformArenaGetFormationRsp : public ::google::protobuf::Message {
 public:
  TPlatformArenaGetFormationRsp();
  virtual ~TPlatformArenaGetFormationRsp();

  TPlatformArenaGetFormationRsp(const TPlatformArenaGetFormationRsp& from);

  inline TPlatformArenaGetFormationRsp& operator=(const TPlatformArenaGetFormationRsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TPlatformArenaGetFormationRsp& default_instance();

  void Swap(TPlatformArenaGetFormationRsp* other);

  // implements Message ----------------------------------------------

  TPlatformArenaGetFormationRsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TPlatformArenaGetFormationRsp& from);
  void MergeFrom(const TPlatformArenaGetFormationRsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .pb.TPlatformArenaFormationInfo FormationArr = 1;
  inline int formationarr_size() const;
  inline void clear_formationarr();
  static const int kFormationArrFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TPlatformArenaGetFormationRsp</name>
  	<Function>
  		<name>formationarr</name>
  		<replaceName>FormationArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_formationarr</name>
  		<replaceName>FormationArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_formationarr</name>
  		<replaceName>FormationArr</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_formationarr</name>
  		<replaceName>FormationArr</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>formationarr_size</name>
  		<replaceName>FormationArr</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TPlatformArenaFormationInfo& formationarr(int index) const;
  inline ::pb::TPlatformArenaFormationInfo* mutable_formationarr(int index);
  inline ::pb::TPlatformArenaFormationInfo* add_formationarr();
  inline const ::google::protobuf::RepeatedPtrField< ::pb::TPlatformArenaFormationInfo >&
      formationarr() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb::TPlatformArenaFormationInfo >*
      mutable_formationarr();

  // @@protoc_insertion_point(class_scope:pb.TPlatformArenaGetFormationRsp)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::pb::TPlatformArenaFormationInfo > formationarr_;
  friend void  protobuf_AddDesc_net_2fPlatformArena_2eproto();
  friend void protobuf_AssignDesc_net_2fPlatformArena_2eproto();
  friend void protobuf_ShutdownFile_net_2fPlatformArena_2eproto();

  void InitAsDefaultInstance();
  static TPlatformArenaGetFormationRsp* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TArenaBattleReportData</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/PlatformArena.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TArenaBattleReportData : public ::google::protobuf::Message {
 public:
  TArenaBattleReportData();
  virtual ~TArenaBattleReportData();

  TArenaBattleReportData(const TArenaBattleReportData& from);

  inline TArenaBattleReportData& operator=(const TArenaBattleReportData& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TArenaBattleReportData& default_instance();

  void Swap(TArenaBattleReportData* other);

  // implements Message ----------------------------------------------

  TArenaBattleReportData* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TArenaBattleReportData& from);
  void MergeFrom(const TArenaBattleReportData& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 Rid = 1;
  inline bool has_rid() const;
  inline void clear_rid();
  static const int kRidFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TArenaBattleReportData</name>
  	<Function>
  		<name>rid</name>
  		<replaceName>Rid</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_rid</name>
  		<replaceName>Rid</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_rid</name>
  		<replaceName>Rid</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 rid() const;
  inline void set_rid(::google::protobuf::uint32 value);

  // optional uint32 ReportType = 2;
  inline bool has_reporttype() const;
  inline void clear_reporttype();
  static const int kReportTypeFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TArenaBattleReportData</name>
  	<Function>
  		<name>reporttype</name>
  		<replaceName>ReportType</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_reporttype</name>
  		<replaceName>ReportType</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_reporttype</name>
  		<replaceName>ReportType</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 reporttype() const;
  inline void set_reporttype(::google::protobuf::uint32 value);

  // optional uint32 ArenaId = 3;
  inline bool has_arenaid() const;
  inline void clear_arenaid();
  static const int kArenaIdFieldNumber = 3;
  /*FOR2LUA
  <Record>
  	<name>TArenaBattleReportData</name>
  	<Function>
  		<name>arenaid</name>
  		<replaceName>ArenaId</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_arenaid</name>
  		<replaceName>ArenaId</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_arenaid</name>
  		<replaceName>ArenaId</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 arenaid() const;
  inline void set_arenaid(::google::protobuf::uint32 value);

  // optional uint64 ReportTime = 4;
  inline bool has_reporttime() const;
  inline void clear_reporttime();
  static const int kReportTimeFieldNumber = 4;
  /*FOR2LUA
  <Record>
  	<name>TArenaBattleReportData</name>
  	<Function>
  		<name>reporttime</name>
  		<replaceName>ReportTime</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_reporttime</name>
  		<replaceName>ReportTime</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_reporttime</name>
  		<replaceName>ReportTime</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint64 reporttime() const;
  inline void set_reporttime(::google::protobuf::uint64 value);

  // optional .pb.TUserSimpleInfo AtkUserInfo = 5;
  inline bool has_atkuserinfo() const;
  inline void clear_atkuserinfo();
  static const int kAtkUserInfoFieldNumber = 5;
  /*FOR2LUA
  <Record>
  	<name>TArenaBattleReportData</name>
  	<Function>
  		<name>atkuserinfo</name>
  		<replaceName>AtkUserInfo</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_atkuserinfo</name>
  		<replaceName>AtkUserInfo</replaceName>
  		<handler>descripter = pb_set_message_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_allocated_atkuserinfo</name>
  		<replaceName>AtkUserInfo</replaceName>
  		<handler>descripter = pb_set_message_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_atkuserinfo</name>
  		<replaceName>AtkUserInfo</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TUserSimpleInfo& atkuserinfo() const;
  inline ::pb::TUserSimpleInfo* mutable_atkuserinfo();
  inline ::pb::TUserSimpleInfo* release_atkuserinfo();
  inline void set_allocated_atkuserinfo(::pb::TUserSimpleInfo* atkuserinfo);

  // optional .pb.TUserSimpleInfo DefUserInfo = 6;
  inline bool has_defuserinfo() const;
  inline void clear_defuserinfo();
  static const int kDefUserInfoFieldNumber = 6;
  /*FOR2LUA
  <Record>
  	<name>TArenaBattleReportData</name>
  	<Function>
  		<name>defuserinfo</name>
  		<replaceName>DefUserInfo</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_defuserinfo</name>
  		<replaceName>DefUserInfo</replaceName>
  		<handler>descripter = pb_set_message_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_allocated_defuserinfo</name>
  		<replaceName>DefUserInfo</replaceName>
  		<handler>descripter = pb_set_message_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_defuserinfo</name>
  		<replaceName>DefUserInfo</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TUserSimpleInfo& defuserinfo() const;
  inline ::pb::TUserSimpleInfo* mutable_defuserinfo();
  inline ::pb::TUserSimpleInfo* release_defuserinfo();
  inline void set_allocated_defuserinfo(::pb::TUserSimpleInfo* defuserinfo);

  // @@protoc_insertion_point(class_scope:pb.TArenaBattleReportData)
 private:
  inline void set_has_rid();
  inline void clear_has_rid();
  inline void set_has_reporttype();
  inline void clear_has_reporttype();
  inline void set_has_arenaid();
  inline void clear_has_arenaid();
  inline void set_has_reporttime();
  inline void clear_has_reporttime();
  inline void set_has_atkuserinfo();
  inline void clear_has_atkuserinfo();
  inline void set_has_defuserinfo();
  inline void clear_has_defuserinfo();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 rid_;
  ::google::protobuf::uint32 reporttype_;
  ::google::protobuf::uint64 reporttime_;
  ::pb::TUserSimpleInfo* atkuserinfo_;
  ::pb::TUserSimpleInfo* defuserinfo_;
  ::google::protobuf::uint32 arenaid_;
  friend void  protobuf_AddDesc_net_2fPlatformArena_2eproto();
  friend void protobuf_AssignDesc_net_2fPlatformArena_2eproto();
  friend void protobuf_ShutdownFile_net_2fPlatformArena_2eproto();

  void InitAsDefaultInstance();
  static TArenaBattleReportData* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TPlatformArenaGetArenaBattleReportRsp</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/PlatformArena.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TPlatformArenaGetArenaBattleReportRsp : public ::google::protobuf::Message {
 public:
  TPlatformArenaGetArenaBattleReportRsp();
  virtual ~TPlatformArenaGetArenaBattleReportRsp();

  TPlatformArenaGetArenaBattleReportRsp(const TPlatformArenaGetArenaBattleReportRsp& from);

  inline TPlatformArenaGetArenaBattleReportRsp& operator=(const TPlatformArenaGetArenaBattleReportRsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TPlatformArenaGetArenaBattleReportRsp& default_instance();

  void Swap(TPlatformArenaGetArenaBattleReportRsp* other);

  // implements Message ----------------------------------------------

  TPlatformArenaGetArenaBattleReportRsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TPlatformArenaGetArenaBattleReportRsp& from);
  void MergeFrom(const TPlatformArenaGetArenaBattleReportRsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .pb.TArenaBattleReportData ArrReport = 1;
  inline int arrreport_size() const;
  inline void clear_arrreport();
  static const int kArrReportFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TPlatformArenaGetArenaBattleReportRsp</name>
  	<Function>
  		<name>arrreport</name>
  		<replaceName>ArrReport</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_arrreport</name>
  		<replaceName>ArrReport</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_arrreport</name>
  		<replaceName>ArrReport</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_arrreport</name>
  		<replaceName>ArrReport</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>arrreport_size</name>
  		<replaceName>ArrReport</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TArenaBattleReportData& arrreport(int index) const;
  inline ::pb::TArenaBattleReportData* mutable_arrreport(int index);
  inline ::pb::TArenaBattleReportData* add_arrreport();
  inline const ::google::protobuf::RepeatedPtrField< ::pb::TArenaBattleReportData >&
      arrreport() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb::TArenaBattleReportData >*
      mutable_arrreport();

  // @@protoc_insertion_point(class_scope:pb.TPlatformArenaGetArenaBattleReportRsp)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::pb::TArenaBattleReportData > arrreport_;
  friend void  protobuf_AddDesc_net_2fPlatformArena_2eproto();
  friend void protobuf_AssignDesc_net_2fPlatformArena_2eproto();
  friend void protobuf_ShutdownFile_net_2fPlatformArena_2eproto();

  void InitAsDefaultInstance();
  static TPlatformArenaGetArenaBattleReportRsp* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TPlatformArenaGetPeakInfoReq</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/PlatformArena.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TPlatformArenaGetPeakInfoReq : public ::google::protobuf::Message {
 public:
  TPlatformArenaGetPeakInfoReq();
  virtual ~TPlatformArenaGetPeakInfoReq();

  TPlatformArenaGetPeakInfoReq(const TPlatformArenaGetPeakInfoReq& from);

  inline TPlatformArenaGetPeakInfoReq& operator=(const TPlatformArenaGetPeakInfoReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TPlatformArenaGetPeakInfoReq& default_instance();

  void Swap(TPlatformArenaGetPeakInfoReq* other);

  // implements Message ----------------------------------------------

  TPlatformArenaGetPeakInfoReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TPlatformArenaGetPeakInfoReq& from);
  void MergeFrom(const TPlatformArenaGetPeakInfoReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 SeasonId = 1;
  inline bool has_seasonid() const;
  inline void clear_seasonid();
  static const int kSeasonIdFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TPlatformArenaGetPeakInfoReq</name>
  	<Function>
  		<name>seasonid</name>
  		<replaceName>SeasonId</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_seasonid</name>
  		<replaceName>SeasonId</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_seasonid</name>
  		<replaceName>SeasonId</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 seasonid() const;
  inline void set_seasonid(::google::protobuf::uint32 value);

  // optional uint32 GroupId = 2;
  inline bool has_groupid() const;
  inline void clear_groupid();
  static const int kGroupIdFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TPlatformArenaGetPeakInfoReq</name>
  	<Function>
  		<name>groupid</name>
  		<replaceName>GroupId</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_groupid</name>
  		<replaceName>GroupId</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_groupid</name>
  		<replaceName>GroupId</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 groupid() const;
  inline void set_groupid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:pb.TPlatformArenaGetPeakInfoReq)
 private:
  inline void set_has_seasonid();
  inline void clear_has_seasonid();
  inline void set_has_groupid();
  inline void clear_has_groupid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 seasonid_;
  ::google::protobuf::uint32 groupid_;
  friend void  protobuf_AddDesc_net_2fPlatformArena_2eproto();
  friend void protobuf_AssignDesc_net_2fPlatformArena_2eproto();
  friend void protobuf_ShutdownFile_net_2fPlatformArena_2eproto();

  void InitAsDefaultInstance();
  static TPlatformArenaGetPeakInfoReq* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TPlatformArenaPeakData</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/PlatformArena.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TPlatformArenaPeakData : public ::google::protobuf::Message {
 public:
  TPlatformArenaPeakData();
  virtual ~TPlatformArenaPeakData();

  TPlatformArenaPeakData(const TPlatformArenaPeakData& from);

  inline TPlatformArenaPeakData& operator=(const TPlatformArenaPeakData& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TPlatformArenaPeakData& default_instance();

  void Swap(TPlatformArenaPeakData* other);

  // implements Message ----------------------------------------------

  TPlatformArenaPeakData* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TPlatformArenaPeakData& from);
  void MergeFrom(const TPlatformArenaPeakData& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 MatchId = 1;
  inline bool has_matchid() const;
  inline void clear_matchid();
  static const int kMatchIdFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TPlatformArenaPeakData</name>
  	<Function>
  		<name>matchid</name>
  		<replaceName>MatchId</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_matchid</name>
  		<replaceName>MatchId</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_matchid</name>
  		<replaceName>MatchId</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 matchid() const;
  inline void set_matchid(::google::protobuf::uint32 value);

  // optional .pb.TUserSimpleInfo AtkUserInfo = 2;
  inline bool has_atkuserinfo() const;
  inline void clear_atkuserinfo();
  static const int kAtkUserInfoFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TPlatformArenaPeakData</name>
  	<Function>
  		<name>atkuserinfo</name>
  		<replaceName>AtkUserInfo</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_atkuserinfo</name>
  		<replaceName>AtkUserInfo</replaceName>
  		<handler>descripter = pb_set_message_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_allocated_atkuserinfo</name>
  		<replaceName>AtkUserInfo</replaceName>
  		<handler>descripter = pb_set_message_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_atkuserinfo</name>
  		<replaceName>AtkUserInfo</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TUserSimpleInfo& atkuserinfo() const;
  inline ::pb::TUserSimpleInfo* mutable_atkuserinfo();
  inline ::pb::TUserSimpleInfo* release_atkuserinfo();
  inline void set_allocated_atkuserinfo(::pb::TUserSimpleInfo* atkuserinfo);

  // optional .pb.TUserSimpleInfo DefUserInfo = 3;
  inline bool has_defuserinfo() const;
  inline void clear_defuserinfo();
  static const int kDefUserInfoFieldNumber = 3;
  /*FOR2LUA
  <Record>
  	<name>TPlatformArenaPeakData</name>
  	<Function>
  		<name>defuserinfo</name>
  		<replaceName>DefUserInfo</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_defuserinfo</name>
  		<replaceName>DefUserInfo</replaceName>
  		<handler>descripter = pb_set_message_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_allocated_defuserinfo</name>
  		<replaceName>DefUserInfo</replaceName>
  		<handler>descripter = pb_set_message_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_defuserinfo</name>
  		<replaceName>DefUserInfo</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TUserSimpleInfo& defuserinfo() const;
  inline ::pb::TUserSimpleInfo* mutable_defuserinfo();
  inline ::pb::TUserSimpleInfo* release_defuserinfo();
  inline void set_allocated_defuserinfo(::pb::TUserSimpleInfo* defuserinfo);

  // optional uint64 WinUid = 4;
  inline bool has_winuid() const;
  inline void clear_winuid();
  static const int kWinUidFieldNumber = 4;
  /*FOR2LUA
  <Record>
  	<name>TPlatformArenaPeakData</name>
  	<Function>
  		<name>winuid</name>
  		<replaceName>WinUid</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_winuid</name>
  		<replaceName>WinUid</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_winuid</name>
  		<replaceName>WinUid</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint64 winuid() const;
  inline void set_winuid(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:pb.TPlatformArenaPeakData)
 private:
  inline void set_has_matchid();
  inline void clear_has_matchid();
  inline void set_has_atkuserinfo();
  inline void clear_has_atkuserinfo();
  inline void set_has_defuserinfo();
  inline void clear_has_defuserinfo();
  inline void set_has_winuid();
  inline void clear_has_winuid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::pb::TUserSimpleInfo* atkuserinfo_;
  ::pb::TUserSimpleInfo* defuserinfo_;
  ::google::protobuf::uint64 winuid_;
  ::google::protobuf::uint32 matchid_;
  friend void  protobuf_AddDesc_net_2fPlatformArena_2eproto();
  friend void protobuf_AssignDesc_net_2fPlatformArena_2eproto();
  friend void protobuf_ShutdownFile_net_2fPlatformArena_2eproto();

  void InitAsDefaultInstance();
  static TPlatformArenaPeakData* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TPlatformArenaGetPeakInfoRsp</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/PlatformArena.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TPlatformArenaGetPeakInfoRsp : public ::google::protobuf::Message {
 public:
  TPlatformArenaGetPeakInfoRsp();
  virtual ~TPlatformArenaGetPeakInfoRsp();

  TPlatformArenaGetPeakInfoRsp(const TPlatformArenaGetPeakInfoRsp& from);

  inline TPlatformArenaGetPeakInfoRsp& operator=(const TPlatformArenaGetPeakInfoRsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TPlatformArenaGetPeakInfoRsp& default_instance();

  void Swap(TPlatformArenaGetPeakInfoRsp* other);

  // implements Message ----------------------------------------------

  TPlatformArenaGetPeakInfoRsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TPlatformArenaGetPeakInfoRsp& from);
  void MergeFrom(const TPlatformArenaGetPeakInfoRsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .pb.TPlatformArenaPeakData ArrPeakData = 1;
  inline int arrpeakdata_size() const;
  inline void clear_arrpeakdata();
  static const int kArrPeakDataFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TPlatformArenaGetPeakInfoRsp</name>
  	<Function>
  		<name>arrpeakdata</name>
  		<replaceName>ArrPeakData</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_arrpeakdata</name>
  		<replaceName>ArrPeakData</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_arrpeakdata</name>
  		<replaceName>ArrPeakData</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_arrpeakdata</name>
  		<replaceName>ArrPeakData</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>arrpeakdata_size</name>
  		<replaceName>ArrPeakData</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TPlatformArenaPeakData& arrpeakdata(int index) const;
  inline ::pb::TPlatformArenaPeakData* mutable_arrpeakdata(int index);
  inline ::pb::TPlatformArenaPeakData* add_arrpeakdata();
  inline const ::google::protobuf::RepeatedPtrField< ::pb::TPlatformArenaPeakData >&
      arrpeakdata() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb::TPlatformArenaPeakData >*
      mutable_arrpeakdata();

  // @@protoc_insertion_point(class_scope:pb.TPlatformArenaGetPeakInfoRsp)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::pb::TPlatformArenaPeakData > arrpeakdata_;
  friend void  protobuf_AddDesc_net_2fPlatformArena_2eproto();
  friend void protobuf_AssignDesc_net_2fPlatformArena_2eproto();
  friend void protobuf_ShutdownFile_net_2fPlatformArena_2eproto();

  void InitAsDefaultInstance();
  static TPlatformArenaGetPeakInfoRsp* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TPlatformArenaBeAtkNotify</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/PlatformArena.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TPlatformArenaBeAtkNotify : public ::google::protobuf::Message {
 public:
  TPlatformArenaBeAtkNotify();
  virtual ~TPlatformArenaBeAtkNotify();

  TPlatformArenaBeAtkNotify(const TPlatformArenaBeAtkNotify& from);

  inline TPlatformArenaBeAtkNotify& operator=(const TPlatformArenaBeAtkNotify& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TPlatformArenaBeAtkNotify& default_instance();

  void Swap(TPlatformArenaBeAtkNotify* other);

  // implements Message ----------------------------------------------

  TPlatformArenaBeAtkNotify* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TPlatformArenaBeAtkNotify& from);
  void MergeFrom(const TPlatformArenaBeAtkNotify& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 ArenaId = 1;
  inline bool has_arenaid() const;
  inline void clear_arenaid();
  static const int kArenaIdFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TPlatformArenaBeAtkNotify</name>
  	<Function>
  		<name>arenaid</name>
  		<replaceName>ArenaId</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_arenaid</name>
  		<replaceName>ArenaId</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_arenaid</name>
  		<replaceName>ArenaId</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 arenaid() const;
  inline void set_arenaid(::google::protobuf::uint32 value);

  // optional .pb.TUserSimpleInfo AtkUser = 2;
  inline bool has_atkuser() const;
  inline void clear_atkuser();
  static const int kAtkUserFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TPlatformArenaBeAtkNotify</name>
  	<Function>
  		<name>atkuser</name>
  		<replaceName>AtkUser</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_atkuser</name>
  		<replaceName>AtkUser</replaceName>
  		<handler>descripter = pb_set_message_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_allocated_atkuser</name>
  		<replaceName>AtkUser</replaceName>
  		<handler>descripter = pb_set_message_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_atkuser</name>
  		<replaceName>AtkUser</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TUserSimpleInfo& atkuser() const;
  inline ::pb::TUserSimpleInfo* mutable_atkuser();
  inline ::pb::TUserSimpleInfo* release_atkuser();
  inline void set_allocated_atkuser(::pb::TUserSimpleInfo* atkuser);

  // @@protoc_insertion_point(class_scope:pb.TPlatformArenaBeAtkNotify)
 private:
  inline void set_has_arenaid();
  inline void clear_has_arenaid();
  inline void set_has_atkuser();
  inline void clear_has_atkuser();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::pb::TUserSimpleInfo* atkuser_;
  ::google::protobuf::uint32 arenaid_;
  friend void  protobuf_AddDesc_net_2fPlatformArena_2eproto();
  friend void protobuf_AssignDesc_net_2fPlatformArena_2eproto();
  friend void protobuf_ShutdownFile_net_2fPlatformArena_2eproto();

  void InitAsDefaultInstance();
  static TPlatformArenaBeAtkNotify* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TPlatformArenaLeaveMessageReq</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/PlatformArena.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TPlatformArenaLeaveMessageReq : public ::google::protobuf::Message {
 public:
  TPlatformArenaLeaveMessageReq();
  virtual ~TPlatformArenaLeaveMessageReq();

  TPlatformArenaLeaveMessageReq(const TPlatformArenaLeaveMessageReq& from);

  inline TPlatformArenaLeaveMessageReq& operator=(const TPlatformArenaLeaveMessageReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TPlatformArenaLeaveMessageReq& default_instance();

  void Swap(TPlatformArenaLeaveMessageReq* other);

  // implements Message ----------------------------------------------

  TPlatformArenaLeaveMessageReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TPlatformArenaLeaveMessageReq& from);
  void MergeFrom(const TPlatformArenaLeaveMessageReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 MatchId = 1;
  inline bool has_matchid() const;
  inline void clear_matchid();
  static const int kMatchIdFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TPlatformArenaLeaveMessageReq</name>
  	<Function>
  		<name>matchid</name>
  		<replaceName>MatchId</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_matchid</name>
  		<replaceName>MatchId</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_matchid</name>
  		<replaceName>MatchId</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 matchid() const;
  inline void set_matchid(::google::protobuf::uint32 value);

  // optional string Content = 2;
  inline bool has_content() const;
  inline void clear_content();
  static const int kContentFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TPlatformArenaLeaveMessageReq</name>
  	<Function>
  		<name>content</name>
  		<replaceName>Content</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_content</name>
  		<replaceName>Content</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_content</name>
  		<replaceName>Content</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::std::string& content() const;
  inline void set_content(const ::std::string& value);
  inline void set_content(const char* value);
  inline void set_content(const char* value, size_t size);
  inline ::std::string* mutable_content();
  inline ::std::string* release_content();
  inline void set_allocated_content(::std::string* content);

  // @@protoc_insertion_point(class_scope:pb.TPlatformArenaLeaveMessageReq)
 private:
  inline void set_has_matchid();
  inline void clear_has_matchid();
  inline void set_has_content();
  inline void clear_has_content();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* content_;
  ::google::protobuf::uint32 matchid_;
  friend void  protobuf_AddDesc_net_2fPlatformArena_2eproto();
  friend void protobuf_AssignDesc_net_2fPlatformArena_2eproto();
  friend void protobuf_ShutdownFile_net_2fPlatformArena_2eproto();

  void InitAsDefaultInstance();
  static TPlatformArenaLeaveMessageReq* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TPlatformArenaDelLeaveMessageReq</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/PlatformArena.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TPlatformArenaDelLeaveMessageReq : public ::google::protobuf::Message {
 public:
  TPlatformArenaDelLeaveMessageReq();
  virtual ~TPlatformArenaDelLeaveMessageReq();

  TPlatformArenaDelLeaveMessageReq(const TPlatformArenaDelLeaveMessageReq& from);

  inline TPlatformArenaDelLeaveMessageReq& operator=(const TPlatformArenaDelLeaveMessageReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TPlatformArenaDelLeaveMessageReq& default_instance();

  void Swap(TPlatformArenaDelLeaveMessageReq* other);

  // implements Message ----------------------------------------------

  TPlatformArenaDelLeaveMessageReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TPlatformArenaDelLeaveMessageReq& from);
  void MergeFrom(const TPlatformArenaDelLeaveMessageReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 MatchId = 1;
  inline bool has_matchid() const;
  inline void clear_matchid();
  static const int kMatchIdFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TPlatformArenaDelLeaveMessageReq</name>
  	<Function>
  		<name>matchid</name>
  		<replaceName>MatchId</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_matchid</name>
  		<replaceName>MatchId</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_matchid</name>
  		<replaceName>MatchId</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 matchid() const;
  inline void set_matchid(::google::protobuf::uint32 value);

  // optional uint32 MsgId = 2;
  inline bool has_msgid() const;
  inline void clear_msgid();
  static const int kMsgIdFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TPlatformArenaDelLeaveMessageReq</name>
  	<Function>
  		<name>msgid</name>
  		<replaceName>MsgId</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_msgid</name>
  		<replaceName>MsgId</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_msgid</name>
  		<replaceName>MsgId</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 msgid() const;
  inline void set_msgid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:pb.TPlatformArenaDelLeaveMessageReq)
 private:
  inline void set_has_matchid();
  inline void clear_has_matchid();
  inline void set_has_msgid();
  inline void clear_has_msgid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 matchid_;
  ::google::protobuf::uint32 msgid_;
  friend void  protobuf_AddDesc_net_2fPlatformArena_2eproto();
  friend void protobuf_AssignDesc_net_2fPlatformArena_2eproto();
  friend void protobuf_ShutdownFile_net_2fPlatformArena_2eproto();

  void InitAsDefaultInstance();
  static TPlatformArenaDelLeaveMessageReq* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TPlatformArenaThumbLeaveMessageReq</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/PlatformArena.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TPlatformArenaThumbLeaveMessageReq : public ::google::protobuf::Message {
 public:
  TPlatformArenaThumbLeaveMessageReq();
  virtual ~TPlatformArenaThumbLeaveMessageReq();

  TPlatformArenaThumbLeaveMessageReq(const TPlatformArenaThumbLeaveMessageReq& from);

  inline TPlatformArenaThumbLeaveMessageReq& operator=(const TPlatformArenaThumbLeaveMessageReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TPlatformArenaThumbLeaveMessageReq& default_instance();

  void Swap(TPlatformArenaThumbLeaveMessageReq* other);

  // implements Message ----------------------------------------------

  TPlatformArenaThumbLeaveMessageReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TPlatformArenaThumbLeaveMessageReq& from);
  void MergeFrom(const TPlatformArenaThumbLeaveMessageReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 MatchId = 1;
  inline bool has_matchid() const;
  inline void clear_matchid();
  static const int kMatchIdFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TPlatformArenaThumbLeaveMessageReq</name>
  	<Function>
  		<name>matchid</name>
  		<replaceName>MatchId</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_matchid</name>
  		<replaceName>MatchId</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_matchid</name>
  		<replaceName>MatchId</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 matchid() const;
  inline void set_matchid(::google::protobuf::uint32 value);

  // optional uint32 MsgId = 2;
  inline bool has_msgid() const;
  inline void clear_msgid();
  static const int kMsgIdFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TPlatformArenaThumbLeaveMessageReq</name>
  	<Function>
  		<name>msgid</name>
  		<replaceName>MsgId</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_msgid</name>
  		<replaceName>MsgId</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_msgid</name>
  		<replaceName>MsgId</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 msgid() const;
  inline void set_msgid(::google::protobuf::uint32 value);

  // optional uint32 ThumbType = 3;
  inline bool has_thumbtype() const;
  inline void clear_thumbtype();
  static const int kThumbTypeFieldNumber = 3;
  /*FOR2LUA
  <Record>
  	<name>TPlatformArenaThumbLeaveMessageReq</name>
  	<Function>
  		<name>thumbtype</name>
  		<replaceName>ThumbType</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_thumbtype</name>
  		<replaceName>ThumbType</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_thumbtype</name>
  		<replaceName>ThumbType</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 thumbtype() const;
  inline void set_thumbtype(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:pb.TPlatformArenaThumbLeaveMessageReq)
 private:
  inline void set_has_matchid();
  inline void clear_has_matchid();
  inline void set_has_msgid();
  inline void clear_has_msgid();
  inline void set_has_thumbtype();
  inline void clear_has_thumbtype();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 matchid_;
  ::google::protobuf::uint32 msgid_;
  ::google::protobuf::uint32 thumbtype_;
  friend void  protobuf_AddDesc_net_2fPlatformArena_2eproto();
  friend void protobuf_AssignDesc_net_2fPlatformArena_2eproto();
  friend void protobuf_ShutdownFile_net_2fPlatformArena_2eproto();

  void InitAsDefaultInstance();
  static TPlatformArenaThumbLeaveMessageReq* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TPlatformArenaThumbLeaveMessageRsp</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/PlatformArena.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TPlatformArenaThumbLeaveMessageRsp : public ::google::protobuf::Message {
 public:
  TPlatformArenaThumbLeaveMessageRsp();
  virtual ~TPlatformArenaThumbLeaveMessageRsp();

  TPlatformArenaThumbLeaveMessageRsp(const TPlatformArenaThumbLeaveMessageRsp& from);

  inline TPlatformArenaThumbLeaveMessageRsp& operator=(const TPlatformArenaThumbLeaveMessageRsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TPlatformArenaThumbLeaveMessageRsp& default_instance();

  void Swap(TPlatformArenaThumbLeaveMessageRsp* other);

  // implements Message ----------------------------------------------

  TPlatformArenaThumbLeaveMessageRsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TPlatformArenaThumbLeaveMessageRsp& from);
  void MergeFrom(const TPlatformArenaThumbLeaveMessageRsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 RetCode = 1;
  inline bool has_retcode() const;
  inline void clear_retcode();
  static const int kRetCodeFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TPlatformArenaThumbLeaveMessageRsp</name>
  	<Function>
  		<name>retcode</name>
  		<replaceName>RetCode</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_retcode</name>
  		<replaceName>RetCode</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_retcode</name>
  		<replaceName>RetCode</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 retcode() const;
  inline void set_retcode(::google::protobuf::uint32 value);

  // optional uint32 ThumbNum = 2;
  inline bool has_thumbnum() const;
  inline void clear_thumbnum();
  static const int kThumbNumFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TPlatformArenaThumbLeaveMessageRsp</name>
  	<Function>
  		<name>thumbnum</name>
  		<replaceName>ThumbNum</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_thumbnum</name>
  		<replaceName>ThumbNum</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_thumbnum</name>
  		<replaceName>ThumbNum</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 thumbnum() const;
  inline void set_thumbnum(::google::protobuf::uint32 value);

  // optional uint32 NonThumbNum = 3;
  inline bool has_nonthumbnum() const;
  inline void clear_nonthumbnum();
  static const int kNonThumbNumFieldNumber = 3;
  /*FOR2LUA
  <Record>
  	<name>TPlatformArenaThumbLeaveMessageRsp</name>
  	<Function>
  		<name>nonthumbnum</name>
  		<replaceName>NonThumbNum</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_nonthumbnum</name>
  		<replaceName>NonThumbNum</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_nonthumbnum</name>
  		<replaceName>NonThumbNum</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 nonthumbnum() const;
  inline void set_nonthumbnum(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:pb.TPlatformArenaThumbLeaveMessageRsp)
 private:
  inline void set_has_retcode();
  inline void clear_has_retcode();
  inline void set_has_thumbnum();
  inline void clear_has_thumbnum();
  inline void set_has_nonthumbnum();
  inline void clear_has_nonthumbnum();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 retcode_;
  ::google::protobuf::uint32 thumbnum_;
  ::google::protobuf::uint32 nonthumbnum_;
  friend void  protobuf_AddDesc_net_2fPlatformArena_2eproto();
  friend void protobuf_AssignDesc_net_2fPlatformArena_2eproto();
  friend void protobuf_ShutdownFile_net_2fPlatformArena_2eproto();

  void InitAsDefaultInstance();
  static TPlatformArenaThumbLeaveMessageRsp* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TPlatformArenaGetLeaveMessageLstReq</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/PlatformArena.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TPlatformArenaGetLeaveMessageLstReq : public ::google::protobuf::Message {
 public:
  TPlatformArenaGetLeaveMessageLstReq();
  virtual ~TPlatformArenaGetLeaveMessageLstReq();

  TPlatformArenaGetLeaveMessageLstReq(const TPlatformArenaGetLeaveMessageLstReq& from);

  inline TPlatformArenaGetLeaveMessageLstReq& operator=(const TPlatformArenaGetLeaveMessageLstReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TPlatformArenaGetLeaveMessageLstReq& default_instance();

  void Swap(TPlatformArenaGetLeaveMessageLstReq* other);

  // implements Message ----------------------------------------------

  TPlatformArenaGetLeaveMessageLstReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TPlatformArenaGetLeaveMessageLstReq& from);
  void MergeFrom(const TPlatformArenaGetLeaveMessageLstReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 MatchId = 1;
  inline bool has_matchid() const;
  inline void clear_matchid();
  static const int kMatchIdFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TPlatformArenaGetLeaveMessageLstReq</name>
  	<Function>
  		<name>matchid</name>
  		<replaceName>MatchId</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_matchid</name>
  		<replaceName>MatchId</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_matchid</name>
  		<replaceName>MatchId</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 matchid() const;
  inline void set_matchid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:pb.TPlatformArenaGetLeaveMessageLstReq)
 private:
  inline void set_has_matchid();
  inline void clear_has_matchid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 matchid_;
  friend void  protobuf_AddDesc_net_2fPlatformArena_2eproto();
  friend void protobuf_AssignDesc_net_2fPlatformArena_2eproto();
  friend void protobuf_ShutdownFile_net_2fPlatformArena_2eproto();

  void InitAsDefaultInstance();
  static TPlatformArenaGetLeaveMessageLstReq* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TPlatformArenaLeaveMessageData</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/PlatformArena.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TPlatformArenaLeaveMessageData : public ::google::protobuf::Message {
 public:
  TPlatformArenaLeaveMessageData();
  virtual ~TPlatformArenaLeaveMessageData();

  TPlatformArenaLeaveMessageData(const TPlatformArenaLeaveMessageData& from);

  inline TPlatformArenaLeaveMessageData& operator=(const TPlatformArenaLeaveMessageData& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TPlatformArenaLeaveMessageData& default_instance();

  void Swap(TPlatformArenaLeaveMessageData* other);

  // implements Message ----------------------------------------------

  TPlatformArenaLeaveMessageData* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TPlatformArenaLeaveMessageData& from);
  void MergeFrom(const TPlatformArenaLeaveMessageData& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 MsgId = 1;
  inline bool has_msgid() const;
  inline void clear_msgid();
  static const int kMsgIdFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TPlatformArenaLeaveMessageData</name>
  	<Function>
  		<name>msgid</name>
  		<replaceName>MsgId</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_msgid</name>
  		<replaceName>MsgId</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_msgid</name>
  		<replaceName>MsgId</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 msgid() const;
  inline void set_msgid(::google::protobuf::uint32 value);

  // optional string Content = 2;
  inline bool has_content() const;
  inline void clear_content();
  static const int kContentFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TPlatformArenaLeaveMessageData</name>
  	<Function>
  		<name>content</name>
  		<replaceName>Content</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_content</name>
  		<replaceName>Content</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_content</name>
  		<replaceName>Content</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::std::string& content() const;
  inline void set_content(const ::std::string& value);
  inline void set_content(const char* value);
  inline void set_content(const char* value, size_t size);
  inline ::std::string* mutable_content();
  inline ::std::string* release_content();
  inline void set_allocated_content(::std::string* content);

  // optional .pb.TUserSimpleInfo LeaveUser = 3;
  inline bool has_leaveuser() const;
  inline void clear_leaveuser();
  static const int kLeaveUserFieldNumber = 3;
  /*FOR2LUA
  <Record>
  	<name>TPlatformArenaLeaveMessageData</name>
  	<Function>
  		<name>leaveuser</name>
  		<replaceName>LeaveUser</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_leaveuser</name>
  		<replaceName>LeaveUser</replaceName>
  		<handler>descripter = pb_set_message_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_allocated_leaveuser</name>
  		<replaceName>LeaveUser</replaceName>
  		<handler>descripter = pb_set_message_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_leaveuser</name>
  		<replaceName>LeaveUser</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TUserSimpleInfo& leaveuser() const;
  inline ::pb::TUserSimpleInfo* mutable_leaveuser();
  inline ::pb::TUserSimpleInfo* release_leaveuser();
  inline void set_allocated_leaveuser(::pb::TUserSimpleInfo* leaveuser);

  // optional uint32 ThumbNum = 4;
  inline bool has_thumbnum() const;
  inline void clear_thumbnum();
  static const int kThumbNumFieldNumber = 4;
  /*FOR2LUA
  <Record>
  	<name>TPlatformArenaLeaveMessageData</name>
  	<Function>
  		<name>thumbnum</name>
  		<replaceName>ThumbNum</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_thumbnum</name>
  		<replaceName>ThumbNum</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_thumbnum</name>
  		<replaceName>ThumbNum</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 thumbnum() const;
  inline void set_thumbnum(::google::protobuf::uint32 value);

  // optional uint32 NonThumbNum = 5;
  inline bool has_nonthumbnum() const;
  inline void clear_nonthumbnum();
  static const int kNonThumbNumFieldNumber = 5;
  /*FOR2LUA
  <Record>
  	<name>TPlatformArenaLeaveMessageData</name>
  	<Function>
  		<name>nonthumbnum</name>
  		<replaceName>NonThumbNum</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_nonthumbnum</name>
  		<replaceName>NonThumbNum</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_nonthumbnum</name>
  		<replaceName>NonThumbNum</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 nonthumbnum() const;
  inline void set_nonthumbnum(::google::protobuf::uint32 value);

  // optional uint32 ThumbStatus = 6;
  inline bool has_thumbstatus() const;
  inline void clear_thumbstatus();
  static const int kThumbStatusFieldNumber = 6;
  /*FOR2LUA
  <Record>
  	<name>TPlatformArenaLeaveMessageData</name>
  	<Function>
  		<name>thumbstatus</name>
  		<replaceName>ThumbStatus</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_thumbstatus</name>
  		<replaceName>ThumbStatus</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_thumbstatus</name>
  		<replaceName>ThumbStatus</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 thumbstatus() const;
  inline void set_thumbstatus(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:pb.TPlatformArenaLeaveMessageData)
 private:
  inline void set_has_msgid();
  inline void clear_has_msgid();
  inline void set_has_content();
  inline void clear_has_content();
  inline void set_has_leaveuser();
  inline void clear_has_leaveuser();
  inline void set_has_thumbnum();
  inline void clear_has_thumbnum();
  inline void set_has_nonthumbnum();
  inline void clear_has_nonthumbnum();
  inline void set_has_thumbstatus();
  inline void clear_has_thumbstatus();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* content_;
  ::google::protobuf::uint32 msgid_;
  ::google::protobuf::uint32 thumbnum_;
  ::pb::TUserSimpleInfo* leaveuser_;
  ::google::protobuf::uint32 nonthumbnum_;
  ::google::protobuf::uint32 thumbstatus_;
  friend void  protobuf_AddDesc_net_2fPlatformArena_2eproto();
  friend void protobuf_AssignDesc_net_2fPlatformArena_2eproto();
  friend void protobuf_ShutdownFile_net_2fPlatformArena_2eproto();

  void InitAsDefaultInstance();
  static TPlatformArenaLeaveMessageData* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TPlatformArenaGetLeaveMessageLstRsp</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/PlatformArena.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TPlatformArenaGetLeaveMessageLstRsp : public ::google::protobuf::Message {
 public:
  TPlatformArenaGetLeaveMessageLstRsp();
  virtual ~TPlatformArenaGetLeaveMessageLstRsp();

  TPlatformArenaGetLeaveMessageLstRsp(const TPlatformArenaGetLeaveMessageLstRsp& from);

  inline TPlatformArenaGetLeaveMessageLstRsp& operator=(const TPlatformArenaGetLeaveMessageLstRsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TPlatformArenaGetLeaveMessageLstRsp& default_instance();

  void Swap(TPlatformArenaGetLeaveMessageLstRsp* other);

  // implements Message ----------------------------------------------

  TPlatformArenaGetLeaveMessageLstRsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TPlatformArenaGetLeaveMessageLstRsp& from);
  void MergeFrom(const TPlatformArenaGetLeaveMessageLstRsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .pb.TPlatformArenaLeaveMessageData MsgLst = 1;
  inline int msglst_size() const;
  inline void clear_msglst();
  static const int kMsgLstFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TPlatformArenaGetLeaveMessageLstRsp</name>
  	<Function>
  		<name>msglst</name>
  		<replaceName>MsgLst</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_msglst</name>
  		<replaceName>MsgLst</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_msglst</name>
  		<replaceName>MsgLst</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_msglst</name>
  		<replaceName>MsgLst</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>msglst_size</name>
  		<replaceName>MsgLst</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TPlatformArenaLeaveMessageData& msglst(int index) const;
  inline ::pb::TPlatformArenaLeaveMessageData* mutable_msglst(int index);
  inline ::pb::TPlatformArenaLeaveMessageData* add_msglst();
  inline const ::google::protobuf::RepeatedPtrField< ::pb::TPlatformArenaLeaveMessageData >&
      msglst() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb::TPlatformArenaLeaveMessageData >*
      mutable_msglst();

  // @@protoc_insertion_point(class_scope:pb.TPlatformArenaGetLeaveMessageLstRsp)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::pb::TPlatformArenaLeaveMessageData > msglst_;
  friend void  protobuf_AddDesc_net_2fPlatformArena_2eproto();
  friend void protobuf_AssignDesc_net_2fPlatformArena_2eproto();
  friend void protobuf_ShutdownFile_net_2fPlatformArena_2eproto();

  void InitAsDefaultInstance();
  static TPlatformArenaGetLeaveMessageLstRsp* default_instance_;
};
// ===================================================================


// ===================================================================

// TPlatformArenaExpectProcess

// optional uint32 Round = 1;
inline bool TPlatformArenaExpectProcess::has_round() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TPlatformArenaExpectProcess::set_has_round() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TPlatformArenaExpectProcess::clear_has_round() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TPlatformArenaExpectProcess::clear_round() {
  round_ = 0u;
  clear_has_round();
}
inline ::google::protobuf::uint32 TPlatformArenaExpectProcess::round() const {
  // @@protoc_insertion_point(field_get:pb.TPlatformArenaExpectProcess.Round)
  return round_;
}
inline void TPlatformArenaExpectProcess::set_round(::google::protobuf::uint32 value) {
  set_has_round();
  round_ = value;
  // @@protoc_insertion_point(field_set:pb.TPlatformArenaExpectProcess.Round)
}

// optional .pb.EPlatformArenaStage Stage = 2;
inline bool TPlatformArenaExpectProcess::has_stage() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TPlatformArenaExpectProcess::set_has_stage() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TPlatformArenaExpectProcess::clear_has_stage() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TPlatformArenaExpectProcess::clear_stage() {
  stage_ = 0;
  clear_has_stage();
}
inline ::pb::EPlatformArenaStage TPlatformArenaExpectProcess::stage() const {
  // @@protoc_insertion_point(field_get:pb.TPlatformArenaExpectProcess.Stage)
  return static_cast< ::pb::EPlatformArenaStage >(stage_);
}
inline void TPlatformArenaExpectProcess::set_stage(::pb::EPlatformArenaStage value) {
  assert(::pb::EPlatformArenaStage_IsValid(value));
  set_has_stage();
  stage_ = value;
  // @@protoc_insertion_point(field_set:pb.TPlatformArenaExpectProcess.Stage)
}

// optional uint64 BegTime = 3;
inline bool TPlatformArenaExpectProcess::has_begtime() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void TPlatformArenaExpectProcess::set_has_begtime() {
  _has_bits_[0] |= 0x00000004u;
}
inline void TPlatformArenaExpectProcess::clear_has_begtime() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void TPlatformArenaExpectProcess::clear_begtime() {
  begtime_ = GOOGLE_ULONGLONG(0);
  clear_has_begtime();
}
inline ::google::protobuf::uint64 TPlatformArenaExpectProcess::begtime() const {
  // @@protoc_insertion_point(field_get:pb.TPlatformArenaExpectProcess.BegTime)
  return begtime_;
}
inline void TPlatformArenaExpectProcess::set_begtime(::google::protobuf::uint64 value) {
  set_has_begtime();
  begtime_ = value;
  // @@protoc_insertion_point(field_set:pb.TPlatformArenaExpectProcess.BegTime)
}

// optional uint64 EndTime = 4;
inline bool TPlatformArenaExpectProcess::has_endtime() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void TPlatformArenaExpectProcess::set_has_endtime() {
  _has_bits_[0] |= 0x00000008u;
}
inline void TPlatformArenaExpectProcess::clear_has_endtime() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void TPlatformArenaExpectProcess::clear_endtime() {
  endtime_ = GOOGLE_ULONGLONG(0);
  clear_has_endtime();
}
inline ::google::protobuf::uint64 TPlatformArenaExpectProcess::endtime() const {
  // @@protoc_insertion_point(field_get:pb.TPlatformArenaExpectProcess.EndTime)
  return endtime_;
}
inline void TPlatformArenaExpectProcess::set_endtime(::google::protobuf::uint64 value) {
  set_has_endtime();
  endtime_ = value;
  // @@protoc_insertion_point(field_set:pb.TPlatformArenaExpectProcess.EndTime)
}

// -------------------------------------------------------------------

// TPlatformArenaActualProcess

// optional .pb.TPlatformArenaExpectProcess ExpectProcess = 1;
inline bool TPlatformArenaActualProcess::has_expectprocess() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TPlatformArenaActualProcess::set_has_expectprocess() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TPlatformArenaActualProcess::clear_has_expectprocess() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TPlatformArenaActualProcess::clear_expectprocess() {
  if (expectprocess_ != NULL) expectprocess_->::pb::TPlatformArenaExpectProcess::Clear();
  clear_has_expectprocess();
}
inline const ::pb::TPlatformArenaExpectProcess& TPlatformArenaActualProcess::expectprocess() const {
  // @@protoc_insertion_point(field_get:pb.TPlatformArenaActualProcess.ExpectProcess)
  return expectprocess_ != NULL ? *expectprocess_ : *default_instance_->expectprocess_;
}
inline ::pb::TPlatformArenaExpectProcess* TPlatformArenaActualProcess::mutable_expectprocess() {
  set_has_expectprocess();
  if (expectprocess_ == NULL) expectprocess_ = new ::pb::TPlatformArenaExpectProcess;
  // @@protoc_insertion_point(field_mutable:pb.TPlatformArenaActualProcess.ExpectProcess)
  return expectprocess_;
}
inline ::pb::TPlatformArenaExpectProcess* TPlatformArenaActualProcess::release_expectprocess() {
  clear_has_expectprocess();
  ::pb::TPlatformArenaExpectProcess* temp = expectprocess_;
  expectprocess_ = NULL;
  return temp;
}
inline void TPlatformArenaActualProcess::set_allocated_expectprocess(::pb::TPlatformArenaExpectProcess* expectprocess) {
  delete expectprocess_;
  expectprocess_ = expectprocess;
  if (expectprocess) {
    set_has_expectprocess();
  } else {
    clear_has_expectprocess();
  }
  // @@protoc_insertion_point(field_set_allocated:pb.TPlatformArenaActualProcess.ExpectProcess)
}

// optional uint64 DoneTime = 2;
inline bool TPlatformArenaActualProcess::has_donetime() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TPlatformArenaActualProcess::set_has_donetime() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TPlatformArenaActualProcess::clear_has_donetime() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TPlatformArenaActualProcess::clear_donetime() {
  donetime_ = GOOGLE_ULONGLONG(0);
  clear_has_donetime();
}
inline ::google::protobuf::uint64 TPlatformArenaActualProcess::donetime() const {
  // @@protoc_insertion_point(field_get:pb.TPlatformArenaActualProcess.DoneTime)
  return donetime_;
}
inline void TPlatformArenaActualProcess::set_donetime(::google::protobuf::uint64 value) {
  set_has_donetime();
  donetime_ = value;
  // @@protoc_insertion_point(field_set:pb.TPlatformArenaActualProcess.DoneTime)
}

// -------------------------------------------------------------------

// TPlatformArenaGetBaseInfoRsp

// repeated .pb.TPlatformArenaExpectProcess ArrExpectProcess = 1;
inline int TPlatformArenaGetBaseInfoRsp::arrexpectprocess_size() const {
  return arrexpectprocess_.size();
}
inline void TPlatformArenaGetBaseInfoRsp::clear_arrexpectprocess() {
  arrexpectprocess_.Clear();
}
inline const ::pb::TPlatformArenaExpectProcess& TPlatformArenaGetBaseInfoRsp::arrexpectprocess(int index) const {
  // @@protoc_insertion_point(field_get:pb.TPlatformArenaGetBaseInfoRsp.ArrExpectProcess)
  return arrexpectprocess_.Get(index);
}
inline ::pb::TPlatformArenaExpectProcess* TPlatformArenaGetBaseInfoRsp::mutable_arrexpectprocess(int index) {
  // @@protoc_insertion_point(field_mutable:pb.TPlatformArenaGetBaseInfoRsp.ArrExpectProcess)
  return arrexpectprocess_.Mutable(index);
}
inline ::pb::TPlatformArenaExpectProcess* TPlatformArenaGetBaseInfoRsp::add_arrexpectprocess() {
  // @@protoc_insertion_point(field_add:pb.TPlatformArenaGetBaseInfoRsp.ArrExpectProcess)
  return arrexpectprocess_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::TPlatformArenaExpectProcess >&
TPlatformArenaGetBaseInfoRsp::arrexpectprocess() const {
  // @@protoc_insertion_point(field_list:pb.TPlatformArenaGetBaseInfoRsp.ArrExpectProcess)
  return arrexpectprocess_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb::TPlatformArenaExpectProcess >*
TPlatformArenaGetBaseInfoRsp::mutable_arrexpectprocess() {
  // @@protoc_insertion_point(field_mutable_list:pb.TPlatformArenaGetBaseInfoRsp.ArrExpectProcess)
  return &arrexpectprocess_;
}

// optional bool FuncOpen = 2;
inline bool TPlatformArenaGetBaseInfoRsp::has_funcopen() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TPlatformArenaGetBaseInfoRsp::set_has_funcopen() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TPlatformArenaGetBaseInfoRsp::clear_has_funcopen() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TPlatformArenaGetBaseInfoRsp::clear_funcopen() {
  funcopen_ = false;
  clear_has_funcopen();
}
inline bool TPlatformArenaGetBaseInfoRsp::funcopen() const {
  // @@protoc_insertion_point(field_get:pb.TPlatformArenaGetBaseInfoRsp.FuncOpen)
  return funcopen_;
}
inline void TPlatformArenaGetBaseInfoRsp::set_funcopen(bool value) {
  set_has_funcopen();
  funcopen_ = value;
  // @@protoc_insertion_point(field_set:pb.TPlatformArenaGetBaseInfoRsp.FuncOpen)
}

// optional .pb.TPlatformArenaActualProcess ActualProcess = 3;
inline bool TPlatformArenaGetBaseInfoRsp::has_actualprocess() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void TPlatformArenaGetBaseInfoRsp::set_has_actualprocess() {
  _has_bits_[0] |= 0x00000004u;
}
inline void TPlatformArenaGetBaseInfoRsp::clear_has_actualprocess() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void TPlatformArenaGetBaseInfoRsp::clear_actualprocess() {
  if (actualprocess_ != NULL) actualprocess_->::pb::TPlatformArenaActualProcess::Clear();
  clear_has_actualprocess();
}
inline const ::pb::TPlatformArenaActualProcess& TPlatformArenaGetBaseInfoRsp::actualprocess() const {
  // @@protoc_insertion_point(field_get:pb.TPlatformArenaGetBaseInfoRsp.ActualProcess)
  return actualprocess_ != NULL ? *actualprocess_ : *default_instance_->actualprocess_;
}
inline ::pb::TPlatformArenaActualProcess* TPlatformArenaGetBaseInfoRsp::mutable_actualprocess() {
  set_has_actualprocess();
  if (actualprocess_ == NULL) actualprocess_ = new ::pb::TPlatformArenaActualProcess;
  // @@protoc_insertion_point(field_mutable:pb.TPlatformArenaGetBaseInfoRsp.ActualProcess)
  return actualprocess_;
}
inline ::pb::TPlatformArenaActualProcess* TPlatformArenaGetBaseInfoRsp::release_actualprocess() {
  clear_has_actualprocess();
  ::pb::TPlatformArenaActualProcess* temp = actualprocess_;
  actualprocess_ = NULL;
  return temp;
}
inline void TPlatformArenaGetBaseInfoRsp::set_allocated_actualprocess(::pb::TPlatformArenaActualProcess* actualprocess) {
  delete actualprocess_;
  actualprocess_ = actualprocess;
  if (actualprocess) {
    set_has_actualprocess();
  } else {
    clear_has_actualprocess();
  }
  // @@protoc_insertion_point(field_set_allocated:pb.TPlatformArenaGetBaseInfoRsp.ActualProcess)
}

// optional uint32 SeasonId = 4;
inline bool TPlatformArenaGetBaseInfoRsp::has_seasonid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void TPlatformArenaGetBaseInfoRsp::set_has_seasonid() {
  _has_bits_[0] |= 0x00000008u;
}
inline void TPlatformArenaGetBaseInfoRsp::clear_has_seasonid() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void TPlatformArenaGetBaseInfoRsp::clear_seasonid() {
  seasonid_ = 0u;
  clear_has_seasonid();
}
inline ::google::protobuf::uint32 TPlatformArenaGetBaseInfoRsp::seasonid() const {
  // @@protoc_insertion_point(field_get:pb.TPlatformArenaGetBaseInfoRsp.SeasonId)
  return seasonid_;
}
inline void TPlatformArenaGetBaseInfoRsp::set_seasonid(::google::protobuf::uint32 value) {
  set_has_seasonid();
  seasonid_ = value;
  // @@protoc_insertion_point(field_set:pb.TPlatformArenaGetBaseInfoRsp.SeasonId)
}

// optional uint32 GroupId = 5;
inline bool TPlatformArenaGetBaseInfoRsp::has_groupid() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void TPlatformArenaGetBaseInfoRsp::set_has_groupid() {
  _has_bits_[0] |= 0x00000010u;
}
inline void TPlatformArenaGetBaseInfoRsp::clear_has_groupid() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void TPlatformArenaGetBaseInfoRsp::clear_groupid() {
  groupid_ = 0u;
  clear_has_groupid();
}
inline ::google::protobuf::uint32 TPlatformArenaGetBaseInfoRsp::groupid() const {
  // @@protoc_insertion_point(field_get:pb.TPlatformArenaGetBaseInfoRsp.GroupId)
  return groupid_;
}
inline void TPlatformArenaGetBaseInfoRsp::set_groupid(::google::protobuf::uint32 value) {
  set_has_groupid();
  groupid_ = value;
  // @@protoc_insertion_point(field_set:pb.TPlatformArenaGetBaseInfoRsp.GroupId)
}

// optional uint32 TodayThumbNum = 6;
inline bool TPlatformArenaGetBaseInfoRsp::has_todaythumbnum() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void TPlatformArenaGetBaseInfoRsp::set_has_todaythumbnum() {
  _has_bits_[0] |= 0x00000020u;
}
inline void TPlatformArenaGetBaseInfoRsp::clear_has_todaythumbnum() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void TPlatformArenaGetBaseInfoRsp::clear_todaythumbnum() {
  todaythumbnum_ = 0u;
  clear_has_todaythumbnum();
}
inline ::google::protobuf::uint32 TPlatformArenaGetBaseInfoRsp::todaythumbnum() const {
  // @@protoc_insertion_point(field_get:pb.TPlatformArenaGetBaseInfoRsp.TodayThumbNum)
  return todaythumbnum_;
}
inline void TPlatformArenaGetBaseInfoRsp::set_todaythumbnum(::google::protobuf::uint32 value) {
  set_has_todaythumbnum();
  todaythumbnum_ = value;
  // @@protoc_insertion_point(field_set:pb.TPlatformArenaGetBaseInfoRsp.TodayThumbNum)
}

// optional uint64 CoolTime = 7;
inline bool TPlatformArenaGetBaseInfoRsp::has_cooltime() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void TPlatformArenaGetBaseInfoRsp::set_has_cooltime() {
  _has_bits_[0] |= 0x00000040u;
}
inline void TPlatformArenaGetBaseInfoRsp::clear_has_cooltime() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void TPlatformArenaGetBaseInfoRsp::clear_cooltime() {
  cooltime_ = GOOGLE_ULONGLONG(0);
  clear_has_cooltime();
}
inline ::google::protobuf::uint64 TPlatformArenaGetBaseInfoRsp::cooltime() const {
  // @@protoc_insertion_point(field_get:pb.TPlatformArenaGetBaseInfoRsp.CoolTime)
  return cooltime_;
}
inline void TPlatformArenaGetBaseInfoRsp::set_cooltime(::google::protobuf::uint64 value) {
  set_has_cooltime();
  cooltime_ = value;
  // @@protoc_insertion_point(field_set:pb.TPlatformArenaGetBaseInfoRsp.CoolTime)
}

// optional string SceneId = 8;
inline bool TPlatformArenaGetBaseInfoRsp::has_sceneid() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void TPlatformArenaGetBaseInfoRsp::set_has_sceneid() {
  _has_bits_[0] |= 0x00000080u;
}
inline void TPlatformArenaGetBaseInfoRsp::clear_has_sceneid() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void TPlatformArenaGetBaseInfoRsp::clear_sceneid() {
  if (sceneid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    sceneid_->clear();
  }
  clear_has_sceneid();
}
inline const ::std::string& TPlatformArenaGetBaseInfoRsp::sceneid() const {
  // @@protoc_insertion_point(field_get:pb.TPlatformArenaGetBaseInfoRsp.SceneId)
  return *sceneid_;
}
inline void TPlatformArenaGetBaseInfoRsp::set_sceneid(const ::std::string& value) {
  set_has_sceneid();
  if (sceneid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    sceneid_ = new ::std::string;
  }
  sceneid_->assign(value);
  // @@protoc_insertion_point(field_set:pb.TPlatformArenaGetBaseInfoRsp.SceneId)
}
inline void TPlatformArenaGetBaseInfoRsp::set_sceneid(const char* value) {
  set_has_sceneid();
  if (sceneid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    sceneid_ = new ::std::string;
  }
  sceneid_->assign(value);
  // @@protoc_insertion_point(field_set_char:pb.TPlatformArenaGetBaseInfoRsp.SceneId)
}
inline void TPlatformArenaGetBaseInfoRsp::set_sceneid(const char* value, size_t size) {
  set_has_sceneid();
  if (sceneid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    sceneid_ = new ::std::string;
  }
  sceneid_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:pb.TPlatformArenaGetBaseInfoRsp.SceneId)
}
inline ::std::string* TPlatformArenaGetBaseInfoRsp::mutable_sceneid() {
  set_has_sceneid();
  if (sceneid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    sceneid_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:pb.TPlatformArenaGetBaseInfoRsp.SceneId)
  return sceneid_;
}
inline ::std::string* TPlatformArenaGetBaseInfoRsp::release_sceneid() {
  clear_has_sceneid();
  if (sceneid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = sceneid_;
    sceneid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void TPlatformArenaGetBaseInfoRsp::set_allocated_sceneid(::std::string* sceneid) {
  if (sceneid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete sceneid_;
  }
  if (sceneid) {
    set_has_sceneid();
    sceneid_ = sceneid;
  } else {
    clear_has_sceneid();
    sceneid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:pb.TPlatformArenaGetBaseInfoRsp.SceneId)
}

// optional uint64 SignTime = 9;
inline bool TPlatformArenaGetBaseInfoRsp::has_signtime() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void TPlatformArenaGetBaseInfoRsp::set_has_signtime() {
  _has_bits_[0] |= 0x00000100u;
}
inline void TPlatformArenaGetBaseInfoRsp::clear_has_signtime() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void TPlatformArenaGetBaseInfoRsp::clear_signtime() {
  signtime_ = GOOGLE_ULONGLONG(0);
  clear_has_signtime();
}
inline ::google::protobuf::uint64 TPlatformArenaGetBaseInfoRsp::signtime() const {
  // @@protoc_insertion_point(field_get:pb.TPlatformArenaGetBaseInfoRsp.SignTime)
  return signtime_;
}
inline void TPlatformArenaGetBaseInfoRsp::set_signtime(::google::protobuf::uint64 value) {
  set_has_signtime();
  signtime_ = value;
  // @@protoc_insertion_point(field_set:pb.TPlatformArenaGetBaseInfoRsp.SignTime)
}

// optional uint64 MaxFightForce = 10;
inline bool TPlatformArenaGetBaseInfoRsp::has_maxfightforce() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void TPlatformArenaGetBaseInfoRsp::set_has_maxfightforce() {
  _has_bits_[0] |= 0x00000200u;
}
inline void TPlatformArenaGetBaseInfoRsp::clear_has_maxfightforce() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void TPlatformArenaGetBaseInfoRsp::clear_maxfightforce() {
  maxfightforce_ = GOOGLE_ULONGLONG(0);
  clear_has_maxfightforce();
}
inline ::google::protobuf::uint64 TPlatformArenaGetBaseInfoRsp::maxfightforce() const {
  // @@protoc_insertion_point(field_get:pb.TPlatformArenaGetBaseInfoRsp.MaxFightForce)
  return maxfightforce_;
}
inline void TPlatformArenaGetBaseInfoRsp::set_maxfightforce(::google::protobuf::uint64 value) {
  set_has_maxfightforce();
  maxfightforce_ = value;
  // @@protoc_insertion_point(field_set:pb.TPlatformArenaGetBaseInfoRsp.MaxFightForce)
}

// optional uint64 NextSeasonStartTime = 11;
inline bool TPlatformArenaGetBaseInfoRsp::has_nextseasonstarttime() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void TPlatformArenaGetBaseInfoRsp::set_has_nextseasonstarttime() {
  _has_bits_[0] |= 0x00000400u;
}
inline void TPlatformArenaGetBaseInfoRsp::clear_has_nextseasonstarttime() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void TPlatformArenaGetBaseInfoRsp::clear_nextseasonstarttime() {
  nextseasonstarttime_ = GOOGLE_ULONGLONG(0);
  clear_has_nextseasonstarttime();
}
inline ::google::protobuf::uint64 TPlatformArenaGetBaseInfoRsp::nextseasonstarttime() const {
  // @@protoc_insertion_point(field_get:pb.TPlatformArenaGetBaseInfoRsp.NextSeasonStartTime)
  return nextseasonstarttime_;
}
inline void TPlatformArenaGetBaseInfoRsp::set_nextseasonstarttime(::google::protobuf::uint64 value) {
  set_has_nextseasonstarttime();
  nextseasonstarttime_ = value;
  // @@protoc_insertion_point(field_set:pb.TPlatformArenaGetBaseInfoRsp.NextSeasonStartTime)
}

// -------------------------------------------------------------------

// TPlatformArenaSignRsp

// optional uint64 SignTime = 1;
inline bool TPlatformArenaSignRsp::has_signtime() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TPlatformArenaSignRsp::set_has_signtime() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TPlatformArenaSignRsp::clear_has_signtime() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TPlatformArenaSignRsp::clear_signtime() {
  signtime_ = GOOGLE_ULONGLONG(0);
  clear_has_signtime();
}
inline ::google::protobuf::uint64 TPlatformArenaSignRsp::signtime() const {
  // @@protoc_insertion_point(field_get:pb.TPlatformArenaSignRsp.SignTime)
  return signtime_;
}
inline void TPlatformArenaSignRsp::set_signtime(::google::protobuf::uint64 value) {
  set_has_signtime();
  signtime_ = value;
  // @@protoc_insertion_point(field_set:pb.TPlatformArenaSignRsp.SignTime)
}

// -------------------------------------------------------------------

// TPlatformArenaData

// optional uint32 GroupId = 1;
inline bool TPlatformArenaData::has_groupid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TPlatformArenaData::set_has_groupid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TPlatformArenaData::clear_has_groupid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TPlatformArenaData::clear_groupid() {
  groupid_ = 0u;
  clear_has_groupid();
}
inline ::google::protobuf::uint32 TPlatformArenaData::groupid() const {
  // @@protoc_insertion_point(field_get:pb.TPlatformArenaData.GroupId)
  return groupid_;
}
inline void TPlatformArenaData::set_groupid(::google::protobuf::uint32 value) {
  set_has_groupid();
  groupid_ = value;
  // @@protoc_insertion_point(field_set:pb.TPlatformArenaData.GroupId)
}

// optional uint32 ArenaTeamId = 2;
inline bool TPlatformArenaData::has_arenateamid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TPlatformArenaData::set_has_arenateamid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TPlatformArenaData::clear_has_arenateamid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TPlatformArenaData::clear_arenateamid() {
  arenateamid_ = 0u;
  clear_has_arenateamid();
}
inline ::google::protobuf::uint32 TPlatformArenaData::arenateamid() const {
  // @@protoc_insertion_point(field_get:pb.TPlatformArenaData.ArenaTeamId)
  return arenateamid_;
}
inline void TPlatformArenaData::set_arenateamid(::google::protobuf::uint32 value) {
  set_has_arenateamid();
  arenateamid_ = value;
  // @@protoc_insertion_point(field_set:pb.TPlatformArenaData.ArenaTeamId)
}

// optional uint32 ArenaId = 3;
inline bool TPlatformArenaData::has_arenaid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void TPlatformArenaData::set_has_arenaid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void TPlatformArenaData::clear_has_arenaid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void TPlatformArenaData::clear_arenaid() {
  arenaid_ = 0u;
  clear_has_arenaid();
}
inline ::google::protobuf::uint32 TPlatformArenaData::arenaid() const {
  // @@protoc_insertion_point(field_get:pb.TPlatformArenaData.ArenaId)
  return arenaid_;
}
inline void TPlatformArenaData::set_arenaid(::google::protobuf::uint32 value) {
  set_has_arenaid();
  arenaid_ = value;
  // @@protoc_insertion_point(field_set:pb.TPlatformArenaData.ArenaId)
}

// optional uint32 ArenaType = 4;
inline bool TPlatformArenaData::has_arenatype() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void TPlatformArenaData::set_has_arenatype() {
  _has_bits_[0] |= 0x00000008u;
}
inline void TPlatformArenaData::clear_has_arenatype() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void TPlatformArenaData::clear_arenatype() {
  arenatype_ = 0u;
  clear_has_arenatype();
}
inline ::google::protobuf::uint32 TPlatformArenaData::arenatype() const {
  // @@protoc_insertion_point(field_get:pb.TPlatformArenaData.ArenaType)
  return arenatype_;
}
inline void TPlatformArenaData::set_arenatype(::google::protobuf::uint32 value) {
  set_has_arenatype();
  arenatype_ = value;
  // @@protoc_insertion_point(field_set:pb.TPlatformArenaData.ArenaType)
}

// optional .pb.TUserSimpleInfo WinUserInfo = 5;
inline bool TPlatformArenaData::has_winuserinfo() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void TPlatformArenaData::set_has_winuserinfo() {
  _has_bits_[0] |= 0x00000010u;
}
inline void TPlatformArenaData::clear_has_winuserinfo() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void TPlatformArenaData::clear_winuserinfo() {
  if (winuserinfo_ != NULL) winuserinfo_->::pb::TUserSimpleInfo::Clear();
  clear_has_winuserinfo();
}
inline const ::pb::TUserSimpleInfo& TPlatformArenaData::winuserinfo() const {
  // @@protoc_insertion_point(field_get:pb.TPlatformArenaData.WinUserInfo)
  return winuserinfo_ != NULL ? *winuserinfo_ : *default_instance_->winuserinfo_;
}
inline ::pb::TUserSimpleInfo* TPlatformArenaData::mutable_winuserinfo() {
  set_has_winuserinfo();
  if (winuserinfo_ == NULL) winuserinfo_ = new ::pb::TUserSimpleInfo;
  // @@protoc_insertion_point(field_mutable:pb.TPlatformArenaData.WinUserInfo)
  return winuserinfo_;
}
inline ::pb::TUserSimpleInfo* TPlatformArenaData::release_winuserinfo() {
  clear_has_winuserinfo();
  ::pb::TUserSimpleInfo* temp = winuserinfo_;
  winuserinfo_ = NULL;
  return temp;
}
inline void TPlatformArenaData::set_allocated_winuserinfo(::pb::TUserSimpleInfo* winuserinfo) {
  delete winuserinfo_;
  winuserinfo_ = winuserinfo;
  if (winuserinfo) {
    set_has_winuserinfo();
  } else {
    clear_has_winuserinfo();
  }
  // @@protoc_insertion_point(field_set_allocated:pb.TPlatformArenaData.WinUserInfo)
}

// -------------------------------------------------------------------

// TPlatformArenaGetArenaInfoRsp

// repeated .pb.TPlatformArenaData ArrArenaData = 1;
inline int TPlatformArenaGetArenaInfoRsp::arrarenadata_size() const {
  return arrarenadata_.size();
}
inline void TPlatformArenaGetArenaInfoRsp::clear_arrarenadata() {
  arrarenadata_.Clear();
}
inline const ::pb::TPlatformArenaData& TPlatformArenaGetArenaInfoRsp::arrarenadata(int index) const {
  // @@protoc_insertion_point(field_get:pb.TPlatformArenaGetArenaInfoRsp.ArrArenaData)
  return arrarenadata_.Get(index);
}
inline ::pb::TPlatformArenaData* TPlatformArenaGetArenaInfoRsp::mutable_arrarenadata(int index) {
  // @@protoc_insertion_point(field_mutable:pb.TPlatformArenaGetArenaInfoRsp.ArrArenaData)
  return arrarenadata_.Mutable(index);
}
inline ::pb::TPlatformArenaData* TPlatformArenaGetArenaInfoRsp::add_arrarenadata() {
  // @@protoc_insertion_point(field_add:pb.TPlatformArenaGetArenaInfoRsp.ArrArenaData)
  return arrarenadata_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::TPlatformArenaData >&
TPlatformArenaGetArenaInfoRsp::arrarenadata() const {
  // @@protoc_insertion_point(field_list:pb.TPlatformArenaGetArenaInfoRsp.ArrArenaData)
  return arrarenadata_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb::TPlatformArenaData >*
TPlatformArenaGetArenaInfoRsp::mutable_arrarenadata() {
  // @@protoc_insertion_point(field_mutable_list:pb.TPlatformArenaGetArenaInfoRsp.ArrArenaData)
  return &arrarenadata_;
}

// -------------------------------------------------------------------

// TPlatformArenaChallengeReq

// optional uint32 GroupId = 1;
inline bool TPlatformArenaChallengeReq::has_groupid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TPlatformArenaChallengeReq::set_has_groupid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TPlatformArenaChallengeReq::clear_has_groupid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TPlatformArenaChallengeReq::clear_groupid() {
  groupid_ = 0u;
  clear_has_groupid();
}
inline ::google::protobuf::uint32 TPlatformArenaChallengeReq::groupid() const {
  // @@protoc_insertion_point(field_get:pb.TPlatformArenaChallengeReq.GroupId)
  return groupid_;
}
inline void TPlatformArenaChallengeReq::set_groupid(::google::protobuf::uint32 value) {
  set_has_groupid();
  groupid_ = value;
  // @@protoc_insertion_point(field_set:pb.TPlatformArenaChallengeReq.GroupId)
}

// optional uint32 ArenaId = 2;
inline bool TPlatformArenaChallengeReq::has_arenaid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TPlatformArenaChallengeReq::set_has_arenaid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TPlatformArenaChallengeReq::clear_has_arenaid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TPlatformArenaChallengeReq::clear_arenaid() {
  arenaid_ = 0u;
  clear_has_arenaid();
}
inline ::google::protobuf::uint32 TPlatformArenaChallengeReq::arenaid() const {
  // @@protoc_insertion_point(field_get:pb.TPlatformArenaChallengeReq.ArenaId)
  return arenaid_;
}
inline void TPlatformArenaChallengeReq::set_arenaid(::google::protobuf::uint32 value) {
  set_has_arenaid();
  arenaid_ = value;
  // @@protoc_insertion_point(field_set:pb.TPlatformArenaChallengeReq.ArenaId)
}

// optional uint64 Uid = 3;
inline bool TPlatformArenaChallengeReq::has_uid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void TPlatformArenaChallengeReq::set_has_uid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void TPlatformArenaChallengeReq::clear_has_uid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void TPlatformArenaChallengeReq::clear_uid() {
  uid_ = GOOGLE_ULONGLONG(0);
  clear_has_uid();
}
inline ::google::protobuf::uint64 TPlatformArenaChallengeReq::uid() const {
  // @@protoc_insertion_point(field_get:pb.TPlatformArenaChallengeReq.Uid)
  return uid_;
}
inline void TPlatformArenaChallengeReq::set_uid(::google::protobuf::uint64 value) {
  set_has_uid();
  uid_ = value;
  // @@protoc_insertion_point(field_set:pb.TPlatformArenaChallengeReq.Uid)
}

// -------------------------------------------------------------------

// TPlatformArenaChallengeRsp

// optional uint32 Result = 1;
inline bool TPlatformArenaChallengeRsp::has_result() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TPlatformArenaChallengeRsp::set_has_result() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TPlatformArenaChallengeRsp::clear_has_result() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TPlatformArenaChallengeRsp::clear_result() {
  result_ = 0u;
  clear_has_result();
}
inline ::google::protobuf::uint32 TPlatformArenaChallengeRsp::result() const {
  // @@protoc_insertion_point(field_get:pb.TPlatformArenaChallengeRsp.Result)
  return result_;
}
inline void TPlatformArenaChallengeRsp::set_result(::google::protobuf::uint32 value) {
  set_has_result();
  result_ = value;
  // @@protoc_insertion_point(field_set:pb.TPlatformArenaChallengeRsp.Result)
}

// optional uint64 CoolTime = 2;
inline bool TPlatformArenaChallengeRsp::has_cooltime() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TPlatformArenaChallengeRsp::set_has_cooltime() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TPlatformArenaChallengeRsp::clear_has_cooltime() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TPlatformArenaChallengeRsp::clear_cooltime() {
  cooltime_ = GOOGLE_ULONGLONG(0);
  clear_has_cooltime();
}
inline ::google::protobuf::uint64 TPlatformArenaChallengeRsp::cooltime() const {
  // @@protoc_insertion_point(field_get:pb.TPlatformArenaChallengeRsp.CoolTime)
  return cooltime_;
}
inline void TPlatformArenaChallengeRsp::set_cooltime(::google::protobuf::uint64 value) {
  set_has_cooltime();
  cooltime_ = value;
  // @@protoc_insertion_point(field_set:pb.TPlatformArenaChallengeRsp.CoolTime)
}

// -------------------------------------------------------------------

// THistorySeasonData

// optional uint32 SeasonId = 1;
inline bool THistorySeasonData::has_seasonid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void THistorySeasonData::set_has_seasonid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void THistorySeasonData::clear_has_seasonid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void THistorySeasonData::clear_seasonid() {
  seasonid_ = 0u;
  clear_has_seasonid();
}
inline ::google::protobuf::uint32 THistorySeasonData::seasonid() const {
  // @@protoc_insertion_point(field_get:pb.THistorySeasonData.SeasonId)
  return seasonid_;
}
inline void THistorySeasonData::set_seasonid(::google::protobuf::uint32 value) {
  set_has_seasonid();
  seasonid_ = value;
  // @@protoc_insertion_point(field_set:pb.THistorySeasonData.SeasonId)
}

// optional uint64 StartTime = 2;
inline bool THistorySeasonData::has_starttime() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void THistorySeasonData::set_has_starttime() {
  _has_bits_[0] |= 0x00000002u;
}
inline void THistorySeasonData::clear_has_starttime() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void THistorySeasonData::clear_starttime() {
  starttime_ = GOOGLE_ULONGLONG(0);
  clear_has_starttime();
}
inline ::google::protobuf::uint64 THistorySeasonData::starttime() const {
  // @@protoc_insertion_point(field_get:pb.THistorySeasonData.StartTime)
  return starttime_;
}
inline void THistorySeasonData::set_starttime(::google::protobuf::uint64 value) {
  set_has_starttime();
  starttime_ = value;
  // @@protoc_insertion_point(field_set:pb.THistorySeasonData.StartTime)
}

// optional uint64 EndTime = 3;
inline bool THistorySeasonData::has_endtime() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void THistorySeasonData::set_has_endtime() {
  _has_bits_[0] |= 0x00000004u;
}
inline void THistorySeasonData::clear_has_endtime() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void THistorySeasonData::clear_endtime() {
  endtime_ = GOOGLE_ULONGLONG(0);
  clear_has_endtime();
}
inline ::google::protobuf::uint64 THistorySeasonData::endtime() const {
  // @@protoc_insertion_point(field_get:pb.THistorySeasonData.EndTime)
  return endtime_;
}
inline void THistorySeasonData::set_endtime(::google::protobuf::uint64 value) {
  set_has_endtime();
  endtime_ = value;
  // @@protoc_insertion_point(field_set:pb.THistorySeasonData.EndTime)
}

// optional uint32 GroupNum = 4;
inline bool THistorySeasonData::has_groupnum() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void THistorySeasonData::set_has_groupnum() {
  _has_bits_[0] |= 0x00000008u;
}
inline void THistorySeasonData::clear_has_groupnum() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void THistorySeasonData::clear_groupnum() {
  groupnum_ = 0u;
  clear_has_groupnum();
}
inline ::google::protobuf::uint32 THistorySeasonData::groupnum() const {
  // @@protoc_insertion_point(field_get:pb.THistorySeasonData.GroupNum)
  return groupnum_;
}
inline void THistorySeasonData::set_groupnum(::google::protobuf::uint32 value) {
  set_has_groupnum();
  groupnum_ = value;
  // @@protoc_insertion_point(field_set:pb.THistorySeasonData.GroupNum)
}

// -------------------------------------------------------------------

// TPlatformArenaGetHistorySeasonRsp

// repeated .pb.THistorySeasonData ArrHistorySeason = 1;
inline int TPlatformArenaGetHistorySeasonRsp::arrhistoryseason_size() const {
  return arrhistoryseason_.size();
}
inline void TPlatformArenaGetHistorySeasonRsp::clear_arrhistoryseason() {
  arrhistoryseason_.Clear();
}
inline const ::pb::THistorySeasonData& TPlatformArenaGetHistorySeasonRsp::arrhistoryseason(int index) const {
  // @@protoc_insertion_point(field_get:pb.TPlatformArenaGetHistorySeasonRsp.ArrHistorySeason)
  return arrhistoryseason_.Get(index);
}
inline ::pb::THistorySeasonData* TPlatformArenaGetHistorySeasonRsp::mutable_arrhistoryseason(int index) {
  // @@protoc_insertion_point(field_mutable:pb.TPlatformArenaGetHistorySeasonRsp.ArrHistorySeason)
  return arrhistoryseason_.Mutable(index);
}
inline ::pb::THistorySeasonData* TPlatformArenaGetHistorySeasonRsp::add_arrhistoryseason() {
  // @@protoc_insertion_point(field_add:pb.TPlatformArenaGetHistorySeasonRsp.ArrHistorySeason)
  return arrhistoryseason_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::THistorySeasonData >&
TPlatformArenaGetHistorySeasonRsp::arrhistoryseason() const {
  // @@protoc_insertion_point(field_list:pb.TPlatformArenaGetHistorySeasonRsp.ArrHistorySeason)
  return arrhistoryseason_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb::THistorySeasonData >*
TPlatformArenaGetHistorySeasonRsp::mutable_arrhistoryseason() {
  // @@protoc_insertion_point(field_mutable_list:pb.TPlatformArenaGetHistorySeasonRsp.ArrHistorySeason)
  return &arrhistoryseason_;
}

// -------------------------------------------------------------------

// TPlatformArenaGetSeasonPmRankReq

// optional uint32 SeasonId = 1;
inline bool TPlatformArenaGetSeasonPmRankReq::has_seasonid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TPlatformArenaGetSeasonPmRankReq::set_has_seasonid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TPlatformArenaGetSeasonPmRankReq::clear_has_seasonid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TPlatformArenaGetSeasonPmRankReq::clear_seasonid() {
  seasonid_ = 0u;
  clear_has_seasonid();
}
inline ::google::protobuf::uint32 TPlatformArenaGetSeasonPmRankReq::seasonid() const {
  // @@protoc_insertion_point(field_get:pb.TPlatformArenaGetSeasonPmRankReq.SeasonId)
  return seasonid_;
}
inline void TPlatformArenaGetSeasonPmRankReq::set_seasonid(::google::protobuf::uint32 value) {
  set_has_seasonid();
  seasonid_ = value;
  // @@protoc_insertion_point(field_set:pb.TPlatformArenaGetSeasonPmRankReq.SeasonId)
}

// optional uint32 GroupId = 2;
inline bool TPlatformArenaGetSeasonPmRankReq::has_groupid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TPlatformArenaGetSeasonPmRankReq::set_has_groupid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TPlatformArenaGetSeasonPmRankReq::clear_has_groupid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TPlatformArenaGetSeasonPmRankReq::clear_groupid() {
  groupid_ = 0u;
  clear_has_groupid();
}
inline ::google::protobuf::uint32 TPlatformArenaGetSeasonPmRankReq::groupid() const {
  // @@protoc_insertion_point(field_get:pb.TPlatformArenaGetSeasonPmRankReq.GroupId)
  return groupid_;
}
inline void TPlatformArenaGetSeasonPmRankReq::set_groupid(::google::protobuf::uint32 value) {
  set_has_groupid();
  groupid_ = value;
  // @@protoc_insertion_point(field_set:pb.TPlatformArenaGetSeasonPmRankReq.GroupId)
}

// -------------------------------------------------------------------

// TSeasonPmRankData

// optional .pb.TUserSimpleInfo UserInfo = 1;
inline bool TSeasonPmRankData::has_userinfo() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TSeasonPmRankData::set_has_userinfo() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TSeasonPmRankData::clear_has_userinfo() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TSeasonPmRankData::clear_userinfo() {
  if (userinfo_ != NULL) userinfo_->::pb::TUserSimpleInfo::Clear();
  clear_has_userinfo();
}
inline const ::pb::TUserSimpleInfo& TSeasonPmRankData::userinfo() const {
  // @@protoc_insertion_point(field_get:pb.TSeasonPmRankData.UserInfo)
  return userinfo_ != NULL ? *userinfo_ : *default_instance_->userinfo_;
}
inline ::pb::TUserSimpleInfo* TSeasonPmRankData::mutable_userinfo() {
  set_has_userinfo();
  if (userinfo_ == NULL) userinfo_ = new ::pb::TUserSimpleInfo;
  // @@protoc_insertion_point(field_mutable:pb.TSeasonPmRankData.UserInfo)
  return userinfo_;
}
inline ::pb::TUserSimpleInfo* TSeasonPmRankData::release_userinfo() {
  clear_has_userinfo();
  ::pb::TUserSimpleInfo* temp = userinfo_;
  userinfo_ = NULL;
  return temp;
}
inline void TSeasonPmRankData::set_allocated_userinfo(::pb::TUserSimpleInfo* userinfo) {
  delete userinfo_;
  userinfo_ = userinfo;
  if (userinfo) {
    set_has_userinfo();
  } else {
    clear_has_userinfo();
  }
  // @@protoc_insertion_point(field_set_allocated:pb.TSeasonPmRankData.UserInfo)
}

// optional uint32 Rank = 2;
inline bool TSeasonPmRankData::has_rank() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TSeasonPmRankData::set_has_rank() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TSeasonPmRankData::clear_has_rank() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TSeasonPmRankData::clear_rank() {
  rank_ = 0u;
  clear_has_rank();
}
inline ::google::protobuf::uint32 TSeasonPmRankData::rank() const {
  // @@protoc_insertion_point(field_get:pb.TSeasonPmRankData.Rank)
  return rank_;
}
inline void TSeasonPmRankData::set_rank(::google::protobuf::uint32 value) {
  set_has_rank();
  rank_ = value;
  // @@protoc_insertion_point(field_set:pb.TSeasonPmRankData.Rank)
}

// optional uint32 ThumbNum = 3;
inline bool TSeasonPmRankData::has_thumbnum() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void TSeasonPmRankData::set_has_thumbnum() {
  _has_bits_[0] |= 0x00000004u;
}
inline void TSeasonPmRankData::clear_has_thumbnum() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void TSeasonPmRankData::clear_thumbnum() {
  thumbnum_ = 0u;
  clear_has_thumbnum();
}
inline ::google::protobuf::uint32 TSeasonPmRankData::thumbnum() const {
  // @@protoc_insertion_point(field_get:pb.TSeasonPmRankData.ThumbNum)
  return thumbnum_;
}
inline void TSeasonPmRankData::set_thumbnum(::google::protobuf::uint32 value) {
  set_has_thumbnum();
  thumbnum_ = value;
  // @@protoc_insertion_point(field_set:pb.TSeasonPmRankData.ThumbNum)
}

// -------------------------------------------------------------------

// TPlatformArenaGetSeasonPmRankRsp

// optional uint32 SeasonId = 1;
inline bool TPlatformArenaGetSeasonPmRankRsp::has_seasonid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TPlatformArenaGetSeasonPmRankRsp::set_has_seasonid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TPlatformArenaGetSeasonPmRankRsp::clear_has_seasonid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TPlatformArenaGetSeasonPmRankRsp::clear_seasonid() {
  seasonid_ = 0u;
  clear_has_seasonid();
}
inline ::google::protobuf::uint32 TPlatformArenaGetSeasonPmRankRsp::seasonid() const {
  // @@protoc_insertion_point(field_get:pb.TPlatformArenaGetSeasonPmRankRsp.SeasonId)
  return seasonid_;
}
inline void TPlatformArenaGetSeasonPmRankRsp::set_seasonid(::google::protobuf::uint32 value) {
  set_has_seasonid();
  seasonid_ = value;
  // @@protoc_insertion_point(field_set:pb.TPlatformArenaGetSeasonPmRankRsp.SeasonId)
}

// optional uint32 GroupId = 2;
inline bool TPlatformArenaGetSeasonPmRankRsp::has_groupid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TPlatformArenaGetSeasonPmRankRsp::set_has_groupid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TPlatformArenaGetSeasonPmRankRsp::clear_has_groupid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TPlatformArenaGetSeasonPmRankRsp::clear_groupid() {
  groupid_ = 0u;
  clear_has_groupid();
}
inline ::google::protobuf::uint32 TPlatformArenaGetSeasonPmRankRsp::groupid() const {
  // @@protoc_insertion_point(field_get:pb.TPlatformArenaGetSeasonPmRankRsp.GroupId)
  return groupid_;
}
inline void TPlatformArenaGetSeasonPmRankRsp::set_groupid(::google::protobuf::uint32 value) {
  set_has_groupid();
  groupid_ = value;
  // @@protoc_insertion_point(field_set:pb.TPlatformArenaGetSeasonPmRankRsp.GroupId)
}

// repeated .pb.TSeasonPmRankData ArrRankData = 3;
inline int TPlatformArenaGetSeasonPmRankRsp::arrrankdata_size() const {
  return arrrankdata_.size();
}
inline void TPlatformArenaGetSeasonPmRankRsp::clear_arrrankdata() {
  arrrankdata_.Clear();
}
inline const ::pb::TSeasonPmRankData& TPlatformArenaGetSeasonPmRankRsp::arrrankdata(int index) const {
  // @@protoc_insertion_point(field_get:pb.TPlatformArenaGetSeasonPmRankRsp.ArrRankData)
  return arrrankdata_.Get(index);
}
inline ::pb::TSeasonPmRankData* TPlatformArenaGetSeasonPmRankRsp::mutable_arrrankdata(int index) {
  // @@protoc_insertion_point(field_mutable:pb.TPlatformArenaGetSeasonPmRankRsp.ArrRankData)
  return arrrankdata_.Mutable(index);
}
inline ::pb::TSeasonPmRankData* TPlatformArenaGetSeasonPmRankRsp::add_arrrankdata() {
  // @@protoc_insertion_point(field_add:pb.TPlatformArenaGetSeasonPmRankRsp.ArrRankData)
  return arrrankdata_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::TSeasonPmRankData >&
TPlatformArenaGetSeasonPmRankRsp::arrrankdata() const {
  // @@protoc_insertion_point(field_list:pb.TPlatformArenaGetSeasonPmRankRsp.ArrRankData)
  return arrrankdata_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb::TSeasonPmRankData >*
TPlatformArenaGetSeasonPmRankRsp::mutable_arrrankdata() {
  // @@protoc_insertion_point(field_mutable_list:pb.TPlatformArenaGetSeasonPmRankRsp.ArrRankData)
  return &arrrankdata_;
}

// -------------------------------------------------------------------

// TPersonalReportData

// optional uint32 Rid = 1;
inline bool TPersonalReportData::has_rid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TPersonalReportData::set_has_rid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TPersonalReportData::clear_has_rid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TPersonalReportData::clear_rid() {
  rid_ = 0u;
  clear_has_rid();
}
inline ::google::protobuf::uint32 TPersonalReportData::rid() const {
  // @@protoc_insertion_point(field_get:pb.TPersonalReportData.Rid)
  return rid_;
}
inline void TPersonalReportData::set_rid(::google::protobuf::uint32 value) {
  set_has_rid();
  rid_ = value;
  // @@protoc_insertion_point(field_set:pb.TPersonalReportData.Rid)
}

// optional uint32 ReportType = 2;
inline bool TPersonalReportData::has_reporttype() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TPersonalReportData::set_has_reporttype() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TPersonalReportData::clear_has_reporttype() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TPersonalReportData::clear_reporttype() {
  reporttype_ = 0u;
  clear_has_reporttype();
}
inline ::google::protobuf::uint32 TPersonalReportData::reporttype() const {
  // @@protoc_insertion_point(field_get:pb.TPersonalReportData.ReportType)
  return reporttype_;
}
inline void TPersonalReportData::set_reporttype(::google::protobuf::uint32 value) {
  set_has_reporttype();
  reporttype_ = value;
  // @@protoc_insertion_point(field_set:pb.TPersonalReportData.ReportType)
}

// optional uint32 Result = 3;
inline bool TPersonalReportData::has_result() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void TPersonalReportData::set_has_result() {
  _has_bits_[0] |= 0x00000004u;
}
inline void TPersonalReportData::clear_has_result() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void TPersonalReportData::clear_result() {
  result_ = 0u;
  clear_has_result();
}
inline ::google::protobuf::uint32 TPersonalReportData::result() const {
  // @@protoc_insertion_point(field_get:pb.TPersonalReportData.Result)
  return result_;
}
inline void TPersonalReportData::set_result(::google::protobuf::uint32 value) {
  set_has_result();
  result_ = value;
  // @@protoc_insertion_point(field_set:pb.TPersonalReportData.Result)
}

// optional uint32 ArenaId = 4;
inline bool TPersonalReportData::has_arenaid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void TPersonalReportData::set_has_arenaid() {
  _has_bits_[0] |= 0x00000008u;
}
inline void TPersonalReportData::clear_has_arenaid() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void TPersonalReportData::clear_arenaid() {
  arenaid_ = 0u;
  clear_has_arenaid();
}
inline ::google::protobuf::uint32 TPersonalReportData::arenaid() const {
  // @@protoc_insertion_point(field_get:pb.TPersonalReportData.ArenaId)
  return arenaid_;
}
inline void TPersonalReportData::set_arenaid(::google::protobuf::uint32 value) {
  set_has_arenaid();
  arenaid_ = value;
  // @@protoc_insertion_point(field_set:pb.TPersonalReportData.ArenaId)
}

// optional uint64 ReportTime = 5;
inline bool TPersonalReportData::has_reporttime() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void TPersonalReportData::set_has_reporttime() {
  _has_bits_[0] |= 0x00000010u;
}
inline void TPersonalReportData::clear_has_reporttime() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void TPersonalReportData::clear_reporttime() {
  reporttime_ = GOOGLE_ULONGLONG(0);
  clear_has_reporttime();
}
inline ::google::protobuf::uint64 TPersonalReportData::reporttime() const {
  // @@protoc_insertion_point(field_get:pb.TPersonalReportData.ReportTime)
  return reporttime_;
}
inline void TPersonalReportData::set_reporttime(::google::protobuf::uint64 value) {
  set_has_reporttime();
  reporttime_ = value;
  // @@protoc_insertion_point(field_set:pb.TPersonalReportData.ReportTime)
}

// optional uint32 RTid = 6;
inline bool TPersonalReportData::has_rtid() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void TPersonalReportData::set_has_rtid() {
  _has_bits_[0] |= 0x00000020u;
}
inline void TPersonalReportData::clear_has_rtid() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void TPersonalReportData::clear_rtid() {
  rtid_ = 0u;
  clear_has_rtid();
}
inline ::google::protobuf::uint32 TPersonalReportData::rtid() const {
  // @@protoc_insertion_point(field_get:pb.TPersonalReportData.RTid)
  return rtid_;
}
inline void TPersonalReportData::set_rtid(::google::protobuf::uint32 value) {
  set_has_rtid();
  rtid_ = value;
  // @@protoc_insertion_point(field_set:pb.TPersonalReportData.RTid)
}

// optional uint32 ArenaType = 7;
inline bool TPersonalReportData::has_arenatype() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void TPersonalReportData::set_has_arenatype() {
  _has_bits_[0] |= 0x00000040u;
}
inline void TPersonalReportData::clear_has_arenatype() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void TPersonalReportData::clear_arenatype() {
  arenatype_ = 0u;
  clear_has_arenatype();
}
inline ::google::protobuf::uint32 TPersonalReportData::arenatype() const {
  // @@protoc_insertion_point(field_get:pb.TPersonalReportData.ArenaType)
  return arenatype_;
}
inline void TPersonalReportData::set_arenatype(::google::protobuf::uint32 value) {
  set_has_arenatype();
  arenatype_ = value;
  // @@protoc_insertion_point(field_set:pb.TPersonalReportData.ArenaType)
}

// optional .pb.TUserSimpleInfo AtkUserInfo = 8;
inline bool TPersonalReportData::has_atkuserinfo() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void TPersonalReportData::set_has_atkuserinfo() {
  _has_bits_[0] |= 0x00000080u;
}
inline void TPersonalReportData::clear_has_atkuserinfo() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void TPersonalReportData::clear_atkuserinfo() {
  if (atkuserinfo_ != NULL) atkuserinfo_->::pb::TUserSimpleInfo::Clear();
  clear_has_atkuserinfo();
}
inline const ::pb::TUserSimpleInfo& TPersonalReportData::atkuserinfo() const {
  // @@protoc_insertion_point(field_get:pb.TPersonalReportData.AtkUserInfo)
  return atkuserinfo_ != NULL ? *atkuserinfo_ : *default_instance_->atkuserinfo_;
}
inline ::pb::TUserSimpleInfo* TPersonalReportData::mutable_atkuserinfo() {
  set_has_atkuserinfo();
  if (atkuserinfo_ == NULL) atkuserinfo_ = new ::pb::TUserSimpleInfo;
  // @@protoc_insertion_point(field_mutable:pb.TPersonalReportData.AtkUserInfo)
  return atkuserinfo_;
}
inline ::pb::TUserSimpleInfo* TPersonalReportData::release_atkuserinfo() {
  clear_has_atkuserinfo();
  ::pb::TUserSimpleInfo* temp = atkuserinfo_;
  atkuserinfo_ = NULL;
  return temp;
}
inline void TPersonalReportData::set_allocated_atkuserinfo(::pb::TUserSimpleInfo* atkuserinfo) {
  delete atkuserinfo_;
  atkuserinfo_ = atkuserinfo;
  if (atkuserinfo) {
    set_has_atkuserinfo();
  } else {
    clear_has_atkuserinfo();
  }
  // @@protoc_insertion_point(field_set_allocated:pb.TPersonalReportData.AtkUserInfo)
}

// optional .pb.TUserSimpleInfo DefUserInfo = 9;
inline bool TPersonalReportData::has_defuserinfo() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void TPersonalReportData::set_has_defuserinfo() {
  _has_bits_[0] |= 0x00000100u;
}
inline void TPersonalReportData::clear_has_defuserinfo() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void TPersonalReportData::clear_defuserinfo() {
  if (defuserinfo_ != NULL) defuserinfo_->::pb::TUserSimpleInfo::Clear();
  clear_has_defuserinfo();
}
inline const ::pb::TUserSimpleInfo& TPersonalReportData::defuserinfo() const {
  // @@protoc_insertion_point(field_get:pb.TPersonalReportData.DefUserInfo)
  return defuserinfo_ != NULL ? *defuserinfo_ : *default_instance_->defuserinfo_;
}
inline ::pb::TUserSimpleInfo* TPersonalReportData::mutable_defuserinfo() {
  set_has_defuserinfo();
  if (defuserinfo_ == NULL) defuserinfo_ = new ::pb::TUserSimpleInfo;
  // @@protoc_insertion_point(field_mutable:pb.TPersonalReportData.DefUserInfo)
  return defuserinfo_;
}
inline ::pb::TUserSimpleInfo* TPersonalReportData::release_defuserinfo() {
  clear_has_defuserinfo();
  ::pb::TUserSimpleInfo* temp = defuserinfo_;
  defuserinfo_ = NULL;
  return temp;
}
inline void TPersonalReportData::set_allocated_defuserinfo(::pb::TUserSimpleInfo* defuserinfo) {
  delete defuserinfo_;
  defuserinfo_ = defuserinfo;
  if (defuserinfo) {
    set_has_defuserinfo();
  } else {
    clear_has_defuserinfo();
  }
  // @@protoc_insertion_point(field_set_allocated:pb.TPersonalReportData.DefUserInfo)
}

// -------------------------------------------------------------------

// TPlatformArenaGetPersonalReport

// repeated .pb.TPersonalReportData ArrReport = 1;
inline int TPlatformArenaGetPersonalReport::arrreport_size() const {
  return arrreport_.size();
}
inline void TPlatformArenaGetPersonalReport::clear_arrreport() {
  arrreport_.Clear();
}
inline const ::pb::TPersonalReportData& TPlatformArenaGetPersonalReport::arrreport(int index) const {
  // @@protoc_insertion_point(field_get:pb.TPlatformArenaGetPersonalReport.ArrReport)
  return arrreport_.Get(index);
}
inline ::pb::TPersonalReportData* TPlatformArenaGetPersonalReport::mutable_arrreport(int index) {
  // @@protoc_insertion_point(field_mutable:pb.TPlatformArenaGetPersonalReport.ArrReport)
  return arrreport_.Mutable(index);
}
inline ::pb::TPersonalReportData* TPlatformArenaGetPersonalReport::add_arrreport() {
  // @@protoc_insertion_point(field_add:pb.TPlatformArenaGetPersonalReport.ArrReport)
  return arrreport_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::TPersonalReportData >&
TPlatformArenaGetPersonalReport::arrreport() const {
  // @@protoc_insertion_point(field_list:pb.TPlatformArenaGetPersonalReport.ArrReport)
  return arrreport_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb::TPersonalReportData >*
TPlatformArenaGetPersonalReport::mutable_arrreport() {
  // @@protoc_insertion_point(field_mutable_list:pb.TPlatformArenaGetPersonalReport.ArrReport)
  return &arrreport_;
}

// -------------------------------------------------------------------

// TFoeUserData

// optional .pb.TUserSimpleInfo UserInfo = 1;
inline bool TFoeUserData::has_userinfo() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TFoeUserData::set_has_userinfo() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TFoeUserData::clear_has_userinfo() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TFoeUserData::clear_userinfo() {
  if (userinfo_ != NULL) userinfo_->::pb::TUserSimpleInfo::Clear();
  clear_has_userinfo();
}
inline const ::pb::TUserSimpleInfo& TFoeUserData::userinfo() const {
  // @@protoc_insertion_point(field_get:pb.TFoeUserData.UserInfo)
  return userinfo_ != NULL ? *userinfo_ : *default_instance_->userinfo_;
}
inline ::pb::TUserSimpleInfo* TFoeUserData::mutable_userinfo() {
  set_has_userinfo();
  if (userinfo_ == NULL) userinfo_ = new ::pb::TUserSimpleInfo;
  // @@protoc_insertion_point(field_mutable:pb.TFoeUserData.UserInfo)
  return userinfo_;
}
inline ::pb::TUserSimpleInfo* TFoeUserData::release_userinfo() {
  clear_has_userinfo();
  ::pb::TUserSimpleInfo* temp = userinfo_;
  userinfo_ = NULL;
  return temp;
}
inline void TFoeUserData::set_allocated_userinfo(::pb::TUserSimpleInfo* userinfo) {
  delete userinfo_;
  userinfo_ = userinfo;
  if (userinfo) {
    set_has_userinfo();
  } else {
    clear_has_userinfo();
  }
  // @@protoc_insertion_point(field_set_allocated:pb.TFoeUserData.UserInfo)
}

// optional uint32 FoeValue = 2;
inline bool TFoeUserData::has_foevalue() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TFoeUserData::set_has_foevalue() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TFoeUserData::clear_has_foevalue() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TFoeUserData::clear_foevalue() {
  foevalue_ = 0u;
  clear_has_foevalue();
}
inline ::google::protobuf::uint32 TFoeUserData::foevalue() const {
  // @@protoc_insertion_point(field_get:pb.TFoeUserData.FoeValue)
  return foevalue_;
}
inline void TFoeUserData::set_foevalue(::google::protobuf::uint32 value) {
  set_has_foevalue();
  foevalue_ = value;
  // @@protoc_insertion_point(field_set:pb.TFoeUserData.FoeValue)
}

// optional uint64 FoeTimeStamp = 3;
inline bool TFoeUserData::has_foetimestamp() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void TFoeUserData::set_has_foetimestamp() {
  _has_bits_[0] |= 0x00000004u;
}
inline void TFoeUserData::clear_has_foetimestamp() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void TFoeUserData::clear_foetimestamp() {
  foetimestamp_ = GOOGLE_ULONGLONG(0);
  clear_has_foetimestamp();
}
inline ::google::protobuf::uint64 TFoeUserData::foetimestamp() const {
  // @@protoc_insertion_point(field_get:pb.TFoeUserData.FoeTimeStamp)
  return foetimestamp_;
}
inline void TFoeUserData::set_foetimestamp(::google::protobuf::uint64 value) {
  set_has_foetimestamp();
  foetimestamp_ = value;
  // @@protoc_insertion_point(field_set:pb.TFoeUserData.FoeTimeStamp)
}

// -------------------------------------------------------------------

// TPlatformArenaGetFoeInfoRsp

// repeated .pb.TFoeUserData ArrFoeUser = 1;
inline int TPlatformArenaGetFoeInfoRsp::arrfoeuser_size() const {
  return arrfoeuser_.size();
}
inline void TPlatformArenaGetFoeInfoRsp::clear_arrfoeuser() {
  arrfoeuser_.Clear();
}
inline const ::pb::TFoeUserData& TPlatformArenaGetFoeInfoRsp::arrfoeuser(int index) const {
  // @@protoc_insertion_point(field_get:pb.TPlatformArenaGetFoeInfoRsp.ArrFoeUser)
  return arrfoeuser_.Get(index);
}
inline ::pb::TFoeUserData* TPlatformArenaGetFoeInfoRsp::mutable_arrfoeuser(int index) {
  // @@protoc_insertion_point(field_mutable:pb.TPlatformArenaGetFoeInfoRsp.ArrFoeUser)
  return arrfoeuser_.Mutable(index);
}
inline ::pb::TFoeUserData* TPlatformArenaGetFoeInfoRsp::add_arrfoeuser() {
  // @@protoc_insertion_point(field_add:pb.TPlatformArenaGetFoeInfoRsp.ArrFoeUser)
  return arrfoeuser_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::TFoeUserData >&
TPlatformArenaGetFoeInfoRsp::arrfoeuser() const {
  // @@protoc_insertion_point(field_list:pb.TPlatformArenaGetFoeInfoRsp.ArrFoeUser)
  return arrfoeuser_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb::TFoeUserData >*
TPlatformArenaGetFoeInfoRsp::mutable_arrfoeuser() {
  // @@protoc_insertion_point(field_mutable_list:pb.TPlatformArenaGetFoeInfoRsp.ArrFoeUser)
  return &arrfoeuser_;
}

// -------------------------------------------------------------------

// TBattlePosInfo

// optional uint32 Pos = 1;
inline bool TBattlePosInfo::has_pos() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TBattlePosInfo::set_has_pos() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TBattlePosInfo::clear_has_pos() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TBattlePosInfo::clear_pos() {
  pos_ = 0u;
  clear_has_pos();
}
inline ::google::protobuf::uint32 TBattlePosInfo::pos() const {
  // @@protoc_insertion_point(field_get:pb.TBattlePosInfo.Pos)
  return pos_;
}
inline void TBattlePosInfo::set_pos(::google::protobuf::uint32 value) {
  set_has_pos();
  pos_ = value;
  // @@protoc_insertion_point(field_set:pb.TBattlePosInfo.Pos)
}

// optional uint32 Hid = 2;
inline bool TBattlePosInfo::has_hid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TBattlePosInfo::set_has_hid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TBattlePosInfo::clear_has_hid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TBattlePosInfo::clear_hid() {
  hid_ = 0u;
  clear_has_hid();
}
inline ::google::protobuf::uint32 TBattlePosInfo::hid() const {
  // @@protoc_insertion_point(field_get:pb.TBattlePosInfo.Hid)
  return hid_;
}
inline void TBattlePosInfo::set_hid(::google::protobuf::uint32 value) {
  set_has_hid();
  hid_ = value;
  // @@protoc_insertion_point(field_set:pb.TBattlePosInfo.Hid)
}

// -------------------------------------------------------------------

// TPlatformArenaFmtInfo

// optional uint32 FmtId = 1;
inline bool TPlatformArenaFmtInfo::has_fmtid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TPlatformArenaFmtInfo::set_has_fmtid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TPlatformArenaFmtInfo::clear_has_fmtid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TPlatformArenaFmtInfo::clear_fmtid() {
  fmtid_ = 0u;
  clear_has_fmtid();
}
inline ::google::protobuf::uint32 TPlatformArenaFmtInfo::fmtid() const {
  // @@protoc_insertion_point(field_get:pb.TPlatformArenaFmtInfo.FmtId)
  return fmtid_;
}
inline void TPlatformArenaFmtInfo::set_fmtid(::google::protobuf::uint32 value) {
  set_has_fmtid();
  fmtid_ = value;
  // @@protoc_insertion_point(field_set:pb.TPlatformArenaFmtInfo.FmtId)
}

// repeated .pb.TBattlePosInfo ArrPos = 2;
inline int TPlatformArenaFmtInfo::arrpos_size() const {
  return arrpos_.size();
}
inline void TPlatformArenaFmtInfo::clear_arrpos() {
  arrpos_.Clear();
}
inline const ::pb::TBattlePosInfo& TPlatformArenaFmtInfo::arrpos(int index) const {
  // @@protoc_insertion_point(field_get:pb.TPlatformArenaFmtInfo.ArrPos)
  return arrpos_.Get(index);
}
inline ::pb::TBattlePosInfo* TPlatformArenaFmtInfo::mutable_arrpos(int index) {
  // @@protoc_insertion_point(field_mutable:pb.TPlatformArenaFmtInfo.ArrPos)
  return arrpos_.Mutable(index);
}
inline ::pb::TBattlePosInfo* TPlatformArenaFmtInfo::add_arrpos() {
  // @@protoc_insertion_point(field_add:pb.TPlatformArenaFmtInfo.ArrPos)
  return arrpos_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::TBattlePosInfo >&
TPlatformArenaFmtInfo::arrpos() const {
  // @@protoc_insertion_point(field_list:pb.TPlatformArenaFmtInfo.ArrPos)
  return arrpos_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb::TBattlePosInfo >*
TPlatformArenaFmtInfo::mutable_arrpos() {
  // @@protoc_insertion_point(field_mutable_list:pb.TPlatformArenaFmtInfo.ArrPos)
  return &arrpos_;
}

// -------------------------------------------------------------------

// TPlatformArenaGetFmtRsp

// repeated .pb.TPlatformArenaFmtInfo ArrFmt = 1;
inline int TPlatformArenaGetFmtRsp::arrfmt_size() const {
  return arrfmt_.size();
}
inline void TPlatformArenaGetFmtRsp::clear_arrfmt() {
  arrfmt_.Clear();
}
inline const ::pb::TPlatformArenaFmtInfo& TPlatformArenaGetFmtRsp::arrfmt(int index) const {
  // @@protoc_insertion_point(field_get:pb.TPlatformArenaGetFmtRsp.ArrFmt)
  return arrfmt_.Get(index);
}
inline ::pb::TPlatformArenaFmtInfo* TPlatformArenaGetFmtRsp::mutable_arrfmt(int index) {
  // @@protoc_insertion_point(field_mutable:pb.TPlatformArenaGetFmtRsp.ArrFmt)
  return arrfmt_.Mutable(index);
}
inline ::pb::TPlatformArenaFmtInfo* TPlatformArenaGetFmtRsp::add_arrfmt() {
  // @@protoc_insertion_point(field_add:pb.TPlatformArenaGetFmtRsp.ArrFmt)
  return arrfmt_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::TPlatformArenaFmtInfo >&
TPlatformArenaGetFmtRsp::arrfmt() const {
  // @@protoc_insertion_point(field_list:pb.TPlatformArenaGetFmtRsp.ArrFmt)
  return arrfmt_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb::TPlatformArenaFmtInfo >*
TPlatformArenaGetFmtRsp::mutable_arrfmt() {
  // @@protoc_insertion_point(field_mutable_list:pb.TPlatformArenaGetFmtRsp.ArrFmt)
  return &arrfmt_;
}

// -------------------------------------------------------------------

// TPlatformArenaSetFmtReq

// repeated .pb.TPlatformArenaFmtInfo ArrFmt = 1;
inline int TPlatformArenaSetFmtReq::arrfmt_size() const {
  return arrfmt_.size();
}
inline void TPlatformArenaSetFmtReq::clear_arrfmt() {
  arrfmt_.Clear();
}
inline const ::pb::TPlatformArenaFmtInfo& TPlatformArenaSetFmtReq::arrfmt(int index) const {
  // @@protoc_insertion_point(field_get:pb.TPlatformArenaSetFmtReq.ArrFmt)
  return arrfmt_.Get(index);
}
inline ::pb::TPlatformArenaFmtInfo* TPlatformArenaSetFmtReq::mutable_arrfmt(int index) {
  // @@protoc_insertion_point(field_mutable:pb.TPlatformArenaSetFmtReq.ArrFmt)
  return arrfmt_.Mutable(index);
}
inline ::pb::TPlatformArenaFmtInfo* TPlatformArenaSetFmtReq::add_arrfmt() {
  // @@protoc_insertion_point(field_add:pb.TPlatformArenaSetFmtReq.ArrFmt)
  return arrfmt_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::TPlatformArenaFmtInfo >&
TPlatformArenaSetFmtReq::arrfmt() const {
  // @@protoc_insertion_point(field_list:pb.TPlatformArenaSetFmtReq.ArrFmt)
  return arrfmt_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb::TPlatformArenaFmtInfo >*
TPlatformArenaSetFmtReq::mutable_arrfmt() {
  // @@protoc_insertion_point(field_mutable_list:pb.TPlatformArenaSetFmtReq.ArrFmt)
  return &arrfmt_;
}

// -------------------------------------------------------------------

// TPlatformArenaMatchData

// optional uint32 MatchId = 1;
inline bool TPlatformArenaMatchData::has_matchid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TPlatformArenaMatchData::set_has_matchid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TPlatformArenaMatchData::clear_has_matchid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TPlatformArenaMatchData::clear_matchid() {
  matchid_ = 0u;
  clear_has_matchid();
}
inline ::google::protobuf::uint32 TPlatformArenaMatchData::matchid() const {
  // @@protoc_insertion_point(field_get:pb.TPlatformArenaMatchData.MatchId)
  return matchid_;
}
inline void TPlatformArenaMatchData::set_matchid(::google::protobuf::uint32 value) {
  set_has_matchid();
  matchid_ = value;
  // @@protoc_insertion_point(field_set:pb.TPlatformArenaMatchData.MatchId)
}

// optional uint64 AtkUid = 2;
inline bool TPlatformArenaMatchData::has_atkuid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TPlatformArenaMatchData::set_has_atkuid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TPlatformArenaMatchData::clear_has_atkuid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TPlatformArenaMatchData::clear_atkuid() {
  atkuid_ = GOOGLE_ULONGLONG(0);
  clear_has_atkuid();
}
inline ::google::protobuf::uint64 TPlatformArenaMatchData::atkuid() const {
  // @@protoc_insertion_point(field_get:pb.TPlatformArenaMatchData.AtkUid)
  return atkuid_;
}
inline void TPlatformArenaMatchData::set_atkuid(::google::protobuf::uint64 value) {
  set_has_atkuid();
  atkuid_ = value;
  // @@protoc_insertion_point(field_set:pb.TPlatformArenaMatchData.AtkUid)
}

// optional uint64 DefUid = 3;
inline bool TPlatformArenaMatchData::has_defuid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void TPlatformArenaMatchData::set_has_defuid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void TPlatformArenaMatchData::clear_has_defuid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void TPlatformArenaMatchData::clear_defuid() {
  defuid_ = GOOGLE_ULONGLONG(0);
  clear_has_defuid();
}
inline ::google::protobuf::uint64 TPlatformArenaMatchData::defuid() const {
  // @@protoc_insertion_point(field_get:pb.TPlatformArenaMatchData.DefUid)
  return defuid_;
}
inline void TPlatformArenaMatchData::set_defuid(::google::protobuf::uint64 value) {
  set_has_defuid();
  defuid_ = value;
  // @@protoc_insertion_point(field_set:pb.TPlatformArenaMatchData.DefUid)
}

// optional uint64 DoneTime = 4;
inline bool TPlatformArenaMatchData::has_donetime() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void TPlatformArenaMatchData::set_has_donetime() {
  _has_bits_[0] |= 0x00000008u;
}
inline void TPlatformArenaMatchData::clear_has_donetime() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void TPlatformArenaMatchData::clear_donetime() {
  donetime_ = GOOGLE_ULONGLONG(0);
  clear_has_donetime();
}
inline ::google::protobuf::uint64 TPlatformArenaMatchData::donetime() const {
  // @@protoc_insertion_point(field_get:pb.TPlatformArenaMatchData.DoneTime)
  return donetime_;
}
inline void TPlatformArenaMatchData::set_donetime(::google::protobuf::uint64 value) {
  set_has_donetime();
  donetime_ = value;
  // @@protoc_insertion_point(field_set:pb.TPlatformArenaMatchData.DoneTime)
}

// optional uint64 WinUid = 5;
inline bool TPlatformArenaMatchData::has_winuid() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void TPlatformArenaMatchData::set_has_winuid() {
  _has_bits_[0] |= 0x00000010u;
}
inline void TPlatformArenaMatchData::clear_has_winuid() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void TPlatformArenaMatchData::clear_winuid() {
  winuid_ = GOOGLE_ULONGLONG(0);
  clear_has_winuid();
}
inline ::google::protobuf::uint64 TPlatformArenaMatchData::winuid() const {
  // @@protoc_insertion_point(field_get:pb.TPlatformArenaMatchData.WinUid)
  return winuid_;
}
inline void TPlatformArenaMatchData::set_winuid(::google::protobuf::uint64 value) {
  set_has_winuid();
  winuid_ = value;
  // @@protoc_insertion_point(field_set:pb.TPlatformArenaMatchData.WinUid)
}

// optional uint64 AtkFightForce = 6;
inline bool TPlatformArenaMatchData::has_atkfightforce() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void TPlatformArenaMatchData::set_has_atkfightforce() {
  _has_bits_[0] |= 0x00000020u;
}
inline void TPlatformArenaMatchData::clear_has_atkfightforce() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void TPlatformArenaMatchData::clear_atkfightforce() {
  atkfightforce_ = GOOGLE_ULONGLONG(0);
  clear_has_atkfightforce();
}
inline ::google::protobuf::uint64 TPlatformArenaMatchData::atkfightforce() const {
  // @@protoc_insertion_point(field_get:pb.TPlatformArenaMatchData.AtkFightForce)
  return atkfightforce_;
}
inline void TPlatformArenaMatchData::set_atkfightforce(::google::protobuf::uint64 value) {
  set_has_atkfightforce();
  atkfightforce_ = value;
  // @@protoc_insertion_point(field_set:pb.TPlatformArenaMatchData.AtkFightForce)
}

// optional uint64 DefFightForce = 7;
inline bool TPlatformArenaMatchData::has_deffightforce() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void TPlatformArenaMatchData::set_has_deffightforce() {
  _has_bits_[0] |= 0x00000040u;
}
inline void TPlatformArenaMatchData::clear_has_deffightforce() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void TPlatformArenaMatchData::clear_deffightforce() {
  deffightforce_ = GOOGLE_ULONGLONG(0);
  clear_has_deffightforce();
}
inline ::google::protobuf::uint64 TPlatformArenaMatchData::deffightforce() const {
  // @@protoc_insertion_point(field_get:pb.TPlatformArenaMatchData.DefFightForce)
  return deffightforce_;
}
inline void TPlatformArenaMatchData::set_deffightforce(::google::protobuf::uint64 value) {
  set_has_deffightforce();
  deffightforce_ = value;
  // @@protoc_insertion_point(field_set:pb.TPlatformArenaMatchData.DefFightForce)
}

// -------------------------------------------------------------------

// TPlatformArenaGetPmMatchInfoReq

// optional uint32 GroupId = 1;
inline bool TPlatformArenaGetPmMatchInfoReq::has_groupid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TPlatformArenaGetPmMatchInfoReq::set_has_groupid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TPlatformArenaGetPmMatchInfoReq::clear_has_groupid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TPlatformArenaGetPmMatchInfoReq::clear_groupid() {
  groupid_ = 0u;
  clear_has_groupid();
}
inline ::google::protobuf::uint32 TPlatformArenaGetPmMatchInfoReq::groupid() const {
  // @@protoc_insertion_point(field_get:pb.TPlatformArenaGetPmMatchInfoReq.GroupId)
  return groupid_;
}
inline void TPlatformArenaGetPmMatchInfoReq::set_groupid(::google::protobuf::uint32 value) {
  set_has_groupid();
  groupid_ = value;
  // @@protoc_insertion_point(field_set:pb.TPlatformArenaGetPmMatchInfoReq.GroupId)
}

// -------------------------------------------------------------------

// TPlatformArenaGetPmMatchInfoRsp

// optional uint32 GroupId = 1;
inline bool TPlatformArenaGetPmMatchInfoRsp::has_groupid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TPlatformArenaGetPmMatchInfoRsp::set_has_groupid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TPlatformArenaGetPmMatchInfoRsp::clear_has_groupid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TPlatformArenaGetPmMatchInfoRsp::clear_groupid() {
  groupid_ = 0u;
  clear_has_groupid();
}
inline ::google::protobuf::uint32 TPlatformArenaGetPmMatchInfoRsp::groupid() const {
  // @@protoc_insertion_point(field_get:pb.TPlatformArenaGetPmMatchInfoRsp.GroupId)
  return groupid_;
}
inline void TPlatformArenaGetPmMatchInfoRsp::set_groupid(::google::protobuf::uint32 value) {
  set_has_groupid();
  groupid_ = value;
  // @@protoc_insertion_point(field_set:pb.TPlatformArenaGetPmMatchInfoRsp.GroupId)
}

// repeated .pb.TUserSimpleInfo ArrUserInfo = 2;
inline int TPlatformArenaGetPmMatchInfoRsp::arruserinfo_size() const {
  return arruserinfo_.size();
}
inline void TPlatformArenaGetPmMatchInfoRsp::clear_arruserinfo() {
  arruserinfo_.Clear();
}
inline const ::pb::TUserSimpleInfo& TPlatformArenaGetPmMatchInfoRsp::arruserinfo(int index) const {
  // @@protoc_insertion_point(field_get:pb.TPlatformArenaGetPmMatchInfoRsp.ArrUserInfo)
  return arruserinfo_.Get(index);
}
inline ::pb::TUserSimpleInfo* TPlatformArenaGetPmMatchInfoRsp::mutable_arruserinfo(int index) {
  // @@protoc_insertion_point(field_mutable:pb.TPlatformArenaGetPmMatchInfoRsp.ArrUserInfo)
  return arruserinfo_.Mutable(index);
}
inline ::pb::TUserSimpleInfo* TPlatformArenaGetPmMatchInfoRsp::add_arruserinfo() {
  // @@protoc_insertion_point(field_add:pb.TPlatformArenaGetPmMatchInfoRsp.ArrUserInfo)
  return arruserinfo_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::TUserSimpleInfo >&
TPlatformArenaGetPmMatchInfoRsp::arruserinfo() const {
  // @@protoc_insertion_point(field_list:pb.TPlatformArenaGetPmMatchInfoRsp.ArrUserInfo)
  return arruserinfo_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb::TUserSimpleInfo >*
TPlatformArenaGetPmMatchInfoRsp::mutable_arruserinfo() {
  // @@protoc_insertion_point(field_mutable_list:pb.TPlatformArenaGetPmMatchInfoRsp.ArrUserInfo)
  return &arruserinfo_;
}

// repeated .pb.TPlatformArenaMatchData ArrArenaMatchData = 3;
inline int TPlatformArenaGetPmMatchInfoRsp::arrarenamatchdata_size() const {
  return arrarenamatchdata_.size();
}
inline void TPlatformArenaGetPmMatchInfoRsp::clear_arrarenamatchdata() {
  arrarenamatchdata_.Clear();
}
inline const ::pb::TPlatformArenaMatchData& TPlatformArenaGetPmMatchInfoRsp::arrarenamatchdata(int index) const {
  // @@protoc_insertion_point(field_get:pb.TPlatformArenaGetPmMatchInfoRsp.ArrArenaMatchData)
  return arrarenamatchdata_.Get(index);
}
inline ::pb::TPlatformArenaMatchData* TPlatformArenaGetPmMatchInfoRsp::mutable_arrarenamatchdata(int index) {
  // @@protoc_insertion_point(field_mutable:pb.TPlatformArenaGetPmMatchInfoRsp.ArrArenaMatchData)
  return arrarenamatchdata_.Mutable(index);
}
inline ::pb::TPlatformArenaMatchData* TPlatformArenaGetPmMatchInfoRsp::add_arrarenamatchdata() {
  // @@protoc_insertion_point(field_add:pb.TPlatformArenaGetPmMatchInfoRsp.ArrArenaMatchData)
  return arrarenamatchdata_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::TPlatformArenaMatchData >&
TPlatformArenaGetPmMatchInfoRsp::arrarenamatchdata() const {
  // @@protoc_insertion_point(field_list:pb.TPlatformArenaGetPmMatchInfoRsp.ArrArenaMatchData)
  return arrarenamatchdata_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb::TPlatformArenaMatchData >*
TPlatformArenaGetPmMatchInfoRsp::mutable_arrarenamatchdata() {
  // @@protoc_insertion_point(field_mutable_list:pb.TPlatformArenaGetPmMatchInfoRsp.ArrArenaMatchData)
  return &arrarenamatchdata_;
}

// -------------------------------------------------------------------

// TGuessRecordData

// optional uint32 GroupId = 1;
inline bool TGuessRecordData::has_groupid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TGuessRecordData::set_has_groupid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TGuessRecordData::clear_has_groupid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TGuessRecordData::clear_groupid() {
  groupid_ = 0u;
  clear_has_groupid();
}
inline ::google::protobuf::uint32 TGuessRecordData::groupid() const {
  // @@protoc_insertion_point(field_get:pb.TGuessRecordData.GroupId)
  return groupid_;
}
inline void TGuessRecordData::set_groupid(::google::protobuf::uint32 value) {
  set_has_groupid();
  groupid_ = value;
  // @@protoc_insertion_point(field_set:pb.TGuessRecordData.GroupId)
}

// optional uint32 MatchId = 2;
inline bool TGuessRecordData::has_matchid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TGuessRecordData::set_has_matchid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TGuessRecordData::clear_has_matchid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TGuessRecordData::clear_matchid() {
  matchid_ = 0u;
  clear_has_matchid();
}
inline ::google::protobuf::uint32 TGuessRecordData::matchid() const {
  // @@protoc_insertion_point(field_get:pb.TGuessRecordData.MatchId)
  return matchid_;
}
inline void TGuessRecordData::set_matchid(::google::protobuf::uint32 value) {
  set_has_matchid();
  matchid_ = value;
  // @@protoc_insertion_point(field_set:pb.TGuessRecordData.MatchId)
}

// optional uint64 WinUid = 3;
inline bool TGuessRecordData::has_winuid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void TGuessRecordData::set_has_winuid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void TGuessRecordData::clear_has_winuid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void TGuessRecordData::clear_winuid() {
  winuid_ = GOOGLE_ULONGLONG(0);
  clear_has_winuid();
}
inline ::google::protobuf::uint64 TGuessRecordData::winuid() const {
  // @@protoc_insertion_point(field_get:pb.TGuessRecordData.WinUid)
  return winuid_;
}
inline void TGuessRecordData::set_winuid(::google::protobuf::uint64 value) {
  set_has_winuid();
  winuid_ = value;
  // @@protoc_insertion_point(field_set:pb.TGuessRecordData.WinUid)
}

// optional uint32 GuessStatus = 4;
inline bool TGuessRecordData::has_guessstatus() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void TGuessRecordData::set_has_guessstatus() {
  _has_bits_[0] |= 0x00000008u;
}
inline void TGuessRecordData::clear_has_guessstatus() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void TGuessRecordData::clear_guessstatus() {
  guessstatus_ = 0u;
  clear_has_guessstatus();
}
inline ::google::protobuf::uint32 TGuessRecordData::guessstatus() const {
  // @@protoc_insertion_point(field_get:pb.TGuessRecordData.GuessStatus)
  return guessstatus_;
}
inline void TGuessRecordData::set_guessstatus(::google::protobuf::uint32 value) {
  set_has_guessstatus();
  guessstatus_ = value;
  // @@protoc_insertion_point(field_set:pb.TGuessRecordData.GuessStatus)
}

// optional uint32 BetIndex = 5;
inline bool TGuessRecordData::has_betindex() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void TGuessRecordData::set_has_betindex() {
  _has_bits_[0] |= 0x00000010u;
}
inline void TGuessRecordData::clear_has_betindex() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void TGuessRecordData::clear_betindex() {
  betindex_ = 0u;
  clear_has_betindex();
}
inline ::google::protobuf::uint32 TGuessRecordData::betindex() const {
  // @@protoc_insertion_point(field_get:pb.TGuessRecordData.BetIndex)
  return betindex_;
}
inline void TGuessRecordData::set_betindex(::google::protobuf::uint32 value) {
  set_has_betindex();
  betindex_ = value;
  // @@protoc_insertion_point(field_set:pb.TGuessRecordData.BetIndex)
}

// optional uint32 GuessAtkWinNum = 6;
inline bool TGuessRecordData::has_guessatkwinnum() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void TGuessRecordData::set_has_guessatkwinnum() {
  _has_bits_[0] |= 0x00000020u;
}
inline void TGuessRecordData::clear_has_guessatkwinnum() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void TGuessRecordData::clear_guessatkwinnum() {
  guessatkwinnum_ = 0u;
  clear_has_guessatkwinnum();
}
inline ::google::protobuf::uint32 TGuessRecordData::guessatkwinnum() const {
  // @@protoc_insertion_point(field_get:pb.TGuessRecordData.GuessAtkWinNum)
  return guessatkwinnum_;
}
inline void TGuessRecordData::set_guessatkwinnum(::google::protobuf::uint32 value) {
  set_has_guessatkwinnum();
  guessatkwinnum_ = value;
  // @@protoc_insertion_point(field_set:pb.TGuessRecordData.GuessAtkWinNum)
}

// optional uint32 GuessDefWinNum = 7;
inline bool TGuessRecordData::has_guessdefwinnum() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void TGuessRecordData::set_has_guessdefwinnum() {
  _has_bits_[0] |= 0x00000040u;
}
inline void TGuessRecordData::clear_has_guessdefwinnum() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void TGuessRecordData::clear_guessdefwinnum() {
  guessdefwinnum_ = 0u;
  clear_has_guessdefwinnum();
}
inline ::google::protobuf::uint32 TGuessRecordData::guessdefwinnum() const {
  // @@protoc_insertion_point(field_get:pb.TGuessRecordData.GuessDefWinNum)
  return guessdefwinnum_;
}
inline void TGuessRecordData::set_guessdefwinnum(::google::protobuf::uint32 value) {
  set_has_guessdefwinnum();
  guessdefwinnum_ = value;
  // @@protoc_insertion_point(field_set:pb.TGuessRecordData.GuessDefWinNum)
}

// repeated .pb.TPlatformArenaLeaveMessageData MsgLst = 8;
inline int TGuessRecordData::msglst_size() const {
  return msglst_.size();
}
inline void TGuessRecordData::clear_msglst() {
  msglst_.Clear();
}
inline const ::pb::TPlatformArenaLeaveMessageData& TGuessRecordData::msglst(int index) const {
  // @@protoc_insertion_point(field_get:pb.TGuessRecordData.MsgLst)
  return msglst_.Get(index);
}
inline ::pb::TPlatformArenaLeaveMessageData* TGuessRecordData::mutable_msglst(int index) {
  // @@protoc_insertion_point(field_mutable:pb.TGuessRecordData.MsgLst)
  return msglst_.Mutable(index);
}
inline ::pb::TPlatformArenaLeaveMessageData* TGuessRecordData::add_msglst() {
  // @@protoc_insertion_point(field_add:pb.TGuessRecordData.MsgLst)
  return msglst_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::TPlatformArenaLeaveMessageData >&
TGuessRecordData::msglst() const {
  // @@protoc_insertion_point(field_list:pb.TGuessRecordData.MsgLst)
  return msglst_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb::TPlatformArenaLeaveMessageData >*
TGuessRecordData::mutable_msglst() {
  // @@protoc_insertion_point(field_mutable_list:pb.TGuessRecordData.MsgLst)
  return &msglst_;
}

// -------------------------------------------------------------------

// TPlatformArenaGetGuessRecordRsp

// repeated .pb.TGuessRecordData ArrGuessRecord = 1;
inline int TPlatformArenaGetGuessRecordRsp::arrguessrecord_size() const {
  return arrguessrecord_.size();
}
inline void TPlatformArenaGetGuessRecordRsp::clear_arrguessrecord() {
  arrguessrecord_.Clear();
}
inline const ::pb::TGuessRecordData& TPlatformArenaGetGuessRecordRsp::arrguessrecord(int index) const {
  // @@protoc_insertion_point(field_get:pb.TPlatformArenaGetGuessRecordRsp.ArrGuessRecord)
  return arrguessrecord_.Get(index);
}
inline ::pb::TGuessRecordData* TPlatformArenaGetGuessRecordRsp::mutable_arrguessrecord(int index) {
  // @@protoc_insertion_point(field_mutable:pb.TPlatformArenaGetGuessRecordRsp.ArrGuessRecord)
  return arrguessrecord_.Mutable(index);
}
inline ::pb::TGuessRecordData* TPlatformArenaGetGuessRecordRsp::add_arrguessrecord() {
  // @@protoc_insertion_point(field_add:pb.TPlatformArenaGetGuessRecordRsp.ArrGuessRecord)
  return arrguessrecord_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::TGuessRecordData >&
TPlatformArenaGetGuessRecordRsp::arrguessrecord() const {
  // @@protoc_insertion_point(field_list:pb.TPlatformArenaGetGuessRecordRsp.ArrGuessRecord)
  return arrguessrecord_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb::TGuessRecordData >*
TPlatformArenaGetGuessRecordRsp::mutable_arrguessrecord() {
  // @@protoc_insertion_point(field_mutable_list:pb.TPlatformArenaGetGuessRecordRsp.ArrGuessRecord)
  return &arrguessrecord_;
}

// -------------------------------------------------------------------

// TPlatformArenaGuessiongReq

// optional uint32 GroupId = 1;
inline bool TPlatformArenaGuessiongReq::has_groupid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TPlatformArenaGuessiongReq::set_has_groupid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TPlatformArenaGuessiongReq::clear_has_groupid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TPlatformArenaGuessiongReq::clear_groupid() {
  groupid_ = 0u;
  clear_has_groupid();
}
inline ::google::protobuf::uint32 TPlatformArenaGuessiongReq::groupid() const {
  // @@protoc_insertion_point(field_get:pb.TPlatformArenaGuessiongReq.GroupId)
  return groupid_;
}
inline void TPlatformArenaGuessiongReq::set_groupid(::google::protobuf::uint32 value) {
  set_has_groupid();
  groupid_ = value;
  // @@protoc_insertion_point(field_set:pb.TPlatformArenaGuessiongReq.GroupId)
}

// optional uint32 MatchId = 2;
inline bool TPlatformArenaGuessiongReq::has_matchid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TPlatformArenaGuessiongReq::set_has_matchid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TPlatformArenaGuessiongReq::clear_has_matchid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TPlatformArenaGuessiongReq::clear_matchid() {
  matchid_ = 0u;
  clear_has_matchid();
}
inline ::google::protobuf::uint32 TPlatformArenaGuessiongReq::matchid() const {
  // @@protoc_insertion_point(field_get:pb.TPlatformArenaGuessiongReq.MatchId)
  return matchid_;
}
inline void TPlatformArenaGuessiongReq::set_matchid(::google::protobuf::uint32 value) {
  set_has_matchid();
  matchid_ = value;
  // @@protoc_insertion_point(field_set:pb.TPlatformArenaGuessiongReq.MatchId)
}

// optional uint64 Uid = 3;
inline bool TPlatformArenaGuessiongReq::has_uid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void TPlatformArenaGuessiongReq::set_has_uid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void TPlatformArenaGuessiongReq::clear_has_uid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void TPlatformArenaGuessiongReq::clear_uid() {
  uid_ = GOOGLE_ULONGLONG(0);
  clear_has_uid();
}
inline ::google::protobuf::uint64 TPlatformArenaGuessiongReq::uid() const {
  // @@protoc_insertion_point(field_get:pb.TPlatformArenaGuessiongReq.Uid)
  return uid_;
}
inline void TPlatformArenaGuessiongReq::set_uid(::google::protobuf::uint64 value) {
  set_has_uid();
  uid_ = value;
  // @@protoc_insertion_point(field_set:pb.TPlatformArenaGuessiongReq.Uid)
}

// optional uint32 BetIndex = 4;
inline bool TPlatformArenaGuessiongReq::has_betindex() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void TPlatformArenaGuessiongReq::set_has_betindex() {
  _has_bits_[0] |= 0x00000008u;
}
inline void TPlatformArenaGuessiongReq::clear_has_betindex() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void TPlatformArenaGuessiongReq::clear_betindex() {
  betindex_ = 0u;
  clear_has_betindex();
}
inline ::google::protobuf::uint32 TPlatformArenaGuessiongReq::betindex() const {
  // @@protoc_insertion_point(field_get:pb.TPlatformArenaGuessiongReq.BetIndex)
  return betindex_;
}
inline void TPlatformArenaGuessiongReq::set_betindex(::google::protobuf::uint32 value) {
  set_has_betindex();
  betindex_ = value;
  // @@protoc_insertion_point(field_set:pb.TPlatformArenaGuessiongReq.BetIndex)
}

// -------------------------------------------------------------------

// TPlatformArenaGetGuessingRewardReq

// repeated uint32 ArrMatchId = 1;
inline int TPlatformArenaGetGuessingRewardReq::arrmatchid_size() const {
  return arrmatchid_.size();
}
inline void TPlatformArenaGetGuessingRewardReq::clear_arrmatchid() {
  arrmatchid_.Clear();
}
inline ::google::protobuf::uint32 TPlatformArenaGetGuessingRewardReq::arrmatchid(int index) const {
  // @@protoc_insertion_point(field_get:pb.TPlatformArenaGetGuessingRewardReq.ArrMatchId)
  return arrmatchid_.Get(index);
}
inline void TPlatformArenaGetGuessingRewardReq::set_arrmatchid(int index, ::google::protobuf::uint32 value) {
  arrmatchid_.Set(index, value);
  // @@protoc_insertion_point(field_set:pb.TPlatformArenaGetGuessingRewardReq.ArrMatchId)
}
inline void TPlatformArenaGetGuessingRewardReq::add_arrmatchid(::google::protobuf::uint32 value) {
  arrmatchid_.Add(value);
  // @@protoc_insertion_point(field_add:pb.TPlatformArenaGetGuessingRewardReq.ArrMatchId)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
TPlatformArenaGetGuessingRewardReq::arrmatchid() const {
  // @@protoc_insertion_point(field_list:pb.TPlatformArenaGetGuessingRewardReq.ArrMatchId)
  return arrmatchid_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
TPlatformArenaGetGuessingRewardReq::mutable_arrmatchid() {
  // @@protoc_insertion_point(field_mutable_list:pb.TPlatformArenaGetGuessingRewardReq.ArrMatchId)
  return &arrmatchid_;
}

// -------------------------------------------------------------------

// TPlatformArenaGetGuessingRewardRsp

// repeated .pb.TCommonReward ArrRewardInfo = 1;
inline int TPlatformArenaGetGuessingRewardRsp::arrrewardinfo_size() const {
  return arrrewardinfo_.size();
}
inline void TPlatformArenaGetGuessingRewardRsp::clear_arrrewardinfo() {
  arrrewardinfo_.Clear();
}
inline const ::pb::TCommonReward& TPlatformArenaGetGuessingRewardRsp::arrrewardinfo(int index) const {
  // @@protoc_insertion_point(field_get:pb.TPlatformArenaGetGuessingRewardRsp.ArrRewardInfo)
  return arrrewardinfo_.Get(index);
}
inline ::pb::TCommonReward* TPlatformArenaGetGuessingRewardRsp::mutable_arrrewardinfo(int index) {
  // @@protoc_insertion_point(field_mutable:pb.TPlatformArenaGetGuessingRewardRsp.ArrRewardInfo)
  return arrrewardinfo_.Mutable(index);
}
inline ::pb::TCommonReward* TPlatformArenaGetGuessingRewardRsp::add_arrrewardinfo() {
  // @@protoc_insertion_point(field_add:pb.TPlatformArenaGetGuessingRewardRsp.ArrRewardInfo)
  return arrrewardinfo_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::TCommonReward >&
TPlatformArenaGetGuessingRewardRsp::arrrewardinfo() const {
  // @@protoc_insertion_point(field_list:pb.TPlatformArenaGetGuessingRewardRsp.ArrRewardInfo)
  return arrrewardinfo_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb::TCommonReward >*
TPlatformArenaGetGuessingRewardRsp::mutable_arrrewardinfo() {
  // @@protoc_insertion_point(field_mutable_list:pb.TPlatformArenaGetGuessingRewardRsp.ArrRewardInfo)
  return &arrrewardinfo_;
}

// -------------------------------------------------------------------

// TGuessRecordNotify

// optional .pb.TGuessRecordData GuessRecord = 1;
inline bool TGuessRecordNotify::has_guessrecord() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TGuessRecordNotify::set_has_guessrecord() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TGuessRecordNotify::clear_has_guessrecord() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TGuessRecordNotify::clear_guessrecord() {
  if (guessrecord_ != NULL) guessrecord_->::pb::TGuessRecordData::Clear();
  clear_has_guessrecord();
}
inline const ::pb::TGuessRecordData& TGuessRecordNotify::guessrecord() const {
  // @@protoc_insertion_point(field_get:pb.TGuessRecordNotify.GuessRecord)
  return guessrecord_ != NULL ? *guessrecord_ : *default_instance_->guessrecord_;
}
inline ::pb::TGuessRecordData* TGuessRecordNotify::mutable_guessrecord() {
  set_has_guessrecord();
  if (guessrecord_ == NULL) guessrecord_ = new ::pb::TGuessRecordData;
  // @@protoc_insertion_point(field_mutable:pb.TGuessRecordNotify.GuessRecord)
  return guessrecord_;
}
inline ::pb::TGuessRecordData* TGuessRecordNotify::release_guessrecord() {
  clear_has_guessrecord();
  ::pb::TGuessRecordData* temp = guessrecord_;
  guessrecord_ = NULL;
  return temp;
}
inline void TGuessRecordNotify::set_allocated_guessrecord(::pb::TGuessRecordData* guessrecord) {
  delete guessrecord_;
  guessrecord_ = guessrecord;
  if (guessrecord) {
    set_has_guessrecord();
  } else {
    clear_has_guessrecord();
  }
  // @@protoc_insertion_point(field_set_allocated:pb.TGuessRecordNotify.GuessRecord)
}

// -------------------------------------------------------------------

// TPlatformArenaGiveThumbReq

// optional uint32 GroupId = 1;
inline bool TPlatformArenaGiveThumbReq::has_groupid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TPlatformArenaGiveThumbReq::set_has_groupid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TPlatformArenaGiveThumbReq::clear_has_groupid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TPlatformArenaGiveThumbReq::clear_groupid() {
  groupid_ = 0u;
  clear_has_groupid();
}
inline ::google::protobuf::uint32 TPlatformArenaGiveThumbReq::groupid() const {
  // @@protoc_insertion_point(field_get:pb.TPlatformArenaGiveThumbReq.GroupId)
  return groupid_;
}
inline void TPlatformArenaGiveThumbReq::set_groupid(::google::protobuf::uint32 value) {
  set_has_groupid();
  groupid_ = value;
  // @@protoc_insertion_point(field_set:pb.TPlatformArenaGiveThumbReq.GroupId)
}

// optional uint64 Uid = 2;
inline bool TPlatformArenaGiveThumbReq::has_uid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TPlatformArenaGiveThumbReq::set_has_uid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TPlatformArenaGiveThumbReq::clear_has_uid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TPlatformArenaGiveThumbReq::clear_uid() {
  uid_ = GOOGLE_ULONGLONG(0);
  clear_has_uid();
}
inline ::google::protobuf::uint64 TPlatformArenaGiveThumbReq::uid() const {
  // @@protoc_insertion_point(field_get:pb.TPlatformArenaGiveThumbReq.Uid)
  return uid_;
}
inline void TPlatformArenaGiveThumbReq::set_uid(::google::protobuf::uint64 value) {
  set_has_uid();
  uid_ = value;
  // @@protoc_insertion_point(field_set:pb.TPlatformArenaGiveThumbReq.Uid)
}

// -------------------------------------------------------------------

// TPlatformArenaGiveThumbRsp

// optional uint64 Uid = 1;
inline bool TPlatformArenaGiveThumbRsp::has_uid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TPlatformArenaGiveThumbRsp::set_has_uid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TPlatformArenaGiveThumbRsp::clear_has_uid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TPlatformArenaGiveThumbRsp::clear_uid() {
  uid_ = GOOGLE_ULONGLONG(0);
  clear_has_uid();
}
inline ::google::protobuf::uint64 TPlatformArenaGiveThumbRsp::uid() const {
  // @@protoc_insertion_point(field_get:pb.TPlatformArenaGiveThumbRsp.Uid)
  return uid_;
}
inline void TPlatformArenaGiveThumbRsp::set_uid(::google::protobuf::uint64 value) {
  set_has_uid();
  uid_ = value;
  // @@protoc_insertion_point(field_set:pb.TPlatformArenaGiveThumbRsp.Uid)
}

// optional uint32 ThumbNum = 2;
inline bool TPlatformArenaGiveThumbRsp::has_thumbnum() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TPlatformArenaGiveThumbRsp::set_has_thumbnum() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TPlatformArenaGiveThumbRsp::clear_has_thumbnum() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TPlatformArenaGiveThumbRsp::clear_thumbnum() {
  thumbnum_ = 0u;
  clear_has_thumbnum();
}
inline ::google::protobuf::uint32 TPlatformArenaGiveThumbRsp::thumbnum() const {
  // @@protoc_insertion_point(field_get:pb.TPlatformArenaGiveThumbRsp.ThumbNum)
  return thumbnum_;
}
inline void TPlatformArenaGiveThumbRsp::set_thumbnum(::google::protobuf::uint32 value) {
  set_has_thumbnum();
  thumbnum_ = value;
  // @@protoc_insertion_point(field_set:pb.TPlatformArenaGiveThumbRsp.ThumbNum)
}

// -------------------------------------------------------------------

// TPlatformArenaBattleHeroStatus

// optional uint32 Htid = 1;
inline bool TPlatformArenaBattleHeroStatus::has_htid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TPlatformArenaBattleHeroStatus::set_has_htid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TPlatformArenaBattleHeroStatus::clear_has_htid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TPlatformArenaBattleHeroStatus::clear_htid() {
  htid_ = 0u;
  clear_has_htid();
}
inline ::google::protobuf::uint32 TPlatformArenaBattleHeroStatus::htid() const {
  // @@protoc_insertion_point(field_get:pb.TPlatformArenaBattleHeroStatus.Htid)
  return htid_;
}
inline void TPlatformArenaBattleHeroStatus::set_htid(::google::protobuf::uint32 value) {
  set_has_htid();
  htid_ = value;
  // @@protoc_insertion_point(field_set:pb.TPlatformArenaBattleHeroStatus.Htid)
}

// optional uint32 Pos = 2;
inline bool TPlatformArenaBattleHeroStatus::has_pos() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TPlatformArenaBattleHeroStatus::set_has_pos() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TPlatformArenaBattleHeroStatus::clear_has_pos() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TPlatformArenaBattleHeroStatus::clear_pos() {
  pos_ = 0u;
  clear_has_pos();
}
inline ::google::protobuf::uint32 TPlatformArenaBattleHeroStatus::pos() const {
  // @@protoc_insertion_point(field_get:pb.TPlatformArenaBattleHeroStatus.Pos)
  return pos_;
}
inline void TPlatformArenaBattleHeroStatus::set_pos(::google::protobuf::uint32 value) {
  set_has_pos();
  pos_ = value;
  // @@protoc_insertion_point(field_set:pb.TPlatformArenaBattleHeroStatus.Pos)
}

// optional uint32 IsKilled = 3;
inline bool TPlatformArenaBattleHeroStatus::has_iskilled() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void TPlatformArenaBattleHeroStatus::set_has_iskilled() {
  _has_bits_[0] |= 0x00000004u;
}
inline void TPlatformArenaBattleHeroStatus::clear_has_iskilled() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void TPlatformArenaBattleHeroStatus::clear_iskilled() {
  iskilled_ = 0u;
  clear_has_iskilled();
}
inline ::google::protobuf::uint32 TPlatformArenaBattleHeroStatus::iskilled() const {
  // @@protoc_insertion_point(field_get:pb.TPlatformArenaBattleHeroStatus.IsKilled)
  return iskilled_;
}
inline void TPlatformArenaBattleHeroStatus::set_iskilled(::google::protobuf::uint32 value) {
  set_has_iskilled();
  iskilled_ = value;
  // @@protoc_insertion_point(field_set:pb.TPlatformArenaBattleHeroStatus.IsKilled)
}

// optional uint32 Level = 4;
inline bool TPlatformArenaBattleHeroStatus::has_level() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void TPlatformArenaBattleHeroStatus::set_has_level() {
  _has_bits_[0] |= 0x00000008u;
}
inline void TPlatformArenaBattleHeroStatus::clear_has_level() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void TPlatformArenaBattleHeroStatus::clear_level() {
  level_ = 0u;
  clear_has_level();
}
inline ::google::protobuf::uint32 TPlatformArenaBattleHeroStatus::level() const {
  // @@protoc_insertion_point(field_get:pb.TPlatformArenaBattleHeroStatus.Level)
  return level_;
}
inline void TPlatformArenaBattleHeroStatus::set_level(::google::protobuf::uint32 value) {
  set_has_level();
  level_ = value;
  // @@protoc_insertion_point(field_set:pb.TPlatformArenaBattleHeroStatus.Level)
}

// optional uint32 StarLv = 5;
inline bool TPlatformArenaBattleHeroStatus::has_starlv() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void TPlatformArenaBattleHeroStatus::set_has_starlv() {
  _has_bits_[0] |= 0x00000010u;
}
inline void TPlatformArenaBattleHeroStatus::clear_has_starlv() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void TPlatformArenaBattleHeroStatus::clear_starlv() {
  starlv_ = 0u;
  clear_has_starlv();
}
inline ::google::protobuf::uint32 TPlatformArenaBattleHeroStatus::starlv() const {
  // @@protoc_insertion_point(field_get:pb.TPlatformArenaBattleHeroStatus.StarLv)
  return starlv_;
}
inline void TPlatformArenaBattleHeroStatus::set_starlv(::google::protobuf::uint32 value) {
  set_has_starlv();
  starlv_ = value;
  // @@protoc_insertion_point(field_set:pb.TPlatformArenaBattleHeroStatus.StarLv)
}

// optional uint32 Hid = 6;
inline bool TPlatformArenaBattleHeroStatus::has_hid() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void TPlatformArenaBattleHeroStatus::set_has_hid() {
  _has_bits_[0] |= 0x00000020u;
}
inline void TPlatformArenaBattleHeroStatus::clear_has_hid() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void TPlatformArenaBattleHeroStatus::clear_hid() {
  hid_ = 0u;
  clear_has_hid();
}
inline ::google::protobuf::uint32 TPlatformArenaBattleHeroStatus::hid() const {
  // @@protoc_insertion_point(field_get:pb.TPlatformArenaBattleHeroStatus.Hid)
  return hid_;
}
inline void TPlatformArenaBattleHeroStatus::set_hid(::google::protobuf::uint32 value) {
  set_has_hid();
  hid_ = value;
  // @@protoc_insertion_point(field_set:pb.TPlatformArenaBattleHeroStatus.Hid)
}

// -------------------------------------------------------------------

// TPlatformArenaPreviewBattleResult

// optional uint32 FormationId = 1;
inline bool TPlatformArenaPreviewBattleResult::has_formationid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TPlatformArenaPreviewBattleResult::set_has_formationid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TPlatformArenaPreviewBattleResult::clear_has_formationid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TPlatformArenaPreviewBattleResult::clear_formationid() {
  formationid_ = 0u;
  clear_has_formationid();
}
inline ::google::protobuf::uint32 TPlatformArenaPreviewBattleResult::formationid() const {
  // @@protoc_insertion_point(field_get:pb.TPlatformArenaPreviewBattleResult.FormationId)
  return formationid_;
}
inline void TPlatformArenaPreviewBattleResult::set_formationid(::google::protobuf::uint32 value) {
  set_has_formationid();
  formationid_ = value;
  // @@protoc_insertion_point(field_set:pb.TPlatformArenaPreviewBattleResult.FormationId)
}

// repeated .pb.TPlatformArenaBattleHeroStatus ArrAtkHeroInfo = 2;
inline int TPlatformArenaPreviewBattleResult::arratkheroinfo_size() const {
  return arratkheroinfo_.size();
}
inline void TPlatformArenaPreviewBattleResult::clear_arratkheroinfo() {
  arratkheroinfo_.Clear();
}
inline const ::pb::TPlatformArenaBattleHeroStatus& TPlatformArenaPreviewBattleResult::arratkheroinfo(int index) const {
  // @@protoc_insertion_point(field_get:pb.TPlatformArenaPreviewBattleResult.ArrAtkHeroInfo)
  return arratkheroinfo_.Get(index);
}
inline ::pb::TPlatformArenaBattleHeroStatus* TPlatformArenaPreviewBattleResult::mutable_arratkheroinfo(int index) {
  // @@protoc_insertion_point(field_mutable:pb.TPlatformArenaPreviewBattleResult.ArrAtkHeroInfo)
  return arratkheroinfo_.Mutable(index);
}
inline ::pb::TPlatformArenaBattleHeroStatus* TPlatformArenaPreviewBattleResult::add_arratkheroinfo() {
  // @@protoc_insertion_point(field_add:pb.TPlatformArenaPreviewBattleResult.ArrAtkHeroInfo)
  return arratkheroinfo_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::TPlatformArenaBattleHeroStatus >&
TPlatformArenaPreviewBattleResult::arratkheroinfo() const {
  // @@protoc_insertion_point(field_list:pb.TPlatformArenaPreviewBattleResult.ArrAtkHeroInfo)
  return arratkheroinfo_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb::TPlatformArenaBattleHeroStatus >*
TPlatformArenaPreviewBattleResult::mutable_arratkheroinfo() {
  // @@protoc_insertion_point(field_mutable_list:pb.TPlatformArenaPreviewBattleResult.ArrAtkHeroInfo)
  return &arratkheroinfo_;
}

// repeated .pb.TPlatformArenaBattleHeroStatus ArrDefHeroInfo = 3;
inline int TPlatformArenaPreviewBattleResult::arrdefheroinfo_size() const {
  return arrdefheroinfo_.size();
}
inline void TPlatformArenaPreviewBattleResult::clear_arrdefheroinfo() {
  arrdefheroinfo_.Clear();
}
inline const ::pb::TPlatformArenaBattleHeroStatus& TPlatformArenaPreviewBattleResult::arrdefheroinfo(int index) const {
  // @@protoc_insertion_point(field_get:pb.TPlatformArenaPreviewBattleResult.ArrDefHeroInfo)
  return arrdefheroinfo_.Get(index);
}
inline ::pb::TPlatformArenaBattleHeroStatus* TPlatformArenaPreviewBattleResult::mutable_arrdefheroinfo(int index) {
  // @@protoc_insertion_point(field_mutable:pb.TPlatformArenaPreviewBattleResult.ArrDefHeroInfo)
  return arrdefheroinfo_.Mutable(index);
}
inline ::pb::TPlatformArenaBattleHeroStatus* TPlatformArenaPreviewBattleResult::add_arrdefheroinfo() {
  // @@protoc_insertion_point(field_add:pb.TPlatformArenaPreviewBattleResult.ArrDefHeroInfo)
  return arrdefheroinfo_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::TPlatformArenaBattleHeroStatus >&
TPlatformArenaPreviewBattleResult::arrdefheroinfo() const {
  // @@protoc_insertion_point(field_list:pb.TPlatformArenaPreviewBattleResult.ArrDefHeroInfo)
  return arrdefheroinfo_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb::TPlatformArenaBattleHeroStatus >*
TPlatformArenaPreviewBattleResult::mutable_arrdefheroinfo() {
  // @@protoc_insertion_point(field_mutable_list:pb.TPlatformArenaPreviewBattleResult.ArrDefHeroInfo)
  return &arrdefheroinfo_;
}

// optional uint32 IsAtkWin = 4;
inline bool TPlatformArenaPreviewBattleResult::has_isatkwin() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void TPlatformArenaPreviewBattleResult::set_has_isatkwin() {
  _has_bits_[0] |= 0x00000008u;
}
inline void TPlatformArenaPreviewBattleResult::clear_has_isatkwin() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void TPlatformArenaPreviewBattleResult::clear_isatkwin() {
  isatkwin_ = 0u;
  clear_has_isatkwin();
}
inline ::google::protobuf::uint32 TPlatformArenaPreviewBattleResult::isatkwin() const {
  // @@protoc_insertion_point(field_get:pb.TPlatformArenaPreviewBattleResult.IsAtkWin)
  return isatkwin_;
}
inline void TPlatformArenaPreviewBattleResult::set_isatkwin(::google::protobuf::uint32 value) {
  set_has_isatkwin();
  isatkwin_ = value;
  // @@protoc_insertion_point(field_set:pb.TPlatformArenaPreviewBattleResult.IsAtkWin)
}

// optional uint64 Rid = 5;
inline bool TPlatformArenaPreviewBattleResult::has_rid() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void TPlatformArenaPreviewBattleResult::set_has_rid() {
  _has_bits_[0] |= 0x00000010u;
}
inline void TPlatformArenaPreviewBattleResult::clear_has_rid() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void TPlatformArenaPreviewBattleResult::clear_rid() {
  rid_ = GOOGLE_ULONGLONG(0);
  clear_has_rid();
}
inline ::google::protobuf::uint64 TPlatformArenaPreviewBattleResult::rid() const {
  // @@protoc_insertion_point(field_get:pb.TPlatformArenaPreviewBattleResult.Rid)
  return rid_;
}
inline void TPlatformArenaPreviewBattleResult::set_rid(::google::protobuf::uint64 value) {
  set_has_rid();
  rid_ = value;
  // @@protoc_insertion_point(field_set:pb.TPlatformArenaPreviewBattleResult.Rid)
}

// optional uint64 atkFightForce = 6;
inline bool TPlatformArenaPreviewBattleResult::has_atkfightforce() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void TPlatformArenaPreviewBattleResult::set_has_atkfightforce() {
  _has_bits_[0] |= 0x00000020u;
}
inline void TPlatformArenaPreviewBattleResult::clear_has_atkfightforce() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void TPlatformArenaPreviewBattleResult::clear_atkfightforce() {
  atkfightforce_ = GOOGLE_ULONGLONG(0);
  clear_has_atkfightforce();
}
inline ::google::protobuf::uint64 TPlatformArenaPreviewBattleResult::atkfightforce() const {
  // @@protoc_insertion_point(field_get:pb.TPlatformArenaPreviewBattleResult.atkFightForce)
  return atkfightforce_;
}
inline void TPlatformArenaPreviewBattleResult::set_atkfightforce(::google::protobuf::uint64 value) {
  set_has_atkfightforce();
  atkfightforce_ = value;
  // @@protoc_insertion_point(field_set:pb.TPlatformArenaPreviewBattleResult.atkFightForce)
}

// optional uint64 defFightForce = 7;
inline bool TPlatformArenaPreviewBattleResult::has_deffightforce() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void TPlatformArenaPreviewBattleResult::set_has_deffightforce() {
  _has_bits_[0] |= 0x00000040u;
}
inline void TPlatformArenaPreviewBattleResult::clear_has_deffightforce() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void TPlatformArenaPreviewBattleResult::clear_deffightforce() {
  deffightforce_ = GOOGLE_ULONGLONG(0);
  clear_has_deffightforce();
}
inline ::google::protobuf::uint64 TPlatformArenaPreviewBattleResult::deffightforce() const {
  // @@protoc_insertion_point(field_get:pb.TPlatformArenaPreviewBattleResult.defFightForce)
  return deffightforce_;
}
inline void TPlatformArenaPreviewBattleResult::set_deffightforce(::google::protobuf::uint64 value) {
  set_has_deffightforce();
  deffightforce_ = value;
  // @@protoc_insertion_point(field_set:pb.TPlatformArenaPreviewBattleResult.defFightForce)
}

// -------------------------------------------------------------------

// TPlatformArenaGetBattlePreviewReq

// optional uint32 ReqType = 1;
inline bool TPlatformArenaGetBattlePreviewReq::has_reqtype() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TPlatformArenaGetBattlePreviewReq::set_has_reqtype() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TPlatformArenaGetBattlePreviewReq::clear_has_reqtype() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TPlatformArenaGetBattlePreviewReq::clear_reqtype() {
  reqtype_ = 0u;
  clear_has_reqtype();
}
inline ::google::protobuf::uint32 TPlatformArenaGetBattlePreviewReq::reqtype() const {
  // @@protoc_insertion_point(field_get:pb.TPlatformArenaGetBattlePreviewReq.ReqType)
  return reqtype_;
}
inline void TPlatformArenaGetBattlePreviewReq::set_reqtype(::google::protobuf::uint32 value) {
  set_has_reqtype();
  reqtype_ = value;
  // @@protoc_insertion_point(field_set:pb.TPlatformArenaGetBattlePreviewReq.ReqType)
}

// optional uint32 MatchId = 2;
inline bool TPlatformArenaGetBattlePreviewReq::has_matchid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TPlatformArenaGetBattlePreviewReq::set_has_matchid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TPlatformArenaGetBattlePreviewReq::clear_has_matchid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TPlatformArenaGetBattlePreviewReq::clear_matchid() {
  matchid_ = 0u;
  clear_has_matchid();
}
inline ::google::protobuf::uint32 TPlatformArenaGetBattlePreviewReq::matchid() const {
  // @@protoc_insertion_point(field_get:pb.TPlatformArenaGetBattlePreviewReq.MatchId)
  return matchid_;
}
inline void TPlatformArenaGetBattlePreviewReq::set_matchid(::google::protobuf::uint32 value) {
  set_has_matchid();
  matchid_ = value;
  // @@protoc_insertion_point(field_set:pb.TPlatformArenaGetBattlePreviewReq.MatchId)
}

// optional uint32 ReportId = 3;
inline bool TPlatformArenaGetBattlePreviewReq::has_reportid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void TPlatformArenaGetBattlePreviewReq::set_has_reportid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void TPlatformArenaGetBattlePreviewReq::clear_has_reportid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void TPlatformArenaGetBattlePreviewReq::clear_reportid() {
  reportid_ = 0u;
  clear_has_reportid();
}
inline ::google::protobuf::uint32 TPlatformArenaGetBattlePreviewReq::reportid() const {
  // @@protoc_insertion_point(field_get:pb.TPlatformArenaGetBattlePreviewReq.ReportId)
  return reportid_;
}
inline void TPlatformArenaGetBattlePreviewReq::set_reportid(::google::protobuf::uint32 value) {
  set_has_reportid();
  reportid_ = value;
  // @@protoc_insertion_point(field_set:pb.TPlatformArenaGetBattlePreviewReq.ReportId)
}

// optional uint32 SeasonId = 4;
inline bool TPlatformArenaGetBattlePreviewReq::has_seasonid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void TPlatformArenaGetBattlePreviewReq::set_has_seasonid() {
  _has_bits_[0] |= 0x00000008u;
}
inline void TPlatformArenaGetBattlePreviewReq::clear_has_seasonid() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void TPlatformArenaGetBattlePreviewReq::clear_seasonid() {
  seasonid_ = 0u;
  clear_has_seasonid();
}
inline ::google::protobuf::uint32 TPlatformArenaGetBattlePreviewReq::seasonid() const {
  // @@protoc_insertion_point(field_get:pb.TPlatformArenaGetBattlePreviewReq.SeasonId)
  return seasonid_;
}
inline void TPlatformArenaGetBattlePreviewReq::set_seasonid(::google::protobuf::uint32 value) {
  set_has_seasonid();
  seasonid_ = value;
  // @@protoc_insertion_point(field_set:pb.TPlatformArenaGetBattlePreviewReq.SeasonId)
}

// optional uint32 GroupId = 5;
inline bool TPlatformArenaGetBattlePreviewReq::has_groupid() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void TPlatformArenaGetBattlePreviewReq::set_has_groupid() {
  _has_bits_[0] |= 0x00000010u;
}
inline void TPlatformArenaGetBattlePreviewReq::clear_has_groupid() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void TPlatformArenaGetBattlePreviewReq::clear_groupid() {
  groupid_ = 0u;
  clear_has_groupid();
}
inline ::google::protobuf::uint32 TPlatformArenaGetBattlePreviewReq::groupid() const {
  // @@protoc_insertion_point(field_get:pb.TPlatformArenaGetBattlePreviewReq.GroupId)
  return groupid_;
}
inline void TPlatformArenaGetBattlePreviewReq::set_groupid(::google::protobuf::uint32 value) {
  set_has_groupid();
  groupid_ = value;
  // @@protoc_insertion_point(field_set:pb.TPlatformArenaGetBattlePreviewReq.GroupId)
}

// -------------------------------------------------------------------

// TPlatformArenaGetBattlePreviewRsp

// optional .pb.TUserSimpleInfo AtkUserInfo = 1;
inline bool TPlatformArenaGetBattlePreviewRsp::has_atkuserinfo() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TPlatformArenaGetBattlePreviewRsp::set_has_atkuserinfo() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TPlatformArenaGetBattlePreviewRsp::clear_has_atkuserinfo() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TPlatformArenaGetBattlePreviewRsp::clear_atkuserinfo() {
  if (atkuserinfo_ != NULL) atkuserinfo_->::pb::TUserSimpleInfo::Clear();
  clear_has_atkuserinfo();
}
inline const ::pb::TUserSimpleInfo& TPlatformArenaGetBattlePreviewRsp::atkuserinfo() const {
  // @@protoc_insertion_point(field_get:pb.TPlatformArenaGetBattlePreviewRsp.AtkUserInfo)
  return atkuserinfo_ != NULL ? *atkuserinfo_ : *default_instance_->atkuserinfo_;
}
inline ::pb::TUserSimpleInfo* TPlatformArenaGetBattlePreviewRsp::mutable_atkuserinfo() {
  set_has_atkuserinfo();
  if (atkuserinfo_ == NULL) atkuserinfo_ = new ::pb::TUserSimpleInfo;
  // @@protoc_insertion_point(field_mutable:pb.TPlatformArenaGetBattlePreviewRsp.AtkUserInfo)
  return atkuserinfo_;
}
inline ::pb::TUserSimpleInfo* TPlatformArenaGetBattlePreviewRsp::release_atkuserinfo() {
  clear_has_atkuserinfo();
  ::pb::TUserSimpleInfo* temp = atkuserinfo_;
  atkuserinfo_ = NULL;
  return temp;
}
inline void TPlatformArenaGetBattlePreviewRsp::set_allocated_atkuserinfo(::pb::TUserSimpleInfo* atkuserinfo) {
  delete atkuserinfo_;
  atkuserinfo_ = atkuserinfo;
  if (atkuserinfo) {
    set_has_atkuserinfo();
  } else {
    clear_has_atkuserinfo();
  }
  // @@protoc_insertion_point(field_set_allocated:pb.TPlatformArenaGetBattlePreviewRsp.AtkUserInfo)
}

// optional .pb.TUserSimpleInfo DefUserInfo = 2;
inline bool TPlatformArenaGetBattlePreviewRsp::has_defuserinfo() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TPlatformArenaGetBattlePreviewRsp::set_has_defuserinfo() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TPlatformArenaGetBattlePreviewRsp::clear_has_defuserinfo() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TPlatformArenaGetBattlePreviewRsp::clear_defuserinfo() {
  if (defuserinfo_ != NULL) defuserinfo_->::pb::TUserSimpleInfo::Clear();
  clear_has_defuserinfo();
}
inline const ::pb::TUserSimpleInfo& TPlatformArenaGetBattlePreviewRsp::defuserinfo() const {
  // @@protoc_insertion_point(field_get:pb.TPlatformArenaGetBattlePreviewRsp.DefUserInfo)
  return defuserinfo_ != NULL ? *defuserinfo_ : *default_instance_->defuserinfo_;
}
inline ::pb::TUserSimpleInfo* TPlatformArenaGetBattlePreviewRsp::mutable_defuserinfo() {
  set_has_defuserinfo();
  if (defuserinfo_ == NULL) defuserinfo_ = new ::pb::TUserSimpleInfo;
  // @@protoc_insertion_point(field_mutable:pb.TPlatformArenaGetBattlePreviewRsp.DefUserInfo)
  return defuserinfo_;
}
inline ::pb::TUserSimpleInfo* TPlatformArenaGetBattlePreviewRsp::release_defuserinfo() {
  clear_has_defuserinfo();
  ::pb::TUserSimpleInfo* temp = defuserinfo_;
  defuserinfo_ = NULL;
  return temp;
}
inline void TPlatformArenaGetBattlePreviewRsp::set_allocated_defuserinfo(::pb::TUserSimpleInfo* defuserinfo) {
  delete defuserinfo_;
  defuserinfo_ = defuserinfo;
  if (defuserinfo) {
    set_has_defuserinfo();
  } else {
    clear_has_defuserinfo();
  }
  // @@protoc_insertion_point(field_set_allocated:pb.TPlatformArenaGetBattlePreviewRsp.DefUserInfo)
}

// repeated .pb.TPlatformArenaPreviewBattleResult ArrBattleInfo = 3;
inline int TPlatformArenaGetBattlePreviewRsp::arrbattleinfo_size() const {
  return arrbattleinfo_.size();
}
inline void TPlatformArenaGetBattlePreviewRsp::clear_arrbattleinfo() {
  arrbattleinfo_.Clear();
}
inline const ::pb::TPlatformArenaPreviewBattleResult& TPlatformArenaGetBattlePreviewRsp::arrbattleinfo(int index) const {
  // @@protoc_insertion_point(field_get:pb.TPlatformArenaGetBattlePreviewRsp.ArrBattleInfo)
  return arrbattleinfo_.Get(index);
}
inline ::pb::TPlatformArenaPreviewBattleResult* TPlatformArenaGetBattlePreviewRsp::mutable_arrbattleinfo(int index) {
  // @@protoc_insertion_point(field_mutable:pb.TPlatformArenaGetBattlePreviewRsp.ArrBattleInfo)
  return arrbattleinfo_.Mutable(index);
}
inline ::pb::TPlatformArenaPreviewBattleResult* TPlatformArenaGetBattlePreviewRsp::add_arrbattleinfo() {
  // @@protoc_insertion_point(field_add:pb.TPlatformArenaGetBattlePreviewRsp.ArrBattleInfo)
  return arrbattleinfo_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::TPlatformArenaPreviewBattleResult >&
TPlatformArenaGetBattlePreviewRsp::arrbattleinfo() const {
  // @@protoc_insertion_point(field_list:pb.TPlatformArenaGetBattlePreviewRsp.ArrBattleInfo)
  return arrbattleinfo_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb::TPlatformArenaPreviewBattleResult >*
TPlatformArenaGetBattlePreviewRsp::mutable_arrbattleinfo() {
  // @@protoc_insertion_point(field_mutable_list:pb.TPlatformArenaGetBattlePreviewRsp.ArrBattleInfo)
  return &arrbattleinfo_;
}

// -------------------------------------------------------------------

// TPlatformArenaFormationInfo

// optional uint32 FormationId = 1;
inline bool TPlatformArenaFormationInfo::has_formationid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TPlatformArenaFormationInfo::set_has_formationid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TPlatformArenaFormationInfo::clear_has_formationid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TPlatformArenaFormationInfo::clear_formationid() {
  formationid_ = 0u;
  clear_has_formationid();
}
inline ::google::protobuf::uint32 TPlatformArenaFormationInfo::formationid() const {
  // @@protoc_insertion_point(field_get:pb.TPlatformArenaFormationInfo.FormationId)
  return formationid_;
}
inline void TPlatformArenaFormationInfo::set_formationid(::google::protobuf::uint32 value) {
  set_has_formationid();
  formationid_ = value;
  // @@protoc_insertion_point(field_set:pb.TPlatformArenaFormationInfo.FormationId)
}

// repeated .pb.TPlatformArenaBattleHeroStatus UnitArr = 2;
inline int TPlatformArenaFormationInfo::unitarr_size() const {
  return unitarr_.size();
}
inline void TPlatformArenaFormationInfo::clear_unitarr() {
  unitarr_.Clear();
}
inline const ::pb::TPlatformArenaBattleHeroStatus& TPlatformArenaFormationInfo::unitarr(int index) const {
  // @@protoc_insertion_point(field_get:pb.TPlatformArenaFormationInfo.UnitArr)
  return unitarr_.Get(index);
}
inline ::pb::TPlatformArenaBattleHeroStatus* TPlatformArenaFormationInfo::mutable_unitarr(int index) {
  // @@protoc_insertion_point(field_mutable:pb.TPlatformArenaFormationInfo.UnitArr)
  return unitarr_.Mutable(index);
}
inline ::pb::TPlatformArenaBattleHeroStatus* TPlatformArenaFormationInfo::add_unitarr() {
  // @@protoc_insertion_point(field_add:pb.TPlatformArenaFormationInfo.UnitArr)
  return unitarr_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::TPlatformArenaBattleHeroStatus >&
TPlatformArenaFormationInfo::unitarr() const {
  // @@protoc_insertion_point(field_list:pb.TPlatformArenaFormationInfo.UnitArr)
  return unitarr_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb::TPlatformArenaBattleHeroStatus >*
TPlatformArenaFormationInfo::mutable_unitarr() {
  // @@protoc_insertion_point(field_mutable_list:pb.TPlatformArenaFormationInfo.UnitArr)
  return &unitarr_;
}

// optional uint64 FightForce = 3;
inline bool TPlatformArenaFormationInfo::has_fightforce() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void TPlatformArenaFormationInfo::set_has_fightforce() {
  _has_bits_[0] |= 0x00000004u;
}
inline void TPlatformArenaFormationInfo::clear_has_fightforce() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void TPlatformArenaFormationInfo::clear_fightforce() {
  fightforce_ = GOOGLE_ULONGLONG(0);
  clear_has_fightforce();
}
inline ::google::protobuf::uint64 TPlatformArenaFormationInfo::fightforce() const {
  // @@protoc_insertion_point(field_get:pb.TPlatformArenaFormationInfo.FightForce)
  return fightforce_;
}
inline void TPlatformArenaFormationInfo::set_fightforce(::google::protobuf::uint64 value) {
  set_has_fightforce();
  fightforce_ = value;
  // @@protoc_insertion_point(field_set:pb.TPlatformArenaFormationInfo.FightForce)
}

// -------------------------------------------------------------------

// TPlatformArenaGetFormationReq

// optional uint32 Round = 1;
inline bool TPlatformArenaGetFormationReq::has_round() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TPlatformArenaGetFormationReq::set_has_round() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TPlatformArenaGetFormationReq::clear_has_round() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TPlatformArenaGetFormationReq::clear_round() {
  round_ = 0u;
  clear_has_round();
}
inline ::google::protobuf::uint32 TPlatformArenaGetFormationReq::round() const {
  // @@protoc_insertion_point(field_get:pb.TPlatformArenaGetFormationReq.Round)
  return round_;
}
inline void TPlatformArenaGetFormationReq::set_round(::google::protobuf::uint32 value) {
  set_has_round();
  round_ = value;
  // @@protoc_insertion_point(field_set:pb.TPlatformArenaGetFormationReq.Round)
}

// optional uint64 Uid = 2;
inline bool TPlatformArenaGetFormationReq::has_uid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TPlatformArenaGetFormationReq::set_has_uid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TPlatformArenaGetFormationReq::clear_has_uid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TPlatformArenaGetFormationReq::clear_uid() {
  uid_ = GOOGLE_ULONGLONG(0);
  clear_has_uid();
}
inline ::google::protobuf::uint64 TPlatformArenaGetFormationReq::uid() const {
  // @@protoc_insertion_point(field_get:pb.TPlatformArenaGetFormationReq.Uid)
  return uid_;
}
inline void TPlatformArenaGetFormationReq::set_uid(::google::protobuf::uint64 value) {
  set_has_uid();
  uid_ = value;
  // @@protoc_insertion_point(field_set:pb.TPlatformArenaGetFormationReq.Uid)
}

// optional uint32 GroupId = 3;
inline bool TPlatformArenaGetFormationReq::has_groupid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void TPlatformArenaGetFormationReq::set_has_groupid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void TPlatformArenaGetFormationReq::clear_has_groupid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void TPlatformArenaGetFormationReq::clear_groupid() {
  groupid_ = 0u;
  clear_has_groupid();
}
inline ::google::protobuf::uint32 TPlatformArenaGetFormationReq::groupid() const {
  // @@protoc_insertion_point(field_get:pb.TPlatformArenaGetFormationReq.GroupId)
  return groupid_;
}
inline void TPlatformArenaGetFormationReq::set_groupid(::google::protobuf::uint32 value) {
  set_has_groupid();
  groupid_ = value;
  // @@protoc_insertion_point(field_set:pb.TPlatformArenaGetFormationReq.GroupId)
}

// -------------------------------------------------------------------

// TPlatformArenaGetFormationRsp

// repeated .pb.TPlatformArenaFormationInfo FormationArr = 1;
inline int TPlatformArenaGetFormationRsp::formationarr_size() const {
  return formationarr_.size();
}
inline void TPlatformArenaGetFormationRsp::clear_formationarr() {
  formationarr_.Clear();
}
inline const ::pb::TPlatformArenaFormationInfo& TPlatformArenaGetFormationRsp::formationarr(int index) const {
  // @@protoc_insertion_point(field_get:pb.TPlatformArenaGetFormationRsp.FormationArr)
  return formationarr_.Get(index);
}
inline ::pb::TPlatformArenaFormationInfo* TPlatformArenaGetFormationRsp::mutable_formationarr(int index) {
  // @@protoc_insertion_point(field_mutable:pb.TPlatformArenaGetFormationRsp.FormationArr)
  return formationarr_.Mutable(index);
}
inline ::pb::TPlatformArenaFormationInfo* TPlatformArenaGetFormationRsp::add_formationarr() {
  // @@protoc_insertion_point(field_add:pb.TPlatformArenaGetFormationRsp.FormationArr)
  return formationarr_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::TPlatformArenaFormationInfo >&
TPlatformArenaGetFormationRsp::formationarr() const {
  // @@protoc_insertion_point(field_list:pb.TPlatformArenaGetFormationRsp.FormationArr)
  return formationarr_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb::TPlatformArenaFormationInfo >*
TPlatformArenaGetFormationRsp::mutable_formationarr() {
  // @@protoc_insertion_point(field_mutable_list:pb.TPlatformArenaGetFormationRsp.FormationArr)
  return &formationarr_;
}

// -------------------------------------------------------------------

// TArenaBattleReportData

// optional uint32 Rid = 1;
inline bool TArenaBattleReportData::has_rid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TArenaBattleReportData::set_has_rid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TArenaBattleReportData::clear_has_rid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TArenaBattleReportData::clear_rid() {
  rid_ = 0u;
  clear_has_rid();
}
inline ::google::protobuf::uint32 TArenaBattleReportData::rid() const {
  // @@protoc_insertion_point(field_get:pb.TArenaBattleReportData.Rid)
  return rid_;
}
inline void TArenaBattleReportData::set_rid(::google::protobuf::uint32 value) {
  set_has_rid();
  rid_ = value;
  // @@protoc_insertion_point(field_set:pb.TArenaBattleReportData.Rid)
}

// optional uint32 ReportType = 2;
inline bool TArenaBattleReportData::has_reporttype() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TArenaBattleReportData::set_has_reporttype() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TArenaBattleReportData::clear_has_reporttype() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TArenaBattleReportData::clear_reporttype() {
  reporttype_ = 0u;
  clear_has_reporttype();
}
inline ::google::protobuf::uint32 TArenaBattleReportData::reporttype() const {
  // @@protoc_insertion_point(field_get:pb.TArenaBattleReportData.ReportType)
  return reporttype_;
}
inline void TArenaBattleReportData::set_reporttype(::google::protobuf::uint32 value) {
  set_has_reporttype();
  reporttype_ = value;
  // @@protoc_insertion_point(field_set:pb.TArenaBattleReportData.ReportType)
}

// optional uint32 ArenaId = 3;
inline bool TArenaBattleReportData::has_arenaid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void TArenaBattleReportData::set_has_arenaid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void TArenaBattleReportData::clear_has_arenaid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void TArenaBattleReportData::clear_arenaid() {
  arenaid_ = 0u;
  clear_has_arenaid();
}
inline ::google::protobuf::uint32 TArenaBattleReportData::arenaid() const {
  // @@protoc_insertion_point(field_get:pb.TArenaBattleReportData.ArenaId)
  return arenaid_;
}
inline void TArenaBattleReportData::set_arenaid(::google::protobuf::uint32 value) {
  set_has_arenaid();
  arenaid_ = value;
  // @@protoc_insertion_point(field_set:pb.TArenaBattleReportData.ArenaId)
}

// optional uint64 ReportTime = 4;
inline bool TArenaBattleReportData::has_reporttime() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void TArenaBattleReportData::set_has_reporttime() {
  _has_bits_[0] |= 0x00000008u;
}
inline void TArenaBattleReportData::clear_has_reporttime() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void TArenaBattleReportData::clear_reporttime() {
  reporttime_ = GOOGLE_ULONGLONG(0);
  clear_has_reporttime();
}
inline ::google::protobuf::uint64 TArenaBattleReportData::reporttime() const {
  // @@protoc_insertion_point(field_get:pb.TArenaBattleReportData.ReportTime)
  return reporttime_;
}
inline void TArenaBattleReportData::set_reporttime(::google::protobuf::uint64 value) {
  set_has_reporttime();
  reporttime_ = value;
  // @@protoc_insertion_point(field_set:pb.TArenaBattleReportData.ReportTime)
}

// optional .pb.TUserSimpleInfo AtkUserInfo = 5;
inline bool TArenaBattleReportData::has_atkuserinfo() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void TArenaBattleReportData::set_has_atkuserinfo() {
  _has_bits_[0] |= 0x00000010u;
}
inline void TArenaBattleReportData::clear_has_atkuserinfo() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void TArenaBattleReportData::clear_atkuserinfo() {
  if (atkuserinfo_ != NULL) atkuserinfo_->::pb::TUserSimpleInfo::Clear();
  clear_has_atkuserinfo();
}
inline const ::pb::TUserSimpleInfo& TArenaBattleReportData::atkuserinfo() const {
  // @@protoc_insertion_point(field_get:pb.TArenaBattleReportData.AtkUserInfo)
  return atkuserinfo_ != NULL ? *atkuserinfo_ : *default_instance_->atkuserinfo_;
}
inline ::pb::TUserSimpleInfo* TArenaBattleReportData::mutable_atkuserinfo() {
  set_has_atkuserinfo();
  if (atkuserinfo_ == NULL) atkuserinfo_ = new ::pb::TUserSimpleInfo;
  // @@protoc_insertion_point(field_mutable:pb.TArenaBattleReportData.AtkUserInfo)
  return atkuserinfo_;
}
inline ::pb::TUserSimpleInfo* TArenaBattleReportData::release_atkuserinfo() {
  clear_has_atkuserinfo();
  ::pb::TUserSimpleInfo* temp = atkuserinfo_;
  atkuserinfo_ = NULL;
  return temp;
}
inline void TArenaBattleReportData::set_allocated_atkuserinfo(::pb::TUserSimpleInfo* atkuserinfo) {
  delete atkuserinfo_;
  atkuserinfo_ = atkuserinfo;
  if (atkuserinfo) {
    set_has_atkuserinfo();
  } else {
    clear_has_atkuserinfo();
  }
  // @@protoc_insertion_point(field_set_allocated:pb.TArenaBattleReportData.AtkUserInfo)
}

// optional .pb.TUserSimpleInfo DefUserInfo = 6;
inline bool TArenaBattleReportData::has_defuserinfo() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void TArenaBattleReportData::set_has_defuserinfo() {
  _has_bits_[0] |= 0x00000020u;
}
inline void TArenaBattleReportData::clear_has_defuserinfo() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void TArenaBattleReportData::clear_defuserinfo() {
  if (defuserinfo_ != NULL) defuserinfo_->::pb::TUserSimpleInfo::Clear();
  clear_has_defuserinfo();
}
inline const ::pb::TUserSimpleInfo& TArenaBattleReportData::defuserinfo() const {
  // @@protoc_insertion_point(field_get:pb.TArenaBattleReportData.DefUserInfo)
  return defuserinfo_ != NULL ? *defuserinfo_ : *default_instance_->defuserinfo_;
}
inline ::pb::TUserSimpleInfo* TArenaBattleReportData::mutable_defuserinfo() {
  set_has_defuserinfo();
  if (defuserinfo_ == NULL) defuserinfo_ = new ::pb::TUserSimpleInfo;
  // @@protoc_insertion_point(field_mutable:pb.TArenaBattleReportData.DefUserInfo)
  return defuserinfo_;
}
inline ::pb::TUserSimpleInfo* TArenaBattleReportData::release_defuserinfo() {
  clear_has_defuserinfo();
  ::pb::TUserSimpleInfo* temp = defuserinfo_;
  defuserinfo_ = NULL;
  return temp;
}
inline void TArenaBattleReportData::set_allocated_defuserinfo(::pb::TUserSimpleInfo* defuserinfo) {
  delete defuserinfo_;
  defuserinfo_ = defuserinfo;
  if (defuserinfo) {
    set_has_defuserinfo();
  } else {
    clear_has_defuserinfo();
  }
  // @@protoc_insertion_point(field_set_allocated:pb.TArenaBattleReportData.DefUserInfo)
}

// -------------------------------------------------------------------

// TPlatformArenaGetArenaBattleReportRsp

// repeated .pb.TArenaBattleReportData ArrReport = 1;
inline int TPlatformArenaGetArenaBattleReportRsp::arrreport_size() const {
  return arrreport_.size();
}
inline void TPlatformArenaGetArenaBattleReportRsp::clear_arrreport() {
  arrreport_.Clear();
}
inline const ::pb::TArenaBattleReportData& TPlatformArenaGetArenaBattleReportRsp::arrreport(int index) const {
  // @@protoc_insertion_point(field_get:pb.TPlatformArenaGetArenaBattleReportRsp.ArrReport)
  return arrreport_.Get(index);
}
inline ::pb::TArenaBattleReportData* TPlatformArenaGetArenaBattleReportRsp::mutable_arrreport(int index) {
  // @@protoc_insertion_point(field_mutable:pb.TPlatformArenaGetArenaBattleReportRsp.ArrReport)
  return arrreport_.Mutable(index);
}
inline ::pb::TArenaBattleReportData* TPlatformArenaGetArenaBattleReportRsp::add_arrreport() {
  // @@protoc_insertion_point(field_add:pb.TPlatformArenaGetArenaBattleReportRsp.ArrReport)
  return arrreport_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::TArenaBattleReportData >&
TPlatformArenaGetArenaBattleReportRsp::arrreport() const {
  // @@protoc_insertion_point(field_list:pb.TPlatformArenaGetArenaBattleReportRsp.ArrReport)
  return arrreport_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb::TArenaBattleReportData >*
TPlatformArenaGetArenaBattleReportRsp::mutable_arrreport() {
  // @@protoc_insertion_point(field_mutable_list:pb.TPlatformArenaGetArenaBattleReportRsp.ArrReport)
  return &arrreport_;
}

// -------------------------------------------------------------------

// TPlatformArenaGetPeakInfoReq

// optional uint32 SeasonId = 1;
inline bool TPlatformArenaGetPeakInfoReq::has_seasonid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TPlatformArenaGetPeakInfoReq::set_has_seasonid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TPlatformArenaGetPeakInfoReq::clear_has_seasonid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TPlatformArenaGetPeakInfoReq::clear_seasonid() {
  seasonid_ = 0u;
  clear_has_seasonid();
}
inline ::google::protobuf::uint32 TPlatformArenaGetPeakInfoReq::seasonid() const {
  // @@protoc_insertion_point(field_get:pb.TPlatformArenaGetPeakInfoReq.SeasonId)
  return seasonid_;
}
inline void TPlatformArenaGetPeakInfoReq::set_seasonid(::google::protobuf::uint32 value) {
  set_has_seasonid();
  seasonid_ = value;
  // @@protoc_insertion_point(field_set:pb.TPlatformArenaGetPeakInfoReq.SeasonId)
}

// optional uint32 GroupId = 2;
inline bool TPlatformArenaGetPeakInfoReq::has_groupid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TPlatformArenaGetPeakInfoReq::set_has_groupid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TPlatformArenaGetPeakInfoReq::clear_has_groupid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TPlatformArenaGetPeakInfoReq::clear_groupid() {
  groupid_ = 0u;
  clear_has_groupid();
}
inline ::google::protobuf::uint32 TPlatformArenaGetPeakInfoReq::groupid() const {
  // @@protoc_insertion_point(field_get:pb.TPlatformArenaGetPeakInfoReq.GroupId)
  return groupid_;
}
inline void TPlatformArenaGetPeakInfoReq::set_groupid(::google::protobuf::uint32 value) {
  set_has_groupid();
  groupid_ = value;
  // @@protoc_insertion_point(field_set:pb.TPlatformArenaGetPeakInfoReq.GroupId)
}

// -------------------------------------------------------------------

// TPlatformArenaPeakData

// optional uint32 MatchId = 1;
inline bool TPlatformArenaPeakData::has_matchid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TPlatformArenaPeakData::set_has_matchid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TPlatformArenaPeakData::clear_has_matchid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TPlatformArenaPeakData::clear_matchid() {
  matchid_ = 0u;
  clear_has_matchid();
}
inline ::google::protobuf::uint32 TPlatformArenaPeakData::matchid() const {
  // @@protoc_insertion_point(field_get:pb.TPlatformArenaPeakData.MatchId)
  return matchid_;
}
inline void TPlatformArenaPeakData::set_matchid(::google::protobuf::uint32 value) {
  set_has_matchid();
  matchid_ = value;
  // @@protoc_insertion_point(field_set:pb.TPlatformArenaPeakData.MatchId)
}

// optional .pb.TUserSimpleInfo AtkUserInfo = 2;
inline bool TPlatformArenaPeakData::has_atkuserinfo() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TPlatformArenaPeakData::set_has_atkuserinfo() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TPlatformArenaPeakData::clear_has_atkuserinfo() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TPlatformArenaPeakData::clear_atkuserinfo() {
  if (atkuserinfo_ != NULL) atkuserinfo_->::pb::TUserSimpleInfo::Clear();
  clear_has_atkuserinfo();
}
inline const ::pb::TUserSimpleInfo& TPlatformArenaPeakData::atkuserinfo() const {
  // @@protoc_insertion_point(field_get:pb.TPlatformArenaPeakData.AtkUserInfo)
  return atkuserinfo_ != NULL ? *atkuserinfo_ : *default_instance_->atkuserinfo_;
}
inline ::pb::TUserSimpleInfo* TPlatformArenaPeakData::mutable_atkuserinfo() {
  set_has_atkuserinfo();
  if (atkuserinfo_ == NULL) atkuserinfo_ = new ::pb::TUserSimpleInfo;
  // @@protoc_insertion_point(field_mutable:pb.TPlatformArenaPeakData.AtkUserInfo)
  return atkuserinfo_;
}
inline ::pb::TUserSimpleInfo* TPlatformArenaPeakData::release_atkuserinfo() {
  clear_has_atkuserinfo();
  ::pb::TUserSimpleInfo* temp = atkuserinfo_;
  atkuserinfo_ = NULL;
  return temp;
}
inline void TPlatformArenaPeakData::set_allocated_atkuserinfo(::pb::TUserSimpleInfo* atkuserinfo) {
  delete atkuserinfo_;
  atkuserinfo_ = atkuserinfo;
  if (atkuserinfo) {
    set_has_atkuserinfo();
  } else {
    clear_has_atkuserinfo();
  }
  // @@protoc_insertion_point(field_set_allocated:pb.TPlatformArenaPeakData.AtkUserInfo)
}

// optional .pb.TUserSimpleInfo DefUserInfo = 3;
inline bool TPlatformArenaPeakData::has_defuserinfo() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void TPlatformArenaPeakData::set_has_defuserinfo() {
  _has_bits_[0] |= 0x00000004u;
}
inline void TPlatformArenaPeakData::clear_has_defuserinfo() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void TPlatformArenaPeakData::clear_defuserinfo() {
  if (defuserinfo_ != NULL) defuserinfo_->::pb::TUserSimpleInfo::Clear();
  clear_has_defuserinfo();
}
inline const ::pb::TUserSimpleInfo& TPlatformArenaPeakData::defuserinfo() const {
  // @@protoc_insertion_point(field_get:pb.TPlatformArenaPeakData.DefUserInfo)
  return defuserinfo_ != NULL ? *defuserinfo_ : *default_instance_->defuserinfo_;
}
inline ::pb::TUserSimpleInfo* TPlatformArenaPeakData::mutable_defuserinfo() {
  set_has_defuserinfo();
  if (defuserinfo_ == NULL) defuserinfo_ = new ::pb::TUserSimpleInfo;
  // @@protoc_insertion_point(field_mutable:pb.TPlatformArenaPeakData.DefUserInfo)
  return defuserinfo_;
}
inline ::pb::TUserSimpleInfo* TPlatformArenaPeakData::release_defuserinfo() {
  clear_has_defuserinfo();
  ::pb::TUserSimpleInfo* temp = defuserinfo_;
  defuserinfo_ = NULL;
  return temp;
}
inline void TPlatformArenaPeakData::set_allocated_defuserinfo(::pb::TUserSimpleInfo* defuserinfo) {
  delete defuserinfo_;
  defuserinfo_ = defuserinfo;
  if (defuserinfo) {
    set_has_defuserinfo();
  } else {
    clear_has_defuserinfo();
  }
  // @@protoc_insertion_point(field_set_allocated:pb.TPlatformArenaPeakData.DefUserInfo)
}

// optional uint64 WinUid = 4;
inline bool TPlatformArenaPeakData::has_winuid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void TPlatformArenaPeakData::set_has_winuid() {
  _has_bits_[0] |= 0x00000008u;
}
inline void TPlatformArenaPeakData::clear_has_winuid() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void TPlatformArenaPeakData::clear_winuid() {
  winuid_ = GOOGLE_ULONGLONG(0);
  clear_has_winuid();
}
inline ::google::protobuf::uint64 TPlatformArenaPeakData::winuid() const {
  // @@protoc_insertion_point(field_get:pb.TPlatformArenaPeakData.WinUid)
  return winuid_;
}
inline void TPlatformArenaPeakData::set_winuid(::google::protobuf::uint64 value) {
  set_has_winuid();
  winuid_ = value;
  // @@protoc_insertion_point(field_set:pb.TPlatformArenaPeakData.WinUid)
}

// -------------------------------------------------------------------

// TPlatformArenaGetPeakInfoRsp

// repeated .pb.TPlatformArenaPeakData ArrPeakData = 1;
inline int TPlatformArenaGetPeakInfoRsp::arrpeakdata_size() const {
  return arrpeakdata_.size();
}
inline void TPlatformArenaGetPeakInfoRsp::clear_arrpeakdata() {
  arrpeakdata_.Clear();
}
inline const ::pb::TPlatformArenaPeakData& TPlatformArenaGetPeakInfoRsp::arrpeakdata(int index) const {
  // @@protoc_insertion_point(field_get:pb.TPlatformArenaGetPeakInfoRsp.ArrPeakData)
  return arrpeakdata_.Get(index);
}
inline ::pb::TPlatformArenaPeakData* TPlatformArenaGetPeakInfoRsp::mutable_arrpeakdata(int index) {
  // @@protoc_insertion_point(field_mutable:pb.TPlatformArenaGetPeakInfoRsp.ArrPeakData)
  return arrpeakdata_.Mutable(index);
}
inline ::pb::TPlatformArenaPeakData* TPlatformArenaGetPeakInfoRsp::add_arrpeakdata() {
  // @@protoc_insertion_point(field_add:pb.TPlatformArenaGetPeakInfoRsp.ArrPeakData)
  return arrpeakdata_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::TPlatformArenaPeakData >&
TPlatformArenaGetPeakInfoRsp::arrpeakdata() const {
  // @@protoc_insertion_point(field_list:pb.TPlatformArenaGetPeakInfoRsp.ArrPeakData)
  return arrpeakdata_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb::TPlatformArenaPeakData >*
TPlatformArenaGetPeakInfoRsp::mutable_arrpeakdata() {
  // @@protoc_insertion_point(field_mutable_list:pb.TPlatformArenaGetPeakInfoRsp.ArrPeakData)
  return &arrpeakdata_;
}

// -------------------------------------------------------------------

// TPlatformArenaBeAtkNotify

// optional uint32 ArenaId = 1;
inline bool TPlatformArenaBeAtkNotify::has_arenaid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TPlatformArenaBeAtkNotify::set_has_arenaid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TPlatformArenaBeAtkNotify::clear_has_arenaid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TPlatformArenaBeAtkNotify::clear_arenaid() {
  arenaid_ = 0u;
  clear_has_arenaid();
}
inline ::google::protobuf::uint32 TPlatformArenaBeAtkNotify::arenaid() const {
  // @@protoc_insertion_point(field_get:pb.TPlatformArenaBeAtkNotify.ArenaId)
  return arenaid_;
}
inline void TPlatformArenaBeAtkNotify::set_arenaid(::google::protobuf::uint32 value) {
  set_has_arenaid();
  arenaid_ = value;
  // @@protoc_insertion_point(field_set:pb.TPlatformArenaBeAtkNotify.ArenaId)
}

// optional .pb.TUserSimpleInfo AtkUser = 2;
inline bool TPlatformArenaBeAtkNotify::has_atkuser() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TPlatformArenaBeAtkNotify::set_has_atkuser() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TPlatformArenaBeAtkNotify::clear_has_atkuser() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TPlatformArenaBeAtkNotify::clear_atkuser() {
  if (atkuser_ != NULL) atkuser_->::pb::TUserSimpleInfo::Clear();
  clear_has_atkuser();
}
inline const ::pb::TUserSimpleInfo& TPlatformArenaBeAtkNotify::atkuser() const {
  // @@protoc_insertion_point(field_get:pb.TPlatformArenaBeAtkNotify.AtkUser)
  return atkuser_ != NULL ? *atkuser_ : *default_instance_->atkuser_;
}
inline ::pb::TUserSimpleInfo* TPlatformArenaBeAtkNotify::mutable_atkuser() {
  set_has_atkuser();
  if (atkuser_ == NULL) atkuser_ = new ::pb::TUserSimpleInfo;
  // @@protoc_insertion_point(field_mutable:pb.TPlatformArenaBeAtkNotify.AtkUser)
  return atkuser_;
}
inline ::pb::TUserSimpleInfo* TPlatformArenaBeAtkNotify::release_atkuser() {
  clear_has_atkuser();
  ::pb::TUserSimpleInfo* temp = atkuser_;
  atkuser_ = NULL;
  return temp;
}
inline void TPlatformArenaBeAtkNotify::set_allocated_atkuser(::pb::TUserSimpleInfo* atkuser) {
  delete atkuser_;
  atkuser_ = atkuser;
  if (atkuser) {
    set_has_atkuser();
  } else {
    clear_has_atkuser();
  }
  // @@protoc_insertion_point(field_set_allocated:pb.TPlatformArenaBeAtkNotify.AtkUser)
}

// -------------------------------------------------------------------

// TPlatformArenaLeaveMessageReq

// optional uint32 MatchId = 1;
inline bool TPlatformArenaLeaveMessageReq::has_matchid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TPlatformArenaLeaveMessageReq::set_has_matchid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TPlatformArenaLeaveMessageReq::clear_has_matchid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TPlatformArenaLeaveMessageReq::clear_matchid() {
  matchid_ = 0u;
  clear_has_matchid();
}
inline ::google::protobuf::uint32 TPlatformArenaLeaveMessageReq::matchid() const {
  // @@protoc_insertion_point(field_get:pb.TPlatformArenaLeaveMessageReq.MatchId)
  return matchid_;
}
inline void TPlatformArenaLeaveMessageReq::set_matchid(::google::protobuf::uint32 value) {
  set_has_matchid();
  matchid_ = value;
  // @@protoc_insertion_point(field_set:pb.TPlatformArenaLeaveMessageReq.MatchId)
}

// optional string Content = 2;
inline bool TPlatformArenaLeaveMessageReq::has_content() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TPlatformArenaLeaveMessageReq::set_has_content() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TPlatformArenaLeaveMessageReq::clear_has_content() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TPlatformArenaLeaveMessageReq::clear_content() {
  if (content_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    content_->clear();
  }
  clear_has_content();
}
inline const ::std::string& TPlatformArenaLeaveMessageReq::content() const {
  // @@protoc_insertion_point(field_get:pb.TPlatformArenaLeaveMessageReq.Content)
  return *content_;
}
inline void TPlatformArenaLeaveMessageReq::set_content(const ::std::string& value) {
  set_has_content();
  if (content_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    content_ = new ::std::string;
  }
  content_->assign(value);
  // @@protoc_insertion_point(field_set:pb.TPlatformArenaLeaveMessageReq.Content)
}
inline void TPlatformArenaLeaveMessageReq::set_content(const char* value) {
  set_has_content();
  if (content_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    content_ = new ::std::string;
  }
  content_->assign(value);
  // @@protoc_insertion_point(field_set_char:pb.TPlatformArenaLeaveMessageReq.Content)
}
inline void TPlatformArenaLeaveMessageReq::set_content(const char* value, size_t size) {
  set_has_content();
  if (content_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    content_ = new ::std::string;
  }
  content_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:pb.TPlatformArenaLeaveMessageReq.Content)
}
inline ::std::string* TPlatformArenaLeaveMessageReq::mutable_content() {
  set_has_content();
  if (content_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    content_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:pb.TPlatformArenaLeaveMessageReq.Content)
  return content_;
}
inline ::std::string* TPlatformArenaLeaveMessageReq::release_content() {
  clear_has_content();
  if (content_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = content_;
    content_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void TPlatformArenaLeaveMessageReq::set_allocated_content(::std::string* content) {
  if (content_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete content_;
  }
  if (content) {
    set_has_content();
    content_ = content;
  } else {
    clear_has_content();
    content_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:pb.TPlatformArenaLeaveMessageReq.Content)
}

// -------------------------------------------------------------------

// TPlatformArenaDelLeaveMessageReq

// optional uint32 MatchId = 1;
inline bool TPlatformArenaDelLeaveMessageReq::has_matchid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TPlatformArenaDelLeaveMessageReq::set_has_matchid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TPlatformArenaDelLeaveMessageReq::clear_has_matchid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TPlatformArenaDelLeaveMessageReq::clear_matchid() {
  matchid_ = 0u;
  clear_has_matchid();
}
inline ::google::protobuf::uint32 TPlatformArenaDelLeaveMessageReq::matchid() const {
  // @@protoc_insertion_point(field_get:pb.TPlatformArenaDelLeaveMessageReq.MatchId)
  return matchid_;
}
inline void TPlatformArenaDelLeaveMessageReq::set_matchid(::google::protobuf::uint32 value) {
  set_has_matchid();
  matchid_ = value;
  // @@protoc_insertion_point(field_set:pb.TPlatformArenaDelLeaveMessageReq.MatchId)
}

// optional uint32 MsgId = 2;
inline bool TPlatformArenaDelLeaveMessageReq::has_msgid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TPlatformArenaDelLeaveMessageReq::set_has_msgid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TPlatformArenaDelLeaveMessageReq::clear_has_msgid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TPlatformArenaDelLeaveMessageReq::clear_msgid() {
  msgid_ = 0u;
  clear_has_msgid();
}
inline ::google::protobuf::uint32 TPlatformArenaDelLeaveMessageReq::msgid() const {
  // @@protoc_insertion_point(field_get:pb.TPlatformArenaDelLeaveMessageReq.MsgId)
  return msgid_;
}
inline void TPlatformArenaDelLeaveMessageReq::set_msgid(::google::protobuf::uint32 value) {
  set_has_msgid();
  msgid_ = value;
  // @@protoc_insertion_point(field_set:pb.TPlatformArenaDelLeaveMessageReq.MsgId)
}

// -------------------------------------------------------------------

// TPlatformArenaThumbLeaveMessageReq

// optional uint32 MatchId = 1;
inline bool TPlatformArenaThumbLeaveMessageReq::has_matchid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TPlatformArenaThumbLeaveMessageReq::set_has_matchid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TPlatformArenaThumbLeaveMessageReq::clear_has_matchid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TPlatformArenaThumbLeaveMessageReq::clear_matchid() {
  matchid_ = 0u;
  clear_has_matchid();
}
inline ::google::protobuf::uint32 TPlatformArenaThumbLeaveMessageReq::matchid() const {
  // @@protoc_insertion_point(field_get:pb.TPlatformArenaThumbLeaveMessageReq.MatchId)
  return matchid_;
}
inline void TPlatformArenaThumbLeaveMessageReq::set_matchid(::google::protobuf::uint32 value) {
  set_has_matchid();
  matchid_ = value;
  // @@protoc_insertion_point(field_set:pb.TPlatformArenaThumbLeaveMessageReq.MatchId)
}

// optional uint32 MsgId = 2;
inline bool TPlatformArenaThumbLeaveMessageReq::has_msgid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TPlatformArenaThumbLeaveMessageReq::set_has_msgid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TPlatformArenaThumbLeaveMessageReq::clear_has_msgid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TPlatformArenaThumbLeaveMessageReq::clear_msgid() {
  msgid_ = 0u;
  clear_has_msgid();
}
inline ::google::protobuf::uint32 TPlatformArenaThumbLeaveMessageReq::msgid() const {
  // @@protoc_insertion_point(field_get:pb.TPlatformArenaThumbLeaveMessageReq.MsgId)
  return msgid_;
}
inline void TPlatformArenaThumbLeaveMessageReq::set_msgid(::google::protobuf::uint32 value) {
  set_has_msgid();
  msgid_ = value;
  // @@protoc_insertion_point(field_set:pb.TPlatformArenaThumbLeaveMessageReq.MsgId)
}

// optional uint32 ThumbType = 3;
inline bool TPlatformArenaThumbLeaveMessageReq::has_thumbtype() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void TPlatformArenaThumbLeaveMessageReq::set_has_thumbtype() {
  _has_bits_[0] |= 0x00000004u;
}
inline void TPlatformArenaThumbLeaveMessageReq::clear_has_thumbtype() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void TPlatformArenaThumbLeaveMessageReq::clear_thumbtype() {
  thumbtype_ = 0u;
  clear_has_thumbtype();
}
inline ::google::protobuf::uint32 TPlatformArenaThumbLeaveMessageReq::thumbtype() const {
  // @@protoc_insertion_point(field_get:pb.TPlatformArenaThumbLeaveMessageReq.ThumbType)
  return thumbtype_;
}
inline void TPlatformArenaThumbLeaveMessageReq::set_thumbtype(::google::protobuf::uint32 value) {
  set_has_thumbtype();
  thumbtype_ = value;
  // @@protoc_insertion_point(field_set:pb.TPlatformArenaThumbLeaveMessageReq.ThumbType)
}

// -------------------------------------------------------------------

// TPlatformArenaThumbLeaveMessageRsp

// optional uint32 RetCode = 1;
inline bool TPlatformArenaThumbLeaveMessageRsp::has_retcode() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TPlatformArenaThumbLeaveMessageRsp::set_has_retcode() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TPlatformArenaThumbLeaveMessageRsp::clear_has_retcode() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TPlatformArenaThumbLeaveMessageRsp::clear_retcode() {
  retcode_ = 0u;
  clear_has_retcode();
}
inline ::google::protobuf::uint32 TPlatformArenaThumbLeaveMessageRsp::retcode() const {
  // @@protoc_insertion_point(field_get:pb.TPlatformArenaThumbLeaveMessageRsp.RetCode)
  return retcode_;
}
inline void TPlatformArenaThumbLeaveMessageRsp::set_retcode(::google::protobuf::uint32 value) {
  set_has_retcode();
  retcode_ = value;
  // @@protoc_insertion_point(field_set:pb.TPlatformArenaThumbLeaveMessageRsp.RetCode)
}

// optional uint32 ThumbNum = 2;
inline bool TPlatformArenaThumbLeaveMessageRsp::has_thumbnum() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TPlatformArenaThumbLeaveMessageRsp::set_has_thumbnum() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TPlatformArenaThumbLeaveMessageRsp::clear_has_thumbnum() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TPlatformArenaThumbLeaveMessageRsp::clear_thumbnum() {
  thumbnum_ = 0u;
  clear_has_thumbnum();
}
inline ::google::protobuf::uint32 TPlatformArenaThumbLeaveMessageRsp::thumbnum() const {
  // @@protoc_insertion_point(field_get:pb.TPlatformArenaThumbLeaveMessageRsp.ThumbNum)
  return thumbnum_;
}
inline void TPlatformArenaThumbLeaveMessageRsp::set_thumbnum(::google::protobuf::uint32 value) {
  set_has_thumbnum();
  thumbnum_ = value;
  // @@protoc_insertion_point(field_set:pb.TPlatformArenaThumbLeaveMessageRsp.ThumbNum)
}

// optional uint32 NonThumbNum = 3;
inline bool TPlatformArenaThumbLeaveMessageRsp::has_nonthumbnum() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void TPlatformArenaThumbLeaveMessageRsp::set_has_nonthumbnum() {
  _has_bits_[0] |= 0x00000004u;
}
inline void TPlatformArenaThumbLeaveMessageRsp::clear_has_nonthumbnum() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void TPlatformArenaThumbLeaveMessageRsp::clear_nonthumbnum() {
  nonthumbnum_ = 0u;
  clear_has_nonthumbnum();
}
inline ::google::protobuf::uint32 TPlatformArenaThumbLeaveMessageRsp::nonthumbnum() const {
  // @@protoc_insertion_point(field_get:pb.TPlatformArenaThumbLeaveMessageRsp.NonThumbNum)
  return nonthumbnum_;
}
inline void TPlatformArenaThumbLeaveMessageRsp::set_nonthumbnum(::google::protobuf::uint32 value) {
  set_has_nonthumbnum();
  nonthumbnum_ = value;
  // @@protoc_insertion_point(field_set:pb.TPlatformArenaThumbLeaveMessageRsp.NonThumbNum)
}

// -------------------------------------------------------------------

// TPlatformArenaGetLeaveMessageLstReq

// optional uint32 MatchId = 1;
inline bool TPlatformArenaGetLeaveMessageLstReq::has_matchid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TPlatformArenaGetLeaveMessageLstReq::set_has_matchid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TPlatformArenaGetLeaveMessageLstReq::clear_has_matchid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TPlatformArenaGetLeaveMessageLstReq::clear_matchid() {
  matchid_ = 0u;
  clear_has_matchid();
}
inline ::google::protobuf::uint32 TPlatformArenaGetLeaveMessageLstReq::matchid() const {
  // @@protoc_insertion_point(field_get:pb.TPlatformArenaGetLeaveMessageLstReq.MatchId)
  return matchid_;
}
inline void TPlatformArenaGetLeaveMessageLstReq::set_matchid(::google::protobuf::uint32 value) {
  set_has_matchid();
  matchid_ = value;
  // @@protoc_insertion_point(field_set:pb.TPlatformArenaGetLeaveMessageLstReq.MatchId)
}

// -------------------------------------------------------------------

// TPlatformArenaLeaveMessageData

// optional uint32 MsgId = 1;
inline bool TPlatformArenaLeaveMessageData::has_msgid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TPlatformArenaLeaveMessageData::set_has_msgid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TPlatformArenaLeaveMessageData::clear_has_msgid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TPlatformArenaLeaveMessageData::clear_msgid() {
  msgid_ = 0u;
  clear_has_msgid();
}
inline ::google::protobuf::uint32 TPlatformArenaLeaveMessageData::msgid() const {
  // @@protoc_insertion_point(field_get:pb.TPlatformArenaLeaveMessageData.MsgId)
  return msgid_;
}
inline void TPlatformArenaLeaveMessageData::set_msgid(::google::protobuf::uint32 value) {
  set_has_msgid();
  msgid_ = value;
  // @@protoc_insertion_point(field_set:pb.TPlatformArenaLeaveMessageData.MsgId)
}

// optional string Content = 2;
inline bool TPlatformArenaLeaveMessageData::has_content() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TPlatformArenaLeaveMessageData::set_has_content() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TPlatformArenaLeaveMessageData::clear_has_content() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TPlatformArenaLeaveMessageData::clear_content() {
  if (content_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    content_->clear();
  }
  clear_has_content();
}
inline const ::std::string& TPlatformArenaLeaveMessageData::content() const {
  // @@protoc_insertion_point(field_get:pb.TPlatformArenaLeaveMessageData.Content)
  return *content_;
}
inline void TPlatformArenaLeaveMessageData::set_content(const ::std::string& value) {
  set_has_content();
  if (content_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    content_ = new ::std::string;
  }
  content_->assign(value);
  // @@protoc_insertion_point(field_set:pb.TPlatformArenaLeaveMessageData.Content)
}
inline void TPlatformArenaLeaveMessageData::set_content(const char* value) {
  set_has_content();
  if (content_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    content_ = new ::std::string;
  }
  content_->assign(value);
  // @@protoc_insertion_point(field_set_char:pb.TPlatformArenaLeaveMessageData.Content)
}
inline void TPlatformArenaLeaveMessageData::set_content(const char* value, size_t size) {
  set_has_content();
  if (content_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    content_ = new ::std::string;
  }
  content_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:pb.TPlatformArenaLeaveMessageData.Content)
}
inline ::std::string* TPlatformArenaLeaveMessageData::mutable_content() {
  set_has_content();
  if (content_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    content_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:pb.TPlatformArenaLeaveMessageData.Content)
  return content_;
}
inline ::std::string* TPlatformArenaLeaveMessageData::release_content() {
  clear_has_content();
  if (content_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = content_;
    content_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void TPlatformArenaLeaveMessageData::set_allocated_content(::std::string* content) {
  if (content_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete content_;
  }
  if (content) {
    set_has_content();
    content_ = content;
  } else {
    clear_has_content();
    content_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:pb.TPlatformArenaLeaveMessageData.Content)
}

// optional .pb.TUserSimpleInfo LeaveUser = 3;
inline bool TPlatformArenaLeaveMessageData::has_leaveuser() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void TPlatformArenaLeaveMessageData::set_has_leaveuser() {
  _has_bits_[0] |= 0x00000004u;
}
inline void TPlatformArenaLeaveMessageData::clear_has_leaveuser() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void TPlatformArenaLeaveMessageData::clear_leaveuser() {
  if (leaveuser_ != NULL) leaveuser_->::pb::TUserSimpleInfo::Clear();
  clear_has_leaveuser();
}
inline const ::pb::TUserSimpleInfo& TPlatformArenaLeaveMessageData::leaveuser() const {
  // @@protoc_insertion_point(field_get:pb.TPlatformArenaLeaveMessageData.LeaveUser)
  return leaveuser_ != NULL ? *leaveuser_ : *default_instance_->leaveuser_;
}
inline ::pb::TUserSimpleInfo* TPlatformArenaLeaveMessageData::mutable_leaveuser() {
  set_has_leaveuser();
  if (leaveuser_ == NULL) leaveuser_ = new ::pb::TUserSimpleInfo;
  // @@protoc_insertion_point(field_mutable:pb.TPlatformArenaLeaveMessageData.LeaveUser)
  return leaveuser_;
}
inline ::pb::TUserSimpleInfo* TPlatformArenaLeaveMessageData::release_leaveuser() {
  clear_has_leaveuser();
  ::pb::TUserSimpleInfo* temp = leaveuser_;
  leaveuser_ = NULL;
  return temp;
}
inline void TPlatformArenaLeaveMessageData::set_allocated_leaveuser(::pb::TUserSimpleInfo* leaveuser) {
  delete leaveuser_;
  leaveuser_ = leaveuser;
  if (leaveuser) {
    set_has_leaveuser();
  } else {
    clear_has_leaveuser();
  }
  // @@protoc_insertion_point(field_set_allocated:pb.TPlatformArenaLeaveMessageData.LeaveUser)
}

// optional uint32 ThumbNum = 4;
inline bool TPlatformArenaLeaveMessageData::has_thumbnum() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void TPlatformArenaLeaveMessageData::set_has_thumbnum() {
  _has_bits_[0] |= 0x00000008u;
}
inline void TPlatformArenaLeaveMessageData::clear_has_thumbnum() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void TPlatformArenaLeaveMessageData::clear_thumbnum() {
  thumbnum_ = 0u;
  clear_has_thumbnum();
}
inline ::google::protobuf::uint32 TPlatformArenaLeaveMessageData::thumbnum() const {
  // @@protoc_insertion_point(field_get:pb.TPlatformArenaLeaveMessageData.ThumbNum)
  return thumbnum_;
}
inline void TPlatformArenaLeaveMessageData::set_thumbnum(::google::protobuf::uint32 value) {
  set_has_thumbnum();
  thumbnum_ = value;
  // @@protoc_insertion_point(field_set:pb.TPlatformArenaLeaveMessageData.ThumbNum)
}

// optional uint32 NonThumbNum = 5;
inline bool TPlatformArenaLeaveMessageData::has_nonthumbnum() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void TPlatformArenaLeaveMessageData::set_has_nonthumbnum() {
  _has_bits_[0] |= 0x00000010u;
}
inline void TPlatformArenaLeaveMessageData::clear_has_nonthumbnum() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void TPlatformArenaLeaveMessageData::clear_nonthumbnum() {
  nonthumbnum_ = 0u;
  clear_has_nonthumbnum();
}
inline ::google::protobuf::uint32 TPlatformArenaLeaveMessageData::nonthumbnum() const {
  // @@protoc_insertion_point(field_get:pb.TPlatformArenaLeaveMessageData.NonThumbNum)
  return nonthumbnum_;
}
inline void TPlatformArenaLeaveMessageData::set_nonthumbnum(::google::protobuf::uint32 value) {
  set_has_nonthumbnum();
  nonthumbnum_ = value;
  // @@protoc_insertion_point(field_set:pb.TPlatformArenaLeaveMessageData.NonThumbNum)
}

// optional uint32 ThumbStatus = 6;
inline bool TPlatformArenaLeaveMessageData::has_thumbstatus() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void TPlatformArenaLeaveMessageData::set_has_thumbstatus() {
  _has_bits_[0] |= 0x00000020u;
}
inline void TPlatformArenaLeaveMessageData::clear_has_thumbstatus() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void TPlatformArenaLeaveMessageData::clear_thumbstatus() {
  thumbstatus_ = 0u;
  clear_has_thumbstatus();
}
inline ::google::protobuf::uint32 TPlatformArenaLeaveMessageData::thumbstatus() const {
  // @@protoc_insertion_point(field_get:pb.TPlatformArenaLeaveMessageData.ThumbStatus)
  return thumbstatus_;
}
inline void TPlatformArenaLeaveMessageData::set_thumbstatus(::google::protobuf::uint32 value) {
  set_has_thumbstatus();
  thumbstatus_ = value;
  // @@protoc_insertion_point(field_set:pb.TPlatformArenaLeaveMessageData.ThumbStatus)
}

// -------------------------------------------------------------------

// TPlatformArenaGetLeaveMessageLstRsp

// repeated .pb.TPlatformArenaLeaveMessageData MsgLst = 1;
inline int TPlatformArenaGetLeaveMessageLstRsp::msglst_size() const {
  return msglst_.size();
}
inline void TPlatformArenaGetLeaveMessageLstRsp::clear_msglst() {
  msglst_.Clear();
}
inline const ::pb::TPlatformArenaLeaveMessageData& TPlatformArenaGetLeaveMessageLstRsp::msglst(int index) const {
  // @@protoc_insertion_point(field_get:pb.TPlatformArenaGetLeaveMessageLstRsp.MsgLst)
  return msglst_.Get(index);
}
inline ::pb::TPlatformArenaLeaveMessageData* TPlatformArenaGetLeaveMessageLstRsp::mutable_msglst(int index) {
  // @@protoc_insertion_point(field_mutable:pb.TPlatformArenaGetLeaveMessageLstRsp.MsgLst)
  return msglst_.Mutable(index);
}
inline ::pb::TPlatformArenaLeaveMessageData* TPlatformArenaGetLeaveMessageLstRsp::add_msglst() {
  // @@protoc_insertion_point(field_add:pb.TPlatformArenaGetLeaveMessageLstRsp.MsgLst)
  return msglst_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::TPlatformArenaLeaveMessageData >&
TPlatformArenaGetLeaveMessageLstRsp::msglst() const {
  // @@protoc_insertion_point(field_list:pb.TPlatformArenaGetLeaveMessageLstRsp.MsgLst)
  return msglst_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb::TPlatformArenaLeaveMessageData >*
TPlatformArenaGetLeaveMessageLstRsp::mutable_msglst() {
  // @@protoc_insertion_point(field_mutable_list:pb.TPlatformArenaGetLeaveMessageLstRsp.MsgLst)
  return &msglst_;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace pb

#ifndef SWIG
namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::pb::EPlatformArenaStage> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::pb::EPlatformArenaStage>() {
  return ::pb::EPlatformArenaStage_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_net_2fPlatformArena_2eproto__INCLUDED
