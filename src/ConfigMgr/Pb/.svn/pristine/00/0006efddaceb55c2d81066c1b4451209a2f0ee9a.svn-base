// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: net/ActTravelWorld.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "net/ActTravelWorld.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace pb {

namespace {

const ::google::protobuf::Descriptor* TActTravelWorldTaskInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TActTravelWorldTaskInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* TActTravelWorldGetInfoRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TActTravelWorldGetInfoRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* TActTravelWorldSignInRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TActTravelWorldSignInRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* TActTravelWorldReceiveScoresRewardReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TActTravelWorldReceiveScoresRewardReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* TActTravelWorldReceiveScoresRewardRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TActTravelWorldReceiveScoresRewardRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* TActTravelWorldReceiveDailyTaskRewardReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TActTravelWorldReceiveDailyTaskRewardReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* TActTravelWorldReceiveDailyTaskRewardRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TActTravelWorldReceiveDailyTaskRewardRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* TActTravelWorldReceiveAchiTaskRewardReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TActTravelWorldReceiveAchiTaskRewardReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* TActTravelWorldReceiveAchiTaskRewardRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TActTravelWorldReceiveAchiTaskRewardRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* TActTravelWorldNotify_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TActTravelWorldNotify_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* EActTravelWorldTaskType_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_net_2fActTravelWorld_2eproto() {
  protobuf_AddDesc_net_2fActTravelWorld_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "net/ActTravelWorld.proto");
  GOOGLE_CHECK(file != NULL);
  TActTravelWorldTaskInfo_descriptor_ = file->message_type(0);
  static const int TActTravelWorldTaskInfo_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TActTravelWorldTaskInfo, tasktype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TActTravelWorldTaskInfo, num_),
  };
  TActTravelWorldTaskInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TActTravelWorldTaskInfo_descriptor_,
      TActTravelWorldTaskInfo::default_instance_,
      TActTravelWorldTaskInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TActTravelWorldTaskInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TActTravelWorldTaskInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TActTravelWorldTaskInfo));
  TActTravelWorldGetInfoRsp_descriptor_ = file->message_type(1);
  static const int TActTravelWorldGetInfoRsp_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TActTravelWorldGetInfoRsp, signdays_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TActTravelWorldGetInfoRsp, scoresrewardedids_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TActTravelWorldGetInfoRsp, dailytaskarr_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TActTravelWorldGetInfoRsp, dailytaskrewardedids_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TActTravelWorldGetInfoRsp, achitaskarr_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TActTravelWorldGetInfoRsp, achitaskrewardedids_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TActTravelWorldGetInfoRsp, signtime_),
  };
  TActTravelWorldGetInfoRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TActTravelWorldGetInfoRsp_descriptor_,
      TActTravelWorldGetInfoRsp::default_instance_,
      TActTravelWorldGetInfoRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TActTravelWorldGetInfoRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TActTravelWorldGetInfoRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TActTravelWorldGetInfoRsp));
  TActTravelWorldSignInRsp_descriptor_ = file->message_type(2);
  static const int TActTravelWorldSignInRsp_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TActTravelWorldSignInRsp, signtime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TActTravelWorldSignInRsp, signdays_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TActTravelWorldSignInRsp, rewardarr_),
  };
  TActTravelWorldSignInRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TActTravelWorldSignInRsp_descriptor_,
      TActTravelWorldSignInRsp::default_instance_,
      TActTravelWorldSignInRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TActTravelWorldSignInRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TActTravelWorldSignInRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TActTravelWorldSignInRsp));
  TActTravelWorldReceiveScoresRewardReq_descriptor_ = file->message_type(3);
  static const int TActTravelWorldReceiveScoresRewardReq_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TActTravelWorldReceiveScoresRewardReq, rewardtid_),
  };
  TActTravelWorldReceiveScoresRewardReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TActTravelWorldReceiveScoresRewardReq_descriptor_,
      TActTravelWorldReceiveScoresRewardReq::default_instance_,
      TActTravelWorldReceiveScoresRewardReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TActTravelWorldReceiveScoresRewardReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TActTravelWorldReceiveScoresRewardReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TActTravelWorldReceiveScoresRewardReq));
  TActTravelWorldReceiveScoresRewardRsp_descriptor_ = file->message_type(4);
  static const int TActTravelWorldReceiveScoresRewardRsp_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TActTravelWorldReceiveScoresRewardRsp, rewardarr_),
  };
  TActTravelWorldReceiveScoresRewardRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TActTravelWorldReceiveScoresRewardRsp_descriptor_,
      TActTravelWorldReceiveScoresRewardRsp::default_instance_,
      TActTravelWorldReceiveScoresRewardRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TActTravelWorldReceiveScoresRewardRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TActTravelWorldReceiveScoresRewardRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TActTravelWorldReceiveScoresRewardRsp));
  TActTravelWorldReceiveDailyTaskRewardReq_descriptor_ = file->message_type(5);
  static const int TActTravelWorldReceiveDailyTaskRewardReq_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TActTravelWorldReceiveDailyTaskRewardReq, rewardtid_),
  };
  TActTravelWorldReceiveDailyTaskRewardReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TActTravelWorldReceiveDailyTaskRewardReq_descriptor_,
      TActTravelWorldReceiveDailyTaskRewardReq::default_instance_,
      TActTravelWorldReceiveDailyTaskRewardReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TActTravelWorldReceiveDailyTaskRewardReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TActTravelWorldReceiveDailyTaskRewardReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TActTravelWorldReceiveDailyTaskRewardReq));
  TActTravelWorldReceiveDailyTaskRewardRsp_descriptor_ = file->message_type(6);
  static const int TActTravelWorldReceiveDailyTaskRewardRsp_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TActTravelWorldReceiveDailyTaskRewardRsp, rewardarr_),
  };
  TActTravelWorldReceiveDailyTaskRewardRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TActTravelWorldReceiveDailyTaskRewardRsp_descriptor_,
      TActTravelWorldReceiveDailyTaskRewardRsp::default_instance_,
      TActTravelWorldReceiveDailyTaskRewardRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TActTravelWorldReceiveDailyTaskRewardRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TActTravelWorldReceiveDailyTaskRewardRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TActTravelWorldReceiveDailyTaskRewardRsp));
  TActTravelWorldReceiveAchiTaskRewardReq_descriptor_ = file->message_type(7);
  static const int TActTravelWorldReceiveAchiTaskRewardReq_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TActTravelWorldReceiveAchiTaskRewardReq, rewardtid_),
  };
  TActTravelWorldReceiveAchiTaskRewardReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TActTravelWorldReceiveAchiTaskRewardReq_descriptor_,
      TActTravelWorldReceiveAchiTaskRewardReq::default_instance_,
      TActTravelWorldReceiveAchiTaskRewardReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TActTravelWorldReceiveAchiTaskRewardReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TActTravelWorldReceiveAchiTaskRewardReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TActTravelWorldReceiveAchiTaskRewardReq));
  TActTravelWorldReceiveAchiTaskRewardRsp_descriptor_ = file->message_type(8);
  static const int TActTravelWorldReceiveAchiTaskRewardRsp_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TActTravelWorldReceiveAchiTaskRewardRsp, rewardarr_),
  };
  TActTravelWorldReceiveAchiTaskRewardRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TActTravelWorldReceiveAchiTaskRewardRsp_descriptor_,
      TActTravelWorldReceiveAchiTaskRewardRsp::default_instance_,
      TActTravelWorldReceiveAchiTaskRewardRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TActTravelWorldReceiveAchiTaskRewardRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TActTravelWorldReceiveAchiTaskRewardRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TActTravelWorldReceiveAchiTaskRewardRsp));
  TActTravelWorldNotify_descriptor_ = file->message_type(9);
  static const int TActTravelWorldNotify_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TActTravelWorldNotify, dailytaskarr_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TActTravelWorldNotify, achitaskarr_),
  };
  TActTravelWorldNotify_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TActTravelWorldNotify_descriptor_,
      TActTravelWorldNotify::default_instance_,
      TActTravelWorldNotify_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TActTravelWorldNotify, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TActTravelWorldNotify, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TActTravelWorldNotify));
  EActTravelWorldTaskType_descriptor_ = file->enum_type(0);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_net_2fActTravelWorld_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TActTravelWorldTaskInfo_descriptor_, &TActTravelWorldTaskInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TActTravelWorldGetInfoRsp_descriptor_, &TActTravelWorldGetInfoRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TActTravelWorldSignInRsp_descriptor_, &TActTravelWorldSignInRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TActTravelWorldReceiveScoresRewardReq_descriptor_, &TActTravelWorldReceiveScoresRewardReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TActTravelWorldReceiveScoresRewardRsp_descriptor_, &TActTravelWorldReceiveScoresRewardRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TActTravelWorldReceiveDailyTaskRewardReq_descriptor_, &TActTravelWorldReceiveDailyTaskRewardReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TActTravelWorldReceiveDailyTaskRewardRsp_descriptor_, &TActTravelWorldReceiveDailyTaskRewardRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TActTravelWorldReceiveAchiTaskRewardReq_descriptor_, &TActTravelWorldReceiveAchiTaskRewardReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TActTravelWorldReceiveAchiTaskRewardRsp_descriptor_, &TActTravelWorldReceiveAchiTaskRewardRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TActTravelWorldNotify_descriptor_, &TActTravelWorldNotify::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_net_2fActTravelWorld_2eproto() {
  delete TActTravelWorldTaskInfo::default_instance_;
  delete TActTravelWorldTaskInfo_reflection_;
  delete TActTravelWorldGetInfoRsp::default_instance_;
  delete TActTravelWorldGetInfoRsp_reflection_;
  delete TActTravelWorldSignInRsp::default_instance_;
  delete TActTravelWorldSignInRsp_reflection_;
  delete TActTravelWorldReceiveScoresRewardReq::default_instance_;
  delete TActTravelWorldReceiveScoresRewardReq_reflection_;
  delete TActTravelWorldReceiveScoresRewardRsp::default_instance_;
  delete TActTravelWorldReceiveScoresRewardRsp_reflection_;
  delete TActTravelWorldReceiveDailyTaskRewardReq::default_instance_;
  delete TActTravelWorldReceiveDailyTaskRewardReq_reflection_;
  delete TActTravelWorldReceiveDailyTaskRewardRsp::default_instance_;
  delete TActTravelWorldReceiveDailyTaskRewardRsp_reflection_;
  delete TActTravelWorldReceiveAchiTaskRewardReq::default_instance_;
  delete TActTravelWorldReceiveAchiTaskRewardReq_reflection_;
  delete TActTravelWorldReceiveAchiTaskRewardRsp::default_instance_;
  delete TActTravelWorldReceiveAchiTaskRewardRsp_reflection_;
  delete TActTravelWorldNotify::default_instance_;
  delete TActTravelWorldNotify_reflection_;
}

void protobuf_AddDesc_net_2fActTravelWorld_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::pb::protobuf_AddDesc_net_2fCommonReward_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\030net/ActTravelWorld.proto\022\002pb\032\026net/Comm"
    "onReward.proto\"U\n\027TActTravelWorldTaskInf"
    "o\022-\n\010TaskType\030\001 \001(\0162\033.pb.EActTravelWorld"
    "TaskType\022\013\n\003Num\030\002 \001(\004\"\372\001\n\031TActTravelWorl"
    "dGetInfoRsp\022\020\n\010SignDays\030\001 \001(\r\022\031\n\021ScoresR"
    "ewardedIds\030\002 \003(\r\0221\n\014DailyTaskArr\030\003 \003(\0132\033"
    ".pb.TActTravelWorldTaskInfo\022\034\n\024DailyTask"
    "RewardedIds\030\004 \003(\r\0220\n\013AchiTaskArr\030\005 \003(\0132\033"
    ".pb.TActTravelWorldTaskInfo\022\033\n\023AchiTaskR"
    "ewardedIds\030\006 \003(\r\022\020\n\010SignTime\030\007 \001(\004\"d\n\030TA"
    "ctTravelWorldSignInRsp\022\020\n\010SignTime\030\001 \001(\004"
    "\022\020\n\010SignDays\030\002 \001(\r\022$\n\tRewardArr\030\003 \003(\0132\021."
    "pb.TCommonReward\":\n%TActTravelWorldRecei"
    "veScoresRewardReq\022\021\n\tRewardTid\030\001 \001(\r\"M\n%"
    "TActTravelWorldReceiveScoresRewardRsp\022$\n"
    "\tRewardArr\030\001 \003(\0132\021.pb.TCommonReward\"=\n(T"
    "ActTravelWorldReceiveDailyTaskRewardReq\022"
    "\021\n\tRewardTid\030\001 \001(\r\"P\n(TActTravelWorldRec"
    "eiveDailyTaskRewardRsp\022$\n\tRewardArr\030\001 \003("
    "\0132\021.pb.TCommonReward\"<\n\'TActTravelWorldR"
    "eceiveAchiTaskRewardReq\022\021\n\tRewardTid\030\001 \001"
    "(\r\"O\n\'TActTravelWorldReceiveAchiTaskRewa"
    "rdRsp\022$\n\tRewardArr\030\001 \003(\0132\021.pb.TCommonRew"
    "ard\"|\n\025TActTravelWorldNotify\0221\n\014DailyTas"
    "kArr\030\001 \003(\0132\033.pb.TActTravelWorldTaskInfo\022"
    "0\n\013AchiTaskArr\030\002 \003(\0132\033.pb.TActTravelWorl"
    "dTaskInfo*\253\002\n\027EActTravelWorldTaskType\022\025\n"
    "\021ArenaChallengeNum\020\001\022\030\n\024LevyAttackUserWi"
    "nNum\020\002\022\022\n\016LevyGetCoinNum\020\003\022\033\n\027InstanceCh"
    "allengeWinNum\020\004\022\035\n\031ArenaAdvancedChalleng"
    "eNum\020\005\022\027\n\023BeastInstanceWinNum\020\006\022\022\n\016Guild"
    "DonateNum\020\007\022\024\n\020ExpeditionWinNum\020\010\022\031\n\025Wor"
    "ldBossChallengeNum\020\t\022\023\n\017AdventureWinNum\020"
    "\n\022\034\n\030AdventureRebelArmyWinNum\020\013", 1351);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "net/ActTravelWorld.proto", &protobuf_RegisterTypes);
  TActTravelWorldTaskInfo::default_instance_ = new TActTravelWorldTaskInfo();
  TActTravelWorldGetInfoRsp::default_instance_ = new TActTravelWorldGetInfoRsp();
  TActTravelWorldSignInRsp::default_instance_ = new TActTravelWorldSignInRsp();
  TActTravelWorldReceiveScoresRewardReq::default_instance_ = new TActTravelWorldReceiveScoresRewardReq();
  TActTravelWorldReceiveScoresRewardRsp::default_instance_ = new TActTravelWorldReceiveScoresRewardRsp();
  TActTravelWorldReceiveDailyTaskRewardReq::default_instance_ = new TActTravelWorldReceiveDailyTaskRewardReq();
  TActTravelWorldReceiveDailyTaskRewardRsp::default_instance_ = new TActTravelWorldReceiveDailyTaskRewardRsp();
  TActTravelWorldReceiveAchiTaskRewardReq::default_instance_ = new TActTravelWorldReceiveAchiTaskRewardReq();
  TActTravelWorldReceiveAchiTaskRewardRsp::default_instance_ = new TActTravelWorldReceiveAchiTaskRewardRsp();
  TActTravelWorldNotify::default_instance_ = new TActTravelWorldNotify();
  TActTravelWorldTaskInfo::default_instance_->InitAsDefaultInstance();
  TActTravelWorldGetInfoRsp::default_instance_->InitAsDefaultInstance();
  TActTravelWorldSignInRsp::default_instance_->InitAsDefaultInstance();
  TActTravelWorldReceiveScoresRewardReq::default_instance_->InitAsDefaultInstance();
  TActTravelWorldReceiveScoresRewardRsp::default_instance_->InitAsDefaultInstance();
  TActTravelWorldReceiveDailyTaskRewardReq::default_instance_->InitAsDefaultInstance();
  TActTravelWorldReceiveDailyTaskRewardRsp::default_instance_->InitAsDefaultInstance();
  TActTravelWorldReceiveAchiTaskRewardReq::default_instance_->InitAsDefaultInstance();
  TActTravelWorldReceiveAchiTaskRewardRsp::default_instance_->InitAsDefaultInstance();
  TActTravelWorldNotify::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_net_2fActTravelWorld_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_net_2fActTravelWorld_2eproto {
  StaticDescriptorInitializer_net_2fActTravelWorld_2eproto() {
    protobuf_AddDesc_net_2fActTravelWorld_2eproto();
  }
} static_descriptor_initializer_net_2fActTravelWorld_2eproto_;
const ::google::protobuf::EnumDescriptor* EActTravelWorldTaskType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EActTravelWorldTaskType_descriptor_;
}
bool EActTravelWorldTaskType_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#ifndef _MSC_VER
const int TActTravelWorldTaskInfo::kTaskTypeFieldNumber;
const int TActTravelWorldTaskInfo::kNumFieldNumber;
#endif  // !_MSC_VER

TActTravelWorldTaskInfo::TActTravelWorldTaskInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TActTravelWorldTaskInfo)
}

void TActTravelWorldTaskInfo::InitAsDefaultInstance() {
}

TActTravelWorldTaskInfo::TActTravelWorldTaskInfo(const TActTravelWorldTaskInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TActTravelWorldTaskInfo)
}

void TActTravelWorldTaskInfo::SharedCtor() {
  _cached_size_ = 0;
  tasktype_ = 1;
  num_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TActTravelWorldTaskInfo::~TActTravelWorldTaskInfo() {
  // @@protoc_insertion_point(destructor:pb.TActTravelWorldTaskInfo)
  SharedDtor();
}

void TActTravelWorldTaskInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TActTravelWorldTaskInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TActTravelWorldTaskInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TActTravelWorldTaskInfo_descriptor_;
}

const TActTravelWorldTaskInfo& TActTravelWorldTaskInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fActTravelWorld_2eproto();
  return *default_instance_;
}

TActTravelWorldTaskInfo* TActTravelWorldTaskInfo::default_instance_ = NULL;

TActTravelWorldTaskInfo* TActTravelWorldTaskInfo::New() const {
  return new TActTravelWorldTaskInfo;
}

void TActTravelWorldTaskInfo::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    tasktype_ = 1;
    num_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TActTravelWorldTaskInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TActTravelWorldTaskInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .pb.EActTravelWorldTaskType TaskType = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::pb::EActTravelWorldTaskType_IsValid(value)) {
            set_tasktype(static_cast< ::pb::EActTravelWorldTaskType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_Num;
        break;
      }

      // optional uint64 Num = 2;
      case 2: {
        if (tag == 16) {
         parse_Num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &num_)));
          set_has_num();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TActTravelWorldTaskInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TActTravelWorldTaskInfo)
  return false;
#undef DO_
}

void TActTravelWorldTaskInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TActTravelWorldTaskInfo)
  // optional .pb.EActTravelWorldTaskType TaskType = 1;
  if (has_tasktype()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->tasktype(), output);
  }

  // optional uint64 Num = 2;
  if (has_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->num(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TActTravelWorldTaskInfo)
}

::google::protobuf::uint8* TActTravelWorldTaskInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TActTravelWorldTaskInfo)
  // optional .pb.EActTravelWorldTaskType TaskType = 1;
  if (has_tasktype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->tasktype(), target);
  }

  // optional uint64 Num = 2;
  if (has_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->num(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TActTravelWorldTaskInfo)
  return target;
}

int TActTravelWorldTaskInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .pb.EActTravelWorldTaskType TaskType = 1;
    if (has_tasktype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->tasktype());
    }

    // optional uint64 Num = 2;
    if (has_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->num());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TActTravelWorldTaskInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TActTravelWorldTaskInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TActTravelWorldTaskInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TActTravelWorldTaskInfo::MergeFrom(const TActTravelWorldTaskInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_tasktype()) {
      set_tasktype(from.tasktype());
    }
    if (from.has_num()) {
      set_num(from.num());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TActTravelWorldTaskInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TActTravelWorldTaskInfo::CopyFrom(const TActTravelWorldTaskInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TActTravelWorldTaskInfo::IsInitialized() const {

  return true;
}

void TActTravelWorldTaskInfo::Swap(TActTravelWorldTaskInfo* other) {
  if (other != this) {
    std::swap(tasktype_, other->tasktype_);
    std::swap(num_, other->num_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TActTravelWorldTaskInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TActTravelWorldTaskInfo_descriptor_;
  metadata.reflection = TActTravelWorldTaskInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TActTravelWorldGetInfoRsp::kSignDaysFieldNumber;
const int TActTravelWorldGetInfoRsp::kScoresRewardedIdsFieldNumber;
const int TActTravelWorldGetInfoRsp::kDailyTaskArrFieldNumber;
const int TActTravelWorldGetInfoRsp::kDailyTaskRewardedIdsFieldNumber;
const int TActTravelWorldGetInfoRsp::kAchiTaskArrFieldNumber;
const int TActTravelWorldGetInfoRsp::kAchiTaskRewardedIdsFieldNumber;
const int TActTravelWorldGetInfoRsp::kSignTimeFieldNumber;
#endif  // !_MSC_VER

TActTravelWorldGetInfoRsp::TActTravelWorldGetInfoRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TActTravelWorldGetInfoRsp)
}

void TActTravelWorldGetInfoRsp::InitAsDefaultInstance() {
}

TActTravelWorldGetInfoRsp::TActTravelWorldGetInfoRsp(const TActTravelWorldGetInfoRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TActTravelWorldGetInfoRsp)
}

void TActTravelWorldGetInfoRsp::SharedCtor() {
  _cached_size_ = 0;
  signdays_ = 0u;
  signtime_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TActTravelWorldGetInfoRsp::~TActTravelWorldGetInfoRsp() {
  // @@protoc_insertion_point(destructor:pb.TActTravelWorldGetInfoRsp)
  SharedDtor();
}

void TActTravelWorldGetInfoRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TActTravelWorldGetInfoRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TActTravelWorldGetInfoRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TActTravelWorldGetInfoRsp_descriptor_;
}

const TActTravelWorldGetInfoRsp& TActTravelWorldGetInfoRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fActTravelWorld_2eproto();
  return *default_instance_;
}

TActTravelWorldGetInfoRsp* TActTravelWorldGetInfoRsp::default_instance_ = NULL;

TActTravelWorldGetInfoRsp* TActTravelWorldGetInfoRsp::New() const {
  return new TActTravelWorldGetInfoRsp;
}

void TActTravelWorldGetInfoRsp::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<TActTravelWorldGetInfoRsp*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(signtime_, signdays_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  scoresrewardedids_.Clear();
  dailytaskarr_.Clear();
  dailytaskrewardedids_.Clear();
  achitaskarr_.Clear();
  achitaskrewardedids_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TActTravelWorldGetInfoRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TActTravelWorldGetInfoRsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 SignDays = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &signdays_)));
          set_has_signdays();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_ScoresRewardedIds;
        break;
      }

      // repeated uint32 ScoresRewardedIds = 2;
      case 2: {
        if (tag == 16) {
         parse_ScoresRewardedIds:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 16, input, this->mutable_scoresrewardedids())));
        } else if (tag == 18) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_scoresrewardedids())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_ScoresRewardedIds;
        if (input->ExpectTag(26)) goto parse_DailyTaskArr;
        break;
      }

      // repeated .pb.TActTravelWorldTaskInfo DailyTaskArr = 3;
      case 3: {
        if (tag == 26) {
         parse_DailyTaskArr:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_dailytaskarr()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_DailyTaskArr;
        if (input->ExpectTag(32)) goto parse_DailyTaskRewardedIds;
        break;
      }

      // repeated uint32 DailyTaskRewardedIds = 4;
      case 4: {
        if (tag == 32) {
         parse_DailyTaskRewardedIds:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 32, input, this->mutable_dailytaskrewardedids())));
        } else if (tag == 34) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_dailytaskrewardedids())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_DailyTaskRewardedIds;
        if (input->ExpectTag(42)) goto parse_AchiTaskArr;
        break;
      }

      // repeated .pb.TActTravelWorldTaskInfo AchiTaskArr = 5;
      case 5: {
        if (tag == 42) {
         parse_AchiTaskArr:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_achitaskarr()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_AchiTaskArr;
        if (input->ExpectTag(48)) goto parse_AchiTaskRewardedIds;
        break;
      }

      // repeated uint32 AchiTaskRewardedIds = 6;
      case 6: {
        if (tag == 48) {
         parse_AchiTaskRewardedIds:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 48, input, this->mutable_achitaskrewardedids())));
        } else if (tag == 50) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_achitaskrewardedids())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_AchiTaskRewardedIds;
        if (input->ExpectTag(56)) goto parse_SignTime;
        break;
      }

      // optional uint64 SignTime = 7;
      case 7: {
        if (tag == 56) {
         parse_SignTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &signtime_)));
          set_has_signtime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TActTravelWorldGetInfoRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TActTravelWorldGetInfoRsp)
  return false;
#undef DO_
}

void TActTravelWorldGetInfoRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TActTravelWorldGetInfoRsp)
  // optional uint32 SignDays = 1;
  if (has_signdays()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->signdays(), output);
  }

  // repeated uint32 ScoresRewardedIds = 2;
  for (int i = 0; i < this->scoresrewardedids_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      2, this->scoresrewardedids(i), output);
  }

  // repeated .pb.TActTravelWorldTaskInfo DailyTaskArr = 3;
  for (int i = 0; i < this->dailytaskarr_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->dailytaskarr(i), output);
  }

  // repeated uint32 DailyTaskRewardedIds = 4;
  for (int i = 0; i < this->dailytaskrewardedids_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      4, this->dailytaskrewardedids(i), output);
  }

  // repeated .pb.TActTravelWorldTaskInfo AchiTaskArr = 5;
  for (int i = 0; i < this->achitaskarr_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->achitaskarr(i), output);
  }

  // repeated uint32 AchiTaskRewardedIds = 6;
  for (int i = 0; i < this->achitaskrewardedids_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      6, this->achitaskrewardedids(i), output);
  }

  // optional uint64 SignTime = 7;
  if (has_signtime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(7, this->signtime(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TActTravelWorldGetInfoRsp)
}

::google::protobuf::uint8* TActTravelWorldGetInfoRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TActTravelWorldGetInfoRsp)
  // optional uint32 SignDays = 1;
  if (has_signdays()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->signdays(), target);
  }

  // repeated uint32 ScoresRewardedIds = 2;
  for (int i = 0; i < this->scoresrewardedids_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(2, this->scoresrewardedids(i), target);
  }

  // repeated .pb.TActTravelWorldTaskInfo DailyTaskArr = 3;
  for (int i = 0; i < this->dailytaskarr_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->dailytaskarr(i), target);
  }

  // repeated uint32 DailyTaskRewardedIds = 4;
  for (int i = 0; i < this->dailytaskrewardedids_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(4, this->dailytaskrewardedids(i), target);
  }

  // repeated .pb.TActTravelWorldTaskInfo AchiTaskArr = 5;
  for (int i = 0; i < this->achitaskarr_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->achitaskarr(i), target);
  }

  // repeated uint32 AchiTaskRewardedIds = 6;
  for (int i = 0; i < this->achitaskrewardedids_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(6, this->achitaskrewardedids(i), target);
  }

  // optional uint64 SignTime = 7;
  if (has_signtime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(7, this->signtime(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TActTravelWorldGetInfoRsp)
  return target;
}

int TActTravelWorldGetInfoRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 SignDays = 1;
    if (has_signdays()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->signdays());
    }

    // optional uint64 SignTime = 7;
    if (has_signtime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->signtime());
    }

  }
  // repeated uint32 ScoresRewardedIds = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->scoresrewardedids_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->scoresrewardedids(i));
    }
    total_size += 1 * this->scoresrewardedids_size() + data_size;
  }

  // repeated .pb.TActTravelWorldTaskInfo DailyTaskArr = 3;
  total_size += 1 * this->dailytaskarr_size();
  for (int i = 0; i < this->dailytaskarr_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->dailytaskarr(i));
  }

  // repeated uint32 DailyTaskRewardedIds = 4;
  {
    int data_size = 0;
    for (int i = 0; i < this->dailytaskrewardedids_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->dailytaskrewardedids(i));
    }
    total_size += 1 * this->dailytaskrewardedids_size() + data_size;
  }

  // repeated .pb.TActTravelWorldTaskInfo AchiTaskArr = 5;
  total_size += 1 * this->achitaskarr_size();
  for (int i = 0; i < this->achitaskarr_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->achitaskarr(i));
  }

  // repeated uint32 AchiTaskRewardedIds = 6;
  {
    int data_size = 0;
    for (int i = 0; i < this->achitaskrewardedids_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->achitaskrewardedids(i));
    }
    total_size += 1 * this->achitaskrewardedids_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TActTravelWorldGetInfoRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TActTravelWorldGetInfoRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TActTravelWorldGetInfoRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TActTravelWorldGetInfoRsp::MergeFrom(const TActTravelWorldGetInfoRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  scoresrewardedids_.MergeFrom(from.scoresrewardedids_);
  dailytaskarr_.MergeFrom(from.dailytaskarr_);
  dailytaskrewardedids_.MergeFrom(from.dailytaskrewardedids_);
  achitaskarr_.MergeFrom(from.achitaskarr_);
  achitaskrewardedids_.MergeFrom(from.achitaskrewardedids_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_signdays()) {
      set_signdays(from.signdays());
    }
    if (from.has_signtime()) {
      set_signtime(from.signtime());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TActTravelWorldGetInfoRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TActTravelWorldGetInfoRsp::CopyFrom(const TActTravelWorldGetInfoRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TActTravelWorldGetInfoRsp::IsInitialized() const {

  return true;
}

void TActTravelWorldGetInfoRsp::Swap(TActTravelWorldGetInfoRsp* other) {
  if (other != this) {
    std::swap(signdays_, other->signdays_);
    scoresrewardedids_.Swap(&other->scoresrewardedids_);
    dailytaskarr_.Swap(&other->dailytaskarr_);
    dailytaskrewardedids_.Swap(&other->dailytaskrewardedids_);
    achitaskarr_.Swap(&other->achitaskarr_);
    achitaskrewardedids_.Swap(&other->achitaskrewardedids_);
    std::swap(signtime_, other->signtime_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TActTravelWorldGetInfoRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TActTravelWorldGetInfoRsp_descriptor_;
  metadata.reflection = TActTravelWorldGetInfoRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TActTravelWorldSignInRsp::kSignTimeFieldNumber;
const int TActTravelWorldSignInRsp::kSignDaysFieldNumber;
const int TActTravelWorldSignInRsp::kRewardArrFieldNumber;
#endif  // !_MSC_VER

TActTravelWorldSignInRsp::TActTravelWorldSignInRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TActTravelWorldSignInRsp)
}

void TActTravelWorldSignInRsp::InitAsDefaultInstance() {
}

TActTravelWorldSignInRsp::TActTravelWorldSignInRsp(const TActTravelWorldSignInRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TActTravelWorldSignInRsp)
}

void TActTravelWorldSignInRsp::SharedCtor() {
  _cached_size_ = 0;
  signtime_ = GOOGLE_ULONGLONG(0);
  signdays_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TActTravelWorldSignInRsp::~TActTravelWorldSignInRsp() {
  // @@protoc_insertion_point(destructor:pb.TActTravelWorldSignInRsp)
  SharedDtor();
}

void TActTravelWorldSignInRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TActTravelWorldSignInRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TActTravelWorldSignInRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TActTravelWorldSignInRsp_descriptor_;
}

const TActTravelWorldSignInRsp& TActTravelWorldSignInRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fActTravelWorld_2eproto();
  return *default_instance_;
}

TActTravelWorldSignInRsp* TActTravelWorldSignInRsp::default_instance_ = NULL;

TActTravelWorldSignInRsp* TActTravelWorldSignInRsp::New() const {
  return new TActTravelWorldSignInRsp;
}

void TActTravelWorldSignInRsp::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    signtime_ = GOOGLE_ULONGLONG(0);
    signdays_ = 0u;
  }
  rewardarr_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TActTravelWorldSignInRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TActTravelWorldSignInRsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 SignTime = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &signtime_)));
          set_has_signtime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_SignDays;
        break;
      }

      // optional uint32 SignDays = 2;
      case 2: {
        if (tag == 16) {
         parse_SignDays:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &signdays_)));
          set_has_signdays();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_RewardArr;
        break;
      }

      // repeated .pb.TCommonReward RewardArr = 3;
      case 3: {
        if (tag == 26) {
         parse_RewardArr:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_rewardarr()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_RewardArr;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TActTravelWorldSignInRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TActTravelWorldSignInRsp)
  return false;
#undef DO_
}

void TActTravelWorldSignInRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TActTravelWorldSignInRsp)
  // optional uint64 SignTime = 1;
  if (has_signtime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->signtime(), output);
  }

  // optional uint32 SignDays = 2;
  if (has_signdays()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->signdays(), output);
  }

  // repeated .pb.TCommonReward RewardArr = 3;
  for (int i = 0; i < this->rewardarr_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->rewardarr(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TActTravelWorldSignInRsp)
}

::google::protobuf::uint8* TActTravelWorldSignInRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TActTravelWorldSignInRsp)
  // optional uint64 SignTime = 1;
  if (has_signtime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->signtime(), target);
  }

  // optional uint32 SignDays = 2;
  if (has_signdays()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->signdays(), target);
  }

  // repeated .pb.TCommonReward RewardArr = 3;
  for (int i = 0; i < this->rewardarr_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->rewardarr(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TActTravelWorldSignInRsp)
  return target;
}

int TActTravelWorldSignInRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 SignTime = 1;
    if (has_signtime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->signtime());
    }

    // optional uint32 SignDays = 2;
    if (has_signdays()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->signdays());
    }

  }
  // repeated .pb.TCommonReward RewardArr = 3;
  total_size += 1 * this->rewardarr_size();
  for (int i = 0; i < this->rewardarr_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->rewardarr(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TActTravelWorldSignInRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TActTravelWorldSignInRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TActTravelWorldSignInRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TActTravelWorldSignInRsp::MergeFrom(const TActTravelWorldSignInRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  rewardarr_.MergeFrom(from.rewardarr_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_signtime()) {
      set_signtime(from.signtime());
    }
    if (from.has_signdays()) {
      set_signdays(from.signdays());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TActTravelWorldSignInRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TActTravelWorldSignInRsp::CopyFrom(const TActTravelWorldSignInRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TActTravelWorldSignInRsp::IsInitialized() const {

  return true;
}

void TActTravelWorldSignInRsp::Swap(TActTravelWorldSignInRsp* other) {
  if (other != this) {
    std::swap(signtime_, other->signtime_);
    std::swap(signdays_, other->signdays_);
    rewardarr_.Swap(&other->rewardarr_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TActTravelWorldSignInRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TActTravelWorldSignInRsp_descriptor_;
  metadata.reflection = TActTravelWorldSignInRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TActTravelWorldReceiveScoresRewardReq::kRewardTidFieldNumber;
#endif  // !_MSC_VER

TActTravelWorldReceiveScoresRewardReq::TActTravelWorldReceiveScoresRewardReq()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TActTravelWorldReceiveScoresRewardReq)
}

void TActTravelWorldReceiveScoresRewardReq::InitAsDefaultInstance() {
}

TActTravelWorldReceiveScoresRewardReq::TActTravelWorldReceiveScoresRewardReq(const TActTravelWorldReceiveScoresRewardReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TActTravelWorldReceiveScoresRewardReq)
}

void TActTravelWorldReceiveScoresRewardReq::SharedCtor() {
  _cached_size_ = 0;
  rewardtid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TActTravelWorldReceiveScoresRewardReq::~TActTravelWorldReceiveScoresRewardReq() {
  // @@protoc_insertion_point(destructor:pb.TActTravelWorldReceiveScoresRewardReq)
  SharedDtor();
}

void TActTravelWorldReceiveScoresRewardReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TActTravelWorldReceiveScoresRewardReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TActTravelWorldReceiveScoresRewardReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TActTravelWorldReceiveScoresRewardReq_descriptor_;
}

const TActTravelWorldReceiveScoresRewardReq& TActTravelWorldReceiveScoresRewardReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fActTravelWorld_2eproto();
  return *default_instance_;
}

TActTravelWorldReceiveScoresRewardReq* TActTravelWorldReceiveScoresRewardReq::default_instance_ = NULL;

TActTravelWorldReceiveScoresRewardReq* TActTravelWorldReceiveScoresRewardReq::New() const {
  return new TActTravelWorldReceiveScoresRewardReq;
}

void TActTravelWorldReceiveScoresRewardReq::Clear() {
  rewardtid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TActTravelWorldReceiveScoresRewardReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TActTravelWorldReceiveScoresRewardReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 RewardTid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &rewardtid_)));
          set_has_rewardtid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TActTravelWorldReceiveScoresRewardReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TActTravelWorldReceiveScoresRewardReq)
  return false;
#undef DO_
}

void TActTravelWorldReceiveScoresRewardReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TActTravelWorldReceiveScoresRewardReq)
  // optional uint32 RewardTid = 1;
  if (has_rewardtid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->rewardtid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TActTravelWorldReceiveScoresRewardReq)
}

::google::protobuf::uint8* TActTravelWorldReceiveScoresRewardReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TActTravelWorldReceiveScoresRewardReq)
  // optional uint32 RewardTid = 1;
  if (has_rewardtid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->rewardtid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TActTravelWorldReceiveScoresRewardReq)
  return target;
}

int TActTravelWorldReceiveScoresRewardReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 RewardTid = 1;
    if (has_rewardtid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->rewardtid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TActTravelWorldReceiveScoresRewardReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TActTravelWorldReceiveScoresRewardReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TActTravelWorldReceiveScoresRewardReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TActTravelWorldReceiveScoresRewardReq::MergeFrom(const TActTravelWorldReceiveScoresRewardReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_rewardtid()) {
      set_rewardtid(from.rewardtid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TActTravelWorldReceiveScoresRewardReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TActTravelWorldReceiveScoresRewardReq::CopyFrom(const TActTravelWorldReceiveScoresRewardReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TActTravelWorldReceiveScoresRewardReq::IsInitialized() const {

  return true;
}

void TActTravelWorldReceiveScoresRewardReq::Swap(TActTravelWorldReceiveScoresRewardReq* other) {
  if (other != this) {
    std::swap(rewardtid_, other->rewardtid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TActTravelWorldReceiveScoresRewardReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TActTravelWorldReceiveScoresRewardReq_descriptor_;
  metadata.reflection = TActTravelWorldReceiveScoresRewardReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TActTravelWorldReceiveScoresRewardRsp::kRewardArrFieldNumber;
#endif  // !_MSC_VER

TActTravelWorldReceiveScoresRewardRsp::TActTravelWorldReceiveScoresRewardRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TActTravelWorldReceiveScoresRewardRsp)
}

void TActTravelWorldReceiveScoresRewardRsp::InitAsDefaultInstance() {
}

TActTravelWorldReceiveScoresRewardRsp::TActTravelWorldReceiveScoresRewardRsp(const TActTravelWorldReceiveScoresRewardRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TActTravelWorldReceiveScoresRewardRsp)
}

void TActTravelWorldReceiveScoresRewardRsp::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TActTravelWorldReceiveScoresRewardRsp::~TActTravelWorldReceiveScoresRewardRsp() {
  // @@protoc_insertion_point(destructor:pb.TActTravelWorldReceiveScoresRewardRsp)
  SharedDtor();
}

void TActTravelWorldReceiveScoresRewardRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TActTravelWorldReceiveScoresRewardRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TActTravelWorldReceiveScoresRewardRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TActTravelWorldReceiveScoresRewardRsp_descriptor_;
}

const TActTravelWorldReceiveScoresRewardRsp& TActTravelWorldReceiveScoresRewardRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fActTravelWorld_2eproto();
  return *default_instance_;
}

TActTravelWorldReceiveScoresRewardRsp* TActTravelWorldReceiveScoresRewardRsp::default_instance_ = NULL;

TActTravelWorldReceiveScoresRewardRsp* TActTravelWorldReceiveScoresRewardRsp::New() const {
  return new TActTravelWorldReceiveScoresRewardRsp;
}

void TActTravelWorldReceiveScoresRewardRsp::Clear() {
  rewardarr_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TActTravelWorldReceiveScoresRewardRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TActTravelWorldReceiveScoresRewardRsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .pb.TCommonReward RewardArr = 1;
      case 1: {
        if (tag == 10) {
         parse_RewardArr:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_rewardarr()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_RewardArr;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TActTravelWorldReceiveScoresRewardRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TActTravelWorldReceiveScoresRewardRsp)
  return false;
#undef DO_
}

void TActTravelWorldReceiveScoresRewardRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TActTravelWorldReceiveScoresRewardRsp)
  // repeated .pb.TCommonReward RewardArr = 1;
  for (int i = 0; i < this->rewardarr_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->rewardarr(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TActTravelWorldReceiveScoresRewardRsp)
}

::google::protobuf::uint8* TActTravelWorldReceiveScoresRewardRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TActTravelWorldReceiveScoresRewardRsp)
  // repeated .pb.TCommonReward RewardArr = 1;
  for (int i = 0; i < this->rewardarr_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->rewardarr(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TActTravelWorldReceiveScoresRewardRsp)
  return target;
}

int TActTravelWorldReceiveScoresRewardRsp::ByteSize() const {
  int total_size = 0;

  // repeated .pb.TCommonReward RewardArr = 1;
  total_size += 1 * this->rewardarr_size();
  for (int i = 0; i < this->rewardarr_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->rewardarr(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TActTravelWorldReceiveScoresRewardRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TActTravelWorldReceiveScoresRewardRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TActTravelWorldReceiveScoresRewardRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TActTravelWorldReceiveScoresRewardRsp::MergeFrom(const TActTravelWorldReceiveScoresRewardRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  rewardarr_.MergeFrom(from.rewardarr_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TActTravelWorldReceiveScoresRewardRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TActTravelWorldReceiveScoresRewardRsp::CopyFrom(const TActTravelWorldReceiveScoresRewardRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TActTravelWorldReceiveScoresRewardRsp::IsInitialized() const {

  return true;
}

void TActTravelWorldReceiveScoresRewardRsp::Swap(TActTravelWorldReceiveScoresRewardRsp* other) {
  if (other != this) {
    rewardarr_.Swap(&other->rewardarr_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TActTravelWorldReceiveScoresRewardRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TActTravelWorldReceiveScoresRewardRsp_descriptor_;
  metadata.reflection = TActTravelWorldReceiveScoresRewardRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TActTravelWorldReceiveDailyTaskRewardReq::kRewardTidFieldNumber;
#endif  // !_MSC_VER

TActTravelWorldReceiveDailyTaskRewardReq::TActTravelWorldReceiveDailyTaskRewardReq()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TActTravelWorldReceiveDailyTaskRewardReq)
}

void TActTravelWorldReceiveDailyTaskRewardReq::InitAsDefaultInstance() {
}

TActTravelWorldReceiveDailyTaskRewardReq::TActTravelWorldReceiveDailyTaskRewardReq(const TActTravelWorldReceiveDailyTaskRewardReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TActTravelWorldReceiveDailyTaskRewardReq)
}

void TActTravelWorldReceiveDailyTaskRewardReq::SharedCtor() {
  _cached_size_ = 0;
  rewardtid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TActTravelWorldReceiveDailyTaskRewardReq::~TActTravelWorldReceiveDailyTaskRewardReq() {
  // @@protoc_insertion_point(destructor:pb.TActTravelWorldReceiveDailyTaskRewardReq)
  SharedDtor();
}

void TActTravelWorldReceiveDailyTaskRewardReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TActTravelWorldReceiveDailyTaskRewardReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TActTravelWorldReceiveDailyTaskRewardReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TActTravelWorldReceiveDailyTaskRewardReq_descriptor_;
}

const TActTravelWorldReceiveDailyTaskRewardReq& TActTravelWorldReceiveDailyTaskRewardReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fActTravelWorld_2eproto();
  return *default_instance_;
}

TActTravelWorldReceiveDailyTaskRewardReq* TActTravelWorldReceiveDailyTaskRewardReq::default_instance_ = NULL;

TActTravelWorldReceiveDailyTaskRewardReq* TActTravelWorldReceiveDailyTaskRewardReq::New() const {
  return new TActTravelWorldReceiveDailyTaskRewardReq;
}

void TActTravelWorldReceiveDailyTaskRewardReq::Clear() {
  rewardtid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TActTravelWorldReceiveDailyTaskRewardReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TActTravelWorldReceiveDailyTaskRewardReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 RewardTid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &rewardtid_)));
          set_has_rewardtid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TActTravelWorldReceiveDailyTaskRewardReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TActTravelWorldReceiveDailyTaskRewardReq)
  return false;
#undef DO_
}

void TActTravelWorldReceiveDailyTaskRewardReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TActTravelWorldReceiveDailyTaskRewardReq)
  // optional uint32 RewardTid = 1;
  if (has_rewardtid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->rewardtid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TActTravelWorldReceiveDailyTaskRewardReq)
}

::google::protobuf::uint8* TActTravelWorldReceiveDailyTaskRewardReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TActTravelWorldReceiveDailyTaskRewardReq)
  // optional uint32 RewardTid = 1;
  if (has_rewardtid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->rewardtid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TActTravelWorldReceiveDailyTaskRewardReq)
  return target;
}

int TActTravelWorldReceiveDailyTaskRewardReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 RewardTid = 1;
    if (has_rewardtid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->rewardtid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TActTravelWorldReceiveDailyTaskRewardReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TActTravelWorldReceiveDailyTaskRewardReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TActTravelWorldReceiveDailyTaskRewardReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TActTravelWorldReceiveDailyTaskRewardReq::MergeFrom(const TActTravelWorldReceiveDailyTaskRewardReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_rewardtid()) {
      set_rewardtid(from.rewardtid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TActTravelWorldReceiveDailyTaskRewardReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TActTravelWorldReceiveDailyTaskRewardReq::CopyFrom(const TActTravelWorldReceiveDailyTaskRewardReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TActTravelWorldReceiveDailyTaskRewardReq::IsInitialized() const {

  return true;
}

void TActTravelWorldReceiveDailyTaskRewardReq::Swap(TActTravelWorldReceiveDailyTaskRewardReq* other) {
  if (other != this) {
    std::swap(rewardtid_, other->rewardtid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TActTravelWorldReceiveDailyTaskRewardReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TActTravelWorldReceiveDailyTaskRewardReq_descriptor_;
  metadata.reflection = TActTravelWorldReceiveDailyTaskRewardReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TActTravelWorldReceiveDailyTaskRewardRsp::kRewardArrFieldNumber;
#endif  // !_MSC_VER

TActTravelWorldReceiveDailyTaskRewardRsp::TActTravelWorldReceiveDailyTaskRewardRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TActTravelWorldReceiveDailyTaskRewardRsp)
}

void TActTravelWorldReceiveDailyTaskRewardRsp::InitAsDefaultInstance() {
}

TActTravelWorldReceiveDailyTaskRewardRsp::TActTravelWorldReceiveDailyTaskRewardRsp(const TActTravelWorldReceiveDailyTaskRewardRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TActTravelWorldReceiveDailyTaskRewardRsp)
}

void TActTravelWorldReceiveDailyTaskRewardRsp::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TActTravelWorldReceiveDailyTaskRewardRsp::~TActTravelWorldReceiveDailyTaskRewardRsp() {
  // @@protoc_insertion_point(destructor:pb.TActTravelWorldReceiveDailyTaskRewardRsp)
  SharedDtor();
}

void TActTravelWorldReceiveDailyTaskRewardRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TActTravelWorldReceiveDailyTaskRewardRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TActTravelWorldReceiveDailyTaskRewardRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TActTravelWorldReceiveDailyTaskRewardRsp_descriptor_;
}

const TActTravelWorldReceiveDailyTaskRewardRsp& TActTravelWorldReceiveDailyTaskRewardRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fActTravelWorld_2eproto();
  return *default_instance_;
}

TActTravelWorldReceiveDailyTaskRewardRsp* TActTravelWorldReceiveDailyTaskRewardRsp::default_instance_ = NULL;

TActTravelWorldReceiveDailyTaskRewardRsp* TActTravelWorldReceiveDailyTaskRewardRsp::New() const {
  return new TActTravelWorldReceiveDailyTaskRewardRsp;
}

void TActTravelWorldReceiveDailyTaskRewardRsp::Clear() {
  rewardarr_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TActTravelWorldReceiveDailyTaskRewardRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TActTravelWorldReceiveDailyTaskRewardRsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .pb.TCommonReward RewardArr = 1;
      case 1: {
        if (tag == 10) {
         parse_RewardArr:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_rewardarr()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_RewardArr;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TActTravelWorldReceiveDailyTaskRewardRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TActTravelWorldReceiveDailyTaskRewardRsp)
  return false;
#undef DO_
}

void TActTravelWorldReceiveDailyTaskRewardRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TActTravelWorldReceiveDailyTaskRewardRsp)
  // repeated .pb.TCommonReward RewardArr = 1;
  for (int i = 0; i < this->rewardarr_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->rewardarr(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TActTravelWorldReceiveDailyTaskRewardRsp)
}

::google::protobuf::uint8* TActTravelWorldReceiveDailyTaskRewardRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TActTravelWorldReceiveDailyTaskRewardRsp)
  // repeated .pb.TCommonReward RewardArr = 1;
  for (int i = 0; i < this->rewardarr_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->rewardarr(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TActTravelWorldReceiveDailyTaskRewardRsp)
  return target;
}

int TActTravelWorldReceiveDailyTaskRewardRsp::ByteSize() const {
  int total_size = 0;

  // repeated .pb.TCommonReward RewardArr = 1;
  total_size += 1 * this->rewardarr_size();
  for (int i = 0; i < this->rewardarr_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->rewardarr(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TActTravelWorldReceiveDailyTaskRewardRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TActTravelWorldReceiveDailyTaskRewardRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TActTravelWorldReceiveDailyTaskRewardRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TActTravelWorldReceiveDailyTaskRewardRsp::MergeFrom(const TActTravelWorldReceiveDailyTaskRewardRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  rewardarr_.MergeFrom(from.rewardarr_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TActTravelWorldReceiveDailyTaskRewardRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TActTravelWorldReceiveDailyTaskRewardRsp::CopyFrom(const TActTravelWorldReceiveDailyTaskRewardRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TActTravelWorldReceiveDailyTaskRewardRsp::IsInitialized() const {

  return true;
}

void TActTravelWorldReceiveDailyTaskRewardRsp::Swap(TActTravelWorldReceiveDailyTaskRewardRsp* other) {
  if (other != this) {
    rewardarr_.Swap(&other->rewardarr_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TActTravelWorldReceiveDailyTaskRewardRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TActTravelWorldReceiveDailyTaskRewardRsp_descriptor_;
  metadata.reflection = TActTravelWorldReceiveDailyTaskRewardRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TActTravelWorldReceiveAchiTaskRewardReq::kRewardTidFieldNumber;
#endif  // !_MSC_VER

TActTravelWorldReceiveAchiTaskRewardReq::TActTravelWorldReceiveAchiTaskRewardReq()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TActTravelWorldReceiveAchiTaskRewardReq)
}

void TActTravelWorldReceiveAchiTaskRewardReq::InitAsDefaultInstance() {
}

TActTravelWorldReceiveAchiTaskRewardReq::TActTravelWorldReceiveAchiTaskRewardReq(const TActTravelWorldReceiveAchiTaskRewardReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TActTravelWorldReceiveAchiTaskRewardReq)
}

void TActTravelWorldReceiveAchiTaskRewardReq::SharedCtor() {
  _cached_size_ = 0;
  rewardtid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TActTravelWorldReceiveAchiTaskRewardReq::~TActTravelWorldReceiveAchiTaskRewardReq() {
  // @@protoc_insertion_point(destructor:pb.TActTravelWorldReceiveAchiTaskRewardReq)
  SharedDtor();
}

void TActTravelWorldReceiveAchiTaskRewardReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TActTravelWorldReceiveAchiTaskRewardReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TActTravelWorldReceiveAchiTaskRewardReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TActTravelWorldReceiveAchiTaskRewardReq_descriptor_;
}

const TActTravelWorldReceiveAchiTaskRewardReq& TActTravelWorldReceiveAchiTaskRewardReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fActTravelWorld_2eproto();
  return *default_instance_;
}

TActTravelWorldReceiveAchiTaskRewardReq* TActTravelWorldReceiveAchiTaskRewardReq::default_instance_ = NULL;

TActTravelWorldReceiveAchiTaskRewardReq* TActTravelWorldReceiveAchiTaskRewardReq::New() const {
  return new TActTravelWorldReceiveAchiTaskRewardReq;
}

void TActTravelWorldReceiveAchiTaskRewardReq::Clear() {
  rewardtid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TActTravelWorldReceiveAchiTaskRewardReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TActTravelWorldReceiveAchiTaskRewardReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 RewardTid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &rewardtid_)));
          set_has_rewardtid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TActTravelWorldReceiveAchiTaskRewardReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TActTravelWorldReceiveAchiTaskRewardReq)
  return false;
#undef DO_
}

void TActTravelWorldReceiveAchiTaskRewardReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TActTravelWorldReceiveAchiTaskRewardReq)
  // optional uint32 RewardTid = 1;
  if (has_rewardtid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->rewardtid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TActTravelWorldReceiveAchiTaskRewardReq)
}

::google::protobuf::uint8* TActTravelWorldReceiveAchiTaskRewardReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TActTravelWorldReceiveAchiTaskRewardReq)
  // optional uint32 RewardTid = 1;
  if (has_rewardtid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->rewardtid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TActTravelWorldReceiveAchiTaskRewardReq)
  return target;
}

int TActTravelWorldReceiveAchiTaskRewardReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 RewardTid = 1;
    if (has_rewardtid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->rewardtid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TActTravelWorldReceiveAchiTaskRewardReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TActTravelWorldReceiveAchiTaskRewardReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TActTravelWorldReceiveAchiTaskRewardReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TActTravelWorldReceiveAchiTaskRewardReq::MergeFrom(const TActTravelWorldReceiveAchiTaskRewardReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_rewardtid()) {
      set_rewardtid(from.rewardtid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TActTravelWorldReceiveAchiTaskRewardReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TActTravelWorldReceiveAchiTaskRewardReq::CopyFrom(const TActTravelWorldReceiveAchiTaskRewardReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TActTravelWorldReceiveAchiTaskRewardReq::IsInitialized() const {

  return true;
}

void TActTravelWorldReceiveAchiTaskRewardReq::Swap(TActTravelWorldReceiveAchiTaskRewardReq* other) {
  if (other != this) {
    std::swap(rewardtid_, other->rewardtid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TActTravelWorldReceiveAchiTaskRewardReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TActTravelWorldReceiveAchiTaskRewardReq_descriptor_;
  metadata.reflection = TActTravelWorldReceiveAchiTaskRewardReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TActTravelWorldReceiveAchiTaskRewardRsp::kRewardArrFieldNumber;
#endif  // !_MSC_VER

TActTravelWorldReceiveAchiTaskRewardRsp::TActTravelWorldReceiveAchiTaskRewardRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TActTravelWorldReceiveAchiTaskRewardRsp)
}

void TActTravelWorldReceiveAchiTaskRewardRsp::InitAsDefaultInstance() {
}

TActTravelWorldReceiveAchiTaskRewardRsp::TActTravelWorldReceiveAchiTaskRewardRsp(const TActTravelWorldReceiveAchiTaskRewardRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TActTravelWorldReceiveAchiTaskRewardRsp)
}

void TActTravelWorldReceiveAchiTaskRewardRsp::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TActTravelWorldReceiveAchiTaskRewardRsp::~TActTravelWorldReceiveAchiTaskRewardRsp() {
  // @@protoc_insertion_point(destructor:pb.TActTravelWorldReceiveAchiTaskRewardRsp)
  SharedDtor();
}

void TActTravelWorldReceiveAchiTaskRewardRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TActTravelWorldReceiveAchiTaskRewardRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TActTravelWorldReceiveAchiTaskRewardRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TActTravelWorldReceiveAchiTaskRewardRsp_descriptor_;
}

const TActTravelWorldReceiveAchiTaskRewardRsp& TActTravelWorldReceiveAchiTaskRewardRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fActTravelWorld_2eproto();
  return *default_instance_;
}

TActTravelWorldReceiveAchiTaskRewardRsp* TActTravelWorldReceiveAchiTaskRewardRsp::default_instance_ = NULL;

TActTravelWorldReceiveAchiTaskRewardRsp* TActTravelWorldReceiveAchiTaskRewardRsp::New() const {
  return new TActTravelWorldReceiveAchiTaskRewardRsp;
}

void TActTravelWorldReceiveAchiTaskRewardRsp::Clear() {
  rewardarr_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TActTravelWorldReceiveAchiTaskRewardRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TActTravelWorldReceiveAchiTaskRewardRsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .pb.TCommonReward RewardArr = 1;
      case 1: {
        if (tag == 10) {
         parse_RewardArr:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_rewardarr()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_RewardArr;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TActTravelWorldReceiveAchiTaskRewardRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TActTravelWorldReceiveAchiTaskRewardRsp)
  return false;
#undef DO_
}

void TActTravelWorldReceiveAchiTaskRewardRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TActTravelWorldReceiveAchiTaskRewardRsp)
  // repeated .pb.TCommonReward RewardArr = 1;
  for (int i = 0; i < this->rewardarr_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->rewardarr(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TActTravelWorldReceiveAchiTaskRewardRsp)
}

::google::protobuf::uint8* TActTravelWorldReceiveAchiTaskRewardRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TActTravelWorldReceiveAchiTaskRewardRsp)
  // repeated .pb.TCommonReward RewardArr = 1;
  for (int i = 0; i < this->rewardarr_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->rewardarr(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TActTravelWorldReceiveAchiTaskRewardRsp)
  return target;
}

int TActTravelWorldReceiveAchiTaskRewardRsp::ByteSize() const {
  int total_size = 0;

  // repeated .pb.TCommonReward RewardArr = 1;
  total_size += 1 * this->rewardarr_size();
  for (int i = 0; i < this->rewardarr_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->rewardarr(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TActTravelWorldReceiveAchiTaskRewardRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TActTravelWorldReceiveAchiTaskRewardRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TActTravelWorldReceiveAchiTaskRewardRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TActTravelWorldReceiveAchiTaskRewardRsp::MergeFrom(const TActTravelWorldReceiveAchiTaskRewardRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  rewardarr_.MergeFrom(from.rewardarr_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TActTravelWorldReceiveAchiTaskRewardRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TActTravelWorldReceiveAchiTaskRewardRsp::CopyFrom(const TActTravelWorldReceiveAchiTaskRewardRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TActTravelWorldReceiveAchiTaskRewardRsp::IsInitialized() const {

  return true;
}

void TActTravelWorldReceiveAchiTaskRewardRsp::Swap(TActTravelWorldReceiveAchiTaskRewardRsp* other) {
  if (other != this) {
    rewardarr_.Swap(&other->rewardarr_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TActTravelWorldReceiveAchiTaskRewardRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TActTravelWorldReceiveAchiTaskRewardRsp_descriptor_;
  metadata.reflection = TActTravelWorldReceiveAchiTaskRewardRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TActTravelWorldNotify::kDailyTaskArrFieldNumber;
const int TActTravelWorldNotify::kAchiTaskArrFieldNumber;
#endif  // !_MSC_VER

TActTravelWorldNotify::TActTravelWorldNotify()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TActTravelWorldNotify)
}

void TActTravelWorldNotify::InitAsDefaultInstance() {
}

TActTravelWorldNotify::TActTravelWorldNotify(const TActTravelWorldNotify& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TActTravelWorldNotify)
}

void TActTravelWorldNotify::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TActTravelWorldNotify::~TActTravelWorldNotify() {
  // @@protoc_insertion_point(destructor:pb.TActTravelWorldNotify)
  SharedDtor();
}

void TActTravelWorldNotify::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TActTravelWorldNotify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TActTravelWorldNotify::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TActTravelWorldNotify_descriptor_;
}

const TActTravelWorldNotify& TActTravelWorldNotify::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fActTravelWorld_2eproto();
  return *default_instance_;
}

TActTravelWorldNotify* TActTravelWorldNotify::default_instance_ = NULL;

TActTravelWorldNotify* TActTravelWorldNotify::New() const {
  return new TActTravelWorldNotify;
}

void TActTravelWorldNotify::Clear() {
  dailytaskarr_.Clear();
  achitaskarr_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TActTravelWorldNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TActTravelWorldNotify)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .pb.TActTravelWorldTaskInfo DailyTaskArr = 1;
      case 1: {
        if (tag == 10) {
         parse_DailyTaskArr:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_dailytaskarr()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_DailyTaskArr;
        if (input->ExpectTag(18)) goto parse_AchiTaskArr;
        break;
      }

      // repeated .pb.TActTravelWorldTaskInfo AchiTaskArr = 2;
      case 2: {
        if (tag == 18) {
         parse_AchiTaskArr:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_achitaskarr()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_AchiTaskArr;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TActTravelWorldNotify)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TActTravelWorldNotify)
  return false;
#undef DO_
}

void TActTravelWorldNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TActTravelWorldNotify)
  // repeated .pb.TActTravelWorldTaskInfo DailyTaskArr = 1;
  for (int i = 0; i < this->dailytaskarr_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->dailytaskarr(i), output);
  }

  // repeated .pb.TActTravelWorldTaskInfo AchiTaskArr = 2;
  for (int i = 0; i < this->achitaskarr_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->achitaskarr(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TActTravelWorldNotify)
}

::google::protobuf::uint8* TActTravelWorldNotify::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TActTravelWorldNotify)
  // repeated .pb.TActTravelWorldTaskInfo DailyTaskArr = 1;
  for (int i = 0; i < this->dailytaskarr_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->dailytaskarr(i), target);
  }

  // repeated .pb.TActTravelWorldTaskInfo AchiTaskArr = 2;
  for (int i = 0; i < this->achitaskarr_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->achitaskarr(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TActTravelWorldNotify)
  return target;
}

int TActTravelWorldNotify::ByteSize() const {
  int total_size = 0;

  // repeated .pb.TActTravelWorldTaskInfo DailyTaskArr = 1;
  total_size += 1 * this->dailytaskarr_size();
  for (int i = 0; i < this->dailytaskarr_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->dailytaskarr(i));
  }

  // repeated .pb.TActTravelWorldTaskInfo AchiTaskArr = 2;
  total_size += 1 * this->achitaskarr_size();
  for (int i = 0; i < this->achitaskarr_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->achitaskarr(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TActTravelWorldNotify::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TActTravelWorldNotify* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TActTravelWorldNotify*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TActTravelWorldNotify::MergeFrom(const TActTravelWorldNotify& from) {
  GOOGLE_CHECK_NE(&from, this);
  dailytaskarr_.MergeFrom(from.dailytaskarr_);
  achitaskarr_.MergeFrom(from.achitaskarr_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TActTravelWorldNotify::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TActTravelWorldNotify::CopyFrom(const TActTravelWorldNotify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TActTravelWorldNotify::IsInitialized() const {

  return true;
}

void TActTravelWorldNotify::Swap(TActTravelWorldNotify* other) {
  if (other != this) {
    dailytaskarr_.Swap(&other->dailytaskarr_);
    achitaskarr_.Swap(&other->achitaskarr_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TActTravelWorldNotify::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TActTravelWorldNotify_descriptor_;
  metadata.reflection = TActTravelWorldNotify_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace pb

// @@protoc_insertion_point(global_scope)
