// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: net/BulletComments.proto

#ifndef PROTOBUF_net_2fBulletComments_2eproto__INCLUDED
#define PROTOBUF_net_2fBulletComments_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace pb {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_net_2fBulletComments_2eproto();
void protobuf_AssignDesc_net_2fBulletComments_2eproto();
void protobuf_ShutdownFile_net_2fBulletComments_2eproto();

class TBulletCommentsGetCommentsInfoReq;
class TBulletCommentsGetCommentsInfoRsp;
class TBulletCommentsSendBulletCommentReq;

// ===================================================================

/*FOR2LUA
<Record>
	<name>TBulletCommentsGetCommentsInfoReq</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/BulletComments.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TBulletCommentsGetCommentsInfoReq : public ::google::protobuf::Message {
 public:
  TBulletCommentsGetCommentsInfoReq();
  virtual ~TBulletCommentsGetCommentsInfoReq();

  TBulletCommentsGetCommentsInfoReq(const TBulletCommentsGetCommentsInfoReq& from);

  inline TBulletCommentsGetCommentsInfoReq& operator=(const TBulletCommentsGetCommentsInfoReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TBulletCommentsGetCommentsInfoReq& default_instance();

  void Swap(TBulletCommentsGetCommentsInfoReq* other);

  // implements Message ----------------------------------------------

  TBulletCommentsGetCommentsInfoReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TBulletCommentsGetCommentsInfoReq& from);
  void MergeFrom(const TBulletCommentsGetCommentsInfoReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 SceneTid = 1;
  inline bool has_scenetid() const;
  inline void clear_scenetid();
  static const int kSceneTidFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TBulletCommentsGetCommentsInfoReq</name>
  	<Function>
  		<name>scenetid</name>
  		<replaceName>SceneTid</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_scenetid</name>
  		<replaceName>SceneTid</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_scenetid</name>
  		<replaceName>SceneTid</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 scenetid() const;
  inline void set_scenetid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:pb.TBulletCommentsGetCommentsInfoReq)
 private:
  inline void set_has_scenetid();
  inline void clear_has_scenetid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 scenetid_;
  friend void  protobuf_AddDesc_net_2fBulletComments_2eproto();
  friend void protobuf_AssignDesc_net_2fBulletComments_2eproto();
  friend void protobuf_ShutdownFile_net_2fBulletComments_2eproto();

  void InitAsDefaultInstance();
  static TBulletCommentsGetCommentsInfoReq* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TBulletCommentsGetCommentsInfoRsp</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/BulletComments.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TBulletCommentsGetCommentsInfoRsp : public ::google::protobuf::Message {
 public:
  TBulletCommentsGetCommentsInfoRsp();
  virtual ~TBulletCommentsGetCommentsInfoRsp();

  TBulletCommentsGetCommentsInfoRsp(const TBulletCommentsGetCommentsInfoRsp& from);

  inline TBulletCommentsGetCommentsInfoRsp& operator=(const TBulletCommentsGetCommentsInfoRsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TBulletCommentsGetCommentsInfoRsp& default_instance();

  void Swap(TBulletCommentsGetCommentsInfoRsp* other);

  // implements Message ----------------------------------------------

  TBulletCommentsGetCommentsInfoRsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TBulletCommentsGetCommentsInfoRsp& from);
  void MergeFrom(const TBulletCommentsGetCommentsInfoRsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated string CommentArr = 1;
  inline int commentarr_size() const;
  inline void clear_commentarr();
  static const int kCommentArrFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TBulletCommentsGetCommentsInfoRsp</name>
  	<Function>
  		<name>commentarr</name>
  		<replaceName>CommentArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_commentarr</name>
  		<replaceName>CommentArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_commentarr</name>
  		<replaceName>CommentArr</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_commentarr</name>
  		<replaceName>CommentArr</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>commentarr_size</name>
  		<replaceName>CommentArr</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::std::string& commentarr(int index) const;
  inline ::std::string* mutable_commentarr(int index);
  inline void set_commentarr(int index, const ::std::string& value);
  inline void set_commentarr(int index, const char* value);
  inline void set_commentarr(int index, const char* value, size_t size);
  inline ::std::string* add_commentarr();
  inline void add_commentarr(const ::std::string& value);
  inline void add_commentarr(const char* value);
  inline void add_commentarr(const char* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& commentarr() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_commentarr();

  // optional uint64 LastSendTime = 2;
  inline bool has_lastsendtime() const;
  inline void clear_lastsendtime();
  static const int kLastSendTimeFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TBulletCommentsGetCommentsInfoRsp</name>
  	<Function>
  		<name>lastsendtime</name>
  		<replaceName>LastSendTime</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_lastsendtime</name>
  		<replaceName>LastSendTime</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_lastsendtime</name>
  		<replaceName>LastSendTime</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint64 lastsendtime() const;
  inline void set_lastsendtime(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:pb.TBulletCommentsGetCommentsInfoRsp)
 private:
  inline void set_has_lastsendtime();
  inline void clear_has_lastsendtime();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::std::string> commentarr_;
  ::google::protobuf::uint64 lastsendtime_;
  friend void  protobuf_AddDesc_net_2fBulletComments_2eproto();
  friend void protobuf_AssignDesc_net_2fBulletComments_2eproto();
  friend void protobuf_ShutdownFile_net_2fBulletComments_2eproto();

  void InitAsDefaultInstance();
  static TBulletCommentsGetCommentsInfoRsp* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TBulletCommentsSendBulletCommentReq</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/BulletComments.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TBulletCommentsSendBulletCommentReq : public ::google::protobuf::Message {
 public:
  TBulletCommentsSendBulletCommentReq();
  virtual ~TBulletCommentsSendBulletCommentReq();

  TBulletCommentsSendBulletCommentReq(const TBulletCommentsSendBulletCommentReq& from);

  inline TBulletCommentsSendBulletCommentReq& operator=(const TBulletCommentsSendBulletCommentReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TBulletCommentsSendBulletCommentReq& default_instance();

  void Swap(TBulletCommentsSendBulletCommentReq* other);

  // implements Message ----------------------------------------------

  TBulletCommentsSendBulletCommentReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TBulletCommentsSendBulletCommentReq& from);
  void MergeFrom(const TBulletCommentsSendBulletCommentReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 SceneTid = 1;
  inline bool has_scenetid() const;
  inline void clear_scenetid();
  static const int kSceneTidFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TBulletCommentsSendBulletCommentReq</name>
  	<Function>
  		<name>scenetid</name>
  		<replaceName>SceneTid</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_scenetid</name>
  		<replaceName>SceneTid</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_scenetid</name>
  		<replaceName>SceneTid</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 scenetid() const;
  inline void set_scenetid(::google::protobuf::uint32 value);

  // optional uint64 Uid = 2;
  inline bool has_uid() const;
  inline void clear_uid();
  static const int kUidFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TBulletCommentsSendBulletCommentReq</name>
  	<Function>
  		<name>uid</name>
  		<replaceName>Uid</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_uid</name>
  		<replaceName>Uid</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_uid</name>
  		<replaceName>Uid</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint64 uid() const;
  inline void set_uid(::google::protobuf::uint64 value);

  // optional string Comment = 3;
  inline bool has_comment() const;
  inline void clear_comment();
  static const int kCommentFieldNumber = 3;
  /*FOR2LUA
  <Record>
  	<name>TBulletCommentsSendBulletCommentReq</name>
  	<Function>
  		<name>comment</name>
  		<replaceName>Comment</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_comment</name>
  		<replaceName>Comment</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_comment</name>
  		<replaceName>Comment</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::std::string& comment() const;
  inline void set_comment(const ::std::string& value);
  inline void set_comment(const char* value);
  inline void set_comment(const char* value, size_t size);
  inline ::std::string* mutable_comment();
  inline ::std::string* release_comment();
  inline void set_allocated_comment(::std::string* comment);

  // optional string Xpid = 4;
  inline bool has_xpid() const;
  inline void clear_xpid();
  static const int kXpidFieldNumber = 4;
  /*FOR2LUA
  <Record>
  	<name>TBulletCommentsSendBulletCommentReq</name>
  	<Function>
  		<name>xpid</name>
  		<replaceName>Xpid</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_xpid</name>
  		<replaceName>Xpid</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_xpid</name>
  		<replaceName>Xpid</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::std::string& xpid() const;
  inline void set_xpid(const ::std::string& value);
  inline void set_xpid(const char* value);
  inline void set_xpid(const char* value, size_t size);
  inline ::std::string* mutable_xpid();
  inline ::std::string* release_xpid();
  inline void set_allocated_xpid(::std::string* xpid);

  // @@protoc_insertion_point(class_scope:pb.TBulletCommentsSendBulletCommentReq)
 private:
  inline void set_has_scenetid();
  inline void clear_has_scenetid();
  inline void set_has_uid();
  inline void clear_has_uid();
  inline void set_has_comment();
  inline void clear_has_comment();
  inline void set_has_xpid();
  inline void clear_has_xpid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint64 uid_;
  ::std::string* comment_;
  ::std::string* xpid_;
  ::google::protobuf::uint32 scenetid_;
  friend void  protobuf_AddDesc_net_2fBulletComments_2eproto();
  friend void protobuf_AssignDesc_net_2fBulletComments_2eproto();
  friend void protobuf_ShutdownFile_net_2fBulletComments_2eproto();

  void InitAsDefaultInstance();
  static TBulletCommentsSendBulletCommentReq* default_instance_;
};
// ===================================================================


// ===================================================================

// TBulletCommentsGetCommentsInfoReq

// optional uint32 SceneTid = 1;
inline bool TBulletCommentsGetCommentsInfoReq::has_scenetid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TBulletCommentsGetCommentsInfoReq::set_has_scenetid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TBulletCommentsGetCommentsInfoReq::clear_has_scenetid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TBulletCommentsGetCommentsInfoReq::clear_scenetid() {
  scenetid_ = 0u;
  clear_has_scenetid();
}
inline ::google::protobuf::uint32 TBulletCommentsGetCommentsInfoReq::scenetid() const {
  // @@protoc_insertion_point(field_get:pb.TBulletCommentsGetCommentsInfoReq.SceneTid)
  return scenetid_;
}
inline void TBulletCommentsGetCommentsInfoReq::set_scenetid(::google::protobuf::uint32 value) {
  set_has_scenetid();
  scenetid_ = value;
  // @@protoc_insertion_point(field_set:pb.TBulletCommentsGetCommentsInfoReq.SceneTid)
}

// -------------------------------------------------------------------

// TBulletCommentsGetCommentsInfoRsp

// repeated string CommentArr = 1;
inline int TBulletCommentsGetCommentsInfoRsp::commentarr_size() const {
  return commentarr_.size();
}
inline void TBulletCommentsGetCommentsInfoRsp::clear_commentarr() {
  commentarr_.Clear();
}
inline const ::std::string& TBulletCommentsGetCommentsInfoRsp::commentarr(int index) const {
  // @@protoc_insertion_point(field_get:pb.TBulletCommentsGetCommentsInfoRsp.CommentArr)
  return commentarr_.Get(index);
}
inline ::std::string* TBulletCommentsGetCommentsInfoRsp::mutable_commentarr(int index) {
  // @@protoc_insertion_point(field_mutable:pb.TBulletCommentsGetCommentsInfoRsp.CommentArr)
  return commentarr_.Mutable(index);
}
inline void TBulletCommentsGetCommentsInfoRsp::set_commentarr(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:pb.TBulletCommentsGetCommentsInfoRsp.CommentArr)
  commentarr_.Mutable(index)->assign(value);
}
inline void TBulletCommentsGetCommentsInfoRsp::set_commentarr(int index, const char* value) {
  commentarr_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:pb.TBulletCommentsGetCommentsInfoRsp.CommentArr)
}
inline void TBulletCommentsGetCommentsInfoRsp::set_commentarr(int index, const char* value, size_t size) {
  commentarr_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:pb.TBulletCommentsGetCommentsInfoRsp.CommentArr)
}
inline ::std::string* TBulletCommentsGetCommentsInfoRsp::add_commentarr() {
  return commentarr_.Add();
}
inline void TBulletCommentsGetCommentsInfoRsp::add_commentarr(const ::std::string& value) {
  commentarr_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:pb.TBulletCommentsGetCommentsInfoRsp.CommentArr)
}
inline void TBulletCommentsGetCommentsInfoRsp::add_commentarr(const char* value) {
  commentarr_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:pb.TBulletCommentsGetCommentsInfoRsp.CommentArr)
}
inline void TBulletCommentsGetCommentsInfoRsp::add_commentarr(const char* value, size_t size) {
  commentarr_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:pb.TBulletCommentsGetCommentsInfoRsp.CommentArr)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
TBulletCommentsGetCommentsInfoRsp::commentarr() const {
  // @@protoc_insertion_point(field_list:pb.TBulletCommentsGetCommentsInfoRsp.CommentArr)
  return commentarr_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
TBulletCommentsGetCommentsInfoRsp::mutable_commentarr() {
  // @@protoc_insertion_point(field_mutable_list:pb.TBulletCommentsGetCommentsInfoRsp.CommentArr)
  return &commentarr_;
}

// optional uint64 LastSendTime = 2;
inline bool TBulletCommentsGetCommentsInfoRsp::has_lastsendtime() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TBulletCommentsGetCommentsInfoRsp::set_has_lastsendtime() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TBulletCommentsGetCommentsInfoRsp::clear_has_lastsendtime() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TBulletCommentsGetCommentsInfoRsp::clear_lastsendtime() {
  lastsendtime_ = GOOGLE_ULONGLONG(0);
  clear_has_lastsendtime();
}
inline ::google::protobuf::uint64 TBulletCommentsGetCommentsInfoRsp::lastsendtime() const {
  // @@protoc_insertion_point(field_get:pb.TBulletCommentsGetCommentsInfoRsp.LastSendTime)
  return lastsendtime_;
}
inline void TBulletCommentsGetCommentsInfoRsp::set_lastsendtime(::google::protobuf::uint64 value) {
  set_has_lastsendtime();
  lastsendtime_ = value;
  // @@protoc_insertion_point(field_set:pb.TBulletCommentsGetCommentsInfoRsp.LastSendTime)
}

// -------------------------------------------------------------------

// TBulletCommentsSendBulletCommentReq

// optional uint32 SceneTid = 1;
inline bool TBulletCommentsSendBulletCommentReq::has_scenetid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TBulletCommentsSendBulletCommentReq::set_has_scenetid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TBulletCommentsSendBulletCommentReq::clear_has_scenetid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TBulletCommentsSendBulletCommentReq::clear_scenetid() {
  scenetid_ = 0u;
  clear_has_scenetid();
}
inline ::google::protobuf::uint32 TBulletCommentsSendBulletCommentReq::scenetid() const {
  // @@protoc_insertion_point(field_get:pb.TBulletCommentsSendBulletCommentReq.SceneTid)
  return scenetid_;
}
inline void TBulletCommentsSendBulletCommentReq::set_scenetid(::google::protobuf::uint32 value) {
  set_has_scenetid();
  scenetid_ = value;
  // @@protoc_insertion_point(field_set:pb.TBulletCommentsSendBulletCommentReq.SceneTid)
}

// optional uint64 Uid = 2;
inline bool TBulletCommentsSendBulletCommentReq::has_uid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TBulletCommentsSendBulletCommentReq::set_has_uid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TBulletCommentsSendBulletCommentReq::clear_has_uid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TBulletCommentsSendBulletCommentReq::clear_uid() {
  uid_ = GOOGLE_ULONGLONG(0);
  clear_has_uid();
}
inline ::google::protobuf::uint64 TBulletCommentsSendBulletCommentReq::uid() const {
  // @@protoc_insertion_point(field_get:pb.TBulletCommentsSendBulletCommentReq.Uid)
  return uid_;
}
inline void TBulletCommentsSendBulletCommentReq::set_uid(::google::protobuf::uint64 value) {
  set_has_uid();
  uid_ = value;
  // @@protoc_insertion_point(field_set:pb.TBulletCommentsSendBulletCommentReq.Uid)
}

// optional string Comment = 3;
inline bool TBulletCommentsSendBulletCommentReq::has_comment() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void TBulletCommentsSendBulletCommentReq::set_has_comment() {
  _has_bits_[0] |= 0x00000004u;
}
inline void TBulletCommentsSendBulletCommentReq::clear_has_comment() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void TBulletCommentsSendBulletCommentReq::clear_comment() {
  if (comment_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    comment_->clear();
  }
  clear_has_comment();
}
inline const ::std::string& TBulletCommentsSendBulletCommentReq::comment() const {
  // @@protoc_insertion_point(field_get:pb.TBulletCommentsSendBulletCommentReq.Comment)
  return *comment_;
}
inline void TBulletCommentsSendBulletCommentReq::set_comment(const ::std::string& value) {
  set_has_comment();
  if (comment_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    comment_ = new ::std::string;
  }
  comment_->assign(value);
  // @@protoc_insertion_point(field_set:pb.TBulletCommentsSendBulletCommentReq.Comment)
}
inline void TBulletCommentsSendBulletCommentReq::set_comment(const char* value) {
  set_has_comment();
  if (comment_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    comment_ = new ::std::string;
  }
  comment_->assign(value);
  // @@protoc_insertion_point(field_set_char:pb.TBulletCommentsSendBulletCommentReq.Comment)
}
inline void TBulletCommentsSendBulletCommentReq::set_comment(const char* value, size_t size) {
  set_has_comment();
  if (comment_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    comment_ = new ::std::string;
  }
  comment_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:pb.TBulletCommentsSendBulletCommentReq.Comment)
}
inline ::std::string* TBulletCommentsSendBulletCommentReq::mutable_comment() {
  set_has_comment();
  if (comment_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    comment_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:pb.TBulletCommentsSendBulletCommentReq.Comment)
  return comment_;
}
inline ::std::string* TBulletCommentsSendBulletCommentReq::release_comment() {
  clear_has_comment();
  if (comment_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = comment_;
    comment_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void TBulletCommentsSendBulletCommentReq::set_allocated_comment(::std::string* comment) {
  if (comment_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete comment_;
  }
  if (comment) {
    set_has_comment();
    comment_ = comment;
  } else {
    clear_has_comment();
    comment_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:pb.TBulletCommentsSendBulletCommentReq.Comment)
}

// optional string Xpid = 4;
inline bool TBulletCommentsSendBulletCommentReq::has_xpid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void TBulletCommentsSendBulletCommentReq::set_has_xpid() {
  _has_bits_[0] |= 0x00000008u;
}
inline void TBulletCommentsSendBulletCommentReq::clear_has_xpid() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void TBulletCommentsSendBulletCommentReq::clear_xpid() {
  if (xpid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    xpid_->clear();
  }
  clear_has_xpid();
}
inline const ::std::string& TBulletCommentsSendBulletCommentReq::xpid() const {
  // @@protoc_insertion_point(field_get:pb.TBulletCommentsSendBulletCommentReq.Xpid)
  return *xpid_;
}
inline void TBulletCommentsSendBulletCommentReq::set_xpid(const ::std::string& value) {
  set_has_xpid();
  if (xpid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    xpid_ = new ::std::string;
  }
  xpid_->assign(value);
  // @@protoc_insertion_point(field_set:pb.TBulletCommentsSendBulletCommentReq.Xpid)
}
inline void TBulletCommentsSendBulletCommentReq::set_xpid(const char* value) {
  set_has_xpid();
  if (xpid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    xpid_ = new ::std::string;
  }
  xpid_->assign(value);
  // @@protoc_insertion_point(field_set_char:pb.TBulletCommentsSendBulletCommentReq.Xpid)
}
inline void TBulletCommentsSendBulletCommentReq::set_xpid(const char* value, size_t size) {
  set_has_xpid();
  if (xpid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    xpid_ = new ::std::string;
  }
  xpid_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:pb.TBulletCommentsSendBulletCommentReq.Xpid)
}
inline ::std::string* TBulletCommentsSendBulletCommentReq::mutable_xpid() {
  set_has_xpid();
  if (xpid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    xpid_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:pb.TBulletCommentsSendBulletCommentReq.Xpid)
  return xpid_;
}
inline ::std::string* TBulletCommentsSendBulletCommentReq::release_xpid() {
  clear_has_xpid();
  if (xpid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = xpid_;
    xpid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void TBulletCommentsSendBulletCommentReq::set_allocated_xpid(::std::string* xpid) {
  if (xpid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete xpid_;
  }
  if (xpid) {
    set_has_xpid();
    xpid_ = xpid;
  } else {
    clear_has_xpid();
    xpid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:pb.TBulletCommentsSendBulletCommentReq.Xpid)
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace pb

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_net_2fBulletComments_2eproto__INCLUDED
