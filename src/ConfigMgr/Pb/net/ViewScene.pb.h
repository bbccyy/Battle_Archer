// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: net/ViewScene.proto

#ifndef PROTOBUF_net_2fViewScene_2eproto__INCLUDED
#define PROTOBUF_net_2fViewScene_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "net/User.pb.h"
// @@protoc_insertion_point(includes)

namespace pb {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_net_2fViewScene_2eproto();
void protobuf_AssignDesc_net_2fViewScene_2eproto();
void protobuf_ShutdownFile_net_2fViewScene_2eproto();

class TViewSceneUserInfo;
class TViewSceneEnterReq;
class TViewSceneEnterRsp;
class TViewSceneMoveReq;
class TViewSceneChangeStatusReq;
class TViewSceneUserInfoChangeNotify;
class TViewSceneCrossBaseInfoData;
class TViewSceneCrossUserInfo;
class TViewSceneEnterCrossReq;
class TViewSceneEnterCrossRsp;
class TViewSceneMoveCrossReq;
class TViewSceneChangeStatusCrossReq;

enum EViewSceneUserStatus {
  IDLE = 0,
  FIGHTING = 1
};
bool EViewSceneUserStatus_IsValid(int value);
const EViewSceneUserStatus EViewSceneUserStatus_MIN = IDLE;
const EViewSceneUserStatus EViewSceneUserStatus_MAX = FIGHTING;
const int EViewSceneUserStatus_ARRAYSIZE = EViewSceneUserStatus_MAX + 1;

const ::google::protobuf::EnumDescriptor* EViewSceneUserStatus_descriptor();
inline const ::std::string& EViewSceneUserStatus_Name(EViewSceneUserStatus value) {
  return ::google::protobuf::internal::NameOfEnum(
    EViewSceneUserStatus_descriptor(), value);
}
inline bool EViewSceneUserStatus_Parse(
    const ::std::string& name, EViewSceneUserStatus* value) {
  return ::google::protobuf::internal::ParseNamedEnum<EViewSceneUserStatus>(
    EViewSceneUserStatus_descriptor(), name, value);
}
enum EViewSceneType {
  SCENE_INSTANCE = 1,
  SCENE_GUILD = 2,
  SCENE_ADVENTURE = 3,
  SCENE_WORLDBOSS = 4,
  SCENE_CROSS_WORLDBOSS = 5,
  SCENE_CROSS_LEVY = 6,
  SCENE_CROSS_ALLIANCE = 7,
  SCENE_CROSS_BIGHUNT = 8,
  SCENE_CROSS_UNIONPARTY = 9,
  SCENE_CROSS_BOSS = 10
};
bool EViewSceneType_IsValid(int value);
const EViewSceneType EViewSceneType_MIN = SCENE_INSTANCE;
const EViewSceneType EViewSceneType_MAX = SCENE_CROSS_BOSS;
const int EViewSceneType_ARRAYSIZE = EViewSceneType_MAX + 1;

const ::google::protobuf::EnumDescriptor* EViewSceneType_descriptor();
inline const ::std::string& EViewSceneType_Name(EViewSceneType value) {
  return ::google::protobuf::internal::NameOfEnum(
    EViewSceneType_descriptor(), value);
}
inline bool EViewSceneType_Parse(
    const ::std::string& name, EViewSceneType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<EViewSceneType>(
    EViewSceneType_descriptor(), name, value);
}
enum EViewSceneUserType {
  USER_TYPE_RAND = 1,
  USER_TYPE_FRIEND = 2,
  USER_TYPE_GUILD = 3
};
bool EViewSceneUserType_IsValid(int value);
const EViewSceneUserType EViewSceneUserType_MIN = USER_TYPE_RAND;
const EViewSceneUserType EViewSceneUserType_MAX = USER_TYPE_GUILD;
const int EViewSceneUserType_ARRAYSIZE = EViewSceneUserType_MAX + 1;

const ::google::protobuf::EnumDescriptor* EViewSceneUserType_descriptor();
inline const ::std::string& EViewSceneUserType_Name(EViewSceneUserType value) {
  return ::google::protobuf::internal::NameOfEnum(
    EViewSceneUserType_descriptor(), value);
}
inline bool EViewSceneUserType_Parse(
    const ::std::string& name, EViewSceneUserType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<EViewSceneUserType>(
    EViewSceneUserType_descriptor(), name, value);
}
// ===================================================================

/*FOR2LUA
<Record>
	<name>TViewSceneUserInfo</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/ViewScene.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TViewSceneUserInfo : public ::google::protobuf::Message {
 public:
  TViewSceneUserInfo();
  virtual ~TViewSceneUserInfo();

  TViewSceneUserInfo(const TViewSceneUserInfo& from);

  inline TViewSceneUserInfo& operator=(const TViewSceneUserInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TViewSceneUserInfo& default_instance();

  void Swap(TViewSceneUserInfo* other);

  // implements Message ----------------------------------------------

  TViewSceneUserInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TViewSceneUserInfo& from);
  void MergeFrom(const TViewSceneUserInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint64 uid = 1;
  inline bool has_uid() const;
  inline void clear_uid();
  static const int kUidFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TViewSceneUserInfo</name>
  	<Function>
  		<name>uid</name>
  		<replaceName>uid</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_uid</name>
  		<replaceName>uid</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_uid</name>
  		<replaceName>uid</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint64 uid() const;
  inline void set_uid(::google::protobuf::uint64 value);

  // optional uint32 Pos = 2;
  inline bool has_pos() const;
  inline void clear_pos();
  static const int kPosFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TViewSceneUserInfo</name>
  	<Function>
  		<name>pos</name>
  		<replaceName>Pos</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_pos</name>
  		<replaceName>Pos</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_pos</name>
  		<replaceName>Pos</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 pos() const;
  inline void set_pos(::google::protobuf::uint32 value);

  // optional .pb.EViewSceneUserStatus Status = 3;
  inline bool has_status() const;
  inline void clear_status();
  static const int kStatusFieldNumber = 3;
  /*FOR2LUA
  <Record>
  	<name>TViewSceneUserInfo</name>
  	<Function>
  		<name>status</name>
  		<replaceName>Status</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_status</name>
  		<replaceName>Status</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_status</name>
  		<replaceName>Status</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::pb::EViewSceneUserStatus status() const;
  inline void set_status(::pb::EViewSceneUserStatus value);

  // optional .pb.EViewSceneUserType UserType = 4;
  inline bool has_usertype() const;
  inline void clear_usertype();
  static const int kUserTypeFieldNumber = 4;
  /*FOR2LUA
  <Record>
  	<name>TViewSceneUserInfo</name>
  	<Function>
  		<name>usertype</name>
  		<replaceName>UserType</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_usertype</name>
  		<replaceName>UserType</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_usertype</name>
  		<replaceName>UserType</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::pb::EViewSceneUserType usertype() const;
  inline void set_usertype(::pb::EViewSceneUserType value);

  // optional .pb.TUserSimpleInfo UserSimpleInfo = 5;
  inline bool has_usersimpleinfo() const;
  inline void clear_usersimpleinfo();
  static const int kUserSimpleInfoFieldNumber = 5;
  /*FOR2LUA
  <Record>
  	<name>TViewSceneUserInfo</name>
  	<Function>
  		<name>usersimpleinfo</name>
  		<replaceName>UserSimpleInfo</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_usersimpleinfo</name>
  		<replaceName>UserSimpleInfo</replaceName>
  		<handler>descripter = pb_set_message_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_allocated_usersimpleinfo</name>
  		<replaceName>UserSimpleInfo</replaceName>
  		<handler>descripter = pb_set_message_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_usersimpleinfo</name>
  		<replaceName>UserSimpleInfo</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TUserSimpleInfo& usersimpleinfo() const;
  inline ::pb::TUserSimpleInfo* mutable_usersimpleinfo();
  inline ::pb::TUserSimpleInfo* release_usersimpleinfo();
  inline void set_allocated_usersimpleinfo(::pb::TUserSimpleInfo* usersimpleinfo);

  // optional uint32 IsLeaving = 6;
  inline bool has_isleaving() const;
  inline void clear_isleaving();
  static const int kIsLeavingFieldNumber = 6;
  /*FOR2LUA
  <Record>
  	<name>TViewSceneUserInfo</name>
  	<Function>
  		<name>isleaving</name>
  		<replaceName>IsLeaving</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_isleaving</name>
  		<replaceName>IsLeaving</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_isleaving</name>
  		<replaceName>IsLeaving</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 isleaving() const;
  inline void set_isleaving(::google::protobuf::uint32 value);

  // optional int32 ArenaPosition = 7;
  inline bool has_arenaposition() const;
  inline void clear_arenaposition();
  static const int kArenaPositionFieldNumber = 7;
  /*FOR2LUA
  <Record>
  	<name>TViewSceneUserInfo</name>
  	<Function>
  		<name>arenaposition</name>
  		<replaceName>ArenaPosition</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_arenaposition</name>
  		<replaceName>ArenaPosition</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_arenaposition</name>
  		<replaceName>ArenaPosition</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::int32 arenaposition() const;
  inline void set_arenaposition(::google::protobuf::int32 value);

  // optional int32 HighorderRankPosition = 8;
  inline bool has_highorderrankposition() const;
  inline void clear_highorderrankposition();
  static const int kHighorderRankPositionFieldNumber = 8;
  /*FOR2LUA
  <Record>
  	<name>TViewSceneUserInfo</name>
  	<Function>
  		<name>highorderrankposition</name>
  		<replaceName>HighorderRankPosition</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_highorderrankposition</name>
  		<replaceName>HighorderRankPosition</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_highorderrankposition</name>
  		<replaceName>HighorderRankPosition</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::int32 highorderrankposition() const;
  inline void set_highorderrankposition(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:pb.TViewSceneUserInfo)
 private:
  inline void set_has_uid();
  inline void clear_has_uid();
  inline void set_has_pos();
  inline void clear_has_pos();
  inline void set_has_status();
  inline void clear_has_status();
  inline void set_has_usertype();
  inline void clear_has_usertype();
  inline void set_has_usersimpleinfo();
  inline void clear_has_usersimpleinfo();
  inline void set_has_isleaving();
  inline void clear_has_isleaving();
  inline void set_has_arenaposition();
  inline void clear_has_arenaposition();
  inline void set_has_highorderrankposition();
  inline void clear_has_highorderrankposition();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint64 uid_;
  ::google::protobuf::uint32 pos_;
  int status_;
  ::pb::TUserSimpleInfo* usersimpleinfo_;
  int usertype_;
  ::google::protobuf::uint32 isleaving_;
  ::google::protobuf::int32 arenaposition_;
  ::google::protobuf::int32 highorderrankposition_;
  friend void  protobuf_AddDesc_net_2fViewScene_2eproto();
  friend void protobuf_AssignDesc_net_2fViewScene_2eproto();
  friend void protobuf_ShutdownFile_net_2fViewScene_2eproto();

  void InitAsDefaultInstance();
  static TViewSceneUserInfo* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TViewSceneEnterReq</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/ViewScene.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TViewSceneEnterReq : public ::google::protobuf::Message {
 public:
  TViewSceneEnterReq();
  virtual ~TViewSceneEnterReq();

  TViewSceneEnterReq(const TViewSceneEnterReq& from);

  inline TViewSceneEnterReq& operator=(const TViewSceneEnterReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TViewSceneEnterReq& default_instance();

  void Swap(TViewSceneEnterReq* other);

  // implements Message ----------------------------------------------

  TViewSceneEnterReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TViewSceneEnterReq& from);
  void MergeFrom(const TViewSceneEnterReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .pb.EViewSceneType ViewSceneType = 1;
  inline bool has_viewscenetype() const;
  inline void clear_viewscenetype();
  static const int kViewSceneTypeFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TViewSceneEnterReq</name>
  	<Function>
  		<name>viewscenetype</name>
  		<replaceName>ViewSceneType</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_viewscenetype</name>
  		<replaceName>ViewSceneType</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_viewscenetype</name>
  		<replaceName>ViewSceneType</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::pb::EViewSceneType viewscenetype() const;
  inline void set_viewscenetype(::pb::EViewSceneType value);

  // optional uint64 ViewSceneId = 2;
  inline bool has_viewsceneid() const;
  inline void clear_viewsceneid();
  static const int kViewSceneIdFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TViewSceneEnterReq</name>
  	<Function>
  		<name>viewsceneid</name>
  		<replaceName>ViewSceneId</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_viewsceneid</name>
  		<replaceName>ViewSceneId</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_viewsceneid</name>
  		<replaceName>ViewSceneId</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint64 viewsceneid() const;
  inline void set_viewsceneid(::google::protobuf::uint64 value);

  // optional uint32 Pos = 3;
  inline bool has_pos() const;
  inline void clear_pos();
  static const int kPosFieldNumber = 3;
  /*FOR2LUA
  <Record>
  	<name>TViewSceneEnterReq</name>
  	<Function>
  		<name>pos</name>
  		<replaceName>Pos</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_pos</name>
  		<replaceName>Pos</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_pos</name>
  		<replaceName>Pos</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 pos() const;
  inline void set_pos(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:pb.TViewSceneEnterReq)
 private:
  inline void set_has_viewscenetype();
  inline void clear_has_viewscenetype();
  inline void set_has_viewsceneid();
  inline void clear_has_viewsceneid();
  inline void set_has_pos();
  inline void clear_has_pos();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint64 viewsceneid_;
  int viewscenetype_;
  ::google::protobuf::uint32 pos_;
  friend void  protobuf_AddDesc_net_2fViewScene_2eproto();
  friend void protobuf_AssignDesc_net_2fViewScene_2eproto();
  friend void protobuf_ShutdownFile_net_2fViewScene_2eproto();

  void InitAsDefaultInstance();
  static TViewSceneEnterReq* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TViewSceneEnterRsp</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/ViewScene.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TViewSceneEnterRsp : public ::google::protobuf::Message {
 public:
  TViewSceneEnterRsp();
  virtual ~TViewSceneEnterRsp();

  TViewSceneEnterRsp(const TViewSceneEnterRsp& from);

  inline TViewSceneEnterRsp& operator=(const TViewSceneEnterRsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TViewSceneEnterRsp& default_instance();

  void Swap(TViewSceneEnterRsp* other);

  // implements Message ----------------------------------------------

  TViewSceneEnterRsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TViewSceneEnterRsp& from);
  void MergeFrom(const TViewSceneEnterRsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .pb.TViewSceneUserInfo ArrUserInfo = 1;
  inline int arruserinfo_size() const;
  inline void clear_arruserinfo();
  static const int kArrUserInfoFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TViewSceneEnterRsp</name>
  	<Function>
  		<name>arruserinfo</name>
  		<replaceName>ArrUserInfo</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_arruserinfo</name>
  		<replaceName>ArrUserInfo</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_arruserinfo</name>
  		<replaceName>ArrUserInfo</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_arruserinfo</name>
  		<replaceName>ArrUserInfo</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>arruserinfo_size</name>
  		<replaceName>ArrUserInfo</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TViewSceneUserInfo& arruserinfo(int index) const;
  inline ::pb::TViewSceneUserInfo* mutable_arruserinfo(int index);
  inline ::pb::TViewSceneUserInfo* add_arruserinfo();
  inline const ::google::protobuf::RepeatedPtrField< ::pb::TViewSceneUserInfo >&
      arruserinfo() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb::TViewSceneUserInfo >*
      mutable_arruserinfo();

  // @@protoc_insertion_point(class_scope:pb.TViewSceneEnterRsp)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::pb::TViewSceneUserInfo > arruserinfo_;
  friend void  protobuf_AddDesc_net_2fViewScene_2eproto();
  friend void protobuf_AssignDesc_net_2fViewScene_2eproto();
  friend void protobuf_ShutdownFile_net_2fViewScene_2eproto();

  void InitAsDefaultInstance();
  static TViewSceneEnterRsp* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TViewSceneMoveReq</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/ViewScene.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TViewSceneMoveReq : public ::google::protobuf::Message {
 public:
  TViewSceneMoveReq();
  virtual ~TViewSceneMoveReq();

  TViewSceneMoveReq(const TViewSceneMoveReq& from);

  inline TViewSceneMoveReq& operator=(const TViewSceneMoveReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TViewSceneMoveReq& default_instance();

  void Swap(TViewSceneMoveReq* other);

  // implements Message ----------------------------------------------

  TViewSceneMoveReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TViewSceneMoveReq& from);
  void MergeFrom(const TViewSceneMoveReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 Pos = 1;
  inline bool has_pos() const;
  inline void clear_pos();
  static const int kPosFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TViewSceneMoveReq</name>
  	<Function>
  		<name>pos</name>
  		<replaceName>Pos</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_pos</name>
  		<replaceName>Pos</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_pos</name>
  		<replaceName>Pos</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 pos() const;
  inline void set_pos(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:pb.TViewSceneMoveReq)
 private:
  inline void set_has_pos();
  inline void clear_has_pos();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 pos_;
  friend void  protobuf_AddDesc_net_2fViewScene_2eproto();
  friend void protobuf_AssignDesc_net_2fViewScene_2eproto();
  friend void protobuf_ShutdownFile_net_2fViewScene_2eproto();

  void InitAsDefaultInstance();
  static TViewSceneMoveReq* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TViewSceneChangeStatusReq</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/ViewScene.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TViewSceneChangeStatusReq : public ::google::protobuf::Message {
 public:
  TViewSceneChangeStatusReq();
  virtual ~TViewSceneChangeStatusReq();

  TViewSceneChangeStatusReq(const TViewSceneChangeStatusReq& from);

  inline TViewSceneChangeStatusReq& operator=(const TViewSceneChangeStatusReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TViewSceneChangeStatusReq& default_instance();

  void Swap(TViewSceneChangeStatusReq* other);

  // implements Message ----------------------------------------------

  TViewSceneChangeStatusReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TViewSceneChangeStatusReq& from);
  void MergeFrom(const TViewSceneChangeStatusReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .pb.EViewSceneUserStatus Status = 1;
  inline bool has_status() const;
  inline void clear_status();
  static const int kStatusFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TViewSceneChangeStatusReq</name>
  	<Function>
  		<name>status</name>
  		<replaceName>Status</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_status</name>
  		<replaceName>Status</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_status</name>
  		<replaceName>Status</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::pb::EViewSceneUserStatus status() const;
  inline void set_status(::pb::EViewSceneUserStatus value);

  // @@protoc_insertion_point(class_scope:pb.TViewSceneChangeStatusReq)
 private:
  inline void set_has_status();
  inline void clear_has_status();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  int status_;
  friend void  protobuf_AddDesc_net_2fViewScene_2eproto();
  friend void protobuf_AssignDesc_net_2fViewScene_2eproto();
  friend void protobuf_ShutdownFile_net_2fViewScene_2eproto();

  void InitAsDefaultInstance();
  static TViewSceneChangeStatusReq* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TViewSceneUserInfoChangeNotify</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/ViewScene.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TViewSceneUserInfoChangeNotify : public ::google::protobuf::Message {
 public:
  TViewSceneUserInfoChangeNotify();
  virtual ~TViewSceneUserInfoChangeNotify();

  TViewSceneUserInfoChangeNotify(const TViewSceneUserInfoChangeNotify& from);

  inline TViewSceneUserInfoChangeNotify& operator=(const TViewSceneUserInfoChangeNotify& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TViewSceneUserInfoChangeNotify& default_instance();

  void Swap(TViewSceneUserInfoChangeNotify* other);

  // implements Message ----------------------------------------------

  TViewSceneUserInfoChangeNotify* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TViewSceneUserInfoChangeNotify& from);
  void MergeFrom(const TViewSceneUserInfoChangeNotify& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .pb.EViewSceneType ViewSceneType = 1;
  inline bool has_viewscenetype() const;
  inline void clear_viewscenetype();
  static const int kViewSceneTypeFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TViewSceneUserInfoChangeNotify</name>
  	<Function>
  		<name>viewscenetype</name>
  		<replaceName>ViewSceneType</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_viewscenetype</name>
  		<replaceName>ViewSceneType</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_viewscenetype</name>
  		<replaceName>ViewSceneType</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::pb::EViewSceneType viewscenetype() const;
  inline void set_viewscenetype(::pb::EViewSceneType value);

  // optional uint64 ViewSceneId = 2;
  inline bool has_viewsceneid() const;
  inline void clear_viewsceneid();
  static const int kViewSceneIdFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TViewSceneUserInfoChangeNotify</name>
  	<Function>
  		<name>viewsceneid</name>
  		<replaceName>ViewSceneId</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_viewsceneid</name>
  		<replaceName>ViewSceneId</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_viewsceneid</name>
  		<replaceName>ViewSceneId</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint64 viewsceneid() const;
  inline void set_viewsceneid(::google::protobuf::uint64 value);

  // repeated .pb.TViewSceneUserInfo ArrUserInfo = 3;
  inline int arruserinfo_size() const;
  inline void clear_arruserinfo();
  static const int kArrUserInfoFieldNumber = 3;
  /*FOR2LUA
  <Record>
  	<name>TViewSceneUserInfoChangeNotify</name>
  	<Function>
  		<name>arruserinfo</name>
  		<replaceName>ArrUserInfo</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_arruserinfo</name>
  		<replaceName>ArrUserInfo</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_arruserinfo</name>
  		<replaceName>ArrUserInfo</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_arruserinfo</name>
  		<replaceName>ArrUserInfo</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>arruserinfo_size</name>
  		<replaceName>ArrUserInfo</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TViewSceneUserInfo& arruserinfo(int index) const;
  inline ::pb::TViewSceneUserInfo* mutable_arruserinfo(int index);
  inline ::pb::TViewSceneUserInfo* add_arruserinfo();
  inline const ::google::protobuf::RepeatedPtrField< ::pb::TViewSceneUserInfo >&
      arruserinfo() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb::TViewSceneUserInfo >*
      mutable_arruserinfo();

  // repeated uint64 ArrLogoffUid = 4;
  inline int arrlogoffuid_size() const;
  inline void clear_arrlogoffuid();
  static const int kArrLogoffUidFieldNumber = 4;
  /*FOR2LUA
  <Record>
  	<name>TViewSceneUserInfoChangeNotify</name>
  	<Function>
  		<name>arrlogoffuid</name>
  		<replaceName>ArrLogoffUid</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_arrlogoffuid</name>
  		<replaceName>ArrLogoffUid</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_arrlogoffuid</name>
  		<replaceName>ArrLogoffUid</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_arrlogoffuid</name>
  		<replaceName>ArrLogoffUid</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>arrlogoffuid_size</name>
  		<replaceName>ArrLogoffUid</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint64 arrlogoffuid(int index) const;
  inline void set_arrlogoffuid(int index, ::google::protobuf::uint64 value);
  inline void add_arrlogoffuid(::google::protobuf::uint64 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
      arrlogoffuid() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
      mutable_arrlogoffuid();

  // @@protoc_insertion_point(class_scope:pb.TViewSceneUserInfoChangeNotify)
 private:
  inline void set_has_viewscenetype();
  inline void clear_has_viewscenetype();
  inline void set_has_viewsceneid();
  inline void clear_has_viewsceneid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint64 viewsceneid_;
  ::google::protobuf::RepeatedPtrField< ::pb::TViewSceneUserInfo > arruserinfo_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint64 > arrlogoffuid_;
  int viewscenetype_;
  friend void  protobuf_AddDesc_net_2fViewScene_2eproto();
  friend void protobuf_AssignDesc_net_2fViewScene_2eproto();
  friend void protobuf_ShutdownFile_net_2fViewScene_2eproto();

  void InitAsDefaultInstance();
  static TViewSceneUserInfoChangeNotify* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TViewSceneCrossBaseInfoData</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/ViewScene.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TViewSceneCrossBaseInfoData : public ::google::protobuf::Message {
 public:
  TViewSceneCrossBaseInfoData();
  virtual ~TViewSceneCrossBaseInfoData();

  TViewSceneCrossBaseInfoData(const TViewSceneCrossBaseInfoData& from);

  inline TViewSceneCrossBaseInfoData& operator=(const TViewSceneCrossBaseInfoData& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TViewSceneCrossBaseInfoData& default_instance();

  void Swap(TViewSceneCrossBaseInfoData* other);

  // implements Message ----------------------------------------------

  TViewSceneCrossBaseInfoData* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TViewSceneCrossBaseInfoData& from);
  void MergeFrom(const TViewSceneCrossBaseInfoData& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .pb.TUserSimpleInfo UserSimpleInfo = 1;
  inline bool has_usersimpleinfo() const;
  inline void clear_usersimpleinfo();
  static const int kUserSimpleInfoFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TViewSceneCrossBaseInfoData</name>
  	<Function>
  		<name>usersimpleinfo</name>
  		<replaceName>UserSimpleInfo</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_usersimpleinfo</name>
  		<replaceName>UserSimpleInfo</replaceName>
  		<handler>descripter = pb_set_message_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_allocated_usersimpleinfo</name>
  		<replaceName>UserSimpleInfo</replaceName>
  		<handler>descripter = pb_set_message_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_usersimpleinfo</name>
  		<replaceName>UserSimpleInfo</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TUserSimpleInfo& usersimpleinfo() const;
  inline ::pb::TUserSimpleInfo* mutable_usersimpleinfo();
  inline ::pb::TUserSimpleInfo* release_usersimpleinfo();
  inline void set_allocated_usersimpleinfo(::pb::TUserSimpleInfo* usersimpleinfo);

  // optional int32 ArenaPosition = 2;
  inline bool has_arenaposition() const;
  inline void clear_arenaposition();
  static const int kArenaPositionFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TViewSceneCrossBaseInfoData</name>
  	<Function>
  		<name>arenaposition</name>
  		<replaceName>ArenaPosition</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_arenaposition</name>
  		<replaceName>ArenaPosition</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_arenaposition</name>
  		<replaceName>ArenaPosition</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::int32 arenaposition() const;
  inline void set_arenaposition(::google::protobuf::int32 value);

  // optional int32 HighorderRankPosition = 3;
  inline bool has_highorderrankposition() const;
  inline void clear_highorderrankposition();
  static const int kHighorderRankPositionFieldNumber = 3;
  /*FOR2LUA
  <Record>
  	<name>TViewSceneCrossBaseInfoData</name>
  	<Function>
  		<name>highorderrankposition</name>
  		<replaceName>HighorderRankPosition</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_highorderrankposition</name>
  		<replaceName>HighorderRankPosition</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_highorderrankposition</name>
  		<replaceName>HighorderRankPosition</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::int32 highorderrankposition() const;
  inline void set_highorderrankposition(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:pb.TViewSceneCrossBaseInfoData)
 private:
  inline void set_has_usersimpleinfo();
  inline void clear_has_usersimpleinfo();
  inline void set_has_arenaposition();
  inline void clear_has_arenaposition();
  inline void set_has_highorderrankposition();
  inline void clear_has_highorderrankposition();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::pb::TUserSimpleInfo* usersimpleinfo_;
  ::google::protobuf::int32 arenaposition_;
  ::google::protobuf::int32 highorderrankposition_;
  friend void  protobuf_AddDesc_net_2fViewScene_2eproto();
  friend void protobuf_AssignDesc_net_2fViewScene_2eproto();
  friend void protobuf_ShutdownFile_net_2fViewScene_2eproto();

  void InitAsDefaultInstance();
  static TViewSceneCrossBaseInfoData* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TViewSceneCrossUserInfo</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/ViewScene.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TViewSceneCrossUserInfo : public ::google::protobuf::Message {
 public:
  TViewSceneCrossUserInfo();
  virtual ~TViewSceneCrossUserInfo();

  TViewSceneCrossUserInfo(const TViewSceneCrossUserInfo& from);

  inline TViewSceneCrossUserInfo& operator=(const TViewSceneCrossUserInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TViewSceneCrossUserInfo& default_instance();

  void Swap(TViewSceneCrossUserInfo* other);

  // implements Message ----------------------------------------------

  TViewSceneCrossUserInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TViewSceneCrossUserInfo& from);
  void MergeFrom(const TViewSceneCrossUserInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint64 Uid = 1;
  inline bool has_uid() const;
  inline void clear_uid();
  static const int kUidFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TViewSceneCrossUserInfo</name>
  	<Function>
  		<name>uid</name>
  		<replaceName>Uid</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_uid</name>
  		<replaceName>Uid</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_uid</name>
  		<replaceName>Uid</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint64 uid() const;
  inline void set_uid(::google::protobuf::uint64 value);

  // optional string ServerId = 2;
  inline bool has_serverid() const;
  inline void clear_serverid();
  static const int kServerIdFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TViewSceneCrossUserInfo</name>
  	<Function>
  		<name>serverid</name>
  		<replaceName>ServerId</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_serverid</name>
  		<replaceName>ServerId</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_serverid</name>
  		<replaceName>ServerId</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::std::string& serverid() const;
  inline void set_serverid(const ::std::string& value);
  inline void set_serverid(const char* value);
  inline void set_serverid(const char* value, size_t size);
  inline ::std::string* mutable_serverid();
  inline ::std::string* release_serverid();
  inline void set_allocated_serverid(::std::string* serverid);

  // optional uint32 Pos = 3;
  inline bool has_pos() const;
  inline void clear_pos();
  static const int kPosFieldNumber = 3;
  /*FOR2LUA
  <Record>
  	<name>TViewSceneCrossUserInfo</name>
  	<Function>
  		<name>pos</name>
  		<replaceName>Pos</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_pos</name>
  		<replaceName>Pos</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_pos</name>
  		<replaceName>Pos</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 pos() const;
  inline void set_pos(::google::protobuf::uint32 value);

  // optional .pb.EViewSceneUserStatus Status = 4;
  inline bool has_status() const;
  inline void clear_status();
  static const int kStatusFieldNumber = 4;
  /*FOR2LUA
  <Record>
  	<name>TViewSceneCrossUserInfo</name>
  	<Function>
  		<name>status</name>
  		<replaceName>Status</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_status</name>
  		<replaceName>Status</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_status</name>
  		<replaceName>Status</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::pb::EViewSceneUserStatus status() const;
  inline void set_status(::pb::EViewSceneUserStatus value);

  // optional .pb.EViewSceneUserType UserType = 5;
  inline bool has_usertype() const;
  inline void clear_usertype();
  static const int kUserTypeFieldNumber = 5;
  /*FOR2LUA
  <Record>
  	<name>TViewSceneCrossUserInfo</name>
  	<Function>
  		<name>usertype</name>
  		<replaceName>UserType</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_usertype</name>
  		<replaceName>UserType</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_usertype</name>
  		<replaceName>UserType</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::pb::EViewSceneUserType usertype() const;
  inline void set_usertype(::pb::EViewSceneUserType value);

  // optional uint32 IsLeaving = 6;
  inline bool has_isleaving() const;
  inline void clear_isleaving();
  static const int kIsLeavingFieldNumber = 6;
  /*FOR2LUA
  <Record>
  	<name>TViewSceneCrossUserInfo</name>
  	<Function>
  		<name>isleaving</name>
  		<replaceName>IsLeaving</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_isleaving</name>
  		<replaceName>IsLeaving</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_isleaving</name>
  		<replaceName>IsLeaving</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 isleaving() const;
  inline void set_isleaving(::google::protobuf::uint32 value);

  // optional bytes InfoData = 7;
  inline bool has_infodata() const;
  inline void clear_infodata();
  static const int kInfoDataFieldNumber = 7;
  /*FOR2LUA
  <Record>
  	<name>TViewSceneCrossUserInfo</name>
  	<Function>
  		<name>infodata</name>
  		<replaceName>InfoData</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_infodata</name>
  		<replaceName>InfoData</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_infodata</name>
  		<replaceName>InfoData</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::std::string& infodata() const;
  inline void set_infodata(const ::std::string& value);
  inline void set_infodata(const char* value);
  inline void set_infodata(const void* value, size_t size);
  inline ::std::string* mutable_infodata();
  inline ::std::string* release_infodata();
  inline void set_allocated_infodata(::std::string* infodata);

  // @@protoc_insertion_point(class_scope:pb.TViewSceneCrossUserInfo)
 private:
  inline void set_has_uid();
  inline void clear_has_uid();
  inline void set_has_serverid();
  inline void clear_has_serverid();
  inline void set_has_pos();
  inline void clear_has_pos();
  inline void set_has_status();
  inline void clear_has_status();
  inline void set_has_usertype();
  inline void clear_has_usertype();
  inline void set_has_isleaving();
  inline void clear_has_isleaving();
  inline void set_has_infodata();
  inline void clear_has_infodata();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint64 uid_;
  ::std::string* serverid_;
  ::google::protobuf::uint32 pos_;
  int status_;
  int usertype_;
  ::google::protobuf::uint32 isleaving_;
  ::std::string* infodata_;
  friend void  protobuf_AddDesc_net_2fViewScene_2eproto();
  friend void protobuf_AssignDesc_net_2fViewScene_2eproto();
  friend void protobuf_ShutdownFile_net_2fViewScene_2eproto();

  void InitAsDefaultInstance();
  static TViewSceneCrossUserInfo* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TViewSceneEnterCrossReq</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/ViewScene.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TViewSceneEnterCrossReq : public ::google::protobuf::Message {
 public:
  TViewSceneEnterCrossReq();
  virtual ~TViewSceneEnterCrossReq();

  TViewSceneEnterCrossReq(const TViewSceneEnterCrossReq& from);

  inline TViewSceneEnterCrossReq& operator=(const TViewSceneEnterCrossReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TViewSceneEnterCrossReq& default_instance();

  void Swap(TViewSceneEnterCrossReq* other);

  // implements Message ----------------------------------------------

  TViewSceneEnterCrossReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TViewSceneEnterCrossReq& from);
  void MergeFrom(const TViewSceneEnterCrossReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .pb.EViewSceneType ViewSceneCrossType = 1;
  inline bool has_viewscenecrosstype() const;
  inline void clear_viewscenecrosstype();
  static const int kViewSceneCrossTypeFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TViewSceneEnterCrossReq</name>
  	<Function>
  		<name>viewscenecrosstype</name>
  		<replaceName>ViewSceneCrossType</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_viewscenecrosstype</name>
  		<replaceName>ViewSceneCrossType</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_viewscenecrosstype</name>
  		<replaceName>ViewSceneCrossType</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::pb::EViewSceneType viewscenecrosstype() const;
  inline void set_viewscenecrosstype(::pb::EViewSceneType value);

  // optional uint64 ViewSceneCrossId = 2;
  inline bool has_viewscenecrossid() const;
  inline void clear_viewscenecrossid();
  static const int kViewSceneCrossIdFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TViewSceneEnterCrossReq</name>
  	<Function>
  		<name>viewscenecrossid</name>
  		<replaceName>ViewSceneCrossId</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_viewscenecrossid</name>
  		<replaceName>ViewSceneCrossId</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_viewscenecrossid</name>
  		<replaceName>ViewSceneCrossId</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint64 viewscenecrossid() const;
  inline void set_viewscenecrossid(::google::protobuf::uint64 value);

  // optional uint32 Pos = 3;
  inline bool has_pos() const;
  inline void clear_pos();
  static const int kPosFieldNumber = 3;
  /*FOR2LUA
  <Record>
  	<name>TViewSceneEnterCrossReq</name>
  	<Function>
  		<name>pos</name>
  		<replaceName>Pos</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_pos</name>
  		<replaceName>Pos</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_pos</name>
  		<replaceName>Pos</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 pos() const;
  inline void set_pos(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:pb.TViewSceneEnterCrossReq)
 private:
  inline void set_has_viewscenecrosstype();
  inline void clear_has_viewscenecrosstype();
  inline void set_has_viewscenecrossid();
  inline void clear_has_viewscenecrossid();
  inline void set_has_pos();
  inline void clear_has_pos();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint64 viewscenecrossid_;
  int viewscenecrosstype_;
  ::google::protobuf::uint32 pos_;
  friend void  protobuf_AddDesc_net_2fViewScene_2eproto();
  friend void protobuf_AssignDesc_net_2fViewScene_2eproto();
  friend void protobuf_ShutdownFile_net_2fViewScene_2eproto();

  void InitAsDefaultInstance();
  static TViewSceneEnterCrossReq* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TViewSceneEnterCrossRsp</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/ViewScene.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TViewSceneEnterCrossRsp : public ::google::protobuf::Message {
 public:
  TViewSceneEnterCrossRsp();
  virtual ~TViewSceneEnterCrossRsp();

  TViewSceneEnterCrossRsp(const TViewSceneEnterCrossRsp& from);

  inline TViewSceneEnterCrossRsp& operator=(const TViewSceneEnterCrossRsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TViewSceneEnterCrossRsp& default_instance();

  void Swap(TViewSceneEnterCrossRsp* other);

  // implements Message ----------------------------------------------

  TViewSceneEnterCrossRsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TViewSceneEnterCrossRsp& from);
  void MergeFrom(const TViewSceneEnterCrossRsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .pb.TViewSceneCrossUserInfo ArrUserInfo = 1;
  inline int arruserinfo_size() const;
  inline void clear_arruserinfo();
  static const int kArrUserInfoFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TViewSceneEnterCrossRsp</name>
  	<Function>
  		<name>arruserinfo</name>
  		<replaceName>ArrUserInfo</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_arruserinfo</name>
  		<replaceName>ArrUserInfo</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_arruserinfo</name>
  		<replaceName>ArrUserInfo</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_arruserinfo</name>
  		<replaceName>ArrUserInfo</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>arruserinfo_size</name>
  		<replaceName>ArrUserInfo</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TViewSceneCrossUserInfo& arruserinfo(int index) const;
  inline ::pb::TViewSceneCrossUserInfo* mutable_arruserinfo(int index);
  inline ::pb::TViewSceneCrossUserInfo* add_arruserinfo();
  inline const ::google::protobuf::RepeatedPtrField< ::pb::TViewSceneCrossUserInfo >&
      arruserinfo() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb::TViewSceneCrossUserInfo >*
      mutable_arruserinfo();

  // @@protoc_insertion_point(class_scope:pb.TViewSceneEnterCrossRsp)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::pb::TViewSceneCrossUserInfo > arruserinfo_;
  friend void  protobuf_AddDesc_net_2fViewScene_2eproto();
  friend void protobuf_AssignDesc_net_2fViewScene_2eproto();
  friend void protobuf_ShutdownFile_net_2fViewScene_2eproto();

  void InitAsDefaultInstance();
  static TViewSceneEnterCrossRsp* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TViewSceneMoveCrossReq</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/ViewScene.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TViewSceneMoveCrossReq : public ::google::protobuf::Message {
 public:
  TViewSceneMoveCrossReq();
  virtual ~TViewSceneMoveCrossReq();

  TViewSceneMoveCrossReq(const TViewSceneMoveCrossReq& from);

  inline TViewSceneMoveCrossReq& operator=(const TViewSceneMoveCrossReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TViewSceneMoveCrossReq& default_instance();

  void Swap(TViewSceneMoveCrossReq* other);

  // implements Message ----------------------------------------------

  TViewSceneMoveCrossReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TViewSceneMoveCrossReq& from);
  void MergeFrom(const TViewSceneMoveCrossReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 Pos = 1;
  inline bool has_pos() const;
  inline void clear_pos();
  static const int kPosFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TViewSceneMoveCrossReq</name>
  	<Function>
  		<name>pos</name>
  		<replaceName>Pos</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_pos</name>
  		<replaceName>Pos</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_pos</name>
  		<replaceName>Pos</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 pos() const;
  inline void set_pos(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:pb.TViewSceneMoveCrossReq)
 private:
  inline void set_has_pos();
  inline void clear_has_pos();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 pos_;
  friend void  protobuf_AddDesc_net_2fViewScene_2eproto();
  friend void protobuf_AssignDesc_net_2fViewScene_2eproto();
  friend void protobuf_ShutdownFile_net_2fViewScene_2eproto();

  void InitAsDefaultInstance();
  static TViewSceneMoveCrossReq* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TViewSceneChangeStatusCrossReq</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/ViewScene.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TViewSceneChangeStatusCrossReq : public ::google::protobuf::Message {
 public:
  TViewSceneChangeStatusCrossReq();
  virtual ~TViewSceneChangeStatusCrossReq();

  TViewSceneChangeStatusCrossReq(const TViewSceneChangeStatusCrossReq& from);

  inline TViewSceneChangeStatusCrossReq& operator=(const TViewSceneChangeStatusCrossReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TViewSceneChangeStatusCrossReq& default_instance();

  void Swap(TViewSceneChangeStatusCrossReq* other);

  // implements Message ----------------------------------------------

  TViewSceneChangeStatusCrossReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TViewSceneChangeStatusCrossReq& from);
  void MergeFrom(const TViewSceneChangeStatusCrossReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .pb.EViewSceneUserStatus Status = 1;
  inline bool has_status() const;
  inline void clear_status();
  static const int kStatusFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TViewSceneChangeStatusCrossReq</name>
  	<Function>
  		<name>status</name>
  		<replaceName>Status</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_status</name>
  		<replaceName>Status</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_status</name>
  		<replaceName>Status</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::pb::EViewSceneUserStatus status() const;
  inline void set_status(::pb::EViewSceneUserStatus value);

  // @@protoc_insertion_point(class_scope:pb.TViewSceneChangeStatusCrossReq)
 private:
  inline void set_has_status();
  inline void clear_has_status();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  int status_;
  friend void  protobuf_AddDesc_net_2fViewScene_2eproto();
  friend void protobuf_AssignDesc_net_2fViewScene_2eproto();
  friend void protobuf_ShutdownFile_net_2fViewScene_2eproto();

  void InitAsDefaultInstance();
  static TViewSceneChangeStatusCrossReq* default_instance_;
};
// ===================================================================


// ===================================================================

// TViewSceneUserInfo

// optional uint64 uid = 1;
inline bool TViewSceneUserInfo::has_uid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TViewSceneUserInfo::set_has_uid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TViewSceneUserInfo::clear_has_uid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TViewSceneUserInfo::clear_uid() {
  uid_ = GOOGLE_ULONGLONG(0);
  clear_has_uid();
}
inline ::google::protobuf::uint64 TViewSceneUserInfo::uid() const {
  // @@protoc_insertion_point(field_get:pb.TViewSceneUserInfo.uid)
  return uid_;
}
inline void TViewSceneUserInfo::set_uid(::google::protobuf::uint64 value) {
  set_has_uid();
  uid_ = value;
  // @@protoc_insertion_point(field_set:pb.TViewSceneUserInfo.uid)
}

// optional uint32 Pos = 2;
inline bool TViewSceneUserInfo::has_pos() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TViewSceneUserInfo::set_has_pos() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TViewSceneUserInfo::clear_has_pos() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TViewSceneUserInfo::clear_pos() {
  pos_ = 0u;
  clear_has_pos();
}
inline ::google::protobuf::uint32 TViewSceneUserInfo::pos() const {
  // @@protoc_insertion_point(field_get:pb.TViewSceneUserInfo.Pos)
  return pos_;
}
inline void TViewSceneUserInfo::set_pos(::google::protobuf::uint32 value) {
  set_has_pos();
  pos_ = value;
  // @@protoc_insertion_point(field_set:pb.TViewSceneUserInfo.Pos)
}

// optional .pb.EViewSceneUserStatus Status = 3;
inline bool TViewSceneUserInfo::has_status() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void TViewSceneUserInfo::set_has_status() {
  _has_bits_[0] |= 0x00000004u;
}
inline void TViewSceneUserInfo::clear_has_status() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void TViewSceneUserInfo::clear_status() {
  status_ = 0;
  clear_has_status();
}
inline ::pb::EViewSceneUserStatus TViewSceneUserInfo::status() const {
  // @@protoc_insertion_point(field_get:pb.TViewSceneUserInfo.Status)
  return static_cast< ::pb::EViewSceneUserStatus >(status_);
}
inline void TViewSceneUserInfo::set_status(::pb::EViewSceneUserStatus value) {
  assert(::pb::EViewSceneUserStatus_IsValid(value));
  set_has_status();
  status_ = value;
  // @@protoc_insertion_point(field_set:pb.TViewSceneUserInfo.Status)
}

// optional .pb.EViewSceneUserType UserType = 4;
inline bool TViewSceneUserInfo::has_usertype() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void TViewSceneUserInfo::set_has_usertype() {
  _has_bits_[0] |= 0x00000008u;
}
inline void TViewSceneUserInfo::clear_has_usertype() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void TViewSceneUserInfo::clear_usertype() {
  usertype_ = 1;
  clear_has_usertype();
}
inline ::pb::EViewSceneUserType TViewSceneUserInfo::usertype() const {
  // @@protoc_insertion_point(field_get:pb.TViewSceneUserInfo.UserType)
  return static_cast< ::pb::EViewSceneUserType >(usertype_);
}
inline void TViewSceneUserInfo::set_usertype(::pb::EViewSceneUserType value) {
  assert(::pb::EViewSceneUserType_IsValid(value));
  set_has_usertype();
  usertype_ = value;
  // @@protoc_insertion_point(field_set:pb.TViewSceneUserInfo.UserType)
}

// optional .pb.TUserSimpleInfo UserSimpleInfo = 5;
inline bool TViewSceneUserInfo::has_usersimpleinfo() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void TViewSceneUserInfo::set_has_usersimpleinfo() {
  _has_bits_[0] |= 0x00000010u;
}
inline void TViewSceneUserInfo::clear_has_usersimpleinfo() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void TViewSceneUserInfo::clear_usersimpleinfo() {
  if (usersimpleinfo_ != NULL) usersimpleinfo_->::pb::TUserSimpleInfo::Clear();
  clear_has_usersimpleinfo();
}
inline const ::pb::TUserSimpleInfo& TViewSceneUserInfo::usersimpleinfo() const {
  // @@protoc_insertion_point(field_get:pb.TViewSceneUserInfo.UserSimpleInfo)
  return usersimpleinfo_ != NULL ? *usersimpleinfo_ : *default_instance_->usersimpleinfo_;
}
inline ::pb::TUserSimpleInfo* TViewSceneUserInfo::mutable_usersimpleinfo() {
  set_has_usersimpleinfo();
  if (usersimpleinfo_ == NULL) usersimpleinfo_ = new ::pb::TUserSimpleInfo;
  // @@protoc_insertion_point(field_mutable:pb.TViewSceneUserInfo.UserSimpleInfo)
  return usersimpleinfo_;
}
inline ::pb::TUserSimpleInfo* TViewSceneUserInfo::release_usersimpleinfo() {
  clear_has_usersimpleinfo();
  ::pb::TUserSimpleInfo* temp = usersimpleinfo_;
  usersimpleinfo_ = NULL;
  return temp;
}
inline void TViewSceneUserInfo::set_allocated_usersimpleinfo(::pb::TUserSimpleInfo* usersimpleinfo) {
  delete usersimpleinfo_;
  usersimpleinfo_ = usersimpleinfo;
  if (usersimpleinfo) {
    set_has_usersimpleinfo();
  } else {
    clear_has_usersimpleinfo();
  }
  // @@protoc_insertion_point(field_set_allocated:pb.TViewSceneUserInfo.UserSimpleInfo)
}

// optional uint32 IsLeaving = 6;
inline bool TViewSceneUserInfo::has_isleaving() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void TViewSceneUserInfo::set_has_isleaving() {
  _has_bits_[0] |= 0x00000020u;
}
inline void TViewSceneUserInfo::clear_has_isleaving() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void TViewSceneUserInfo::clear_isleaving() {
  isleaving_ = 0u;
  clear_has_isleaving();
}
inline ::google::protobuf::uint32 TViewSceneUserInfo::isleaving() const {
  // @@protoc_insertion_point(field_get:pb.TViewSceneUserInfo.IsLeaving)
  return isleaving_;
}
inline void TViewSceneUserInfo::set_isleaving(::google::protobuf::uint32 value) {
  set_has_isleaving();
  isleaving_ = value;
  // @@protoc_insertion_point(field_set:pb.TViewSceneUserInfo.IsLeaving)
}

// optional int32 ArenaPosition = 7;
inline bool TViewSceneUserInfo::has_arenaposition() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void TViewSceneUserInfo::set_has_arenaposition() {
  _has_bits_[0] |= 0x00000040u;
}
inline void TViewSceneUserInfo::clear_has_arenaposition() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void TViewSceneUserInfo::clear_arenaposition() {
  arenaposition_ = 0;
  clear_has_arenaposition();
}
inline ::google::protobuf::int32 TViewSceneUserInfo::arenaposition() const {
  // @@protoc_insertion_point(field_get:pb.TViewSceneUserInfo.ArenaPosition)
  return arenaposition_;
}
inline void TViewSceneUserInfo::set_arenaposition(::google::protobuf::int32 value) {
  set_has_arenaposition();
  arenaposition_ = value;
  // @@protoc_insertion_point(field_set:pb.TViewSceneUserInfo.ArenaPosition)
}

// optional int32 HighorderRankPosition = 8;
inline bool TViewSceneUserInfo::has_highorderrankposition() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void TViewSceneUserInfo::set_has_highorderrankposition() {
  _has_bits_[0] |= 0x00000080u;
}
inline void TViewSceneUserInfo::clear_has_highorderrankposition() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void TViewSceneUserInfo::clear_highorderrankposition() {
  highorderrankposition_ = 0;
  clear_has_highorderrankposition();
}
inline ::google::protobuf::int32 TViewSceneUserInfo::highorderrankposition() const {
  // @@protoc_insertion_point(field_get:pb.TViewSceneUserInfo.HighorderRankPosition)
  return highorderrankposition_;
}
inline void TViewSceneUserInfo::set_highorderrankposition(::google::protobuf::int32 value) {
  set_has_highorderrankposition();
  highorderrankposition_ = value;
  // @@protoc_insertion_point(field_set:pb.TViewSceneUserInfo.HighorderRankPosition)
}

// -------------------------------------------------------------------

// TViewSceneEnterReq

// optional .pb.EViewSceneType ViewSceneType = 1;
inline bool TViewSceneEnterReq::has_viewscenetype() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TViewSceneEnterReq::set_has_viewscenetype() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TViewSceneEnterReq::clear_has_viewscenetype() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TViewSceneEnterReq::clear_viewscenetype() {
  viewscenetype_ = 1;
  clear_has_viewscenetype();
}
inline ::pb::EViewSceneType TViewSceneEnterReq::viewscenetype() const {
  // @@protoc_insertion_point(field_get:pb.TViewSceneEnterReq.ViewSceneType)
  return static_cast< ::pb::EViewSceneType >(viewscenetype_);
}
inline void TViewSceneEnterReq::set_viewscenetype(::pb::EViewSceneType value) {
  assert(::pb::EViewSceneType_IsValid(value));
  set_has_viewscenetype();
  viewscenetype_ = value;
  // @@protoc_insertion_point(field_set:pb.TViewSceneEnterReq.ViewSceneType)
}

// optional uint64 ViewSceneId = 2;
inline bool TViewSceneEnterReq::has_viewsceneid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TViewSceneEnterReq::set_has_viewsceneid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TViewSceneEnterReq::clear_has_viewsceneid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TViewSceneEnterReq::clear_viewsceneid() {
  viewsceneid_ = GOOGLE_ULONGLONG(0);
  clear_has_viewsceneid();
}
inline ::google::protobuf::uint64 TViewSceneEnterReq::viewsceneid() const {
  // @@protoc_insertion_point(field_get:pb.TViewSceneEnterReq.ViewSceneId)
  return viewsceneid_;
}
inline void TViewSceneEnterReq::set_viewsceneid(::google::protobuf::uint64 value) {
  set_has_viewsceneid();
  viewsceneid_ = value;
  // @@protoc_insertion_point(field_set:pb.TViewSceneEnterReq.ViewSceneId)
}

// optional uint32 Pos = 3;
inline bool TViewSceneEnterReq::has_pos() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void TViewSceneEnterReq::set_has_pos() {
  _has_bits_[0] |= 0x00000004u;
}
inline void TViewSceneEnterReq::clear_has_pos() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void TViewSceneEnterReq::clear_pos() {
  pos_ = 0u;
  clear_has_pos();
}
inline ::google::protobuf::uint32 TViewSceneEnterReq::pos() const {
  // @@protoc_insertion_point(field_get:pb.TViewSceneEnterReq.Pos)
  return pos_;
}
inline void TViewSceneEnterReq::set_pos(::google::protobuf::uint32 value) {
  set_has_pos();
  pos_ = value;
  // @@protoc_insertion_point(field_set:pb.TViewSceneEnterReq.Pos)
}

// -------------------------------------------------------------------

// TViewSceneEnterRsp

// repeated .pb.TViewSceneUserInfo ArrUserInfo = 1;
inline int TViewSceneEnterRsp::arruserinfo_size() const {
  return arruserinfo_.size();
}
inline void TViewSceneEnterRsp::clear_arruserinfo() {
  arruserinfo_.Clear();
}
inline const ::pb::TViewSceneUserInfo& TViewSceneEnterRsp::arruserinfo(int index) const {
  // @@protoc_insertion_point(field_get:pb.TViewSceneEnterRsp.ArrUserInfo)
  return arruserinfo_.Get(index);
}
inline ::pb::TViewSceneUserInfo* TViewSceneEnterRsp::mutable_arruserinfo(int index) {
  // @@protoc_insertion_point(field_mutable:pb.TViewSceneEnterRsp.ArrUserInfo)
  return arruserinfo_.Mutable(index);
}
inline ::pb::TViewSceneUserInfo* TViewSceneEnterRsp::add_arruserinfo() {
  // @@protoc_insertion_point(field_add:pb.TViewSceneEnterRsp.ArrUserInfo)
  return arruserinfo_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::TViewSceneUserInfo >&
TViewSceneEnterRsp::arruserinfo() const {
  // @@protoc_insertion_point(field_list:pb.TViewSceneEnterRsp.ArrUserInfo)
  return arruserinfo_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb::TViewSceneUserInfo >*
TViewSceneEnterRsp::mutable_arruserinfo() {
  // @@protoc_insertion_point(field_mutable_list:pb.TViewSceneEnterRsp.ArrUserInfo)
  return &arruserinfo_;
}

// -------------------------------------------------------------------

// TViewSceneMoveReq

// optional uint32 Pos = 1;
inline bool TViewSceneMoveReq::has_pos() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TViewSceneMoveReq::set_has_pos() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TViewSceneMoveReq::clear_has_pos() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TViewSceneMoveReq::clear_pos() {
  pos_ = 0u;
  clear_has_pos();
}
inline ::google::protobuf::uint32 TViewSceneMoveReq::pos() const {
  // @@protoc_insertion_point(field_get:pb.TViewSceneMoveReq.Pos)
  return pos_;
}
inline void TViewSceneMoveReq::set_pos(::google::protobuf::uint32 value) {
  set_has_pos();
  pos_ = value;
  // @@protoc_insertion_point(field_set:pb.TViewSceneMoveReq.Pos)
}

// -------------------------------------------------------------------

// TViewSceneChangeStatusReq

// optional .pb.EViewSceneUserStatus Status = 1;
inline bool TViewSceneChangeStatusReq::has_status() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TViewSceneChangeStatusReq::set_has_status() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TViewSceneChangeStatusReq::clear_has_status() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TViewSceneChangeStatusReq::clear_status() {
  status_ = 0;
  clear_has_status();
}
inline ::pb::EViewSceneUserStatus TViewSceneChangeStatusReq::status() const {
  // @@protoc_insertion_point(field_get:pb.TViewSceneChangeStatusReq.Status)
  return static_cast< ::pb::EViewSceneUserStatus >(status_);
}
inline void TViewSceneChangeStatusReq::set_status(::pb::EViewSceneUserStatus value) {
  assert(::pb::EViewSceneUserStatus_IsValid(value));
  set_has_status();
  status_ = value;
  // @@protoc_insertion_point(field_set:pb.TViewSceneChangeStatusReq.Status)
}

// -------------------------------------------------------------------

// TViewSceneUserInfoChangeNotify

// optional .pb.EViewSceneType ViewSceneType = 1;
inline bool TViewSceneUserInfoChangeNotify::has_viewscenetype() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TViewSceneUserInfoChangeNotify::set_has_viewscenetype() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TViewSceneUserInfoChangeNotify::clear_has_viewscenetype() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TViewSceneUserInfoChangeNotify::clear_viewscenetype() {
  viewscenetype_ = 1;
  clear_has_viewscenetype();
}
inline ::pb::EViewSceneType TViewSceneUserInfoChangeNotify::viewscenetype() const {
  // @@protoc_insertion_point(field_get:pb.TViewSceneUserInfoChangeNotify.ViewSceneType)
  return static_cast< ::pb::EViewSceneType >(viewscenetype_);
}
inline void TViewSceneUserInfoChangeNotify::set_viewscenetype(::pb::EViewSceneType value) {
  assert(::pb::EViewSceneType_IsValid(value));
  set_has_viewscenetype();
  viewscenetype_ = value;
  // @@protoc_insertion_point(field_set:pb.TViewSceneUserInfoChangeNotify.ViewSceneType)
}

// optional uint64 ViewSceneId = 2;
inline bool TViewSceneUserInfoChangeNotify::has_viewsceneid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TViewSceneUserInfoChangeNotify::set_has_viewsceneid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TViewSceneUserInfoChangeNotify::clear_has_viewsceneid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TViewSceneUserInfoChangeNotify::clear_viewsceneid() {
  viewsceneid_ = GOOGLE_ULONGLONG(0);
  clear_has_viewsceneid();
}
inline ::google::protobuf::uint64 TViewSceneUserInfoChangeNotify::viewsceneid() const {
  // @@protoc_insertion_point(field_get:pb.TViewSceneUserInfoChangeNotify.ViewSceneId)
  return viewsceneid_;
}
inline void TViewSceneUserInfoChangeNotify::set_viewsceneid(::google::protobuf::uint64 value) {
  set_has_viewsceneid();
  viewsceneid_ = value;
  // @@protoc_insertion_point(field_set:pb.TViewSceneUserInfoChangeNotify.ViewSceneId)
}

// repeated .pb.TViewSceneUserInfo ArrUserInfo = 3;
inline int TViewSceneUserInfoChangeNotify::arruserinfo_size() const {
  return arruserinfo_.size();
}
inline void TViewSceneUserInfoChangeNotify::clear_arruserinfo() {
  arruserinfo_.Clear();
}
inline const ::pb::TViewSceneUserInfo& TViewSceneUserInfoChangeNotify::arruserinfo(int index) const {
  // @@protoc_insertion_point(field_get:pb.TViewSceneUserInfoChangeNotify.ArrUserInfo)
  return arruserinfo_.Get(index);
}
inline ::pb::TViewSceneUserInfo* TViewSceneUserInfoChangeNotify::mutable_arruserinfo(int index) {
  // @@protoc_insertion_point(field_mutable:pb.TViewSceneUserInfoChangeNotify.ArrUserInfo)
  return arruserinfo_.Mutable(index);
}
inline ::pb::TViewSceneUserInfo* TViewSceneUserInfoChangeNotify::add_arruserinfo() {
  // @@protoc_insertion_point(field_add:pb.TViewSceneUserInfoChangeNotify.ArrUserInfo)
  return arruserinfo_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::TViewSceneUserInfo >&
TViewSceneUserInfoChangeNotify::arruserinfo() const {
  // @@protoc_insertion_point(field_list:pb.TViewSceneUserInfoChangeNotify.ArrUserInfo)
  return arruserinfo_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb::TViewSceneUserInfo >*
TViewSceneUserInfoChangeNotify::mutable_arruserinfo() {
  // @@protoc_insertion_point(field_mutable_list:pb.TViewSceneUserInfoChangeNotify.ArrUserInfo)
  return &arruserinfo_;
}

// repeated uint64 ArrLogoffUid = 4;
inline int TViewSceneUserInfoChangeNotify::arrlogoffuid_size() const {
  return arrlogoffuid_.size();
}
inline void TViewSceneUserInfoChangeNotify::clear_arrlogoffuid() {
  arrlogoffuid_.Clear();
}
inline ::google::protobuf::uint64 TViewSceneUserInfoChangeNotify::arrlogoffuid(int index) const {
  // @@protoc_insertion_point(field_get:pb.TViewSceneUserInfoChangeNotify.ArrLogoffUid)
  return arrlogoffuid_.Get(index);
}
inline void TViewSceneUserInfoChangeNotify::set_arrlogoffuid(int index, ::google::protobuf::uint64 value) {
  arrlogoffuid_.Set(index, value);
  // @@protoc_insertion_point(field_set:pb.TViewSceneUserInfoChangeNotify.ArrLogoffUid)
}
inline void TViewSceneUserInfoChangeNotify::add_arrlogoffuid(::google::protobuf::uint64 value) {
  arrlogoffuid_.Add(value);
  // @@protoc_insertion_point(field_add:pb.TViewSceneUserInfoChangeNotify.ArrLogoffUid)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
TViewSceneUserInfoChangeNotify::arrlogoffuid() const {
  // @@protoc_insertion_point(field_list:pb.TViewSceneUserInfoChangeNotify.ArrLogoffUid)
  return arrlogoffuid_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
TViewSceneUserInfoChangeNotify::mutable_arrlogoffuid() {
  // @@protoc_insertion_point(field_mutable_list:pb.TViewSceneUserInfoChangeNotify.ArrLogoffUid)
  return &arrlogoffuid_;
}

// -------------------------------------------------------------------

// TViewSceneCrossBaseInfoData

// optional .pb.TUserSimpleInfo UserSimpleInfo = 1;
inline bool TViewSceneCrossBaseInfoData::has_usersimpleinfo() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TViewSceneCrossBaseInfoData::set_has_usersimpleinfo() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TViewSceneCrossBaseInfoData::clear_has_usersimpleinfo() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TViewSceneCrossBaseInfoData::clear_usersimpleinfo() {
  if (usersimpleinfo_ != NULL) usersimpleinfo_->::pb::TUserSimpleInfo::Clear();
  clear_has_usersimpleinfo();
}
inline const ::pb::TUserSimpleInfo& TViewSceneCrossBaseInfoData::usersimpleinfo() const {
  // @@protoc_insertion_point(field_get:pb.TViewSceneCrossBaseInfoData.UserSimpleInfo)
  return usersimpleinfo_ != NULL ? *usersimpleinfo_ : *default_instance_->usersimpleinfo_;
}
inline ::pb::TUserSimpleInfo* TViewSceneCrossBaseInfoData::mutable_usersimpleinfo() {
  set_has_usersimpleinfo();
  if (usersimpleinfo_ == NULL) usersimpleinfo_ = new ::pb::TUserSimpleInfo;
  // @@protoc_insertion_point(field_mutable:pb.TViewSceneCrossBaseInfoData.UserSimpleInfo)
  return usersimpleinfo_;
}
inline ::pb::TUserSimpleInfo* TViewSceneCrossBaseInfoData::release_usersimpleinfo() {
  clear_has_usersimpleinfo();
  ::pb::TUserSimpleInfo* temp = usersimpleinfo_;
  usersimpleinfo_ = NULL;
  return temp;
}
inline void TViewSceneCrossBaseInfoData::set_allocated_usersimpleinfo(::pb::TUserSimpleInfo* usersimpleinfo) {
  delete usersimpleinfo_;
  usersimpleinfo_ = usersimpleinfo;
  if (usersimpleinfo) {
    set_has_usersimpleinfo();
  } else {
    clear_has_usersimpleinfo();
  }
  // @@protoc_insertion_point(field_set_allocated:pb.TViewSceneCrossBaseInfoData.UserSimpleInfo)
}

// optional int32 ArenaPosition = 2;
inline bool TViewSceneCrossBaseInfoData::has_arenaposition() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TViewSceneCrossBaseInfoData::set_has_arenaposition() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TViewSceneCrossBaseInfoData::clear_has_arenaposition() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TViewSceneCrossBaseInfoData::clear_arenaposition() {
  arenaposition_ = 0;
  clear_has_arenaposition();
}
inline ::google::protobuf::int32 TViewSceneCrossBaseInfoData::arenaposition() const {
  // @@protoc_insertion_point(field_get:pb.TViewSceneCrossBaseInfoData.ArenaPosition)
  return arenaposition_;
}
inline void TViewSceneCrossBaseInfoData::set_arenaposition(::google::protobuf::int32 value) {
  set_has_arenaposition();
  arenaposition_ = value;
  // @@protoc_insertion_point(field_set:pb.TViewSceneCrossBaseInfoData.ArenaPosition)
}

// optional int32 HighorderRankPosition = 3;
inline bool TViewSceneCrossBaseInfoData::has_highorderrankposition() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void TViewSceneCrossBaseInfoData::set_has_highorderrankposition() {
  _has_bits_[0] |= 0x00000004u;
}
inline void TViewSceneCrossBaseInfoData::clear_has_highorderrankposition() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void TViewSceneCrossBaseInfoData::clear_highorderrankposition() {
  highorderrankposition_ = 0;
  clear_has_highorderrankposition();
}
inline ::google::protobuf::int32 TViewSceneCrossBaseInfoData::highorderrankposition() const {
  // @@protoc_insertion_point(field_get:pb.TViewSceneCrossBaseInfoData.HighorderRankPosition)
  return highorderrankposition_;
}
inline void TViewSceneCrossBaseInfoData::set_highorderrankposition(::google::protobuf::int32 value) {
  set_has_highorderrankposition();
  highorderrankposition_ = value;
  // @@protoc_insertion_point(field_set:pb.TViewSceneCrossBaseInfoData.HighorderRankPosition)
}

// -------------------------------------------------------------------

// TViewSceneCrossUserInfo

// optional uint64 Uid = 1;
inline bool TViewSceneCrossUserInfo::has_uid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TViewSceneCrossUserInfo::set_has_uid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TViewSceneCrossUserInfo::clear_has_uid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TViewSceneCrossUserInfo::clear_uid() {
  uid_ = GOOGLE_ULONGLONG(0);
  clear_has_uid();
}
inline ::google::protobuf::uint64 TViewSceneCrossUserInfo::uid() const {
  // @@protoc_insertion_point(field_get:pb.TViewSceneCrossUserInfo.Uid)
  return uid_;
}
inline void TViewSceneCrossUserInfo::set_uid(::google::protobuf::uint64 value) {
  set_has_uid();
  uid_ = value;
  // @@protoc_insertion_point(field_set:pb.TViewSceneCrossUserInfo.Uid)
}

// optional string ServerId = 2;
inline bool TViewSceneCrossUserInfo::has_serverid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TViewSceneCrossUserInfo::set_has_serverid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TViewSceneCrossUserInfo::clear_has_serverid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TViewSceneCrossUserInfo::clear_serverid() {
  if (serverid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    serverid_->clear();
  }
  clear_has_serverid();
}
inline const ::std::string& TViewSceneCrossUserInfo::serverid() const {
  // @@protoc_insertion_point(field_get:pb.TViewSceneCrossUserInfo.ServerId)
  return *serverid_;
}
inline void TViewSceneCrossUserInfo::set_serverid(const ::std::string& value) {
  set_has_serverid();
  if (serverid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    serverid_ = new ::std::string;
  }
  serverid_->assign(value);
  // @@protoc_insertion_point(field_set:pb.TViewSceneCrossUserInfo.ServerId)
}
inline void TViewSceneCrossUserInfo::set_serverid(const char* value) {
  set_has_serverid();
  if (serverid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    serverid_ = new ::std::string;
  }
  serverid_->assign(value);
  // @@protoc_insertion_point(field_set_char:pb.TViewSceneCrossUserInfo.ServerId)
}
inline void TViewSceneCrossUserInfo::set_serverid(const char* value, size_t size) {
  set_has_serverid();
  if (serverid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    serverid_ = new ::std::string;
  }
  serverid_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:pb.TViewSceneCrossUserInfo.ServerId)
}
inline ::std::string* TViewSceneCrossUserInfo::mutable_serverid() {
  set_has_serverid();
  if (serverid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    serverid_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:pb.TViewSceneCrossUserInfo.ServerId)
  return serverid_;
}
inline ::std::string* TViewSceneCrossUserInfo::release_serverid() {
  clear_has_serverid();
  if (serverid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = serverid_;
    serverid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void TViewSceneCrossUserInfo::set_allocated_serverid(::std::string* serverid) {
  if (serverid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete serverid_;
  }
  if (serverid) {
    set_has_serverid();
    serverid_ = serverid;
  } else {
    clear_has_serverid();
    serverid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:pb.TViewSceneCrossUserInfo.ServerId)
}

// optional uint32 Pos = 3;
inline bool TViewSceneCrossUserInfo::has_pos() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void TViewSceneCrossUserInfo::set_has_pos() {
  _has_bits_[0] |= 0x00000004u;
}
inline void TViewSceneCrossUserInfo::clear_has_pos() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void TViewSceneCrossUserInfo::clear_pos() {
  pos_ = 0u;
  clear_has_pos();
}
inline ::google::protobuf::uint32 TViewSceneCrossUserInfo::pos() const {
  // @@protoc_insertion_point(field_get:pb.TViewSceneCrossUserInfo.Pos)
  return pos_;
}
inline void TViewSceneCrossUserInfo::set_pos(::google::protobuf::uint32 value) {
  set_has_pos();
  pos_ = value;
  // @@protoc_insertion_point(field_set:pb.TViewSceneCrossUserInfo.Pos)
}

// optional .pb.EViewSceneUserStatus Status = 4;
inline bool TViewSceneCrossUserInfo::has_status() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void TViewSceneCrossUserInfo::set_has_status() {
  _has_bits_[0] |= 0x00000008u;
}
inline void TViewSceneCrossUserInfo::clear_has_status() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void TViewSceneCrossUserInfo::clear_status() {
  status_ = 0;
  clear_has_status();
}
inline ::pb::EViewSceneUserStatus TViewSceneCrossUserInfo::status() const {
  // @@protoc_insertion_point(field_get:pb.TViewSceneCrossUserInfo.Status)
  return static_cast< ::pb::EViewSceneUserStatus >(status_);
}
inline void TViewSceneCrossUserInfo::set_status(::pb::EViewSceneUserStatus value) {
  assert(::pb::EViewSceneUserStatus_IsValid(value));
  set_has_status();
  status_ = value;
  // @@protoc_insertion_point(field_set:pb.TViewSceneCrossUserInfo.Status)
}

// optional .pb.EViewSceneUserType UserType = 5;
inline bool TViewSceneCrossUserInfo::has_usertype() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void TViewSceneCrossUserInfo::set_has_usertype() {
  _has_bits_[0] |= 0x00000010u;
}
inline void TViewSceneCrossUserInfo::clear_has_usertype() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void TViewSceneCrossUserInfo::clear_usertype() {
  usertype_ = 1;
  clear_has_usertype();
}
inline ::pb::EViewSceneUserType TViewSceneCrossUserInfo::usertype() const {
  // @@protoc_insertion_point(field_get:pb.TViewSceneCrossUserInfo.UserType)
  return static_cast< ::pb::EViewSceneUserType >(usertype_);
}
inline void TViewSceneCrossUserInfo::set_usertype(::pb::EViewSceneUserType value) {
  assert(::pb::EViewSceneUserType_IsValid(value));
  set_has_usertype();
  usertype_ = value;
  // @@protoc_insertion_point(field_set:pb.TViewSceneCrossUserInfo.UserType)
}

// optional uint32 IsLeaving = 6;
inline bool TViewSceneCrossUserInfo::has_isleaving() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void TViewSceneCrossUserInfo::set_has_isleaving() {
  _has_bits_[0] |= 0x00000020u;
}
inline void TViewSceneCrossUserInfo::clear_has_isleaving() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void TViewSceneCrossUserInfo::clear_isleaving() {
  isleaving_ = 0u;
  clear_has_isleaving();
}
inline ::google::protobuf::uint32 TViewSceneCrossUserInfo::isleaving() const {
  // @@protoc_insertion_point(field_get:pb.TViewSceneCrossUserInfo.IsLeaving)
  return isleaving_;
}
inline void TViewSceneCrossUserInfo::set_isleaving(::google::protobuf::uint32 value) {
  set_has_isleaving();
  isleaving_ = value;
  // @@protoc_insertion_point(field_set:pb.TViewSceneCrossUserInfo.IsLeaving)
}

// optional bytes InfoData = 7;
inline bool TViewSceneCrossUserInfo::has_infodata() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void TViewSceneCrossUserInfo::set_has_infodata() {
  _has_bits_[0] |= 0x00000040u;
}
inline void TViewSceneCrossUserInfo::clear_has_infodata() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void TViewSceneCrossUserInfo::clear_infodata() {
  if (infodata_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    infodata_->clear();
  }
  clear_has_infodata();
}
inline const ::std::string& TViewSceneCrossUserInfo::infodata() const {
  // @@protoc_insertion_point(field_get:pb.TViewSceneCrossUserInfo.InfoData)
  return *infodata_;
}
inline void TViewSceneCrossUserInfo::set_infodata(const ::std::string& value) {
  set_has_infodata();
  if (infodata_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    infodata_ = new ::std::string;
  }
  infodata_->assign(value);
  // @@protoc_insertion_point(field_set:pb.TViewSceneCrossUserInfo.InfoData)
}
inline void TViewSceneCrossUserInfo::set_infodata(const char* value) {
  set_has_infodata();
  if (infodata_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    infodata_ = new ::std::string;
  }
  infodata_->assign(value);
  // @@protoc_insertion_point(field_set_char:pb.TViewSceneCrossUserInfo.InfoData)
}
inline void TViewSceneCrossUserInfo::set_infodata(const void* value, size_t size) {
  set_has_infodata();
  if (infodata_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    infodata_ = new ::std::string;
  }
  infodata_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:pb.TViewSceneCrossUserInfo.InfoData)
}
inline ::std::string* TViewSceneCrossUserInfo::mutable_infodata() {
  set_has_infodata();
  if (infodata_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    infodata_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:pb.TViewSceneCrossUserInfo.InfoData)
  return infodata_;
}
inline ::std::string* TViewSceneCrossUserInfo::release_infodata() {
  clear_has_infodata();
  if (infodata_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = infodata_;
    infodata_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void TViewSceneCrossUserInfo::set_allocated_infodata(::std::string* infodata) {
  if (infodata_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete infodata_;
  }
  if (infodata) {
    set_has_infodata();
    infodata_ = infodata;
  } else {
    clear_has_infodata();
    infodata_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:pb.TViewSceneCrossUserInfo.InfoData)
}

// -------------------------------------------------------------------

// TViewSceneEnterCrossReq

// optional .pb.EViewSceneType ViewSceneCrossType = 1;
inline bool TViewSceneEnterCrossReq::has_viewscenecrosstype() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TViewSceneEnterCrossReq::set_has_viewscenecrosstype() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TViewSceneEnterCrossReq::clear_has_viewscenecrosstype() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TViewSceneEnterCrossReq::clear_viewscenecrosstype() {
  viewscenecrosstype_ = 1;
  clear_has_viewscenecrosstype();
}
inline ::pb::EViewSceneType TViewSceneEnterCrossReq::viewscenecrosstype() const {
  // @@protoc_insertion_point(field_get:pb.TViewSceneEnterCrossReq.ViewSceneCrossType)
  return static_cast< ::pb::EViewSceneType >(viewscenecrosstype_);
}
inline void TViewSceneEnterCrossReq::set_viewscenecrosstype(::pb::EViewSceneType value) {
  assert(::pb::EViewSceneType_IsValid(value));
  set_has_viewscenecrosstype();
  viewscenecrosstype_ = value;
  // @@protoc_insertion_point(field_set:pb.TViewSceneEnterCrossReq.ViewSceneCrossType)
}

// optional uint64 ViewSceneCrossId = 2;
inline bool TViewSceneEnterCrossReq::has_viewscenecrossid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TViewSceneEnterCrossReq::set_has_viewscenecrossid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TViewSceneEnterCrossReq::clear_has_viewscenecrossid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TViewSceneEnterCrossReq::clear_viewscenecrossid() {
  viewscenecrossid_ = GOOGLE_ULONGLONG(0);
  clear_has_viewscenecrossid();
}
inline ::google::protobuf::uint64 TViewSceneEnterCrossReq::viewscenecrossid() const {
  // @@protoc_insertion_point(field_get:pb.TViewSceneEnterCrossReq.ViewSceneCrossId)
  return viewscenecrossid_;
}
inline void TViewSceneEnterCrossReq::set_viewscenecrossid(::google::protobuf::uint64 value) {
  set_has_viewscenecrossid();
  viewscenecrossid_ = value;
  // @@protoc_insertion_point(field_set:pb.TViewSceneEnterCrossReq.ViewSceneCrossId)
}

// optional uint32 Pos = 3;
inline bool TViewSceneEnterCrossReq::has_pos() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void TViewSceneEnterCrossReq::set_has_pos() {
  _has_bits_[0] |= 0x00000004u;
}
inline void TViewSceneEnterCrossReq::clear_has_pos() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void TViewSceneEnterCrossReq::clear_pos() {
  pos_ = 0u;
  clear_has_pos();
}
inline ::google::protobuf::uint32 TViewSceneEnterCrossReq::pos() const {
  // @@protoc_insertion_point(field_get:pb.TViewSceneEnterCrossReq.Pos)
  return pos_;
}
inline void TViewSceneEnterCrossReq::set_pos(::google::protobuf::uint32 value) {
  set_has_pos();
  pos_ = value;
  // @@protoc_insertion_point(field_set:pb.TViewSceneEnterCrossReq.Pos)
}

// -------------------------------------------------------------------

// TViewSceneEnterCrossRsp

// repeated .pb.TViewSceneCrossUserInfo ArrUserInfo = 1;
inline int TViewSceneEnterCrossRsp::arruserinfo_size() const {
  return arruserinfo_.size();
}
inline void TViewSceneEnterCrossRsp::clear_arruserinfo() {
  arruserinfo_.Clear();
}
inline const ::pb::TViewSceneCrossUserInfo& TViewSceneEnterCrossRsp::arruserinfo(int index) const {
  // @@protoc_insertion_point(field_get:pb.TViewSceneEnterCrossRsp.ArrUserInfo)
  return arruserinfo_.Get(index);
}
inline ::pb::TViewSceneCrossUserInfo* TViewSceneEnterCrossRsp::mutable_arruserinfo(int index) {
  // @@protoc_insertion_point(field_mutable:pb.TViewSceneEnterCrossRsp.ArrUserInfo)
  return arruserinfo_.Mutable(index);
}
inline ::pb::TViewSceneCrossUserInfo* TViewSceneEnterCrossRsp::add_arruserinfo() {
  // @@protoc_insertion_point(field_add:pb.TViewSceneEnterCrossRsp.ArrUserInfo)
  return arruserinfo_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::TViewSceneCrossUserInfo >&
TViewSceneEnterCrossRsp::arruserinfo() const {
  // @@protoc_insertion_point(field_list:pb.TViewSceneEnterCrossRsp.ArrUserInfo)
  return arruserinfo_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb::TViewSceneCrossUserInfo >*
TViewSceneEnterCrossRsp::mutable_arruserinfo() {
  // @@protoc_insertion_point(field_mutable_list:pb.TViewSceneEnterCrossRsp.ArrUserInfo)
  return &arruserinfo_;
}

// -------------------------------------------------------------------

// TViewSceneMoveCrossReq

// optional uint32 Pos = 1;
inline bool TViewSceneMoveCrossReq::has_pos() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TViewSceneMoveCrossReq::set_has_pos() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TViewSceneMoveCrossReq::clear_has_pos() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TViewSceneMoveCrossReq::clear_pos() {
  pos_ = 0u;
  clear_has_pos();
}
inline ::google::protobuf::uint32 TViewSceneMoveCrossReq::pos() const {
  // @@protoc_insertion_point(field_get:pb.TViewSceneMoveCrossReq.Pos)
  return pos_;
}
inline void TViewSceneMoveCrossReq::set_pos(::google::protobuf::uint32 value) {
  set_has_pos();
  pos_ = value;
  // @@protoc_insertion_point(field_set:pb.TViewSceneMoveCrossReq.Pos)
}

// -------------------------------------------------------------------

// TViewSceneChangeStatusCrossReq

// optional .pb.EViewSceneUserStatus Status = 1;
inline bool TViewSceneChangeStatusCrossReq::has_status() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TViewSceneChangeStatusCrossReq::set_has_status() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TViewSceneChangeStatusCrossReq::clear_has_status() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TViewSceneChangeStatusCrossReq::clear_status() {
  status_ = 0;
  clear_has_status();
}
inline ::pb::EViewSceneUserStatus TViewSceneChangeStatusCrossReq::status() const {
  // @@protoc_insertion_point(field_get:pb.TViewSceneChangeStatusCrossReq.Status)
  return static_cast< ::pb::EViewSceneUserStatus >(status_);
}
inline void TViewSceneChangeStatusCrossReq::set_status(::pb::EViewSceneUserStatus value) {
  assert(::pb::EViewSceneUserStatus_IsValid(value));
  set_has_status();
  status_ = value;
  // @@protoc_insertion_point(field_set:pb.TViewSceneChangeStatusCrossReq.Status)
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace pb

#ifndef SWIG
namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::pb::EViewSceneUserStatus> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::pb::EViewSceneUserStatus>() {
  return ::pb::EViewSceneUserStatus_descriptor();
}
template <> struct is_proto_enum< ::pb::EViewSceneType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::pb::EViewSceneType>() {
  return ::pb::EViewSceneType_descriptor();
}
template <> struct is_proto_enum< ::pb::EViewSceneUserType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::pb::EViewSceneUserType>() {
  return ::pb::EViewSceneUserType_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_net_2fViewScene_2eproto__INCLUDED
