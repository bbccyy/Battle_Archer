// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: net/MonthCard.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "net/MonthCard.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace pb {

namespace {

const ::google::protobuf::Descriptor* TMonthCardInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TMonthCardInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* TMonthCardGetInfoRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TMonthCardGetInfoRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* TMonthCardReceiveRewardReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TMonthCardReceiveRewardReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* TMonthCardReceiveRewardRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TMonthCardReceiveRewardRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* TMonthCardBuyNotify_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TMonthCardBuyNotify_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_net_2fMonthCard_2eproto() {
  protobuf_AddDesc_net_2fMonthCard_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "net/MonthCard.proto");
  GOOGLE_CHECK(file != NULL);
  TMonthCardInfo_descriptor_ = file->message_type(0);
  static const int TMonthCardInfo_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TMonthCardInfo, productid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TMonthCardInfo, receivetime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TMonthCardInfo, endtime_),
  };
  TMonthCardInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TMonthCardInfo_descriptor_,
      TMonthCardInfo::default_instance_,
      TMonthCardInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TMonthCardInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TMonthCardInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TMonthCardInfo));
  TMonthCardGetInfoRsp_descriptor_ = file->message_type(1);
  static const int TMonthCardGetInfoRsp_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TMonthCardGetInfoRsp, cardinfoarr_),
  };
  TMonthCardGetInfoRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TMonthCardGetInfoRsp_descriptor_,
      TMonthCardGetInfoRsp::default_instance_,
      TMonthCardGetInfoRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TMonthCardGetInfoRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TMonthCardGetInfoRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TMonthCardGetInfoRsp));
  TMonthCardReceiveRewardReq_descriptor_ = file->message_type(2);
  static const int TMonthCardReceiveRewardReq_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TMonthCardReceiveRewardReq, productid_),
  };
  TMonthCardReceiveRewardReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TMonthCardReceiveRewardReq_descriptor_,
      TMonthCardReceiveRewardReq::default_instance_,
      TMonthCardReceiveRewardReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TMonthCardReceiveRewardReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TMonthCardReceiveRewardReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TMonthCardReceiveRewardReq));
  TMonthCardReceiveRewardRsp_descriptor_ = file->message_type(3);
  static const int TMonthCardReceiveRewardRsp_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TMonthCardReceiveRewardRsp, rewardarr_),
  };
  TMonthCardReceiveRewardRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TMonthCardReceiveRewardRsp_descriptor_,
      TMonthCardReceiveRewardRsp::default_instance_,
      TMonthCardReceiveRewardRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TMonthCardReceiveRewardRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TMonthCardReceiveRewardRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TMonthCardReceiveRewardRsp));
  TMonthCardBuyNotify_descriptor_ = file->message_type(4);
  static const int TMonthCardBuyNotify_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TMonthCardBuyNotify, cardinfo_),
  };
  TMonthCardBuyNotify_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TMonthCardBuyNotify_descriptor_,
      TMonthCardBuyNotify::default_instance_,
      TMonthCardBuyNotify_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TMonthCardBuyNotify, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TMonthCardBuyNotify, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TMonthCardBuyNotify));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_net_2fMonthCard_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TMonthCardInfo_descriptor_, &TMonthCardInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TMonthCardGetInfoRsp_descriptor_, &TMonthCardGetInfoRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TMonthCardReceiveRewardReq_descriptor_, &TMonthCardReceiveRewardReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TMonthCardReceiveRewardRsp_descriptor_, &TMonthCardReceiveRewardRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TMonthCardBuyNotify_descriptor_, &TMonthCardBuyNotify::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_net_2fMonthCard_2eproto() {
  delete TMonthCardInfo::default_instance_;
  delete TMonthCardInfo_reflection_;
  delete TMonthCardGetInfoRsp::default_instance_;
  delete TMonthCardGetInfoRsp_reflection_;
  delete TMonthCardReceiveRewardReq::default_instance_;
  delete TMonthCardReceiveRewardReq_reflection_;
  delete TMonthCardReceiveRewardRsp::default_instance_;
  delete TMonthCardReceiveRewardRsp_reflection_;
  delete TMonthCardBuyNotify::default_instance_;
  delete TMonthCardBuyNotify_reflection_;
}

void protobuf_AddDesc_net_2fMonthCard_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::pb::protobuf_AddDesc_net_2fCommonReward_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\023net/MonthCard.proto\022\002pb\032\026net/CommonRew"
    "ard.proto\"I\n\016TMonthCardInfo\022\021\n\tProductId"
    "\030\001 \001(\r\022\023\n\013ReceiveTime\030\002 \001(\004\022\017\n\007EndTime\030\003"
    " \001(\004\"\?\n\024TMonthCardGetInfoRsp\022\'\n\013CardInfo"
    "Arr\030\001 \003(\0132\022.pb.TMonthCardInfo\"/\n\032TMonthC"
    "ardReceiveRewardReq\022\021\n\tProductId\030\001 \001(\r\"B"
    "\n\032TMonthCardReceiveRewardRsp\022$\n\tRewardAr"
    "r\030\001 \003(\0132\021.pb.TCommonReward\";\n\023TMonthCard"
    "BuyNotify\022$\n\010CardInfo\030\001 \001(\0132\022.pb.TMonthC"
    "ardInfo", 367);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "net/MonthCard.proto", &protobuf_RegisterTypes);
  TMonthCardInfo::default_instance_ = new TMonthCardInfo();
  TMonthCardGetInfoRsp::default_instance_ = new TMonthCardGetInfoRsp();
  TMonthCardReceiveRewardReq::default_instance_ = new TMonthCardReceiveRewardReq();
  TMonthCardReceiveRewardRsp::default_instance_ = new TMonthCardReceiveRewardRsp();
  TMonthCardBuyNotify::default_instance_ = new TMonthCardBuyNotify();
  TMonthCardInfo::default_instance_->InitAsDefaultInstance();
  TMonthCardGetInfoRsp::default_instance_->InitAsDefaultInstance();
  TMonthCardReceiveRewardReq::default_instance_->InitAsDefaultInstance();
  TMonthCardReceiveRewardRsp::default_instance_->InitAsDefaultInstance();
  TMonthCardBuyNotify::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_net_2fMonthCard_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_net_2fMonthCard_2eproto {
  StaticDescriptorInitializer_net_2fMonthCard_2eproto() {
    protobuf_AddDesc_net_2fMonthCard_2eproto();
  }
} static_descriptor_initializer_net_2fMonthCard_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int TMonthCardInfo::kProductIdFieldNumber;
const int TMonthCardInfo::kReceiveTimeFieldNumber;
const int TMonthCardInfo::kEndTimeFieldNumber;
#endif  // !_MSC_VER

TMonthCardInfo::TMonthCardInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TMonthCardInfo)
}

void TMonthCardInfo::InitAsDefaultInstance() {
}

TMonthCardInfo::TMonthCardInfo(const TMonthCardInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TMonthCardInfo)
}

void TMonthCardInfo::SharedCtor() {
  _cached_size_ = 0;
  productid_ = 0u;
  receivetime_ = GOOGLE_ULONGLONG(0);
  endtime_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TMonthCardInfo::~TMonthCardInfo() {
  // @@protoc_insertion_point(destructor:pb.TMonthCardInfo)
  SharedDtor();
}

void TMonthCardInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TMonthCardInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TMonthCardInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TMonthCardInfo_descriptor_;
}

const TMonthCardInfo& TMonthCardInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fMonthCard_2eproto();
  return *default_instance_;
}

TMonthCardInfo* TMonthCardInfo::default_instance_ = NULL;

TMonthCardInfo* TMonthCardInfo::New() const {
  return new TMonthCardInfo;
}

void TMonthCardInfo::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<TMonthCardInfo*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(receivetime_, productid_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TMonthCardInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TMonthCardInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 ProductId = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &productid_)));
          set_has_productid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_ReceiveTime;
        break;
      }

      // optional uint64 ReceiveTime = 2;
      case 2: {
        if (tag == 16) {
         parse_ReceiveTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &receivetime_)));
          set_has_receivetime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_EndTime;
        break;
      }

      // optional uint64 EndTime = 3;
      case 3: {
        if (tag == 24) {
         parse_EndTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &endtime_)));
          set_has_endtime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TMonthCardInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TMonthCardInfo)
  return false;
#undef DO_
}

void TMonthCardInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TMonthCardInfo)
  // optional uint32 ProductId = 1;
  if (has_productid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->productid(), output);
  }

  // optional uint64 ReceiveTime = 2;
  if (has_receivetime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->receivetime(), output);
  }

  // optional uint64 EndTime = 3;
  if (has_endtime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->endtime(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TMonthCardInfo)
}

::google::protobuf::uint8* TMonthCardInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TMonthCardInfo)
  // optional uint32 ProductId = 1;
  if (has_productid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->productid(), target);
  }

  // optional uint64 ReceiveTime = 2;
  if (has_receivetime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->receivetime(), target);
  }

  // optional uint64 EndTime = 3;
  if (has_endtime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->endtime(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TMonthCardInfo)
  return target;
}

int TMonthCardInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 ProductId = 1;
    if (has_productid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->productid());
    }

    // optional uint64 ReceiveTime = 2;
    if (has_receivetime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->receivetime());
    }

    // optional uint64 EndTime = 3;
    if (has_endtime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->endtime());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TMonthCardInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TMonthCardInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TMonthCardInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TMonthCardInfo::MergeFrom(const TMonthCardInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_productid()) {
      set_productid(from.productid());
    }
    if (from.has_receivetime()) {
      set_receivetime(from.receivetime());
    }
    if (from.has_endtime()) {
      set_endtime(from.endtime());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TMonthCardInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TMonthCardInfo::CopyFrom(const TMonthCardInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TMonthCardInfo::IsInitialized() const {

  return true;
}

void TMonthCardInfo::Swap(TMonthCardInfo* other) {
  if (other != this) {
    std::swap(productid_, other->productid_);
    std::swap(receivetime_, other->receivetime_);
    std::swap(endtime_, other->endtime_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TMonthCardInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TMonthCardInfo_descriptor_;
  metadata.reflection = TMonthCardInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TMonthCardGetInfoRsp::kCardInfoArrFieldNumber;
#endif  // !_MSC_VER

TMonthCardGetInfoRsp::TMonthCardGetInfoRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TMonthCardGetInfoRsp)
}

void TMonthCardGetInfoRsp::InitAsDefaultInstance() {
}

TMonthCardGetInfoRsp::TMonthCardGetInfoRsp(const TMonthCardGetInfoRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TMonthCardGetInfoRsp)
}

void TMonthCardGetInfoRsp::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TMonthCardGetInfoRsp::~TMonthCardGetInfoRsp() {
  // @@protoc_insertion_point(destructor:pb.TMonthCardGetInfoRsp)
  SharedDtor();
}

void TMonthCardGetInfoRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TMonthCardGetInfoRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TMonthCardGetInfoRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TMonthCardGetInfoRsp_descriptor_;
}

const TMonthCardGetInfoRsp& TMonthCardGetInfoRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fMonthCard_2eproto();
  return *default_instance_;
}

TMonthCardGetInfoRsp* TMonthCardGetInfoRsp::default_instance_ = NULL;

TMonthCardGetInfoRsp* TMonthCardGetInfoRsp::New() const {
  return new TMonthCardGetInfoRsp;
}

void TMonthCardGetInfoRsp::Clear() {
  cardinfoarr_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TMonthCardGetInfoRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TMonthCardGetInfoRsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .pb.TMonthCardInfo CardInfoArr = 1;
      case 1: {
        if (tag == 10) {
         parse_CardInfoArr:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_cardinfoarr()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_CardInfoArr;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TMonthCardGetInfoRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TMonthCardGetInfoRsp)
  return false;
#undef DO_
}

void TMonthCardGetInfoRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TMonthCardGetInfoRsp)
  // repeated .pb.TMonthCardInfo CardInfoArr = 1;
  for (int i = 0; i < this->cardinfoarr_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->cardinfoarr(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TMonthCardGetInfoRsp)
}

::google::protobuf::uint8* TMonthCardGetInfoRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TMonthCardGetInfoRsp)
  // repeated .pb.TMonthCardInfo CardInfoArr = 1;
  for (int i = 0; i < this->cardinfoarr_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->cardinfoarr(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TMonthCardGetInfoRsp)
  return target;
}

int TMonthCardGetInfoRsp::ByteSize() const {
  int total_size = 0;

  // repeated .pb.TMonthCardInfo CardInfoArr = 1;
  total_size += 1 * this->cardinfoarr_size();
  for (int i = 0; i < this->cardinfoarr_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->cardinfoarr(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TMonthCardGetInfoRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TMonthCardGetInfoRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TMonthCardGetInfoRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TMonthCardGetInfoRsp::MergeFrom(const TMonthCardGetInfoRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  cardinfoarr_.MergeFrom(from.cardinfoarr_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TMonthCardGetInfoRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TMonthCardGetInfoRsp::CopyFrom(const TMonthCardGetInfoRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TMonthCardGetInfoRsp::IsInitialized() const {

  return true;
}

void TMonthCardGetInfoRsp::Swap(TMonthCardGetInfoRsp* other) {
  if (other != this) {
    cardinfoarr_.Swap(&other->cardinfoarr_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TMonthCardGetInfoRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TMonthCardGetInfoRsp_descriptor_;
  metadata.reflection = TMonthCardGetInfoRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TMonthCardReceiveRewardReq::kProductIdFieldNumber;
#endif  // !_MSC_VER

TMonthCardReceiveRewardReq::TMonthCardReceiveRewardReq()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TMonthCardReceiveRewardReq)
}

void TMonthCardReceiveRewardReq::InitAsDefaultInstance() {
}

TMonthCardReceiveRewardReq::TMonthCardReceiveRewardReq(const TMonthCardReceiveRewardReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TMonthCardReceiveRewardReq)
}

void TMonthCardReceiveRewardReq::SharedCtor() {
  _cached_size_ = 0;
  productid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TMonthCardReceiveRewardReq::~TMonthCardReceiveRewardReq() {
  // @@protoc_insertion_point(destructor:pb.TMonthCardReceiveRewardReq)
  SharedDtor();
}

void TMonthCardReceiveRewardReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TMonthCardReceiveRewardReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TMonthCardReceiveRewardReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TMonthCardReceiveRewardReq_descriptor_;
}

const TMonthCardReceiveRewardReq& TMonthCardReceiveRewardReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fMonthCard_2eproto();
  return *default_instance_;
}

TMonthCardReceiveRewardReq* TMonthCardReceiveRewardReq::default_instance_ = NULL;

TMonthCardReceiveRewardReq* TMonthCardReceiveRewardReq::New() const {
  return new TMonthCardReceiveRewardReq;
}

void TMonthCardReceiveRewardReq::Clear() {
  productid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TMonthCardReceiveRewardReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TMonthCardReceiveRewardReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 ProductId = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &productid_)));
          set_has_productid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TMonthCardReceiveRewardReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TMonthCardReceiveRewardReq)
  return false;
#undef DO_
}

void TMonthCardReceiveRewardReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TMonthCardReceiveRewardReq)
  // optional uint32 ProductId = 1;
  if (has_productid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->productid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TMonthCardReceiveRewardReq)
}

::google::protobuf::uint8* TMonthCardReceiveRewardReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TMonthCardReceiveRewardReq)
  // optional uint32 ProductId = 1;
  if (has_productid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->productid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TMonthCardReceiveRewardReq)
  return target;
}

int TMonthCardReceiveRewardReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 ProductId = 1;
    if (has_productid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->productid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TMonthCardReceiveRewardReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TMonthCardReceiveRewardReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TMonthCardReceiveRewardReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TMonthCardReceiveRewardReq::MergeFrom(const TMonthCardReceiveRewardReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_productid()) {
      set_productid(from.productid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TMonthCardReceiveRewardReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TMonthCardReceiveRewardReq::CopyFrom(const TMonthCardReceiveRewardReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TMonthCardReceiveRewardReq::IsInitialized() const {

  return true;
}

void TMonthCardReceiveRewardReq::Swap(TMonthCardReceiveRewardReq* other) {
  if (other != this) {
    std::swap(productid_, other->productid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TMonthCardReceiveRewardReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TMonthCardReceiveRewardReq_descriptor_;
  metadata.reflection = TMonthCardReceiveRewardReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TMonthCardReceiveRewardRsp::kRewardArrFieldNumber;
#endif  // !_MSC_VER

TMonthCardReceiveRewardRsp::TMonthCardReceiveRewardRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TMonthCardReceiveRewardRsp)
}

void TMonthCardReceiveRewardRsp::InitAsDefaultInstance() {
}

TMonthCardReceiveRewardRsp::TMonthCardReceiveRewardRsp(const TMonthCardReceiveRewardRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TMonthCardReceiveRewardRsp)
}

void TMonthCardReceiveRewardRsp::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TMonthCardReceiveRewardRsp::~TMonthCardReceiveRewardRsp() {
  // @@protoc_insertion_point(destructor:pb.TMonthCardReceiveRewardRsp)
  SharedDtor();
}

void TMonthCardReceiveRewardRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TMonthCardReceiveRewardRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TMonthCardReceiveRewardRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TMonthCardReceiveRewardRsp_descriptor_;
}

const TMonthCardReceiveRewardRsp& TMonthCardReceiveRewardRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fMonthCard_2eproto();
  return *default_instance_;
}

TMonthCardReceiveRewardRsp* TMonthCardReceiveRewardRsp::default_instance_ = NULL;

TMonthCardReceiveRewardRsp* TMonthCardReceiveRewardRsp::New() const {
  return new TMonthCardReceiveRewardRsp;
}

void TMonthCardReceiveRewardRsp::Clear() {
  rewardarr_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TMonthCardReceiveRewardRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TMonthCardReceiveRewardRsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .pb.TCommonReward RewardArr = 1;
      case 1: {
        if (tag == 10) {
         parse_RewardArr:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_rewardarr()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_RewardArr;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TMonthCardReceiveRewardRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TMonthCardReceiveRewardRsp)
  return false;
#undef DO_
}

void TMonthCardReceiveRewardRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TMonthCardReceiveRewardRsp)
  // repeated .pb.TCommonReward RewardArr = 1;
  for (int i = 0; i < this->rewardarr_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->rewardarr(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TMonthCardReceiveRewardRsp)
}

::google::protobuf::uint8* TMonthCardReceiveRewardRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TMonthCardReceiveRewardRsp)
  // repeated .pb.TCommonReward RewardArr = 1;
  for (int i = 0; i < this->rewardarr_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->rewardarr(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TMonthCardReceiveRewardRsp)
  return target;
}

int TMonthCardReceiveRewardRsp::ByteSize() const {
  int total_size = 0;

  // repeated .pb.TCommonReward RewardArr = 1;
  total_size += 1 * this->rewardarr_size();
  for (int i = 0; i < this->rewardarr_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->rewardarr(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TMonthCardReceiveRewardRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TMonthCardReceiveRewardRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TMonthCardReceiveRewardRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TMonthCardReceiveRewardRsp::MergeFrom(const TMonthCardReceiveRewardRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  rewardarr_.MergeFrom(from.rewardarr_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TMonthCardReceiveRewardRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TMonthCardReceiveRewardRsp::CopyFrom(const TMonthCardReceiveRewardRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TMonthCardReceiveRewardRsp::IsInitialized() const {

  return true;
}

void TMonthCardReceiveRewardRsp::Swap(TMonthCardReceiveRewardRsp* other) {
  if (other != this) {
    rewardarr_.Swap(&other->rewardarr_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TMonthCardReceiveRewardRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TMonthCardReceiveRewardRsp_descriptor_;
  metadata.reflection = TMonthCardReceiveRewardRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TMonthCardBuyNotify::kCardInfoFieldNumber;
#endif  // !_MSC_VER

TMonthCardBuyNotify::TMonthCardBuyNotify()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TMonthCardBuyNotify)
}

void TMonthCardBuyNotify::InitAsDefaultInstance() {
  cardinfo_ = const_cast< ::pb::TMonthCardInfo*>(&::pb::TMonthCardInfo::default_instance());
}

TMonthCardBuyNotify::TMonthCardBuyNotify(const TMonthCardBuyNotify& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TMonthCardBuyNotify)
}

void TMonthCardBuyNotify::SharedCtor() {
  _cached_size_ = 0;
  cardinfo_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TMonthCardBuyNotify::~TMonthCardBuyNotify() {
  // @@protoc_insertion_point(destructor:pb.TMonthCardBuyNotify)
  SharedDtor();
}

void TMonthCardBuyNotify::SharedDtor() {
  if (this != default_instance_) {
    delete cardinfo_;
  }
}

void TMonthCardBuyNotify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TMonthCardBuyNotify::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TMonthCardBuyNotify_descriptor_;
}

const TMonthCardBuyNotify& TMonthCardBuyNotify::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fMonthCard_2eproto();
  return *default_instance_;
}

TMonthCardBuyNotify* TMonthCardBuyNotify::default_instance_ = NULL;

TMonthCardBuyNotify* TMonthCardBuyNotify::New() const {
  return new TMonthCardBuyNotify;
}

void TMonthCardBuyNotify::Clear() {
  if (has_cardinfo()) {
    if (cardinfo_ != NULL) cardinfo_->::pb::TMonthCardInfo::Clear();
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TMonthCardBuyNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TMonthCardBuyNotify)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .pb.TMonthCardInfo CardInfo = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_cardinfo()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TMonthCardBuyNotify)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TMonthCardBuyNotify)
  return false;
#undef DO_
}

void TMonthCardBuyNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TMonthCardBuyNotify)
  // optional .pb.TMonthCardInfo CardInfo = 1;
  if (has_cardinfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->cardinfo(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TMonthCardBuyNotify)
}

::google::protobuf::uint8* TMonthCardBuyNotify::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TMonthCardBuyNotify)
  // optional .pb.TMonthCardInfo CardInfo = 1;
  if (has_cardinfo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->cardinfo(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TMonthCardBuyNotify)
  return target;
}

int TMonthCardBuyNotify::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .pb.TMonthCardInfo CardInfo = 1;
    if (has_cardinfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->cardinfo());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TMonthCardBuyNotify::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TMonthCardBuyNotify* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TMonthCardBuyNotify*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TMonthCardBuyNotify::MergeFrom(const TMonthCardBuyNotify& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cardinfo()) {
      mutable_cardinfo()->::pb::TMonthCardInfo::MergeFrom(from.cardinfo());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TMonthCardBuyNotify::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TMonthCardBuyNotify::CopyFrom(const TMonthCardBuyNotify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TMonthCardBuyNotify::IsInitialized() const {

  return true;
}

void TMonthCardBuyNotify::Swap(TMonthCardBuyNotify* other) {
  if (other != this) {
    std::swap(cardinfo_, other->cardinfo_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TMonthCardBuyNotify::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TMonthCardBuyNotify_descriptor_;
  metadata.reflection = TMonthCardBuyNotify_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace pb

// @@protoc_insertion_point(global_scope)
