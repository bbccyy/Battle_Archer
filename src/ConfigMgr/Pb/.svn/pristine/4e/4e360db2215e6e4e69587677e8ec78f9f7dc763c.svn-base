// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: net/ActivityConf.proto

#ifndef PROTOBUF_net_2fActivityConf_2eproto__INCLUDED
#define PROTOBUF_net_2fActivityConf_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "net/CommonReward.pb.h"
// @@protoc_insertion_point(includes)

namespace pb {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_net_2fActivityConf_2eproto();
void protobuf_AssignDesc_net_2fActivityConf_2eproto();
void protobuf_ShutdownFile_net_2fActivityConf_2eproto();

class TActivityBaseInfo;
class TActivityConfigFileInfo;
class TActivityConfInfo;
class TGetAllActivityNamesRsp;
class TActivityConfOutputValueInfo;
class TActivityConfValueInfo;
class TCheckActivityReq;
class TCheckActivityRsp;
class TDeployActivityConfReq;
class TDeployActivityConfRsp;
class TActivityConfGetActivityConfReq;
class TActivityConfGetActivityConfRsp;
class TActivityConfUpdateNotify;

enum TActivityConfErrCode {
  ACTIVITY_ERR_OK = 0,
  ACTIVITY_ERR_NOT_FOUND_VALUE_INFO = 1000,
  ACTIVITY_ERR_UNKNOWN = -1
};
bool TActivityConfErrCode_IsValid(int value);
const TActivityConfErrCode TActivityConfErrCode_MIN = ACTIVITY_ERR_UNKNOWN;
const TActivityConfErrCode TActivityConfErrCode_MAX = ACTIVITY_ERR_NOT_FOUND_VALUE_INFO;
const int TActivityConfErrCode_ARRAYSIZE = TActivityConfErrCode_MAX + 1;

const ::google::protobuf::EnumDescriptor* TActivityConfErrCode_descriptor();
inline const ::std::string& TActivityConfErrCode_Name(TActivityConfErrCode value) {
  return ::google::protobuf::internal::NameOfEnum(
    TActivityConfErrCode_descriptor(), value);
}
inline bool TActivityConfErrCode_Parse(
    const ::std::string& name, TActivityConfErrCode* value) {
  return ::google::protobuf::internal::ParseNamedEnum<TActivityConfErrCode>(
    TActivityConfErrCode_descriptor(), name, value);
}
enum TActivityConfStatus {
  ACTIVITY_OPEN = 0,
  ACTIVITY_CLOSE = 1,
  ACTIVITY_DELETED = 2
};
bool TActivityConfStatus_IsValid(int value);
const TActivityConfStatus TActivityConfStatus_MIN = ACTIVITY_OPEN;
const TActivityConfStatus TActivityConfStatus_MAX = ACTIVITY_DELETED;
const int TActivityConfStatus_ARRAYSIZE = TActivityConfStatus_MAX + 1;

const ::google::protobuf::EnumDescriptor* TActivityConfStatus_descriptor();
inline const ::std::string& TActivityConfStatus_Name(TActivityConfStatus value) {
  return ::google::protobuf::internal::NameOfEnum(
    TActivityConfStatus_descriptor(), value);
}
inline bool TActivityConfStatus_Parse(
    const ::std::string& name, TActivityConfStatus* value) {
  return ::google::protobuf::internal::ParseNamedEnum<TActivityConfStatus>(
    TActivityConfStatus_descriptor(), name, value);
}
// ===================================================================

/*FOR2LUA
<Record>
	<name>TActivityBaseInfo</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/ActivityConf.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TActivityBaseInfo : public ::google::protobuf::Message {
 public:
  TActivityBaseInfo();
  virtual ~TActivityBaseInfo();

  TActivityBaseInfo(const TActivityBaseInfo& from);

  inline TActivityBaseInfo& operator=(const TActivityBaseInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TActivityBaseInfo& default_instance();

  void Swap(TActivityBaseInfo* other);

  // implements Message ----------------------------------------------

  TActivityBaseInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TActivityBaseInfo& from);
  void MergeFrom(const TActivityBaseInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string Name = 1;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TActivityBaseInfo</name>
  	<Function>
  		<name>name</name>
  		<replaceName>Name</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_name</name>
  		<replaceName>Name</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_name</name>
  		<replaceName>Name</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // optional string NameCN = 2;
  inline bool has_namecn() const;
  inline void clear_namecn();
  static const int kNameCNFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TActivityBaseInfo</name>
  	<Function>
  		<name>namecn</name>
  		<replaceName>NameCN</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_namecn</name>
  		<replaceName>NameCN</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_namecn</name>
  		<replaceName>NameCN</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::std::string& namecn() const;
  inline void set_namecn(const ::std::string& value);
  inline void set_namecn(const char* value);
  inline void set_namecn(const char* value, size_t size);
  inline ::std::string* mutable_namecn();
  inline ::std::string* release_namecn();
  inline void set_allocated_namecn(::std::string* namecn);

  // repeated string ConfFileNameArr = 3;
  inline int conffilenamearr_size() const;
  inline void clear_conffilenamearr();
  static const int kConfFileNameArrFieldNumber = 3;
  /*FOR2LUA
  <Record>
  	<name>TActivityBaseInfo</name>
  	<Function>
  		<name>conffilenamearr</name>
  		<replaceName>ConfFileNameArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_conffilenamearr</name>
  		<replaceName>ConfFileNameArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_conffilenamearr</name>
  		<replaceName>ConfFileNameArr</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_conffilenamearr</name>
  		<replaceName>ConfFileNameArr</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>conffilenamearr_size</name>
  		<replaceName>ConfFileNameArr</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::std::string& conffilenamearr(int index) const;
  inline ::std::string* mutable_conffilenamearr(int index);
  inline void set_conffilenamearr(int index, const ::std::string& value);
  inline void set_conffilenamearr(int index, const char* value);
  inline void set_conffilenamearr(int index, const char* value, size_t size);
  inline ::std::string* add_conffilenamearr();
  inline void add_conffilenamearr(const ::std::string& value);
  inline void add_conffilenamearr(const char* value);
  inline void add_conffilenamearr(const char* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& conffilenamearr() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_conffilenamearr();

  // @@protoc_insertion_point(class_scope:pb.TActivityBaseInfo)
 private:
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_namecn();
  inline void clear_has_namecn();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* name_;
  ::std::string* namecn_;
  ::google::protobuf::RepeatedPtrField< ::std::string> conffilenamearr_;
  friend void  protobuf_AddDesc_net_2fActivityConf_2eproto();
  friend void protobuf_AssignDesc_net_2fActivityConf_2eproto();
  friend void protobuf_ShutdownFile_net_2fActivityConf_2eproto();

  void InitAsDefaultInstance();
  static TActivityBaseInfo* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TActivityConfigFileInfo</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/ActivityConf.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TActivityConfigFileInfo : public ::google::protobuf::Message {
 public:
  TActivityConfigFileInfo();
  virtual ~TActivityConfigFileInfo();

  TActivityConfigFileInfo(const TActivityConfigFileInfo& from);

  inline TActivityConfigFileInfo& operator=(const TActivityConfigFileInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TActivityConfigFileInfo& default_instance();

  void Swap(TActivityConfigFileInfo* other);

  // implements Message ----------------------------------------------

  TActivityConfigFileInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TActivityConfigFileInfo& from);
  void MergeFrom(const TActivityConfigFileInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string ConfFileName = 1;
  inline bool has_conffilename() const;
  inline void clear_conffilename();
  static const int kConfFileNameFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TActivityConfigFileInfo</name>
  	<Function>
  		<name>conffilename</name>
  		<replaceName>ConfFileName</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_conffilename</name>
  		<replaceName>ConfFileName</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_conffilename</name>
  		<replaceName>ConfFileName</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::std::string& conffilename() const;
  inline void set_conffilename(const ::std::string& value);
  inline void set_conffilename(const char* value);
  inline void set_conffilename(const char* value, size_t size);
  inline ::std::string* mutable_conffilename();
  inline ::std::string* release_conffilename();
  inline void set_allocated_conffilename(::std::string* conffilename);

  // optional string Content = 2;
  inline bool has_content() const;
  inline void clear_content();
  static const int kContentFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TActivityConfigFileInfo</name>
  	<Function>
  		<name>content</name>
  		<replaceName>Content</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_content</name>
  		<replaceName>Content</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_content</name>
  		<replaceName>Content</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::std::string& content() const;
  inline void set_content(const ::std::string& value);
  inline void set_content(const char* value);
  inline void set_content(const char* value, size_t size);
  inline ::std::string* mutable_content();
  inline ::std::string* release_content();
  inline void set_allocated_content(::std::string* content);

  // optional string ContentMd5 = 3;
  inline bool has_contentmd5() const;
  inline void clear_contentmd5();
  static const int kContentMd5FieldNumber = 3;
  /*FOR2LUA
  <Record>
  	<name>TActivityConfigFileInfo</name>
  	<Function>
  		<name>contentmd5</name>
  		<replaceName>ContentMd5</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_contentmd5</name>
  		<replaceName>ContentMd5</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_contentmd5</name>
  		<replaceName>ContentMd5</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::std::string& contentmd5() const;
  inline void set_contentmd5(const ::std::string& value);
  inline void set_contentmd5(const char* value);
  inline void set_contentmd5(const char* value, size_t size);
  inline ::std::string* mutable_contentmd5();
  inline ::std::string* release_contentmd5();
  inline void set_allocated_contentmd5(::std::string* contentmd5);

  // @@protoc_insertion_point(class_scope:pb.TActivityConfigFileInfo)
 private:
  inline void set_has_conffilename();
  inline void clear_has_conffilename();
  inline void set_has_content();
  inline void clear_has_content();
  inline void set_has_contentmd5();
  inline void clear_has_contentmd5();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* conffilename_;
  ::std::string* content_;
  ::std::string* contentmd5_;
  friend void  protobuf_AddDesc_net_2fActivityConf_2eproto();
  friend void protobuf_AssignDesc_net_2fActivityConf_2eproto();
  friend void protobuf_ShutdownFile_net_2fActivityConf_2eproto();

  void InitAsDefaultInstance();
  static TActivityConfigFileInfo* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TActivityConfInfo</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/ActivityConf.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TActivityConfInfo : public ::google::protobuf::Message {
 public:
  TActivityConfInfo();
  virtual ~TActivityConfInfo();

  TActivityConfInfo(const TActivityConfInfo& from);

  inline TActivityConfInfo& operator=(const TActivityConfInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TActivityConfInfo& default_instance();

  void Swap(TActivityConfInfo* other);

  // implements Message ----------------------------------------------

  TActivityConfInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TActivityConfInfo& from);
  void MergeFrom(const TActivityConfInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint64 Id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TActivityConfInfo</name>
  	<Function>
  		<name>id</name>
  		<replaceName>Id</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_id</name>
  		<replaceName>Id</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_id</name>
  		<replaceName>Id</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint64 id() const;
  inline void set_id(::google::protobuf::uint64 value);

  // optional string Name = 2;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TActivityConfInfo</name>
  	<Function>
  		<name>name</name>
  		<replaceName>Name</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_name</name>
  		<replaceName>Name</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_name</name>
  		<replaceName>Name</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // optional uint64 StartTime = 3;
  inline bool has_starttime() const;
  inline void clear_starttime();
  static const int kStartTimeFieldNumber = 3;
  /*FOR2LUA
  <Record>
  	<name>TActivityConfInfo</name>
  	<Function>
  		<name>starttime</name>
  		<replaceName>StartTime</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_starttime</name>
  		<replaceName>StartTime</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_starttime</name>
  		<replaceName>StartTime</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint64 starttime() const;
  inline void set_starttime(::google::protobuf::uint64 value);

  // optional uint64 EndTime = 4;
  inline bool has_endtime() const;
  inline void clear_endtime();
  static const int kEndTimeFieldNumber = 4;
  /*FOR2LUA
  <Record>
  	<name>TActivityConfInfo</name>
  	<Function>
  		<name>endtime</name>
  		<replaceName>EndTime</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_endtime</name>
  		<replaceName>EndTime</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_endtime</name>
  		<replaceName>EndTime</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint64 endtime() const;
  inline void set_endtime(::google::protobuf::uint64 value);

  // optional uint64 NeedOpenTime = 5;
  inline bool has_needopentime() const;
  inline void clear_needopentime();
  static const int kNeedOpenTimeFieldNumber = 5;
  /*FOR2LUA
  <Record>
  	<name>TActivityConfInfo</name>
  	<Function>
  		<name>needopentime</name>
  		<replaceName>NeedOpenTime</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_needopentime</name>
  		<replaceName>NeedOpenTime</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_needopentime</name>
  		<replaceName>NeedOpenTime</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint64 needopentime() const;
  inline void set_needopentime(::google::protobuf::uint64 value);

  // repeated .pb.TActivityConfigFileInfo FileInfoArr = 6;
  inline int fileinfoarr_size() const;
  inline void clear_fileinfoarr();
  static const int kFileInfoArrFieldNumber = 6;
  /*FOR2LUA
  <Record>
  	<name>TActivityConfInfo</name>
  	<Function>
  		<name>fileinfoarr</name>
  		<replaceName>FileInfoArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_fileinfoarr</name>
  		<replaceName>FileInfoArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_fileinfoarr</name>
  		<replaceName>FileInfoArr</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_fileinfoarr</name>
  		<replaceName>FileInfoArr</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>fileinfoarr_size</name>
  		<replaceName>FileInfoArr</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TActivityConfigFileInfo& fileinfoarr(int index) const;
  inline ::pb::TActivityConfigFileInfo* mutable_fileinfoarr(int index);
  inline ::pb::TActivityConfigFileInfo* add_fileinfoarr();
  inline const ::google::protobuf::RepeatedPtrField< ::pb::TActivityConfigFileInfo >&
      fileinfoarr() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb::TActivityConfigFileInfo >*
      mutable_fileinfoarr();

  // optional uint32 Version = 7;
  inline bool has_version() const;
  inline void clear_version();
  static const int kVersionFieldNumber = 7;
  /*FOR2LUA
  <Record>
  	<name>TActivityConfInfo</name>
  	<Function>
  		<name>version</name>
  		<replaceName>Version</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_version</name>
  		<replaceName>Version</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_version</name>
  		<replaceName>Version</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 version() const;
  inline void set_version(::google::protobuf::uint32 value);

  // optional .pb.TActivityConfStatus ActivityStatus = 8;
  inline bool has_activitystatus() const;
  inline void clear_activitystatus();
  static const int kActivityStatusFieldNumber = 8;
  /*FOR2LUA
  <Record>
  	<name>TActivityConfInfo</name>
  	<Function>
  		<name>activitystatus</name>
  		<replaceName>ActivityStatus</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_activitystatus</name>
  		<replaceName>ActivityStatus</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_activitystatus</name>
  		<replaceName>ActivityStatus</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::pb::TActivityConfStatus activitystatus() const;
  inline void set_activitystatus(::pb::TActivityConfStatus value);

  // @@protoc_insertion_point(class_scope:pb.TActivityConfInfo)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_starttime();
  inline void clear_has_starttime();
  inline void set_has_endtime();
  inline void clear_has_endtime();
  inline void set_has_needopentime();
  inline void clear_has_needopentime();
  inline void set_has_version();
  inline void clear_has_version();
  inline void set_has_activitystatus();
  inline void clear_has_activitystatus();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint64 id_;
  ::std::string* name_;
  ::google::protobuf::uint64 starttime_;
  ::google::protobuf::uint64 endtime_;
  ::google::protobuf::uint64 needopentime_;
  ::google::protobuf::RepeatedPtrField< ::pb::TActivityConfigFileInfo > fileinfoarr_;
  ::google::protobuf::uint32 version_;
  int activitystatus_;
  friend void  protobuf_AddDesc_net_2fActivityConf_2eproto();
  friend void protobuf_AssignDesc_net_2fActivityConf_2eproto();
  friend void protobuf_ShutdownFile_net_2fActivityConf_2eproto();

  void InitAsDefaultInstance();
  static TActivityConfInfo* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TGetAllActivityNamesRsp</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/ActivityConf.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TGetAllActivityNamesRsp : public ::google::protobuf::Message {
 public:
  TGetAllActivityNamesRsp();
  virtual ~TGetAllActivityNamesRsp();

  TGetAllActivityNamesRsp(const TGetAllActivityNamesRsp& from);

  inline TGetAllActivityNamesRsp& operator=(const TGetAllActivityNamesRsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TGetAllActivityNamesRsp& default_instance();

  void Swap(TGetAllActivityNamesRsp* other);

  // implements Message ----------------------------------------------

  TGetAllActivityNamesRsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TGetAllActivityNamesRsp& from);
  void MergeFrom(const TGetAllActivityNamesRsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .pb.TActivityBaseInfo ActivityBaseInfoArr = 1;
  inline int activitybaseinfoarr_size() const;
  inline void clear_activitybaseinfoarr();
  static const int kActivityBaseInfoArrFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TGetAllActivityNamesRsp</name>
  	<Function>
  		<name>activitybaseinfoarr</name>
  		<replaceName>ActivityBaseInfoArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_activitybaseinfoarr</name>
  		<replaceName>ActivityBaseInfoArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_activitybaseinfoarr</name>
  		<replaceName>ActivityBaseInfoArr</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_activitybaseinfoarr</name>
  		<replaceName>ActivityBaseInfoArr</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>activitybaseinfoarr_size</name>
  		<replaceName>ActivityBaseInfoArr</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TActivityBaseInfo& activitybaseinfoarr(int index) const;
  inline ::pb::TActivityBaseInfo* mutable_activitybaseinfoarr(int index);
  inline ::pb::TActivityBaseInfo* add_activitybaseinfoarr();
  inline const ::google::protobuf::RepeatedPtrField< ::pb::TActivityBaseInfo >&
      activitybaseinfoarr() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb::TActivityBaseInfo >*
      mutable_activitybaseinfoarr();

  // @@protoc_insertion_point(class_scope:pb.TGetAllActivityNamesRsp)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::pb::TActivityBaseInfo > activitybaseinfoarr_;
  friend void  protobuf_AddDesc_net_2fActivityConf_2eproto();
  friend void protobuf_AssignDesc_net_2fActivityConf_2eproto();
  friend void protobuf_ShutdownFile_net_2fActivityConf_2eproto();

  void InitAsDefaultInstance();
  static TGetAllActivityNamesRsp* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TActivityConfOutputValueInfo</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/ActivityConf.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TActivityConfOutputValueInfo : public ::google::protobuf::Message {
 public:
  TActivityConfOutputValueInfo();
  virtual ~TActivityConfOutputValueInfo();

  TActivityConfOutputValueInfo(const TActivityConfOutputValueInfo& from);

  inline TActivityConfOutputValueInfo& operator=(const TActivityConfOutputValueInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TActivityConfOutputValueInfo& default_instance();

  void Swap(TActivityConfOutputValueInfo* other);

  // implements Message ----------------------------------------------

  TActivityConfOutputValueInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TActivityConfOutputValueInfo& from);
  void MergeFrom(const TActivityConfOutputValueInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .pb.TCommonReward ArrOutputValue = 1;
  inline int arroutputvalue_size() const;
  inline void clear_arroutputvalue();
  static const int kArrOutputValueFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TActivityConfOutputValueInfo</name>
  	<Function>
  		<name>arroutputvalue</name>
  		<replaceName>ArrOutputValue</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_arroutputvalue</name>
  		<replaceName>ArrOutputValue</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_arroutputvalue</name>
  		<replaceName>ArrOutputValue</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_arroutputvalue</name>
  		<replaceName>ArrOutputValue</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>arroutputvalue_size</name>
  		<replaceName>ArrOutputValue</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TCommonReward& arroutputvalue(int index) const;
  inline ::pb::TCommonReward* mutable_arroutputvalue(int index);
  inline ::pb::TCommonReward* add_arroutputvalue();
  inline const ::google::protobuf::RepeatedPtrField< ::pb::TCommonReward >&
      arroutputvalue() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb::TCommonReward >*
      mutable_arroutputvalue();

  // optional double Probability = 2;
  inline bool has_probability() const;
  inline void clear_probability();
  static const int kProbabilityFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TActivityConfOutputValueInfo</name>
  	<Function>
  		<name>probability</name>
  		<replaceName>Probability</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_probability</name>
  		<replaceName>Probability</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_probability</name>
  		<replaceName>Probability</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline double probability() const;
  inline void set_probability(double value);

  // @@protoc_insertion_point(class_scope:pb.TActivityConfOutputValueInfo)
 private:
  inline void set_has_probability();
  inline void clear_has_probability();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::pb::TCommonReward > arroutputvalue_;
  double probability_;
  friend void  protobuf_AddDesc_net_2fActivityConf_2eproto();
  friend void protobuf_AssignDesc_net_2fActivityConf_2eproto();
  friend void protobuf_ShutdownFile_net_2fActivityConf_2eproto();

  void InitAsDefaultInstance();
  static TActivityConfOutputValueInfo* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TActivityConfValueInfo</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/ActivityConf.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TActivityConfValueInfo : public ::google::protobuf::Message {
 public:
  TActivityConfValueInfo();
  virtual ~TActivityConfValueInfo();

  TActivityConfValueInfo(const TActivityConfValueInfo& from);

  inline TActivityConfValueInfo& operator=(const TActivityConfValueInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TActivityConfValueInfo& default_instance();

  void Swap(TActivityConfValueInfo* other);

  // implements Message ----------------------------------------------

  TActivityConfValueInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TActivityConfValueInfo& from);
  void MergeFrom(const TActivityConfValueInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string RuleName = 1;
  inline bool has_rulename() const;
  inline void clear_rulename();
  static const int kRuleNameFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TActivityConfValueInfo</name>
  	<Function>
  		<name>rulename</name>
  		<replaceName>RuleName</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_rulename</name>
  		<replaceName>RuleName</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_rulename</name>
  		<replaceName>RuleName</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::std::string& rulename() const;
  inline void set_rulename(const ::std::string& value);
  inline void set_rulename(const char* value);
  inline void set_rulename(const char* value, size_t size);
  inline ::std::string* mutable_rulename();
  inline ::std::string* release_rulename();
  inline void set_allocated_rulename(::std::string* rulename);

  // repeated .pb.TCommonReward ArrInputValue = 2;
  inline int arrinputvalue_size() const;
  inline void clear_arrinputvalue();
  static const int kArrInputValueFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TActivityConfValueInfo</name>
  	<Function>
  		<name>arrinputvalue</name>
  		<replaceName>ArrInputValue</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_arrinputvalue</name>
  		<replaceName>ArrInputValue</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_arrinputvalue</name>
  		<replaceName>ArrInputValue</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_arrinputvalue</name>
  		<replaceName>ArrInputValue</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>arrinputvalue_size</name>
  		<replaceName>ArrInputValue</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TCommonReward& arrinputvalue(int index) const;
  inline ::pb::TCommonReward* mutable_arrinputvalue(int index);
  inline ::pb::TCommonReward* add_arrinputvalue();
  inline const ::google::protobuf::RepeatedPtrField< ::pb::TCommonReward >&
      arrinputvalue() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb::TCommonReward >*
      mutable_arrinputvalue();

  // repeated .pb.TActivityConfOutputValueInfo ArrOutputValueInfo = 3;
  inline int arroutputvalueinfo_size() const;
  inline void clear_arroutputvalueinfo();
  static const int kArrOutputValueInfoFieldNumber = 3;
  /*FOR2LUA
  <Record>
  	<name>TActivityConfValueInfo</name>
  	<Function>
  		<name>arroutputvalueinfo</name>
  		<replaceName>ArrOutputValueInfo</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_arroutputvalueinfo</name>
  		<replaceName>ArrOutputValueInfo</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_arroutputvalueinfo</name>
  		<replaceName>ArrOutputValueInfo</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_arroutputvalueinfo</name>
  		<replaceName>ArrOutputValueInfo</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>arroutputvalueinfo_size</name>
  		<replaceName>ArrOutputValueInfo</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TActivityConfOutputValueInfo& arroutputvalueinfo(int index) const;
  inline ::pb::TActivityConfOutputValueInfo* mutable_arroutputvalueinfo(int index);
  inline ::pb::TActivityConfOutputValueInfo* add_arroutputvalueinfo();
  inline const ::google::protobuf::RepeatedPtrField< ::pb::TActivityConfOutputValueInfo >&
      arroutputvalueinfo() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb::TActivityConfOutputValueInfo >*
      mutable_arroutputvalueinfo();

  // @@protoc_insertion_point(class_scope:pb.TActivityConfValueInfo)
 private:
  inline void set_has_rulename();
  inline void clear_has_rulename();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* rulename_;
  ::google::protobuf::RepeatedPtrField< ::pb::TCommonReward > arrinputvalue_;
  ::google::protobuf::RepeatedPtrField< ::pb::TActivityConfOutputValueInfo > arroutputvalueinfo_;
  friend void  protobuf_AddDesc_net_2fActivityConf_2eproto();
  friend void protobuf_AssignDesc_net_2fActivityConf_2eproto();
  friend void protobuf_ShutdownFile_net_2fActivityConf_2eproto();

  void InitAsDefaultInstance();
  static TActivityConfValueInfo* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TCheckActivityReq</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/ActivityConf.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TCheckActivityReq : public ::google::protobuf::Message {
 public:
  TCheckActivityReq();
  virtual ~TCheckActivityReq();

  TCheckActivityReq(const TCheckActivityReq& from);

  inline TCheckActivityReq& operator=(const TCheckActivityReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TCheckActivityReq& default_instance();

  void Swap(TCheckActivityReq* other);

  // implements Message ----------------------------------------------

  TCheckActivityReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TCheckActivityReq& from);
  void MergeFrom(const TCheckActivityReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .pb.TActivityConfInfo ActivityConfInfo = 1;
  inline bool has_activityconfinfo() const;
  inline void clear_activityconfinfo();
  static const int kActivityConfInfoFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TCheckActivityReq</name>
  	<Function>
  		<name>activityconfinfo</name>
  		<replaceName>ActivityConfInfo</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_activityconfinfo</name>
  		<replaceName>ActivityConfInfo</replaceName>
  		<handler>descripter = pb_set_message_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_allocated_activityconfinfo</name>
  		<replaceName>ActivityConfInfo</replaceName>
  		<handler>descripter = pb_set_message_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_activityconfinfo</name>
  		<replaceName>ActivityConfInfo</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TActivityConfInfo& activityconfinfo() const;
  inline ::pb::TActivityConfInfo* mutable_activityconfinfo();
  inline ::pb::TActivityConfInfo* release_activityconfinfo();
  inline void set_allocated_activityconfinfo(::pb::TActivityConfInfo* activityconfinfo);

  // optional bool Replace = 2;
  inline bool has_replace() const;
  inline void clear_replace();
  static const int kReplaceFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TCheckActivityReq</name>
  	<Function>
  		<name>replace</name>
  		<replaceName>Replace</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_replace</name>
  		<replaceName>Replace</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_replace</name>
  		<replaceName>Replace</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline bool replace() const;
  inline void set_replace(bool value);

  // @@protoc_insertion_point(class_scope:pb.TCheckActivityReq)
 private:
  inline void set_has_activityconfinfo();
  inline void clear_has_activityconfinfo();
  inline void set_has_replace();
  inline void clear_has_replace();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::pb::TActivityConfInfo* activityconfinfo_;
  bool replace_;
  friend void  protobuf_AddDesc_net_2fActivityConf_2eproto();
  friend void protobuf_AssignDesc_net_2fActivityConf_2eproto();
  friend void protobuf_ShutdownFile_net_2fActivityConf_2eproto();

  void InitAsDefaultInstance();
  static TCheckActivityReq* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TCheckActivityRsp</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/ActivityConf.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TCheckActivityRsp : public ::google::protobuf::Message {
 public:
  TCheckActivityRsp();
  virtual ~TCheckActivityRsp();

  TCheckActivityRsp(const TCheckActivityRsp& from);

  inline TCheckActivityRsp& operator=(const TCheckActivityRsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TCheckActivityRsp& default_instance();

  void Swap(TCheckActivityRsp* other);

  // implements Message ----------------------------------------------

  TCheckActivityRsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TCheckActivityRsp& from);
  void MergeFrom(const TCheckActivityRsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string Err = 1;
  inline bool has_err() const;
  inline void clear_err();
  static const int kErrFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TCheckActivityRsp</name>
  	<Function>
  		<name>err</name>
  		<replaceName>Err</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_err</name>
  		<replaceName>Err</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_err</name>
  		<replaceName>Err</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::std::string& err() const;
  inline void set_err(const ::std::string& value);
  inline void set_err(const char* value);
  inline void set_err(const char* value, size_t size);
  inline ::std::string* mutable_err();
  inline ::std::string* release_err();
  inline void set_allocated_err(::std::string* err);

  // optional .pb.TActivityConfErrCode ValueErrCode = 2;
  inline bool has_valueerrcode() const;
  inline void clear_valueerrcode();
  static const int kValueErrCodeFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TCheckActivityRsp</name>
  	<Function>
  		<name>valueerrcode</name>
  		<replaceName>ValueErrCode</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_valueerrcode</name>
  		<replaceName>ValueErrCode</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_valueerrcode</name>
  		<replaceName>ValueErrCode</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::pb::TActivityConfErrCode valueerrcode() const;
  inline void set_valueerrcode(::pb::TActivityConfErrCode value);

  // repeated .pb.TActivityConfValueInfo ArrValueInfo = 3;
  inline int arrvalueinfo_size() const;
  inline void clear_arrvalueinfo();
  static const int kArrValueInfoFieldNumber = 3;
  /*FOR2LUA
  <Record>
  	<name>TCheckActivityRsp</name>
  	<Function>
  		<name>arrvalueinfo</name>
  		<replaceName>ArrValueInfo</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_arrvalueinfo</name>
  		<replaceName>ArrValueInfo</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_arrvalueinfo</name>
  		<replaceName>ArrValueInfo</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_arrvalueinfo</name>
  		<replaceName>ArrValueInfo</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>arrvalueinfo_size</name>
  		<replaceName>ArrValueInfo</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TActivityConfValueInfo& arrvalueinfo(int index) const;
  inline ::pb::TActivityConfValueInfo* mutable_arrvalueinfo(int index);
  inline ::pb::TActivityConfValueInfo* add_arrvalueinfo();
  inline const ::google::protobuf::RepeatedPtrField< ::pb::TActivityConfValueInfo >&
      arrvalueinfo() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb::TActivityConfValueInfo >*
      mutable_arrvalueinfo();

  // @@protoc_insertion_point(class_scope:pb.TCheckActivityRsp)
 private:
  inline void set_has_err();
  inline void clear_has_err();
  inline void set_has_valueerrcode();
  inline void clear_has_valueerrcode();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* err_;
  ::google::protobuf::RepeatedPtrField< ::pb::TActivityConfValueInfo > arrvalueinfo_;
  int valueerrcode_;
  friend void  protobuf_AddDesc_net_2fActivityConf_2eproto();
  friend void protobuf_AssignDesc_net_2fActivityConf_2eproto();
  friend void protobuf_ShutdownFile_net_2fActivityConf_2eproto();

  void InitAsDefaultInstance();
  static TCheckActivityRsp* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TDeployActivityConfReq</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/ActivityConf.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TDeployActivityConfReq : public ::google::protobuf::Message {
 public:
  TDeployActivityConfReq();
  virtual ~TDeployActivityConfReq();

  TDeployActivityConfReq(const TDeployActivityConfReq& from);

  inline TDeployActivityConfReq& operator=(const TDeployActivityConfReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TDeployActivityConfReq& default_instance();

  void Swap(TDeployActivityConfReq* other);

  // implements Message ----------------------------------------------

  TDeployActivityConfReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TDeployActivityConfReq& from);
  void MergeFrom(const TDeployActivityConfReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 MaxVersion = 1;
  inline bool has_maxversion() const;
  inline void clear_maxversion();
  static const int kMaxVersionFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TDeployActivityConfReq</name>
  	<Function>
  		<name>maxversion</name>
  		<replaceName>MaxVersion</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_maxversion</name>
  		<replaceName>MaxVersion</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_maxversion</name>
  		<replaceName>MaxVersion</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 maxversion() const;
  inline void set_maxversion(::google::protobuf::uint32 value);

  // optional bool ForceRefresh = 2;
  inline bool has_forcerefresh() const;
  inline void clear_forcerefresh();
  static const int kForceRefreshFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TDeployActivityConfReq</name>
  	<Function>
  		<name>forcerefresh</name>
  		<replaceName>ForceRefresh</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_forcerefresh</name>
  		<replaceName>ForceRefresh</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_forcerefresh</name>
  		<replaceName>ForceRefresh</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline bool forcerefresh() const;
  inline void set_forcerefresh(bool value);

  // @@protoc_insertion_point(class_scope:pb.TDeployActivityConfReq)
 private:
  inline void set_has_maxversion();
  inline void clear_has_maxversion();
  inline void set_has_forcerefresh();
  inline void clear_has_forcerefresh();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 maxversion_;
  bool forcerefresh_;
  friend void  protobuf_AddDesc_net_2fActivityConf_2eproto();
  friend void protobuf_AssignDesc_net_2fActivityConf_2eproto();
  friend void protobuf_ShutdownFile_net_2fActivityConf_2eproto();

  void InitAsDefaultInstance();
  static TDeployActivityConfReq* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TDeployActivityConfRsp</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/ActivityConf.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TDeployActivityConfRsp : public ::google::protobuf::Message {
 public:
  TDeployActivityConfRsp();
  virtual ~TDeployActivityConfRsp();

  TDeployActivityConfRsp(const TDeployActivityConfRsp& from);

  inline TDeployActivityConfRsp& operator=(const TDeployActivityConfRsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TDeployActivityConfRsp& default_instance();

  void Swap(TDeployActivityConfRsp* other);

  // implements Message ----------------------------------------------

  TDeployActivityConfRsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TDeployActivityConfRsp& from);
  void MergeFrom(const TDeployActivityConfRsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string Err = 1;
  inline bool has_err() const;
  inline void clear_err();
  static const int kErrFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TDeployActivityConfRsp</name>
  	<Function>
  		<name>err</name>
  		<replaceName>Err</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_err</name>
  		<replaceName>Err</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_err</name>
  		<replaceName>Err</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::std::string& err() const;
  inline void set_err(const ::std::string& value);
  inline void set_err(const char* value);
  inline void set_err(const char* value, size_t size);
  inline ::std::string* mutable_err();
  inline ::std::string* release_err();
  inline void set_allocated_err(::std::string* err);

  // @@protoc_insertion_point(class_scope:pb.TDeployActivityConfRsp)
 private:
  inline void set_has_err();
  inline void clear_has_err();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* err_;
  friend void  protobuf_AddDesc_net_2fActivityConf_2eproto();
  friend void protobuf_AssignDesc_net_2fActivityConf_2eproto();
  friend void protobuf_ShutdownFile_net_2fActivityConf_2eproto();

  void InitAsDefaultInstance();
  static TDeployActivityConfRsp* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TActivityConfGetActivityConfReq</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/ActivityConf.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TActivityConfGetActivityConfReq : public ::google::protobuf::Message {
 public:
  TActivityConfGetActivityConfReq();
  virtual ~TActivityConfGetActivityConfReq();

  TActivityConfGetActivityConfReq(const TActivityConfGetActivityConfReq& from);

  inline TActivityConfGetActivityConfReq& operator=(const TActivityConfGetActivityConfReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TActivityConfGetActivityConfReq& default_instance();

  void Swap(TActivityConfGetActivityConfReq* other);

  // implements Message ----------------------------------------------

  TActivityConfGetActivityConfReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TActivityConfGetActivityConfReq& from);
  void MergeFrom(const TActivityConfGetActivityConfReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 MaxVersion = 1;
  inline bool has_maxversion() const;
  inline void clear_maxversion();
  static const int kMaxVersionFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TActivityConfGetActivityConfReq</name>
  	<Function>
  		<name>maxversion</name>
  		<replaceName>MaxVersion</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_maxversion</name>
  		<replaceName>MaxVersion</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_maxversion</name>
  		<replaceName>MaxVersion</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 maxversion() const;
  inline void set_maxversion(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:pb.TActivityConfGetActivityConfReq)
 private:
  inline void set_has_maxversion();
  inline void clear_has_maxversion();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 maxversion_;
  friend void  protobuf_AddDesc_net_2fActivityConf_2eproto();
  friend void protobuf_AssignDesc_net_2fActivityConf_2eproto();
  friend void protobuf_ShutdownFile_net_2fActivityConf_2eproto();

  void InitAsDefaultInstance();
  static TActivityConfGetActivityConfReq* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TActivityConfGetActivityConfRsp</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/ActivityConf.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TActivityConfGetActivityConfRsp : public ::google::protobuf::Message {
 public:
  TActivityConfGetActivityConfRsp();
  virtual ~TActivityConfGetActivityConfRsp();

  TActivityConfGetActivityConfRsp(const TActivityConfGetActivityConfRsp& from);

  inline TActivityConfGetActivityConfRsp& operator=(const TActivityConfGetActivityConfRsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TActivityConfGetActivityConfRsp& default_instance();

  void Swap(TActivityConfGetActivityConfRsp* other);

  // implements Message ----------------------------------------------

  TActivityConfGetActivityConfRsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TActivityConfGetActivityConfRsp& from);
  void MergeFrom(const TActivityConfGetActivityConfRsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 MaxVersion = 1;
  inline bool has_maxversion() const;
  inline void clear_maxversion();
  static const int kMaxVersionFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TActivityConfGetActivityConfRsp</name>
  	<Function>
  		<name>maxversion</name>
  		<replaceName>MaxVersion</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_maxversion</name>
  		<replaceName>MaxVersion</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_maxversion</name>
  		<replaceName>MaxVersion</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 maxversion() const;
  inline void set_maxversion(::google::protobuf::uint32 value);

  // repeated .pb.TActivityConfInfo ArrConfInfo = 2;
  inline int arrconfinfo_size() const;
  inline void clear_arrconfinfo();
  static const int kArrConfInfoFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TActivityConfGetActivityConfRsp</name>
  	<Function>
  		<name>arrconfinfo</name>
  		<replaceName>ArrConfInfo</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_arrconfinfo</name>
  		<replaceName>ArrConfInfo</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_arrconfinfo</name>
  		<replaceName>ArrConfInfo</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_arrconfinfo</name>
  		<replaceName>ArrConfInfo</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>arrconfinfo_size</name>
  		<replaceName>ArrConfInfo</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TActivityConfInfo& arrconfinfo(int index) const;
  inline ::pb::TActivityConfInfo* mutable_arrconfinfo(int index);
  inline ::pb::TActivityConfInfo* add_arrconfinfo();
  inline const ::google::protobuf::RepeatedPtrField< ::pb::TActivityConfInfo >&
      arrconfinfo() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb::TActivityConfInfo >*
      mutable_arrconfinfo();

  // @@protoc_insertion_point(class_scope:pb.TActivityConfGetActivityConfRsp)
 private:
  inline void set_has_maxversion();
  inline void clear_has_maxversion();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::pb::TActivityConfInfo > arrconfinfo_;
  ::google::protobuf::uint32 maxversion_;
  friend void  protobuf_AddDesc_net_2fActivityConf_2eproto();
  friend void protobuf_AssignDesc_net_2fActivityConf_2eproto();
  friend void protobuf_ShutdownFile_net_2fActivityConf_2eproto();

  void InitAsDefaultInstance();
  static TActivityConfGetActivityConfRsp* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TActivityConfUpdateNotify</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/ActivityConf.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TActivityConfUpdateNotify : public ::google::protobuf::Message {
 public:
  TActivityConfUpdateNotify();
  virtual ~TActivityConfUpdateNotify();

  TActivityConfUpdateNotify(const TActivityConfUpdateNotify& from);

  inline TActivityConfUpdateNotify& operator=(const TActivityConfUpdateNotify& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TActivityConfUpdateNotify& default_instance();

  void Swap(TActivityConfUpdateNotify* other);

  // implements Message ----------------------------------------------

  TActivityConfUpdateNotify* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TActivityConfUpdateNotify& from);
  void MergeFrom(const TActivityConfUpdateNotify& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 MaxVersion = 1;
  inline bool has_maxversion() const;
  inline void clear_maxversion();
  static const int kMaxVersionFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TActivityConfUpdateNotify</name>
  	<Function>
  		<name>maxversion</name>
  		<replaceName>MaxVersion</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_maxversion</name>
  		<replaceName>MaxVersion</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_maxversion</name>
  		<replaceName>MaxVersion</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 maxversion() const;
  inline void set_maxversion(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:pb.TActivityConfUpdateNotify)
 private:
  inline void set_has_maxversion();
  inline void clear_has_maxversion();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 maxversion_;
  friend void  protobuf_AddDesc_net_2fActivityConf_2eproto();
  friend void protobuf_AssignDesc_net_2fActivityConf_2eproto();
  friend void protobuf_ShutdownFile_net_2fActivityConf_2eproto();

  void InitAsDefaultInstance();
  static TActivityConfUpdateNotify* default_instance_;
};
// ===================================================================


// ===================================================================

// TActivityBaseInfo

// optional string Name = 1;
inline bool TActivityBaseInfo::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TActivityBaseInfo::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TActivityBaseInfo::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TActivityBaseInfo::clear_name() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& TActivityBaseInfo::name() const {
  // @@protoc_insertion_point(field_get:pb.TActivityBaseInfo.Name)
  return *name_;
}
inline void TActivityBaseInfo::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(value);
  // @@protoc_insertion_point(field_set:pb.TActivityBaseInfo.Name)
}
inline void TActivityBaseInfo::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(value);
  // @@protoc_insertion_point(field_set_char:pb.TActivityBaseInfo.Name)
}
inline void TActivityBaseInfo::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:pb.TActivityBaseInfo.Name)
}
inline ::std::string* TActivityBaseInfo::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:pb.TActivityBaseInfo.Name)
  return name_;
}
inline ::std::string* TActivityBaseInfo::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void TActivityBaseInfo::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:pb.TActivityBaseInfo.Name)
}

// optional string NameCN = 2;
inline bool TActivityBaseInfo::has_namecn() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TActivityBaseInfo::set_has_namecn() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TActivityBaseInfo::clear_has_namecn() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TActivityBaseInfo::clear_namecn() {
  if (namecn_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    namecn_->clear();
  }
  clear_has_namecn();
}
inline const ::std::string& TActivityBaseInfo::namecn() const {
  // @@protoc_insertion_point(field_get:pb.TActivityBaseInfo.NameCN)
  return *namecn_;
}
inline void TActivityBaseInfo::set_namecn(const ::std::string& value) {
  set_has_namecn();
  if (namecn_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    namecn_ = new ::std::string;
  }
  namecn_->assign(value);
  // @@protoc_insertion_point(field_set:pb.TActivityBaseInfo.NameCN)
}
inline void TActivityBaseInfo::set_namecn(const char* value) {
  set_has_namecn();
  if (namecn_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    namecn_ = new ::std::string;
  }
  namecn_->assign(value);
  // @@protoc_insertion_point(field_set_char:pb.TActivityBaseInfo.NameCN)
}
inline void TActivityBaseInfo::set_namecn(const char* value, size_t size) {
  set_has_namecn();
  if (namecn_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    namecn_ = new ::std::string;
  }
  namecn_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:pb.TActivityBaseInfo.NameCN)
}
inline ::std::string* TActivityBaseInfo::mutable_namecn() {
  set_has_namecn();
  if (namecn_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    namecn_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:pb.TActivityBaseInfo.NameCN)
  return namecn_;
}
inline ::std::string* TActivityBaseInfo::release_namecn() {
  clear_has_namecn();
  if (namecn_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = namecn_;
    namecn_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void TActivityBaseInfo::set_allocated_namecn(::std::string* namecn) {
  if (namecn_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete namecn_;
  }
  if (namecn) {
    set_has_namecn();
    namecn_ = namecn;
  } else {
    clear_has_namecn();
    namecn_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:pb.TActivityBaseInfo.NameCN)
}

// repeated string ConfFileNameArr = 3;
inline int TActivityBaseInfo::conffilenamearr_size() const {
  return conffilenamearr_.size();
}
inline void TActivityBaseInfo::clear_conffilenamearr() {
  conffilenamearr_.Clear();
}
inline const ::std::string& TActivityBaseInfo::conffilenamearr(int index) const {
  // @@protoc_insertion_point(field_get:pb.TActivityBaseInfo.ConfFileNameArr)
  return conffilenamearr_.Get(index);
}
inline ::std::string* TActivityBaseInfo::mutable_conffilenamearr(int index) {
  // @@protoc_insertion_point(field_mutable:pb.TActivityBaseInfo.ConfFileNameArr)
  return conffilenamearr_.Mutable(index);
}
inline void TActivityBaseInfo::set_conffilenamearr(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:pb.TActivityBaseInfo.ConfFileNameArr)
  conffilenamearr_.Mutable(index)->assign(value);
}
inline void TActivityBaseInfo::set_conffilenamearr(int index, const char* value) {
  conffilenamearr_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:pb.TActivityBaseInfo.ConfFileNameArr)
}
inline void TActivityBaseInfo::set_conffilenamearr(int index, const char* value, size_t size) {
  conffilenamearr_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:pb.TActivityBaseInfo.ConfFileNameArr)
}
inline ::std::string* TActivityBaseInfo::add_conffilenamearr() {
  return conffilenamearr_.Add();
}
inline void TActivityBaseInfo::add_conffilenamearr(const ::std::string& value) {
  conffilenamearr_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:pb.TActivityBaseInfo.ConfFileNameArr)
}
inline void TActivityBaseInfo::add_conffilenamearr(const char* value) {
  conffilenamearr_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:pb.TActivityBaseInfo.ConfFileNameArr)
}
inline void TActivityBaseInfo::add_conffilenamearr(const char* value, size_t size) {
  conffilenamearr_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:pb.TActivityBaseInfo.ConfFileNameArr)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
TActivityBaseInfo::conffilenamearr() const {
  // @@protoc_insertion_point(field_list:pb.TActivityBaseInfo.ConfFileNameArr)
  return conffilenamearr_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
TActivityBaseInfo::mutable_conffilenamearr() {
  // @@protoc_insertion_point(field_mutable_list:pb.TActivityBaseInfo.ConfFileNameArr)
  return &conffilenamearr_;
}

// -------------------------------------------------------------------

// TActivityConfigFileInfo

// optional string ConfFileName = 1;
inline bool TActivityConfigFileInfo::has_conffilename() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TActivityConfigFileInfo::set_has_conffilename() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TActivityConfigFileInfo::clear_has_conffilename() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TActivityConfigFileInfo::clear_conffilename() {
  if (conffilename_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    conffilename_->clear();
  }
  clear_has_conffilename();
}
inline const ::std::string& TActivityConfigFileInfo::conffilename() const {
  // @@protoc_insertion_point(field_get:pb.TActivityConfigFileInfo.ConfFileName)
  return *conffilename_;
}
inline void TActivityConfigFileInfo::set_conffilename(const ::std::string& value) {
  set_has_conffilename();
  if (conffilename_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    conffilename_ = new ::std::string;
  }
  conffilename_->assign(value);
  // @@protoc_insertion_point(field_set:pb.TActivityConfigFileInfo.ConfFileName)
}
inline void TActivityConfigFileInfo::set_conffilename(const char* value) {
  set_has_conffilename();
  if (conffilename_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    conffilename_ = new ::std::string;
  }
  conffilename_->assign(value);
  // @@protoc_insertion_point(field_set_char:pb.TActivityConfigFileInfo.ConfFileName)
}
inline void TActivityConfigFileInfo::set_conffilename(const char* value, size_t size) {
  set_has_conffilename();
  if (conffilename_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    conffilename_ = new ::std::string;
  }
  conffilename_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:pb.TActivityConfigFileInfo.ConfFileName)
}
inline ::std::string* TActivityConfigFileInfo::mutable_conffilename() {
  set_has_conffilename();
  if (conffilename_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    conffilename_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:pb.TActivityConfigFileInfo.ConfFileName)
  return conffilename_;
}
inline ::std::string* TActivityConfigFileInfo::release_conffilename() {
  clear_has_conffilename();
  if (conffilename_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = conffilename_;
    conffilename_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void TActivityConfigFileInfo::set_allocated_conffilename(::std::string* conffilename) {
  if (conffilename_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete conffilename_;
  }
  if (conffilename) {
    set_has_conffilename();
    conffilename_ = conffilename;
  } else {
    clear_has_conffilename();
    conffilename_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:pb.TActivityConfigFileInfo.ConfFileName)
}

// optional string Content = 2;
inline bool TActivityConfigFileInfo::has_content() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TActivityConfigFileInfo::set_has_content() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TActivityConfigFileInfo::clear_has_content() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TActivityConfigFileInfo::clear_content() {
  if (content_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    content_->clear();
  }
  clear_has_content();
}
inline const ::std::string& TActivityConfigFileInfo::content() const {
  // @@protoc_insertion_point(field_get:pb.TActivityConfigFileInfo.Content)
  return *content_;
}
inline void TActivityConfigFileInfo::set_content(const ::std::string& value) {
  set_has_content();
  if (content_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    content_ = new ::std::string;
  }
  content_->assign(value);
  // @@protoc_insertion_point(field_set:pb.TActivityConfigFileInfo.Content)
}
inline void TActivityConfigFileInfo::set_content(const char* value) {
  set_has_content();
  if (content_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    content_ = new ::std::string;
  }
  content_->assign(value);
  // @@protoc_insertion_point(field_set_char:pb.TActivityConfigFileInfo.Content)
}
inline void TActivityConfigFileInfo::set_content(const char* value, size_t size) {
  set_has_content();
  if (content_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    content_ = new ::std::string;
  }
  content_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:pb.TActivityConfigFileInfo.Content)
}
inline ::std::string* TActivityConfigFileInfo::mutable_content() {
  set_has_content();
  if (content_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    content_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:pb.TActivityConfigFileInfo.Content)
  return content_;
}
inline ::std::string* TActivityConfigFileInfo::release_content() {
  clear_has_content();
  if (content_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = content_;
    content_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void TActivityConfigFileInfo::set_allocated_content(::std::string* content) {
  if (content_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete content_;
  }
  if (content) {
    set_has_content();
    content_ = content;
  } else {
    clear_has_content();
    content_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:pb.TActivityConfigFileInfo.Content)
}

// optional string ContentMd5 = 3;
inline bool TActivityConfigFileInfo::has_contentmd5() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void TActivityConfigFileInfo::set_has_contentmd5() {
  _has_bits_[0] |= 0x00000004u;
}
inline void TActivityConfigFileInfo::clear_has_contentmd5() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void TActivityConfigFileInfo::clear_contentmd5() {
  if (contentmd5_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    contentmd5_->clear();
  }
  clear_has_contentmd5();
}
inline const ::std::string& TActivityConfigFileInfo::contentmd5() const {
  // @@protoc_insertion_point(field_get:pb.TActivityConfigFileInfo.ContentMd5)
  return *contentmd5_;
}
inline void TActivityConfigFileInfo::set_contentmd5(const ::std::string& value) {
  set_has_contentmd5();
  if (contentmd5_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    contentmd5_ = new ::std::string;
  }
  contentmd5_->assign(value);
  // @@protoc_insertion_point(field_set:pb.TActivityConfigFileInfo.ContentMd5)
}
inline void TActivityConfigFileInfo::set_contentmd5(const char* value) {
  set_has_contentmd5();
  if (contentmd5_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    contentmd5_ = new ::std::string;
  }
  contentmd5_->assign(value);
  // @@protoc_insertion_point(field_set_char:pb.TActivityConfigFileInfo.ContentMd5)
}
inline void TActivityConfigFileInfo::set_contentmd5(const char* value, size_t size) {
  set_has_contentmd5();
  if (contentmd5_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    contentmd5_ = new ::std::string;
  }
  contentmd5_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:pb.TActivityConfigFileInfo.ContentMd5)
}
inline ::std::string* TActivityConfigFileInfo::mutable_contentmd5() {
  set_has_contentmd5();
  if (contentmd5_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    contentmd5_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:pb.TActivityConfigFileInfo.ContentMd5)
  return contentmd5_;
}
inline ::std::string* TActivityConfigFileInfo::release_contentmd5() {
  clear_has_contentmd5();
  if (contentmd5_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = contentmd5_;
    contentmd5_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void TActivityConfigFileInfo::set_allocated_contentmd5(::std::string* contentmd5) {
  if (contentmd5_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete contentmd5_;
  }
  if (contentmd5) {
    set_has_contentmd5();
    contentmd5_ = contentmd5;
  } else {
    clear_has_contentmd5();
    contentmd5_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:pb.TActivityConfigFileInfo.ContentMd5)
}

// -------------------------------------------------------------------

// TActivityConfInfo

// optional uint64 Id = 1;
inline bool TActivityConfInfo::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TActivityConfInfo::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TActivityConfInfo::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TActivityConfInfo::clear_id() {
  id_ = GOOGLE_ULONGLONG(0);
  clear_has_id();
}
inline ::google::protobuf::uint64 TActivityConfInfo::id() const {
  // @@protoc_insertion_point(field_get:pb.TActivityConfInfo.Id)
  return id_;
}
inline void TActivityConfInfo::set_id(::google::protobuf::uint64 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:pb.TActivityConfInfo.Id)
}

// optional string Name = 2;
inline bool TActivityConfInfo::has_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TActivityConfInfo::set_has_name() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TActivityConfInfo::clear_has_name() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TActivityConfInfo::clear_name() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& TActivityConfInfo::name() const {
  // @@protoc_insertion_point(field_get:pb.TActivityConfInfo.Name)
  return *name_;
}
inline void TActivityConfInfo::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(value);
  // @@protoc_insertion_point(field_set:pb.TActivityConfInfo.Name)
}
inline void TActivityConfInfo::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(value);
  // @@protoc_insertion_point(field_set_char:pb.TActivityConfInfo.Name)
}
inline void TActivityConfInfo::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:pb.TActivityConfInfo.Name)
}
inline ::std::string* TActivityConfInfo::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:pb.TActivityConfInfo.Name)
  return name_;
}
inline ::std::string* TActivityConfInfo::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void TActivityConfInfo::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:pb.TActivityConfInfo.Name)
}

// optional uint64 StartTime = 3;
inline bool TActivityConfInfo::has_starttime() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void TActivityConfInfo::set_has_starttime() {
  _has_bits_[0] |= 0x00000004u;
}
inline void TActivityConfInfo::clear_has_starttime() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void TActivityConfInfo::clear_starttime() {
  starttime_ = GOOGLE_ULONGLONG(0);
  clear_has_starttime();
}
inline ::google::protobuf::uint64 TActivityConfInfo::starttime() const {
  // @@protoc_insertion_point(field_get:pb.TActivityConfInfo.StartTime)
  return starttime_;
}
inline void TActivityConfInfo::set_starttime(::google::protobuf::uint64 value) {
  set_has_starttime();
  starttime_ = value;
  // @@protoc_insertion_point(field_set:pb.TActivityConfInfo.StartTime)
}

// optional uint64 EndTime = 4;
inline bool TActivityConfInfo::has_endtime() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void TActivityConfInfo::set_has_endtime() {
  _has_bits_[0] |= 0x00000008u;
}
inline void TActivityConfInfo::clear_has_endtime() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void TActivityConfInfo::clear_endtime() {
  endtime_ = GOOGLE_ULONGLONG(0);
  clear_has_endtime();
}
inline ::google::protobuf::uint64 TActivityConfInfo::endtime() const {
  // @@protoc_insertion_point(field_get:pb.TActivityConfInfo.EndTime)
  return endtime_;
}
inline void TActivityConfInfo::set_endtime(::google::protobuf::uint64 value) {
  set_has_endtime();
  endtime_ = value;
  // @@protoc_insertion_point(field_set:pb.TActivityConfInfo.EndTime)
}

// optional uint64 NeedOpenTime = 5;
inline bool TActivityConfInfo::has_needopentime() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void TActivityConfInfo::set_has_needopentime() {
  _has_bits_[0] |= 0x00000010u;
}
inline void TActivityConfInfo::clear_has_needopentime() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void TActivityConfInfo::clear_needopentime() {
  needopentime_ = GOOGLE_ULONGLONG(0);
  clear_has_needopentime();
}
inline ::google::protobuf::uint64 TActivityConfInfo::needopentime() const {
  // @@protoc_insertion_point(field_get:pb.TActivityConfInfo.NeedOpenTime)
  return needopentime_;
}
inline void TActivityConfInfo::set_needopentime(::google::protobuf::uint64 value) {
  set_has_needopentime();
  needopentime_ = value;
  // @@protoc_insertion_point(field_set:pb.TActivityConfInfo.NeedOpenTime)
}

// repeated .pb.TActivityConfigFileInfo FileInfoArr = 6;
inline int TActivityConfInfo::fileinfoarr_size() const {
  return fileinfoarr_.size();
}
inline void TActivityConfInfo::clear_fileinfoarr() {
  fileinfoarr_.Clear();
}
inline const ::pb::TActivityConfigFileInfo& TActivityConfInfo::fileinfoarr(int index) const {
  // @@protoc_insertion_point(field_get:pb.TActivityConfInfo.FileInfoArr)
  return fileinfoarr_.Get(index);
}
inline ::pb::TActivityConfigFileInfo* TActivityConfInfo::mutable_fileinfoarr(int index) {
  // @@protoc_insertion_point(field_mutable:pb.TActivityConfInfo.FileInfoArr)
  return fileinfoarr_.Mutable(index);
}
inline ::pb::TActivityConfigFileInfo* TActivityConfInfo::add_fileinfoarr() {
  // @@protoc_insertion_point(field_add:pb.TActivityConfInfo.FileInfoArr)
  return fileinfoarr_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::TActivityConfigFileInfo >&
TActivityConfInfo::fileinfoarr() const {
  // @@protoc_insertion_point(field_list:pb.TActivityConfInfo.FileInfoArr)
  return fileinfoarr_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb::TActivityConfigFileInfo >*
TActivityConfInfo::mutable_fileinfoarr() {
  // @@protoc_insertion_point(field_mutable_list:pb.TActivityConfInfo.FileInfoArr)
  return &fileinfoarr_;
}

// optional uint32 Version = 7;
inline bool TActivityConfInfo::has_version() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void TActivityConfInfo::set_has_version() {
  _has_bits_[0] |= 0x00000040u;
}
inline void TActivityConfInfo::clear_has_version() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void TActivityConfInfo::clear_version() {
  version_ = 0u;
  clear_has_version();
}
inline ::google::protobuf::uint32 TActivityConfInfo::version() const {
  // @@protoc_insertion_point(field_get:pb.TActivityConfInfo.Version)
  return version_;
}
inline void TActivityConfInfo::set_version(::google::protobuf::uint32 value) {
  set_has_version();
  version_ = value;
  // @@protoc_insertion_point(field_set:pb.TActivityConfInfo.Version)
}

// optional .pb.TActivityConfStatus ActivityStatus = 8;
inline bool TActivityConfInfo::has_activitystatus() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void TActivityConfInfo::set_has_activitystatus() {
  _has_bits_[0] |= 0x00000080u;
}
inline void TActivityConfInfo::clear_has_activitystatus() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void TActivityConfInfo::clear_activitystatus() {
  activitystatus_ = 0;
  clear_has_activitystatus();
}
inline ::pb::TActivityConfStatus TActivityConfInfo::activitystatus() const {
  // @@protoc_insertion_point(field_get:pb.TActivityConfInfo.ActivityStatus)
  return static_cast< ::pb::TActivityConfStatus >(activitystatus_);
}
inline void TActivityConfInfo::set_activitystatus(::pb::TActivityConfStatus value) {
  assert(::pb::TActivityConfStatus_IsValid(value));
  set_has_activitystatus();
  activitystatus_ = value;
  // @@protoc_insertion_point(field_set:pb.TActivityConfInfo.ActivityStatus)
}

// -------------------------------------------------------------------

// TGetAllActivityNamesRsp

// repeated .pb.TActivityBaseInfo ActivityBaseInfoArr = 1;
inline int TGetAllActivityNamesRsp::activitybaseinfoarr_size() const {
  return activitybaseinfoarr_.size();
}
inline void TGetAllActivityNamesRsp::clear_activitybaseinfoarr() {
  activitybaseinfoarr_.Clear();
}
inline const ::pb::TActivityBaseInfo& TGetAllActivityNamesRsp::activitybaseinfoarr(int index) const {
  // @@protoc_insertion_point(field_get:pb.TGetAllActivityNamesRsp.ActivityBaseInfoArr)
  return activitybaseinfoarr_.Get(index);
}
inline ::pb::TActivityBaseInfo* TGetAllActivityNamesRsp::mutable_activitybaseinfoarr(int index) {
  // @@protoc_insertion_point(field_mutable:pb.TGetAllActivityNamesRsp.ActivityBaseInfoArr)
  return activitybaseinfoarr_.Mutable(index);
}
inline ::pb::TActivityBaseInfo* TGetAllActivityNamesRsp::add_activitybaseinfoarr() {
  // @@protoc_insertion_point(field_add:pb.TGetAllActivityNamesRsp.ActivityBaseInfoArr)
  return activitybaseinfoarr_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::TActivityBaseInfo >&
TGetAllActivityNamesRsp::activitybaseinfoarr() const {
  // @@protoc_insertion_point(field_list:pb.TGetAllActivityNamesRsp.ActivityBaseInfoArr)
  return activitybaseinfoarr_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb::TActivityBaseInfo >*
TGetAllActivityNamesRsp::mutable_activitybaseinfoarr() {
  // @@protoc_insertion_point(field_mutable_list:pb.TGetAllActivityNamesRsp.ActivityBaseInfoArr)
  return &activitybaseinfoarr_;
}

// -------------------------------------------------------------------

// TActivityConfOutputValueInfo

// repeated .pb.TCommonReward ArrOutputValue = 1;
inline int TActivityConfOutputValueInfo::arroutputvalue_size() const {
  return arroutputvalue_.size();
}
inline void TActivityConfOutputValueInfo::clear_arroutputvalue() {
  arroutputvalue_.Clear();
}
inline const ::pb::TCommonReward& TActivityConfOutputValueInfo::arroutputvalue(int index) const {
  // @@protoc_insertion_point(field_get:pb.TActivityConfOutputValueInfo.ArrOutputValue)
  return arroutputvalue_.Get(index);
}
inline ::pb::TCommonReward* TActivityConfOutputValueInfo::mutable_arroutputvalue(int index) {
  // @@protoc_insertion_point(field_mutable:pb.TActivityConfOutputValueInfo.ArrOutputValue)
  return arroutputvalue_.Mutable(index);
}
inline ::pb::TCommonReward* TActivityConfOutputValueInfo::add_arroutputvalue() {
  // @@protoc_insertion_point(field_add:pb.TActivityConfOutputValueInfo.ArrOutputValue)
  return arroutputvalue_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::TCommonReward >&
TActivityConfOutputValueInfo::arroutputvalue() const {
  // @@protoc_insertion_point(field_list:pb.TActivityConfOutputValueInfo.ArrOutputValue)
  return arroutputvalue_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb::TCommonReward >*
TActivityConfOutputValueInfo::mutable_arroutputvalue() {
  // @@protoc_insertion_point(field_mutable_list:pb.TActivityConfOutputValueInfo.ArrOutputValue)
  return &arroutputvalue_;
}

// optional double Probability = 2;
inline bool TActivityConfOutputValueInfo::has_probability() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TActivityConfOutputValueInfo::set_has_probability() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TActivityConfOutputValueInfo::clear_has_probability() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TActivityConfOutputValueInfo::clear_probability() {
  probability_ = 0;
  clear_has_probability();
}
inline double TActivityConfOutputValueInfo::probability() const {
  // @@protoc_insertion_point(field_get:pb.TActivityConfOutputValueInfo.Probability)
  return probability_;
}
inline void TActivityConfOutputValueInfo::set_probability(double value) {
  set_has_probability();
  probability_ = value;
  // @@protoc_insertion_point(field_set:pb.TActivityConfOutputValueInfo.Probability)
}

// -------------------------------------------------------------------

// TActivityConfValueInfo

// optional string RuleName = 1;
inline bool TActivityConfValueInfo::has_rulename() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TActivityConfValueInfo::set_has_rulename() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TActivityConfValueInfo::clear_has_rulename() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TActivityConfValueInfo::clear_rulename() {
  if (rulename_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    rulename_->clear();
  }
  clear_has_rulename();
}
inline const ::std::string& TActivityConfValueInfo::rulename() const {
  // @@protoc_insertion_point(field_get:pb.TActivityConfValueInfo.RuleName)
  return *rulename_;
}
inline void TActivityConfValueInfo::set_rulename(const ::std::string& value) {
  set_has_rulename();
  if (rulename_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    rulename_ = new ::std::string;
  }
  rulename_->assign(value);
  // @@protoc_insertion_point(field_set:pb.TActivityConfValueInfo.RuleName)
}
inline void TActivityConfValueInfo::set_rulename(const char* value) {
  set_has_rulename();
  if (rulename_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    rulename_ = new ::std::string;
  }
  rulename_->assign(value);
  // @@protoc_insertion_point(field_set_char:pb.TActivityConfValueInfo.RuleName)
}
inline void TActivityConfValueInfo::set_rulename(const char* value, size_t size) {
  set_has_rulename();
  if (rulename_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    rulename_ = new ::std::string;
  }
  rulename_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:pb.TActivityConfValueInfo.RuleName)
}
inline ::std::string* TActivityConfValueInfo::mutable_rulename() {
  set_has_rulename();
  if (rulename_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    rulename_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:pb.TActivityConfValueInfo.RuleName)
  return rulename_;
}
inline ::std::string* TActivityConfValueInfo::release_rulename() {
  clear_has_rulename();
  if (rulename_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = rulename_;
    rulename_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void TActivityConfValueInfo::set_allocated_rulename(::std::string* rulename) {
  if (rulename_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete rulename_;
  }
  if (rulename) {
    set_has_rulename();
    rulename_ = rulename;
  } else {
    clear_has_rulename();
    rulename_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:pb.TActivityConfValueInfo.RuleName)
}

// repeated .pb.TCommonReward ArrInputValue = 2;
inline int TActivityConfValueInfo::arrinputvalue_size() const {
  return arrinputvalue_.size();
}
inline void TActivityConfValueInfo::clear_arrinputvalue() {
  arrinputvalue_.Clear();
}
inline const ::pb::TCommonReward& TActivityConfValueInfo::arrinputvalue(int index) const {
  // @@protoc_insertion_point(field_get:pb.TActivityConfValueInfo.ArrInputValue)
  return arrinputvalue_.Get(index);
}
inline ::pb::TCommonReward* TActivityConfValueInfo::mutable_arrinputvalue(int index) {
  // @@protoc_insertion_point(field_mutable:pb.TActivityConfValueInfo.ArrInputValue)
  return arrinputvalue_.Mutable(index);
}
inline ::pb::TCommonReward* TActivityConfValueInfo::add_arrinputvalue() {
  // @@protoc_insertion_point(field_add:pb.TActivityConfValueInfo.ArrInputValue)
  return arrinputvalue_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::TCommonReward >&
TActivityConfValueInfo::arrinputvalue() const {
  // @@protoc_insertion_point(field_list:pb.TActivityConfValueInfo.ArrInputValue)
  return arrinputvalue_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb::TCommonReward >*
TActivityConfValueInfo::mutable_arrinputvalue() {
  // @@protoc_insertion_point(field_mutable_list:pb.TActivityConfValueInfo.ArrInputValue)
  return &arrinputvalue_;
}

// repeated .pb.TActivityConfOutputValueInfo ArrOutputValueInfo = 3;
inline int TActivityConfValueInfo::arroutputvalueinfo_size() const {
  return arroutputvalueinfo_.size();
}
inline void TActivityConfValueInfo::clear_arroutputvalueinfo() {
  arroutputvalueinfo_.Clear();
}
inline const ::pb::TActivityConfOutputValueInfo& TActivityConfValueInfo::arroutputvalueinfo(int index) const {
  // @@protoc_insertion_point(field_get:pb.TActivityConfValueInfo.ArrOutputValueInfo)
  return arroutputvalueinfo_.Get(index);
}
inline ::pb::TActivityConfOutputValueInfo* TActivityConfValueInfo::mutable_arroutputvalueinfo(int index) {
  // @@protoc_insertion_point(field_mutable:pb.TActivityConfValueInfo.ArrOutputValueInfo)
  return arroutputvalueinfo_.Mutable(index);
}
inline ::pb::TActivityConfOutputValueInfo* TActivityConfValueInfo::add_arroutputvalueinfo() {
  // @@protoc_insertion_point(field_add:pb.TActivityConfValueInfo.ArrOutputValueInfo)
  return arroutputvalueinfo_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::TActivityConfOutputValueInfo >&
TActivityConfValueInfo::arroutputvalueinfo() const {
  // @@protoc_insertion_point(field_list:pb.TActivityConfValueInfo.ArrOutputValueInfo)
  return arroutputvalueinfo_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb::TActivityConfOutputValueInfo >*
TActivityConfValueInfo::mutable_arroutputvalueinfo() {
  // @@protoc_insertion_point(field_mutable_list:pb.TActivityConfValueInfo.ArrOutputValueInfo)
  return &arroutputvalueinfo_;
}

// -------------------------------------------------------------------

// TCheckActivityReq

// optional .pb.TActivityConfInfo ActivityConfInfo = 1;
inline bool TCheckActivityReq::has_activityconfinfo() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TCheckActivityReq::set_has_activityconfinfo() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TCheckActivityReq::clear_has_activityconfinfo() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TCheckActivityReq::clear_activityconfinfo() {
  if (activityconfinfo_ != NULL) activityconfinfo_->::pb::TActivityConfInfo::Clear();
  clear_has_activityconfinfo();
}
inline const ::pb::TActivityConfInfo& TCheckActivityReq::activityconfinfo() const {
  // @@protoc_insertion_point(field_get:pb.TCheckActivityReq.ActivityConfInfo)
  return activityconfinfo_ != NULL ? *activityconfinfo_ : *default_instance_->activityconfinfo_;
}
inline ::pb::TActivityConfInfo* TCheckActivityReq::mutable_activityconfinfo() {
  set_has_activityconfinfo();
  if (activityconfinfo_ == NULL) activityconfinfo_ = new ::pb::TActivityConfInfo;
  // @@protoc_insertion_point(field_mutable:pb.TCheckActivityReq.ActivityConfInfo)
  return activityconfinfo_;
}
inline ::pb::TActivityConfInfo* TCheckActivityReq::release_activityconfinfo() {
  clear_has_activityconfinfo();
  ::pb::TActivityConfInfo* temp = activityconfinfo_;
  activityconfinfo_ = NULL;
  return temp;
}
inline void TCheckActivityReq::set_allocated_activityconfinfo(::pb::TActivityConfInfo* activityconfinfo) {
  delete activityconfinfo_;
  activityconfinfo_ = activityconfinfo;
  if (activityconfinfo) {
    set_has_activityconfinfo();
  } else {
    clear_has_activityconfinfo();
  }
  // @@protoc_insertion_point(field_set_allocated:pb.TCheckActivityReq.ActivityConfInfo)
}

// optional bool Replace = 2;
inline bool TCheckActivityReq::has_replace() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TCheckActivityReq::set_has_replace() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TCheckActivityReq::clear_has_replace() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TCheckActivityReq::clear_replace() {
  replace_ = false;
  clear_has_replace();
}
inline bool TCheckActivityReq::replace() const {
  // @@protoc_insertion_point(field_get:pb.TCheckActivityReq.Replace)
  return replace_;
}
inline void TCheckActivityReq::set_replace(bool value) {
  set_has_replace();
  replace_ = value;
  // @@protoc_insertion_point(field_set:pb.TCheckActivityReq.Replace)
}

// -------------------------------------------------------------------

// TCheckActivityRsp

// optional string Err = 1;
inline bool TCheckActivityRsp::has_err() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TCheckActivityRsp::set_has_err() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TCheckActivityRsp::clear_has_err() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TCheckActivityRsp::clear_err() {
  if (err_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    err_->clear();
  }
  clear_has_err();
}
inline const ::std::string& TCheckActivityRsp::err() const {
  // @@protoc_insertion_point(field_get:pb.TCheckActivityRsp.Err)
  return *err_;
}
inline void TCheckActivityRsp::set_err(const ::std::string& value) {
  set_has_err();
  if (err_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    err_ = new ::std::string;
  }
  err_->assign(value);
  // @@protoc_insertion_point(field_set:pb.TCheckActivityRsp.Err)
}
inline void TCheckActivityRsp::set_err(const char* value) {
  set_has_err();
  if (err_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    err_ = new ::std::string;
  }
  err_->assign(value);
  // @@protoc_insertion_point(field_set_char:pb.TCheckActivityRsp.Err)
}
inline void TCheckActivityRsp::set_err(const char* value, size_t size) {
  set_has_err();
  if (err_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    err_ = new ::std::string;
  }
  err_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:pb.TCheckActivityRsp.Err)
}
inline ::std::string* TCheckActivityRsp::mutable_err() {
  set_has_err();
  if (err_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    err_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:pb.TCheckActivityRsp.Err)
  return err_;
}
inline ::std::string* TCheckActivityRsp::release_err() {
  clear_has_err();
  if (err_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = err_;
    err_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void TCheckActivityRsp::set_allocated_err(::std::string* err) {
  if (err_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete err_;
  }
  if (err) {
    set_has_err();
    err_ = err;
  } else {
    clear_has_err();
    err_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:pb.TCheckActivityRsp.Err)
}

// optional .pb.TActivityConfErrCode ValueErrCode = 2;
inline bool TCheckActivityRsp::has_valueerrcode() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TCheckActivityRsp::set_has_valueerrcode() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TCheckActivityRsp::clear_has_valueerrcode() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TCheckActivityRsp::clear_valueerrcode() {
  valueerrcode_ = 0;
  clear_has_valueerrcode();
}
inline ::pb::TActivityConfErrCode TCheckActivityRsp::valueerrcode() const {
  // @@protoc_insertion_point(field_get:pb.TCheckActivityRsp.ValueErrCode)
  return static_cast< ::pb::TActivityConfErrCode >(valueerrcode_);
}
inline void TCheckActivityRsp::set_valueerrcode(::pb::TActivityConfErrCode value) {
  assert(::pb::TActivityConfErrCode_IsValid(value));
  set_has_valueerrcode();
  valueerrcode_ = value;
  // @@protoc_insertion_point(field_set:pb.TCheckActivityRsp.ValueErrCode)
}

// repeated .pb.TActivityConfValueInfo ArrValueInfo = 3;
inline int TCheckActivityRsp::arrvalueinfo_size() const {
  return arrvalueinfo_.size();
}
inline void TCheckActivityRsp::clear_arrvalueinfo() {
  arrvalueinfo_.Clear();
}
inline const ::pb::TActivityConfValueInfo& TCheckActivityRsp::arrvalueinfo(int index) const {
  // @@protoc_insertion_point(field_get:pb.TCheckActivityRsp.ArrValueInfo)
  return arrvalueinfo_.Get(index);
}
inline ::pb::TActivityConfValueInfo* TCheckActivityRsp::mutable_arrvalueinfo(int index) {
  // @@protoc_insertion_point(field_mutable:pb.TCheckActivityRsp.ArrValueInfo)
  return arrvalueinfo_.Mutable(index);
}
inline ::pb::TActivityConfValueInfo* TCheckActivityRsp::add_arrvalueinfo() {
  // @@protoc_insertion_point(field_add:pb.TCheckActivityRsp.ArrValueInfo)
  return arrvalueinfo_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::TActivityConfValueInfo >&
TCheckActivityRsp::arrvalueinfo() const {
  // @@protoc_insertion_point(field_list:pb.TCheckActivityRsp.ArrValueInfo)
  return arrvalueinfo_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb::TActivityConfValueInfo >*
TCheckActivityRsp::mutable_arrvalueinfo() {
  // @@protoc_insertion_point(field_mutable_list:pb.TCheckActivityRsp.ArrValueInfo)
  return &arrvalueinfo_;
}

// -------------------------------------------------------------------

// TDeployActivityConfReq

// optional uint32 MaxVersion = 1;
inline bool TDeployActivityConfReq::has_maxversion() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TDeployActivityConfReq::set_has_maxversion() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TDeployActivityConfReq::clear_has_maxversion() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TDeployActivityConfReq::clear_maxversion() {
  maxversion_ = 0u;
  clear_has_maxversion();
}
inline ::google::protobuf::uint32 TDeployActivityConfReq::maxversion() const {
  // @@protoc_insertion_point(field_get:pb.TDeployActivityConfReq.MaxVersion)
  return maxversion_;
}
inline void TDeployActivityConfReq::set_maxversion(::google::protobuf::uint32 value) {
  set_has_maxversion();
  maxversion_ = value;
  // @@protoc_insertion_point(field_set:pb.TDeployActivityConfReq.MaxVersion)
}

// optional bool ForceRefresh = 2;
inline bool TDeployActivityConfReq::has_forcerefresh() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TDeployActivityConfReq::set_has_forcerefresh() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TDeployActivityConfReq::clear_has_forcerefresh() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TDeployActivityConfReq::clear_forcerefresh() {
  forcerefresh_ = false;
  clear_has_forcerefresh();
}
inline bool TDeployActivityConfReq::forcerefresh() const {
  // @@protoc_insertion_point(field_get:pb.TDeployActivityConfReq.ForceRefresh)
  return forcerefresh_;
}
inline void TDeployActivityConfReq::set_forcerefresh(bool value) {
  set_has_forcerefresh();
  forcerefresh_ = value;
  // @@protoc_insertion_point(field_set:pb.TDeployActivityConfReq.ForceRefresh)
}

// -------------------------------------------------------------------

// TDeployActivityConfRsp

// optional string Err = 1;
inline bool TDeployActivityConfRsp::has_err() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TDeployActivityConfRsp::set_has_err() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TDeployActivityConfRsp::clear_has_err() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TDeployActivityConfRsp::clear_err() {
  if (err_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    err_->clear();
  }
  clear_has_err();
}
inline const ::std::string& TDeployActivityConfRsp::err() const {
  // @@protoc_insertion_point(field_get:pb.TDeployActivityConfRsp.Err)
  return *err_;
}
inline void TDeployActivityConfRsp::set_err(const ::std::string& value) {
  set_has_err();
  if (err_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    err_ = new ::std::string;
  }
  err_->assign(value);
  // @@protoc_insertion_point(field_set:pb.TDeployActivityConfRsp.Err)
}
inline void TDeployActivityConfRsp::set_err(const char* value) {
  set_has_err();
  if (err_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    err_ = new ::std::string;
  }
  err_->assign(value);
  // @@protoc_insertion_point(field_set_char:pb.TDeployActivityConfRsp.Err)
}
inline void TDeployActivityConfRsp::set_err(const char* value, size_t size) {
  set_has_err();
  if (err_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    err_ = new ::std::string;
  }
  err_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:pb.TDeployActivityConfRsp.Err)
}
inline ::std::string* TDeployActivityConfRsp::mutable_err() {
  set_has_err();
  if (err_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    err_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:pb.TDeployActivityConfRsp.Err)
  return err_;
}
inline ::std::string* TDeployActivityConfRsp::release_err() {
  clear_has_err();
  if (err_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = err_;
    err_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void TDeployActivityConfRsp::set_allocated_err(::std::string* err) {
  if (err_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete err_;
  }
  if (err) {
    set_has_err();
    err_ = err;
  } else {
    clear_has_err();
    err_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:pb.TDeployActivityConfRsp.Err)
}

// -------------------------------------------------------------------

// TActivityConfGetActivityConfReq

// optional uint32 MaxVersion = 1;
inline bool TActivityConfGetActivityConfReq::has_maxversion() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TActivityConfGetActivityConfReq::set_has_maxversion() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TActivityConfGetActivityConfReq::clear_has_maxversion() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TActivityConfGetActivityConfReq::clear_maxversion() {
  maxversion_ = 0u;
  clear_has_maxversion();
}
inline ::google::protobuf::uint32 TActivityConfGetActivityConfReq::maxversion() const {
  // @@protoc_insertion_point(field_get:pb.TActivityConfGetActivityConfReq.MaxVersion)
  return maxversion_;
}
inline void TActivityConfGetActivityConfReq::set_maxversion(::google::protobuf::uint32 value) {
  set_has_maxversion();
  maxversion_ = value;
  // @@protoc_insertion_point(field_set:pb.TActivityConfGetActivityConfReq.MaxVersion)
}

// -------------------------------------------------------------------

// TActivityConfGetActivityConfRsp

// optional uint32 MaxVersion = 1;
inline bool TActivityConfGetActivityConfRsp::has_maxversion() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TActivityConfGetActivityConfRsp::set_has_maxversion() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TActivityConfGetActivityConfRsp::clear_has_maxversion() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TActivityConfGetActivityConfRsp::clear_maxversion() {
  maxversion_ = 0u;
  clear_has_maxversion();
}
inline ::google::protobuf::uint32 TActivityConfGetActivityConfRsp::maxversion() const {
  // @@protoc_insertion_point(field_get:pb.TActivityConfGetActivityConfRsp.MaxVersion)
  return maxversion_;
}
inline void TActivityConfGetActivityConfRsp::set_maxversion(::google::protobuf::uint32 value) {
  set_has_maxversion();
  maxversion_ = value;
  // @@protoc_insertion_point(field_set:pb.TActivityConfGetActivityConfRsp.MaxVersion)
}

// repeated .pb.TActivityConfInfo ArrConfInfo = 2;
inline int TActivityConfGetActivityConfRsp::arrconfinfo_size() const {
  return arrconfinfo_.size();
}
inline void TActivityConfGetActivityConfRsp::clear_arrconfinfo() {
  arrconfinfo_.Clear();
}
inline const ::pb::TActivityConfInfo& TActivityConfGetActivityConfRsp::arrconfinfo(int index) const {
  // @@protoc_insertion_point(field_get:pb.TActivityConfGetActivityConfRsp.ArrConfInfo)
  return arrconfinfo_.Get(index);
}
inline ::pb::TActivityConfInfo* TActivityConfGetActivityConfRsp::mutable_arrconfinfo(int index) {
  // @@protoc_insertion_point(field_mutable:pb.TActivityConfGetActivityConfRsp.ArrConfInfo)
  return arrconfinfo_.Mutable(index);
}
inline ::pb::TActivityConfInfo* TActivityConfGetActivityConfRsp::add_arrconfinfo() {
  // @@protoc_insertion_point(field_add:pb.TActivityConfGetActivityConfRsp.ArrConfInfo)
  return arrconfinfo_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::TActivityConfInfo >&
TActivityConfGetActivityConfRsp::arrconfinfo() const {
  // @@protoc_insertion_point(field_list:pb.TActivityConfGetActivityConfRsp.ArrConfInfo)
  return arrconfinfo_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb::TActivityConfInfo >*
TActivityConfGetActivityConfRsp::mutable_arrconfinfo() {
  // @@protoc_insertion_point(field_mutable_list:pb.TActivityConfGetActivityConfRsp.ArrConfInfo)
  return &arrconfinfo_;
}

// -------------------------------------------------------------------

// TActivityConfUpdateNotify

// optional uint32 MaxVersion = 1;
inline bool TActivityConfUpdateNotify::has_maxversion() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TActivityConfUpdateNotify::set_has_maxversion() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TActivityConfUpdateNotify::clear_has_maxversion() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TActivityConfUpdateNotify::clear_maxversion() {
  maxversion_ = 0u;
  clear_has_maxversion();
}
inline ::google::protobuf::uint32 TActivityConfUpdateNotify::maxversion() const {
  // @@protoc_insertion_point(field_get:pb.TActivityConfUpdateNotify.MaxVersion)
  return maxversion_;
}
inline void TActivityConfUpdateNotify::set_maxversion(::google::protobuf::uint32 value) {
  set_has_maxversion();
  maxversion_ = value;
  // @@protoc_insertion_point(field_set:pb.TActivityConfUpdateNotify.MaxVersion)
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace pb

#ifndef SWIG
namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::pb::TActivityConfErrCode> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::pb::TActivityConfErrCode>() {
  return ::pb::TActivityConfErrCode_descriptor();
}
template <> struct is_proto_enum< ::pb::TActivityConfStatus> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::pb::TActivityConfStatus>() {
  return ::pb::TActivityConfStatus_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_net_2fActivityConf_2eproto__INCLUDED
