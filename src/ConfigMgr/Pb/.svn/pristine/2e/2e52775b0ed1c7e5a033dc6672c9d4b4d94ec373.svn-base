// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: net/Funcopen.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "net/Funcopen.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace pb {

namespace {

const ::google::protobuf::Descriptor* TOpenFuncSingleInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TOpenFuncSingleInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* TFuncOpenGetInfoRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TFuncOpenGetInfoRsp_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_net_2fFuncopen_2eproto() {
  protobuf_AddDesc_net_2fFuncopen_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "net/Funcopen.proto");
  GOOGLE_CHECK(file != NULL);
  TOpenFuncSingleInfo_descriptor_ = file->message_type(0);
  static const int TOpenFuncSingleInfo_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TOpenFuncSingleInfo, funcid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TOpenFuncSingleInfo, opentime_),
  };
  TOpenFuncSingleInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TOpenFuncSingleInfo_descriptor_,
      TOpenFuncSingleInfo::default_instance_,
      TOpenFuncSingleInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TOpenFuncSingleInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TOpenFuncSingleInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TOpenFuncSingleInfo));
  TFuncOpenGetInfoRsp_descriptor_ = file->message_type(1);
  static const int TFuncOpenGetInfoRsp_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TFuncOpenGetInfoRsp, openfuncarr_),
  };
  TFuncOpenGetInfoRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TFuncOpenGetInfoRsp_descriptor_,
      TFuncOpenGetInfoRsp::default_instance_,
      TFuncOpenGetInfoRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TFuncOpenGetInfoRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TFuncOpenGetInfoRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TFuncOpenGetInfoRsp));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_net_2fFuncopen_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TOpenFuncSingleInfo_descriptor_, &TOpenFuncSingleInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TFuncOpenGetInfoRsp_descriptor_, &TFuncOpenGetInfoRsp::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_net_2fFuncopen_2eproto() {
  delete TOpenFuncSingleInfo::default_instance_;
  delete TOpenFuncSingleInfo_reflection_;
  delete TFuncOpenGetInfoRsp::default_instance_;
  delete TFuncOpenGetInfoRsp_reflection_;
}

void protobuf_AddDesc_net_2fFuncopen_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\022net/Funcopen.proto\022\002pb\"7\n\023TOpenFuncSin"
    "gleInfo\022\016\n\006FuncId\030\001 \001(\r\022\020\n\010OpenTime\030\002 \001("
    "\004\"C\n\023TFuncOpenGetInfoRsp\022,\n\013OpenFuncArr\030"
    "\001 \003(\0132\027.pb.TOpenFuncSingleInfo", 150);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "net/Funcopen.proto", &protobuf_RegisterTypes);
  TOpenFuncSingleInfo::default_instance_ = new TOpenFuncSingleInfo();
  TFuncOpenGetInfoRsp::default_instance_ = new TFuncOpenGetInfoRsp();
  TOpenFuncSingleInfo::default_instance_->InitAsDefaultInstance();
  TFuncOpenGetInfoRsp::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_net_2fFuncopen_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_net_2fFuncopen_2eproto {
  StaticDescriptorInitializer_net_2fFuncopen_2eproto() {
    protobuf_AddDesc_net_2fFuncopen_2eproto();
  }
} static_descriptor_initializer_net_2fFuncopen_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int TOpenFuncSingleInfo::kFuncIdFieldNumber;
const int TOpenFuncSingleInfo::kOpenTimeFieldNumber;
#endif  // !_MSC_VER

TOpenFuncSingleInfo::TOpenFuncSingleInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TOpenFuncSingleInfo)
}

void TOpenFuncSingleInfo::InitAsDefaultInstance() {
}

TOpenFuncSingleInfo::TOpenFuncSingleInfo(const TOpenFuncSingleInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TOpenFuncSingleInfo)
}

void TOpenFuncSingleInfo::SharedCtor() {
  _cached_size_ = 0;
  funcid_ = 0u;
  opentime_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TOpenFuncSingleInfo::~TOpenFuncSingleInfo() {
  // @@protoc_insertion_point(destructor:pb.TOpenFuncSingleInfo)
  SharedDtor();
}

void TOpenFuncSingleInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TOpenFuncSingleInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TOpenFuncSingleInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TOpenFuncSingleInfo_descriptor_;
}

const TOpenFuncSingleInfo& TOpenFuncSingleInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fFuncopen_2eproto();
  return *default_instance_;
}

TOpenFuncSingleInfo* TOpenFuncSingleInfo::default_instance_ = NULL;

TOpenFuncSingleInfo* TOpenFuncSingleInfo::New() const {
  return new TOpenFuncSingleInfo;
}

void TOpenFuncSingleInfo::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<TOpenFuncSingleInfo*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(opentime_, funcid_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TOpenFuncSingleInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TOpenFuncSingleInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 FuncId = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &funcid_)));
          set_has_funcid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_OpenTime;
        break;
      }

      // optional uint64 OpenTime = 2;
      case 2: {
        if (tag == 16) {
         parse_OpenTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &opentime_)));
          set_has_opentime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TOpenFuncSingleInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TOpenFuncSingleInfo)
  return false;
#undef DO_
}

void TOpenFuncSingleInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TOpenFuncSingleInfo)
  // optional uint32 FuncId = 1;
  if (has_funcid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->funcid(), output);
  }

  // optional uint64 OpenTime = 2;
  if (has_opentime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->opentime(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TOpenFuncSingleInfo)
}

::google::protobuf::uint8* TOpenFuncSingleInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TOpenFuncSingleInfo)
  // optional uint32 FuncId = 1;
  if (has_funcid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->funcid(), target);
  }

  // optional uint64 OpenTime = 2;
  if (has_opentime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->opentime(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TOpenFuncSingleInfo)
  return target;
}

int TOpenFuncSingleInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 FuncId = 1;
    if (has_funcid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->funcid());
    }

    // optional uint64 OpenTime = 2;
    if (has_opentime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->opentime());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TOpenFuncSingleInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TOpenFuncSingleInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TOpenFuncSingleInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TOpenFuncSingleInfo::MergeFrom(const TOpenFuncSingleInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_funcid()) {
      set_funcid(from.funcid());
    }
    if (from.has_opentime()) {
      set_opentime(from.opentime());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TOpenFuncSingleInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TOpenFuncSingleInfo::CopyFrom(const TOpenFuncSingleInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TOpenFuncSingleInfo::IsInitialized() const {

  return true;
}

void TOpenFuncSingleInfo::Swap(TOpenFuncSingleInfo* other) {
  if (other != this) {
    std::swap(funcid_, other->funcid_);
    std::swap(opentime_, other->opentime_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TOpenFuncSingleInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TOpenFuncSingleInfo_descriptor_;
  metadata.reflection = TOpenFuncSingleInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TFuncOpenGetInfoRsp::kOpenFuncArrFieldNumber;
#endif  // !_MSC_VER

TFuncOpenGetInfoRsp::TFuncOpenGetInfoRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TFuncOpenGetInfoRsp)
}

void TFuncOpenGetInfoRsp::InitAsDefaultInstance() {
}

TFuncOpenGetInfoRsp::TFuncOpenGetInfoRsp(const TFuncOpenGetInfoRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TFuncOpenGetInfoRsp)
}

void TFuncOpenGetInfoRsp::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TFuncOpenGetInfoRsp::~TFuncOpenGetInfoRsp() {
  // @@protoc_insertion_point(destructor:pb.TFuncOpenGetInfoRsp)
  SharedDtor();
}

void TFuncOpenGetInfoRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TFuncOpenGetInfoRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TFuncOpenGetInfoRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TFuncOpenGetInfoRsp_descriptor_;
}

const TFuncOpenGetInfoRsp& TFuncOpenGetInfoRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fFuncopen_2eproto();
  return *default_instance_;
}

TFuncOpenGetInfoRsp* TFuncOpenGetInfoRsp::default_instance_ = NULL;

TFuncOpenGetInfoRsp* TFuncOpenGetInfoRsp::New() const {
  return new TFuncOpenGetInfoRsp;
}

void TFuncOpenGetInfoRsp::Clear() {
  openfuncarr_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TFuncOpenGetInfoRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TFuncOpenGetInfoRsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .pb.TOpenFuncSingleInfo OpenFuncArr = 1;
      case 1: {
        if (tag == 10) {
         parse_OpenFuncArr:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_openfuncarr()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_OpenFuncArr;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TFuncOpenGetInfoRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TFuncOpenGetInfoRsp)
  return false;
#undef DO_
}

void TFuncOpenGetInfoRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TFuncOpenGetInfoRsp)
  // repeated .pb.TOpenFuncSingleInfo OpenFuncArr = 1;
  for (int i = 0; i < this->openfuncarr_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->openfuncarr(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TFuncOpenGetInfoRsp)
}

::google::protobuf::uint8* TFuncOpenGetInfoRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TFuncOpenGetInfoRsp)
  // repeated .pb.TOpenFuncSingleInfo OpenFuncArr = 1;
  for (int i = 0; i < this->openfuncarr_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->openfuncarr(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TFuncOpenGetInfoRsp)
  return target;
}

int TFuncOpenGetInfoRsp::ByteSize() const {
  int total_size = 0;

  // repeated .pb.TOpenFuncSingleInfo OpenFuncArr = 1;
  total_size += 1 * this->openfuncarr_size();
  for (int i = 0; i < this->openfuncarr_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->openfuncarr(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TFuncOpenGetInfoRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TFuncOpenGetInfoRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TFuncOpenGetInfoRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TFuncOpenGetInfoRsp::MergeFrom(const TFuncOpenGetInfoRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  openfuncarr_.MergeFrom(from.openfuncarr_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TFuncOpenGetInfoRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TFuncOpenGetInfoRsp::CopyFrom(const TFuncOpenGetInfoRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TFuncOpenGetInfoRsp::IsInitialized() const {

  return true;
}

void TFuncOpenGetInfoRsp::Swap(TFuncOpenGetInfoRsp* other) {
  if (other != this) {
    openfuncarr_.Swap(&other->openfuncarr_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TFuncOpenGetInfoRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TFuncOpenGetInfoRsp_descriptor_;
  metadata.reflection = TFuncOpenGetInfoRsp_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace pb

// @@protoc_insertion_point(global_scope)
