// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: net/WorldBossNew.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "net/WorldBossNew.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace pb {

namespace {

const ::google::protobuf::Descriptor* TWorldBossNewUserDamageSingle_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TWorldBossNewUserDamageSingle_reflection_ = NULL;
const ::google::protobuf::Descriptor* TWorldBossNewUserRankType_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TWorldBossNewUserRankType_reflection_ = NULL;
const ::google::protobuf::Descriptor* TWorldBossNewGetBossInfoRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TWorldBossNewGetBossInfoRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* TWorldBossNewGetAboveRankRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TWorldBossNewGetAboveRankRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* TWorldBossNewGetRankInfoReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TWorldBossNewGetRankInfoReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* TWorldBossNewGetRankInfoRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TWorldBossNewGetRankInfoRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* TWorldBossNewEnterBattleReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TWorldBossNewEnterBattleReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* TWorldBossNewEnterBattleRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TWorldBossNewEnterBattleRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* TWorldBossNewReportBattleReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TWorldBossNewReportBattleReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* TWorldBossNewReportBattleRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TWorldBossNewReportBattleRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* TWorldBossNewBuyAtkNumRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TWorldBossNewBuyAtkNumRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* TWorldBossNewServerPush_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TWorldBossNewServerPush_reflection_ = NULL;
const ::google::protobuf::Descriptor* TWorldBossNewReceiveDamageRewardReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TWorldBossNewReceiveDamageRewardReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* TWorldBossNewReceiveDamageRewardRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TWorldBossNewReceiveDamageRewardRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* TWorldBossNewAutoReceiveDamageRewardRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TWorldBossNewAutoReceiveDamageRewardRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* TWorldBossNewUnit_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TWorldBossNewUnit_reflection_ = NULL;
const ::google::protobuf::Descriptor* TWorldBossNewBattleRecord_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TWorldBossNewBattleRecord_reflection_ = NULL;
const ::google::protobuf::Descriptor* TWorldBossNewGetBattleRecordRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TWorldBossNewGetBattleRecordRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* TWorldBossNewGetRankInfoByLimitReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TWorldBossNewGetRankInfoByLimitReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* TWorldBossNewGetRankInfoByLimitRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TWorldBossNewGetRankInfoByLimitRsp_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_net_2fWorldBossNew_2eproto() {
  protobuf_AddDesc_net_2fWorldBossNew_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "net/WorldBossNew.proto");
  GOOGLE_CHECK(file != NULL);
  TWorldBossNewUserDamageSingle_descriptor_ = file->message_type(0);
  static const int TWorldBossNewUserDamageSingle_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TWorldBossNewUserDamageSingle, usersimple_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TWorldBossNewUserDamageSingle, totaldamage_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TWorldBossNewUserDamageSingle, maxdamage_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TWorldBossNewUserDamageSingle, rank_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TWorldBossNewUserDamageSingle, lastchangetime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TWorldBossNewUserDamageSingle, reportid_),
  };
  TWorldBossNewUserDamageSingle_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TWorldBossNewUserDamageSingle_descriptor_,
      TWorldBossNewUserDamageSingle::default_instance_,
      TWorldBossNewUserDamageSingle_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TWorldBossNewUserDamageSingle, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TWorldBossNewUserDamageSingle, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TWorldBossNewUserDamageSingle));
  TWorldBossNewUserRankType_descriptor_ = file->message_type(1);
  static const int TWorldBossNewUserRankType_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TWorldBossNewUserRankType, rankid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TWorldBossNewUserRankType, usernum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TWorldBossNewUserRankType, damagemin_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TWorldBossNewUserRankType, userrankarr_),
  };
  TWorldBossNewUserRankType_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TWorldBossNewUserRankType_descriptor_,
      TWorldBossNewUserRankType::default_instance_,
      TWorldBossNewUserRankType_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TWorldBossNewUserRankType, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TWorldBossNewUserRankType, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TWorldBossNewUserRankType));
  TWorldBossNewGetBossInfoRsp_descriptor_ = file->message_type(2);
  static const int TWorldBossNewGetBossInfoRsp_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TWorldBossNewGetBossInfoRsp, bossid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TWorldBossNewGetBossInfoRsp, opentime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TWorldBossNewGetBossInfoRsp, usedatknum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TWorldBossNewGetBossInfoRsp, myrankinfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TWorldBossNewGetBossInfoRsp, ranktypearr_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TWorldBossNewGetBossInfoRsp, buynum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TWorldBossNewGetBossInfoRsp, buyatknum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TWorldBossNewGetBossInfoRsp, receiveddamagerewardtidarr_),
  };
  TWorldBossNewGetBossInfoRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TWorldBossNewGetBossInfoRsp_descriptor_,
      TWorldBossNewGetBossInfoRsp::default_instance_,
      TWorldBossNewGetBossInfoRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TWorldBossNewGetBossInfoRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TWorldBossNewGetBossInfoRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TWorldBossNewGetBossInfoRsp));
  TWorldBossNewGetAboveRankRsp_descriptor_ = file->message_type(3);
  static const int TWorldBossNewGetAboveRankRsp_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TWorldBossNewGetAboveRankRsp, aboverankarr_),
  };
  TWorldBossNewGetAboveRankRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TWorldBossNewGetAboveRankRsp_descriptor_,
      TWorldBossNewGetAboveRankRsp::default_instance_,
      TWorldBossNewGetAboveRankRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TWorldBossNewGetAboveRankRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TWorldBossNewGetAboveRankRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TWorldBossNewGetAboveRankRsp));
  TWorldBossNewGetRankInfoReq_descriptor_ = file->message_type(4);
  static const int TWorldBossNewGetRankInfoReq_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TWorldBossNewGetRankInfoReq, rankid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TWorldBossNewGetRankInfoReq, offset_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TWorldBossNewGetRankInfoReq, limit_),
  };
  TWorldBossNewGetRankInfoReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TWorldBossNewGetRankInfoReq_descriptor_,
      TWorldBossNewGetRankInfoReq::default_instance_,
      TWorldBossNewGetRankInfoReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TWorldBossNewGetRankInfoReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TWorldBossNewGetRankInfoReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TWorldBossNewGetRankInfoReq));
  TWorldBossNewGetRankInfoRsp_descriptor_ = file->message_type(5);
  static const int TWorldBossNewGetRankInfoRsp_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TWorldBossNewGetRankInfoRsp, userrankarr_),
  };
  TWorldBossNewGetRankInfoRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TWorldBossNewGetRankInfoRsp_descriptor_,
      TWorldBossNewGetRankInfoRsp::default_instance_,
      TWorldBossNewGetRankInfoRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TWorldBossNewGetRankInfoRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TWorldBossNewGetRankInfoRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TWorldBossNewGetRankInfoRsp));
  TWorldBossNewEnterBattleReq_descriptor_ = file->message_type(6);
  static const int TWorldBossNewEnterBattleReq_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TWorldBossNewEnterBattleReq, bossid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TWorldBossNewEnterBattleReq, battlecheckparam_),
  };
  TWorldBossNewEnterBattleReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TWorldBossNewEnterBattleReq_descriptor_,
      TWorldBossNewEnterBattleReq::default_instance_,
      TWorldBossNewEnterBattleReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TWorldBossNewEnterBattleReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TWorldBossNewEnterBattleReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TWorldBossNewEnterBattleReq));
  TWorldBossNewEnterBattleRsp_descriptor_ = file->message_type(7);
  static const int TWorldBossNewEnterBattleRsp_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TWorldBossNewEnterBattleRsp, battleargs_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TWorldBossNewEnterBattleRsp, usedatknum_),
  };
  TWorldBossNewEnterBattleRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TWorldBossNewEnterBattleRsp_descriptor_,
      TWorldBossNewEnterBattleRsp::default_instance_,
      TWorldBossNewEnterBattleRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TWorldBossNewEnterBattleRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TWorldBossNewEnterBattleRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TWorldBossNewEnterBattleRsp));
  TWorldBossNewReportBattleReq_descriptor_ = file->message_type(8);
  static const int TWorldBossNewReportBattleReq_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TWorldBossNewReportBattleReq, bossid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TWorldBossNewReportBattleReq, battleret_),
  };
  TWorldBossNewReportBattleReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TWorldBossNewReportBattleReq_descriptor_,
      TWorldBossNewReportBattleReq::default_instance_,
      TWorldBossNewReportBattleReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TWorldBossNewReportBattleReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TWorldBossNewReportBattleReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TWorldBossNewReportBattleReq));
  TWorldBossNewReportBattleRsp_descriptor_ = file->message_type(9);
  static const int TWorldBossNewReportBattleRsp_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TWorldBossNewReportBattleRsp, usedatknum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TWorldBossNewReportBattleRsp, myuserrank_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TWorldBossNewReportBattleRsp, isnewrecord_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TWorldBossNewReportBattleRsp, droparray_),
  };
  TWorldBossNewReportBattleRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TWorldBossNewReportBattleRsp_descriptor_,
      TWorldBossNewReportBattleRsp::default_instance_,
      TWorldBossNewReportBattleRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TWorldBossNewReportBattleRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TWorldBossNewReportBattleRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TWorldBossNewReportBattleRsp));
  TWorldBossNewBuyAtkNumRsp_descriptor_ = file->message_type(10);
  static const int TWorldBossNewBuyAtkNumRsp_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TWorldBossNewBuyAtkNumRsp, buynum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TWorldBossNewBuyAtkNumRsp, buyatknum_),
  };
  TWorldBossNewBuyAtkNumRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TWorldBossNewBuyAtkNumRsp_descriptor_,
      TWorldBossNewBuyAtkNumRsp::default_instance_,
      TWorldBossNewBuyAtkNumRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TWorldBossNewBuyAtkNumRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TWorldBossNewBuyAtkNumRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TWorldBossNewBuyAtkNumRsp));
  TWorldBossNewServerPush_descriptor_ = file->message_type(11);
  static const int TWorldBossNewServerPush_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TWorldBossNewServerPush, ranktypearr_),
  };
  TWorldBossNewServerPush_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TWorldBossNewServerPush_descriptor_,
      TWorldBossNewServerPush::default_instance_,
      TWorldBossNewServerPush_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TWorldBossNewServerPush, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TWorldBossNewServerPush, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TWorldBossNewServerPush));
  TWorldBossNewReceiveDamageRewardReq_descriptor_ = file->message_type(12);
  static const int TWorldBossNewReceiveDamageRewardReq_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TWorldBossNewReceiveDamageRewardReq, damagerewardtid_),
  };
  TWorldBossNewReceiveDamageRewardReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TWorldBossNewReceiveDamageRewardReq_descriptor_,
      TWorldBossNewReceiveDamageRewardReq::default_instance_,
      TWorldBossNewReceiveDamageRewardReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TWorldBossNewReceiveDamageRewardReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TWorldBossNewReceiveDamageRewardReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TWorldBossNewReceiveDamageRewardReq));
  TWorldBossNewReceiveDamageRewardRsp_descriptor_ = file->message_type(13);
  static const int TWorldBossNewReceiveDamageRewardRsp_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TWorldBossNewReceiveDamageRewardRsp, rewardarr_),
  };
  TWorldBossNewReceiveDamageRewardRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TWorldBossNewReceiveDamageRewardRsp_descriptor_,
      TWorldBossNewReceiveDamageRewardRsp::default_instance_,
      TWorldBossNewReceiveDamageRewardRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TWorldBossNewReceiveDamageRewardRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TWorldBossNewReceiveDamageRewardRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TWorldBossNewReceiveDamageRewardRsp));
  TWorldBossNewAutoReceiveDamageRewardRsp_descriptor_ = file->message_type(14);
  static const int TWorldBossNewAutoReceiveDamageRewardRsp_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TWorldBossNewAutoReceiveDamageRewardRsp, receiveddamagerewardtidarr_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TWorldBossNewAutoReceiveDamageRewardRsp, rewardarr_),
  };
  TWorldBossNewAutoReceiveDamageRewardRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TWorldBossNewAutoReceiveDamageRewardRsp_descriptor_,
      TWorldBossNewAutoReceiveDamageRewardRsp::default_instance_,
      TWorldBossNewAutoReceiveDamageRewardRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TWorldBossNewAutoReceiveDamageRewardRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TWorldBossNewAutoReceiveDamageRewardRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TWorldBossNewAutoReceiveDamageRewardRsp));
  TWorldBossNewUnit_descriptor_ = file->message_type(15);
  static const int TWorldBossNewUnit_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TWorldBossNewUnit, hid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TWorldBossNewUnit, pos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TWorldBossNewUnit, starlv_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TWorldBossNewUnit, level_),
  };
  TWorldBossNewUnit_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TWorldBossNewUnit_descriptor_,
      TWorldBossNewUnit::default_instance_,
      TWorldBossNewUnit_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TWorldBossNewUnit, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TWorldBossNewUnit, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TWorldBossNewUnit));
  TWorldBossNewBattleRecord_descriptor_ = file->message_type(16);
  static const int TWorldBossNewBattleRecord_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TWorldBossNewBattleRecord, reportid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TWorldBossNewBattleRecord, time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TWorldBossNewBattleRecord, damage_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TWorldBossNewBattleRecord, unitarr_),
  };
  TWorldBossNewBattleRecord_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TWorldBossNewBattleRecord_descriptor_,
      TWorldBossNewBattleRecord::default_instance_,
      TWorldBossNewBattleRecord_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TWorldBossNewBattleRecord, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TWorldBossNewBattleRecord, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TWorldBossNewBattleRecord));
  TWorldBossNewGetBattleRecordRsp_descriptor_ = file->message_type(17);
  static const int TWorldBossNewGetBattleRecordRsp_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TWorldBossNewGetBattleRecordRsp, recordarr_),
  };
  TWorldBossNewGetBattleRecordRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TWorldBossNewGetBattleRecordRsp_descriptor_,
      TWorldBossNewGetBattleRecordRsp::default_instance_,
      TWorldBossNewGetBattleRecordRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TWorldBossNewGetBattleRecordRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TWorldBossNewGetBattleRecordRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TWorldBossNewGetBattleRecordRsp));
  TWorldBossNewGetRankInfoByLimitReq_descriptor_ = file->message_type(18);
  static const int TWorldBossNewGetRankInfoByLimitReq_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TWorldBossNewGetRankInfoByLimitReq, offset_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TWorldBossNewGetRankInfoByLimitReq, limit_),
  };
  TWorldBossNewGetRankInfoByLimitReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TWorldBossNewGetRankInfoByLimitReq_descriptor_,
      TWorldBossNewGetRankInfoByLimitReq::default_instance_,
      TWorldBossNewGetRankInfoByLimitReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TWorldBossNewGetRankInfoByLimitReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TWorldBossNewGetRankInfoByLimitReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TWorldBossNewGetRankInfoByLimitReq));
  TWorldBossNewGetRankInfoByLimitRsp_descriptor_ = file->message_type(19);
  static const int TWorldBossNewGetRankInfoByLimitRsp_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TWorldBossNewGetRankInfoByLimitRsp, damagerankarr_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TWorldBossNewGetRankInfoByLimitRsp, myrankinfo_),
  };
  TWorldBossNewGetRankInfoByLimitRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TWorldBossNewGetRankInfoByLimitRsp_descriptor_,
      TWorldBossNewGetRankInfoByLimitRsp::default_instance_,
      TWorldBossNewGetRankInfoByLimitRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TWorldBossNewGetRankInfoByLimitRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TWorldBossNewGetRankInfoByLimitRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TWorldBossNewGetRankInfoByLimitRsp));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_net_2fWorldBossNew_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TWorldBossNewUserDamageSingle_descriptor_, &TWorldBossNewUserDamageSingle::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TWorldBossNewUserRankType_descriptor_, &TWorldBossNewUserRankType::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TWorldBossNewGetBossInfoRsp_descriptor_, &TWorldBossNewGetBossInfoRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TWorldBossNewGetAboveRankRsp_descriptor_, &TWorldBossNewGetAboveRankRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TWorldBossNewGetRankInfoReq_descriptor_, &TWorldBossNewGetRankInfoReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TWorldBossNewGetRankInfoRsp_descriptor_, &TWorldBossNewGetRankInfoRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TWorldBossNewEnterBattleReq_descriptor_, &TWorldBossNewEnterBattleReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TWorldBossNewEnterBattleRsp_descriptor_, &TWorldBossNewEnterBattleRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TWorldBossNewReportBattleReq_descriptor_, &TWorldBossNewReportBattleReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TWorldBossNewReportBattleRsp_descriptor_, &TWorldBossNewReportBattleRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TWorldBossNewBuyAtkNumRsp_descriptor_, &TWorldBossNewBuyAtkNumRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TWorldBossNewServerPush_descriptor_, &TWorldBossNewServerPush::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TWorldBossNewReceiveDamageRewardReq_descriptor_, &TWorldBossNewReceiveDamageRewardReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TWorldBossNewReceiveDamageRewardRsp_descriptor_, &TWorldBossNewReceiveDamageRewardRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TWorldBossNewAutoReceiveDamageRewardRsp_descriptor_, &TWorldBossNewAutoReceiveDamageRewardRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TWorldBossNewUnit_descriptor_, &TWorldBossNewUnit::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TWorldBossNewBattleRecord_descriptor_, &TWorldBossNewBattleRecord::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TWorldBossNewGetBattleRecordRsp_descriptor_, &TWorldBossNewGetBattleRecordRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TWorldBossNewGetRankInfoByLimitReq_descriptor_, &TWorldBossNewGetRankInfoByLimitReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TWorldBossNewGetRankInfoByLimitRsp_descriptor_, &TWorldBossNewGetRankInfoByLimitRsp::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_net_2fWorldBossNew_2eproto() {
  delete TWorldBossNewUserDamageSingle::default_instance_;
  delete TWorldBossNewUserDamageSingle_reflection_;
  delete TWorldBossNewUserRankType::default_instance_;
  delete TWorldBossNewUserRankType_reflection_;
  delete TWorldBossNewGetBossInfoRsp::default_instance_;
  delete TWorldBossNewGetBossInfoRsp_reflection_;
  delete TWorldBossNewGetAboveRankRsp::default_instance_;
  delete TWorldBossNewGetAboveRankRsp_reflection_;
  delete TWorldBossNewGetRankInfoReq::default_instance_;
  delete TWorldBossNewGetRankInfoReq_reflection_;
  delete TWorldBossNewGetRankInfoRsp::default_instance_;
  delete TWorldBossNewGetRankInfoRsp_reflection_;
  delete TWorldBossNewEnterBattleReq::default_instance_;
  delete TWorldBossNewEnterBattleReq_reflection_;
  delete TWorldBossNewEnterBattleRsp::default_instance_;
  delete TWorldBossNewEnterBattleRsp_reflection_;
  delete TWorldBossNewReportBattleReq::default_instance_;
  delete TWorldBossNewReportBattleReq_reflection_;
  delete TWorldBossNewReportBattleRsp::default_instance_;
  delete TWorldBossNewReportBattleRsp_reflection_;
  delete TWorldBossNewBuyAtkNumRsp::default_instance_;
  delete TWorldBossNewBuyAtkNumRsp_reflection_;
  delete TWorldBossNewServerPush::default_instance_;
  delete TWorldBossNewServerPush_reflection_;
  delete TWorldBossNewReceiveDamageRewardReq::default_instance_;
  delete TWorldBossNewReceiveDamageRewardReq_reflection_;
  delete TWorldBossNewReceiveDamageRewardRsp::default_instance_;
  delete TWorldBossNewReceiveDamageRewardRsp_reflection_;
  delete TWorldBossNewAutoReceiveDamageRewardRsp::default_instance_;
  delete TWorldBossNewAutoReceiveDamageRewardRsp_reflection_;
  delete TWorldBossNewUnit::default_instance_;
  delete TWorldBossNewUnit_reflection_;
  delete TWorldBossNewBattleRecord::default_instance_;
  delete TWorldBossNewBattleRecord_reflection_;
  delete TWorldBossNewGetBattleRecordRsp::default_instance_;
  delete TWorldBossNewGetBattleRecordRsp_reflection_;
  delete TWorldBossNewGetRankInfoByLimitReq::default_instance_;
  delete TWorldBossNewGetRankInfoByLimitReq_reflection_;
  delete TWorldBossNewGetRankInfoByLimitRsp::default_instance_;
  delete TWorldBossNewGetRankInfoByLimitRsp_reflection_;
}

void protobuf_AddDesc_net_2fWorldBossNew_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::pb::protobuf_AddDesc_net_2fBattle_2eproto();
  ::pb::protobuf_AddDesc_net_2fUser_2eproto();
  ::pb::protobuf_AddDesc_net_2fCommonReward_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\026net/WorldBossNew.proto\022\002pb\032\020net/Battle"
    ".proto\032\016net/User.proto\032\026net/CommonReward"
    ".proto\"\250\001\n\035TWorldBossNewUserDamageSingle"
    "\022\'\n\nUserSimple\030\001 \001(\0132\023.pb.TUserSimpleInf"
    "o\022\023\n\013TotalDamage\030\002 \001(\004\022\021\n\tMaxDamage\030\003 \001("
    "\004\022\014\n\004Rank\030\004 \001(\r\022\026\n\016LastChangeTime\030\005 \001(\004\022"
    "\020\n\010ReportId\030\006 \001(\004\"\207\001\n\031TWorldBossNewUserR"
    "ankType\022\016\n\006RankId\030\001 \001(\r\022\017\n\007UserNum\030\002 \001(\r"
    "\022\021\n\tDamageMin\030\003 \001(\004\0226\n\013UserRankArr\030\004 \003(\013"
    "2!.pb.TWorldBossNewUserDamageSingle\"\205\002\n\033"
    "TWorldBossNewGetBossInfoRsp\022\016\n\006BossId\030\001 "
    "\001(\r\022\020\n\010OpenTime\030\002 \001(\004\022\022\n\nUsedAtkNum\030\003 \001("
    "\r\0225\n\nMyRankInfo\030\004 \001(\0132!.pb.TWorldBossNew"
    "UserDamageSingle\0222\n\013RankTypeArr\030\005 \003(\0132\035."
    "pb.TWorldBossNewUserRankType\022\016\n\006BuyNum\030\006"
    " \001(\r\022\021\n\tBuyAtkNum\030\007 \001(\r\022\"\n\032ReceivedDamag"
    "eRewardTidArr\030\010 \003(\r\"W\n\034TWorldBossNewGetA"
    "boveRankRsp\0227\n\014AboveRankArr\030\001 \003(\0132!.pb.T"
    "WorldBossNewUserDamageSingle\"L\n\033TWorldBo"
    "ssNewGetRankInfoReq\022\016\n\006RankId\030\001 \001(\r\022\016\n\006O"
    "ffset\030\002 \001(\r\022\r\n\005Limit\030\003 \001(\r\"U\n\033TWorldBoss"
    "NewGetRankInfoRsp\0226\n\013UserRankArr\030\001 \003(\0132!"
    ".pb.TWorldBossNewUserDamageSingle\"^\n\033TWo"
    "rldBossNewEnterBattleReq\022\016\n\006BossId\030\001 \001(\r"
    "\022/\n\020BattleCheckParam\030\002 \001(\0132\025.pb.TBattleC"
    "heckParam\"V\n\033TWorldBossNewEnterBattleRsp"
    "\022#\n\nBattleArgs\030\001 \001(\0132\017.pb.TBattleArgs\022\022\n"
    "\nUsedAtkNum\030\002 \001(\r\"A\n\034TWorldBossNewReport"
    "BattleReq\022\016\n\006BossId\030\001 \001(\r\022\021\n\tBattleRet\030\002"
    " \001(\014\"\244\001\n\034TWorldBossNewReportBattleRsp\022\022\n"
    "\nUsedAtkNum\030\001 \001(\r\0225\n\nMyUserRank\030\002 \001(\0132!."
    "pb.TWorldBossNewUserDamageSingle\022\023\n\013IsNe"
    "wRecord\030\003 \001(\010\022$\n\tDropArray\030\004 \003(\0132\021.pb.TC"
    "ommonReward\">\n\031TWorldBossNewBuyAtkNumRsp"
    "\022\016\n\006BuyNum\030\001 \001(\r\022\021\n\tBuyAtkNum\030\002 \001(\r\"M\n\027T"
    "WorldBossNewServerPush\0222\n\013RankTypeArr\030\001 "
    "\003(\0132\035.pb.TWorldBossNewUserRankType\">\n#TW"
    "orldBossNewReceiveDamageRewardReq\022\027\n\017Dam"
    "ageRewardTid\030\001 \001(\r\"K\n#TWorldBossNewRecei"
    "veDamageRewardRsp\022$\n\tRewardArr\030\001 \003(\0132\021.p"
    "b.TCommonReward\"s\n\'TWorldBossNewAutoRece"
    "iveDamageRewardRsp\022\"\n\032ReceivedDamageRewa"
    "rdTidArr\030\001 \003(\r\022$\n\tRewardArr\030\002 \003(\0132\021.pb.T"
    "CommonReward\"L\n\021TWorldBossNewUnit\022\013\n\003Hid"
    "\030\001 \001(\r\022\013\n\003Pos\030\002 \001(\r\022\016\n\006StarLv\030\003 \001(\r\022\r\n\005L"
    "evel\030\004 \001(\r\"s\n\031TWorldBossNewBattleRecord\022"
    "\020\n\010ReportId\030\001 \001(\004\022\014\n\004Time\030\002 \001(\004\022\016\n\006Damag"
    "e\030\003 \001(\004\022&\n\007UnitArr\030\004 \003(\0132\025.pb.TWorldBoss"
    "NewUnit\"S\n\037TWorldBossNewGetBattleRecordR"
    "sp\0220\n\tRecordArr\030\001 \003(\0132\035.pb.TWorldBossNew"
    "BattleRecord\"C\n\"TWorldBossNewGetRankInfo"
    "ByLimitReq\022\016\n\006Offset\030\001 \001(\r\022\r\n\005Limit\030\002 \001("
    "\r\"\225\001\n\"TWorldBossNewGetRankInfoByLimitRsp"
    "\0228\n\rDamageRankArr\030\001 \003(\0132!.pb.TWorldBossN"
    "ewUserDamageSingle\0225\n\nMyRankInfo\030\002 \001(\0132!"
    ".pb.TWorldBossNewUserDamageSingle", 2233);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "net/WorldBossNew.proto", &protobuf_RegisterTypes);
  TWorldBossNewUserDamageSingle::default_instance_ = new TWorldBossNewUserDamageSingle();
  TWorldBossNewUserRankType::default_instance_ = new TWorldBossNewUserRankType();
  TWorldBossNewGetBossInfoRsp::default_instance_ = new TWorldBossNewGetBossInfoRsp();
  TWorldBossNewGetAboveRankRsp::default_instance_ = new TWorldBossNewGetAboveRankRsp();
  TWorldBossNewGetRankInfoReq::default_instance_ = new TWorldBossNewGetRankInfoReq();
  TWorldBossNewGetRankInfoRsp::default_instance_ = new TWorldBossNewGetRankInfoRsp();
  TWorldBossNewEnterBattleReq::default_instance_ = new TWorldBossNewEnterBattleReq();
  TWorldBossNewEnterBattleRsp::default_instance_ = new TWorldBossNewEnterBattleRsp();
  TWorldBossNewReportBattleReq::default_instance_ = new TWorldBossNewReportBattleReq();
  TWorldBossNewReportBattleRsp::default_instance_ = new TWorldBossNewReportBattleRsp();
  TWorldBossNewBuyAtkNumRsp::default_instance_ = new TWorldBossNewBuyAtkNumRsp();
  TWorldBossNewServerPush::default_instance_ = new TWorldBossNewServerPush();
  TWorldBossNewReceiveDamageRewardReq::default_instance_ = new TWorldBossNewReceiveDamageRewardReq();
  TWorldBossNewReceiveDamageRewardRsp::default_instance_ = new TWorldBossNewReceiveDamageRewardRsp();
  TWorldBossNewAutoReceiveDamageRewardRsp::default_instance_ = new TWorldBossNewAutoReceiveDamageRewardRsp();
  TWorldBossNewUnit::default_instance_ = new TWorldBossNewUnit();
  TWorldBossNewBattleRecord::default_instance_ = new TWorldBossNewBattleRecord();
  TWorldBossNewGetBattleRecordRsp::default_instance_ = new TWorldBossNewGetBattleRecordRsp();
  TWorldBossNewGetRankInfoByLimitReq::default_instance_ = new TWorldBossNewGetRankInfoByLimitReq();
  TWorldBossNewGetRankInfoByLimitRsp::default_instance_ = new TWorldBossNewGetRankInfoByLimitRsp();
  TWorldBossNewUserDamageSingle::default_instance_->InitAsDefaultInstance();
  TWorldBossNewUserRankType::default_instance_->InitAsDefaultInstance();
  TWorldBossNewGetBossInfoRsp::default_instance_->InitAsDefaultInstance();
  TWorldBossNewGetAboveRankRsp::default_instance_->InitAsDefaultInstance();
  TWorldBossNewGetRankInfoReq::default_instance_->InitAsDefaultInstance();
  TWorldBossNewGetRankInfoRsp::default_instance_->InitAsDefaultInstance();
  TWorldBossNewEnterBattleReq::default_instance_->InitAsDefaultInstance();
  TWorldBossNewEnterBattleRsp::default_instance_->InitAsDefaultInstance();
  TWorldBossNewReportBattleReq::default_instance_->InitAsDefaultInstance();
  TWorldBossNewReportBattleRsp::default_instance_->InitAsDefaultInstance();
  TWorldBossNewBuyAtkNumRsp::default_instance_->InitAsDefaultInstance();
  TWorldBossNewServerPush::default_instance_->InitAsDefaultInstance();
  TWorldBossNewReceiveDamageRewardReq::default_instance_->InitAsDefaultInstance();
  TWorldBossNewReceiveDamageRewardRsp::default_instance_->InitAsDefaultInstance();
  TWorldBossNewAutoReceiveDamageRewardRsp::default_instance_->InitAsDefaultInstance();
  TWorldBossNewUnit::default_instance_->InitAsDefaultInstance();
  TWorldBossNewBattleRecord::default_instance_->InitAsDefaultInstance();
  TWorldBossNewGetBattleRecordRsp::default_instance_->InitAsDefaultInstance();
  TWorldBossNewGetRankInfoByLimitReq::default_instance_->InitAsDefaultInstance();
  TWorldBossNewGetRankInfoByLimitRsp::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_net_2fWorldBossNew_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_net_2fWorldBossNew_2eproto {
  StaticDescriptorInitializer_net_2fWorldBossNew_2eproto() {
    protobuf_AddDesc_net_2fWorldBossNew_2eproto();
  }
} static_descriptor_initializer_net_2fWorldBossNew_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int TWorldBossNewUserDamageSingle::kUserSimpleFieldNumber;
const int TWorldBossNewUserDamageSingle::kTotalDamageFieldNumber;
const int TWorldBossNewUserDamageSingle::kMaxDamageFieldNumber;
const int TWorldBossNewUserDamageSingle::kRankFieldNumber;
const int TWorldBossNewUserDamageSingle::kLastChangeTimeFieldNumber;
const int TWorldBossNewUserDamageSingle::kReportIdFieldNumber;
#endif  // !_MSC_VER

TWorldBossNewUserDamageSingle::TWorldBossNewUserDamageSingle()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TWorldBossNewUserDamageSingle)
}

void TWorldBossNewUserDamageSingle::InitAsDefaultInstance() {
  usersimple_ = const_cast< ::pb::TUserSimpleInfo*>(&::pb::TUserSimpleInfo::default_instance());
}

TWorldBossNewUserDamageSingle::TWorldBossNewUserDamageSingle(const TWorldBossNewUserDamageSingle& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TWorldBossNewUserDamageSingle)
}

void TWorldBossNewUserDamageSingle::SharedCtor() {
  _cached_size_ = 0;
  usersimple_ = NULL;
  totaldamage_ = GOOGLE_ULONGLONG(0);
  maxdamage_ = GOOGLE_ULONGLONG(0);
  rank_ = 0u;
  lastchangetime_ = GOOGLE_ULONGLONG(0);
  reportid_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TWorldBossNewUserDamageSingle::~TWorldBossNewUserDamageSingle() {
  // @@protoc_insertion_point(destructor:pb.TWorldBossNewUserDamageSingle)
  SharedDtor();
}

void TWorldBossNewUserDamageSingle::SharedDtor() {
  if (this != default_instance_) {
    delete usersimple_;
  }
}

void TWorldBossNewUserDamageSingle::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TWorldBossNewUserDamageSingle::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TWorldBossNewUserDamageSingle_descriptor_;
}

const TWorldBossNewUserDamageSingle& TWorldBossNewUserDamageSingle::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fWorldBossNew_2eproto();
  return *default_instance_;
}

TWorldBossNewUserDamageSingle* TWorldBossNewUserDamageSingle::default_instance_ = NULL;

TWorldBossNewUserDamageSingle* TWorldBossNewUserDamageSingle::New() const {
  return new TWorldBossNewUserDamageSingle;
}

void TWorldBossNewUserDamageSingle::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<TWorldBossNewUserDamageSingle*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 63) {
    ZR_(totaldamage_, rank_);
    if (has_usersimple()) {
      if (usersimple_ != NULL) usersimple_->::pb::TUserSimpleInfo::Clear();
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TWorldBossNewUserDamageSingle::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TWorldBossNewUserDamageSingle)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .pb.TUserSimpleInfo UserSimple = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_usersimple()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_TotalDamage;
        break;
      }

      // optional uint64 TotalDamage = 2;
      case 2: {
        if (tag == 16) {
         parse_TotalDamage:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &totaldamage_)));
          set_has_totaldamage();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_MaxDamage;
        break;
      }

      // optional uint64 MaxDamage = 3;
      case 3: {
        if (tag == 24) {
         parse_MaxDamage:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &maxdamage_)));
          set_has_maxdamage();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_Rank;
        break;
      }

      // optional uint32 Rank = 4;
      case 4: {
        if (tag == 32) {
         parse_Rank:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &rank_)));
          set_has_rank();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_LastChangeTime;
        break;
      }

      // optional uint64 LastChangeTime = 5;
      case 5: {
        if (tag == 40) {
         parse_LastChangeTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &lastchangetime_)));
          set_has_lastchangetime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_ReportId;
        break;
      }

      // optional uint64 ReportId = 6;
      case 6: {
        if (tag == 48) {
         parse_ReportId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &reportid_)));
          set_has_reportid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TWorldBossNewUserDamageSingle)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TWorldBossNewUserDamageSingle)
  return false;
#undef DO_
}

void TWorldBossNewUserDamageSingle::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TWorldBossNewUserDamageSingle)
  // optional .pb.TUserSimpleInfo UserSimple = 1;
  if (has_usersimple()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->usersimple(), output);
  }

  // optional uint64 TotalDamage = 2;
  if (has_totaldamage()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->totaldamage(), output);
  }

  // optional uint64 MaxDamage = 3;
  if (has_maxdamage()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->maxdamage(), output);
  }

  // optional uint32 Rank = 4;
  if (has_rank()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->rank(), output);
  }

  // optional uint64 LastChangeTime = 5;
  if (has_lastchangetime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(5, this->lastchangetime(), output);
  }

  // optional uint64 ReportId = 6;
  if (has_reportid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(6, this->reportid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TWorldBossNewUserDamageSingle)
}

::google::protobuf::uint8* TWorldBossNewUserDamageSingle::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TWorldBossNewUserDamageSingle)
  // optional .pb.TUserSimpleInfo UserSimple = 1;
  if (has_usersimple()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->usersimple(), target);
  }

  // optional uint64 TotalDamage = 2;
  if (has_totaldamage()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->totaldamage(), target);
  }

  // optional uint64 MaxDamage = 3;
  if (has_maxdamage()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->maxdamage(), target);
  }

  // optional uint32 Rank = 4;
  if (has_rank()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->rank(), target);
  }

  // optional uint64 LastChangeTime = 5;
  if (has_lastchangetime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(5, this->lastchangetime(), target);
  }

  // optional uint64 ReportId = 6;
  if (has_reportid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(6, this->reportid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TWorldBossNewUserDamageSingle)
  return target;
}

int TWorldBossNewUserDamageSingle::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .pb.TUserSimpleInfo UserSimple = 1;
    if (has_usersimple()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->usersimple());
    }

    // optional uint64 TotalDamage = 2;
    if (has_totaldamage()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->totaldamage());
    }

    // optional uint64 MaxDamage = 3;
    if (has_maxdamage()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->maxdamage());
    }

    // optional uint32 Rank = 4;
    if (has_rank()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->rank());
    }

    // optional uint64 LastChangeTime = 5;
    if (has_lastchangetime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->lastchangetime());
    }

    // optional uint64 ReportId = 6;
    if (has_reportid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->reportid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TWorldBossNewUserDamageSingle::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TWorldBossNewUserDamageSingle* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TWorldBossNewUserDamageSingle*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TWorldBossNewUserDamageSingle::MergeFrom(const TWorldBossNewUserDamageSingle& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_usersimple()) {
      mutable_usersimple()->::pb::TUserSimpleInfo::MergeFrom(from.usersimple());
    }
    if (from.has_totaldamage()) {
      set_totaldamage(from.totaldamage());
    }
    if (from.has_maxdamage()) {
      set_maxdamage(from.maxdamage());
    }
    if (from.has_rank()) {
      set_rank(from.rank());
    }
    if (from.has_lastchangetime()) {
      set_lastchangetime(from.lastchangetime());
    }
    if (from.has_reportid()) {
      set_reportid(from.reportid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TWorldBossNewUserDamageSingle::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TWorldBossNewUserDamageSingle::CopyFrom(const TWorldBossNewUserDamageSingle& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TWorldBossNewUserDamageSingle::IsInitialized() const {

  return true;
}

void TWorldBossNewUserDamageSingle::Swap(TWorldBossNewUserDamageSingle* other) {
  if (other != this) {
    std::swap(usersimple_, other->usersimple_);
    std::swap(totaldamage_, other->totaldamage_);
    std::swap(maxdamage_, other->maxdamage_);
    std::swap(rank_, other->rank_);
    std::swap(lastchangetime_, other->lastchangetime_);
    std::swap(reportid_, other->reportid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TWorldBossNewUserDamageSingle::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TWorldBossNewUserDamageSingle_descriptor_;
  metadata.reflection = TWorldBossNewUserDamageSingle_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TWorldBossNewUserRankType::kRankIdFieldNumber;
const int TWorldBossNewUserRankType::kUserNumFieldNumber;
const int TWorldBossNewUserRankType::kDamageMinFieldNumber;
const int TWorldBossNewUserRankType::kUserRankArrFieldNumber;
#endif  // !_MSC_VER

TWorldBossNewUserRankType::TWorldBossNewUserRankType()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TWorldBossNewUserRankType)
}

void TWorldBossNewUserRankType::InitAsDefaultInstance() {
}

TWorldBossNewUserRankType::TWorldBossNewUserRankType(const TWorldBossNewUserRankType& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TWorldBossNewUserRankType)
}

void TWorldBossNewUserRankType::SharedCtor() {
  _cached_size_ = 0;
  rankid_ = 0u;
  usernum_ = 0u;
  damagemin_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TWorldBossNewUserRankType::~TWorldBossNewUserRankType() {
  // @@protoc_insertion_point(destructor:pb.TWorldBossNewUserRankType)
  SharedDtor();
}

void TWorldBossNewUserRankType::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TWorldBossNewUserRankType::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TWorldBossNewUserRankType::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TWorldBossNewUserRankType_descriptor_;
}

const TWorldBossNewUserRankType& TWorldBossNewUserRankType::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fWorldBossNew_2eproto();
  return *default_instance_;
}

TWorldBossNewUserRankType* TWorldBossNewUserRankType::default_instance_ = NULL;

TWorldBossNewUserRankType* TWorldBossNewUserRankType::New() const {
  return new TWorldBossNewUserRankType;
}

void TWorldBossNewUserRankType::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<TWorldBossNewUserRankType*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(rankid_, damagemin_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  userrankarr_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TWorldBossNewUserRankType::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TWorldBossNewUserRankType)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 RankId = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &rankid_)));
          set_has_rankid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_UserNum;
        break;
      }

      // optional uint32 UserNum = 2;
      case 2: {
        if (tag == 16) {
         parse_UserNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &usernum_)));
          set_has_usernum();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_DamageMin;
        break;
      }

      // optional uint64 DamageMin = 3;
      case 3: {
        if (tag == 24) {
         parse_DamageMin:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &damagemin_)));
          set_has_damagemin();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_UserRankArr;
        break;
      }

      // repeated .pb.TWorldBossNewUserDamageSingle UserRankArr = 4;
      case 4: {
        if (tag == 34) {
         parse_UserRankArr:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_userrankarr()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_UserRankArr;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TWorldBossNewUserRankType)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TWorldBossNewUserRankType)
  return false;
#undef DO_
}

void TWorldBossNewUserRankType::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TWorldBossNewUserRankType)
  // optional uint32 RankId = 1;
  if (has_rankid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->rankid(), output);
  }

  // optional uint32 UserNum = 2;
  if (has_usernum()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->usernum(), output);
  }

  // optional uint64 DamageMin = 3;
  if (has_damagemin()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->damagemin(), output);
  }

  // repeated .pb.TWorldBossNewUserDamageSingle UserRankArr = 4;
  for (int i = 0; i < this->userrankarr_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->userrankarr(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TWorldBossNewUserRankType)
}

::google::protobuf::uint8* TWorldBossNewUserRankType::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TWorldBossNewUserRankType)
  // optional uint32 RankId = 1;
  if (has_rankid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->rankid(), target);
  }

  // optional uint32 UserNum = 2;
  if (has_usernum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->usernum(), target);
  }

  // optional uint64 DamageMin = 3;
  if (has_damagemin()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->damagemin(), target);
  }

  // repeated .pb.TWorldBossNewUserDamageSingle UserRankArr = 4;
  for (int i = 0; i < this->userrankarr_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->userrankarr(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TWorldBossNewUserRankType)
  return target;
}

int TWorldBossNewUserRankType::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 RankId = 1;
    if (has_rankid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->rankid());
    }

    // optional uint32 UserNum = 2;
    if (has_usernum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->usernum());
    }

    // optional uint64 DamageMin = 3;
    if (has_damagemin()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->damagemin());
    }

  }
  // repeated .pb.TWorldBossNewUserDamageSingle UserRankArr = 4;
  total_size += 1 * this->userrankarr_size();
  for (int i = 0; i < this->userrankarr_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->userrankarr(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TWorldBossNewUserRankType::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TWorldBossNewUserRankType* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TWorldBossNewUserRankType*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TWorldBossNewUserRankType::MergeFrom(const TWorldBossNewUserRankType& from) {
  GOOGLE_CHECK_NE(&from, this);
  userrankarr_.MergeFrom(from.userrankarr_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_rankid()) {
      set_rankid(from.rankid());
    }
    if (from.has_usernum()) {
      set_usernum(from.usernum());
    }
    if (from.has_damagemin()) {
      set_damagemin(from.damagemin());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TWorldBossNewUserRankType::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TWorldBossNewUserRankType::CopyFrom(const TWorldBossNewUserRankType& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TWorldBossNewUserRankType::IsInitialized() const {

  return true;
}

void TWorldBossNewUserRankType::Swap(TWorldBossNewUserRankType* other) {
  if (other != this) {
    std::swap(rankid_, other->rankid_);
    std::swap(usernum_, other->usernum_);
    std::swap(damagemin_, other->damagemin_);
    userrankarr_.Swap(&other->userrankarr_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TWorldBossNewUserRankType::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TWorldBossNewUserRankType_descriptor_;
  metadata.reflection = TWorldBossNewUserRankType_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TWorldBossNewGetBossInfoRsp::kBossIdFieldNumber;
const int TWorldBossNewGetBossInfoRsp::kOpenTimeFieldNumber;
const int TWorldBossNewGetBossInfoRsp::kUsedAtkNumFieldNumber;
const int TWorldBossNewGetBossInfoRsp::kMyRankInfoFieldNumber;
const int TWorldBossNewGetBossInfoRsp::kRankTypeArrFieldNumber;
const int TWorldBossNewGetBossInfoRsp::kBuyNumFieldNumber;
const int TWorldBossNewGetBossInfoRsp::kBuyAtkNumFieldNumber;
const int TWorldBossNewGetBossInfoRsp::kReceivedDamageRewardTidArrFieldNumber;
#endif  // !_MSC_VER

TWorldBossNewGetBossInfoRsp::TWorldBossNewGetBossInfoRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TWorldBossNewGetBossInfoRsp)
}

void TWorldBossNewGetBossInfoRsp::InitAsDefaultInstance() {
  myrankinfo_ = const_cast< ::pb::TWorldBossNewUserDamageSingle*>(&::pb::TWorldBossNewUserDamageSingle::default_instance());
}

TWorldBossNewGetBossInfoRsp::TWorldBossNewGetBossInfoRsp(const TWorldBossNewGetBossInfoRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TWorldBossNewGetBossInfoRsp)
}

void TWorldBossNewGetBossInfoRsp::SharedCtor() {
  _cached_size_ = 0;
  bossid_ = 0u;
  opentime_ = GOOGLE_ULONGLONG(0);
  usedatknum_ = 0u;
  myrankinfo_ = NULL;
  buynum_ = 0u;
  buyatknum_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TWorldBossNewGetBossInfoRsp::~TWorldBossNewGetBossInfoRsp() {
  // @@protoc_insertion_point(destructor:pb.TWorldBossNewGetBossInfoRsp)
  SharedDtor();
}

void TWorldBossNewGetBossInfoRsp::SharedDtor() {
  if (this != default_instance_) {
    delete myrankinfo_;
  }
}

void TWorldBossNewGetBossInfoRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TWorldBossNewGetBossInfoRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TWorldBossNewGetBossInfoRsp_descriptor_;
}

const TWorldBossNewGetBossInfoRsp& TWorldBossNewGetBossInfoRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fWorldBossNew_2eproto();
  return *default_instance_;
}

TWorldBossNewGetBossInfoRsp* TWorldBossNewGetBossInfoRsp::default_instance_ = NULL;

TWorldBossNewGetBossInfoRsp* TWorldBossNewGetBossInfoRsp::New() const {
  return new TWorldBossNewGetBossInfoRsp;
}

void TWorldBossNewGetBossInfoRsp::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<TWorldBossNewGetBossInfoRsp*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 111) {
    ZR_(opentime_, usedatknum_);
    ZR_(buynum_, buyatknum_);
    if (has_myrankinfo()) {
      if (myrankinfo_ != NULL) myrankinfo_->::pb::TWorldBossNewUserDamageSingle::Clear();
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ranktypearr_.Clear();
  receiveddamagerewardtidarr_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TWorldBossNewGetBossInfoRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TWorldBossNewGetBossInfoRsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 BossId = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &bossid_)));
          set_has_bossid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_OpenTime;
        break;
      }

      // optional uint64 OpenTime = 2;
      case 2: {
        if (tag == 16) {
         parse_OpenTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &opentime_)));
          set_has_opentime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_UsedAtkNum;
        break;
      }

      // optional uint32 UsedAtkNum = 3;
      case 3: {
        if (tag == 24) {
         parse_UsedAtkNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &usedatknum_)));
          set_has_usedatknum();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_MyRankInfo;
        break;
      }

      // optional .pb.TWorldBossNewUserDamageSingle MyRankInfo = 4;
      case 4: {
        if (tag == 34) {
         parse_MyRankInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_myrankinfo()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_RankTypeArr;
        break;
      }

      // repeated .pb.TWorldBossNewUserRankType RankTypeArr = 5;
      case 5: {
        if (tag == 42) {
         parse_RankTypeArr:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_ranktypearr()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_RankTypeArr;
        if (input->ExpectTag(48)) goto parse_BuyNum;
        break;
      }

      // optional uint32 BuyNum = 6;
      case 6: {
        if (tag == 48) {
         parse_BuyNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &buynum_)));
          set_has_buynum();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_BuyAtkNum;
        break;
      }

      // optional uint32 BuyAtkNum = 7;
      case 7: {
        if (tag == 56) {
         parse_BuyAtkNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &buyatknum_)));
          set_has_buyatknum();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_ReceivedDamageRewardTidArr;
        break;
      }

      // repeated uint32 ReceivedDamageRewardTidArr = 8;
      case 8: {
        if (tag == 64) {
         parse_ReceivedDamageRewardTidArr:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 64, input, this->mutable_receiveddamagerewardtidarr())));
        } else if (tag == 66) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_receiveddamagerewardtidarr())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_ReceivedDamageRewardTidArr;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TWorldBossNewGetBossInfoRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TWorldBossNewGetBossInfoRsp)
  return false;
#undef DO_
}

void TWorldBossNewGetBossInfoRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TWorldBossNewGetBossInfoRsp)
  // optional uint32 BossId = 1;
  if (has_bossid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->bossid(), output);
  }

  // optional uint64 OpenTime = 2;
  if (has_opentime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->opentime(), output);
  }

  // optional uint32 UsedAtkNum = 3;
  if (has_usedatknum()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->usedatknum(), output);
  }

  // optional .pb.TWorldBossNewUserDamageSingle MyRankInfo = 4;
  if (has_myrankinfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->myrankinfo(), output);
  }

  // repeated .pb.TWorldBossNewUserRankType RankTypeArr = 5;
  for (int i = 0; i < this->ranktypearr_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->ranktypearr(i), output);
  }

  // optional uint32 BuyNum = 6;
  if (has_buynum()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->buynum(), output);
  }

  // optional uint32 BuyAtkNum = 7;
  if (has_buyatknum()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->buyatknum(), output);
  }

  // repeated uint32 ReceivedDamageRewardTidArr = 8;
  for (int i = 0; i < this->receiveddamagerewardtidarr_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      8, this->receiveddamagerewardtidarr(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TWorldBossNewGetBossInfoRsp)
}

::google::protobuf::uint8* TWorldBossNewGetBossInfoRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TWorldBossNewGetBossInfoRsp)
  // optional uint32 BossId = 1;
  if (has_bossid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->bossid(), target);
  }

  // optional uint64 OpenTime = 2;
  if (has_opentime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->opentime(), target);
  }

  // optional uint32 UsedAtkNum = 3;
  if (has_usedatknum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->usedatknum(), target);
  }

  // optional .pb.TWorldBossNewUserDamageSingle MyRankInfo = 4;
  if (has_myrankinfo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->myrankinfo(), target);
  }

  // repeated .pb.TWorldBossNewUserRankType RankTypeArr = 5;
  for (int i = 0; i < this->ranktypearr_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->ranktypearr(i), target);
  }

  // optional uint32 BuyNum = 6;
  if (has_buynum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->buynum(), target);
  }

  // optional uint32 BuyAtkNum = 7;
  if (has_buyatknum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->buyatknum(), target);
  }

  // repeated uint32 ReceivedDamageRewardTidArr = 8;
  for (int i = 0; i < this->receiveddamagerewardtidarr_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(8, this->receiveddamagerewardtidarr(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TWorldBossNewGetBossInfoRsp)
  return target;
}

int TWorldBossNewGetBossInfoRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 BossId = 1;
    if (has_bossid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->bossid());
    }

    // optional uint64 OpenTime = 2;
    if (has_opentime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->opentime());
    }

    // optional uint32 UsedAtkNum = 3;
    if (has_usedatknum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->usedatknum());
    }

    // optional .pb.TWorldBossNewUserDamageSingle MyRankInfo = 4;
    if (has_myrankinfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->myrankinfo());
    }

    // optional uint32 BuyNum = 6;
    if (has_buynum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->buynum());
    }

    // optional uint32 BuyAtkNum = 7;
    if (has_buyatknum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->buyatknum());
    }

  }
  // repeated .pb.TWorldBossNewUserRankType RankTypeArr = 5;
  total_size += 1 * this->ranktypearr_size();
  for (int i = 0; i < this->ranktypearr_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->ranktypearr(i));
  }

  // repeated uint32 ReceivedDamageRewardTidArr = 8;
  {
    int data_size = 0;
    for (int i = 0; i < this->receiveddamagerewardtidarr_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->receiveddamagerewardtidarr(i));
    }
    total_size += 1 * this->receiveddamagerewardtidarr_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TWorldBossNewGetBossInfoRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TWorldBossNewGetBossInfoRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TWorldBossNewGetBossInfoRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TWorldBossNewGetBossInfoRsp::MergeFrom(const TWorldBossNewGetBossInfoRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  ranktypearr_.MergeFrom(from.ranktypearr_);
  receiveddamagerewardtidarr_.MergeFrom(from.receiveddamagerewardtidarr_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_bossid()) {
      set_bossid(from.bossid());
    }
    if (from.has_opentime()) {
      set_opentime(from.opentime());
    }
    if (from.has_usedatknum()) {
      set_usedatknum(from.usedatknum());
    }
    if (from.has_myrankinfo()) {
      mutable_myrankinfo()->::pb::TWorldBossNewUserDamageSingle::MergeFrom(from.myrankinfo());
    }
    if (from.has_buynum()) {
      set_buynum(from.buynum());
    }
    if (from.has_buyatknum()) {
      set_buyatknum(from.buyatknum());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TWorldBossNewGetBossInfoRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TWorldBossNewGetBossInfoRsp::CopyFrom(const TWorldBossNewGetBossInfoRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TWorldBossNewGetBossInfoRsp::IsInitialized() const {

  return true;
}

void TWorldBossNewGetBossInfoRsp::Swap(TWorldBossNewGetBossInfoRsp* other) {
  if (other != this) {
    std::swap(bossid_, other->bossid_);
    std::swap(opentime_, other->opentime_);
    std::swap(usedatknum_, other->usedatknum_);
    std::swap(myrankinfo_, other->myrankinfo_);
    ranktypearr_.Swap(&other->ranktypearr_);
    std::swap(buynum_, other->buynum_);
    std::swap(buyatknum_, other->buyatknum_);
    receiveddamagerewardtidarr_.Swap(&other->receiveddamagerewardtidarr_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TWorldBossNewGetBossInfoRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TWorldBossNewGetBossInfoRsp_descriptor_;
  metadata.reflection = TWorldBossNewGetBossInfoRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TWorldBossNewGetAboveRankRsp::kAboveRankArrFieldNumber;
#endif  // !_MSC_VER

TWorldBossNewGetAboveRankRsp::TWorldBossNewGetAboveRankRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TWorldBossNewGetAboveRankRsp)
}

void TWorldBossNewGetAboveRankRsp::InitAsDefaultInstance() {
}

TWorldBossNewGetAboveRankRsp::TWorldBossNewGetAboveRankRsp(const TWorldBossNewGetAboveRankRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TWorldBossNewGetAboveRankRsp)
}

void TWorldBossNewGetAboveRankRsp::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TWorldBossNewGetAboveRankRsp::~TWorldBossNewGetAboveRankRsp() {
  // @@protoc_insertion_point(destructor:pb.TWorldBossNewGetAboveRankRsp)
  SharedDtor();
}

void TWorldBossNewGetAboveRankRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TWorldBossNewGetAboveRankRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TWorldBossNewGetAboveRankRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TWorldBossNewGetAboveRankRsp_descriptor_;
}

const TWorldBossNewGetAboveRankRsp& TWorldBossNewGetAboveRankRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fWorldBossNew_2eproto();
  return *default_instance_;
}

TWorldBossNewGetAboveRankRsp* TWorldBossNewGetAboveRankRsp::default_instance_ = NULL;

TWorldBossNewGetAboveRankRsp* TWorldBossNewGetAboveRankRsp::New() const {
  return new TWorldBossNewGetAboveRankRsp;
}

void TWorldBossNewGetAboveRankRsp::Clear() {
  aboverankarr_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TWorldBossNewGetAboveRankRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TWorldBossNewGetAboveRankRsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .pb.TWorldBossNewUserDamageSingle AboveRankArr = 1;
      case 1: {
        if (tag == 10) {
         parse_AboveRankArr:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_aboverankarr()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_AboveRankArr;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TWorldBossNewGetAboveRankRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TWorldBossNewGetAboveRankRsp)
  return false;
#undef DO_
}

void TWorldBossNewGetAboveRankRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TWorldBossNewGetAboveRankRsp)
  // repeated .pb.TWorldBossNewUserDamageSingle AboveRankArr = 1;
  for (int i = 0; i < this->aboverankarr_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->aboverankarr(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TWorldBossNewGetAboveRankRsp)
}

::google::protobuf::uint8* TWorldBossNewGetAboveRankRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TWorldBossNewGetAboveRankRsp)
  // repeated .pb.TWorldBossNewUserDamageSingle AboveRankArr = 1;
  for (int i = 0; i < this->aboverankarr_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->aboverankarr(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TWorldBossNewGetAboveRankRsp)
  return target;
}

int TWorldBossNewGetAboveRankRsp::ByteSize() const {
  int total_size = 0;

  // repeated .pb.TWorldBossNewUserDamageSingle AboveRankArr = 1;
  total_size += 1 * this->aboverankarr_size();
  for (int i = 0; i < this->aboverankarr_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->aboverankarr(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TWorldBossNewGetAboveRankRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TWorldBossNewGetAboveRankRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TWorldBossNewGetAboveRankRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TWorldBossNewGetAboveRankRsp::MergeFrom(const TWorldBossNewGetAboveRankRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  aboverankarr_.MergeFrom(from.aboverankarr_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TWorldBossNewGetAboveRankRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TWorldBossNewGetAboveRankRsp::CopyFrom(const TWorldBossNewGetAboveRankRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TWorldBossNewGetAboveRankRsp::IsInitialized() const {

  return true;
}

void TWorldBossNewGetAboveRankRsp::Swap(TWorldBossNewGetAboveRankRsp* other) {
  if (other != this) {
    aboverankarr_.Swap(&other->aboverankarr_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TWorldBossNewGetAboveRankRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TWorldBossNewGetAboveRankRsp_descriptor_;
  metadata.reflection = TWorldBossNewGetAboveRankRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TWorldBossNewGetRankInfoReq::kRankIdFieldNumber;
const int TWorldBossNewGetRankInfoReq::kOffsetFieldNumber;
const int TWorldBossNewGetRankInfoReq::kLimitFieldNumber;
#endif  // !_MSC_VER

TWorldBossNewGetRankInfoReq::TWorldBossNewGetRankInfoReq()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TWorldBossNewGetRankInfoReq)
}

void TWorldBossNewGetRankInfoReq::InitAsDefaultInstance() {
}

TWorldBossNewGetRankInfoReq::TWorldBossNewGetRankInfoReq(const TWorldBossNewGetRankInfoReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TWorldBossNewGetRankInfoReq)
}

void TWorldBossNewGetRankInfoReq::SharedCtor() {
  _cached_size_ = 0;
  rankid_ = 0u;
  offset_ = 0u;
  limit_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TWorldBossNewGetRankInfoReq::~TWorldBossNewGetRankInfoReq() {
  // @@protoc_insertion_point(destructor:pb.TWorldBossNewGetRankInfoReq)
  SharedDtor();
}

void TWorldBossNewGetRankInfoReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TWorldBossNewGetRankInfoReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TWorldBossNewGetRankInfoReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TWorldBossNewGetRankInfoReq_descriptor_;
}

const TWorldBossNewGetRankInfoReq& TWorldBossNewGetRankInfoReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fWorldBossNew_2eproto();
  return *default_instance_;
}

TWorldBossNewGetRankInfoReq* TWorldBossNewGetRankInfoReq::default_instance_ = NULL;

TWorldBossNewGetRankInfoReq* TWorldBossNewGetRankInfoReq::New() const {
  return new TWorldBossNewGetRankInfoReq;
}

void TWorldBossNewGetRankInfoReq::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<TWorldBossNewGetRankInfoReq*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(rankid_, limit_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TWorldBossNewGetRankInfoReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TWorldBossNewGetRankInfoReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 RankId = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &rankid_)));
          set_has_rankid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_Offset;
        break;
      }

      // optional uint32 Offset = 2;
      case 2: {
        if (tag == 16) {
         parse_Offset:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &offset_)));
          set_has_offset();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_Limit;
        break;
      }

      // optional uint32 Limit = 3;
      case 3: {
        if (tag == 24) {
         parse_Limit:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &limit_)));
          set_has_limit();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TWorldBossNewGetRankInfoReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TWorldBossNewGetRankInfoReq)
  return false;
#undef DO_
}

void TWorldBossNewGetRankInfoReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TWorldBossNewGetRankInfoReq)
  // optional uint32 RankId = 1;
  if (has_rankid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->rankid(), output);
  }

  // optional uint32 Offset = 2;
  if (has_offset()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->offset(), output);
  }

  // optional uint32 Limit = 3;
  if (has_limit()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->limit(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TWorldBossNewGetRankInfoReq)
}

::google::protobuf::uint8* TWorldBossNewGetRankInfoReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TWorldBossNewGetRankInfoReq)
  // optional uint32 RankId = 1;
  if (has_rankid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->rankid(), target);
  }

  // optional uint32 Offset = 2;
  if (has_offset()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->offset(), target);
  }

  // optional uint32 Limit = 3;
  if (has_limit()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->limit(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TWorldBossNewGetRankInfoReq)
  return target;
}

int TWorldBossNewGetRankInfoReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 RankId = 1;
    if (has_rankid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->rankid());
    }

    // optional uint32 Offset = 2;
    if (has_offset()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->offset());
    }

    // optional uint32 Limit = 3;
    if (has_limit()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->limit());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TWorldBossNewGetRankInfoReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TWorldBossNewGetRankInfoReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TWorldBossNewGetRankInfoReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TWorldBossNewGetRankInfoReq::MergeFrom(const TWorldBossNewGetRankInfoReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_rankid()) {
      set_rankid(from.rankid());
    }
    if (from.has_offset()) {
      set_offset(from.offset());
    }
    if (from.has_limit()) {
      set_limit(from.limit());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TWorldBossNewGetRankInfoReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TWorldBossNewGetRankInfoReq::CopyFrom(const TWorldBossNewGetRankInfoReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TWorldBossNewGetRankInfoReq::IsInitialized() const {

  return true;
}

void TWorldBossNewGetRankInfoReq::Swap(TWorldBossNewGetRankInfoReq* other) {
  if (other != this) {
    std::swap(rankid_, other->rankid_);
    std::swap(offset_, other->offset_);
    std::swap(limit_, other->limit_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TWorldBossNewGetRankInfoReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TWorldBossNewGetRankInfoReq_descriptor_;
  metadata.reflection = TWorldBossNewGetRankInfoReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TWorldBossNewGetRankInfoRsp::kUserRankArrFieldNumber;
#endif  // !_MSC_VER

TWorldBossNewGetRankInfoRsp::TWorldBossNewGetRankInfoRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TWorldBossNewGetRankInfoRsp)
}

void TWorldBossNewGetRankInfoRsp::InitAsDefaultInstance() {
}

TWorldBossNewGetRankInfoRsp::TWorldBossNewGetRankInfoRsp(const TWorldBossNewGetRankInfoRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TWorldBossNewGetRankInfoRsp)
}

void TWorldBossNewGetRankInfoRsp::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TWorldBossNewGetRankInfoRsp::~TWorldBossNewGetRankInfoRsp() {
  // @@protoc_insertion_point(destructor:pb.TWorldBossNewGetRankInfoRsp)
  SharedDtor();
}

void TWorldBossNewGetRankInfoRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TWorldBossNewGetRankInfoRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TWorldBossNewGetRankInfoRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TWorldBossNewGetRankInfoRsp_descriptor_;
}

const TWorldBossNewGetRankInfoRsp& TWorldBossNewGetRankInfoRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fWorldBossNew_2eproto();
  return *default_instance_;
}

TWorldBossNewGetRankInfoRsp* TWorldBossNewGetRankInfoRsp::default_instance_ = NULL;

TWorldBossNewGetRankInfoRsp* TWorldBossNewGetRankInfoRsp::New() const {
  return new TWorldBossNewGetRankInfoRsp;
}

void TWorldBossNewGetRankInfoRsp::Clear() {
  userrankarr_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TWorldBossNewGetRankInfoRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TWorldBossNewGetRankInfoRsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .pb.TWorldBossNewUserDamageSingle UserRankArr = 1;
      case 1: {
        if (tag == 10) {
         parse_UserRankArr:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_userrankarr()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_UserRankArr;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TWorldBossNewGetRankInfoRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TWorldBossNewGetRankInfoRsp)
  return false;
#undef DO_
}

void TWorldBossNewGetRankInfoRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TWorldBossNewGetRankInfoRsp)
  // repeated .pb.TWorldBossNewUserDamageSingle UserRankArr = 1;
  for (int i = 0; i < this->userrankarr_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->userrankarr(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TWorldBossNewGetRankInfoRsp)
}

::google::protobuf::uint8* TWorldBossNewGetRankInfoRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TWorldBossNewGetRankInfoRsp)
  // repeated .pb.TWorldBossNewUserDamageSingle UserRankArr = 1;
  for (int i = 0; i < this->userrankarr_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->userrankarr(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TWorldBossNewGetRankInfoRsp)
  return target;
}

int TWorldBossNewGetRankInfoRsp::ByteSize() const {
  int total_size = 0;

  // repeated .pb.TWorldBossNewUserDamageSingle UserRankArr = 1;
  total_size += 1 * this->userrankarr_size();
  for (int i = 0; i < this->userrankarr_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->userrankarr(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TWorldBossNewGetRankInfoRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TWorldBossNewGetRankInfoRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TWorldBossNewGetRankInfoRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TWorldBossNewGetRankInfoRsp::MergeFrom(const TWorldBossNewGetRankInfoRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  userrankarr_.MergeFrom(from.userrankarr_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TWorldBossNewGetRankInfoRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TWorldBossNewGetRankInfoRsp::CopyFrom(const TWorldBossNewGetRankInfoRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TWorldBossNewGetRankInfoRsp::IsInitialized() const {

  return true;
}

void TWorldBossNewGetRankInfoRsp::Swap(TWorldBossNewGetRankInfoRsp* other) {
  if (other != this) {
    userrankarr_.Swap(&other->userrankarr_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TWorldBossNewGetRankInfoRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TWorldBossNewGetRankInfoRsp_descriptor_;
  metadata.reflection = TWorldBossNewGetRankInfoRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TWorldBossNewEnterBattleReq::kBossIdFieldNumber;
const int TWorldBossNewEnterBattleReq::kBattleCheckParamFieldNumber;
#endif  // !_MSC_VER

TWorldBossNewEnterBattleReq::TWorldBossNewEnterBattleReq()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TWorldBossNewEnterBattleReq)
}

void TWorldBossNewEnterBattleReq::InitAsDefaultInstance() {
  battlecheckparam_ = const_cast< ::pb::TBattleCheckParam*>(&::pb::TBattleCheckParam::default_instance());
}

TWorldBossNewEnterBattleReq::TWorldBossNewEnterBattleReq(const TWorldBossNewEnterBattleReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TWorldBossNewEnterBattleReq)
}

void TWorldBossNewEnterBattleReq::SharedCtor() {
  _cached_size_ = 0;
  bossid_ = 0u;
  battlecheckparam_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TWorldBossNewEnterBattleReq::~TWorldBossNewEnterBattleReq() {
  // @@protoc_insertion_point(destructor:pb.TWorldBossNewEnterBattleReq)
  SharedDtor();
}

void TWorldBossNewEnterBattleReq::SharedDtor() {
  if (this != default_instance_) {
    delete battlecheckparam_;
  }
}

void TWorldBossNewEnterBattleReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TWorldBossNewEnterBattleReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TWorldBossNewEnterBattleReq_descriptor_;
}

const TWorldBossNewEnterBattleReq& TWorldBossNewEnterBattleReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fWorldBossNew_2eproto();
  return *default_instance_;
}

TWorldBossNewEnterBattleReq* TWorldBossNewEnterBattleReq::default_instance_ = NULL;

TWorldBossNewEnterBattleReq* TWorldBossNewEnterBattleReq::New() const {
  return new TWorldBossNewEnterBattleReq;
}

void TWorldBossNewEnterBattleReq::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    bossid_ = 0u;
    if (has_battlecheckparam()) {
      if (battlecheckparam_ != NULL) battlecheckparam_->::pb::TBattleCheckParam::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TWorldBossNewEnterBattleReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TWorldBossNewEnterBattleReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 BossId = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &bossid_)));
          set_has_bossid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_BattleCheckParam;
        break;
      }

      // optional .pb.TBattleCheckParam BattleCheckParam = 2;
      case 2: {
        if (tag == 18) {
         parse_BattleCheckParam:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_battlecheckparam()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TWorldBossNewEnterBattleReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TWorldBossNewEnterBattleReq)
  return false;
#undef DO_
}

void TWorldBossNewEnterBattleReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TWorldBossNewEnterBattleReq)
  // optional uint32 BossId = 1;
  if (has_bossid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->bossid(), output);
  }

  // optional .pb.TBattleCheckParam BattleCheckParam = 2;
  if (has_battlecheckparam()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->battlecheckparam(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TWorldBossNewEnterBattleReq)
}

::google::protobuf::uint8* TWorldBossNewEnterBattleReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TWorldBossNewEnterBattleReq)
  // optional uint32 BossId = 1;
  if (has_bossid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->bossid(), target);
  }

  // optional .pb.TBattleCheckParam BattleCheckParam = 2;
  if (has_battlecheckparam()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->battlecheckparam(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TWorldBossNewEnterBattleReq)
  return target;
}

int TWorldBossNewEnterBattleReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 BossId = 1;
    if (has_bossid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->bossid());
    }

    // optional .pb.TBattleCheckParam BattleCheckParam = 2;
    if (has_battlecheckparam()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->battlecheckparam());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TWorldBossNewEnterBattleReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TWorldBossNewEnterBattleReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TWorldBossNewEnterBattleReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TWorldBossNewEnterBattleReq::MergeFrom(const TWorldBossNewEnterBattleReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_bossid()) {
      set_bossid(from.bossid());
    }
    if (from.has_battlecheckparam()) {
      mutable_battlecheckparam()->::pb::TBattleCheckParam::MergeFrom(from.battlecheckparam());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TWorldBossNewEnterBattleReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TWorldBossNewEnterBattleReq::CopyFrom(const TWorldBossNewEnterBattleReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TWorldBossNewEnterBattleReq::IsInitialized() const {

  return true;
}

void TWorldBossNewEnterBattleReq::Swap(TWorldBossNewEnterBattleReq* other) {
  if (other != this) {
    std::swap(bossid_, other->bossid_);
    std::swap(battlecheckparam_, other->battlecheckparam_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TWorldBossNewEnterBattleReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TWorldBossNewEnterBattleReq_descriptor_;
  metadata.reflection = TWorldBossNewEnterBattleReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TWorldBossNewEnterBattleRsp::kBattleArgsFieldNumber;
const int TWorldBossNewEnterBattleRsp::kUsedAtkNumFieldNumber;
#endif  // !_MSC_VER

TWorldBossNewEnterBattleRsp::TWorldBossNewEnterBattleRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TWorldBossNewEnterBattleRsp)
}

void TWorldBossNewEnterBattleRsp::InitAsDefaultInstance() {
  battleargs_ = const_cast< ::pb::TBattleArgs*>(&::pb::TBattleArgs::default_instance());
}

TWorldBossNewEnterBattleRsp::TWorldBossNewEnterBattleRsp(const TWorldBossNewEnterBattleRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TWorldBossNewEnterBattleRsp)
}

void TWorldBossNewEnterBattleRsp::SharedCtor() {
  _cached_size_ = 0;
  battleargs_ = NULL;
  usedatknum_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TWorldBossNewEnterBattleRsp::~TWorldBossNewEnterBattleRsp() {
  // @@protoc_insertion_point(destructor:pb.TWorldBossNewEnterBattleRsp)
  SharedDtor();
}

void TWorldBossNewEnterBattleRsp::SharedDtor() {
  if (this != default_instance_) {
    delete battleargs_;
  }
}

void TWorldBossNewEnterBattleRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TWorldBossNewEnterBattleRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TWorldBossNewEnterBattleRsp_descriptor_;
}

const TWorldBossNewEnterBattleRsp& TWorldBossNewEnterBattleRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fWorldBossNew_2eproto();
  return *default_instance_;
}

TWorldBossNewEnterBattleRsp* TWorldBossNewEnterBattleRsp::default_instance_ = NULL;

TWorldBossNewEnterBattleRsp* TWorldBossNewEnterBattleRsp::New() const {
  return new TWorldBossNewEnterBattleRsp;
}

void TWorldBossNewEnterBattleRsp::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    if (has_battleargs()) {
      if (battleargs_ != NULL) battleargs_->::pb::TBattleArgs::Clear();
    }
    usedatknum_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TWorldBossNewEnterBattleRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TWorldBossNewEnterBattleRsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .pb.TBattleArgs BattleArgs = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_battleargs()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_UsedAtkNum;
        break;
      }

      // optional uint32 UsedAtkNum = 2;
      case 2: {
        if (tag == 16) {
         parse_UsedAtkNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &usedatknum_)));
          set_has_usedatknum();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TWorldBossNewEnterBattleRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TWorldBossNewEnterBattleRsp)
  return false;
#undef DO_
}

void TWorldBossNewEnterBattleRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TWorldBossNewEnterBattleRsp)
  // optional .pb.TBattleArgs BattleArgs = 1;
  if (has_battleargs()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->battleargs(), output);
  }

  // optional uint32 UsedAtkNum = 2;
  if (has_usedatknum()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->usedatknum(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TWorldBossNewEnterBattleRsp)
}

::google::protobuf::uint8* TWorldBossNewEnterBattleRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TWorldBossNewEnterBattleRsp)
  // optional .pb.TBattleArgs BattleArgs = 1;
  if (has_battleargs()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->battleargs(), target);
  }

  // optional uint32 UsedAtkNum = 2;
  if (has_usedatknum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->usedatknum(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TWorldBossNewEnterBattleRsp)
  return target;
}

int TWorldBossNewEnterBattleRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .pb.TBattleArgs BattleArgs = 1;
    if (has_battleargs()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->battleargs());
    }

    // optional uint32 UsedAtkNum = 2;
    if (has_usedatknum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->usedatknum());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TWorldBossNewEnterBattleRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TWorldBossNewEnterBattleRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TWorldBossNewEnterBattleRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TWorldBossNewEnterBattleRsp::MergeFrom(const TWorldBossNewEnterBattleRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_battleargs()) {
      mutable_battleargs()->::pb::TBattleArgs::MergeFrom(from.battleargs());
    }
    if (from.has_usedatknum()) {
      set_usedatknum(from.usedatknum());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TWorldBossNewEnterBattleRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TWorldBossNewEnterBattleRsp::CopyFrom(const TWorldBossNewEnterBattleRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TWorldBossNewEnterBattleRsp::IsInitialized() const {

  if (has_battleargs()) {
    if (!this->battleargs().IsInitialized()) return false;
  }
  return true;
}

void TWorldBossNewEnterBattleRsp::Swap(TWorldBossNewEnterBattleRsp* other) {
  if (other != this) {
    std::swap(battleargs_, other->battleargs_);
    std::swap(usedatknum_, other->usedatknum_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TWorldBossNewEnterBattleRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TWorldBossNewEnterBattleRsp_descriptor_;
  metadata.reflection = TWorldBossNewEnterBattleRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TWorldBossNewReportBattleReq::kBossIdFieldNumber;
const int TWorldBossNewReportBattleReq::kBattleRetFieldNumber;
#endif  // !_MSC_VER

TWorldBossNewReportBattleReq::TWorldBossNewReportBattleReq()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TWorldBossNewReportBattleReq)
}

void TWorldBossNewReportBattleReq::InitAsDefaultInstance() {
}

TWorldBossNewReportBattleReq::TWorldBossNewReportBattleReq(const TWorldBossNewReportBattleReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TWorldBossNewReportBattleReq)
}

void TWorldBossNewReportBattleReq::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  bossid_ = 0u;
  battleret_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TWorldBossNewReportBattleReq::~TWorldBossNewReportBattleReq() {
  // @@protoc_insertion_point(destructor:pb.TWorldBossNewReportBattleReq)
  SharedDtor();
}

void TWorldBossNewReportBattleReq::SharedDtor() {
  if (battleret_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete battleret_;
  }
  if (this != default_instance_) {
  }
}

void TWorldBossNewReportBattleReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TWorldBossNewReportBattleReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TWorldBossNewReportBattleReq_descriptor_;
}

const TWorldBossNewReportBattleReq& TWorldBossNewReportBattleReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fWorldBossNew_2eproto();
  return *default_instance_;
}

TWorldBossNewReportBattleReq* TWorldBossNewReportBattleReq::default_instance_ = NULL;

TWorldBossNewReportBattleReq* TWorldBossNewReportBattleReq::New() const {
  return new TWorldBossNewReportBattleReq;
}

void TWorldBossNewReportBattleReq::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    bossid_ = 0u;
    if (has_battleret()) {
      if (battleret_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        battleret_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TWorldBossNewReportBattleReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TWorldBossNewReportBattleReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 BossId = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &bossid_)));
          set_has_bossid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_BattleRet;
        break;
      }

      // optional bytes BattleRet = 2;
      case 2: {
        if (tag == 18) {
         parse_BattleRet:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_battleret()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TWorldBossNewReportBattleReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TWorldBossNewReportBattleReq)
  return false;
#undef DO_
}

void TWorldBossNewReportBattleReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TWorldBossNewReportBattleReq)
  // optional uint32 BossId = 1;
  if (has_bossid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->bossid(), output);
  }

  // optional bytes BattleRet = 2;
  if (has_battleret()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->battleret(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TWorldBossNewReportBattleReq)
}

::google::protobuf::uint8* TWorldBossNewReportBattleReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TWorldBossNewReportBattleReq)
  // optional uint32 BossId = 1;
  if (has_bossid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->bossid(), target);
  }

  // optional bytes BattleRet = 2;
  if (has_battleret()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->battleret(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TWorldBossNewReportBattleReq)
  return target;
}

int TWorldBossNewReportBattleReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 BossId = 1;
    if (has_bossid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->bossid());
    }

    // optional bytes BattleRet = 2;
    if (has_battleret()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->battleret());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TWorldBossNewReportBattleReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TWorldBossNewReportBattleReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TWorldBossNewReportBattleReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TWorldBossNewReportBattleReq::MergeFrom(const TWorldBossNewReportBattleReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_bossid()) {
      set_bossid(from.bossid());
    }
    if (from.has_battleret()) {
      set_battleret(from.battleret());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TWorldBossNewReportBattleReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TWorldBossNewReportBattleReq::CopyFrom(const TWorldBossNewReportBattleReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TWorldBossNewReportBattleReq::IsInitialized() const {

  return true;
}

void TWorldBossNewReportBattleReq::Swap(TWorldBossNewReportBattleReq* other) {
  if (other != this) {
    std::swap(bossid_, other->bossid_);
    std::swap(battleret_, other->battleret_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TWorldBossNewReportBattleReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TWorldBossNewReportBattleReq_descriptor_;
  metadata.reflection = TWorldBossNewReportBattleReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TWorldBossNewReportBattleRsp::kUsedAtkNumFieldNumber;
const int TWorldBossNewReportBattleRsp::kMyUserRankFieldNumber;
const int TWorldBossNewReportBattleRsp::kIsNewRecordFieldNumber;
const int TWorldBossNewReportBattleRsp::kDropArrayFieldNumber;
#endif  // !_MSC_VER

TWorldBossNewReportBattleRsp::TWorldBossNewReportBattleRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TWorldBossNewReportBattleRsp)
}

void TWorldBossNewReportBattleRsp::InitAsDefaultInstance() {
  myuserrank_ = const_cast< ::pb::TWorldBossNewUserDamageSingle*>(&::pb::TWorldBossNewUserDamageSingle::default_instance());
}

TWorldBossNewReportBattleRsp::TWorldBossNewReportBattleRsp(const TWorldBossNewReportBattleRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TWorldBossNewReportBattleRsp)
}

void TWorldBossNewReportBattleRsp::SharedCtor() {
  _cached_size_ = 0;
  usedatknum_ = 0u;
  myuserrank_ = NULL;
  isnewrecord_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TWorldBossNewReportBattleRsp::~TWorldBossNewReportBattleRsp() {
  // @@protoc_insertion_point(destructor:pb.TWorldBossNewReportBattleRsp)
  SharedDtor();
}

void TWorldBossNewReportBattleRsp::SharedDtor() {
  if (this != default_instance_) {
    delete myuserrank_;
  }
}

void TWorldBossNewReportBattleRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TWorldBossNewReportBattleRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TWorldBossNewReportBattleRsp_descriptor_;
}

const TWorldBossNewReportBattleRsp& TWorldBossNewReportBattleRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fWorldBossNew_2eproto();
  return *default_instance_;
}

TWorldBossNewReportBattleRsp* TWorldBossNewReportBattleRsp::default_instance_ = NULL;

TWorldBossNewReportBattleRsp* TWorldBossNewReportBattleRsp::New() const {
  return new TWorldBossNewReportBattleRsp;
}

void TWorldBossNewReportBattleRsp::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<TWorldBossNewReportBattleRsp*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 7) {
    ZR_(usedatknum_, isnewrecord_);
    if (has_myuserrank()) {
      if (myuserrank_ != NULL) myuserrank_->::pb::TWorldBossNewUserDamageSingle::Clear();
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  droparray_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TWorldBossNewReportBattleRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TWorldBossNewReportBattleRsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 UsedAtkNum = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &usedatknum_)));
          set_has_usedatknum();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_MyUserRank;
        break;
      }

      // optional .pb.TWorldBossNewUserDamageSingle MyUserRank = 2;
      case 2: {
        if (tag == 18) {
         parse_MyUserRank:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_myuserrank()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_IsNewRecord;
        break;
      }

      // optional bool IsNewRecord = 3;
      case 3: {
        if (tag == 24) {
         parse_IsNewRecord:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &isnewrecord_)));
          set_has_isnewrecord();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_DropArray;
        break;
      }

      // repeated .pb.TCommonReward DropArray = 4;
      case 4: {
        if (tag == 34) {
         parse_DropArray:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_droparray()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_DropArray;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TWorldBossNewReportBattleRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TWorldBossNewReportBattleRsp)
  return false;
#undef DO_
}

void TWorldBossNewReportBattleRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TWorldBossNewReportBattleRsp)
  // optional uint32 UsedAtkNum = 1;
  if (has_usedatknum()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->usedatknum(), output);
  }

  // optional .pb.TWorldBossNewUserDamageSingle MyUserRank = 2;
  if (has_myuserrank()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->myuserrank(), output);
  }

  // optional bool IsNewRecord = 3;
  if (has_isnewrecord()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->isnewrecord(), output);
  }

  // repeated .pb.TCommonReward DropArray = 4;
  for (int i = 0; i < this->droparray_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->droparray(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TWorldBossNewReportBattleRsp)
}

::google::protobuf::uint8* TWorldBossNewReportBattleRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TWorldBossNewReportBattleRsp)
  // optional uint32 UsedAtkNum = 1;
  if (has_usedatknum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->usedatknum(), target);
  }

  // optional .pb.TWorldBossNewUserDamageSingle MyUserRank = 2;
  if (has_myuserrank()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->myuserrank(), target);
  }

  // optional bool IsNewRecord = 3;
  if (has_isnewrecord()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->isnewrecord(), target);
  }

  // repeated .pb.TCommonReward DropArray = 4;
  for (int i = 0; i < this->droparray_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->droparray(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TWorldBossNewReportBattleRsp)
  return target;
}

int TWorldBossNewReportBattleRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 UsedAtkNum = 1;
    if (has_usedatknum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->usedatknum());
    }

    // optional .pb.TWorldBossNewUserDamageSingle MyUserRank = 2;
    if (has_myuserrank()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->myuserrank());
    }

    // optional bool IsNewRecord = 3;
    if (has_isnewrecord()) {
      total_size += 1 + 1;
    }

  }
  // repeated .pb.TCommonReward DropArray = 4;
  total_size += 1 * this->droparray_size();
  for (int i = 0; i < this->droparray_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->droparray(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TWorldBossNewReportBattleRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TWorldBossNewReportBattleRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TWorldBossNewReportBattleRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TWorldBossNewReportBattleRsp::MergeFrom(const TWorldBossNewReportBattleRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  droparray_.MergeFrom(from.droparray_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_usedatknum()) {
      set_usedatknum(from.usedatknum());
    }
    if (from.has_myuserrank()) {
      mutable_myuserrank()->::pb::TWorldBossNewUserDamageSingle::MergeFrom(from.myuserrank());
    }
    if (from.has_isnewrecord()) {
      set_isnewrecord(from.isnewrecord());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TWorldBossNewReportBattleRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TWorldBossNewReportBattleRsp::CopyFrom(const TWorldBossNewReportBattleRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TWorldBossNewReportBattleRsp::IsInitialized() const {

  return true;
}

void TWorldBossNewReportBattleRsp::Swap(TWorldBossNewReportBattleRsp* other) {
  if (other != this) {
    std::swap(usedatknum_, other->usedatknum_);
    std::swap(myuserrank_, other->myuserrank_);
    std::swap(isnewrecord_, other->isnewrecord_);
    droparray_.Swap(&other->droparray_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TWorldBossNewReportBattleRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TWorldBossNewReportBattleRsp_descriptor_;
  metadata.reflection = TWorldBossNewReportBattleRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TWorldBossNewBuyAtkNumRsp::kBuyNumFieldNumber;
const int TWorldBossNewBuyAtkNumRsp::kBuyAtkNumFieldNumber;
#endif  // !_MSC_VER

TWorldBossNewBuyAtkNumRsp::TWorldBossNewBuyAtkNumRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TWorldBossNewBuyAtkNumRsp)
}

void TWorldBossNewBuyAtkNumRsp::InitAsDefaultInstance() {
}

TWorldBossNewBuyAtkNumRsp::TWorldBossNewBuyAtkNumRsp(const TWorldBossNewBuyAtkNumRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TWorldBossNewBuyAtkNumRsp)
}

void TWorldBossNewBuyAtkNumRsp::SharedCtor() {
  _cached_size_ = 0;
  buynum_ = 0u;
  buyatknum_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TWorldBossNewBuyAtkNumRsp::~TWorldBossNewBuyAtkNumRsp() {
  // @@protoc_insertion_point(destructor:pb.TWorldBossNewBuyAtkNumRsp)
  SharedDtor();
}

void TWorldBossNewBuyAtkNumRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TWorldBossNewBuyAtkNumRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TWorldBossNewBuyAtkNumRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TWorldBossNewBuyAtkNumRsp_descriptor_;
}

const TWorldBossNewBuyAtkNumRsp& TWorldBossNewBuyAtkNumRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fWorldBossNew_2eproto();
  return *default_instance_;
}

TWorldBossNewBuyAtkNumRsp* TWorldBossNewBuyAtkNumRsp::default_instance_ = NULL;

TWorldBossNewBuyAtkNumRsp* TWorldBossNewBuyAtkNumRsp::New() const {
  return new TWorldBossNewBuyAtkNumRsp;
}

void TWorldBossNewBuyAtkNumRsp::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<TWorldBossNewBuyAtkNumRsp*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(buynum_, buyatknum_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TWorldBossNewBuyAtkNumRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TWorldBossNewBuyAtkNumRsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 BuyNum = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &buynum_)));
          set_has_buynum();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_BuyAtkNum;
        break;
      }

      // optional uint32 BuyAtkNum = 2;
      case 2: {
        if (tag == 16) {
         parse_BuyAtkNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &buyatknum_)));
          set_has_buyatknum();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TWorldBossNewBuyAtkNumRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TWorldBossNewBuyAtkNumRsp)
  return false;
#undef DO_
}

void TWorldBossNewBuyAtkNumRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TWorldBossNewBuyAtkNumRsp)
  // optional uint32 BuyNum = 1;
  if (has_buynum()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->buynum(), output);
  }

  // optional uint32 BuyAtkNum = 2;
  if (has_buyatknum()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->buyatknum(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TWorldBossNewBuyAtkNumRsp)
}

::google::protobuf::uint8* TWorldBossNewBuyAtkNumRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TWorldBossNewBuyAtkNumRsp)
  // optional uint32 BuyNum = 1;
  if (has_buynum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->buynum(), target);
  }

  // optional uint32 BuyAtkNum = 2;
  if (has_buyatknum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->buyatknum(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TWorldBossNewBuyAtkNumRsp)
  return target;
}

int TWorldBossNewBuyAtkNumRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 BuyNum = 1;
    if (has_buynum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->buynum());
    }

    // optional uint32 BuyAtkNum = 2;
    if (has_buyatknum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->buyatknum());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TWorldBossNewBuyAtkNumRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TWorldBossNewBuyAtkNumRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TWorldBossNewBuyAtkNumRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TWorldBossNewBuyAtkNumRsp::MergeFrom(const TWorldBossNewBuyAtkNumRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_buynum()) {
      set_buynum(from.buynum());
    }
    if (from.has_buyatknum()) {
      set_buyatknum(from.buyatknum());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TWorldBossNewBuyAtkNumRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TWorldBossNewBuyAtkNumRsp::CopyFrom(const TWorldBossNewBuyAtkNumRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TWorldBossNewBuyAtkNumRsp::IsInitialized() const {

  return true;
}

void TWorldBossNewBuyAtkNumRsp::Swap(TWorldBossNewBuyAtkNumRsp* other) {
  if (other != this) {
    std::swap(buynum_, other->buynum_);
    std::swap(buyatknum_, other->buyatknum_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TWorldBossNewBuyAtkNumRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TWorldBossNewBuyAtkNumRsp_descriptor_;
  metadata.reflection = TWorldBossNewBuyAtkNumRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TWorldBossNewServerPush::kRankTypeArrFieldNumber;
#endif  // !_MSC_VER

TWorldBossNewServerPush::TWorldBossNewServerPush()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TWorldBossNewServerPush)
}

void TWorldBossNewServerPush::InitAsDefaultInstance() {
}

TWorldBossNewServerPush::TWorldBossNewServerPush(const TWorldBossNewServerPush& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TWorldBossNewServerPush)
}

void TWorldBossNewServerPush::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TWorldBossNewServerPush::~TWorldBossNewServerPush() {
  // @@protoc_insertion_point(destructor:pb.TWorldBossNewServerPush)
  SharedDtor();
}

void TWorldBossNewServerPush::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TWorldBossNewServerPush::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TWorldBossNewServerPush::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TWorldBossNewServerPush_descriptor_;
}

const TWorldBossNewServerPush& TWorldBossNewServerPush::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fWorldBossNew_2eproto();
  return *default_instance_;
}

TWorldBossNewServerPush* TWorldBossNewServerPush::default_instance_ = NULL;

TWorldBossNewServerPush* TWorldBossNewServerPush::New() const {
  return new TWorldBossNewServerPush;
}

void TWorldBossNewServerPush::Clear() {
  ranktypearr_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TWorldBossNewServerPush::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TWorldBossNewServerPush)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .pb.TWorldBossNewUserRankType RankTypeArr = 1;
      case 1: {
        if (tag == 10) {
         parse_RankTypeArr:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_ranktypearr()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_RankTypeArr;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TWorldBossNewServerPush)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TWorldBossNewServerPush)
  return false;
#undef DO_
}

void TWorldBossNewServerPush::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TWorldBossNewServerPush)
  // repeated .pb.TWorldBossNewUserRankType RankTypeArr = 1;
  for (int i = 0; i < this->ranktypearr_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->ranktypearr(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TWorldBossNewServerPush)
}

::google::protobuf::uint8* TWorldBossNewServerPush::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TWorldBossNewServerPush)
  // repeated .pb.TWorldBossNewUserRankType RankTypeArr = 1;
  for (int i = 0; i < this->ranktypearr_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->ranktypearr(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TWorldBossNewServerPush)
  return target;
}

int TWorldBossNewServerPush::ByteSize() const {
  int total_size = 0;

  // repeated .pb.TWorldBossNewUserRankType RankTypeArr = 1;
  total_size += 1 * this->ranktypearr_size();
  for (int i = 0; i < this->ranktypearr_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->ranktypearr(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TWorldBossNewServerPush::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TWorldBossNewServerPush* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TWorldBossNewServerPush*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TWorldBossNewServerPush::MergeFrom(const TWorldBossNewServerPush& from) {
  GOOGLE_CHECK_NE(&from, this);
  ranktypearr_.MergeFrom(from.ranktypearr_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TWorldBossNewServerPush::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TWorldBossNewServerPush::CopyFrom(const TWorldBossNewServerPush& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TWorldBossNewServerPush::IsInitialized() const {

  return true;
}

void TWorldBossNewServerPush::Swap(TWorldBossNewServerPush* other) {
  if (other != this) {
    ranktypearr_.Swap(&other->ranktypearr_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TWorldBossNewServerPush::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TWorldBossNewServerPush_descriptor_;
  metadata.reflection = TWorldBossNewServerPush_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TWorldBossNewReceiveDamageRewardReq::kDamageRewardTidFieldNumber;
#endif  // !_MSC_VER

TWorldBossNewReceiveDamageRewardReq::TWorldBossNewReceiveDamageRewardReq()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TWorldBossNewReceiveDamageRewardReq)
}

void TWorldBossNewReceiveDamageRewardReq::InitAsDefaultInstance() {
}

TWorldBossNewReceiveDamageRewardReq::TWorldBossNewReceiveDamageRewardReq(const TWorldBossNewReceiveDamageRewardReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TWorldBossNewReceiveDamageRewardReq)
}

void TWorldBossNewReceiveDamageRewardReq::SharedCtor() {
  _cached_size_ = 0;
  damagerewardtid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TWorldBossNewReceiveDamageRewardReq::~TWorldBossNewReceiveDamageRewardReq() {
  // @@protoc_insertion_point(destructor:pb.TWorldBossNewReceiveDamageRewardReq)
  SharedDtor();
}

void TWorldBossNewReceiveDamageRewardReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TWorldBossNewReceiveDamageRewardReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TWorldBossNewReceiveDamageRewardReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TWorldBossNewReceiveDamageRewardReq_descriptor_;
}

const TWorldBossNewReceiveDamageRewardReq& TWorldBossNewReceiveDamageRewardReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fWorldBossNew_2eproto();
  return *default_instance_;
}

TWorldBossNewReceiveDamageRewardReq* TWorldBossNewReceiveDamageRewardReq::default_instance_ = NULL;

TWorldBossNewReceiveDamageRewardReq* TWorldBossNewReceiveDamageRewardReq::New() const {
  return new TWorldBossNewReceiveDamageRewardReq;
}

void TWorldBossNewReceiveDamageRewardReq::Clear() {
  damagerewardtid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TWorldBossNewReceiveDamageRewardReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TWorldBossNewReceiveDamageRewardReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 DamageRewardTid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &damagerewardtid_)));
          set_has_damagerewardtid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TWorldBossNewReceiveDamageRewardReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TWorldBossNewReceiveDamageRewardReq)
  return false;
#undef DO_
}

void TWorldBossNewReceiveDamageRewardReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TWorldBossNewReceiveDamageRewardReq)
  // optional uint32 DamageRewardTid = 1;
  if (has_damagerewardtid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->damagerewardtid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TWorldBossNewReceiveDamageRewardReq)
}

::google::protobuf::uint8* TWorldBossNewReceiveDamageRewardReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TWorldBossNewReceiveDamageRewardReq)
  // optional uint32 DamageRewardTid = 1;
  if (has_damagerewardtid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->damagerewardtid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TWorldBossNewReceiveDamageRewardReq)
  return target;
}

int TWorldBossNewReceiveDamageRewardReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 DamageRewardTid = 1;
    if (has_damagerewardtid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->damagerewardtid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TWorldBossNewReceiveDamageRewardReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TWorldBossNewReceiveDamageRewardReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TWorldBossNewReceiveDamageRewardReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TWorldBossNewReceiveDamageRewardReq::MergeFrom(const TWorldBossNewReceiveDamageRewardReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_damagerewardtid()) {
      set_damagerewardtid(from.damagerewardtid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TWorldBossNewReceiveDamageRewardReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TWorldBossNewReceiveDamageRewardReq::CopyFrom(const TWorldBossNewReceiveDamageRewardReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TWorldBossNewReceiveDamageRewardReq::IsInitialized() const {

  return true;
}

void TWorldBossNewReceiveDamageRewardReq::Swap(TWorldBossNewReceiveDamageRewardReq* other) {
  if (other != this) {
    std::swap(damagerewardtid_, other->damagerewardtid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TWorldBossNewReceiveDamageRewardReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TWorldBossNewReceiveDamageRewardReq_descriptor_;
  metadata.reflection = TWorldBossNewReceiveDamageRewardReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TWorldBossNewReceiveDamageRewardRsp::kRewardArrFieldNumber;
#endif  // !_MSC_VER

TWorldBossNewReceiveDamageRewardRsp::TWorldBossNewReceiveDamageRewardRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TWorldBossNewReceiveDamageRewardRsp)
}

void TWorldBossNewReceiveDamageRewardRsp::InitAsDefaultInstance() {
}

TWorldBossNewReceiveDamageRewardRsp::TWorldBossNewReceiveDamageRewardRsp(const TWorldBossNewReceiveDamageRewardRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TWorldBossNewReceiveDamageRewardRsp)
}

void TWorldBossNewReceiveDamageRewardRsp::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TWorldBossNewReceiveDamageRewardRsp::~TWorldBossNewReceiveDamageRewardRsp() {
  // @@protoc_insertion_point(destructor:pb.TWorldBossNewReceiveDamageRewardRsp)
  SharedDtor();
}

void TWorldBossNewReceiveDamageRewardRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TWorldBossNewReceiveDamageRewardRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TWorldBossNewReceiveDamageRewardRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TWorldBossNewReceiveDamageRewardRsp_descriptor_;
}

const TWorldBossNewReceiveDamageRewardRsp& TWorldBossNewReceiveDamageRewardRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fWorldBossNew_2eproto();
  return *default_instance_;
}

TWorldBossNewReceiveDamageRewardRsp* TWorldBossNewReceiveDamageRewardRsp::default_instance_ = NULL;

TWorldBossNewReceiveDamageRewardRsp* TWorldBossNewReceiveDamageRewardRsp::New() const {
  return new TWorldBossNewReceiveDamageRewardRsp;
}

void TWorldBossNewReceiveDamageRewardRsp::Clear() {
  rewardarr_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TWorldBossNewReceiveDamageRewardRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TWorldBossNewReceiveDamageRewardRsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .pb.TCommonReward RewardArr = 1;
      case 1: {
        if (tag == 10) {
         parse_RewardArr:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_rewardarr()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_RewardArr;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TWorldBossNewReceiveDamageRewardRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TWorldBossNewReceiveDamageRewardRsp)
  return false;
#undef DO_
}

void TWorldBossNewReceiveDamageRewardRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TWorldBossNewReceiveDamageRewardRsp)
  // repeated .pb.TCommonReward RewardArr = 1;
  for (int i = 0; i < this->rewardarr_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->rewardarr(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TWorldBossNewReceiveDamageRewardRsp)
}

::google::protobuf::uint8* TWorldBossNewReceiveDamageRewardRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TWorldBossNewReceiveDamageRewardRsp)
  // repeated .pb.TCommonReward RewardArr = 1;
  for (int i = 0; i < this->rewardarr_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->rewardarr(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TWorldBossNewReceiveDamageRewardRsp)
  return target;
}

int TWorldBossNewReceiveDamageRewardRsp::ByteSize() const {
  int total_size = 0;

  // repeated .pb.TCommonReward RewardArr = 1;
  total_size += 1 * this->rewardarr_size();
  for (int i = 0; i < this->rewardarr_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->rewardarr(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TWorldBossNewReceiveDamageRewardRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TWorldBossNewReceiveDamageRewardRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TWorldBossNewReceiveDamageRewardRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TWorldBossNewReceiveDamageRewardRsp::MergeFrom(const TWorldBossNewReceiveDamageRewardRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  rewardarr_.MergeFrom(from.rewardarr_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TWorldBossNewReceiveDamageRewardRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TWorldBossNewReceiveDamageRewardRsp::CopyFrom(const TWorldBossNewReceiveDamageRewardRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TWorldBossNewReceiveDamageRewardRsp::IsInitialized() const {

  return true;
}

void TWorldBossNewReceiveDamageRewardRsp::Swap(TWorldBossNewReceiveDamageRewardRsp* other) {
  if (other != this) {
    rewardarr_.Swap(&other->rewardarr_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TWorldBossNewReceiveDamageRewardRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TWorldBossNewReceiveDamageRewardRsp_descriptor_;
  metadata.reflection = TWorldBossNewReceiveDamageRewardRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TWorldBossNewAutoReceiveDamageRewardRsp::kReceivedDamageRewardTidArrFieldNumber;
const int TWorldBossNewAutoReceiveDamageRewardRsp::kRewardArrFieldNumber;
#endif  // !_MSC_VER

TWorldBossNewAutoReceiveDamageRewardRsp::TWorldBossNewAutoReceiveDamageRewardRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TWorldBossNewAutoReceiveDamageRewardRsp)
}

void TWorldBossNewAutoReceiveDamageRewardRsp::InitAsDefaultInstance() {
}

TWorldBossNewAutoReceiveDamageRewardRsp::TWorldBossNewAutoReceiveDamageRewardRsp(const TWorldBossNewAutoReceiveDamageRewardRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TWorldBossNewAutoReceiveDamageRewardRsp)
}

void TWorldBossNewAutoReceiveDamageRewardRsp::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TWorldBossNewAutoReceiveDamageRewardRsp::~TWorldBossNewAutoReceiveDamageRewardRsp() {
  // @@protoc_insertion_point(destructor:pb.TWorldBossNewAutoReceiveDamageRewardRsp)
  SharedDtor();
}

void TWorldBossNewAutoReceiveDamageRewardRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TWorldBossNewAutoReceiveDamageRewardRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TWorldBossNewAutoReceiveDamageRewardRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TWorldBossNewAutoReceiveDamageRewardRsp_descriptor_;
}

const TWorldBossNewAutoReceiveDamageRewardRsp& TWorldBossNewAutoReceiveDamageRewardRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fWorldBossNew_2eproto();
  return *default_instance_;
}

TWorldBossNewAutoReceiveDamageRewardRsp* TWorldBossNewAutoReceiveDamageRewardRsp::default_instance_ = NULL;

TWorldBossNewAutoReceiveDamageRewardRsp* TWorldBossNewAutoReceiveDamageRewardRsp::New() const {
  return new TWorldBossNewAutoReceiveDamageRewardRsp;
}

void TWorldBossNewAutoReceiveDamageRewardRsp::Clear() {
  receiveddamagerewardtidarr_.Clear();
  rewardarr_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TWorldBossNewAutoReceiveDamageRewardRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TWorldBossNewAutoReceiveDamageRewardRsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated uint32 ReceivedDamageRewardTidArr = 1;
      case 1: {
        if (tag == 8) {
         parse_ReceivedDamageRewardTidArr:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 8, input, this->mutable_receiveddamagerewardtidarr())));
        } else if (tag == 10) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_receiveddamagerewardtidarr())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(8)) goto parse_ReceivedDamageRewardTidArr;
        if (input->ExpectTag(18)) goto parse_RewardArr;
        break;
      }

      // repeated .pb.TCommonReward RewardArr = 2;
      case 2: {
        if (tag == 18) {
         parse_RewardArr:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_rewardarr()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_RewardArr;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TWorldBossNewAutoReceiveDamageRewardRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TWorldBossNewAutoReceiveDamageRewardRsp)
  return false;
#undef DO_
}

void TWorldBossNewAutoReceiveDamageRewardRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TWorldBossNewAutoReceiveDamageRewardRsp)
  // repeated uint32 ReceivedDamageRewardTidArr = 1;
  for (int i = 0; i < this->receiveddamagerewardtidarr_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      1, this->receiveddamagerewardtidarr(i), output);
  }

  // repeated .pb.TCommonReward RewardArr = 2;
  for (int i = 0; i < this->rewardarr_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->rewardarr(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TWorldBossNewAutoReceiveDamageRewardRsp)
}

::google::protobuf::uint8* TWorldBossNewAutoReceiveDamageRewardRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TWorldBossNewAutoReceiveDamageRewardRsp)
  // repeated uint32 ReceivedDamageRewardTidArr = 1;
  for (int i = 0; i < this->receiveddamagerewardtidarr_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(1, this->receiveddamagerewardtidarr(i), target);
  }

  // repeated .pb.TCommonReward RewardArr = 2;
  for (int i = 0; i < this->rewardarr_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->rewardarr(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TWorldBossNewAutoReceiveDamageRewardRsp)
  return target;
}

int TWorldBossNewAutoReceiveDamageRewardRsp::ByteSize() const {
  int total_size = 0;

  // repeated uint32 ReceivedDamageRewardTidArr = 1;
  {
    int data_size = 0;
    for (int i = 0; i < this->receiveddamagerewardtidarr_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->receiveddamagerewardtidarr(i));
    }
    total_size += 1 * this->receiveddamagerewardtidarr_size() + data_size;
  }

  // repeated .pb.TCommonReward RewardArr = 2;
  total_size += 1 * this->rewardarr_size();
  for (int i = 0; i < this->rewardarr_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->rewardarr(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TWorldBossNewAutoReceiveDamageRewardRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TWorldBossNewAutoReceiveDamageRewardRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TWorldBossNewAutoReceiveDamageRewardRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TWorldBossNewAutoReceiveDamageRewardRsp::MergeFrom(const TWorldBossNewAutoReceiveDamageRewardRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  receiveddamagerewardtidarr_.MergeFrom(from.receiveddamagerewardtidarr_);
  rewardarr_.MergeFrom(from.rewardarr_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TWorldBossNewAutoReceiveDamageRewardRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TWorldBossNewAutoReceiveDamageRewardRsp::CopyFrom(const TWorldBossNewAutoReceiveDamageRewardRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TWorldBossNewAutoReceiveDamageRewardRsp::IsInitialized() const {

  return true;
}

void TWorldBossNewAutoReceiveDamageRewardRsp::Swap(TWorldBossNewAutoReceiveDamageRewardRsp* other) {
  if (other != this) {
    receiveddamagerewardtidarr_.Swap(&other->receiveddamagerewardtidarr_);
    rewardarr_.Swap(&other->rewardarr_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TWorldBossNewAutoReceiveDamageRewardRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TWorldBossNewAutoReceiveDamageRewardRsp_descriptor_;
  metadata.reflection = TWorldBossNewAutoReceiveDamageRewardRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TWorldBossNewUnit::kHidFieldNumber;
const int TWorldBossNewUnit::kPosFieldNumber;
const int TWorldBossNewUnit::kStarLvFieldNumber;
const int TWorldBossNewUnit::kLevelFieldNumber;
#endif  // !_MSC_VER

TWorldBossNewUnit::TWorldBossNewUnit()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TWorldBossNewUnit)
}

void TWorldBossNewUnit::InitAsDefaultInstance() {
}

TWorldBossNewUnit::TWorldBossNewUnit(const TWorldBossNewUnit& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TWorldBossNewUnit)
}

void TWorldBossNewUnit::SharedCtor() {
  _cached_size_ = 0;
  hid_ = 0u;
  pos_ = 0u;
  starlv_ = 0u;
  level_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TWorldBossNewUnit::~TWorldBossNewUnit() {
  // @@protoc_insertion_point(destructor:pb.TWorldBossNewUnit)
  SharedDtor();
}

void TWorldBossNewUnit::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TWorldBossNewUnit::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TWorldBossNewUnit::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TWorldBossNewUnit_descriptor_;
}

const TWorldBossNewUnit& TWorldBossNewUnit::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fWorldBossNew_2eproto();
  return *default_instance_;
}

TWorldBossNewUnit* TWorldBossNewUnit::default_instance_ = NULL;

TWorldBossNewUnit* TWorldBossNewUnit::New() const {
  return new TWorldBossNewUnit;
}

void TWorldBossNewUnit::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<TWorldBossNewUnit*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(hid_, level_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TWorldBossNewUnit::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TWorldBossNewUnit)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 Hid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &hid_)));
          set_has_hid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_Pos;
        break;
      }

      // optional uint32 Pos = 2;
      case 2: {
        if (tag == 16) {
         parse_Pos:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &pos_)));
          set_has_pos();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_StarLv;
        break;
      }

      // optional uint32 StarLv = 3;
      case 3: {
        if (tag == 24) {
         parse_StarLv:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &starlv_)));
          set_has_starlv();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_Level;
        break;
      }

      // optional uint32 Level = 4;
      case 4: {
        if (tag == 32) {
         parse_Level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &level_)));
          set_has_level();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TWorldBossNewUnit)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TWorldBossNewUnit)
  return false;
#undef DO_
}

void TWorldBossNewUnit::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TWorldBossNewUnit)
  // optional uint32 Hid = 1;
  if (has_hid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->hid(), output);
  }

  // optional uint32 Pos = 2;
  if (has_pos()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->pos(), output);
  }

  // optional uint32 StarLv = 3;
  if (has_starlv()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->starlv(), output);
  }

  // optional uint32 Level = 4;
  if (has_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->level(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TWorldBossNewUnit)
}

::google::protobuf::uint8* TWorldBossNewUnit::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TWorldBossNewUnit)
  // optional uint32 Hid = 1;
  if (has_hid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->hid(), target);
  }

  // optional uint32 Pos = 2;
  if (has_pos()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->pos(), target);
  }

  // optional uint32 StarLv = 3;
  if (has_starlv()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->starlv(), target);
  }

  // optional uint32 Level = 4;
  if (has_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->level(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TWorldBossNewUnit)
  return target;
}

int TWorldBossNewUnit::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 Hid = 1;
    if (has_hid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->hid());
    }

    // optional uint32 Pos = 2;
    if (has_pos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->pos());
    }

    // optional uint32 StarLv = 3;
    if (has_starlv()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->starlv());
    }

    // optional uint32 Level = 4;
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->level());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TWorldBossNewUnit::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TWorldBossNewUnit* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TWorldBossNewUnit*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TWorldBossNewUnit::MergeFrom(const TWorldBossNewUnit& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_hid()) {
      set_hid(from.hid());
    }
    if (from.has_pos()) {
      set_pos(from.pos());
    }
    if (from.has_starlv()) {
      set_starlv(from.starlv());
    }
    if (from.has_level()) {
      set_level(from.level());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TWorldBossNewUnit::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TWorldBossNewUnit::CopyFrom(const TWorldBossNewUnit& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TWorldBossNewUnit::IsInitialized() const {

  return true;
}

void TWorldBossNewUnit::Swap(TWorldBossNewUnit* other) {
  if (other != this) {
    std::swap(hid_, other->hid_);
    std::swap(pos_, other->pos_);
    std::swap(starlv_, other->starlv_);
    std::swap(level_, other->level_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TWorldBossNewUnit::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TWorldBossNewUnit_descriptor_;
  metadata.reflection = TWorldBossNewUnit_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TWorldBossNewBattleRecord::kReportIdFieldNumber;
const int TWorldBossNewBattleRecord::kTimeFieldNumber;
const int TWorldBossNewBattleRecord::kDamageFieldNumber;
const int TWorldBossNewBattleRecord::kUnitArrFieldNumber;
#endif  // !_MSC_VER

TWorldBossNewBattleRecord::TWorldBossNewBattleRecord()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TWorldBossNewBattleRecord)
}

void TWorldBossNewBattleRecord::InitAsDefaultInstance() {
}

TWorldBossNewBattleRecord::TWorldBossNewBattleRecord(const TWorldBossNewBattleRecord& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TWorldBossNewBattleRecord)
}

void TWorldBossNewBattleRecord::SharedCtor() {
  _cached_size_ = 0;
  reportid_ = GOOGLE_ULONGLONG(0);
  time_ = GOOGLE_ULONGLONG(0);
  damage_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TWorldBossNewBattleRecord::~TWorldBossNewBattleRecord() {
  // @@protoc_insertion_point(destructor:pb.TWorldBossNewBattleRecord)
  SharedDtor();
}

void TWorldBossNewBattleRecord::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TWorldBossNewBattleRecord::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TWorldBossNewBattleRecord::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TWorldBossNewBattleRecord_descriptor_;
}

const TWorldBossNewBattleRecord& TWorldBossNewBattleRecord::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fWorldBossNew_2eproto();
  return *default_instance_;
}

TWorldBossNewBattleRecord* TWorldBossNewBattleRecord::default_instance_ = NULL;

TWorldBossNewBattleRecord* TWorldBossNewBattleRecord::New() const {
  return new TWorldBossNewBattleRecord;
}

void TWorldBossNewBattleRecord::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<TWorldBossNewBattleRecord*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(reportid_, damage_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  unitarr_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TWorldBossNewBattleRecord::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TWorldBossNewBattleRecord)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 ReportId = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &reportid_)));
          set_has_reportid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_Time;
        break;
      }

      // optional uint64 Time = 2;
      case 2: {
        if (tag == 16) {
         parse_Time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &time_)));
          set_has_time();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_Damage;
        break;
      }

      // optional uint64 Damage = 3;
      case 3: {
        if (tag == 24) {
         parse_Damage:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &damage_)));
          set_has_damage();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_UnitArr;
        break;
      }

      // repeated .pb.TWorldBossNewUnit UnitArr = 4;
      case 4: {
        if (tag == 34) {
         parse_UnitArr:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_unitarr()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_UnitArr;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TWorldBossNewBattleRecord)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TWorldBossNewBattleRecord)
  return false;
#undef DO_
}

void TWorldBossNewBattleRecord::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TWorldBossNewBattleRecord)
  // optional uint64 ReportId = 1;
  if (has_reportid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->reportid(), output);
  }

  // optional uint64 Time = 2;
  if (has_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->time(), output);
  }

  // optional uint64 Damage = 3;
  if (has_damage()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->damage(), output);
  }

  // repeated .pb.TWorldBossNewUnit UnitArr = 4;
  for (int i = 0; i < this->unitarr_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->unitarr(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TWorldBossNewBattleRecord)
}

::google::protobuf::uint8* TWorldBossNewBattleRecord::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TWorldBossNewBattleRecord)
  // optional uint64 ReportId = 1;
  if (has_reportid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->reportid(), target);
  }

  // optional uint64 Time = 2;
  if (has_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->time(), target);
  }

  // optional uint64 Damage = 3;
  if (has_damage()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->damage(), target);
  }

  // repeated .pb.TWorldBossNewUnit UnitArr = 4;
  for (int i = 0; i < this->unitarr_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->unitarr(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TWorldBossNewBattleRecord)
  return target;
}

int TWorldBossNewBattleRecord::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 ReportId = 1;
    if (has_reportid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->reportid());
    }

    // optional uint64 Time = 2;
    if (has_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->time());
    }

    // optional uint64 Damage = 3;
    if (has_damage()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->damage());
    }

  }
  // repeated .pb.TWorldBossNewUnit UnitArr = 4;
  total_size += 1 * this->unitarr_size();
  for (int i = 0; i < this->unitarr_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->unitarr(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TWorldBossNewBattleRecord::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TWorldBossNewBattleRecord* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TWorldBossNewBattleRecord*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TWorldBossNewBattleRecord::MergeFrom(const TWorldBossNewBattleRecord& from) {
  GOOGLE_CHECK_NE(&from, this);
  unitarr_.MergeFrom(from.unitarr_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_reportid()) {
      set_reportid(from.reportid());
    }
    if (from.has_time()) {
      set_time(from.time());
    }
    if (from.has_damage()) {
      set_damage(from.damage());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TWorldBossNewBattleRecord::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TWorldBossNewBattleRecord::CopyFrom(const TWorldBossNewBattleRecord& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TWorldBossNewBattleRecord::IsInitialized() const {

  return true;
}

void TWorldBossNewBattleRecord::Swap(TWorldBossNewBattleRecord* other) {
  if (other != this) {
    std::swap(reportid_, other->reportid_);
    std::swap(time_, other->time_);
    std::swap(damage_, other->damage_);
    unitarr_.Swap(&other->unitarr_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TWorldBossNewBattleRecord::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TWorldBossNewBattleRecord_descriptor_;
  metadata.reflection = TWorldBossNewBattleRecord_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TWorldBossNewGetBattleRecordRsp::kRecordArrFieldNumber;
#endif  // !_MSC_VER

TWorldBossNewGetBattleRecordRsp::TWorldBossNewGetBattleRecordRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TWorldBossNewGetBattleRecordRsp)
}

void TWorldBossNewGetBattleRecordRsp::InitAsDefaultInstance() {
}

TWorldBossNewGetBattleRecordRsp::TWorldBossNewGetBattleRecordRsp(const TWorldBossNewGetBattleRecordRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TWorldBossNewGetBattleRecordRsp)
}

void TWorldBossNewGetBattleRecordRsp::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TWorldBossNewGetBattleRecordRsp::~TWorldBossNewGetBattleRecordRsp() {
  // @@protoc_insertion_point(destructor:pb.TWorldBossNewGetBattleRecordRsp)
  SharedDtor();
}

void TWorldBossNewGetBattleRecordRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TWorldBossNewGetBattleRecordRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TWorldBossNewGetBattleRecordRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TWorldBossNewGetBattleRecordRsp_descriptor_;
}

const TWorldBossNewGetBattleRecordRsp& TWorldBossNewGetBattleRecordRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fWorldBossNew_2eproto();
  return *default_instance_;
}

TWorldBossNewGetBattleRecordRsp* TWorldBossNewGetBattleRecordRsp::default_instance_ = NULL;

TWorldBossNewGetBattleRecordRsp* TWorldBossNewGetBattleRecordRsp::New() const {
  return new TWorldBossNewGetBattleRecordRsp;
}

void TWorldBossNewGetBattleRecordRsp::Clear() {
  recordarr_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TWorldBossNewGetBattleRecordRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TWorldBossNewGetBattleRecordRsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .pb.TWorldBossNewBattleRecord RecordArr = 1;
      case 1: {
        if (tag == 10) {
         parse_RecordArr:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_recordarr()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_RecordArr;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TWorldBossNewGetBattleRecordRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TWorldBossNewGetBattleRecordRsp)
  return false;
#undef DO_
}

void TWorldBossNewGetBattleRecordRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TWorldBossNewGetBattleRecordRsp)
  // repeated .pb.TWorldBossNewBattleRecord RecordArr = 1;
  for (int i = 0; i < this->recordarr_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->recordarr(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TWorldBossNewGetBattleRecordRsp)
}

::google::protobuf::uint8* TWorldBossNewGetBattleRecordRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TWorldBossNewGetBattleRecordRsp)
  // repeated .pb.TWorldBossNewBattleRecord RecordArr = 1;
  for (int i = 0; i < this->recordarr_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->recordarr(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TWorldBossNewGetBattleRecordRsp)
  return target;
}

int TWorldBossNewGetBattleRecordRsp::ByteSize() const {
  int total_size = 0;

  // repeated .pb.TWorldBossNewBattleRecord RecordArr = 1;
  total_size += 1 * this->recordarr_size();
  for (int i = 0; i < this->recordarr_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->recordarr(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TWorldBossNewGetBattleRecordRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TWorldBossNewGetBattleRecordRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TWorldBossNewGetBattleRecordRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TWorldBossNewGetBattleRecordRsp::MergeFrom(const TWorldBossNewGetBattleRecordRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  recordarr_.MergeFrom(from.recordarr_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TWorldBossNewGetBattleRecordRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TWorldBossNewGetBattleRecordRsp::CopyFrom(const TWorldBossNewGetBattleRecordRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TWorldBossNewGetBattleRecordRsp::IsInitialized() const {

  return true;
}

void TWorldBossNewGetBattleRecordRsp::Swap(TWorldBossNewGetBattleRecordRsp* other) {
  if (other != this) {
    recordarr_.Swap(&other->recordarr_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TWorldBossNewGetBattleRecordRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TWorldBossNewGetBattleRecordRsp_descriptor_;
  metadata.reflection = TWorldBossNewGetBattleRecordRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TWorldBossNewGetRankInfoByLimitReq::kOffsetFieldNumber;
const int TWorldBossNewGetRankInfoByLimitReq::kLimitFieldNumber;
#endif  // !_MSC_VER

TWorldBossNewGetRankInfoByLimitReq::TWorldBossNewGetRankInfoByLimitReq()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TWorldBossNewGetRankInfoByLimitReq)
}

void TWorldBossNewGetRankInfoByLimitReq::InitAsDefaultInstance() {
}

TWorldBossNewGetRankInfoByLimitReq::TWorldBossNewGetRankInfoByLimitReq(const TWorldBossNewGetRankInfoByLimitReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TWorldBossNewGetRankInfoByLimitReq)
}

void TWorldBossNewGetRankInfoByLimitReq::SharedCtor() {
  _cached_size_ = 0;
  offset_ = 0u;
  limit_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TWorldBossNewGetRankInfoByLimitReq::~TWorldBossNewGetRankInfoByLimitReq() {
  // @@protoc_insertion_point(destructor:pb.TWorldBossNewGetRankInfoByLimitReq)
  SharedDtor();
}

void TWorldBossNewGetRankInfoByLimitReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TWorldBossNewGetRankInfoByLimitReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TWorldBossNewGetRankInfoByLimitReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TWorldBossNewGetRankInfoByLimitReq_descriptor_;
}

const TWorldBossNewGetRankInfoByLimitReq& TWorldBossNewGetRankInfoByLimitReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fWorldBossNew_2eproto();
  return *default_instance_;
}

TWorldBossNewGetRankInfoByLimitReq* TWorldBossNewGetRankInfoByLimitReq::default_instance_ = NULL;

TWorldBossNewGetRankInfoByLimitReq* TWorldBossNewGetRankInfoByLimitReq::New() const {
  return new TWorldBossNewGetRankInfoByLimitReq;
}

void TWorldBossNewGetRankInfoByLimitReq::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<TWorldBossNewGetRankInfoByLimitReq*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(offset_, limit_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TWorldBossNewGetRankInfoByLimitReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TWorldBossNewGetRankInfoByLimitReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 Offset = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &offset_)));
          set_has_offset();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_Limit;
        break;
      }

      // optional uint32 Limit = 2;
      case 2: {
        if (tag == 16) {
         parse_Limit:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &limit_)));
          set_has_limit();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TWorldBossNewGetRankInfoByLimitReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TWorldBossNewGetRankInfoByLimitReq)
  return false;
#undef DO_
}

void TWorldBossNewGetRankInfoByLimitReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TWorldBossNewGetRankInfoByLimitReq)
  // optional uint32 Offset = 1;
  if (has_offset()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->offset(), output);
  }

  // optional uint32 Limit = 2;
  if (has_limit()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->limit(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TWorldBossNewGetRankInfoByLimitReq)
}

::google::protobuf::uint8* TWorldBossNewGetRankInfoByLimitReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TWorldBossNewGetRankInfoByLimitReq)
  // optional uint32 Offset = 1;
  if (has_offset()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->offset(), target);
  }

  // optional uint32 Limit = 2;
  if (has_limit()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->limit(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TWorldBossNewGetRankInfoByLimitReq)
  return target;
}

int TWorldBossNewGetRankInfoByLimitReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 Offset = 1;
    if (has_offset()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->offset());
    }

    // optional uint32 Limit = 2;
    if (has_limit()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->limit());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TWorldBossNewGetRankInfoByLimitReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TWorldBossNewGetRankInfoByLimitReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TWorldBossNewGetRankInfoByLimitReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TWorldBossNewGetRankInfoByLimitReq::MergeFrom(const TWorldBossNewGetRankInfoByLimitReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_offset()) {
      set_offset(from.offset());
    }
    if (from.has_limit()) {
      set_limit(from.limit());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TWorldBossNewGetRankInfoByLimitReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TWorldBossNewGetRankInfoByLimitReq::CopyFrom(const TWorldBossNewGetRankInfoByLimitReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TWorldBossNewGetRankInfoByLimitReq::IsInitialized() const {

  return true;
}

void TWorldBossNewGetRankInfoByLimitReq::Swap(TWorldBossNewGetRankInfoByLimitReq* other) {
  if (other != this) {
    std::swap(offset_, other->offset_);
    std::swap(limit_, other->limit_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TWorldBossNewGetRankInfoByLimitReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TWorldBossNewGetRankInfoByLimitReq_descriptor_;
  metadata.reflection = TWorldBossNewGetRankInfoByLimitReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TWorldBossNewGetRankInfoByLimitRsp::kDamageRankArrFieldNumber;
const int TWorldBossNewGetRankInfoByLimitRsp::kMyRankInfoFieldNumber;
#endif  // !_MSC_VER

TWorldBossNewGetRankInfoByLimitRsp::TWorldBossNewGetRankInfoByLimitRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TWorldBossNewGetRankInfoByLimitRsp)
}

void TWorldBossNewGetRankInfoByLimitRsp::InitAsDefaultInstance() {
  myrankinfo_ = const_cast< ::pb::TWorldBossNewUserDamageSingle*>(&::pb::TWorldBossNewUserDamageSingle::default_instance());
}

TWorldBossNewGetRankInfoByLimitRsp::TWorldBossNewGetRankInfoByLimitRsp(const TWorldBossNewGetRankInfoByLimitRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TWorldBossNewGetRankInfoByLimitRsp)
}

void TWorldBossNewGetRankInfoByLimitRsp::SharedCtor() {
  _cached_size_ = 0;
  myrankinfo_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TWorldBossNewGetRankInfoByLimitRsp::~TWorldBossNewGetRankInfoByLimitRsp() {
  // @@protoc_insertion_point(destructor:pb.TWorldBossNewGetRankInfoByLimitRsp)
  SharedDtor();
}

void TWorldBossNewGetRankInfoByLimitRsp::SharedDtor() {
  if (this != default_instance_) {
    delete myrankinfo_;
  }
}

void TWorldBossNewGetRankInfoByLimitRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TWorldBossNewGetRankInfoByLimitRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TWorldBossNewGetRankInfoByLimitRsp_descriptor_;
}

const TWorldBossNewGetRankInfoByLimitRsp& TWorldBossNewGetRankInfoByLimitRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fWorldBossNew_2eproto();
  return *default_instance_;
}

TWorldBossNewGetRankInfoByLimitRsp* TWorldBossNewGetRankInfoByLimitRsp::default_instance_ = NULL;

TWorldBossNewGetRankInfoByLimitRsp* TWorldBossNewGetRankInfoByLimitRsp::New() const {
  return new TWorldBossNewGetRankInfoByLimitRsp;
}

void TWorldBossNewGetRankInfoByLimitRsp::Clear() {
  if (has_myrankinfo()) {
    if (myrankinfo_ != NULL) myrankinfo_->::pb::TWorldBossNewUserDamageSingle::Clear();
  }
  damagerankarr_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TWorldBossNewGetRankInfoByLimitRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TWorldBossNewGetRankInfoByLimitRsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .pb.TWorldBossNewUserDamageSingle DamageRankArr = 1;
      case 1: {
        if (tag == 10) {
         parse_DamageRankArr:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_damagerankarr()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_DamageRankArr;
        if (input->ExpectTag(18)) goto parse_MyRankInfo;
        break;
      }

      // optional .pb.TWorldBossNewUserDamageSingle MyRankInfo = 2;
      case 2: {
        if (tag == 18) {
         parse_MyRankInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_myrankinfo()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TWorldBossNewGetRankInfoByLimitRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TWorldBossNewGetRankInfoByLimitRsp)
  return false;
#undef DO_
}

void TWorldBossNewGetRankInfoByLimitRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TWorldBossNewGetRankInfoByLimitRsp)
  // repeated .pb.TWorldBossNewUserDamageSingle DamageRankArr = 1;
  for (int i = 0; i < this->damagerankarr_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->damagerankarr(i), output);
  }

  // optional .pb.TWorldBossNewUserDamageSingle MyRankInfo = 2;
  if (has_myrankinfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->myrankinfo(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TWorldBossNewGetRankInfoByLimitRsp)
}

::google::protobuf::uint8* TWorldBossNewGetRankInfoByLimitRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TWorldBossNewGetRankInfoByLimitRsp)
  // repeated .pb.TWorldBossNewUserDamageSingle DamageRankArr = 1;
  for (int i = 0; i < this->damagerankarr_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->damagerankarr(i), target);
  }

  // optional .pb.TWorldBossNewUserDamageSingle MyRankInfo = 2;
  if (has_myrankinfo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->myrankinfo(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TWorldBossNewGetRankInfoByLimitRsp)
  return target;
}

int TWorldBossNewGetRankInfoByLimitRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // optional .pb.TWorldBossNewUserDamageSingle MyRankInfo = 2;
    if (has_myrankinfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->myrankinfo());
    }

  }
  // repeated .pb.TWorldBossNewUserDamageSingle DamageRankArr = 1;
  total_size += 1 * this->damagerankarr_size();
  for (int i = 0; i < this->damagerankarr_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->damagerankarr(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TWorldBossNewGetRankInfoByLimitRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TWorldBossNewGetRankInfoByLimitRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TWorldBossNewGetRankInfoByLimitRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TWorldBossNewGetRankInfoByLimitRsp::MergeFrom(const TWorldBossNewGetRankInfoByLimitRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  damagerankarr_.MergeFrom(from.damagerankarr_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_myrankinfo()) {
      mutable_myrankinfo()->::pb::TWorldBossNewUserDamageSingle::MergeFrom(from.myrankinfo());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TWorldBossNewGetRankInfoByLimitRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TWorldBossNewGetRankInfoByLimitRsp::CopyFrom(const TWorldBossNewGetRankInfoByLimitRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TWorldBossNewGetRankInfoByLimitRsp::IsInitialized() const {

  return true;
}

void TWorldBossNewGetRankInfoByLimitRsp::Swap(TWorldBossNewGetRankInfoByLimitRsp* other) {
  if (other != this) {
    damagerankarr_.Swap(&other->damagerankarr_);
    std::swap(myrankinfo_, other->myrankinfo_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TWorldBossNewGetRankInfoByLimitRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TWorldBossNewGetRankInfoByLimitRsp_descriptor_;
  metadata.reflection = TWorldBossNewGetRankInfoByLimitRsp_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace pb

// @@protoc_insertion_point(global_scope)
