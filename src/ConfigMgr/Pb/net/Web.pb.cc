// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: net/Web.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "net/Web.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace pb {

namespace {

const ::google::protobuf::Descriptor* TWebReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TWebReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* TWebRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TWebRsp_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_net_2fWeb_2eproto() {
  protobuf_AddDesc_net_2fWeb_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "net/Web.proto");
  GOOGLE_CHECK(file != NULL);
  TWebReq_descriptor_ = file->message_type(0);
  static const int TWebReq_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TWebReq, jsonargs_),
  };
  TWebReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TWebReq_descriptor_,
      TWebReq::default_instance_,
      TWebReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TWebReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TWebReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TWebReq));
  TWebRsp_descriptor_ = file->message_type(1);
  static const int TWebRsp_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TWebRsp, jsonmsg_),
  };
  TWebRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TWebRsp_descriptor_,
      TWebRsp::default_instance_,
      TWebRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TWebRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TWebRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TWebRsp));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_net_2fWeb_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TWebReq_descriptor_, &TWebReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TWebRsp_descriptor_, &TWebRsp::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_net_2fWeb_2eproto() {
  delete TWebReq::default_instance_;
  delete TWebReq_reflection_;
  delete TWebRsp::default_instance_;
  delete TWebRsp_reflection_;
}

void protobuf_AddDesc_net_2fWeb_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\rnet/Web.proto\022\002pb\"\033\n\007TWebReq\022\020\n\010JsonAr"
    "gs\030\001 \001(\t\"\032\n\007TWebRsp\022\017\n\007JsonMsg\030\001 \001(\t", 76);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "net/Web.proto", &protobuf_RegisterTypes);
  TWebReq::default_instance_ = new TWebReq();
  TWebRsp::default_instance_ = new TWebRsp();
  TWebReq::default_instance_->InitAsDefaultInstance();
  TWebRsp::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_net_2fWeb_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_net_2fWeb_2eproto {
  StaticDescriptorInitializer_net_2fWeb_2eproto() {
    protobuf_AddDesc_net_2fWeb_2eproto();
  }
} static_descriptor_initializer_net_2fWeb_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int TWebReq::kJsonArgsFieldNumber;
#endif  // !_MSC_VER

TWebReq::TWebReq()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TWebReq)
}

void TWebReq::InitAsDefaultInstance() {
}

TWebReq::TWebReq(const TWebReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TWebReq)
}

void TWebReq::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  jsonargs_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TWebReq::~TWebReq() {
  // @@protoc_insertion_point(destructor:pb.TWebReq)
  SharedDtor();
}

void TWebReq::SharedDtor() {
  if (jsonargs_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete jsonargs_;
  }
  if (this != default_instance_) {
  }
}

void TWebReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TWebReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TWebReq_descriptor_;
}

const TWebReq& TWebReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fWeb_2eproto();
  return *default_instance_;
}

TWebReq* TWebReq::default_instance_ = NULL;

TWebReq* TWebReq::New() const {
  return new TWebReq;
}

void TWebReq::Clear() {
  if (has_jsonargs()) {
    if (jsonargs_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
      jsonargs_->clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TWebReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TWebReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string JsonArgs = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_jsonargs()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->jsonargs().data(), this->jsonargs().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "jsonargs");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TWebReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TWebReq)
  return false;
#undef DO_
}

void TWebReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TWebReq)
  // optional string JsonArgs = 1;
  if (has_jsonargs()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->jsonargs().data(), this->jsonargs().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "jsonargs");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->jsonargs(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TWebReq)
}

::google::protobuf::uint8* TWebReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TWebReq)
  // optional string JsonArgs = 1;
  if (has_jsonargs()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->jsonargs().data(), this->jsonargs().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "jsonargs");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->jsonargs(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TWebReq)
  return target;
}

int TWebReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string JsonArgs = 1;
    if (has_jsonargs()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->jsonargs());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TWebReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TWebReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TWebReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TWebReq::MergeFrom(const TWebReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_jsonargs()) {
      set_jsonargs(from.jsonargs());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TWebReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TWebReq::CopyFrom(const TWebReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TWebReq::IsInitialized() const {

  return true;
}

void TWebReq::Swap(TWebReq* other) {
  if (other != this) {
    std::swap(jsonargs_, other->jsonargs_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TWebReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TWebReq_descriptor_;
  metadata.reflection = TWebReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TWebRsp::kJsonMsgFieldNumber;
#endif  // !_MSC_VER

TWebRsp::TWebRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TWebRsp)
}

void TWebRsp::InitAsDefaultInstance() {
}

TWebRsp::TWebRsp(const TWebRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TWebRsp)
}

void TWebRsp::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  jsonmsg_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TWebRsp::~TWebRsp() {
  // @@protoc_insertion_point(destructor:pb.TWebRsp)
  SharedDtor();
}

void TWebRsp::SharedDtor() {
  if (jsonmsg_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete jsonmsg_;
  }
  if (this != default_instance_) {
  }
}

void TWebRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TWebRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TWebRsp_descriptor_;
}

const TWebRsp& TWebRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fWeb_2eproto();
  return *default_instance_;
}

TWebRsp* TWebRsp::default_instance_ = NULL;

TWebRsp* TWebRsp::New() const {
  return new TWebRsp;
}

void TWebRsp::Clear() {
  if (has_jsonmsg()) {
    if (jsonmsg_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
      jsonmsg_->clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TWebRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TWebRsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string JsonMsg = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_jsonmsg()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->jsonmsg().data(), this->jsonmsg().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "jsonmsg");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TWebRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TWebRsp)
  return false;
#undef DO_
}

void TWebRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TWebRsp)
  // optional string JsonMsg = 1;
  if (has_jsonmsg()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->jsonmsg().data(), this->jsonmsg().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "jsonmsg");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->jsonmsg(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TWebRsp)
}

::google::protobuf::uint8* TWebRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TWebRsp)
  // optional string JsonMsg = 1;
  if (has_jsonmsg()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->jsonmsg().data(), this->jsonmsg().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "jsonmsg");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->jsonmsg(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TWebRsp)
  return target;
}

int TWebRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string JsonMsg = 1;
    if (has_jsonmsg()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->jsonmsg());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TWebRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TWebRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TWebRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TWebRsp::MergeFrom(const TWebRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_jsonmsg()) {
      set_jsonmsg(from.jsonmsg());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TWebRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TWebRsp::CopyFrom(const TWebRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TWebRsp::IsInitialized() const {

  return true;
}

void TWebRsp::Swap(TWebRsp* other) {
  if (other != this) {
    std::swap(jsonmsg_, other->jsonmsg_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TWebRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TWebRsp_descriptor_;
  metadata.reflection = TWebRsp_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace pb

// @@protoc_insertion_point(global_scope)
