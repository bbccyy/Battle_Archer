// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: net/City.proto

#ifndef PROTOBUF_net_2fCity_2eproto__INCLUDED
#define PROTOBUF_net_2fCity_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace pb {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_net_2fCity_2eproto();
void protobuf_AssignDesc_net_2fCity_2eproto();
void protobuf_ShutdownFile_net_2fCity_2eproto();

class TCityBuildAppoint;
class TCityBuildAppointSingle;
class TCityBuildData;
class TCityResBuyData;
class TCityGetInfoRsp;
class TCitySetSceneReq;
class TCityUpgradeReq;
class TCityItemReduceCDReq;
class TCityExchangeReq;
class TCityBuildArrPush;
class TCityBuildUnlockReq;
class TCityAppointHeroReq;
class TCityRelieveAppointHeroReq;
class TCityBuyResourceReq;

// ===================================================================

/*FOR2LUA
<Record>
	<name>TCityBuildAppoint</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/City.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TCityBuildAppoint : public ::google::protobuf::Message {
 public:
  TCityBuildAppoint();
  virtual ~TCityBuildAppoint();

  TCityBuildAppoint(const TCityBuildAppoint& from);

  inline TCityBuildAppoint& operator=(const TCityBuildAppoint& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TCityBuildAppoint& default_instance();

  void Swap(TCityBuildAppoint* other);

  // implements Message ----------------------------------------------

  TCityBuildAppoint* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TCityBuildAppoint& from);
  void MergeFrom(const TCityBuildAppoint& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 Btid = 1;
  inline bool has_btid() const;
  inline void clear_btid();
  static const int kBtidFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TCityBuildAppoint</name>
  	<Function>
  		<name>btid</name>
  		<replaceName>Btid</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_btid</name>
  		<replaceName>Btid</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_btid</name>
  		<replaceName>Btid</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 btid() const;
  inline void set_btid(::google::protobuf::uint32 value);

  // repeated .pb.TCityBuildAppointSingle SingleArr = 2;
  inline int singlearr_size() const;
  inline void clear_singlearr();
  static const int kSingleArrFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TCityBuildAppoint</name>
  	<Function>
  		<name>singlearr</name>
  		<replaceName>SingleArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_singlearr</name>
  		<replaceName>SingleArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_singlearr</name>
  		<replaceName>SingleArr</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_singlearr</name>
  		<replaceName>SingleArr</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>singlearr_size</name>
  		<replaceName>SingleArr</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TCityBuildAppointSingle& singlearr(int index) const;
  inline ::pb::TCityBuildAppointSingle* mutable_singlearr(int index);
  inline ::pb::TCityBuildAppointSingle* add_singlearr();
  inline const ::google::protobuf::RepeatedPtrField< ::pb::TCityBuildAppointSingle >&
      singlearr() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb::TCityBuildAppointSingle >*
      mutable_singlearr();

  // @@protoc_insertion_point(class_scope:pb.TCityBuildAppoint)
 private:
  inline void set_has_btid();
  inline void clear_has_btid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::pb::TCityBuildAppointSingle > singlearr_;
  ::google::protobuf::uint32 btid_;
  friend void  protobuf_AddDesc_net_2fCity_2eproto();
  friend void protobuf_AssignDesc_net_2fCity_2eproto();
  friend void protobuf_ShutdownFile_net_2fCity_2eproto();

  void InitAsDefaultInstance();
  static TCityBuildAppoint* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TCityBuildAppointSingle</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/City.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TCityBuildAppointSingle : public ::google::protobuf::Message {
 public:
  TCityBuildAppointSingle();
  virtual ~TCityBuildAppointSingle();

  TCityBuildAppointSingle(const TCityBuildAppointSingle& from);

  inline TCityBuildAppointSingle& operator=(const TCityBuildAppointSingle& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TCityBuildAppointSingle& default_instance();

  void Swap(TCityBuildAppointSingle* other);

  // implements Message ----------------------------------------------

  TCityBuildAppointSingle* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TCityBuildAppointSingle& from);
  void MergeFrom(const TCityBuildAppointSingle& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 AppointIndex = 1;
  inline bool has_appointindex() const;
  inline void clear_appointindex();
  static const int kAppointIndexFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TCityBuildAppointSingle</name>
  	<Function>
  		<name>appointindex</name>
  		<replaceName>AppointIndex</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_appointindex</name>
  		<replaceName>AppointIndex</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_appointindex</name>
  		<replaceName>AppointIndex</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 appointindex() const;
  inline void set_appointindex(::google::protobuf::uint32 value);

  // optional uint32 Hid = 2;
  inline bool has_hid() const;
  inline void clear_hid();
  static const int kHidFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TCityBuildAppointSingle</name>
  	<Function>
  		<name>hid</name>
  		<replaceName>Hid</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_hid</name>
  		<replaceName>Hid</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_hid</name>
  		<replaceName>Hid</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 hid() const;
  inline void set_hid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:pb.TCityBuildAppointSingle)
 private:
  inline void set_has_appointindex();
  inline void clear_has_appointindex();
  inline void set_has_hid();
  inline void clear_has_hid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 appointindex_;
  ::google::protobuf::uint32 hid_;
  friend void  protobuf_AddDesc_net_2fCity_2eproto();
  friend void protobuf_AssignDesc_net_2fCity_2eproto();
  friend void protobuf_ShutdownFile_net_2fCity_2eproto();

  void InitAsDefaultInstance();
  static TCityBuildAppointSingle* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TCityBuildData</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/City.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TCityBuildData : public ::google::protobuf::Message {
 public:
  TCityBuildData();
  virtual ~TCityBuildData();

  TCityBuildData(const TCityBuildData& from);

  inline TCityBuildData& operator=(const TCityBuildData& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TCityBuildData& default_instance();

  void Swap(TCityBuildData* other);

  // implements Message ----------------------------------------------

  TCityBuildData* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TCityBuildData& from);
  void MergeFrom(const TCityBuildData& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 BuildId = 1;
  inline bool has_buildid() const;
  inline void clear_buildid();
  static const int kBuildIdFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TCityBuildData</name>
  	<Function>
  		<name>buildid</name>
  		<replaceName>BuildId</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_buildid</name>
  		<replaceName>BuildId</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_buildid</name>
  		<replaceName>BuildId</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 buildid() const;
  inline void set_buildid(::google::protobuf::uint32 value);

  // optional uint32 Level = 2;
  inline bool has_level() const;
  inline void clear_level();
  static const int kLevelFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TCityBuildData</name>
  	<Function>
  		<name>level</name>
  		<replaceName>Level</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_level</name>
  		<replaceName>Level</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_level</name>
  		<replaceName>Level</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 level() const;
  inline void set_level(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:pb.TCityBuildData)
 private:
  inline void set_has_buildid();
  inline void clear_has_buildid();
  inline void set_has_level();
  inline void clear_has_level();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 buildid_;
  ::google::protobuf::uint32 level_;
  friend void  protobuf_AddDesc_net_2fCity_2eproto();
  friend void protobuf_AssignDesc_net_2fCity_2eproto();
  friend void protobuf_ShutdownFile_net_2fCity_2eproto();

  void InitAsDefaultInstance();
  static TCityBuildData* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TCityResBuyData</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/City.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TCityResBuyData : public ::google::protobuf::Message {
 public:
  TCityResBuyData();
  virtual ~TCityResBuyData();

  TCityResBuyData(const TCityResBuyData& from);

  inline TCityResBuyData& operator=(const TCityResBuyData& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TCityResBuyData& default_instance();

  void Swap(TCityResBuyData* other);

  // implements Message ----------------------------------------------

  TCityResBuyData* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TCityResBuyData& from);
  void MergeFrom(const TCityResBuyData& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 Tid = 1;
  inline bool has_tid() const;
  inline void clear_tid();
  static const int kTidFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TCityResBuyData</name>
  	<Function>
  		<name>tid</name>
  		<replaceName>Tid</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_tid</name>
  		<replaceName>Tid</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_tid</name>
  		<replaceName>Tid</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 tid() const;
  inline void set_tid(::google::protobuf::uint32 value);

  // optional uint32 HasBuyNum = 2;
  inline bool has_hasbuynum() const;
  inline void clear_hasbuynum();
  static const int kHasBuyNumFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TCityResBuyData</name>
  	<Function>
  		<name>hasbuynum</name>
  		<replaceName>HasBuyNum</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_hasbuynum</name>
  		<replaceName>HasBuyNum</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_hasbuynum</name>
  		<replaceName>HasBuyNum</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 hasbuynum() const;
  inline void set_hasbuynum(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:pb.TCityResBuyData)
 private:
  inline void set_has_tid();
  inline void clear_has_tid();
  inline void set_has_hasbuynum();
  inline void clear_has_hasbuynum();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 tid_;
  ::google::protobuf::uint32 hasbuynum_;
  friend void  protobuf_AddDesc_net_2fCity_2eproto();
  friend void protobuf_AssignDesc_net_2fCity_2eproto();
  friend void protobuf_ShutdownFile_net_2fCity_2eproto();

  void InitAsDefaultInstance();
  static TCityResBuyData* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TCityGetInfoRsp</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/City.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TCityGetInfoRsp : public ::google::protobuf::Message {
 public:
  TCityGetInfoRsp();
  virtual ~TCityGetInfoRsp();

  TCityGetInfoRsp(const TCityGetInfoRsp& from);

  inline TCityGetInfoRsp& operator=(const TCityGetInfoRsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TCityGetInfoRsp& default_instance();

  void Swap(TCityGetInfoRsp* other);

  // implements Message ----------------------------------------------

  TCityGetInfoRsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TCityGetInfoRsp& from);
  void MergeFrom(const TCityGetInfoRsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .pb.TCityBuildData BuildArr = 1;
  inline int buildarr_size() const;
  inline void clear_buildarr();
  static const int kBuildArrFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TCityGetInfoRsp</name>
  	<Function>
  		<name>buildarr</name>
  		<replaceName>BuildArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_buildarr</name>
  		<replaceName>BuildArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_buildarr</name>
  		<replaceName>BuildArr</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_buildarr</name>
  		<replaceName>BuildArr</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>buildarr_size</name>
  		<replaceName>BuildArr</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TCityBuildData& buildarr(int index) const;
  inline ::pb::TCityBuildData* mutable_buildarr(int index);
  inline ::pb::TCityBuildData* add_buildarr();
  inline const ::google::protobuf::RepeatedPtrField< ::pb::TCityBuildData >&
      buildarr() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb::TCityBuildData >*
      mutable_buildarr();

  // repeated .pb.TCityBuildAppoint AppointArr = 2;
  inline int appointarr_size() const;
  inline void clear_appointarr();
  static const int kAppointArrFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TCityGetInfoRsp</name>
  	<Function>
  		<name>appointarr</name>
  		<replaceName>AppointArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_appointarr</name>
  		<replaceName>AppointArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_appointarr</name>
  		<replaceName>AppointArr</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_appointarr</name>
  		<replaceName>AppointArr</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>appointarr_size</name>
  		<replaceName>AppointArr</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TCityBuildAppoint& appointarr(int index) const;
  inline ::pb::TCityBuildAppoint* mutable_appointarr(int index);
  inline ::pb::TCityBuildAppoint* add_appointarr();
  inline const ::google::protobuf::RepeatedPtrField< ::pb::TCityBuildAppoint >&
      appointarr() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb::TCityBuildAppoint >*
      mutable_appointarr();

  // optional int64 EndCdTime = 3;
  inline bool has_endcdtime() const;
  inline void clear_endcdtime();
  static const int kEndCdTimeFieldNumber = 3;
  /*FOR2LUA
  <Record>
  	<name>TCityGetInfoRsp</name>
  	<Function>
  		<name>endcdtime</name>
  		<replaceName>EndCdTime</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_endcdtime</name>
  		<replaceName>EndCdTime</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_endcdtime</name>
  		<replaceName>EndCdTime</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::int64 endcdtime() const;
  inline void set_endcdtime(::google::protobuf::int64 value);

  // repeated .pb.TCityResBuyData DailyResBuyArr = 4;
  inline int dailyresbuyarr_size() const;
  inline void clear_dailyresbuyarr();
  static const int kDailyResBuyArrFieldNumber = 4;
  /*FOR2LUA
  <Record>
  	<name>TCityGetInfoRsp</name>
  	<Function>
  		<name>dailyresbuyarr</name>
  		<replaceName>DailyResBuyArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_dailyresbuyarr</name>
  		<replaceName>DailyResBuyArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_dailyresbuyarr</name>
  		<replaceName>DailyResBuyArr</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_dailyresbuyarr</name>
  		<replaceName>DailyResBuyArr</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>dailyresbuyarr_size</name>
  		<replaceName>DailyResBuyArr</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TCityResBuyData& dailyresbuyarr(int index) const;
  inline ::pb::TCityResBuyData* mutable_dailyresbuyarr(int index);
  inline ::pb::TCityResBuyData* add_dailyresbuyarr();
  inline const ::google::protobuf::RepeatedPtrField< ::pb::TCityResBuyData >&
      dailyresbuyarr() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb::TCityResBuyData >*
      mutable_dailyresbuyarr();

  // optional int64 DailyResBuyRefreshTime = 5;
  inline bool has_dailyresbuyrefreshtime() const;
  inline void clear_dailyresbuyrefreshtime();
  static const int kDailyResBuyRefreshTimeFieldNumber = 5;
  /*FOR2LUA
  <Record>
  	<name>TCityGetInfoRsp</name>
  	<Function>
  		<name>dailyresbuyrefreshtime</name>
  		<replaceName>DailyResBuyRefreshTime</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_dailyresbuyrefreshtime</name>
  		<replaceName>DailyResBuyRefreshTime</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_dailyresbuyrefreshtime</name>
  		<replaceName>DailyResBuyRefreshTime</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::int64 dailyresbuyrefreshtime() const;
  inline void set_dailyresbuyrefreshtime(::google::protobuf::int64 value);

  // optional string Scene = 6;
  inline bool has_scene() const;
  inline void clear_scene();
  static const int kSceneFieldNumber = 6;
  /*FOR2LUA
  <Record>
  	<name>TCityGetInfoRsp</name>
  	<Function>
  		<name>scene</name>
  		<replaceName>Scene</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_scene</name>
  		<replaceName>Scene</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_scene</name>
  		<replaceName>Scene</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::std::string& scene() const;
  inline void set_scene(const ::std::string& value);
  inline void set_scene(const char* value);
  inline void set_scene(const char* value, size_t size);
  inline ::std::string* mutable_scene();
  inline ::std::string* release_scene();
  inline void set_allocated_scene(::std::string* scene);

  // @@protoc_insertion_point(class_scope:pb.TCityGetInfoRsp)
 private:
  inline void set_has_endcdtime();
  inline void clear_has_endcdtime();
  inline void set_has_dailyresbuyrefreshtime();
  inline void clear_has_dailyresbuyrefreshtime();
  inline void set_has_scene();
  inline void clear_has_scene();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::pb::TCityBuildData > buildarr_;
  ::google::protobuf::RepeatedPtrField< ::pb::TCityBuildAppoint > appointarr_;
  ::google::protobuf::int64 endcdtime_;
  ::google::protobuf::RepeatedPtrField< ::pb::TCityResBuyData > dailyresbuyarr_;
  ::google::protobuf::int64 dailyresbuyrefreshtime_;
  ::std::string* scene_;
  friend void  protobuf_AddDesc_net_2fCity_2eproto();
  friend void protobuf_AssignDesc_net_2fCity_2eproto();
  friend void protobuf_ShutdownFile_net_2fCity_2eproto();

  void InitAsDefaultInstance();
  static TCityGetInfoRsp* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TCitySetSceneReq</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/City.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TCitySetSceneReq : public ::google::protobuf::Message {
 public:
  TCitySetSceneReq();
  virtual ~TCitySetSceneReq();

  TCitySetSceneReq(const TCitySetSceneReq& from);

  inline TCitySetSceneReq& operator=(const TCitySetSceneReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TCitySetSceneReq& default_instance();

  void Swap(TCitySetSceneReq* other);

  // implements Message ----------------------------------------------

  TCitySetSceneReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TCitySetSceneReq& from);
  void MergeFrom(const TCitySetSceneReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string Scene = 1;
  inline bool has_scene() const;
  inline void clear_scene();
  static const int kSceneFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TCitySetSceneReq</name>
  	<Function>
  		<name>scene</name>
  		<replaceName>Scene</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_scene</name>
  		<replaceName>Scene</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_scene</name>
  		<replaceName>Scene</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::std::string& scene() const;
  inline void set_scene(const ::std::string& value);
  inline void set_scene(const char* value);
  inline void set_scene(const char* value, size_t size);
  inline ::std::string* mutable_scene();
  inline ::std::string* release_scene();
  inline void set_allocated_scene(::std::string* scene);

  // @@protoc_insertion_point(class_scope:pb.TCitySetSceneReq)
 private:
  inline void set_has_scene();
  inline void clear_has_scene();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* scene_;
  friend void  protobuf_AddDesc_net_2fCity_2eproto();
  friend void protobuf_AssignDesc_net_2fCity_2eproto();
  friend void protobuf_ShutdownFile_net_2fCity_2eproto();

  void InitAsDefaultInstance();
  static TCitySetSceneReq* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TCityUpgradeReq</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/City.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TCityUpgradeReq : public ::google::protobuf::Message {
 public:
  TCityUpgradeReq();
  virtual ~TCityUpgradeReq();

  TCityUpgradeReq(const TCityUpgradeReq& from);

  inline TCityUpgradeReq& operator=(const TCityUpgradeReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TCityUpgradeReq& default_instance();

  void Swap(TCityUpgradeReq* other);

  // implements Message ----------------------------------------------

  TCityUpgradeReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TCityUpgradeReq& from);
  void MergeFrom(const TCityUpgradeReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 BuildId = 1;
  inline bool has_buildid() const;
  inline void clear_buildid();
  static const int kBuildIdFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TCityUpgradeReq</name>
  	<Function>
  		<name>buildid</name>
  		<replaceName>BuildId</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_buildid</name>
  		<replaceName>BuildId</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_buildid</name>
  		<replaceName>BuildId</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 buildid() const;
  inline void set_buildid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:pb.TCityUpgradeReq)
 private:
  inline void set_has_buildid();
  inline void clear_has_buildid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 buildid_;
  friend void  protobuf_AddDesc_net_2fCity_2eproto();
  friend void protobuf_AssignDesc_net_2fCity_2eproto();
  friend void protobuf_ShutdownFile_net_2fCity_2eproto();

  void InitAsDefaultInstance();
  static TCityUpgradeReq* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TCityItemReduceCDReq</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/City.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TCityItemReduceCDReq : public ::google::protobuf::Message {
 public:
  TCityItemReduceCDReq();
  virtual ~TCityItemReduceCDReq();

  TCityItemReduceCDReq(const TCityItemReduceCDReq& from);

  inline TCityItemReduceCDReq& operator=(const TCityItemReduceCDReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TCityItemReduceCDReq& default_instance();

  void Swap(TCityItemReduceCDReq* other);

  // implements Message ----------------------------------------------

  TCityItemReduceCDReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TCityItemReduceCDReq& from);
  void MergeFrom(const TCityItemReduceCDReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 Tid = 1;
  inline bool has_tid() const;
  inline void clear_tid();
  static const int kTidFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TCityItemReduceCDReq</name>
  	<Function>
  		<name>tid</name>
  		<replaceName>Tid</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_tid</name>
  		<replaceName>Tid</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_tid</name>
  		<replaceName>Tid</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 tid() const;
  inline void set_tid(::google::protobuf::uint32 value);

  // optional uint32 Num = 2;
  inline bool has_num() const;
  inline void clear_num();
  static const int kNumFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TCityItemReduceCDReq</name>
  	<Function>
  		<name>num</name>
  		<replaceName>Num</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_num</name>
  		<replaceName>Num</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_num</name>
  		<replaceName>Num</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 num() const;
  inline void set_num(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:pb.TCityItemReduceCDReq)
 private:
  inline void set_has_tid();
  inline void clear_has_tid();
  inline void set_has_num();
  inline void clear_has_num();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 tid_;
  ::google::protobuf::uint32 num_;
  friend void  protobuf_AddDesc_net_2fCity_2eproto();
  friend void protobuf_AssignDesc_net_2fCity_2eproto();
  friend void protobuf_ShutdownFile_net_2fCity_2eproto();

  void InitAsDefaultInstance();
  static TCityItemReduceCDReq* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TCityExchangeReq</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/City.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TCityExchangeReq : public ::google::protobuf::Message {
 public:
  TCityExchangeReq();
  virtual ~TCityExchangeReq();

  TCityExchangeReq(const TCityExchangeReq& from);

  inline TCityExchangeReq& operator=(const TCityExchangeReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TCityExchangeReq& default_instance();

  void Swap(TCityExchangeReq* other);

  // implements Message ----------------------------------------------

  TCityExchangeReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TCityExchangeReq& from);
  void MergeFrom(const TCityExchangeReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 ResourceId = 1;
  inline bool has_resourceid() const;
  inline void clear_resourceid();
  static const int kResourceIdFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TCityExchangeReq</name>
  	<Function>
  		<name>resourceid</name>
  		<replaceName>ResourceId</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_resourceid</name>
  		<replaceName>ResourceId</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_resourceid</name>
  		<replaceName>ResourceId</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 resourceid() const;
  inline void set_resourceid(::google::protobuf::uint32 value);

  // optional uint32 ResourceNum = 2;
  inline bool has_resourcenum() const;
  inline void clear_resourcenum();
  static const int kResourceNumFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TCityExchangeReq</name>
  	<Function>
  		<name>resourcenum</name>
  		<replaceName>ResourceNum</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_resourcenum</name>
  		<replaceName>ResourceNum</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_resourcenum</name>
  		<replaceName>ResourceNum</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 resourcenum() const;
  inline void set_resourcenum(::google::protobuf::uint32 value);

  // optional uint32 targetResouceId = 3;
  inline bool has_targetresouceid() const;
  inline void clear_targetresouceid();
  static const int kTargetResouceIdFieldNumber = 3;
  /*FOR2LUA
  <Record>
  	<name>TCityExchangeReq</name>
  	<Function>
  		<name>targetresouceid</name>
  		<replaceName>targetResouceId</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_targetresouceid</name>
  		<replaceName>targetResouceId</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_targetresouceid</name>
  		<replaceName>targetResouceId</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 targetresouceid() const;
  inline void set_targetresouceid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:pb.TCityExchangeReq)
 private:
  inline void set_has_resourceid();
  inline void clear_has_resourceid();
  inline void set_has_resourcenum();
  inline void clear_has_resourcenum();
  inline void set_has_targetresouceid();
  inline void clear_has_targetresouceid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 resourceid_;
  ::google::protobuf::uint32 resourcenum_;
  ::google::protobuf::uint32 targetresouceid_;
  friend void  protobuf_AddDesc_net_2fCity_2eproto();
  friend void protobuf_AssignDesc_net_2fCity_2eproto();
  friend void protobuf_ShutdownFile_net_2fCity_2eproto();

  void InitAsDefaultInstance();
  static TCityExchangeReq* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TCityBuildArrPush</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/City.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TCityBuildArrPush : public ::google::protobuf::Message {
 public:
  TCityBuildArrPush();
  virtual ~TCityBuildArrPush();

  TCityBuildArrPush(const TCityBuildArrPush& from);

  inline TCityBuildArrPush& operator=(const TCityBuildArrPush& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TCityBuildArrPush& default_instance();

  void Swap(TCityBuildArrPush* other);

  // implements Message ----------------------------------------------

  TCityBuildArrPush* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TCityBuildArrPush& from);
  void MergeFrom(const TCityBuildArrPush& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .pb.TCityBuildData BuildArr = 1;
  inline int buildarr_size() const;
  inline void clear_buildarr();
  static const int kBuildArrFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TCityBuildArrPush</name>
  	<Function>
  		<name>buildarr</name>
  		<replaceName>BuildArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_buildarr</name>
  		<replaceName>BuildArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_buildarr</name>
  		<replaceName>BuildArr</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_buildarr</name>
  		<replaceName>BuildArr</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>buildarr_size</name>
  		<replaceName>BuildArr</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TCityBuildData& buildarr(int index) const;
  inline ::pb::TCityBuildData* mutable_buildarr(int index);
  inline ::pb::TCityBuildData* add_buildarr();
  inline const ::google::protobuf::RepeatedPtrField< ::pb::TCityBuildData >&
      buildarr() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb::TCityBuildData >*
      mutable_buildarr();

  // repeated .pb.TCityBuildAppoint AppointArr = 2;
  inline int appointarr_size() const;
  inline void clear_appointarr();
  static const int kAppointArrFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TCityBuildArrPush</name>
  	<Function>
  		<name>appointarr</name>
  		<replaceName>AppointArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_appointarr</name>
  		<replaceName>AppointArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_appointarr</name>
  		<replaceName>AppointArr</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_appointarr</name>
  		<replaceName>AppointArr</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>appointarr_size</name>
  		<replaceName>AppointArr</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TCityBuildAppoint& appointarr(int index) const;
  inline ::pb::TCityBuildAppoint* mutable_appointarr(int index);
  inline ::pb::TCityBuildAppoint* add_appointarr();
  inline const ::google::protobuf::RepeatedPtrField< ::pb::TCityBuildAppoint >&
      appointarr() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb::TCityBuildAppoint >*
      mutable_appointarr();

  // repeated .pb.TCityResBuyData DailyResBuyArr = 3;
  inline int dailyresbuyarr_size() const;
  inline void clear_dailyresbuyarr();
  static const int kDailyResBuyArrFieldNumber = 3;
  /*FOR2LUA
  <Record>
  	<name>TCityBuildArrPush</name>
  	<Function>
  		<name>dailyresbuyarr</name>
  		<replaceName>DailyResBuyArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_dailyresbuyarr</name>
  		<replaceName>DailyResBuyArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_dailyresbuyarr</name>
  		<replaceName>DailyResBuyArr</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_dailyresbuyarr</name>
  		<replaceName>DailyResBuyArr</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>dailyresbuyarr_size</name>
  		<replaceName>DailyResBuyArr</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TCityResBuyData& dailyresbuyarr(int index) const;
  inline ::pb::TCityResBuyData* mutable_dailyresbuyarr(int index);
  inline ::pb::TCityResBuyData* add_dailyresbuyarr();
  inline const ::google::protobuf::RepeatedPtrField< ::pb::TCityResBuyData >&
      dailyresbuyarr() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb::TCityResBuyData >*
      mutable_dailyresbuyarr();

  // optional int64 EndCdTime = 4;
  inline bool has_endcdtime() const;
  inline void clear_endcdtime();
  static const int kEndCdTimeFieldNumber = 4;
  /*FOR2LUA
  <Record>
  	<name>TCityBuildArrPush</name>
  	<Function>
  		<name>endcdtime</name>
  		<replaceName>EndCdTime</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_endcdtime</name>
  		<replaceName>EndCdTime</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_endcdtime</name>
  		<replaceName>EndCdTime</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::int64 endcdtime() const;
  inline void set_endcdtime(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:pb.TCityBuildArrPush)
 private:
  inline void set_has_endcdtime();
  inline void clear_has_endcdtime();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::pb::TCityBuildData > buildarr_;
  ::google::protobuf::RepeatedPtrField< ::pb::TCityBuildAppoint > appointarr_;
  ::google::protobuf::RepeatedPtrField< ::pb::TCityResBuyData > dailyresbuyarr_;
  ::google::protobuf::int64 endcdtime_;
  friend void  protobuf_AddDesc_net_2fCity_2eproto();
  friend void protobuf_AssignDesc_net_2fCity_2eproto();
  friend void protobuf_ShutdownFile_net_2fCity_2eproto();

  void InitAsDefaultInstance();
  static TCityBuildArrPush* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TCityBuildUnlockReq</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/City.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TCityBuildUnlockReq : public ::google::protobuf::Message {
 public:
  TCityBuildUnlockReq();
  virtual ~TCityBuildUnlockReq();

  TCityBuildUnlockReq(const TCityBuildUnlockReq& from);

  inline TCityBuildUnlockReq& operator=(const TCityBuildUnlockReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TCityBuildUnlockReq& default_instance();

  void Swap(TCityBuildUnlockReq* other);

  // implements Message ----------------------------------------------

  TCityBuildUnlockReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TCityBuildUnlockReq& from);
  void MergeFrom(const TCityBuildUnlockReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 BuildId = 1;
  inline bool has_buildid() const;
  inline void clear_buildid();
  static const int kBuildIdFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TCityBuildUnlockReq</name>
  	<Function>
  		<name>buildid</name>
  		<replaceName>BuildId</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_buildid</name>
  		<replaceName>BuildId</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_buildid</name>
  		<replaceName>BuildId</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 buildid() const;
  inline void set_buildid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:pb.TCityBuildUnlockReq)
 private:
  inline void set_has_buildid();
  inline void clear_has_buildid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 buildid_;
  friend void  protobuf_AddDesc_net_2fCity_2eproto();
  friend void protobuf_AssignDesc_net_2fCity_2eproto();
  friend void protobuf_ShutdownFile_net_2fCity_2eproto();

  void InitAsDefaultInstance();
  static TCityBuildUnlockReq* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TCityAppointHeroReq</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/City.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TCityAppointHeroReq : public ::google::protobuf::Message {
 public:
  TCityAppointHeroReq();
  virtual ~TCityAppointHeroReq();

  TCityAppointHeroReq(const TCityAppointHeroReq& from);

  inline TCityAppointHeroReq& operator=(const TCityAppointHeroReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TCityAppointHeroReq& default_instance();

  void Swap(TCityAppointHeroReq* other);

  // implements Message ----------------------------------------------

  TCityAppointHeroReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TCityAppointHeroReq& from);
  void MergeFrom(const TCityAppointHeroReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 Btid = 1;
  inline bool has_btid() const;
  inline void clear_btid();
  static const int kBtidFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TCityAppointHeroReq</name>
  	<Function>
  		<name>btid</name>
  		<replaceName>Btid</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_btid</name>
  		<replaceName>Btid</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_btid</name>
  		<replaceName>Btid</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 btid() const;
  inline void set_btid(::google::protobuf::uint32 value);

  // optional uint32 AppointIndex = 2;
  inline bool has_appointindex() const;
  inline void clear_appointindex();
  static const int kAppointIndexFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TCityAppointHeroReq</name>
  	<Function>
  		<name>appointindex</name>
  		<replaceName>AppointIndex</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_appointindex</name>
  		<replaceName>AppointIndex</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_appointindex</name>
  		<replaceName>AppointIndex</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 appointindex() const;
  inline void set_appointindex(::google::protobuf::uint32 value);

  // optional uint32 Hid = 3;
  inline bool has_hid() const;
  inline void clear_hid();
  static const int kHidFieldNumber = 3;
  /*FOR2LUA
  <Record>
  	<name>TCityAppointHeroReq</name>
  	<Function>
  		<name>hid</name>
  		<replaceName>Hid</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_hid</name>
  		<replaceName>Hid</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_hid</name>
  		<replaceName>Hid</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 hid() const;
  inline void set_hid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:pb.TCityAppointHeroReq)
 private:
  inline void set_has_btid();
  inline void clear_has_btid();
  inline void set_has_appointindex();
  inline void clear_has_appointindex();
  inline void set_has_hid();
  inline void clear_has_hid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 btid_;
  ::google::protobuf::uint32 appointindex_;
  ::google::protobuf::uint32 hid_;
  friend void  protobuf_AddDesc_net_2fCity_2eproto();
  friend void protobuf_AssignDesc_net_2fCity_2eproto();
  friend void protobuf_ShutdownFile_net_2fCity_2eproto();

  void InitAsDefaultInstance();
  static TCityAppointHeroReq* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TCityRelieveAppointHeroReq</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/City.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TCityRelieveAppointHeroReq : public ::google::protobuf::Message {
 public:
  TCityRelieveAppointHeroReq();
  virtual ~TCityRelieveAppointHeroReq();

  TCityRelieveAppointHeroReq(const TCityRelieveAppointHeroReq& from);

  inline TCityRelieveAppointHeroReq& operator=(const TCityRelieveAppointHeroReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TCityRelieveAppointHeroReq& default_instance();

  void Swap(TCityRelieveAppointHeroReq* other);

  // implements Message ----------------------------------------------

  TCityRelieveAppointHeroReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TCityRelieveAppointHeroReq& from);
  void MergeFrom(const TCityRelieveAppointHeroReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 Btid = 1;
  inline bool has_btid() const;
  inline void clear_btid();
  static const int kBtidFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TCityRelieveAppointHeroReq</name>
  	<Function>
  		<name>btid</name>
  		<replaceName>Btid</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_btid</name>
  		<replaceName>Btid</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_btid</name>
  		<replaceName>Btid</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 btid() const;
  inline void set_btid(::google::protobuf::uint32 value);

  // optional uint32 AppointIndex = 2;
  inline bool has_appointindex() const;
  inline void clear_appointindex();
  static const int kAppointIndexFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TCityRelieveAppointHeroReq</name>
  	<Function>
  		<name>appointindex</name>
  		<replaceName>AppointIndex</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_appointindex</name>
  		<replaceName>AppointIndex</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_appointindex</name>
  		<replaceName>AppointIndex</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 appointindex() const;
  inline void set_appointindex(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:pb.TCityRelieveAppointHeroReq)
 private:
  inline void set_has_btid();
  inline void clear_has_btid();
  inline void set_has_appointindex();
  inline void clear_has_appointindex();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 btid_;
  ::google::protobuf::uint32 appointindex_;
  friend void  protobuf_AddDesc_net_2fCity_2eproto();
  friend void protobuf_AssignDesc_net_2fCity_2eproto();
  friend void protobuf_ShutdownFile_net_2fCity_2eproto();

  void InitAsDefaultInstance();
  static TCityRelieveAppointHeroReq* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TCityBuyResourceReq</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/City.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TCityBuyResourceReq : public ::google::protobuf::Message {
 public:
  TCityBuyResourceReq();
  virtual ~TCityBuyResourceReq();

  TCityBuyResourceReq(const TCityBuyResourceReq& from);

  inline TCityBuyResourceReq& operator=(const TCityBuyResourceReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TCityBuyResourceReq& default_instance();

  void Swap(TCityBuyResourceReq* other);

  // implements Message ----------------------------------------------

  TCityBuyResourceReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TCityBuyResourceReq& from);
  void MergeFrom(const TCityBuyResourceReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 ResBuyTid = 1;
  inline bool has_resbuytid() const;
  inline void clear_resbuytid();
  static const int kResBuyTidFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TCityBuyResourceReq</name>
  	<Function>
  		<name>resbuytid</name>
  		<replaceName>ResBuyTid</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_resbuytid</name>
  		<replaceName>ResBuyTid</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_resbuytid</name>
  		<replaceName>ResBuyTid</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 resbuytid() const;
  inline void set_resbuytid(::google::protobuf::uint32 value);

  // optional uint32 Num = 2;
  inline bool has_num() const;
  inline void clear_num();
  static const int kNumFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TCityBuyResourceReq</name>
  	<Function>
  		<name>num</name>
  		<replaceName>Num</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_num</name>
  		<replaceName>Num</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_num</name>
  		<replaceName>Num</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 num() const;
  inline void set_num(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:pb.TCityBuyResourceReq)
 private:
  inline void set_has_resbuytid();
  inline void clear_has_resbuytid();
  inline void set_has_num();
  inline void clear_has_num();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 resbuytid_;
  ::google::protobuf::uint32 num_;
  friend void  protobuf_AddDesc_net_2fCity_2eproto();
  friend void protobuf_AssignDesc_net_2fCity_2eproto();
  friend void protobuf_ShutdownFile_net_2fCity_2eproto();

  void InitAsDefaultInstance();
  static TCityBuyResourceReq* default_instance_;
};
// ===================================================================


// ===================================================================

// TCityBuildAppoint

// optional uint32 Btid = 1;
inline bool TCityBuildAppoint::has_btid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TCityBuildAppoint::set_has_btid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TCityBuildAppoint::clear_has_btid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TCityBuildAppoint::clear_btid() {
  btid_ = 0u;
  clear_has_btid();
}
inline ::google::protobuf::uint32 TCityBuildAppoint::btid() const {
  // @@protoc_insertion_point(field_get:pb.TCityBuildAppoint.Btid)
  return btid_;
}
inline void TCityBuildAppoint::set_btid(::google::protobuf::uint32 value) {
  set_has_btid();
  btid_ = value;
  // @@protoc_insertion_point(field_set:pb.TCityBuildAppoint.Btid)
}

// repeated .pb.TCityBuildAppointSingle SingleArr = 2;
inline int TCityBuildAppoint::singlearr_size() const {
  return singlearr_.size();
}
inline void TCityBuildAppoint::clear_singlearr() {
  singlearr_.Clear();
}
inline const ::pb::TCityBuildAppointSingle& TCityBuildAppoint::singlearr(int index) const {
  // @@protoc_insertion_point(field_get:pb.TCityBuildAppoint.SingleArr)
  return singlearr_.Get(index);
}
inline ::pb::TCityBuildAppointSingle* TCityBuildAppoint::mutable_singlearr(int index) {
  // @@protoc_insertion_point(field_mutable:pb.TCityBuildAppoint.SingleArr)
  return singlearr_.Mutable(index);
}
inline ::pb::TCityBuildAppointSingle* TCityBuildAppoint::add_singlearr() {
  // @@protoc_insertion_point(field_add:pb.TCityBuildAppoint.SingleArr)
  return singlearr_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::TCityBuildAppointSingle >&
TCityBuildAppoint::singlearr() const {
  // @@protoc_insertion_point(field_list:pb.TCityBuildAppoint.SingleArr)
  return singlearr_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb::TCityBuildAppointSingle >*
TCityBuildAppoint::mutable_singlearr() {
  // @@protoc_insertion_point(field_mutable_list:pb.TCityBuildAppoint.SingleArr)
  return &singlearr_;
}

// -------------------------------------------------------------------

// TCityBuildAppointSingle

// optional uint32 AppointIndex = 1;
inline bool TCityBuildAppointSingle::has_appointindex() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TCityBuildAppointSingle::set_has_appointindex() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TCityBuildAppointSingle::clear_has_appointindex() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TCityBuildAppointSingle::clear_appointindex() {
  appointindex_ = 0u;
  clear_has_appointindex();
}
inline ::google::protobuf::uint32 TCityBuildAppointSingle::appointindex() const {
  // @@protoc_insertion_point(field_get:pb.TCityBuildAppointSingle.AppointIndex)
  return appointindex_;
}
inline void TCityBuildAppointSingle::set_appointindex(::google::protobuf::uint32 value) {
  set_has_appointindex();
  appointindex_ = value;
  // @@protoc_insertion_point(field_set:pb.TCityBuildAppointSingle.AppointIndex)
}

// optional uint32 Hid = 2;
inline bool TCityBuildAppointSingle::has_hid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TCityBuildAppointSingle::set_has_hid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TCityBuildAppointSingle::clear_has_hid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TCityBuildAppointSingle::clear_hid() {
  hid_ = 0u;
  clear_has_hid();
}
inline ::google::protobuf::uint32 TCityBuildAppointSingle::hid() const {
  // @@protoc_insertion_point(field_get:pb.TCityBuildAppointSingle.Hid)
  return hid_;
}
inline void TCityBuildAppointSingle::set_hid(::google::protobuf::uint32 value) {
  set_has_hid();
  hid_ = value;
  // @@protoc_insertion_point(field_set:pb.TCityBuildAppointSingle.Hid)
}

// -------------------------------------------------------------------

// TCityBuildData

// optional uint32 BuildId = 1;
inline bool TCityBuildData::has_buildid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TCityBuildData::set_has_buildid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TCityBuildData::clear_has_buildid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TCityBuildData::clear_buildid() {
  buildid_ = 0u;
  clear_has_buildid();
}
inline ::google::protobuf::uint32 TCityBuildData::buildid() const {
  // @@protoc_insertion_point(field_get:pb.TCityBuildData.BuildId)
  return buildid_;
}
inline void TCityBuildData::set_buildid(::google::protobuf::uint32 value) {
  set_has_buildid();
  buildid_ = value;
  // @@protoc_insertion_point(field_set:pb.TCityBuildData.BuildId)
}

// optional uint32 Level = 2;
inline bool TCityBuildData::has_level() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TCityBuildData::set_has_level() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TCityBuildData::clear_has_level() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TCityBuildData::clear_level() {
  level_ = 0u;
  clear_has_level();
}
inline ::google::protobuf::uint32 TCityBuildData::level() const {
  // @@protoc_insertion_point(field_get:pb.TCityBuildData.Level)
  return level_;
}
inline void TCityBuildData::set_level(::google::protobuf::uint32 value) {
  set_has_level();
  level_ = value;
  // @@protoc_insertion_point(field_set:pb.TCityBuildData.Level)
}

// -------------------------------------------------------------------

// TCityResBuyData

// optional uint32 Tid = 1;
inline bool TCityResBuyData::has_tid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TCityResBuyData::set_has_tid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TCityResBuyData::clear_has_tid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TCityResBuyData::clear_tid() {
  tid_ = 0u;
  clear_has_tid();
}
inline ::google::protobuf::uint32 TCityResBuyData::tid() const {
  // @@protoc_insertion_point(field_get:pb.TCityResBuyData.Tid)
  return tid_;
}
inline void TCityResBuyData::set_tid(::google::protobuf::uint32 value) {
  set_has_tid();
  tid_ = value;
  // @@protoc_insertion_point(field_set:pb.TCityResBuyData.Tid)
}

// optional uint32 HasBuyNum = 2;
inline bool TCityResBuyData::has_hasbuynum() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TCityResBuyData::set_has_hasbuynum() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TCityResBuyData::clear_has_hasbuynum() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TCityResBuyData::clear_hasbuynum() {
  hasbuynum_ = 0u;
  clear_has_hasbuynum();
}
inline ::google::protobuf::uint32 TCityResBuyData::hasbuynum() const {
  // @@protoc_insertion_point(field_get:pb.TCityResBuyData.HasBuyNum)
  return hasbuynum_;
}
inline void TCityResBuyData::set_hasbuynum(::google::protobuf::uint32 value) {
  set_has_hasbuynum();
  hasbuynum_ = value;
  // @@protoc_insertion_point(field_set:pb.TCityResBuyData.HasBuyNum)
}

// -------------------------------------------------------------------

// TCityGetInfoRsp

// repeated .pb.TCityBuildData BuildArr = 1;
inline int TCityGetInfoRsp::buildarr_size() const {
  return buildarr_.size();
}
inline void TCityGetInfoRsp::clear_buildarr() {
  buildarr_.Clear();
}
inline const ::pb::TCityBuildData& TCityGetInfoRsp::buildarr(int index) const {
  // @@protoc_insertion_point(field_get:pb.TCityGetInfoRsp.BuildArr)
  return buildarr_.Get(index);
}
inline ::pb::TCityBuildData* TCityGetInfoRsp::mutable_buildarr(int index) {
  // @@protoc_insertion_point(field_mutable:pb.TCityGetInfoRsp.BuildArr)
  return buildarr_.Mutable(index);
}
inline ::pb::TCityBuildData* TCityGetInfoRsp::add_buildarr() {
  // @@protoc_insertion_point(field_add:pb.TCityGetInfoRsp.BuildArr)
  return buildarr_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::TCityBuildData >&
TCityGetInfoRsp::buildarr() const {
  // @@protoc_insertion_point(field_list:pb.TCityGetInfoRsp.BuildArr)
  return buildarr_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb::TCityBuildData >*
TCityGetInfoRsp::mutable_buildarr() {
  // @@protoc_insertion_point(field_mutable_list:pb.TCityGetInfoRsp.BuildArr)
  return &buildarr_;
}

// repeated .pb.TCityBuildAppoint AppointArr = 2;
inline int TCityGetInfoRsp::appointarr_size() const {
  return appointarr_.size();
}
inline void TCityGetInfoRsp::clear_appointarr() {
  appointarr_.Clear();
}
inline const ::pb::TCityBuildAppoint& TCityGetInfoRsp::appointarr(int index) const {
  // @@protoc_insertion_point(field_get:pb.TCityGetInfoRsp.AppointArr)
  return appointarr_.Get(index);
}
inline ::pb::TCityBuildAppoint* TCityGetInfoRsp::mutable_appointarr(int index) {
  // @@protoc_insertion_point(field_mutable:pb.TCityGetInfoRsp.AppointArr)
  return appointarr_.Mutable(index);
}
inline ::pb::TCityBuildAppoint* TCityGetInfoRsp::add_appointarr() {
  // @@protoc_insertion_point(field_add:pb.TCityGetInfoRsp.AppointArr)
  return appointarr_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::TCityBuildAppoint >&
TCityGetInfoRsp::appointarr() const {
  // @@protoc_insertion_point(field_list:pb.TCityGetInfoRsp.AppointArr)
  return appointarr_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb::TCityBuildAppoint >*
TCityGetInfoRsp::mutable_appointarr() {
  // @@protoc_insertion_point(field_mutable_list:pb.TCityGetInfoRsp.AppointArr)
  return &appointarr_;
}

// optional int64 EndCdTime = 3;
inline bool TCityGetInfoRsp::has_endcdtime() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void TCityGetInfoRsp::set_has_endcdtime() {
  _has_bits_[0] |= 0x00000004u;
}
inline void TCityGetInfoRsp::clear_has_endcdtime() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void TCityGetInfoRsp::clear_endcdtime() {
  endcdtime_ = GOOGLE_LONGLONG(0);
  clear_has_endcdtime();
}
inline ::google::protobuf::int64 TCityGetInfoRsp::endcdtime() const {
  // @@protoc_insertion_point(field_get:pb.TCityGetInfoRsp.EndCdTime)
  return endcdtime_;
}
inline void TCityGetInfoRsp::set_endcdtime(::google::protobuf::int64 value) {
  set_has_endcdtime();
  endcdtime_ = value;
  // @@protoc_insertion_point(field_set:pb.TCityGetInfoRsp.EndCdTime)
}

// repeated .pb.TCityResBuyData DailyResBuyArr = 4;
inline int TCityGetInfoRsp::dailyresbuyarr_size() const {
  return dailyresbuyarr_.size();
}
inline void TCityGetInfoRsp::clear_dailyresbuyarr() {
  dailyresbuyarr_.Clear();
}
inline const ::pb::TCityResBuyData& TCityGetInfoRsp::dailyresbuyarr(int index) const {
  // @@protoc_insertion_point(field_get:pb.TCityGetInfoRsp.DailyResBuyArr)
  return dailyresbuyarr_.Get(index);
}
inline ::pb::TCityResBuyData* TCityGetInfoRsp::mutable_dailyresbuyarr(int index) {
  // @@protoc_insertion_point(field_mutable:pb.TCityGetInfoRsp.DailyResBuyArr)
  return dailyresbuyarr_.Mutable(index);
}
inline ::pb::TCityResBuyData* TCityGetInfoRsp::add_dailyresbuyarr() {
  // @@protoc_insertion_point(field_add:pb.TCityGetInfoRsp.DailyResBuyArr)
  return dailyresbuyarr_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::TCityResBuyData >&
TCityGetInfoRsp::dailyresbuyarr() const {
  // @@protoc_insertion_point(field_list:pb.TCityGetInfoRsp.DailyResBuyArr)
  return dailyresbuyarr_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb::TCityResBuyData >*
TCityGetInfoRsp::mutable_dailyresbuyarr() {
  // @@protoc_insertion_point(field_mutable_list:pb.TCityGetInfoRsp.DailyResBuyArr)
  return &dailyresbuyarr_;
}

// optional int64 DailyResBuyRefreshTime = 5;
inline bool TCityGetInfoRsp::has_dailyresbuyrefreshtime() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void TCityGetInfoRsp::set_has_dailyresbuyrefreshtime() {
  _has_bits_[0] |= 0x00000010u;
}
inline void TCityGetInfoRsp::clear_has_dailyresbuyrefreshtime() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void TCityGetInfoRsp::clear_dailyresbuyrefreshtime() {
  dailyresbuyrefreshtime_ = GOOGLE_LONGLONG(0);
  clear_has_dailyresbuyrefreshtime();
}
inline ::google::protobuf::int64 TCityGetInfoRsp::dailyresbuyrefreshtime() const {
  // @@protoc_insertion_point(field_get:pb.TCityGetInfoRsp.DailyResBuyRefreshTime)
  return dailyresbuyrefreshtime_;
}
inline void TCityGetInfoRsp::set_dailyresbuyrefreshtime(::google::protobuf::int64 value) {
  set_has_dailyresbuyrefreshtime();
  dailyresbuyrefreshtime_ = value;
  // @@protoc_insertion_point(field_set:pb.TCityGetInfoRsp.DailyResBuyRefreshTime)
}

// optional string Scene = 6;
inline bool TCityGetInfoRsp::has_scene() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void TCityGetInfoRsp::set_has_scene() {
  _has_bits_[0] |= 0x00000020u;
}
inline void TCityGetInfoRsp::clear_has_scene() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void TCityGetInfoRsp::clear_scene() {
  if (scene_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    scene_->clear();
  }
  clear_has_scene();
}
inline const ::std::string& TCityGetInfoRsp::scene() const {
  // @@protoc_insertion_point(field_get:pb.TCityGetInfoRsp.Scene)
  return *scene_;
}
inline void TCityGetInfoRsp::set_scene(const ::std::string& value) {
  set_has_scene();
  if (scene_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    scene_ = new ::std::string;
  }
  scene_->assign(value);
  // @@protoc_insertion_point(field_set:pb.TCityGetInfoRsp.Scene)
}
inline void TCityGetInfoRsp::set_scene(const char* value) {
  set_has_scene();
  if (scene_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    scene_ = new ::std::string;
  }
  scene_->assign(value);
  // @@protoc_insertion_point(field_set_char:pb.TCityGetInfoRsp.Scene)
}
inline void TCityGetInfoRsp::set_scene(const char* value, size_t size) {
  set_has_scene();
  if (scene_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    scene_ = new ::std::string;
  }
  scene_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:pb.TCityGetInfoRsp.Scene)
}
inline ::std::string* TCityGetInfoRsp::mutable_scene() {
  set_has_scene();
  if (scene_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    scene_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:pb.TCityGetInfoRsp.Scene)
  return scene_;
}
inline ::std::string* TCityGetInfoRsp::release_scene() {
  clear_has_scene();
  if (scene_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = scene_;
    scene_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void TCityGetInfoRsp::set_allocated_scene(::std::string* scene) {
  if (scene_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete scene_;
  }
  if (scene) {
    set_has_scene();
    scene_ = scene;
  } else {
    clear_has_scene();
    scene_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:pb.TCityGetInfoRsp.Scene)
}

// -------------------------------------------------------------------

// TCitySetSceneReq

// optional string Scene = 1;
inline bool TCitySetSceneReq::has_scene() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TCitySetSceneReq::set_has_scene() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TCitySetSceneReq::clear_has_scene() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TCitySetSceneReq::clear_scene() {
  if (scene_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    scene_->clear();
  }
  clear_has_scene();
}
inline const ::std::string& TCitySetSceneReq::scene() const {
  // @@protoc_insertion_point(field_get:pb.TCitySetSceneReq.Scene)
  return *scene_;
}
inline void TCitySetSceneReq::set_scene(const ::std::string& value) {
  set_has_scene();
  if (scene_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    scene_ = new ::std::string;
  }
  scene_->assign(value);
  // @@protoc_insertion_point(field_set:pb.TCitySetSceneReq.Scene)
}
inline void TCitySetSceneReq::set_scene(const char* value) {
  set_has_scene();
  if (scene_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    scene_ = new ::std::string;
  }
  scene_->assign(value);
  // @@protoc_insertion_point(field_set_char:pb.TCitySetSceneReq.Scene)
}
inline void TCitySetSceneReq::set_scene(const char* value, size_t size) {
  set_has_scene();
  if (scene_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    scene_ = new ::std::string;
  }
  scene_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:pb.TCitySetSceneReq.Scene)
}
inline ::std::string* TCitySetSceneReq::mutable_scene() {
  set_has_scene();
  if (scene_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    scene_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:pb.TCitySetSceneReq.Scene)
  return scene_;
}
inline ::std::string* TCitySetSceneReq::release_scene() {
  clear_has_scene();
  if (scene_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = scene_;
    scene_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void TCitySetSceneReq::set_allocated_scene(::std::string* scene) {
  if (scene_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete scene_;
  }
  if (scene) {
    set_has_scene();
    scene_ = scene;
  } else {
    clear_has_scene();
    scene_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:pb.TCitySetSceneReq.Scene)
}

// -------------------------------------------------------------------

// TCityUpgradeReq

// optional uint32 BuildId = 1;
inline bool TCityUpgradeReq::has_buildid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TCityUpgradeReq::set_has_buildid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TCityUpgradeReq::clear_has_buildid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TCityUpgradeReq::clear_buildid() {
  buildid_ = 0u;
  clear_has_buildid();
}
inline ::google::protobuf::uint32 TCityUpgradeReq::buildid() const {
  // @@protoc_insertion_point(field_get:pb.TCityUpgradeReq.BuildId)
  return buildid_;
}
inline void TCityUpgradeReq::set_buildid(::google::protobuf::uint32 value) {
  set_has_buildid();
  buildid_ = value;
  // @@protoc_insertion_point(field_set:pb.TCityUpgradeReq.BuildId)
}

// -------------------------------------------------------------------

// TCityItemReduceCDReq

// optional uint32 Tid = 1;
inline bool TCityItemReduceCDReq::has_tid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TCityItemReduceCDReq::set_has_tid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TCityItemReduceCDReq::clear_has_tid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TCityItemReduceCDReq::clear_tid() {
  tid_ = 0u;
  clear_has_tid();
}
inline ::google::protobuf::uint32 TCityItemReduceCDReq::tid() const {
  // @@protoc_insertion_point(field_get:pb.TCityItemReduceCDReq.Tid)
  return tid_;
}
inline void TCityItemReduceCDReq::set_tid(::google::protobuf::uint32 value) {
  set_has_tid();
  tid_ = value;
  // @@protoc_insertion_point(field_set:pb.TCityItemReduceCDReq.Tid)
}

// optional uint32 Num = 2;
inline bool TCityItemReduceCDReq::has_num() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TCityItemReduceCDReq::set_has_num() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TCityItemReduceCDReq::clear_has_num() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TCityItemReduceCDReq::clear_num() {
  num_ = 0u;
  clear_has_num();
}
inline ::google::protobuf::uint32 TCityItemReduceCDReq::num() const {
  // @@protoc_insertion_point(field_get:pb.TCityItemReduceCDReq.Num)
  return num_;
}
inline void TCityItemReduceCDReq::set_num(::google::protobuf::uint32 value) {
  set_has_num();
  num_ = value;
  // @@protoc_insertion_point(field_set:pb.TCityItemReduceCDReq.Num)
}

// -------------------------------------------------------------------

// TCityExchangeReq

// optional uint32 ResourceId = 1;
inline bool TCityExchangeReq::has_resourceid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TCityExchangeReq::set_has_resourceid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TCityExchangeReq::clear_has_resourceid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TCityExchangeReq::clear_resourceid() {
  resourceid_ = 0u;
  clear_has_resourceid();
}
inline ::google::protobuf::uint32 TCityExchangeReq::resourceid() const {
  // @@protoc_insertion_point(field_get:pb.TCityExchangeReq.ResourceId)
  return resourceid_;
}
inline void TCityExchangeReq::set_resourceid(::google::protobuf::uint32 value) {
  set_has_resourceid();
  resourceid_ = value;
  // @@protoc_insertion_point(field_set:pb.TCityExchangeReq.ResourceId)
}

// optional uint32 ResourceNum = 2;
inline bool TCityExchangeReq::has_resourcenum() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TCityExchangeReq::set_has_resourcenum() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TCityExchangeReq::clear_has_resourcenum() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TCityExchangeReq::clear_resourcenum() {
  resourcenum_ = 0u;
  clear_has_resourcenum();
}
inline ::google::protobuf::uint32 TCityExchangeReq::resourcenum() const {
  // @@protoc_insertion_point(field_get:pb.TCityExchangeReq.ResourceNum)
  return resourcenum_;
}
inline void TCityExchangeReq::set_resourcenum(::google::protobuf::uint32 value) {
  set_has_resourcenum();
  resourcenum_ = value;
  // @@protoc_insertion_point(field_set:pb.TCityExchangeReq.ResourceNum)
}

// optional uint32 targetResouceId = 3;
inline bool TCityExchangeReq::has_targetresouceid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void TCityExchangeReq::set_has_targetresouceid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void TCityExchangeReq::clear_has_targetresouceid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void TCityExchangeReq::clear_targetresouceid() {
  targetresouceid_ = 0u;
  clear_has_targetresouceid();
}
inline ::google::protobuf::uint32 TCityExchangeReq::targetresouceid() const {
  // @@protoc_insertion_point(field_get:pb.TCityExchangeReq.targetResouceId)
  return targetresouceid_;
}
inline void TCityExchangeReq::set_targetresouceid(::google::protobuf::uint32 value) {
  set_has_targetresouceid();
  targetresouceid_ = value;
  // @@protoc_insertion_point(field_set:pb.TCityExchangeReq.targetResouceId)
}

// -------------------------------------------------------------------

// TCityBuildArrPush

// repeated .pb.TCityBuildData BuildArr = 1;
inline int TCityBuildArrPush::buildarr_size() const {
  return buildarr_.size();
}
inline void TCityBuildArrPush::clear_buildarr() {
  buildarr_.Clear();
}
inline const ::pb::TCityBuildData& TCityBuildArrPush::buildarr(int index) const {
  // @@protoc_insertion_point(field_get:pb.TCityBuildArrPush.BuildArr)
  return buildarr_.Get(index);
}
inline ::pb::TCityBuildData* TCityBuildArrPush::mutable_buildarr(int index) {
  // @@protoc_insertion_point(field_mutable:pb.TCityBuildArrPush.BuildArr)
  return buildarr_.Mutable(index);
}
inline ::pb::TCityBuildData* TCityBuildArrPush::add_buildarr() {
  // @@protoc_insertion_point(field_add:pb.TCityBuildArrPush.BuildArr)
  return buildarr_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::TCityBuildData >&
TCityBuildArrPush::buildarr() const {
  // @@protoc_insertion_point(field_list:pb.TCityBuildArrPush.BuildArr)
  return buildarr_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb::TCityBuildData >*
TCityBuildArrPush::mutable_buildarr() {
  // @@protoc_insertion_point(field_mutable_list:pb.TCityBuildArrPush.BuildArr)
  return &buildarr_;
}

// repeated .pb.TCityBuildAppoint AppointArr = 2;
inline int TCityBuildArrPush::appointarr_size() const {
  return appointarr_.size();
}
inline void TCityBuildArrPush::clear_appointarr() {
  appointarr_.Clear();
}
inline const ::pb::TCityBuildAppoint& TCityBuildArrPush::appointarr(int index) const {
  // @@protoc_insertion_point(field_get:pb.TCityBuildArrPush.AppointArr)
  return appointarr_.Get(index);
}
inline ::pb::TCityBuildAppoint* TCityBuildArrPush::mutable_appointarr(int index) {
  // @@protoc_insertion_point(field_mutable:pb.TCityBuildArrPush.AppointArr)
  return appointarr_.Mutable(index);
}
inline ::pb::TCityBuildAppoint* TCityBuildArrPush::add_appointarr() {
  // @@protoc_insertion_point(field_add:pb.TCityBuildArrPush.AppointArr)
  return appointarr_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::TCityBuildAppoint >&
TCityBuildArrPush::appointarr() const {
  // @@protoc_insertion_point(field_list:pb.TCityBuildArrPush.AppointArr)
  return appointarr_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb::TCityBuildAppoint >*
TCityBuildArrPush::mutable_appointarr() {
  // @@protoc_insertion_point(field_mutable_list:pb.TCityBuildArrPush.AppointArr)
  return &appointarr_;
}

// repeated .pb.TCityResBuyData DailyResBuyArr = 3;
inline int TCityBuildArrPush::dailyresbuyarr_size() const {
  return dailyresbuyarr_.size();
}
inline void TCityBuildArrPush::clear_dailyresbuyarr() {
  dailyresbuyarr_.Clear();
}
inline const ::pb::TCityResBuyData& TCityBuildArrPush::dailyresbuyarr(int index) const {
  // @@protoc_insertion_point(field_get:pb.TCityBuildArrPush.DailyResBuyArr)
  return dailyresbuyarr_.Get(index);
}
inline ::pb::TCityResBuyData* TCityBuildArrPush::mutable_dailyresbuyarr(int index) {
  // @@protoc_insertion_point(field_mutable:pb.TCityBuildArrPush.DailyResBuyArr)
  return dailyresbuyarr_.Mutable(index);
}
inline ::pb::TCityResBuyData* TCityBuildArrPush::add_dailyresbuyarr() {
  // @@protoc_insertion_point(field_add:pb.TCityBuildArrPush.DailyResBuyArr)
  return dailyresbuyarr_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::TCityResBuyData >&
TCityBuildArrPush::dailyresbuyarr() const {
  // @@protoc_insertion_point(field_list:pb.TCityBuildArrPush.DailyResBuyArr)
  return dailyresbuyarr_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb::TCityResBuyData >*
TCityBuildArrPush::mutable_dailyresbuyarr() {
  // @@protoc_insertion_point(field_mutable_list:pb.TCityBuildArrPush.DailyResBuyArr)
  return &dailyresbuyarr_;
}

// optional int64 EndCdTime = 4;
inline bool TCityBuildArrPush::has_endcdtime() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void TCityBuildArrPush::set_has_endcdtime() {
  _has_bits_[0] |= 0x00000008u;
}
inline void TCityBuildArrPush::clear_has_endcdtime() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void TCityBuildArrPush::clear_endcdtime() {
  endcdtime_ = GOOGLE_LONGLONG(0);
  clear_has_endcdtime();
}
inline ::google::protobuf::int64 TCityBuildArrPush::endcdtime() const {
  // @@protoc_insertion_point(field_get:pb.TCityBuildArrPush.EndCdTime)
  return endcdtime_;
}
inline void TCityBuildArrPush::set_endcdtime(::google::protobuf::int64 value) {
  set_has_endcdtime();
  endcdtime_ = value;
  // @@protoc_insertion_point(field_set:pb.TCityBuildArrPush.EndCdTime)
}

// -------------------------------------------------------------------

// TCityBuildUnlockReq

// optional uint32 BuildId = 1;
inline bool TCityBuildUnlockReq::has_buildid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TCityBuildUnlockReq::set_has_buildid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TCityBuildUnlockReq::clear_has_buildid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TCityBuildUnlockReq::clear_buildid() {
  buildid_ = 0u;
  clear_has_buildid();
}
inline ::google::protobuf::uint32 TCityBuildUnlockReq::buildid() const {
  // @@protoc_insertion_point(field_get:pb.TCityBuildUnlockReq.BuildId)
  return buildid_;
}
inline void TCityBuildUnlockReq::set_buildid(::google::protobuf::uint32 value) {
  set_has_buildid();
  buildid_ = value;
  // @@protoc_insertion_point(field_set:pb.TCityBuildUnlockReq.BuildId)
}

// -------------------------------------------------------------------

// TCityAppointHeroReq

// optional uint32 Btid = 1;
inline bool TCityAppointHeroReq::has_btid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TCityAppointHeroReq::set_has_btid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TCityAppointHeroReq::clear_has_btid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TCityAppointHeroReq::clear_btid() {
  btid_ = 0u;
  clear_has_btid();
}
inline ::google::protobuf::uint32 TCityAppointHeroReq::btid() const {
  // @@protoc_insertion_point(field_get:pb.TCityAppointHeroReq.Btid)
  return btid_;
}
inline void TCityAppointHeroReq::set_btid(::google::protobuf::uint32 value) {
  set_has_btid();
  btid_ = value;
  // @@protoc_insertion_point(field_set:pb.TCityAppointHeroReq.Btid)
}

// optional uint32 AppointIndex = 2;
inline bool TCityAppointHeroReq::has_appointindex() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TCityAppointHeroReq::set_has_appointindex() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TCityAppointHeroReq::clear_has_appointindex() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TCityAppointHeroReq::clear_appointindex() {
  appointindex_ = 0u;
  clear_has_appointindex();
}
inline ::google::protobuf::uint32 TCityAppointHeroReq::appointindex() const {
  // @@protoc_insertion_point(field_get:pb.TCityAppointHeroReq.AppointIndex)
  return appointindex_;
}
inline void TCityAppointHeroReq::set_appointindex(::google::protobuf::uint32 value) {
  set_has_appointindex();
  appointindex_ = value;
  // @@protoc_insertion_point(field_set:pb.TCityAppointHeroReq.AppointIndex)
}

// optional uint32 Hid = 3;
inline bool TCityAppointHeroReq::has_hid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void TCityAppointHeroReq::set_has_hid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void TCityAppointHeroReq::clear_has_hid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void TCityAppointHeroReq::clear_hid() {
  hid_ = 0u;
  clear_has_hid();
}
inline ::google::protobuf::uint32 TCityAppointHeroReq::hid() const {
  // @@protoc_insertion_point(field_get:pb.TCityAppointHeroReq.Hid)
  return hid_;
}
inline void TCityAppointHeroReq::set_hid(::google::protobuf::uint32 value) {
  set_has_hid();
  hid_ = value;
  // @@protoc_insertion_point(field_set:pb.TCityAppointHeroReq.Hid)
}

// -------------------------------------------------------------------

// TCityRelieveAppointHeroReq

// optional uint32 Btid = 1;
inline bool TCityRelieveAppointHeroReq::has_btid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TCityRelieveAppointHeroReq::set_has_btid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TCityRelieveAppointHeroReq::clear_has_btid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TCityRelieveAppointHeroReq::clear_btid() {
  btid_ = 0u;
  clear_has_btid();
}
inline ::google::protobuf::uint32 TCityRelieveAppointHeroReq::btid() const {
  // @@protoc_insertion_point(field_get:pb.TCityRelieveAppointHeroReq.Btid)
  return btid_;
}
inline void TCityRelieveAppointHeroReq::set_btid(::google::protobuf::uint32 value) {
  set_has_btid();
  btid_ = value;
  // @@protoc_insertion_point(field_set:pb.TCityRelieveAppointHeroReq.Btid)
}

// optional uint32 AppointIndex = 2;
inline bool TCityRelieveAppointHeroReq::has_appointindex() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TCityRelieveAppointHeroReq::set_has_appointindex() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TCityRelieveAppointHeroReq::clear_has_appointindex() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TCityRelieveAppointHeroReq::clear_appointindex() {
  appointindex_ = 0u;
  clear_has_appointindex();
}
inline ::google::protobuf::uint32 TCityRelieveAppointHeroReq::appointindex() const {
  // @@protoc_insertion_point(field_get:pb.TCityRelieveAppointHeroReq.AppointIndex)
  return appointindex_;
}
inline void TCityRelieveAppointHeroReq::set_appointindex(::google::protobuf::uint32 value) {
  set_has_appointindex();
  appointindex_ = value;
  // @@protoc_insertion_point(field_set:pb.TCityRelieveAppointHeroReq.AppointIndex)
}

// -------------------------------------------------------------------

// TCityBuyResourceReq

// optional uint32 ResBuyTid = 1;
inline bool TCityBuyResourceReq::has_resbuytid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TCityBuyResourceReq::set_has_resbuytid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TCityBuyResourceReq::clear_has_resbuytid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TCityBuyResourceReq::clear_resbuytid() {
  resbuytid_ = 0u;
  clear_has_resbuytid();
}
inline ::google::protobuf::uint32 TCityBuyResourceReq::resbuytid() const {
  // @@protoc_insertion_point(field_get:pb.TCityBuyResourceReq.ResBuyTid)
  return resbuytid_;
}
inline void TCityBuyResourceReq::set_resbuytid(::google::protobuf::uint32 value) {
  set_has_resbuytid();
  resbuytid_ = value;
  // @@protoc_insertion_point(field_set:pb.TCityBuyResourceReq.ResBuyTid)
}

// optional uint32 Num = 2;
inline bool TCityBuyResourceReq::has_num() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TCityBuyResourceReq::set_has_num() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TCityBuyResourceReq::clear_has_num() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TCityBuyResourceReq::clear_num() {
  num_ = 0u;
  clear_has_num();
}
inline ::google::protobuf::uint32 TCityBuyResourceReq::num() const {
  // @@protoc_insertion_point(field_get:pb.TCityBuyResourceReq.Num)
  return num_;
}
inline void TCityBuyResourceReq::set_num(::google::protobuf::uint32 value) {
  set_has_num();
  num_ = value;
  // @@protoc_insertion_point(field_set:pb.TCityBuyResourceReq.Num)
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace pb

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_net_2fCity_2eproto__INCLUDED
