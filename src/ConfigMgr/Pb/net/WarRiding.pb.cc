// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: net/WarRiding.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "net/WarRiding.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace pb {

namespace {

const ::google::protobuf::Descriptor* TWarRidingSingle_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TWarRidingSingle_reflection_ = NULL;
const ::google::protobuf::Descriptor* TOtherWarRidingInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TOtherWarRidingInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* TWarRidingGetInfoRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TWarRidingGetInfoRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* TWarRidingCombineWarRidingReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TWarRidingCombineWarRidingReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* TWarRidingLevelUpReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TWarRidingLevelUpReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* TWarRidingStarUpReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TWarRidingStarUpReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* TWarRidingAdvanceReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TWarRidingAdvanceReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* TNewWarRidingNotify_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TNewWarRidingNotify_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_net_2fWarRiding_2eproto() {
  protobuf_AddDesc_net_2fWarRiding_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "net/WarRiding.proto");
  GOOGLE_CHECK(file != NULL);
  TWarRidingSingle_descriptor_ = file->message_type(0);
  static const int TWarRidingSingle_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TWarRidingSingle, tid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TWarRidingSingle, level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TWarRidingSingle, exp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TWarRidingSingle, advlv_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TWarRidingSingle, star_),
  };
  TWarRidingSingle_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TWarRidingSingle_descriptor_,
      TWarRidingSingle::default_instance_,
      TWarRidingSingle_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TWarRidingSingle, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TWarRidingSingle, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TWarRidingSingle));
  TOtherWarRidingInfo_descriptor_ = file->message_type(1);
  static const int TOtherWarRidingInfo_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TOtherWarRidingInfo, warridingarray_),
  };
  TOtherWarRidingInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TOtherWarRidingInfo_descriptor_,
      TOtherWarRidingInfo::default_instance_,
      TOtherWarRidingInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TOtherWarRidingInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TOtherWarRidingInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TOtherWarRidingInfo));
  TWarRidingGetInfoRsp_descriptor_ = file->message_type(2);
  static const int TWarRidingGetInfoRsp_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TWarRidingGetInfoRsp, warridingarray_),
  };
  TWarRidingGetInfoRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TWarRidingGetInfoRsp_descriptor_,
      TWarRidingGetInfoRsp::default_instance_,
      TWarRidingGetInfoRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TWarRidingGetInfoRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TWarRidingGetInfoRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TWarRidingGetInfoRsp));
  TWarRidingCombineWarRidingReq_descriptor_ = file->message_type(3);
  static const int TWarRidingCombineWarRidingReq_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TWarRidingCombineWarRidingReq, tid_),
  };
  TWarRidingCombineWarRidingReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TWarRidingCombineWarRidingReq_descriptor_,
      TWarRidingCombineWarRidingReq::default_instance_,
      TWarRidingCombineWarRidingReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TWarRidingCombineWarRidingReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TWarRidingCombineWarRidingReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TWarRidingCombineWarRidingReq));
  TWarRidingLevelUpReq_descriptor_ = file->message_type(4);
  static const int TWarRidingLevelUpReq_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TWarRidingLevelUpReq, tid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TWarRidingLevelUpReq, levelupitemarray_),
  };
  TWarRidingLevelUpReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TWarRidingLevelUpReq_descriptor_,
      TWarRidingLevelUpReq::default_instance_,
      TWarRidingLevelUpReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TWarRidingLevelUpReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TWarRidingLevelUpReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TWarRidingLevelUpReq));
  TWarRidingStarUpReq_descriptor_ = file->message_type(5);
  static const int TWarRidingStarUpReq_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TWarRidingStarUpReq, tid_),
  };
  TWarRidingStarUpReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TWarRidingStarUpReq_descriptor_,
      TWarRidingStarUpReq::default_instance_,
      TWarRidingStarUpReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TWarRidingStarUpReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TWarRidingStarUpReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TWarRidingStarUpReq));
  TWarRidingAdvanceReq_descriptor_ = file->message_type(6);
  static const int TWarRidingAdvanceReq_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TWarRidingAdvanceReq, tid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TWarRidingAdvanceReq, upnum_),
  };
  TWarRidingAdvanceReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TWarRidingAdvanceReq_descriptor_,
      TWarRidingAdvanceReq::default_instance_,
      TWarRidingAdvanceReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TWarRidingAdvanceReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TWarRidingAdvanceReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TWarRidingAdvanceReq));
  TNewWarRidingNotify_descriptor_ = file->message_type(7);
  static const int TNewWarRidingNotify_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TNewWarRidingNotify, warridingarray_),
  };
  TNewWarRidingNotify_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TNewWarRidingNotify_descriptor_,
      TNewWarRidingNotify::default_instance_,
      TNewWarRidingNotify_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TNewWarRidingNotify, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TNewWarRidingNotify, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TNewWarRidingNotify));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_net_2fWarRiding_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TWarRidingSingle_descriptor_, &TWarRidingSingle::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TOtherWarRidingInfo_descriptor_, &TOtherWarRidingInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TWarRidingGetInfoRsp_descriptor_, &TWarRidingGetInfoRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TWarRidingCombineWarRidingReq_descriptor_, &TWarRidingCombineWarRidingReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TWarRidingLevelUpReq_descriptor_, &TWarRidingLevelUpReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TWarRidingStarUpReq_descriptor_, &TWarRidingStarUpReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TWarRidingAdvanceReq_descriptor_, &TWarRidingAdvanceReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TNewWarRidingNotify_descriptor_, &TNewWarRidingNotify::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_net_2fWarRiding_2eproto() {
  delete TWarRidingSingle::default_instance_;
  delete TWarRidingSingle_reflection_;
  delete TOtherWarRidingInfo::default_instance_;
  delete TOtherWarRidingInfo_reflection_;
  delete TWarRidingGetInfoRsp::default_instance_;
  delete TWarRidingGetInfoRsp_reflection_;
  delete TWarRidingCombineWarRidingReq::default_instance_;
  delete TWarRidingCombineWarRidingReq_reflection_;
  delete TWarRidingLevelUpReq::default_instance_;
  delete TWarRidingLevelUpReq_reflection_;
  delete TWarRidingStarUpReq::default_instance_;
  delete TWarRidingStarUpReq_reflection_;
  delete TWarRidingAdvanceReq::default_instance_;
  delete TWarRidingAdvanceReq_reflection_;
  delete TNewWarRidingNotify::default_instance_;
  delete TNewWarRidingNotify_reflection_;
}

void protobuf_AddDesc_net_2fWarRiding_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::pb::protobuf_AddDesc_net_2fCommon_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\023net/WarRiding.proto\022\002pb\032\020net/Common.pr"
    "oto\"X\n\020TWarRidingSingle\022\013\n\003Tid\030\001 \001(\r\022\r\n\005"
    "Level\030\002 \001(\r\022\013\n\003Exp\030\003 \001(\r\022\r\n\005AdvLv\030\004 \001(\r\022"
    "\014\n\004Star\030\005 \001(\r\"C\n\023TOtherWarRidingInfo\022,\n\016"
    "WarRidingArray\030\001 \003(\0132\024.pb.TWarRidingSing"
    "le\"D\n\024TWarRidingGetInfoRsp\022,\n\016WarRidingA"
    "rray\030\001 \003(\0132\024.pb.TWarRidingSingle\",\n\035TWar"
    "RidingCombineWarRidingReq\022\013\n\003Tid\030\001 \001(\r\"N"
    "\n\024TWarRidingLevelUpReq\022\013\n\003Tid\030\001 \001(\r\022)\n\020L"
    "evelUpItemArray\030\002 \003(\0132\017.pb.TSimpleItem\"\""
    "\n\023TWarRidingStarUpReq\022\013\n\003Tid\030\001 \001(\r\"2\n\024TW"
    "arRidingAdvanceReq\022\013\n\003Tid\030\001 \001(\r\022\r\n\005UpNum"
    "\030\002 \001(\r\"C\n\023TNewWarRidingNotify\022,\n\016WarRidi"
    "ngArray\030\001 \003(\0132\024.pb.TWarRidingSingle", 555);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "net/WarRiding.proto", &protobuf_RegisterTypes);
  TWarRidingSingle::default_instance_ = new TWarRidingSingle();
  TOtherWarRidingInfo::default_instance_ = new TOtherWarRidingInfo();
  TWarRidingGetInfoRsp::default_instance_ = new TWarRidingGetInfoRsp();
  TWarRidingCombineWarRidingReq::default_instance_ = new TWarRidingCombineWarRidingReq();
  TWarRidingLevelUpReq::default_instance_ = new TWarRidingLevelUpReq();
  TWarRidingStarUpReq::default_instance_ = new TWarRidingStarUpReq();
  TWarRidingAdvanceReq::default_instance_ = new TWarRidingAdvanceReq();
  TNewWarRidingNotify::default_instance_ = new TNewWarRidingNotify();
  TWarRidingSingle::default_instance_->InitAsDefaultInstance();
  TOtherWarRidingInfo::default_instance_->InitAsDefaultInstance();
  TWarRidingGetInfoRsp::default_instance_->InitAsDefaultInstance();
  TWarRidingCombineWarRidingReq::default_instance_->InitAsDefaultInstance();
  TWarRidingLevelUpReq::default_instance_->InitAsDefaultInstance();
  TWarRidingStarUpReq::default_instance_->InitAsDefaultInstance();
  TWarRidingAdvanceReq::default_instance_->InitAsDefaultInstance();
  TNewWarRidingNotify::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_net_2fWarRiding_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_net_2fWarRiding_2eproto {
  StaticDescriptorInitializer_net_2fWarRiding_2eproto() {
    protobuf_AddDesc_net_2fWarRiding_2eproto();
  }
} static_descriptor_initializer_net_2fWarRiding_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int TWarRidingSingle::kTidFieldNumber;
const int TWarRidingSingle::kLevelFieldNumber;
const int TWarRidingSingle::kExpFieldNumber;
const int TWarRidingSingle::kAdvLvFieldNumber;
const int TWarRidingSingle::kStarFieldNumber;
#endif  // !_MSC_VER

TWarRidingSingle::TWarRidingSingle()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TWarRidingSingle)
}

void TWarRidingSingle::InitAsDefaultInstance() {
}

TWarRidingSingle::TWarRidingSingle(const TWarRidingSingle& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TWarRidingSingle)
}

void TWarRidingSingle::SharedCtor() {
  _cached_size_ = 0;
  tid_ = 0u;
  level_ = 0u;
  exp_ = 0u;
  advlv_ = 0u;
  star_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TWarRidingSingle::~TWarRidingSingle() {
  // @@protoc_insertion_point(destructor:pb.TWarRidingSingle)
  SharedDtor();
}

void TWarRidingSingle::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TWarRidingSingle::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TWarRidingSingle::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TWarRidingSingle_descriptor_;
}

const TWarRidingSingle& TWarRidingSingle::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fWarRiding_2eproto();
  return *default_instance_;
}

TWarRidingSingle* TWarRidingSingle::default_instance_ = NULL;

TWarRidingSingle* TWarRidingSingle::New() const {
  return new TWarRidingSingle;
}

void TWarRidingSingle::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<TWarRidingSingle*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 31) {
    ZR_(tid_, star_);
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TWarRidingSingle::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TWarRidingSingle)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 Tid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &tid_)));
          set_has_tid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_Level;
        break;
      }

      // optional uint32 Level = 2;
      case 2: {
        if (tag == 16) {
         parse_Level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &level_)));
          set_has_level();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_Exp;
        break;
      }

      // optional uint32 Exp = 3;
      case 3: {
        if (tag == 24) {
         parse_Exp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &exp_)));
          set_has_exp();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_AdvLv;
        break;
      }

      // optional uint32 AdvLv = 4;
      case 4: {
        if (tag == 32) {
         parse_AdvLv:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &advlv_)));
          set_has_advlv();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_Star;
        break;
      }

      // optional uint32 Star = 5;
      case 5: {
        if (tag == 40) {
         parse_Star:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &star_)));
          set_has_star();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TWarRidingSingle)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TWarRidingSingle)
  return false;
#undef DO_
}

void TWarRidingSingle::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TWarRidingSingle)
  // optional uint32 Tid = 1;
  if (has_tid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->tid(), output);
  }

  // optional uint32 Level = 2;
  if (has_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->level(), output);
  }

  // optional uint32 Exp = 3;
  if (has_exp()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->exp(), output);
  }

  // optional uint32 AdvLv = 4;
  if (has_advlv()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->advlv(), output);
  }

  // optional uint32 Star = 5;
  if (has_star()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->star(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TWarRidingSingle)
}

::google::protobuf::uint8* TWarRidingSingle::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TWarRidingSingle)
  // optional uint32 Tid = 1;
  if (has_tid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->tid(), target);
  }

  // optional uint32 Level = 2;
  if (has_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->level(), target);
  }

  // optional uint32 Exp = 3;
  if (has_exp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->exp(), target);
  }

  // optional uint32 AdvLv = 4;
  if (has_advlv()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->advlv(), target);
  }

  // optional uint32 Star = 5;
  if (has_star()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->star(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TWarRidingSingle)
  return target;
}

int TWarRidingSingle::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 Tid = 1;
    if (has_tid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->tid());
    }

    // optional uint32 Level = 2;
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->level());
    }

    // optional uint32 Exp = 3;
    if (has_exp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->exp());
    }

    // optional uint32 AdvLv = 4;
    if (has_advlv()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->advlv());
    }

    // optional uint32 Star = 5;
    if (has_star()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->star());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TWarRidingSingle::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TWarRidingSingle* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TWarRidingSingle*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TWarRidingSingle::MergeFrom(const TWarRidingSingle& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_tid()) {
      set_tid(from.tid());
    }
    if (from.has_level()) {
      set_level(from.level());
    }
    if (from.has_exp()) {
      set_exp(from.exp());
    }
    if (from.has_advlv()) {
      set_advlv(from.advlv());
    }
    if (from.has_star()) {
      set_star(from.star());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TWarRidingSingle::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TWarRidingSingle::CopyFrom(const TWarRidingSingle& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TWarRidingSingle::IsInitialized() const {

  return true;
}

void TWarRidingSingle::Swap(TWarRidingSingle* other) {
  if (other != this) {
    std::swap(tid_, other->tid_);
    std::swap(level_, other->level_);
    std::swap(exp_, other->exp_);
    std::swap(advlv_, other->advlv_);
    std::swap(star_, other->star_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TWarRidingSingle::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TWarRidingSingle_descriptor_;
  metadata.reflection = TWarRidingSingle_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TOtherWarRidingInfo::kWarRidingArrayFieldNumber;
#endif  // !_MSC_VER

TOtherWarRidingInfo::TOtherWarRidingInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TOtherWarRidingInfo)
}

void TOtherWarRidingInfo::InitAsDefaultInstance() {
}

TOtherWarRidingInfo::TOtherWarRidingInfo(const TOtherWarRidingInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TOtherWarRidingInfo)
}

void TOtherWarRidingInfo::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TOtherWarRidingInfo::~TOtherWarRidingInfo() {
  // @@protoc_insertion_point(destructor:pb.TOtherWarRidingInfo)
  SharedDtor();
}

void TOtherWarRidingInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TOtherWarRidingInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TOtherWarRidingInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TOtherWarRidingInfo_descriptor_;
}

const TOtherWarRidingInfo& TOtherWarRidingInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fWarRiding_2eproto();
  return *default_instance_;
}

TOtherWarRidingInfo* TOtherWarRidingInfo::default_instance_ = NULL;

TOtherWarRidingInfo* TOtherWarRidingInfo::New() const {
  return new TOtherWarRidingInfo;
}

void TOtherWarRidingInfo::Clear() {
  warridingarray_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TOtherWarRidingInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TOtherWarRidingInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .pb.TWarRidingSingle WarRidingArray = 1;
      case 1: {
        if (tag == 10) {
         parse_WarRidingArray:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_warridingarray()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_WarRidingArray;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TOtherWarRidingInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TOtherWarRidingInfo)
  return false;
#undef DO_
}

void TOtherWarRidingInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TOtherWarRidingInfo)
  // repeated .pb.TWarRidingSingle WarRidingArray = 1;
  for (int i = 0; i < this->warridingarray_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->warridingarray(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TOtherWarRidingInfo)
}

::google::protobuf::uint8* TOtherWarRidingInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TOtherWarRidingInfo)
  // repeated .pb.TWarRidingSingle WarRidingArray = 1;
  for (int i = 0; i < this->warridingarray_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->warridingarray(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TOtherWarRidingInfo)
  return target;
}

int TOtherWarRidingInfo::ByteSize() const {
  int total_size = 0;

  // repeated .pb.TWarRidingSingle WarRidingArray = 1;
  total_size += 1 * this->warridingarray_size();
  for (int i = 0; i < this->warridingarray_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->warridingarray(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TOtherWarRidingInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TOtherWarRidingInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TOtherWarRidingInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TOtherWarRidingInfo::MergeFrom(const TOtherWarRidingInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  warridingarray_.MergeFrom(from.warridingarray_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TOtherWarRidingInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TOtherWarRidingInfo::CopyFrom(const TOtherWarRidingInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TOtherWarRidingInfo::IsInitialized() const {

  return true;
}

void TOtherWarRidingInfo::Swap(TOtherWarRidingInfo* other) {
  if (other != this) {
    warridingarray_.Swap(&other->warridingarray_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TOtherWarRidingInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TOtherWarRidingInfo_descriptor_;
  metadata.reflection = TOtherWarRidingInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TWarRidingGetInfoRsp::kWarRidingArrayFieldNumber;
#endif  // !_MSC_VER

TWarRidingGetInfoRsp::TWarRidingGetInfoRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TWarRidingGetInfoRsp)
}

void TWarRidingGetInfoRsp::InitAsDefaultInstance() {
}

TWarRidingGetInfoRsp::TWarRidingGetInfoRsp(const TWarRidingGetInfoRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TWarRidingGetInfoRsp)
}

void TWarRidingGetInfoRsp::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TWarRidingGetInfoRsp::~TWarRidingGetInfoRsp() {
  // @@protoc_insertion_point(destructor:pb.TWarRidingGetInfoRsp)
  SharedDtor();
}

void TWarRidingGetInfoRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TWarRidingGetInfoRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TWarRidingGetInfoRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TWarRidingGetInfoRsp_descriptor_;
}

const TWarRidingGetInfoRsp& TWarRidingGetInfoRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fWarRiding_2eproto();
  return *default_instance_;
}

TWarRidingGetInfoRsp* TWarRidingGetInfoRsp::default_instance_ = NULL;

TWarRidingGetInfoRsp* TWarRidingGetInfoRsp::New() const {
  return new TWarRidingGetInfoRsp;
}

void TWarRidingGetInfoRsp::Clear() {
  warridingarray_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TWarRidingGetInfoRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TWarRidingGetInfoRsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .pb.TWarRidingSingle WarRidingArray = 1;
      case 1: {
        if (tag == 10) {
         parse_WarRidingArray:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_warridingarray()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_WarRidingArray;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TWarRidingGetInfoRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TWarRidingGetInfoRsp)
  return false;
#undef DO_
}

void TWarRidingGetInfoRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TWarRidingGetInfoRsp)
  // repeated .pb.TWarRidingSingle WarRidingArray = 1;
  for (int i = 0; i < this->warridingarray_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->warridingarray(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TWarRidingGetInfoRsp)
}

::google::protobuf::uint8* TWarRidingGetInfoRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TWarRidingGetInfoRsp)
  // repeated .pb.TWarRidingSingle WarRidingArray = 1;
  for (int i = 0; i < this->warridingarray_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->warridingarray(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TWarRidingGetInfoRsp)
  return target;
}

int TWarRidingGetInfoRsp::ByteSize() const {
  int total_size = 0;

  // repeated .pb.TWarRidingSingle WarRidingArray = 1;
  total_size += 1 * this->warridingarray_size();
  for (int i = 0; i < this->warridingarray_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->warridingarray(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TWarRidingGetInfoRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TWarRidingGetInfoRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TWarRidingGetInfoRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TWarRidingGetInfoRsp::MergeFrom(const TWarRidingGetInfoRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  warridingarray_.MergeFrom(from.warridingarray_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TWarRidingGetInfoRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TWarRidingGetInfoRsp::CopyFrom(const TWarRidingGetInfoRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TWarRidingGetInfoRsp::IsInitialized() const {

  return true;
}

void TWarRidingGetInfoRsp::Swap(TWarRidingGetInfoRsp* other) {
  if (other != this) {
    warridingarray_.Swap(&other->warridingarray_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TWarRidingGetInfoRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TWarRidingGetInfoRsp_descriptor_;
  metadata.reflection = TWarRidingGetInfoRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TWarRidingCombineWarRidingReq::kTidFieldNumber;
#endif  // !_MSC_VER

TWarRidingCombineWarRidingReq::TWarRidingCombineWarRidingReq()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TWarRidingCombineWarRidingReq)
}

void TWarRidingCombineWarRidingReq::InitAsDefaultInstance() {
}

TWarRidingCombineWarRidingReq::TWarRidingCombineWarRidingReq(const TWarRidingCombineWarRidingReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TWarRidingCombineWarRidingReq)
}

void TWarRidingCombineWarRidingReq::SharedCtor() {
  _cached_size_ = 0;
  tid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TWarRidingCombineWarRidingReq::~TWarRidingCombineWarRidingReq() {
  // @@protoc_insertion_point(destructor:pb.TWarRidingCombineWarRidingReq)
  SharedDtor();
}

void TWarRidingCombineWarRidingReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TWarRidingCombineWarRidingReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TWarRidingCombineWarRidingReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TWarRidingCombineWarRidingReq_descriptor_;
}

const TWarRidingCombineWarRidingReq& TWarRidingCombineWarRidingReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fWarRiding_2eproto();
  return *default_instance_;
}

TWarRidingCombineWarRidingReq* TWarRidingCombineWarRidingReq::default_instance_ = NULL;

TWarRidingCombineWarRidingReq* TWarRidingCombineWarRidingReq::New() const {
  return new TWarRidingCombineWarRidingReq;
}

void TWarRidingCombineWarRidingReq::Clear() {
  tid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TWarRidingCombineWarRidingReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TWarRidingCombineWarRidingReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 Tid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &tid_)));
          set_has_tid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TWarRidingCombineWarRidingReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TWarRidingCombineWarRidingReq)
  return false;
#undef DO_
}

void TWarRidingCombineWarRidingReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TWarRidingCombineWarRidingReq)
  // optional uint32 Tid = 1;
  if (has_tid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->tid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TWarRidingCombineWarRidingReq)
}

::google::protobuf::uint8* TWarRidingCombineWarRidingReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TWarRidingCombineWarRidingReq)
  // optional uint32 Tid = 1;
  if (has_tid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->tid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TWarRidingCombineWarRidingReq)
  return target;
}

int TWarRidingCombineWarRidingReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 Tid = 1;
    if (has_tid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->tid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TWarRidingCombineWarRidingReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TWarRidingCombineWarRidingReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TWarRidingCombineWarRidingReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TWarRidingCombineWarRidingReq::MergeFrom(const TWarRidingCombineWarRidingReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_tid()) {
      set_tid(from.tid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TWarRidingCombineWarRidingReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TWarRidingCombineWarRidingReq::CopyFrom(const TWarRidingCombineWarRidingReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TWarRidingCombineWarRidingReq::IsInitialized() const {

  return true;
}

void TWarRidingCombineWarRidingReq::Swap(TWarRidingCombineWarRidingReq* other) {
  if (other != this) {
    std::swap(tid_, other->tid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TWarRidingCombineWarRidingReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TWarRidingCombineWarRidingReq_descriptor_;
  metadata.reflection = TWarRidingCombineWarRidingReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TWarRidingLevelUpReq::kTidFieldNumber;
const int TWarRidingLevelUpReq::kLevelUpItemArrayFieldNumber;
#endif  // !_MSC_VER

TWarRidingLevelUpReq::TWarRidingLevelUpReq()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TWarRidingLevelUpReq)
}

void TWarRidingLevelUpReq::InitAsDefaultInstance() {
}

TWarRidingLevelUpReq::TWarRidingLevelUpReq(const TWarRidingLevelUpReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TWarRidingLevelUpReq)
}

void TWarRidingLevelUpReq::SharedCtor() {
  _cached_size_ = 0;
  tid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TWarRidingLevelUpReq::~TWarRidingLevelUpReq() {
  // @@protoc_insertion_point(destructor:pb.TWarRidingLevelUpReq)
  SharedDtor();
}

void TWarRidingLevelUpReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TWarRidingLevelUpReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TWarRidingLevelUpReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TWarRidingLevelUpReq_descriptor_;
}

const TWarRidingLevelUpReq& TWarRidingLevelUpReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fWarRiding_2eproto();
  return *default_instance_;
}

TWarRidingLevelUpReq* TWarRidingLevelUpReq::default_instance_ = NULL;

TWarRidingLevelUpReq* TWarRidingLevelUpReq::New() const {
  return new TWarRidingLevelUpReq;
}

void TWarRidingLevelUpReq::Clear() {
  tid_ = 0u;
  levelupitemarray_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TWarRidingLevelUpReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TWarRidingLevelUpReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 Tid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &tid_)));
          set_has_tid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_LevelUpItemArray;
        break;
      }

      // repeated .pb.TSimpleItem LevelUpItemArray = 2;
      case 2: {
        if (tag == 18) {
         parse_LevelUpItemArray:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_levelupitemarray()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_LevelUpItemArray;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TWarRidingLevelUpReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TWarRidingLevelUpReq)
  return false;
#undef DO_
}

void TWarRidingLevelUpReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TWarRidingLevelUpReq)
  // optional uint32 Tid = 1;
  if (has_tid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->tid(), output);
  }

  // repeated .pb.TSimpleItem LevelUpItemArray = 2;
  for (int i = 0; i < this->levelupitemarray_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->levelupitemarray(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TWarRidingLevelUpReq)
}

::google::protobuf::uint8* TWarRidingLevelUpReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TWarRidingLevelUpReq)
  // optional uint32 Tid = 1;
  if (has_tid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->tid(), target);
  }

  // repeated .pb.TSimpleItem LevelUpItemArray = 2;
  for (int i = 0; i < this->levelupitemarray_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->levelupitemarray(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TWarRidingLevelUpReq)
  return target;
}

int TWarRidingLevelUpReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 Tid = 1;
    if (has_tid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->tid());
    }

  }
  // repeated .pb.TSimpleItem LevelUpItemArray = 2;
  total_size += 1 * this->levelupitemarray_size();
  for (int i = 0; i < this->levelupitemarray_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->levelupitemarray(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TWarRidingLevelUpReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TWarRidingLevelUpReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TWarRidingLevelUpReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TWarRidingLevelUpReq::MergeFrom(const TWarRidingLevelUpReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  levelupitemarray_.MergeFrom(from.levelupitemarray_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_tid()) {
      set_tid(from.tid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TWarRidingLevelUpReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TWarRidingLevelUpReq::CopyFrom(const TWarRidingLevelUpReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TWarRidingLevelUpReq::IsInitialized() const {

  return true;
}

void TWarRidingLevelUpReq::Swap(TWarRidingLevelUpReq* other) {
  if (other != this) {
    std::swap(tid_, other->tid_);
    levelupitemarray_.Swap(&other->levelupitemarray_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TWarRidingLevelUpReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TWarRidingLevelUpReq_descriptor_;
  metadata.reflection = TWarRidingLevelUpReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TWarRidingStarUpReq::kTidFieldNumber;
#endif  // !_MSC_VER

TWarRidingStarUpReq::TWarRidingStarUpReq()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TWarRidingStarUpReq)
}

void TWarRidingStarUpReq::InitAsDefaultInstance() {
}

TWarRidingStarUpReq::TWarRidingStarUpReq(const TWarRidingStarUpReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TWarRidingStarUpReq)
}

void TWarRidingStarUpReq::SharedCtor() {
  _cached_size_ = 0;
  tid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TWarRidingStarUpReq::~TWarRidingStarUpReq() {
  // @@protoc_insertion_point(destructor:pb.TWarRidingStarUpReq)
  SharedDtor();
}

void TWarRidingStarUpReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TWarRidingStarUpReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TWarRidingStarUpReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TWarRidingStarUpReq_descriptor_;
}

const TWarRidingStarUpReq& TWarRidingStarUpReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fWarRiding_2eproto();
  return *default_instance_;
}

TWarRidingStarUpReq* TWarRidingStarUpReq::default_instance_ = NULL;

TWarRidingStarUpReq* TWarRidingStarUpReq::New() const {
  return new TWarRidingStarUpReq;
}

void TWarRidingStarUpReq::Clear() {
  tid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TWarRidingStarUpReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TWarRidingStarUpReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 Tid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &tid_)));
          set_has_tid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TWarRidingStarUpReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TWarRidingStarUpReq)
  return false;
#undef DO_
}

void TWarRidingStarUpReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TWarRidingStarUpReq)
  // optional uint32 Tid = 1;
  if (has_tid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->tid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TWarRidingStarUpReq)
}

::google::protobuf::uint8* TWarRidingStarUpReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TWarRidingStarUpReq)
  // optional uint32 Tid = 1;
  if (has_tid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->tid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TWarRidingStarUpReq)
  return target;
}

int TWarRidingStarUpReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 Tid = 1;
    if (has_tid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->tid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TWarRidingStarUpReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TWarRidingStarUpReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TWarRidingStarUpReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TWarRidingStarUpReq::MergeFrom(const TWarRidingStarUpReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_tid()) {
      set_tid(from.tid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TWarRidingStarUpReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TWarRidingStarUpReq::CopyFrom(const TWarRidingStarUpReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TWarRidingStarUpReq::IsInitialized() const {

  return true;
}

void TWarRidingStarUpReq::Swap(TWarRidingStarUpReq* other) {
  if (other != this) {
    std::swap(tid_, other->tid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TWarRidingStarUpReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TWarRidingStarUpReq_descriptor_;
  metadata.reflection = TWarRidingStarUpReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TWarRidingAdvanceReq::kTidFieldNumber;
const int TWarRidingAdvanceReq::kUpNumFieldNumber;
#endif  // !_MSC_VER

TWarRidingAdvanceReq::TWarRidingAdvanceReq()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TWarRidingAdvanceReq)
}

void TWarRidingAdvanceReq::InitAsDefaultInstance() {
}

TWarRidingAdvanceReq::TWarRidingAdvanceReq(const TWarRidingAdvanceReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TWarRidingAdvanceReq)
}

void TWarRidingAdvanceReq::SharedCtor() {
  _cached_size_ = 0;
  tid_ = 0u;
  upnum_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TWarRidingAdvanceReq::~TWarRidingAdvanceReq() {
  // @@protoc_insertion_point(destructor:pb.TWarRidingAdvanceReq)
  SharedDtor();
}

void TWarRidingAdvanceReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TWarRidingAdvanceReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TWarRidingAdvanceReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TWarRidingAdvanceReq_descriptor_;
}

const TWarRidingAdvanceReq& TWarRidingAdvanceReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fWarRiding_2eproto();
  return *default_instance_;
}

TWarRidingAdvanceReq* TWarRidingAdvanceReq::default_instance_ = NULL;

TWarRidingAdvanceReq* TWarRidingAdvanceReq::New() const {
  return new TWarRidingAdvanceReq;
}

void TWarRidingAdvanceReq::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<TWarRidingAdvanceReq*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(tid_, upnum_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TWarRidingAdvanceReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TWarRidingAdvanceReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 Tid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &tid_)));
          set_has_tid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_UpNum;
        break;
      }

      // optional uint32 UpNum = 2;
      case 2: {
        if (tag == 16) {
         parse_UpNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &upnum_)));
          set_has_upnum();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TWarRidingAdvanceReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TWarRidingAdvanceReq)
  return false;
#undef DO_
}

void TWarRidingAdvanceReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TWarRidingAdvanceReq)
  // optional uint32 Tid = 1;
  if (has_tid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->tid(), output);
  }

  // optional uint32 UpNum = 2;
  if (has_upnum()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->upnum(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TWarRidingAdvanceReq)
}

::google::protobuf::uint8* TWarRidingAdvanceReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TWarRidingAdvanceReq)
  // optional uint32 Tid = 1;
  if (has_tid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->tid(), target);
  }

  // optional uint32 UpNum = 2;
  if (has_upnum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->upnum(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TWarRidingAdvanceReq)
  return target;
}

int TWarRidingAdvanceReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 Tid = 1;
    if (has_tid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->tid());
    }

    // optional uint32 UpNum = 2;
    if (has_upnum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->upnum());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TWarRidingAdvanceReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TWarRidingAdvanceReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TWarRidingAdvanceReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TWarRidingAdvanceReq::MergeFrom(const TWarRidingAdvanceReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_tid()) {
      set_tid(from.tid());
    }
    if (from.has_upnum()) {
      set_upnum(from.upnum());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TWarRidingAdvanceReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TWarRidingAdvanceReq::CopyFrom(const TWarRidingAdvanceReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TWarRidingAdvanceReq::IsInitialized() const {

  return true;
}

void TWarRidingAdvanceReq::Swap(TWarRidingAdvanceReq* other) {
  if (other != this) {
    std::swap(tid_, other->tid_);
    std::swap(upnum_, other->upnum_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TWarRidingAdvanceReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TWarRidingAdvanceReq_descriptor_;
  metadata.reflection = TWarRidingAdvanceReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TNewWarRidingNotify::kWarRidingArrayFieldNumber;
#endif  // !_MSC_VER

TNewWarRidingNotify::TNewWarRidingNotify()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TNewWarRidingNotify)
}

void TNewWarRidingNotify::InitAsDefaultInstance() {
}

TNewWarRidingNotify::TNewWarRidingNotify(const TNewWarRidingNotify& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TNewWarRidingNotify)
}

void TNewWarRidingNotify::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TNewWarRidingNotify::~TNewWarRidingNotify() {
  // @@protoc_insertion_point(destructor:pb.TNewWarRidingNotify)
  SharedDtor();
}

void TNewWarRidingNotify::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TNewWarRidingNotify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TNewWarRidingNotify::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TNewWarRidingNotify_descriptor_;
}

const TNewWarRidingNotify& TNewWarRidingNotify::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fWarRiding_2eproto();
  return *default_instance_;
}

TNewWarRidingNotify* TNewWarRidingNotify::default_instance_ = NULL;

TNewWarRidingNotify* TNewWarRidingNotify::New() const {
  return new TNewWarRidingNotify;
}

void TNewWarRidingNotify::Clear() {
  warridingarray_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TNewWarRidingNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TNewWarRidingNotify)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .pb.TWarRidingSingle WarRidingArray = 1;
      case 1: {
        if (tag == 10) {
         parse_WarRidingArray:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_warridingarray()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_WarRidingArray;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TNewWarRidingNotify)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TNewWarRidingNotify)
  return false;
#undef DO_
}

void TNewWarRidingNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TNewWarRidingNotify)
  // repeated .pb.TWarRidingSingle WarRidingArray = 1;
  for (int i = 0; i < this->warridingarray_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->warridingarray(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TNewWarRidingNotify)
}

::google::protobuf::uint8* TNewWarRidingNotify::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TNewWarRidingNotify)
  // repeated .pb.TWarRidingSingle WarRidingArray = 1;
  for (int i = 0; i < this->warridingarray_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->warridingarray(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TNewWarRidingNotify)
  return target;
}

int TNewWarRidingNotify::ByteSize() const {
  int total_size = 0;

  // repeated .pb.TWarRidingSingle WarRidingArray = 1;
  total_size += 1 * this->warridingarray_size();
  for (int i = 0; i < this->warridingarray_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->warridingarray(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TNewWarRidingNotify::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TNewWarRidingNotify* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TNewWarRidingNotify*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TNewWarRidingNotify::MergeFrom(const TNewWarRidingNotify& from) {
  GOOGLE_CHECK_NE(&from, this);
  warridingarray_.MergeFrom(from.warridingarray_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TNewWarRidingNotify::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TNewWarRidingNotify::CopyFrom(const TNewWarRidingNotify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TNewWarRidingNotify::IsInitialized() const {

  return true;
}

void TNewWarRidingNotify::Swap(TNewWarRidingNotify* other) {
  if (other != this) {
    warridingarray_.Swap(&other->warridingarray_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TNewWarRidingNotify::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TNewWarRidingNotify_descriptor_;
  metadata.reflection = TNewWarRidingNotify_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace pb

// @@protoc_insertion_point(global_scope)
