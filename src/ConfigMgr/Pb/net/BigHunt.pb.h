// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: net/BigHunt.proto

#ifndef PROTOBUF_net_2fBigHunt_2eproto__INCLUDED
#define PROTOBUF_net_2fBigHunt_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "net/CommonReward.pb.h"
#include "net/User.pb.h"
#include "net/Battle.pb.h"
#include "net/ArenaHighOrder.pb.h"
#include "net/Alliance.pb.h"
// @@protoc_insertion_point(includes)

namespace pb {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_net_2fBigHunt_2eproto();
void protobuf_AssignDesc_net_2fBigHunt_2eproto();
void protobuf_ShutdownFile_net_2fBigHunt_2eproto();

class TBigHuntDimensionInfo;
class TBigHuntSelfDynamicInfo;
class TBigHuntMapDynamicInfo;
class TBigHuntBossHpInfo;
class TBigHuntBossInfo;
class TBigHuntMonsterInfo;
class TBigHuntHidPosInfo;
class TBigHuntFormationInfo;
class TBigHuntEnterRsp;
class TBigHuntGetUserInfoRsp;
class TBigHuntSetAtkFormationReq;
class TBigHuntGetAtkFormationRsp;
class TBigHuntGetBattleArgsReq;
class TBigHuntGetBattleArgsRsp;
class TBigHuntReportBattleNormaMonsterReq;
class TBigHuntReportBattleEliteMonsterReq;
class TBigHuntReportBattleStakeReq;
class TBigHuntReportBattleMonsterRsp;
class TBigHuntReportBattleBossReq;
class TBigHuntReportBattleBossRsp;
class TBigHuntGetSelfDynamicInfoRsp;
class TBigHuntReceiveAllianceCoinRewardReq;
class TBigHuntReceiveAllianceCoinRewardRsp;
class TBigHuntBuyChallengeNumReq;
class TBigHuntUpgradeDimensionReq;
class TBigHuntAllianceCoinRankList;
class TBigHuntAllianceCoinListRankReq;
class TBigHuntAllianceCoinListRankRsp;
class TBigHuntBossSelfDamageRankList;
class TBigHuntGetBossSelfDamageRankListReq;
class TBigHuntGetBossSelfDamageRankListRsp;
class TBigHuntGetSelfCoinRankList;
class TBigHuntGetSelfCoinRankListReq;
class TBigHuntGetSelfCoinRankListRsp;
class TBigHuntCancelSuppressReq;
class TBigHuntMonsterBeKilledInfo;
class TBigHuntMonsterBeKilledNotify;
class TBigHuntDynamicNotify;
class TBigHuntUserDimensionNotify;
class TBigHuntCancelSuppressNotify;
class TBigHuntUserDataChangeNotify;

enum EBigHuntDynamicType {
  BIGHUNT_ATKMONSTER = 101,
  BIGHUNT_MAPCHANGE = 102,
  BIGHUNT_CANCELSUPPRESS = 103,
  BIGHUNT_JOINTSUPPRESSION = 104,
  BIGHUNT_ATKFAIL = 105,
  BIGHUNT_ALREADYDEAD = 106
};
bool EBigHuntDynamicType_IsValid(int value);
const EBigHuntDynamicType EBigHuntDynamicType_MIN = BIGHUNT_ATKMONSTER;
const EBigHuntDynamicType EBigHuntDynamicType_MAX = BIGHUNT_ALREADYDEAD;
const int EBigHuntDynamicType_ARRAYSIZE = EBigHuntDynamicType_MAX + 1;

const ::google::protobuf::EnumDescriptor* EBigHuntDynamicType_descriptor();
inline const ::std::string& EBigHuntDynamicType_Name(EBigHuntDynamicType value) {
  return ::google::protobuf::internal::NameOfEnum(
    EBigHuntDynamicType_descriptor(), value);
}
inline bool EBigHuntDynamicType_Parse(
    const ::std::string& name, EBigHuntDynamicType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<EBigHuntDynamicType>(
    EBigHuntDynamicType_descriptor(), name, value);
}
enum EBigHuntSuccessType {
  BIGHUNT_BATTLEVALID = 201,
  BIGHUNT_BATTLEINVALID = 202
};
bool EBigHuntSuccessType_IsValid(int value);
const EBigHuntSuccessType EBigHuntSuccessType_MIN = BIGHUNT_BATTLEVALID;
const EBigHuntSuccessType EBigHuntSuccessType_MAX = BIGHUNT_BATTLEINVALID;
const int EBigHuntSuccessType_ARRAYSIZE = EBigHuntSuccessType_MAX + 1;

const ::google::protobuf::EnumDescriptor* EBigHuntSuccessType_descriptor();
inline const ::std::string& EBigHuntSuccessType_Name(EBigHuntSuccessType value) {
  return ::google::protobuf::internal::NameOfEnum(
    EBigHuntSuccessType_descriptor(), value);
}
inline bool EBigHuntSuccessType_Parse(
    const ::std::string& name, EBigHuntSuccessType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<EBigHuntSuccessType>(
    EBigHuntSuccessType_descriptor(), name, value);
}
enum EBigHuntKillType {
  BIGHUNT_NORMALKILL = 301,
  BIGHUNT_ELITEKILL = 302,
  BIGHUNT_STAKEKILL = 303
};
bool EBigHuntKillType_IsValid(int value);
const EBigHuntKillType EBigHuntKillType_MIN = BIGHUNT_NORMALKILL;
const EBigHuntKillType EBigHuntKillType_MAX = BIGHUNT_STAKEKILL;
const int EBigHuntKillType_ARRAYSIZE = EBigHuntKillType_MAX + 1;

const ::google::protobuf::EnumDescriptor* EBigHuntKillType_descriptor();
inline const ::std::string& EBigHuntKillType_Name(EBigHuntKillType value) {
  return ::google::protobuf::internal::NameOfEnum(
    EBigHuntKillType_descriptor(), value);
}
inline bool EBigHuntKillType_Parse(
    const ::std::string& name, EBigHuntKillType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<EBigHuntKillType>(
    EBigHuntKillType_descriptor(), name, value);
}
// ===================================================================

/*FOR2LUA
<Record>
	<name>TBigHuntDimensionInfo</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/BigHunt.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TBigHuntDimensionInfo : public ::google::protobuf::Message {
 public:
  TBigHuntDimensionInfo();
  virtual ~TBigHuntDimensionInfo();

  TBigHuntDimensionInfo(const TBigHuntDimensionInfo& from);

  inline TBigHuntDimensionInfo& operator=(const TBigHuntDimensionInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TBigHuntDimensionInfo& default_instance();

  void Swap(TBigHuntDimensionInfo* other);

  // implements Message ----------------------------------------------

  TBigHuntDimensionInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TBigHuntDimensionInfo& from);
  void MergeFrom(const TBigHuntDimensionInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 DimensionId = 1;
  inline bool has_dimensionid() const;
  inline void clear_dimensionid();
  static const int kDimensionIdFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TBigHuntDimensionInfo</name>
  	<Function>
  		<name>dimensionid</name>
  		<replaceName>DimensionId</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_dimensionid</name>
  		<replaceName>DimensionId</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_dimensionid</name>
  		<replaceName>DimensionId</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 dimensionid() const;
  inline void set_dimensionid(::google::protobuf::uint32 value);

  // optional uint32 Level = 2;
  inline bool has_level() const;
  inline void clear_level();
  static const int kLevelFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TBigHuntDimensionInfo</name>
  	<Function>
  		<name>level</name>
  		<replaceName>Level</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_level</name>
  		<replaceName>Level</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_level</name>
  		<replaceName>Level</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 level() const;
  inline void set_level(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:pb.TBigHuntDimensionInfo)
 private:
  inline void set_has_dimensionid();
  inline void clear_has_dimensionid();
  inline void set_has_level();
  inline void clear_has_level();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 dimensionid_;
  ::google::protobuf::uint32 level_;
  friend void  protobuf_AddDesc_net_2fBigHunt_2eproto();
  friend void protobuf_AssignDesc_net_2fBigHunt_2eproto();
  friend void protobuf_ShutdownFile_net_2fBigHunt_2eproto();

  void InitAsDefaultInstance();
  static TBigHuntDimensionInfo* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TBigHuntSelfDynamicInfo</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/BigHunt.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TBigHuntSelfDynamicInfo : public ::google::protobuf::Message {
 public:
  TBigHuntSelfDynamicInfo();
  virtual ~TBigHuntSelfDynamicInfo();

  TBigHuntSelfDynamicInfo(const TBigHuntSelfDynamicInfo& from);

  inline TBigHuntSelfDynamicInfo& operator=(const TBigHuntSelfDynamicInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TBigHuntSelfDynamicInfo& default_instance();

  void Swap(TBigHuntSelfDynamicInfo* other);

  // implements Message ----------------------------------------------

  TBigHuntSelfDynamicInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TBigHuntSelfDynamicInfo& from);
  void MergeFrom(const TBigHuntSelfDynamicInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .pb.EBigHuntDynamicType DynamicType = 1;
  inline bool has_dynamictype() const;
  inline void clear_dynamictype();
  static const int kDynamicTypeFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TBigHuntSelfDynamicInfo</name>
  	<Function>
  		<name>dynamictype</name>
  		<replaceName>DynamicType</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_dynamictype</name>
  		<replaceName>DynamicType</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_dynamictype</name>
  		<replaceName>DynamicType</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::pb::EBigHuntDynamicType dynamictype() const;
  inline void set_dynamictype(::pb::EBigHuntDynamicType value);

  // optional uint64 RecordTime = 2;
  inline bool has_recordtime() const;
  inline void clear_recordtime();
  static const int kRecordTimeFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TBigHuntSelfDynamicInfo</name>
  	<Function>
  		<name>recordtime</name>
  		<replaceName>RecordTime</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_recordtime</name>
  		<replaceName>RecordTime</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_recordtime</name>
  		<replaceName>RecordTime</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint64 recordtime() const;
  inline void set_recordtime(::google::protobuf::uint64 value);

  // repeated .pb.TCommonReward RewardArr = 3;
  inline int rewardarr_size() const;
  inline void clear_rewardarr();
  static const int kRewardArrFieldNumber = 3;
  /*FOR2LUA
  <Record>
  	<name>TBigHuntSelfDynamicInfo</name>
  	<Function>
  		<name>rewardarr</name>
  		<replaceName>RewardArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_rewardarr</name>
  		<replaceName>RewardArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_rewardarr</name>
  		<replaceName>RewardArr</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_rewardarr</name>
  		<replaceName>RewardArr</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>rewardarr_size</name>
  		<replaceName>RewardArr</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TCommonReward& rewardarr(int index) const;
  inline ::pb::TCommonReward* mutable_rewardarr(int index);
  inline ::pb::TCommonReward* add_rewardarr();
  inline const ::google::protobuf::RepeatedPtrField< ::pb::TCommonReward >&
      rewardarr() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb::TCommonReward >*
      mutable_rewardarr();

  // optional uint64 RecordId = 4;
  inline bool has_recordid() const;
  inline void clear_recordid();
  static const int kRecordIdFieldNumber = 4;
  /*FOR2LUA
  <Record>
  	<name>TBigHuntSelfDynamicInfo</name>
  	<Function>
  		<name>recordid</name>
  		<replaceName>RecordId</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_recordid</name>
  		<replaceName>RecordId</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_recordid</name>
  		<replaceName>RecordId</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint64 recordid() const;
  inline void set_recordid(::google::protobuf::uint64 value);

  // repeated uint32 monsterId = 5;
  inline int monsterid_size() const;
  inline void clear_monsterid();
  static const int kMonsterIdFieldNumber = 5;
  /*FOR2LUA
  <Record>
  	<name>TBigHuntSelfDynamicInfo</name>
  	<Function>
  		<name>monsterid</name>
  		<replaceName>monsterId</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_monsterid</name>
  		<replaceName>monsterId</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_monsterid</name>
  		<replaceName>monsterId</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_monsterid</name>
  		<replaceName>monsterId</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>monsterid_size</name>
  		<replaceName>monsterId</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 monsterid(int index) const;
  inline void set_monsterid(int index, ::google::protobuf::uint32 value);
  inline void add_monsterid(::google::protobuf::uint32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      monsterid() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_monsterid();

  // repeated string UserName = 6;
  inline int username_size() const;
  inline void clear_username();
  static const int kUserNameFieldNumber = 6;
  /*FOR2LUA
  <Record>
  	<name>TBigHuntSelfDynamicInfo</name>
  	<Function>
  		<name>username</name>
  		<replaceName>UserName</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_username</name>
  		<replaceName>UserName</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_username</name>
  		<replaceName>UserName</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_username</name>
  		<replaceName>UserName</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>username_size</name>
  		<replaceName>UserName</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::std::string& username(int index) const;
  inline ::std::string* mutable_username(int index);
  inline void set_username(int index, const ::std::string& value);
  inline void set_username(int index, const char* value);
  inline void set_username(int index, const char* value, size_t size);
  inline ::std::string* add_username();
  inline void add_username(const ::std::string& value);
  inline void add_username(const char* value);
  inline void add_username(const char* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& username() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_username();

  // optional uint32 nextMapId = 7;
  inline bool has_nextmapid() const;
  inline void clear_nextmapid();
  static const int kNextMapIdFieldNumber = 7;
  /*FOR2LUA
  <Record>
  	<name>TBigHuntSelfDynamicInfo</name>
  	<Function>
  		<name>nextmapid</name>
  		<replaceName>nextMapId</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_nextmapid</name>
  		<replaceName>nextMapId</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_nextmapid</name>
  		<replaceName>nextMapId</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 nextmapid() const;
  inline void set_nextmapid(::google::protobuf::uint32 value);

  // optional uint64 BossDamage = 8;
  inline bool has_bossdamage() const;
  inline void clear_bossdamage();
  static const int kBossDamageFieldNumber = 8;
  /*FOR2LUA
  <Record>
  	<name>TBigHuntSelfDynamicInfo</name>
  	<Function>
  		<name>bossdamage</name>
  		<replaceName>BossDamage</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_bossdamage</name>
  		<replaceName>BossDamage</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_bossdamage</name>
  		<replaceName>BossDamage</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint64 bossdamage() const;
  inline void set_bossdamage(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:pb.TBigHuntSelfDynamicInfo)
 private:
  inline void set_has_dynamictype();
  inline void clear_has_dynamictype();
  inline void set_has_recordtime();
  inline void clear_has_recordtime();
  inline void set_has_recordid();
  inline void clear_has_recordid();
  inline void set_has_nextmapid();
  inline void clear_has_nextmapid();
  inline void set_has_bossdamage();
  inline void clear_has_bossdamage();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint64 recordtime_;
  ::google::protobuf::RepeatedPtrField< ::pb::TCommonReward > rewardarr_;
  ::google::protobuf::uint64 recordid_;
  int dynamictype_;
  ::google::protobuf::uint32 nextmapid_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > monsterid_;
  ::google::protobuf::RepeatedPtrField< ::std::string> username_;
  ::google::protobuf::uint64 bossdamage_;
  friend void  protobuf_AddDesc_net_2fBigHunt_2eproto();
  friend void protobuf_AssignDesc_net_2fBigHunt_2eproto();
  friend void protobuf_ShutdownFile_net_2fBigHunt_2eproto();

  void InitAsDefaultInstance();
  static TBigHuntSelfDynamicInfo* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TBigHuntMapDynamicInfo</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/BigHunt.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TBigHuntMapDynamicInfo : public ::google::protobuf::Message {
 public:
  TBigHuntMapDynamicInfo();
  virtual ~TBigHuntMapDynamicInfo();

  TBigHuntMapDynamicInfo(const TBigHuntMapDynamicInfo& from);

  inline TBigHuntMapDynamicInfo& operator=(const TBigHuntMapDynamicInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TBigHuntMapDynamicInfo& default_instance();

  void Swap(TBigHuntMapDynamicInfo* other);

  // implements Message ----------------------------------------------

  TBigHuntMapDynamicInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TBigHuntMapDynamicInfo& from);
  void MergeFrom(const TBigHuntMapDynamicInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .pb.EBigHuntDynamicType DynamicType = 1;
  inline bool has_dynamictype() const;
  inline void clear_dynamictype();
  static const int kDynamicTypeFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TBigHuntMapDynamicInfo</name>
  	<Function>
  		<name>dynamictype</name>
  		<replaceName>DynamicType</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_dynamictype</name>
  		<replaceName>DynamicType</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_dynamictype</name>
  		<replaceName>DynamicType</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::pb::EBigHuntDynamicType dynamictype() const;
  inline void set_dynamictype(::pb::EBigHuntDynamicType value);

  // optional uint64 DynamicTime = 2;
  inline bool has_dynamictime() const;
  inline void clear_dynamictime();
  static const int kDynamicTimeFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TBigHuntMapDynamicInfo</name>
  	<Function>
  		<name>dynamictime</name>
  		<replaceName>DynamicTime</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_dynamictime</name>
  		<replaceName>DynamicTime</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_dynamictime</name>
  		<replaceName>DynamicTime</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint64 dynamictime() const;
  inline void set_dynamictime(::google::protobuf::uint64 value);

  // repeated .pb.TCommonReward RewardArr = 3;
  inline int rewardarr_size() const;
  inline void clear_rewardarr();
  static const int kRewardArrFieldNumber = 3;
  /*FOR2LUA
  <Record>
  	<name>TBigHuntMapDynamicInfo</name>
  	<Function>
  		<name>rewardarr</name>
  		<replaceName>RewardArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_rewardarr</name>
  		<replaceName>RewardArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_rewardarr</name>
  		<replaceName>RewardArr</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_rewardarr</name>
  		<replaceName>RewardArr</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>rewardarr_size</name>
  		<replaceName>RewardArr</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TCommonReward& rewardarr(int index) const;
  inline ::pb::TCommonReward* mutable_rewardarr(int index);
  inline ::pb::TCommonReward* add_rewardarr();
  inline const ::google::protobuf::RepeatedPtrField< ::pb::TCommonReward >&
      rewardarr() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb::TCommonReward >*
      mutable_rewardarr();

  // optional uint64 RecordId = 4;
  inline bool has_recordid() const;
  inline void clear_recordid();
  static const int kRecordIdFieldNumber = 4;
  /*FOR2LUA
  <Record>
  	<name>TBigHuntMapDynamicInfo</name>
  	<Function>
  		<name>recordid</name>
  		<replaceName>RecordId</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_recordid</name>
  		<replaceName>RecordId</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_recordid</name>
  		<replaceName>RecordId</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint64 recordid() const;
  inline void set_recordid(::google::protobuf::uint64 value);

  // repeated .pb.TUserSimpleInfo UserInfo = 5;
  inline int userinfo_size() const;
  inline void clear_userinfo();
  static const int kUserInfoFieldNumber = 5;
  /*FOR2LUA
  <Record>
  	<name>TBigHuntMapDynamicInfo</name>
  	<Function>
  		<name>userinfo</name>
  		<replaceName>UserInfo</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_userinfo</name>
  		<replaceName>UserInfo</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_userinfo</name>
  		<replaceName>UserInfo</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_userinfo</name>
  		<replaceName>UserInfo</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>userinfo_size</name>
  		<replaceName>UserInfo</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TUserSimpleInfo& userinfo(int index) const;
  inline ::pb::TUserSimpleInfo* mutable_userinfo(int index);
  inline ::pb::TUserSimpleInfo* add_userinfo();
  inline const ::google::protobuf::RepeatedPtrField< ::pb::TUserSimpleInfo >&
      userinfo() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb::TUserSimpleInfo >*
      mutable_userinfo();

  // repeated uint32 monsterId = 6;
  inline int monsterid_size() const;
  inline void clear_monsterid();
  static const int kMonsterIdFieldNumber = 6;
  /*FOR2LUA
  <Record>
  	<name>TBigHuntMapDynamicInfo</name>
  	<Function>
  		<name>monsterid</name>
  		<replaceName>monsterId</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_monsterid</name>
  		<replaceName>monsterId</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_monsterid</name>
  		<replaceName>monsterId</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_monsterid</name>
  		<replaceName>monsterId</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>monsterid_size</name>
  		<replaceName>monsterId</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 monsterid(int index) const;
  inline void set_monsterid(int index, ::google::protobuf::uint32 value);
  inline void add_monsterid(::google::protobuf::uint32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      monsterid() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_monsterid();

  // optional uint32 nextMapId = 7;
  inline bool has_nextmapid() const;
  inline void clear_nextmapid();
  static const int kNextMapIdFieldNumber = 7;
  /*FOR2LUA
  <Record>
  	<name>TBigHuntMapDynamicInfo</name>
  	<Function>
  		<name>nextmapid</name>
  		<replaceName>nextMapId</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_nextmapid</name>
  		<replaceName>nextMapId</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_nextmapid</name>
  		<replaceName>nextMapId</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 nextmapid() const;
  inline void set_nextmapid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:pb.TBigHuntMapDynamicInfo)
 private:
  inline void set_has_dynamictype();
  inline void clear_has_dynamictype();
  inline void set_has_dynamictime();
  inline void clear_has_dynamictime();
  inline void set_has_recordid();
  inline void clear_has_recordid();
  inline void set_has_nextmapid();
  inline void clear_has_nextmapid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint64 dynamictime_;
  ::google::protobuf::RepeatedPtrField< ::pb::TCommonReward > rewardarr_;
  ::google::protobuf::uint64 recordid_;
  int dynamictype_;
  ::google::protobuf::uint32 nextmapid_;
  ::google::protobuf::RepeatedPtrField< ::pb::TUserSimpleInfo > userinfo_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > monsterid_;
  friend void  protobuf_AddDesc_net_2fBigHunt_2eproto();
  friend void protobuf_AssignDesc_net_2fBigHunt_2eproto();
  friend void protobuf_ShutdownFile_net_2fBigHunt_2eproto();

  void InitAsDefaultInstance();
  static TBigHuntMapDynamicInfo* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TBigHuntBossHpInfo</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/BigHunt.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TBigHuntBossHpInfo : public ::google::protobuf::Message {
 public:
  TBigHuntBossHpInfo();
  virtual ~TBigHuntBossHpInfo();

  TBigHuntBossHpInfo(const TBigHuntBossHpInfo& from);

  inline TBigHuntBossHpInfo& operator=(const TBigHuntBossHpInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TBigHuntBossHpInfo& default_instance();

  void Swap(TBigHuntBossHpInfo* other);

  // implements Message ----------------------------------------------

  TBigHuntBossHpInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TBigHuntBossHpInfo& from);
  void MergeFrom(const TBigHuntBossHpInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 hid = 1;
  inline bool has_hid() const;
  inline void clear_hid();
  static const int kHidFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TBigHuntBossHpInfo</name>
  	<Function>
  		<name>hid</name>
  		<replaceName>hid</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_hid</name>
  		<replaceName>hid</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_hid</name>
  		<replaceName>hid</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 hid() const;
  inline void set_hid(::google::protobuf::uint32 value);

  // optional uint64 HpPercentage = 2;
  inline bool has_hppercentage() const;
  inline void clear_hppercentage();
  static const int kHpPercentageFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TBigHuntBossHpInfo</name>
  	<Function>
  		<name>hppercentage</name>
  		<replaceName>HpPercentage</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_hppercentage</name>
  		<replaceName>HpPercentage</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_hppercentage</name>
  		<replaceName>HpPercentage</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint64 hppercentage() const;
  inline void set_hppercentage(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:pb.TBigHuntBossHpInfo)
 private:
  inline void set_has_hid();
  inline void clear_has_hid();
  inline void set_has_hppercentage();
  inline void clear_has_hppercentage();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint64 hppercentage_;
  ::google::protobuf::uint32 hid_;
  friend void  protobuf_AddDesc_net_2fBigHunt_2eproto();
  friend void protobuf_AssignDesc_net_2fBigHunt_2eproto();
  friend void protobuf_ShutdownFile_net_2fBigHunt_2eproto();

  void InitAsDefaultInstance();
  static TBigHuntBossHpInfo* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TBigHuntBossInfo</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/BigHunt.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TBigHuntBossInfo : public ::google::protobuf::Message {
 public:
  TBigHuntBossInfo();
  virtual ~TBigHuntBossInfo();

  TBigHuntBossInfo(const TBigHuntBossInfo& from);

  inline TBigHuntBossInfo& operator=(const TBigHuntBossInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TBigHuntBossInfo& default_instance();

  void Swap(TBigHuntBossInfo* other);

  // implements Message ----------------------------------------------

  TBigHuntBossInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TBigHuntBossInfo& from);
  void MergeFrom(const TBigHuntBossInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 BossId = 1;
  inline bool has_bossid() const;
  inline void clear_bossid();
  static const int kBossIdFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TBigHuntBossInfo</name>
  	<Function>
  		<name>bossid</name>
  		<replaceName>BossId</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_bossid</name>
  		<replaceName>BossId</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_bossid</name>
  		<replaceName>BossId</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 bossid() const;
  inline void set_bossid(::google::protobuf::uint32 value);

  // optional uint64 HpPercentage = 2;
  inline bool has_hppercentage() const;
  inline void clear_hppercentage();
  static const int kHpPercentageFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TBigHuntBossInfo</name>
  	<Function>
  		<name>hppercentage</name>
  		<replaceName>HpPercentage</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_hppercentage</name>
  		<replaceName>HpPercentage</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_hppercentage</name>
  		<replaceName>HpPercentage</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint64 hppercentage() const;
  inline void set_hppercentage(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:pb.TBigHuntBossInfo)
 private:
  inline void set_has_bossid();
  inline void clear_has_bossid();
  inline void set_has_hppercentage();
  inline void clear_has_hppercentage();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint64 hppercentage_;
  ::google::protobuf::uint32 bossid_;
  friend void  protobuf_AddDesc_net_2fBigHunt_2eproto();
  friend void protobuf_AssignDesc_net_2fBigHunt_2eproto();
  friend void protobuf_ShutdownFile_net_2fBigHunt_2eproto();

  void InitAsDefaultInstance();
  static TBigHuntBossInfo* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TBigHuntMonsterInfo</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/BigHunt.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TBigHuntMonsterInfo : public ::google::protobuf::Message {
 public:
  TBigHuntMonsterInfo();
  virtual ~TBigHuntMonsterInfo();

  TBigHuntMonsterInfo(const TBigHuntMonsterInfo& from);

  inline TBigHuntMonsterInfo& operator=(const TBigHuntMonsterInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TBigHuntMonsterInfo& default_instance();

  void Swap(TBigHuntMonsterInfo* other);

  // implements Message ----------------------------------------------

  TBigHuntMonsterInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TBigHuntMonsterInfo& from);
  void MergeFrom(const TBigHuntMonsterInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 MonsterId = 1;
  inline bool has_monsterid() const;
  inline void clear_monsterid();
  static const int kMonsterIdFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TBigHuntMonsterInfo</name>
  	<Function>
  		<name>monsterid</name>
  		<replaceName>MonsterId</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_monsterid</name>
  		<replaceName>MonsterId</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_monsterid</name>
  		<replaceName>MonsterId</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 monsterid() const;
  inline void set_monsterid(::google::protobuf::uint32 value);

  // optional .pb.TUserSimpleInfo SuppressUserInfo = 2;
  inline bool has_suppressuserinfo() const;
  inline void clear_suppressuserinfo();
  static const int kSuppressUserInfoFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TBigHuntMonsterInfo</name>
  	<Function>
  		<name>suppressuserinfo</name>
  		<replaceName>SuppressUserInfo</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_suppressuserinfo</name>
  		<replaceName>SuppressUserInfo</replaceName>
  		<handler>descripter = pb_set_message_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_allocated_suppressuserinfo</name>
  		<replaceName>SuppressUserInfo</replaceName>
  		<handler>descripter = pb_set_message_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_suppressuserinfo</name>
  		<replaceName>SuppressUserInfo</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TUserSimpleInfo& suppressuserinfo() const;
  inline ::pb::TUserSimpleInfo* mutable_suppressuserinfo();
  inline ::pb::TUserSimpleInfo* release_suppressuserinfo();
  inline void set_allocated_suppressuserinfo(::pb::TUserSimpleInfo* suppressuserinfo);

  // @@protoc_insertion_point(class_scope:pb.TBigHuntMonsterInfo)
 private:
  inline void set_has_monsterid();
  inline void clear_has_monsterid();
  inline void set_has_suppressuserinfo();
  inline void clear_has_suppressuserinfo();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::pb::TUserSimpleInfo* suppressuserinfo_;
  ::google::protobuf::uint32 monsterid_;
  friend void  protobuf_AddDesc_net_2fBigHunt_2eproto();
  friend void protobuf_AssignDesc_net_2fBigHunt_2eproto();
  friend void protobuf_ShutdownFile_net_2fBigHunt_2eproto();

  void InitAsDefaultInstance();
  static TBigHuntMonsterInfo* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TBigHuntHidPosInfo</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/BigHunt.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TBigHuntHidPosInfo : public ::google::protobuf::Message {
 public:
  TBigHuntHidPosInfo();
  virtual ~TBigHuntHidPosInfo();

  TBigHuntHidPosInfo(const TBigHuntHidPosInfo& from);

  inline TBigHuntHidPosInfo& operator=(const TBigHuntHidPosInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TBigHuntHidPosInfo& default_instance();

  void Swap(TBigHuntHidPosInfo* other);

  // implements Message ----------------------------------------------

  TBigHuntHidPosInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TBigHuntHidPosInfo& from);
  void MergeFrom(const TBigHuntHidPosInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 Hid = 1;
  inline bool has_hid() const;
  inline void clear_hid();
  static const int kHidFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TBigHuntHidPosInfo</name>
  	<Function>
  		<name>hid</name>
  		<replaceName>Hid</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_hid</name>
  		<replaceName>Hid</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_hid</name>
  		<replaceName>Hid</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 hid() const;
  inline void set_hid(::google::protobuf::uint32 value);

  // optional uint32 Pos = 2;
  inline bool has_pos() const;
  inline void clear_pos();
  static const int kPosFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TBigHuntHidPosInfo</name>
  	<Function>
  		<name>pos</name>
  		<replaceName>Pos</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_pos</name>
  		<replaceName>Pos</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_pos</name>
  		<replaceName>Pos</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 pos() const;
  inline void set_pos(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:pb.TBigHuntHidPosInfo)
 private:
  inline void set_has_hid();
  inline void clear_has_hid();
  inline void set_has_pos();
  inline void clear_has_pos();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 hid_;
  ::google::protobuf::uint32 pos_;
  friend void  protobuf_AddDesc_net_2fBigHunt_2eproto();
  friend void protobuf_AssignDesc_net_2fBigHunt_2eproto();
  friend void protobuf_ShutdownFile_net_2fBigHunt_2eproto();

  void InitAsDefaultInstance();
  static TBigHuntHidPosInfo* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TBigHuntFormationInfo</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/BigHunt.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TBigHuntFormationInfo : public ::google::protobuf::Message {
 public:
  TBigHuntFormationInfo();
  virtual ~TBigHuntFormationInfo();

  TBigHuntFormationInfo(const TBigHuntFormationInfo& from);

  inline TBigHuntFormationInfo& operator=(const TBigHuntFormationInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TBigHuntFormationInfo& default_instance();

  void Swap(TBigHuntFormationInfo* other);

  // implements Message ----------------------------------------------

  TBigHuntFormationInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TBigHuntFormationInfo& from);
  void MergeFrom(const TBigHuntFormationInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 FormationId = 1;
  inline bool has_formationid() const;
  inline void clear_formationid();
  static const int kFormationIdFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TBigHuntFormationInfo</name>
  	<Function>
  		<name>formationid</name>
  		<replaceName>FormationId</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_formationid</name>
  		<replaceName>FormationId</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_formationid</name>
  		<replaceName>FormationId</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 formationid() const;
  inline void set_formationid(::google::protobuf::uint32 value);

  // repeated .pb.TBigHuntHidPosInfo HidPosArr = 2;
  inline int hidposarr_size() const;
  inline void clear_hidposarr();
  static const int kHidPosArrFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TBigHuntFormationInfo</name>
  	<Function>
  		<name>hidposarr</name>
  		<replaceName>HidPosArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_hidposarr</name>
  		<replaceName>HidPosArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_hidposarr</name>
  		<replaceName>HidPosArr</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_hidposarr</name>
  		<replaceName>HidPosArr</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>hidposarr_size</name>
  		<replaceName>HidPosArr</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TBigHuntHidPosInfo& hidposarr(int index) const;
  inline ::pb::TBigHuntHidPosInfo* mutable_hidposarr(int index);
  inline ::pb::TBigHuntHidPosInfo* add_hidposarr();
  inline const ::google::protobuf::RepeatedPtrField< ::pb::TBigHuntHidPosInfo >&
      hidposarr() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb::TBigHuntHidPosInfo >*
      mutable_hidposarr();

  // @@protoc_insertion_point(class_scope:pb.TBigHuntFormationInfo)
 private:
  inline void set_has_formationid();
  inline void clear_has_formationid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::pb::TBigHuntHidPosInfo > hidposarr_;
  ::google::protobuf::uint32 formationid_;
  friend void  protobuf_AddDesc_net_2fBigHunt_2eproto();
  friend void protobuf_AssignDesc_net_2fBigHunt_2eproto();
  friend void protobuf_ShutdownFile_net_2fBigHunt_2eproto();

  void InitAsDefaultInstance();
  static TBigHuntFormationInfo* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TBigHuntEnterRsp</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/BigHunt.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TBigHuntEnterRsp : public ::google::protobuf::Message {
 public:
  TBigHuntEnterRsp();
  virtual ~TBigHuntEnterRsp();

  TBigHuntEnterRsp(const TBigHuntEnterRsp& from);

  inline TBigHuntEnterRsp& operator=(const TBigHuntEnterRsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TBigHuntEnterRsp& default_instance();

  void Swap(TBigHuntEnterRsp* other);

  // implements Message ----------------------------------------------

  TBigHuntEnterRsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TBigHuntEnterRsp& from);
  void MergeFrom(const TBigHuntEnterRsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .pb.TBigHuntMapDynamicInfo MapDynamicInfoArr = 1;
  inline int mapdynamicinfoarr_size() const;
  inline void clear_mapdynamicinfoarr();
  static const int kMapDynamicInfoArrFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TBigHuntEnterRsp</name>
  	<Function>
  		<name>mapdynamicinfoarr</name>
  		<replaceName>MapDynamicInfoArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_mapdynamicinfoarr</name>
  		<replaceName>MapDynamicInfoArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_mapdynamicinfoarr</name>
  		<replaceName>MapDynamicInfoArr</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_mapdynamicinfoarr</name>
  		<replaceName>MapDynamicInfoArr</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mapdynamicinfoarr_size</name>
  		<replaceName>MapDynamicInfoArr</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TBigHuntMapDynamicInfo& mapdynamicinfoarr(int index) const;
  inline ::pb::TBigHuntMapDynamicInfo* mutable_mapdynamicinfoarr(int index);
  inline ::pb::TBigHuntMapDynamicInfo* add_mapdynamicinfoarr();
  inline const ::google::protobuf::RepeatedPtrField< ::pb::TBigHuntMapDynamicInfo >&
      mapdynamicinfoarr() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb::TBigHuntMapDynamicInfo >*
      mutable_mapdynamicinfoarr();

  // repeated .pb.TBigHuntBossInfo BossInfoArr = 2;
  inline int bossinfoarr_size() const;
  inline void clear_bossinfoarr();
  static const int kBossInfoArrFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TBigHuntEnterRsp</name>
  	<Function>
  		<name>bossinfoarr</name>
  		<replaceName>BossInfoArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_bossinfoarr</name>
  		<replaceName>BossInfoArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_bossinfoarr</name>
  		<replaceName>BossInfoArr</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_bossinfoarr</name>
  		<replaceName>BossInfoArr</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>bossinfoarr_size</name>
  		<replaceName>BossInfoArr</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TBigHuntBossInfo& bossinfoarr(int index) const;
  inline ::pb::TBigHuntBossInfo* mutable_bossinfoarr(int index);
  inline ::pb::TBigHuntBossInfo* add_bossinfoarr();
  inline const ::google::protobuf::RepeatedPtrField< ::pb::TBigHuntBossInfo >&
      bossinfoarr() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb::TBigHuntBossInfo >*
      mutable_bossinfoarr();

  // repeated .pb.TBigHuntMonsterInfo MonsterInfoArr = 3;
  inline int monsterinfoarr_size() const;
  inline void clear_monsterinfoarr();
  static const int kMonsterInfoArrFieldNumber = 3;
  /*FOR2LUA
  <Record>
  	<name>TBigHuntEnterRsp</name>
  	<Function>
  		<name>monsterinfoarr</name>
  		<replaceName>MonsterInfoArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_monsterinfoarr</name>
  		<replaceName>MonsterInfoArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_monsterinfoarr</name>
  		<replaceName>MonsterInfoArr</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_monsterinfoarr</name>
  		<replaceName>MonsterInfoArr</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>monsterinfoarr_size</name>
  		<replaceName>MonsterInfoArr</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TBigHuntMonsterInfo& monsterinfoarr(int index) const;
  inline ::pb::TBigHuntMonsterInfo* mutable_monsterinfoarr(int index);
  inline ::pb::TBigHuntMonsterInfo* add_monsterinfoarr();
  inline const ::google::protobuf::RepeatedPtrField< ::pb::TBigHuntMonsterInfo >&
      monsterinfoarr() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb::TBigHuntMonsterInfo >*
      mutable_monsterinfoarr();

  // repeated .pb.TBigHuntSelfDynamicInfo SelfDynamicInfoArr = 4;
  inline int selfdynamicinfoarr_size() const;
  inline void clear_selfdynamicinfoarr();
  static const int kSelfDynamicInfoArrFieldNumber = 4;
  /*FOR2LUA
  <Record>
  	<name>TBigHuntEnterRsp</name>
  	<Function>
  		<name>selfdynamicinfoarr</name>
  		<replaceName>SelfDynamicInfoArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_selfdynamicinfoarr</name>
  		<replaceName>SelfDynamicInfoArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_selfdynamicinfoarr</name>
  		<replaceName>SelfDynamicInfoArr</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_selfdynamicinfoarr</name>
  		<replaceName>SelfDynamicInfoArr</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>selfdynamicinfoarr_size</name>
  		<replaceName>SelfDynamicInfoArr</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TBigHuntSelfDynamicInfo& selfdynamicinfoarr(int index) const;
  inline ::pb::TBigHuntSelfDynamicInfo* mutable_selfdynamicinfoarr(int index);
  inline ::pb::TBigHuntSelfDynamicInfo* add_selfdynamicinfoarr();
  inline const ::google::protobuf::RepeatedPtrField< ::pb::TBigHuntSelfDynamicInfo >&
      selfdynamicinfoarr() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb::TBigHuntSelfDynamicInfo >*
      mutable_selfdynamicinfoarr();

  // optional uint32 CurMapId = 5;
  inline bool has_curmapid() const;
  inline void clear_curmapid();
  static const int kCurMapIdFieldNumber = 5;
  /*FOR2LUA
  <Record>
  	<name>TBigHuntEnterRsp</name>
  	<Function>
  		<name>curmapid</name>
  		<replaceName>CurMapId</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_curmapid</name>
  		<replaceName>CurMapId</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_curmapid</name>
  		<replaceName>CurMapId</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 curmapid() const;
  inline void set_curmapid(::google::protobuf::uint32 value);

  // optional uint32 FormMapId = 6;
  inline bool has_formmapid() const;
  inline void clear_formmapid();
  static const int kFormMapIdFieldNumber = 6;
  /*FOR2LUA
  <Record>
  	<name>TBigHuntEnterRsp</name>
  	<Function>
  		<name>formmapid</name>
  		<replaceName>FormMapId</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_formmapid</name>
  		<replaceName>FormMapId</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_formmapid</name>
  		<replaceName>FormMapId</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 formmapid() const;
  inline void set_formmapid(::google::protobuf::uint32 value);

  // optional string SceneId = 7;
  inline bool has_sceneid() const;
  inline void clear_sceneid();
  static const int kSceneIdFieldNumber = 7;
  /*FOR2LUA
  <Record>
  	<name>TBigHuntEnterRsp</name>
  	<Function>
  		<name>sceneid</name>
  		<replaceName>SceneId</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_sceneid</name>
  		<replaceName>SceneId</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_sceneid</name>
  		<replaceName>SceneId</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::std::string& sceneid() const;
  inline void set_sceneid(const ::std::string& value);
  inline void set_sceneid(const char* value);
  inline void set_sceneid(const char* value, size_t size);
  inline ::std::string* mutable_sceneid();
  inline ::std::string* release_sceneid();
  inline void set_allocated_sceneid(::std::string* sceneid);

  // repeated uint32 MonsterId = 8;
  inline int monsterid_size() const;
  inline void clear_monsterid();
  static const int kMonsterIdFieldNumber = 8;
  /*FOR2LUA
  <Record>
  	<name>TBigHuntEnterRsp</name>
  	<Function>
  		<name>monsterid</name>
  		<replaceName>MonsterId</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_monsterid</name>
  		<replaceName>MonsterId</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_monsterid</name>
  		<replaceName>MonsterId</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_monsterid</name>
  		<replaceName>MonsterId</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>monsterid_size</name>
  		<replaceName>MonsterId</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 monsterid(int index) const;
  inline void set_monsterid(int index, ::google::protobuf::uint32 value);
  inline void add_monsterid(::google::protobuf::uint32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      monsterid() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_monsterid();

  // repeated uint32 BossId = 9;
  inline int bossid_size() const;
  inline void clear_bossid();
  static const int kBossIdFieldNumber = 9;
  /*FOR2LUA
  <Record>
  	<name>TBigHuntEnterRsp</name>
  	<Function>
  		<name>bossid</name>
  		<replaceName>BossId</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_bossid</name>
  		<replaceName>BossId</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_bossid</name>
  		<replaceName>BossId</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_bossid</name>
  		<replaceName>BossId</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>bossid_size</name>
  		<replaceName>BossId</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 bossid(int index) const;
  inline void set_bossid(int index, ::google::protobuf::uint32 value);
  inline void add_bossid(::google::protobuf::uint32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      bossid() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_bossid();

  // @@protoc_insertion_point(class_scope:pb.TBigHuntEnterRsp)
 private:
  inline void set_has_curmapid();
  inline void clear_has_curmapid();
  inline void set_has_formmapid();
  inline void clear_has_formmapid();
  inline void set_has_sceneid();
  inline void clear_has_sceneid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::pb::TBigHuntMapDynamicInfo > mapdynamicinfoarr_;
  ::google::protobuf::RepeatedPtrField< ::pb::TBigHuntBossInfo > bossinfoarr_;
  ::google::protobuf::RepeatedPtrField< ::pb::TBigHuntMonsterInfo > monsterinfoarr_;
  ::google::protobuf::RepeatedPtrField< ::pb::TBigHuntSelfDynamicInfo > selfdynamicinfoarr_;
  ::google::protobuf::uint32 curmapid_;
  ::google::protobuf::uint32 formmapid_;
  ::std::string* sceneid_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > monsterid_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > bossid_;
  friend void  protobuf_AddDesc_net_2fBigHunt_2eproto();
  friend void protobuf_AssignDesc_net_2fBigHunt_2eproto();
  friend void protobuf_ShutdownFile_net_2fBigHunt_2eproto();

  void InitAsDefaultInstance();
  static TBigHuntEnterRsp* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TBigHuntGetUserInfoRsp</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/BigHunt.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TBigHuntGetUserInfoRsp : public ::google::protobuf::Message {
 public:
  TBigHuntGetUserInfoRsp();
  virtual ~TBigHuntGetUserInfoRsp();

  TBigHuntGetUserInfoRsp(const TBigHuntGetUserInfoRsp& from);

  inline TBigHuntGetUserInfoRsp& operator=(const TBigHuntGetUserInfoRsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TBigHuntGetUserInfoRsp& default_instance();

  void Swap(TBigHuntGetUserInfoRsp* other);

  // implements Message ----------------------------------------------

  TBigHuntGetUserInfoRsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TBigHuntGetUserInfoRsp& from);
  void MergeFrom(const TBigHuntGetUserInfoRsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 LeftChallengeNum = 1;
  inline bool has_leftchallengenum() const;
  inline void clear_leftchallengenum();
  static const int kLeftChallengeNumFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TBigHuntGetUserInfoRsp</name>
  	<Function>
  		<name>leftchallengenum</name>
  		<replaceName>LeftChallengeNum</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_leftchallengenum</name>
  		<replaceName>LeftChallengeNum</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_leftchallengenum</name>
  		<replaceName>LeftChallengeNum</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 leftchallengenum() const;
  inline void set_leftchallengenum(::google::protobuf::uint32 value);

  // optional uint32 BuyChallengeNum = 2;
  inline bool has_buychallengenum() const;
  inline void clear_buychallengenum();
  static const int kBuyChallengeNumFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TBigHuntGetUserInfoRsp</name>
  	<Function>
  		<name>buychallengenum</name>
  		<replaceName>BuyChallengeNum</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_buychallengenum</name>
  		<replaceName>BuyChallengeNum</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_buychallengenum</name>
  		<replaceName>BuyChallengeNum</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 buychallengenum() const;
  inline void set_buychallengenum(::google::protobuf::uint32 value);

  // repeated uint32 SuppressMonsterId = 3;
  inline int suppressmonsterid_size() const;
  inline void clear_suppressmonsterid();
  static const int kSuppressMonsterIdFieldNumber = 3;
  /*FOR2LUA
  <Record>
  	<name>TBigHuntGetUserInfoRsp</name>
  	<Function>
  		<name>suppressmonsterid</name>
  		<replaceName>SuppressMonsterId</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_suppressmonsterid</name>
  		<replaceName>SuppressMonsterId</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_suppressmonsterid</name>
  		<replaceName>SuppressMonsterId</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_suppressmonsterid</name>
  		<replaceName>SuppressMonsterId</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>suppressmonsterid_size</name>
  		<replaceName>SuppressMonsterId</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 suppressmonsterid(int index) const;
  inline void set_suppressmonsterid(int index, ::google::protobuf::uint32 value);
  inline void add_suppressmonsterid(::google::protobuf::uint32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      suppressmonsterid() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_suppressmonsterid();

  // optional uint64 SelfCoin = 4;
  inline bool has_selfcoin() const;
  inline void clear_selfcoin();
  static const int kSelfCoinFieldNumber = 4;
  /*FOR2LUA
  <Record>
  	<name>TBigHuntGetUserInfoRsp</name>
  	<Function>
  		<name>selfcoin</name>
  		<replaceName>SelfCoin</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_selfcoin</name>
  		<replaceName>SelfCoin</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_selfcoin</name>
  		<replaceName>SelfCoin</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint64 selfcoin() const;
  inline void set_selfcoin(::google::protobuf::uint64 value);

  // optional uint64 AllianceCoin = 5;
  inline bool has_alliancecoin() const;
  inline void clear_alliancecoin();
  static const int kAllianceCoinFieldNumber = 5;
  /*FOR2LUA
  <Record>
  	<name>TBigHuntGetUserInfoRsp</name>
  	<Function>
  		<name>alliancecoin</name>
  		<replaceName>AllianceCoin</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_alliancecoin</name>
  		<replaceName>AllianceCoin</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_alliancecoin</name>
  		<replaceName>AllianceCoin</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint64 alliancecoin() const;
  inline void set_alliancecoin(::google::protobuf::uint64 value);

  // repeated uint32 RewardIdArr = 6;
  inline int rewardidarr_size() const;
  inline void clear_rewardidarr();
  static const int kRewardIdArrFieldNumber = 6;
  /*FOR2LUA
  <Record>
  	<name>TBigHuntGetUserInfoRsp</name>
  	<Function>
  		<name>rewardidarr</name>
  		<replaceName>RewardIdArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_rewardidarr</name>
  		<replaceName>RewardIdArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_rewardidarr</name>
  		<replaceName>RewardIdArr</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_rewardidarr</name>
  		<replaceName>RewardIdArr</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>rewardidarr_size</name>
  		<replaceName>RewardIdArr</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 rewardidarr(int index) const;
  inline void set_rewardidarr(int index, ::google::protobuf::uint32 value);
  inline void add_rewardidarr(::google::protobuf::uint32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      rewardidarr() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_rewardidarr();

  // optional uint64 LastRecoverTime = 7;
  inline bool has_lastrecovertime() const;
  inline void clear_lastrecovertime();
  static const int kLastRecoverTimeFieldNumber = 7;
  /*FOR2LUA
  <Record>
  	<name>TBigHuntGetUserInfoRsp</name>
  	<Function>
  		<name>lastrecovertime</name>
  		<replaceName>LastRecoverTime</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_lastrecovertime</name>
  		<replaceName>LastRecoverTime</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_lastrecovertime</name>
  		<replaceName>LastRecoverTime</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint64 lastrecovertime() const;
  inline void set_lastrecovertime(::google::protobuf::uint64 value);

  // repeated .pb.TBigHuntDimensionInfo SelfDimensionArr = 8;
  inline int selfdimensionarr_size() const;
  inline void clear_selfdimensionarr();
  static const int kSelfDimensionArrFieldNumber = 8;
  /*FOR2LUA
  <Record>
  	<name>TBigHuntGetUserInfoRsp</name>
  	<Function>
  		<name>selfdimensionarr</name>
  		<replaceName>SelfDimensionArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_selfdimensionarr</name>
  		<replaceName>SelfDimensionArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_selfdimensionarr</name>
  		<replaceName>SelfDimensionArr</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_selfdimensionarr</name>
  		<replaceName>SelfDimensionArr</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>selfdimensionarr_size</name>
  		<replaceName>SelfDimensionArr</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TBigHuntDimensionInfo& selfdimensionarr(int index) const;
  inline ::pb::TBigHuntDimensionInfo* mutable_selfdimensionarr(int index);
  inline ::pb::TBigHuntDimensionInfo* add_selfdimensionarr();
  inline const ::google::protobuf::RepeatedPtrField< ::pb::TBigHuntDimensionInfo >&
      selfdimensionarr() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb::TBigHuntDimensionInfo >*
      mutable_selfdimensionarr();

  // optional uint32 CurMapId = 9;
  inline bool has_curmapid() const;
  inline void clear_curmapid();
  static const int kCurMapIdFieldNumber = 9;
  /*FOR2LUA
  <Record>
  	<name>TBigHuntGetUserInfoRsp</name>
  	<Function>
  		<name>curmapid</name>
  		<replaceName>CurMapId</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_curmapid</name>
  		<replaceName>CurMapId</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_curmapid</name>
  		<replaceName>CurMapId</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 curmapid() const;
  inline void set_curmapid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:pb.TBigHuntGetUserInfoRsp)
 private:
  inline void set_has_leftchallengenum();
  inline void clear_has_leftchallengenum();
  inline void set_has_buychallengenum();
  inline void clear_has_buychallengenum();
  inline void set_has_selfcoin();
  inline void clear_has_selfcoin();
  inline void set_has_alliancecoin();
  inline void clear_has_alliancecoin();
  inline void set_has_lastrecovertime();
  inline void clear_has_lastrecovertime();
  inline void set_has_curmapid();
  inline void clear_has_curmapid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 leftchallengenum_;
  ::google::protobuf::uint32 buychallengenum_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > suppressmonsterid_;
  ::google::protobuf::uint64 selfcoin_;
  ::google::protobuf::uint64 alliancecoin_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > rewardidarr_;
  ::google::protobuf::uint64 lastrecovertime_;
  ::google::protobuf::RepeatedPtrField< ::pb::TBigHuntDimensionInfo > selfdimensionarr_;
  ::google::protobuf::uint32 curmapid_;
  friend void  protobuf_AddDesc_net_2fBigHunt_2eproto();
  friend void protobuf_AssignDesc_net_2fBigHunt_2eproto();
  friend void protobuf_ShutdownFile_net_2fBigHunt_2eproto();

  void InitAsDefaultInstance();
  static TBigHuntGetUserInfoRsp* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TBigHuntSetAtkFormationReq</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/BigHunt.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TBigHuntSetAtkFormationReq : public ::google::protobuf::Message {
 public:
  TBigHuntSetAtkFormationReq();
  virtual ~TBigHuntSetAtkFormationReq();

  TBigHuntSetAtkFormationReq(const TBigHuntSetAtkFormationReq& from);

  inline TBigHuntSetAtkFormationReq& operator=(const TBigHuntSetAtkFormationReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TBigHuntSetAtkFormationReq& default_instance();

  void Swap(TBigHuntSetAtkFormationReq* other);

  // implements Message ----------------------------------------------

  TBigHuntSetAtkFormationReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TBigHuntSetAtkFormationReq& from);
  void MergeFrom(const TBigHuntSetAtkFormationReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .pb.TBigHuntFormationInfo FormationArr = 1;
  inline int formationarr_size() const;
  inline void clear_formationarr();
  static const int kFormationArrFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TBigHuntSetAtkFormationReq</name>
  	<Function>
  		<name>formationarr</name>
  		<replaceName>FormationArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_formationarr</name>
  		<replaceName>FormationArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_formationarr</name>
  		<replaceName>FormationArr</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_formationarr</name>
  		<replaceName>FormationArr</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>formationarr_size</name>
  		<replaceName>FormationArr</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TBigHuntFormationInfo& formationarr(int index) const;
  inline ::pb::TBigHuntFormationInfo* mutable_formationarr(int index);
  inline ::pb::TBigHuntFormationInfo* add_formationarr();
  inline const ::google::protobuf::RepeatedPtrField< ::pb::TBigHuntFormationInfo >&
      formationarr() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb::TBigHuntFormationInfo >*
      mutable_formationarr();

  // @@protoc_insertion_point(class_scope:pb.TBigHuntSetAtkFormationReq)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::pb::TBigHuntFormationInfo > formationarr_;
  friend void  protobuf_AddDesc_net_2fBigHunt_2eproto();
  friend void protobuf_AssignDesc_net_2fBigHunt_2eproto();
  friend void protobuf_ShutdownFile_net_2fBigHunt_2eproto();

  void InitAsDefaultInstance();
  static TBigHuntSetAtkFormationReq* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TBigHuntGetAtkFormationRsp</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/BigHunt.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TBigHuntGetAtkFormationRsp : public ::google::protobuf::Message {
 public:
  TBigHuntGetAtkFormationRsp();
  virtual ~TBigHuntGetAtkFormationRsp();

  TBigHuntGetAtkFormationRsp(const TBigHuntGetAtkFormationRsp& from);

  inline TBigHuntGetAtkFormationRsp& operator=(const TBigHuntGetAtkFormationRsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TBigHuntGetAtkFormationRsp& default_instance();

  void Swap(TBigHuntGetAtkFormationRsp* other);

  // implements Message ----------------------------------------------

  TBigHuntGetAtkFormationRsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TBigHuntGetAtkFormationRsp& from);
  void MergeFrom(const TBigHuntGetAtkFormationRsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .pb.TBigHuntFormationInfo FormationArr = 1;
  inline int formationarr_size() const;
  inline void clear_formationarr();
  static const int kFormationArrFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TBigHuntGetAtkFormationRsp</name>
  	<Function>
  		<name>formationarr</name>
  		<replaceName>FormationArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_formationarr</name>
  		<replaceName>FormationArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_formationarr</name>
  		<replaceName>FormationArr</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_formationarr</name>
  		<replaceName>FormationArr</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>formationarr_size</name>
  		<replaceName>FormationArr</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TBigHuntFormationInfo& formationarr(int index) const;
  inline ::pb::TBigHuntFormationInfo* mutable_formationarr(int index);
  inline ::pb::TBigHuntFormationInfo* add_formationarr();
  inline const ::google::protobuf::RepeatedPtrField< ::pb::TBigHuntFormationInfo >&
      formationarr() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb::TBigHuntFormationInfo >*
      mutable_formationarr();

  // @@protoc_insertion_point(class_scope:pb.TBigHuntGetAtkFormationRsp)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::pb::TBigHuntFormationInfo > formationarr_;
  friend void  protobuf_AddDesc_net_2fBigHunt_2eproto();
  friend void protobuf_AssignDesc_net_2fBigHunt_2eproto();
  friend void protobuf_ShutdownFile_net_2fBigHunt_2eproto();

  void InitAsDefaultInstance();
  static TBigHuntGetAtkFormationRsp* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TBigHuntGetBattleArgsReq</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/BigHunt.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TBigHuntGetBattleArgsReq : public ::google::protobuf::Message {
 public:
  TBigHuntGetBattleArgsReq();
  virtual ~TBigHuntGetBattleArgsReq();

  TBigHuntGetBattleArgsReq(const TBigHuntGetBattleArgsReq& from);

  inline TBigHuntGetBattleArgsReq& operator=(const TBigHuntGetBattleArgsReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TBigHuntGetBattleArgsReq& default_instance();

  void Swap(TBigHuntGetBattleArgsReq* other);

  // implements Message ----------------------------------------------

  TBigHuntGetBattleArgsReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TBigHuntGetBattleArgsReq& from);
  void MergeFrom(const TBigHuntGetBattleArgsReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 Id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TBigHuntGetBattleArgsReq</name>
  	<Function>
  		<name>id</name>
  		<replaceName>Id</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_id</name>
  		<replaceName>Id</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_id</name>
  		<replaceName>Id</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 id() const;
  inline void set_id(::google::protobuf::uint32 value);

  // optional .pb.TBattleCheckParam BattleCheckParam = 2;
  inline bool has_battlecheckparam() const;
  inline void clear_battlecheckparam();
  static const int kBattleCheckParamFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TBigHuntGetBattleArgsReq</name>
  	<Function>
  		<name>battlecheckparam</name>
  		<replaceName>BattleCheckParam</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_battlecheckparam</name>
  		<replaceName>BattleCheckParam</replaceName>
  		<handler>descripter = pb_set_message_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_allocated_battlecheckparam</name>
  		<replaceName>BattleCheckParam</replaceName>
  		<handler>descripter = pb_set_message_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_battlecheckparam</name>
  		<replaceName>BattleCheckParam</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TBattleCheckParam& battlecheckparam() const;
  inline ::pb::TBattleCheckParam* mutable_battlecheckparam();
  inline ::pb::TBattleCheckParam* release_battlecheckparam();
  inline void set_allocated_battlecheckparam(::pb::TBattleCheckParam* battlecheckparam);

  // @@protoc_insertion_point(class_scope:pb.TBigHuntGetBattleArgsReq)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_battlecheckparam();
  inline void clear_has_battlecheckparam();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::pb::TBattleCheckParam* battlecheckparam_;
  ::google::protobuf::uint32 id_;
  friend void  protobuf_AddDesc_net_2fBigHunt_2eproto();
  friend void protobuf_AssignDesc_net_2fBigHunt_2eproto();
  friend void protobuf_ShutdownFile_net_2fBigHunt_2eproto();

  void InitAsDefaultInstance();
  static TBigHuntGetBattleArgsReq* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TBigHuntGetBattleArgsRsp</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/BigHunt.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TBigHuntGetBattleArgsRsp : public ::google::protobuf::Message {
 public:
  TBigHuntGetBattleArgsRsp();
  virtual ~TBigHuntGetBattleArgsRsp();

  TBigHuntGetBattleArgsRsp(const TBigHuntGetBattleArgsRsp& from);

  inline TBigHuntGetBattleArgsRsp& operator=(const TBigHuntGetBattleArgsRsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TBigHuntGetBattleArgsRsp& default_instance();

  void Swap(TBigHuntGetBattleArgsRsp* other);

  // implements Message ----------------------------------------------

  TBigHuntGetBattleArgsRsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TBigHuntGetBattleArgsRsp& from);
  void MergeFrom(const TBigHuntGetBattleArgsRsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .pb.TBattleArgs BattleArgs = 1;
  inline bool has_battleargs() const;
  inline void clear_battleargs();
  static const int kBattleArgsFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TBigHuntGetBattleArgsRsp</name>
  	<Function>
  		<name>battleargs</name>
  		<replaceName>BattleArgs</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_battleargs</name>
  		<replaceName>BattleArgs</replaceName>
  		<handler>descripter = pb_set_message_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_allocated_battleargs</name>
  		<replaceName>BattleArgs</replaceName>
  		<handler>descripter = pb_set_message_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_battleargs</name>
  		<replaceName>BattleArgs</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TBattleArgs& battleargs() const;
  inline ::pb::TBattleArgs* mutable_battleargs();
  inline ::pb::TBattleArgs* release_battleargs();
  inline void set_allocated_battleargs(::pb::TBattleArgs* battleargs);

  // @@protoc_insertion_point(class_scope:pb.TBigHuntGetBattleArgsRsp)
 private:
  inline void set_has_battleargs();
  inline void clear_has_battleargs();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::pb::TBattleArgs* battleargs_;
  friend void  protobuf_AddDesc_net_2fBigHunt_2eproto();
  friend void protobuf_AssignDesc_net_2fBigHunt_2eproto();
  friend void protobuf_ShutdownFile_net_2fBigHunt_2eproto();

  void InitAsDefaultInstance();
  static TBigHuntGetBattleArgsRsp* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TBigHuntReportBattleNormaMonsterReq</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/BigHunt.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TBigHuntReportBattleNormaMonsterReq : public ::google::protobuf::Message {
 public:
  TBigHuntReportBattleNormaMonsterReq();
  virtual ~TBigHuntReportBattleNormaMonsterReq();

  TBigHuntReportBattleNormaMonsterReq(const TBigHuntReportBattleNormaMonsterReq& from);

  inline TBigHuntReportBattleNormaMonsterReq& operator=(const TBigHuntReportBattleNormaMonsterReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TBigHuntReportBattleNormaMonsterReq& default_instance();

  void Swap(TBigHuntReportBattleNormaMonsterReq* other);

  // implements Message ----------------------------------------------

  TBigHuntReportBattleNormaMonsterReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TBigHuntReportBattleNormaMonsterReq& from);
  void MergeFrom(const TBigHuntReportBattleNormaMonsterReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 MonsterId = 1;
  inline bool has_monsterid() const;
  inline void clear_monsterid();
  static const int kMonsterIdFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TBigHuntReportBattleNormaMonsterReq</name>
  	<Function>
  		<name>monsterid</name>
  		<replaceName>MonsterId</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_monsterid</name>
  		<replaceName>MonsterId</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_monsterid</name>
  		<replaceName>MonsterId</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 monsterid() const;
  inline void set_monsterid(::google::protobuf::uint32 value);

  // optional bytes BattleRet = 2;
  inline bool has_battleret() const;
  inline void clear_battleret();
  static const int kBattleRetFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TBigHuntReportBattleNormaMonsterReq</name>
  	<Function>
  		<name>battleret</name>
  		<replaceName>BattleRet</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_battleret</name>
  		<replaceName>BattleRet</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_battleret</name>
  		<replaceName>BattleRet</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::std::string& battleret() const;
  inline void set_battleret(const ::std::string& value);
  inline void set_battleret(const char* value);
  inline void set_battleret(const void* value, size_t size);
  inline ::std::string* mutable_battleret();
  inline ::std::string* release_battleret();
  inline void set_allocated_battleret(::std::string* battleret);

  // @@protoc_insertion_point(class_scope:pb.TBigHuntReportBattleNormaMonsterReq)
 private:
  inline void set_has_monsterid();
  inline void clear_has_monsterid();
  inline void set_has_battleret();
  inline void clear_has_battleret();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* battleret_;
  ::google::protobuf::uint32 monsterid_;
  friend void  protobuf_AddDesc_net_2fBigHunt_2eproto();
  friend void protobuf_AssignDesc_net_2fBigHunt_2eproto();
  friend void protobuf_ShutdownFile_net_2fBigHunt_2eproto();

  void InitAsDefaultInstance();
  static TBigHuntReportBattleNormaMonsterReq* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TBigHuntReportBattleEliteMonsterReq</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/BigHunt.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TBigHuntReportBattleEliteMonsterReq : public ::google::protobuf::Message {
 public:
  TBigHuntReportBattleEliteMonsterReq();
  virtual ~TBigHuntReportBattleEliteMonsterReq();

  TBigHuntReportBattleEliteMonsterReq(const TBigHuntReportBattleEliteMonsterReq& from);

  inline TBigHuntReportBattleEliteMonsterReq& operator=(const TBigHuntReportBattleEliteMonsterReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TBigHuntReportBattleEliteMonsterReq& default_instance();

  void Swap(TBigHuntReportBattleEliteMonsterReq* other);

  // implements Message ----------------------------------------------

  TBigHuntReportBattleEliteMonsterReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TBigHuntReportBattleEliteMonsterReq& from);
  void MergeFrom(const TBigHuntReportBattleEliteMonsterReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 MonsterId = 1;
  inline bool has_monsterid() const;
  inline void clear_monsterid();
  static const int kMonsterIdFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TBigHuntReportBattleEliteMonsterReq</name>
  	<Function>
  		<name>monsterid</name>
  		<replaceName>MonsterId</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_monsterid</name>
  		<replaceName>MonsterId</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_monsterid</name>
  		<replaceName>MonsterId</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 monsterid() const;
  inline void set_monsterid(::google::protobuf::uint32 value);

  // optional bytes BattleRet = 2;
  inline bool has_battleret() const;
  inline void clear_battleret();
  static const int kBattleRetFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TBigHuntReportBattleEliteMonsterReq</name>
  	<Function>
  		<name>battleret</name>
  		<replaceName>BattleRet</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_battleret</name>
  		<replaceName>BattleRet</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_battleret</name>
  		<replaceName>BattleRet</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::std::string& battleret() const;
  inline void set_battleret(const ::std::string& value);
  inline void set_battleret(const char* value);
  inline void set_battleret(const void* value, size_t size);
  inline ::std::string* mutable_battleret();
  inline ::std::string* release_battleret();
  inline void set_allocated_battleret(::std::string* battleret);

  // @@protoc_insertion_point(class_scope:pb.TBigHuntReportBattleEliteMonsterReq)
 private:
  inline void set_has_monsterid();
  inline void clear_has_monsterid();
  inline void set_has_battleret();
  inline void clear_has_battleret();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* battleret_;
  ::google::protobuf::uint32 monsterid_;
  friend void  protobuf_AddDesc_net_2fBigHunt_2eproto();
  friend void protobuf_AssignDesc_net_2fBigHunt_2eproto();
  friend void protobuf_ShutdownFile_net_2fBigHunt_2eproto();

  void InitAsDefaultInstance();
  static TBigHuntReportBattleEliteMonsterReq* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TBigHuntReportBattleStakeReq</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/BigHunt.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TBigHuntReportBattleStakeReq : public ::google::protobuf::Message {
 public:
  TBigHuntReportBattleStakeReq();
  virtual ~TBigHuntReportBattleStakeReq();

  TBigHuntReportBattleStakeReq(const TBigHuntReportBattleStakeReq& from);

  inline TBigHuntReportBattleStakeReq& operator=(const TBigHuntReportBattleStakeReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TBigHuntReportBattleStakeReq& default_instance();

  void Swap(TBigHuntReportBattleStakeReq* other);

  // implements Message ----------------------------------------------

  TBigHuntReportBattleStakeReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TBigHuntReportBattleStakeReq& from);
  void MergeFrom(const TBigHuntReportBattleStakeReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 MonsterId = 1;
  inline bool has_monsterid() const;
  inline void clear_monsterid();
  static const int kMonsterIdFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TBigHuntReportBattleStakeReq</name>
  	<Function>
  		<name>monsterid</name>
  		<replaceName>MonsterId</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_monsterid</name>
  		<replaceName>MonsterId</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_monsterid</name>
  		<replaceName>MonsterId</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 monsterid() const;
  inline void set_monsterid(::google::protobuf::uint32 value);

  // optional bytes BattleRet = 2;
  inline bool has_battleret() const;
  inline void clear_battleret();
  static const int kBattleRetFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TBigHuntReportBattleStakeReq</name>
  	<Function>
  		<name>battleret</name>
  		<replaceName>BattleRet</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_battleret</name>
  		<replaceName>BattleRet</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_battleret</name>
  		<replaceName>BattleRet</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::std::string& battleret() const;
  inline void set_battleret(const ::std::string& value);
  inline void set_battleret(const char* value);
  inline void set_battleret(const void* value, size_t size);
  inline ::std::string* mutable_battleret();
  inline ::std::string* release_battleret();
  inline void set_allocated_battleret(::std::string* battleret);

  // @@protoc_insertion_point(class_scope:pb.TBigHuntReportBattleStakeReq)
 private:
  inline void set_has_monsterid();
  inline void clear_has_monsterid();
  inline void set_has_battleret();
  inline void clear_has_battleret();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* battleret_;
  ::google::protobuf::uint32 monsterid_;
  friend void  protobuf_AddDesc_net_2fBigHunt_2eproto();
  friend void protobuf_AssignDesc_net_2fBigHunt_2eproto();
  friend void protobuf_ShutdownFile_net_2fBigHunt_2eproto();

  void InitAsDefaultInstance();
  static TBigHuntReportBattleStakeReq* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TBigHuntReportBattleMonsterRsp</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/BigHunt.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TBigHuntReportBattleMonsterRsp : public ::google::protobuf::Message {
 public:
  TBigHuntReportBattleMonsterRsp();
  virtual ~TBigHuntReportBattleMonsterRsp();

  TBigHuntReportBattleMonsterRsp(const TBigHuntReportBattleMonsterRsp& from);

  inline TBigHuntReportBattleMonsterRsp& operator=(const TBigHuntReportBattleMonsterRsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TBigHuntReportBattleMonsterRsp& default_instance();

  void Swap(TBigHuntReportBattleMonsterRsp* other);

  // implements Message ----------------------------------------------

  TBigHuntReportBattleMonsterRsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TBigHuntReportBattleMonsterRsp& from);
  void MergeFrom(const TBigHuntReportBattleMonsterRsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .pb.EBigHuntKillType KillType = 1;
  inline bool has_killtype() const;
  inline void clear_killtype();
  static const int kKillTypeFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TBigHuntReportBattleMonsterRsp</name>
  	<Function>
  		<name>killtype</name>
  		<replaceName>KillType</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_killtype</name>
  		<replaceName>KillType</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_killtype</name>
  		<replaceName>KillType</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::pb::EBigHuntKillType killtype() const;
  inline void set_killtype(::pb::EBigHuntKillType value);

  // repeated .pb.TCommonReward RewardArr = 2;
  inline int rewardarr_size() const;
  inline void clear_rewardarr();
  static const int kRewardArrFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TBigHuntReportBattleMonsterRsp</name>
  	<Function>
  		<name>rewardarr</name>
  		<replaceName>RewardArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_rewardarr</name>
  		<replaceName>RewardArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_rewardarr</name>
  		<replaceName>RewardArr</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_rewardarr</name>
  		<replaceName>RewardArr</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>rewardarr_size</name>
  		<replaceName>RewardArr</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TCommonReward& rewardarr(int index) const;
  inline ::pb::TCommonReward* mutable_rewardarr(int index);
  inline ::pb::TCommonReward* add_rewardarr();
  inline const ::google::protobuf::RepeatedPtrField< ::pb::TCommonReward >&
      rewardarr() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb::TCommonReward >*
      mutable_rewardarr();

  // optional .pb.EBigHuntSuccessType isSuccess = 3;
  inline bool has_issuccess() const;
  inline void clear_issuccess();
  static const int kIsSuccessFieldNumber = 3;
  /*FOR2LUA
  <Record>
  	<name>TBigHuntReportBattleMonsterRsp</name>
  	<Function>
  		<name>issuccess</name>
  		<replaceName>isSuccess</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_issuccess</name>
  		<replaceName>isSuccess</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_issuccess</name>
  		<replaceName>isSuccess</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::pb::EBigHuntSuccessType issuccess() const;
  inline void set_issuccess(::pb::EBigHuntSuccessType value);

  // @@protoc_insertion_point(class_scope:pb.TBigHuntReportBattleMonsterRsp)
 private:
  inline void set_has_killtype();
  inline void clear_has_killtype();
  inline void set_has_issuccess();
  inline void clear_has_issuccess();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::pb::TCommonReward > rewardarr_;
  int killtype_;
  int issuccess_;
  friend void  protobuf_AddDesc_net_2fBigHunt_2eproto();
  friend void protobuf_AssignDesc_net_2fBigHunt_2eproto();
  friend void protobuf_ShutdownFile_net_2fBigHunt_2eproto();

  void InitAsDefaultInstance();
  static TBigHuntReportBattleMonsterRsp* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TBigHuntReportBattleBossReq</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/BigHunt.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TBigHuntReportBattleBossReq : public ::google::protobuf::Message {
 public:
  TBigHuntReportBattleBossReq();
  virtual ~TBigHuntReportBattleBossReq();

  TBigHuntReportBattleBossReq(const TBigHuntReportBattleBossReq& from);

  inline TBigHuntReportBattleBossReq& operator=(const TBigHuntReportBattleBossReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TBigHuntReportBattleBossReq& default_instance();

  void Swap(TBigHuntReportBattleBossReq* other);

  // implements Message ----------------------------------------------

  TBigHuntReportBattleBossReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TBigHuntReportBattleBossReq& from);
  void MergeFrom(const TBigHuntReportBattleBossReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 BossId = 1;
  inline bool has_bossid() const;
  inline void clear_bossid();
  static const int kBossIdFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TBigHuntReportBattleBossReq</name>
  	<Function>
  		<name>bossid</name>
  		<replaceName>BossId</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_bossid</name>
  		<replaceName>BossId</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_bossid</name>
  		<replaceName>BossId</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 bossid() const;
  inline void set_bossid(::google::protobuf::uint32 value);

  // optional bytes BattleRet = 2;
  inline bool has_battleret() const;
  inline void clear_battleret();
  static const int kBattleRetFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TBigHuntReportBattleBossReq</name>
  	<Function>
  		<name>battleret</name>
  		<replaceName>BattleRet</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_battleret</name>
  		<replaceName>BattleRet</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_battleret</name>
  		<replaceName>BattleRet</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::std::string& battleret() const;
  inline void set_battleret(const ::std::string& value);
  inline void set_battleret(const char* value);
  inline void set_battleret(const void* value, size_t size);
  inline ::std::string* mutable_battleret();
  inline ::std::string* release_battleret();
  inline void set_allocated_battleret(::std::string* battleret);

  // @@protoc_insertion_point(class_scope:pb.TBigHuntReportBattleBossReq)
 private:
  inline void set_has_bossid();
  inline void clear_has_bossid();
  inline void set_has_battleret();
  inline void clear_has_battleret();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* battleret_;
  ::google::protobuf::uint32 bossid_;
  friend void  protobuf_AddDesc_net_2fBigHunt_2eproto();
  friend void protobuf_AssignDesc_net_2fBigHunt_2eproto();
  friend void protobuf_ShutdownFile_net_2fBigHunt_2eproto();

  void InitAsDefaultInstance();
  static TBigHuntReportBattleBossReq* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TBigHuntReportBattleBossRsp</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/BigHunt.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TBigHuntReportBattleBossRsp : public ::google::protobuf::Message {
 public:
  TBigHuntReportBattleBossRsp();
  virtual ~TBigHuntReportBattleBossRsp();

  TBigHuntReportBattleBossRsp(const TBigHuntReportBattleBossRsp& from);

  inline TBigHuntReportBattleBossRsp& operator=(const TBigHuntReportBattleBossRsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TBigHuntReportBattleBossRsp& default_instance();

  void Swap(TBigHuntReportBattleBossRsp* other);

  // implements Message ----------------------------------------------

  TBigHuntReportBattleBossRsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TBigHuntReportBattleBossRsp& from);
  void MergeFrom(const TBigHuntReportBattleBossRsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 isKill = 1;
  inline bool has_iskill() const;
  inline void clear_iskill();
  static const int kIsKillFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TBigHuntReportBattleBossRsp</name>
  	<Function>
  		<name>iskill</name>
  		<replaceName>isKill</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_iskill</name>
  		<replaceName>isKill</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_iskill</name>
  		<replaceName>isKill</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 iskill() const;
  inline void set_iskill(::google::protobuf::uint32 value);

  // repeated .pb.TCommonReward RewardArr = 2;
  inline int rewardarr_size() const;
  inline void clear_rewardarr();
  static const int kRewardArrFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TBigHuntReportBattleBossRsp</name>
  	<Function>
  		<name>rewardarr</name>
  		<replaceName>RewardArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_rewardarr</name>
  		<replaceName>RewardArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_rewardarr</name>
  		<replaceName>RewardArr</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_rewardarr</name>
  		<replaceName>RewardArr</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>rewardarr_size</name>
  		<replaceName>RewardArr</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TCommonReward& rewardarr(int index) const;
  inline ::pb::TCommonReward* mutable_rewardarr(int index);
  inline ::pb::TCommonReward* add_rewardarr();
  inline const ::google::protobuf::RepeatedPtrField< ::pb::TCommonReward >&
      rewardarr() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb::TCommonReward >*
      mutable_rewardarr();

  // optional uint64 HpPercentage = 3;
  inline bool has_hppercentage() const;
  inline void clear_hppercentage();
  static const int kHpPercentageFieldNumber = 3;
  /*FOR2LUA
  <Record>
  	<name>TBigHuntReportBattleBossRsp</name>
  	<Function>
  		<name>hppercentage</name>
  		<replaceName>HpPercentage</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_hppercentage</name>
  		<replaceName>HpPercentage</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_hppercentage</name>
  		<replaceName>HpPercentage</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint64 hppercentage() const;
  inline void set_hppercentage(::google::protobuf::uint64 value);

  // optional .pb.EBigHuntSuccessType isSuccess = 4;
  inline bool has_issuccess() const;
  inline void clear_issuccess();
  static const int kIsSuccessFieldNumber = 4;
  /*FOR2LUA
  <Record>
  	<name>TBigHuntReportBattleBossRsp</name>
  	<Function>
  		<name>issuccess</name>
  		<replaceName>isSuccess</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_issuccess</name>
  		<replaceName>isSuccess</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_issuccess</name>
  		<replaceName>isSuccess</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::pb::EBigHuntSuccessType issuccess() const;
  inline void set_issuccess(::pb::EBigHuntSuccessType value);

  // @@protoc_insertion_point(class_scope:pb.TBigHuntReportBattleBossRsp)
 private:
  inline void set_has_iskill();
  inline void clear_has_iskill();
  inline void set_has_hppercentage();
  inline void clear_has_hppercentage();
  inline void set_has_issuccess();
  inline void clear_has_issuccess();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::pb::TCommonReward > rewardarr_;
  ::google::protobuf::uint32 iskill_;
  int issuccess_;
  ::google::protobuf::uint64 hppercentage_;
  friend void  protobuf_AddDesc_net_2fBigHunt_2eproto();
  friend void protobuf_AssignDesc_net_2fBigHunt_2eproto();
  friend void protobuf_ShutdownFile_net_2fBigHunt_2eproto();

  void InitAsDefaultInstance();
  static TBigHuntReportBattleBossRsp* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TBigHuntGetSelfDynamicInfoRsp</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/BigHunt.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TBigHuntGetSelfDynamicInfoRsp : public ::google::protobuf::Message {
 public:
  TBigHuntGetSelfDynamicInfoRsp();
  virtual ~TBigHuntGetSelfDynamicInfoRsp();

  TBigHuntGetSelfDynamicInfoRsp(const TBigHuntGetSelfDynamicInfoRsp& from);

  inline TBigHuntGetSelfDynamicInfoRsp& operator=(const TBigHuntGetSelfDynamicInfoRsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TBigHuntGetSelfDynamicInfoRsp& default_instance();

  void Swap(TBigHuntGetSelfDynamicInfoRsp* other);

  // implements Message ----------------------------------------------

  TBigHuntGetSelfDynamicInfoRsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TBigHuntGetSelfDynamicInfoRsp& from);
  void MergeFrom(const TBigHuntGetSelfDynamicInfoRsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .pb.TBigHuntSelfDynamicInfo DynamicArr = 1;
  inline int dynamicarr_size() const;
  inline void clear_dynamicarr();
  static const int kDynamicArrFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TBigHuntGetSelfDynamicInfoRsp</name>
  	<Function>
  		<name>dynamicarr</name>
  		<replaceName>DynamicArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_dynamicarr</name>
  		<replaceName>DynamicArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_dynamicarr</name>
  		<replaceName>DynamicArr</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_dynamicarr</name>
  		<replaceName>DynamicArr</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>dynamicarr_size</name>
  		<replaceName>DynamicArr</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TBigHuntSelfDynamicInfo& dynamicarr(int index) const;
  inline ::pb::TBigHuntSelfDynamicInfo* mutable_dynamicarr(int index);
  inline ::pb::TBigHuntSelfDynamicInfo* add_dynamicarr();
  inline const ::google::protobuf::RepeatedPtrField< ::pb::TBigHuntSelfDynamicInfo >&
      dynamicarr() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb::TBigHuntSelfDynamicInfo >*
      mutable_dynamicarr();

  // @@protoc_insertion_point(class_scope:pb.TBigHuntGetSelfDynamicInfoRsp)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::pb::TBigHuntSelfDynamicInfo > dynamicarr_;
  friend void  protobuf_AddDesc_net_2fBigHunt_2eproto();
  friend void protobuf_AssignDesc_net_2fBigHunt_2eproto();
  friend void protobuf_ShutdownFile_net_2fBigHunt_2eproto();

  void InitAsDefaultInstance();
  static TBigHuntGetSelfDynamicInfoRsp* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TBigHuntReceiveAllianceCoinRewardReq</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/BigHunt.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TBigHuntReceiveAllianceCoinRewardReq : public ::google::protobuf::Message {
 public:
  TBigHuntReceiveAllianceCoinRewardReq();
  virtual ~TBigHuntReceiveAllianceCoinRewardReq();

  TBigHuntReceiveAllianceCoinRewardReq(const TBigHuntReceiveAllianceCoinRewardReq& from);

  inline TBigHuntReceiveAllianceCoinRewardReq& operator=(const TBigHuntReceiveAllianceCoinRewardReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TBigHuntReceiveAllianceCoinRewardReq& default_instance();

  void Swap(TBigHuntReceiveAllianceCoinRewardReq* other);

  // implements Message ----------------------------------------------

  TBigHuntReceiveAllianceCoinRewardReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TBigHuntReceiveAllianceCoinRewardReq& from);
  void MergeFrom(const TBigHuntReceiveAllianceCoinRewardReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 Id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TBigHuntReceiveAllianceCoinRewardReq</name>
  	<Function>
  		<name>id</name>
  		<replaceName>Id</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_id</name>
  		<replaceName>Id</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_id</name>
  		<replaceName>Id</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 id() const;
  inline void set_id(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:pb.TBigHuntReceiveAllianceCoinRewardReq)
 private:
  inline void set_has_id();
  inline void clear_has_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 id_;
  friend void  protobuf_AddDesc_net_2fBigHunt_2eproto();
  friend void protobuf_AssignDesc_net_2fBigHunt_2eproto();
  friend void protobuf_ShutdownFile_net_2fBigHunt_2eproto();

  void InitAsDefaultInstance();
  static TBigHuntReceiveAllianceCoinRewardReq* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TBigHuntReceiveAllianceCoinRewardRsp</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/BigHunt.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TBigHuntReceiveAllianceCoinRewardRsp : public ::google::protobuf::Message {
 public:
  TBigHuntReceiveAllianceCoinRewardRsp();
  virtual ~TBigHuntReceiveAllianceCoinRewardRsp();

  TBigHuntReceiveAllianceCoinRewardRsp(const TBigHuntReceiveAllianceCoinRewardRsp& from);

  inline TBigHuntReceiveAllianceCoinRewardRsp& operator=(const TBigHuntReceiveAllianceCoinRewardRsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TBigHuntReceiveAllianceCoinRewardRsp& default_instance();

  void Swap(TBigHuntReceiveAllianceCoinRewardRsp* other);

  // implements Message ----------------------------------------------

  TBigHuntReceiveAllianceCoinRewardRsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TBigHuntReceiveAllianceCoinRewardRsp& from);
  void MergeFrom(const TBigHuntReceiveAllianceCoinRewardRsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .pb.TCommonReward RewardArr = 1;
  inline int rewardarr_size() const;
  inline void clear_rewardarr();
  static const int kRewardArrFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TBigHuntReceiveAllianceCoinRewardRsp</name>
  	<Function>
  		<name>rewardarr</name>
  		<replaceName>RewardArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_rewardarr</name>
  		<replaceName>RewardArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_rewardarr</name>
  		<replaceName>RewardArr</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_rewardarr</name>
  		<replaceName>RewardArr</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>rewardarr_size</name>
  		<replaceName>RewardArr</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TCommonReward& rewardarr(int index) const;
  inline ::pb::TCommonReward* mutable_rewardarr(int index);
  inline ::pb::TCommonReward* add_rewardarr();
  inline const ::google::protobuf::RepeatedPtrField< ::pb::TCommonReward >&
      rewardarr() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb::TCommonReward >*
      mutable_rewardarr();

  // @@protoc_insertion_point(class_scope:pb.TBigHuntReceiveAllianceCoinRewardRsp)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::pb::TCommonReward > rewardarr_;
  friend void  protobuf_AddDesc_net_2fBigHunt_2eproto();
  friend void protobuf_AssignDesc_net_2fBigHunt_2eproto();
  friend void protobuf_ShutdownFile_net_2fBigHunt_2eproto();

  void InitAsDefaultInstance();
  static TBigHuntReceiveAllianceCoinRewardRsp* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TBigHuntBuyChallengeNumReq</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/BigHunt.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TBigHuntBuyChallengeNumReq : public ::google::protobuf::Message {
 public:
  TBigHuntBuyChallengeNumReq();
  virtual ~TBigHuntBuyChallengeNumReq();

  TBigHuntBuyChallengeNumReq(const TBigHuntBuyChallengeNumReq& from);

  inline TBigHuntBuyChallengeNumReq& operator=(const TBigHuntBuyChallengeNumReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TBigHuntBuyChallengeNumReq& default_instance();

  void Swap(TBigHuntBuyChallengeNumReq* other);

  // implements Message ----------------------------------------------

  TBigHuntBuyChallengeNumReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TBigHuntBuyChallengeNumReq& from);
  void MergeFrom(const TBigHuntBuyChallengeNumReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 Num = 1;
  inline bool has_num() const;
  inline void clear_num();
  static const int kNumFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TBigHuntBuyChallengeNumReq</name>
  	<Function>
  		<name>num</name>
  		<replaceName>Num</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_num</name>
  		<replaceName>Num</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_num</name>
  		<replaceName>Num</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 num() const;
  inline void set_num(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:pb.TBigHuntBuyChallengeNumReq)
 private:
  inline void set_has_num();
  inline void clear_has_num();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 num_;
  friend void  protobuf_AddDesc_net_2fBigHunt_2eproto();
  friend void protobuf_AssignDesc_net_2fBigHunt_2eproto();
  friend void protobuf_ShutdownFile_net_2fBigHunt_2eproto();

  void InitAsDefaultInstance();
  static TBigHuntBuyChallengeNumReq* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TBigHuntUpgradeDimensionReq</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/BigHunt.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TBigHuntUpgradeDimensionReq : public ::google::protobuf::Message {
 public:
  TBigHuntUpgradeDimensionReq();
  virtual ~TBigHuntUpgradeDimensionReq();

  TBigHuntUpgradeDimensionReq(const TBigHuntUpgradeDimensionReq& from);

  inline TBigHuntUpgradeDimensionReq& operator=(const TBigHuntUpgradeDimensionReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TBigHuntUpgradeDimensionReq& default_instance();

  void Swap(TBigHuntUpgradeDimensionReq* other);

  // implements Message ----------------------------------------------

  TBigHuntUpgradeDimensionReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TBigHuntUpgradeDimensionReq& from);
  void MergeFrom(const TBigHuntUpgradeDimensionReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 Id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TBigHuntUpgradeDimensionReq</name>
  	<Function>
  		<name>id</name>
  		<replaceName>Id</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_id</name>
  		<replaceName>Id</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_id</name>
  		<replaceName>Id</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 id() const;
  inline void set_id(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:pb.TBigHuntUpgradeDimensionReq)
 private:
  inline void set_has_id();
  inline void clear_has_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 id_;
  friend void  protobuf_AddDesc_net_2fBigHunt_2eproto();
  friend void protobuf_AssignDesc_net_2fBigHunt_2eproto();
  friend void protobuf_ShutdownFile_net_2fBigHunt_2eproto();

  void InitAsDefaultInstance();
  static TBigHuntUpgradeDimensionReq* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TBigHuntAllianceCoinRankList</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/BigHunt.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TBigHuntAllianceCoinRankList : public ::google::protobuf::Message {
 public:
  TBigHuntAllianceCoinRankList();
  virtual ~TBigHuntAllianceCoinRankList();

  TBigHuntAllianceCoinRankList(const TBigHuntAllianceCoinRankList& from);

  inline TBigHuntAllianceCoinRankList& operator=(const TBigHuntAllianceCoinRankList& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TBigHuntAllianceCoinRankList& default_instance();

  void Swap(TBigHuntAllianceCoinRankList* other);

  // implements Message ----------------------------------------------

  TBigHuntAllianceCoinRankList* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TBigHuntAllianceCoinRankList& from);
  void MergeFrom(const TBigHuntAllianceCoinRankList& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .pb.TAllianceSimpleInfo AllianceInfo = 1;
  inline bool has_allianceinfo() const;
  inline void clear_allianceinfo();
  static const int kAllianceInfoFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TBigHuntAllianceCoinRankList</name>
  	<Function>
  		<name>allianceinfo</name>
  		<replaceName>AllianceInfo</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_allianceinfo</name>
  		<replaceName>AllianceInfo</replaceName>
  		<handler>descripter = pb_set_message_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_allocated_allianceinfo</name>
  		<replaceName>AllianceInfo</replaceName>
  		<handler>descripter = pb_set_message_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_allianceinfo</name>
  		<replaceName>AllianceInfo</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TAllianceSimpleInfo& allianceinfo() const;
  inline ::pb::TAllianceSimpleInfo* mutable_allianceinfo();
  inline ::pb::TAllianceSimpleInfo* release_allianceinfo();
  inline void set_allocated_allianceinfo(::pb::TAllianceSimpleInfo* allianceinfo);

  // optional uint64 CoinNum = 2;
  inline bool has_coinnum() const;
  inline void clear_coinnum();
  static const int kCoinNumFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TBigHuntAllianceCoinRankList</name>
  	<Function>
  		<name>coinnum</name>
  		<replaceName>CoinNum</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_coinnum</name>
  		<replaceName>CoinNum</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_coinnum</name>
  		<replaceName>CoinNum</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint64 coinnum() const;
  inline void set_coinnum(::google::protobuf::uint64 value);

  // optional uint32 Rank = 3;
  inline bool has_rank() const;
  inline void clear_rank();
  static const int kRankFieldNumber = 3;
  /*FOR2LUA
  <Record>
  	<name>TBigHuntAllianceCoinRankList</name>
  	<Function>
  		<name>rank</name>
  		<replaceName>Rank</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_rank</name>
  		<replaceName>Rank</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_rank</name>
  		<replaceName>Rank</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 rank() const;
  inline void set_rank(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:pb.TBigHuntAllianceCoinRankList)
 private:
  inline void set_has_allianceinfo();
  inline void clear_has_allianceinfo();
  inline void set_has_coinnum();
  inline void clear_has_coinnum();
  inline void set_has_rank();
  inline void clear_has_rank();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::pb::TAllianceSimpleInfo* allianceinfo_;
  ::google::protobuf::uint64 coinnum_;
  ::google::protobuf::uint32 rank_;
  friend void  protobuf_AddDesc_net_2fBigHunt_2eproto();
  friend void protobuf_AssignDesc_net_2fBigHunt_2eproto();
  friend void protobuf_ShutdownFile_net_2fBigHunt_2eproto();

  void InitAsDefaultInstance();
  static TBigHuntAllianceCoinRankList* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TBigHuntAllianceCoinListRankReq</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/BigHunt.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TBigHuntAllianceCoinListRankReq : public ::google::protobuf::Message {
 public:
  TBigHuntAllianceCoinListRankReq();
  virtual ~TBigHuntAllianceCoinListRankReq();

  TBigHuntAllianceCoinListRankReq(const TBigHuntAllianceCoinListRankReq& from);

  inline TBigHuntAllianceCoinListRankReq& operator=(const TBigHuntAllianceCoinListRankReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TBigHuntAllianceCoinListRankReq& default_instance();

  void Swap(TBigHuntAllianceCoinListRankReq* other);

  // implements Message ----------------------------------------------

  TBigHuntAllianceCoinListRankReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TBigHuntAllianceCoinListRankReq& from);
  void MergeFrom(const TBigHuntAllianceCoinListRankReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 Offset = 1;
  inline bool has_offset() const;
  inline void clear_offset();
  static const int kOffsetFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TBigHuntAllianceCoinListRankReq</name>
  	<Function>
  		<name>offset</name>
  		<replaceName>Offset</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_offset</name>
  		<replaceName>Offset</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_offset</name>
  		<replaceName>Offset</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 offset() const;
  inline void set_offset(::google::protobuf::uint32 value);

  // optional uint32 Limit = 2;
  inline bool has_limit() const;
  inline void clear_limit();
  static const int kLimitFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TBigHuntAllianceCoinListRankReq</name>
  	<Function>
  		<name>limit</name>
  		<replaceName>Limit</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_limit</name>
  		<replaceName>Limit</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_limit</name>
  		<replaceName>Limit</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 limit() const;
  inline void set_limit(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:pb.TBigHuntAllianceCoinListRankReq)
 private:
  inline void set_has_offset();
  inline void clear_has_offset();
  inline void set_has_limit();
  inline void clear_has_limit();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 offset_;
  ::google::protobuf::uint32 limit_;
  friend void  protobuf_AddDesc_net_2fBigHunt_2eproto();
  friend void protobuf_AssignDesc_net_2fBigHunt_2eproto();
  friend void protobuf_ShutdownFile_net_2fBigHunt_2eproto();

  void InitAsDefaultInstance();
  static TBigHuntAllianceCoinListRankReq* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TBigHuntAllianceCoinListRankRsp</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/BigHunt.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TBigHuntAllianceCoinListRankRsp : public ::google::protobuf::Message {
 public:
  TBigHuntAllianceCoinListRankRsp();
  virtual ~TBigHuntAllianceCoinListRankRsp();

  TBigHuntAllianceCoinListRankRsp(const TBigHuntAllianceCoinListRankRsp& from);

  inline TBigHuntAllianceCoinListRankRsp& operator=(const TBigHuntAllianceCoinListRankRsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TBigHuntAllianceCoinListRankRsp& default_instance();

  void Swap(TBigHuntAllianceCoinListRankRsp* other);

  // implements Message ----------------------------------------------

  TBigHuntAllianceCoinListRankRsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TBigHuntAllianceCoinListRankRsp& from);
  void MergeFrom(const TBigHuntAllianceCoinListRankRsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .pb.TBigHuntAllianceCoinRankList SelfAllianceRank = 1;
  inline bool has_selfalliancerank() const;
  inline void clear_selfalliancerank();
  static const int kSelfAllianceRankFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TBigHuntAllianceCoinListRankRsp</name>
  	<Function>
  		<name>selfalliancerank</name>
  		<replaceName>SelfAllianceRank</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_selfalliancerank</name>
  		<replaceName>SelfAllianceRank</replaceName>
  		<handler>descripter = pb_set_message_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_allocated_selfalliancerank</name>
  		<replaceName>SelfAllianceRank</replaceName>
  		<handler>descripter = pb_set_message_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_selfalliancerank</name>
  		<replaceName>SelfAllianceRank</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TBigHuntAllianceCoinRankList& selfalliancerank() const;
  inline ::pb::TBigHuntAllianceCoinRankList* mutable_selfalliancerank();
  inline ::pb::TBigHuntAllianceCoinRankList* release_selfalliancerank();
  inline void set_allocated_selfalliancerank(::pb::TBigHuntAllianceCoinRankList* selfalliancerank);

  // repeated .pb.TBigHuntAllianceCoinRankList AllianceListArr = 2;
  inline int alliancelistarr_size() const;
  inline void clear_alliancelistarr();
  static const int kAllianceListArrFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TBigHuntAllianceCoinListRankRsp</name>
  	<Function>
  		<name>alliancelistarr</name>
  		<replaceName>AllianceListArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_alliancelistarr</name>
  		<replaceName>AllianceListArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_alliancelistarr</name>
  		<replaceName>AllianceListArr</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_alliancelistarr</name>
  		<replaceName>AllianceListArr</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>alliancelistarr_size</name>
  		<replaceName>AllianceListArr</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TBigHuntAllianceCoinRankList& alliancelistarr(int index) const;
  inline ::pb::TBigHuntAllianceCoinRankList* mutable_alliancelistarr(int index);
  inline ::pb::TBigHuntAllianceCoinRankList* add_alliancelistarr();
  inline const ::google::protobuf::RepeatedPtrField< ::pb::TBigHuntAllianceCoinRankList >&
      alliancelistarr() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb::TBigHuntAllianceCoinRankList >*
      mutable_alliancelistarr();

  // @@protoc_insertion_point(class_scope:pb.TBigHuntAllianceCoinListRankRsp)
 private:
  inline void set_has_selfalliancerank();
  inline void clear_has_selfalliancerank();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::pb::TBigHuntAllianceCoinRankList* selfalliancerank_;
  ::google::protobuf::RepeatedPtrField< ::pb::TBigHuntAllianceCoinRankList > alliancelistarr_;
  friend void  protobuf_AddDesc_net_2fBigHunt_2eproto();
  friend void protobuf_AssignDesc_net_2fBigHunt_2eproto();
  friend void protobuf_ShutdownFile_net_2fBigHunt_2eproto();

  void InitAsDefaultInstance();
  static TBigHuntAllianceCoinListRankRsp* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TBigHuntBossSelfDamageRankList</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/BigHunt.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TBigHuntBossSelfDamageRankList : public ::google::protobuf::Message {
 public:
  TBigHuntBossSelfDamageRankList();
  virtual ~TBigHuntBossSelfDamageRankList();

  TBigHuntBossSelfDamageRankList(const TBigHuntBossSelfDamageRankList& from);

  inline TBigHuntBossSelfDamageRankList& operator=(const TBigHuntBossSelfDamageRankList& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TBigHuntBossSelfDamageRankList& default_instance();

  void Swap(TBigHuntBossSelfDamageRankList* other);

  // implements Message ----------------------------------------------

  TBigHuntBossSelfDamageRankList* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TBigHuntBossSelfDamageRankList& from);
  void MergeFrom(const TBigHuntBossSelfDamageRankList& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint64 Damage = 1;
  inline bool has_damage() const;
  inline void clear_damage();
  static const int kDamageFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TBigHuntBossSelfDamageRankList</name>
  	<Function>
  		<name>damage</name>
  		<replaceName>Damage</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_damage</name>
  		<replaceName>Damage</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_damage</name>
  		<replaceName>Damage</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint64 damage() const;
  inline void set_damage(::google::protobuf::uint64 value);

  // optional .pb.TUserSimpleInfo UserInfo = 2;
  inline bool has_userinfo() const;
  inline void clear_userinfo();
  static const int kUserInfoFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TBigHuntBossSelfDamageRankList</name>
  	<Function>
  		<name>userinfo</name>
  		<replaceName>UserInfo</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_userinfo</name>
  		<replaceName>UserInfo</replaceName>
  		<handler>descripter = pb_set_message_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_allocated_userinfo</name>
  		<replaceName>UserInfo</replaceName>
  		<handler>descripter = pb_set_message_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_userinfo</name>
  		<replaceName>UserInfo</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TUserSimpleInfo& userinfo() const;
  inline ::pb::TUserSimpleInfo* mutable_userinfo();
  inline ::pb::TUserSimpleInfo* release_userinfo();
  inline void set_allocated_userinfo(::pb::TUserSimpleInfo* userinfo);

  // optional uint32 Rank = 3;
  inline bool has_rank() const;
  inline void clear_rank();
  static const int kRankFieldNumber = 3;
  /*FOR2LUA
  <Record>
  	<name>TBigHuntBossSelfDamageRankList</name>
  	<Function>
  		<name>rank</name>
  		<replaceName>Rank</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_rank</name>
  		<replaceName>Rank</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_rank</name>
  		<replaceName>Rank</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 rank() const;
  inline void set_rank(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:pb.TBigHuntBossSelfDamageRankList)
 private:
  inline void set_has_damage();
  inline void clear_has_damage();
  inline void set_has_userinfo();
  inline void clear_has_userinfo();
  inline void set_has_rank();
  inline void clear_has_rank();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint64 damage_;
  ::pb::TUserSimpleInfo* userinfo_;
  ::google::protobuf::uint32 rank_;
  friend void  protobuf_AddDesc_net_2fBigHunt_2eproto();
  friend void protobuf_AssignDesc_net_2fBigHunt_2eproto();
  friend void protobuf_ShutdownFile_net_2fBigHunt_2eproto();

  void InitAsDefaultInstance();
  static TBigHuntBossSelfDamageRankList* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TBigHuntGetBossSelfDamageRankListReq</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/BigHunt.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TBigHuntGetBossSelfDamageRankListReq : public ::google::protobuf::Message {
 public:
  TBigHuntGetBossSelfDamageRankListReq();
  virtual ~TBigHuntGetBossSelfDamageRankListReq();

  TBigHuntGetBossSelfDamageRankListReq(const TBigHuntGetBossSelfDamageRankListReq& from);

  inline TBigHuntGetBossSelfDamageRankListReq& operator=(const TBigHuntGetBossSelfDamageRankListReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TBigHuntGetBossSelfDamageRankListReq& default_instance();

  void Swap(TBigHuntGetBossSelfDamageRankListReq* other);

  // implements Message ----------------------------------------------

  TBigHuntGetBossSelfDamageRankListReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TBigHuntGetBossSelfDamageRankListReq& from);
  void MergeFrom(const TBigHuntGetBossSelfDamageRankListReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 BossId = 1;
  inline bool has_bossid() const;
  inline void clear_bossid();
  static const int kBossIdFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TBigHuntGetBossSelfDamageRankListReq</name>
  	<Function>
  		<name>bossid</name>
  		<replaceName>BossId</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_bossid</name>
  		<replaceName>BossId</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_bossid</name>
  		<replaceName>BossId</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 bossid() const;
  inline void set_bossid(::google::protobuf::uint32 value);

  // optional uint32 Offset = 2;
  inline bool has_offset() const;
  inline void clear_offset();
  static const int kOffsetFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TBigHuntGetBossSelfDamageRankListReq</name>
  	<Function>
  		<name>offset</name>
  		<replaceName>Offset</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_offset</name>
  		<replaceName>Offset</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_offset</name>
  		<replaceName>Offset</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 offset() const;
  inline void set_offset(::google::protobuf::uint32 value);

  // optional uint32 Limit = 3;
  inline bool has_limit() const;
  inline void clear_limit();
  static const int kLimitFieldNumber = 3;
  /*FOR2LUA
  <Record>
  	<name>TBigHuntGetBossSelfDamageRankListReq</name>
  	<Function>
  		<name>limit</name>
  		<replaceName>Limit</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_limit</name>
  		<replaceName>Limit</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_limit</name>
  		<replaceName>Limit</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 limit() const;
  inline void set_limit(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:pb.TBigHuntGetBossSelfDamageRankListReq)
 private:
  inline void set_has_bossid();
  inline void clear_has_bossid();
  inline void set_has_offset();
  inline void clear_has_offset();
  inline void set_has_limit();
  inline void clear_has_limit();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 bossid_;
  ::google::protobuf::uint32 offset_;
  ::google::protobuf::uint32 limit_;
  friend void  protobuf_AddDesc_net_2fBigHunt_2eproto();
  friend void protobuf_AssignDesc_net_2fBigHunt_2eproto();
  friend void protobuf_ShutdownFile_net_2fBigHunt_2eproto();

  void InitAsDefaultInstance();
  static TBigHuntGetBossSelfDamageRankListReq* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TBigHuntGetBossSelfDamageRankListRsp</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/BigHunt.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TBigHuntGetBossSelfDamageRankListRsp : public ::google::protobuf::Message {
 public:
  TBigHuntGetBossSelfDamageRankListRsp();
  virtual ~TBigHuntGetBossSelfDamageRankListRsp();

  TBigHuntGetBossSelfDamageRankListRsp(const TBigHuntGetBossSelfDamageRankListRsp& from);

  inline TBigHuntGetBossSelfDamageRankListRsp& operator=(const TBigHuntGetBossSelfDamageRankListRsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TBigHuntGetBossSelfDamageRankListRsp& default_instance();

  void Swap(TBigHuntGetBossSelfDamageRankListRsp* other);

  // implements Message ----------------------------------------------

  TBigHuntGetBossSelfDamageRankListRsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TBigHuntGetBossSelfDamageRankListRsp& from);
  void MergeFrom(const TBigHuntGetBossSelfDamageRankListRsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .pb.TBigHuntBossSelfDamageRankList MyRank = 1;
  inline bool has_myrank() const;
  inline void clear_myrank();
  static const int kMyRankFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TBigHuntGetBossSelfDamageRankListRsp</name>
  	<Function>
  		<name>myrank</name>
  		<replaceName>MyRank</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_myrank</name>
  		<replaceName>MyRank</replaceName>
  		<handler>descripter = pb_set_message_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_allocated_myrank</name>
  		<replaceName>MyRank</replaceName>
  		<handler>descripter = pb_set_message_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_myrank</name>
  		<replaceName>MyRank</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TBigHuntBossSelfDamageRankList& myrank() const;
  inline ::pb::TBigHuntBossSelfDamageRankList* mutable_myrank();
  inline ::pb::TBigHuntBossSelfDamageRankList* release_myrank();
  inline void set_allocated_myrank(::pb::TBigHuntBossSelfDamageRankList* myrank);

  // repeated .pb.TBigHuntBossSelfDamageRankList UserListArr = 2;
  inline int userlistarr_size() const;
  inline void clear_userlistarr();
  static const int kUserListArrFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TBigHuntGetBossSelfDamageRankListRsp</name>
  	<Function>
  		<name>userlistarr</name>
  		<replaceName>UserListArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_userlistarr</name>
  		<replaceName>UserListArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_userlistarr</name>
  		<replaceName>UserListArr</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_userlistarr</name>
  		<replaceName>UserListArr</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>userlistarr_size</name>
  		<replaceName>UserListArr</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TBigHuntBossSelfDamageRankList& userlistarr(int index) const;
  inline ::pb::TBigHuntBossSelfDamageRankList* mutable_userlistarr(int index);
  inline ::pb::TBigHuntBossSelfDamageRankList* add_userlistarr();
  inline const ::google::protobuf::RepeatedPtrField< ::pb::TBigHuntBossSelfDamageRankList >&
      userlistarr() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb::TBigHuntBossSelfDamageRankList >*
      mutable_userlistarr();

  // optional uint32 BossId = 3;
  inline bool has_bossid() const;
  inline void clear_bossid();
  static const int kBossIdFieldNumber = 3;
  /*FOR2LUA
  <Record>
  	<name>TBigHuntGetBossSelfDamageRankListRsp</name>
  	<Function>
  		<name>bossid</name>
  		<replaceName>BossId</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_bossid</name>
  		<replaceName>BossId</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_bossid</name>
  		<replaceName>BossId</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 bossid() const;
  inline void set_bossid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:pb.TBigHuntGetBossSelfDamageRankListRsp)
 private:
  inline void set_has_myrank();
  inline void clear_has_myrank();
  inline void set_has_bossid();
  inline void clear_has_bossid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::pb::TBigHuntBossSelfDamageRankList* myrank_;
  ::google::protobuf::RepeatedPtrField< ::pb::TBigHuntBossSelfDamageRankList > userlistarr_;
  ::google::protobuf::uint32 bossid_;
  friend void  protobuf_AddDesc_net_2fBigHunt_2eproto();
  friend void protobuf_AssignDesc_net_2fBigHunt_2eproto();
  friend void protobuf_ShutdownFile_net_2fBigHunt_2eproto();

  void InitAsDefaultInstance();
  static TBigHuntGetBossSelfDamageRankListRsp* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TBigHuntGetSelfCoinRankList</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/BigHunt.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TBigHuntGetSelfCoinRankList : public ::google::protobuf::Message {
 public:
  TBigHuntGetSelfCoinRankList();
  virtual ~TBigHuntGetSelfCoinRankList();

  TBigHuntGetSelfCoinRankList(const TBigHuntGetSelfCoinRankList& from);

  inline TBigHuntGetSelfCoinRankList& operator=(const TBigHuntGetSelfCoinRankList& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TBigHuntGetSelfCoinRankList& default_instance();

  void Swap(TBigHuntGetSelfCoinRankList* other);

  // implements Message ----------------------------------------------

  TBigHuntGetSelfCoinRankList* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TBigHuntGetSelfCoinRankList& from);
  void MergeFrom(const TBigHuntGetSelfCoinRankList& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint64 CoinNum = 1;
  inline bool has_coinnum() const;
  inline void clear_coinnum();
  static const int kCoinNumFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TBigHuntGetSelfCoinRankList</name>
  	<Function>
  		<name>coinnum</name>
  		<replaceName>CoinNum</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_coinnum</name>
  		<replaceName>CoinNum</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_coinnum</name>
  		<replaceName>CoinNum</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint64 coinnum() const;
  inline void set_coinnum(::google::protobuf::uint64 value);

  // optional .pb.TUserSimpleInfo UserInfo = 2;
  inline bool has_userinfo() const;
  inline void clear_userinfo();
  static const int kUserInfoFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TBigHuntGetSelfCoinRankList</name>
  	<Function>
  		<name>userinfo</name>
  		<replaceName>UserInfo</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_userinfo</name>
  		<replaceName>UserInfo</replaceName>
  		<handler>descripter = pb_set_message_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_allocated_userinfo</name>
  		<replaceName>UserInfo</replaceName>
  		<handler>descripter = pb_set_message_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_userinfo</name>
  		<replaceName>UserInfo</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TUserSimpleInfo& userinfo() const;
  inline ::pb::TUserSimpleInfo* mutable_userinfo();
  inline ::pb::TUserSimpleInfo* release_userinfo();
  inline void set_allocated_userinfo(::pb::TUserSimpleInfo* userinfo);

  // optional uint32 Rank = 3;
  inline bool has_rank() const;
  inline void clear_rank();
  static const int kRankFieldNumber = 3;
  /*FOR2LUA
  <Record>
  	<name>TBigHuntGetSelfCoinRankList</name>
  	<Function>
  		<name>rank</name>
  		<replaceName>Rank</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_rank</name>
  		<replaceName>Rank</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_rank</name>
  		<replaceName>Rank</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 rank() const;
  inline void set_rank(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:pb.TBigHuntGetSelfCoinRankList)
 private:
  inline void set_has_coinnum();
  inline void clear_has_coinnum();
  inline void set_has_userinfo();
  inline void clear_has_userinfo();
  inline void set_has_rank();
  inline void clear_has_rank();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint64 coinnum_;
  ::pb::TUserSimpleInfo* userinfo_;
  ::google::protobuf::uint32 rank_;
  friend void  protobuf_AddDesc_net_2fBigHunt_2eproto();
  friend void protobuf_AssignDesc_net_2fBigHunt_2eproto();
  friend void protobuf_ShutdownFile_net_2fBigHunt_2eproto();

  void InitAsDefaultInstance();
  static TBigHuntGetSelfCoinRankList* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TBigHuntGetSelfCoinRankListReq</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/BigHunt.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TBigHuntGetSelfCoinRankListReq : public ::google::protobuf::Message {
 public:
  TBigHuntGetSelfCoinRankListReq();
  virtual ~TBigHuntGetSelfCoinRankListReq();

  TBigHuntGetSelfCoinRankListReq(const TBigHuntGetSelfCoinRankListReq& from);

  inline TBigHuntGetSelfCoinRankListReq& operator=(const TBigHuntGetSelfCoinRankListReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TBigHuntGetSelfCoinRankListReq& default_instance();

  void Swap(TBigHuntGetSelfCoinRankListReq* other);

  // implements Message ----------------------------------------------

  TBigHuntGetSelfCoinRankListReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TBigHuntGetSelfCoinRankListReq& from);
  void MergeFrom(const TBigHuntGetSelfCoinRankListReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 Offset = 1;
  inline bool has_offset() const;
  inline void clear_offset();
  static const int kOffsetFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TBigHuntGetSelfCoinRankListReq</name>
  	<Function>
  		<name>offset</name>
  		<replaceName>Offset</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_offset</name>
  		<replaceName>Offset</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_offset</name>
  		<replaceName>Offset</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 offset() const;
  inline void set_offset(::google::protobuf::uint32 value);

  // optional uint32 Limit = 2;
  inline bool has_limit() const;
  inline void clear_limit();
  static const int kLimitFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TBigHuntGetSelfCoinRankListReq</name>
  	<Function>
  		<name>limit</name>
  		<replaceName>Limit</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_limit</name>
  		<replaceName>Limit</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_limit</name>
  		<replaceName>Limit</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 limit() const;
  inline void set_limit(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:pb.TBigHuntGetSelfCoinRankListReq)
 private:
  inline void set_has_offset();
  inline void clear_has_offset();
  inline void set_has_limit();
  inline void clear_has_limit();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 offset_;
  ::google::protobuf::uint32 limit_;
  friend void  protobuf_AddDesc_net_2fBigHunt_2eproto();
  friend void protobuf_AssignDesc_net_2fBigHunt_2eproto();
  friend void protobuf_ShutdownFile_net_2fBigHunt_2eproto();

  void InitAsDefaultInstance();
  static TBigHuntGetSelfCoinRankListReq* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TBigHuntGetSelfCoinRankListRsp</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/BigHunt.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TBigHuntGetSelfCoinRankListRsp : public ::google::protobuf::Message {
 public:
  TBigHuntGetSelfCoinRankListRsp();
  virtual ~TBigHuntGetSelfCoinRankListRsp();

  TBigHuntGetSelfCoinRankListRsp(const TBigHuntGetSelfCoinRankListRsp& from);

  inline TBigHuntGetSelfCoinRankListRsp& operator=(const TBigHuntGetSelfCoinRankListRsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TBigHuntGetSelfCoinRankListRsp& default_instance();

  void Swap(TBigHuntGetSelfCoinRankListRsp* other);

  // implements Message ----------------------------------------------

  TBigHuntGetSelfCoinRankListRsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TBigHuntGetSelfCoinRankListRsp& from);
  void MergeFrom(const TBigHuntGetSelfCoinRankListRsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .pb.TBigHuntGetSelfCoinRankList MyRank = 1;
  inline bool has_myrank() const;
  inline void clear_myrank();
  static const int kMyRankFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TBigHuntGetSelfCoinRankListRsp</name>
  	<Function>
  		<name>myrank</name>
  		<replaceName>MyRank</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_myrank</name>
  		<replaceName>MyRank</replaceName>
  		<handler>descripter = pb_set_message_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_allocated_myrank</name>
  		<replaceName>MyRank</replaceName>
  		<handler>descripter = pb_set_message_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_myrank</name>
  		<replaceName>MyRank</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TBigHuntGetSelfCoinRankList& myrank() const;
  inline ::pb::TBigHuntGetSelfCoinRankList* mutable_myrank();
  inline ::pb::TBigHuntGetSelfCoinRankList* release_myrank();
  inline void set_allocated_myrank(::pb::TBigHuntGetSelfCoinRankList* myrank);

  // repeated .pb.TBigHuntGetSelfCoinRankList AllUserRankInfo = 2;
  inline int alluserrankinfo_size() const;
  inline void clear_alluserrankinfo();
  static const int kAllUserRankInfoFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TBigHuntGetSelfCoinRankListRsp</name>
  	<Function>
  		<name>alluserrankinfo</name>
  		<replaceName>AllUserRankInfo</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_alluserrankinfo</name>
  		<replaceName>AllUserRankInfo</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_alluserrankinfo</name>
  		<replaceName>AllUserRankInfo</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_alluserrankinfo</name>
  		<replaceName>AllUserRankInfo</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>alluserrankinfo_size</name>
  		<replaceName>AllUserRankInfo</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TBigHuntGetSelfCoinRankList& alluserrankinfo(int index) const;
  inline ::pb::TBigHuntGetSelfCoinRankList* mutable_alluserrankinfo(int index);
  inline ::pb::TBigHuntGetSelfCoinRankList* add_alluserrankinfo();
  inline const ::google::protobuf::RepeatedPtrField< ::pb::TBigHuntGetSelfCoinRankList >&
      alluserrankinfo() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb::TBigHuntGetSelfCoinRankList >*
      mutable_alluserrankinfo();

  // @@protoc_insertion_point(class_scope:pb.TBigHuntGetSelfCoinRankListRsp)
 private:
  inline void set_has_myrank();
  inline void clear_has_myrank();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::pb::TBigHuntGetSelfCoinRankList* myrank_;
  ::google::protobuf::RepeatedPtrField< ::pb::TBigHuntGetSelfCoinRankList > alluserrankinfo_;
  friend void  protobuf_AddDesc_net_2fBigHunt_2eproto();
  friend void protobuf_AssignDesc_net_2fBigHunt_2eproto();
  friend void protobuf_ShutdownFile_net_2fBigHunt_2eproto();

  void InitAsDefaultInstance();
  static TBigHuntGetSelfCoinRankListRsp* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TBigHuntCancelSuppressReq</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/BigHunt.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TBigHuntCancelSuppressReq : public ::google::protobuf::Message {
 public:
  TBigHuntCancelSuppressReq();
  virtual ~TBigHuntCancelSuppressReq();

  TBigHuntCancelSuppressReq(const TBigHuntCancelSuppressReq& from);

  inline TBigHuntCancelSuppressReq& operator=(const TBigHuntCancelSuppressReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TBigHuntCancelSuppressReq& default_instance();

  void Swap(TBigHuntCancelSuppressReq* other);

  // implements Message ----------------------------------------------

  TBigHuntCancelSuppressReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TBigHuntCancelSuppressReq& from);
  void MergeFrom(const TBigHuntCancelSuppressReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 MonsterId = 1;
  inline bool has_monsterid() const;
  inline void clear_monsterid();
  static const int kMonsterIdFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TBigHuntCancelSuppressReq</name>
  	<Function>
  		<name>monsterid</name>
  		<replaceName>MonsterId</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_monsterid</name>
  		<replaceName>MonsterId</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_monsterid</name>
  		<replaceName>MonsterId</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 monsterid() const;
  inline void set_monsterid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:pb.TBigHuntCancelSuppressReq)
 private:
  inline void set_has_monsterid();
  inline void clear_has_monsterid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 monsterid_;
  friend void  protobuf_AddDesc_net_2fBigHunt_2eproto();
  friend void protobuf_AssignDesc_net_2fBigHunt_2eproto();
  friend void protobuf_ShutdownFile_net_2fBigHunt_2eproto();

  void InitAsDefaultInstance();
  static TBigHuntCancelSuppressReq* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TBigHuntMonsterBeKilledInfo</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/BigHunt.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TBigHuntMonsterBeKilledInfo : public ::google::protobuf::Message {
 public:
  TBigHuntMonsterBeKilledInfo();
  virtual ~TBigHuntMonsterBeKilledInfo();

  TBigHuntMonsterBeKilledInfo(const TBigHuntMonsterBeKilledInfo& from);

  inline TBigHuntMonsterBeKilledInfo& operator=(const TBigHuntMonsterBeKilledInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TBigHuntMonsterBeKilledInfo& default_instance();

  void Swap(TBigHuntMonsterBeKilledInfo* other);

  // implements Message ----------------------------------------------

  TBigHuntMonsterBeKilledInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TBigHuntMonsterBeKilledInfo& from);
  void MergeFrom(const TBigHuntMonsterBeKilledInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 MonsterId = 1;
  inline bool has_monsterid() const;
  inline void clear_monsterid();
  static const int kMonsterIdFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TBigHuntMonsterBeKilledInfo</name>
  	<Function>
  		<name>monsterid</name>
  		<replaceName>MonsterId</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_monsterid</name>
  		<replaceName>MonsterId</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_monsterid</name>
  		<replaceName>MonsterId</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 monsterid() const;
  inline void set_monsterid(::google::protobuf::uint32 value);

  // optional uint64 Hp = 2;
  inline bool has_hp() const;
  inline void clear_hp();
  static const int kHpFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TBigHuntMonsterBeKilledInfo</name>
  	<Function>
  		<name>hp</name>
  		<replaceName>Hp</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_hp</name>
  		<replaceName>Hp</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_hp</name>
  		<replaceName>Hp</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint64 hp() const;
  inline void set_hp(::google::protobuf::uint64 value);

  // optional .pb.TUserSimpleInfo UserInfo = 3;
  inline bool has_userinfo() const;
  inline void clear_userinfo();
  static const int kUserInfoFieldNumber = 3;
  /*FOR2LUA
  <Record>
  	<name>TBigHuntMonsterBeKilledInfo</name>
  	<Function>
  		<name>userinfo</name>
  		<replaceName>UserInfo</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_userinfo</name>
  		<replaceName>UserInfo</replaceName>
  		<handler>descripter = pb_set_message_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_allocated_userinfo</name>
  		<replaceName>UserInfo</replaceName>
  		<handler>descripter = pb_set_message_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_userinfo</name>
  		<replaceName>UserInfo</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TUserSimpleInfo& userinfo() const;
  inline ::pb::TUserSimpleInfo* mutable_userinfo();
  inline ::pb::TUserSimpleInfo* release_userinfo();
  inline void set_allocated_userinfo(::pb::TUserSimpleInfo* userinfo);

  // @@protoc_insertion_point(class_scope:pb.TBigHuntMonsterBeKilledInfo)
 private:
  inline void set_has_monsterid();
  inline void clear_has_monsterid();
  inline void set_has_hp();
  inline void clear_has_hp();
  inline void set_has_userinfo();
  inline void clear_has_userinfo();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint64 hp_;
  ::pb::TUserSimpleInfo* userinfo_;
  ::google::protobuf::uint32 monsterid_;
  friend void  protobuf_AddDesc_net_2fBigHunt_2eproto();
  friend void protobuf_AssignDesc_net_2fBigHunt_2eproto();
  friend void protobuf_ShutdownFile_net_2fBigHunt_2eproto();

  void InitAsDefaultInstance();
  static TBigHuntMonsterBeKilledInfo* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TBigHuntMonsterBeKilledNotify</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/BigHunt.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TBigHuntMonsterBeKilledNotify : public ::google::protobuf::Message {
 public:
  TBigHuntMonsterBeKilledNotify();
  virtual ~TBigHuntMonsterBeKilledNotify();

  TBigHuntMonsterBeKilledNotify(const TBigHuntMonsterBeKilledNotify& from);

  inline TBigHuntMonsterBeKilledNotify& operator=(const TBigHuntMonsterBeKilledNotify& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TBigHuntMonsterBeKilledNotify& default_instance();

  void Swap(TBigHuntMonsterBeKilledNotify* other);

  // implements Message ----------------------------------------------

  TBigHuntMonsterBeKilledNotify* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TBigHuntMonsterBeKilledNotify& from);
  void MergeFrom(const TBigHuntMonsterBeKilledNotify& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .pb.TBigHuntMonsterBeKilledInfo MonsterInfo = 1;
  inline bool has_monsterinfo() const;
  inline void clear_monsterinfo();
  static const int kMonsterInfoFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TBigHuntMonsterBeKilledNotify</name>
  	<Function>
  		<name>monsterinfo</name>
  		<replaceName>MonsterInfo</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_monsterinfo</name>
  		<replaceName>MonsterInfo</replaceName>
  		<handler>descripter = pb_set_message_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_allocated_monsterinfo</name>
  		<replaceName>MonsterInfo</replaceName>
  		<handler>descripter = pb_set_message_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_monsterinfo</name>
  		<replaceName>MonsterInfo</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TBigHuntMonsterBeKilledInfo& monsterinfo() const;
  inline ::pb::TBigHuntMonsterBeKilledInfo* mutable_monsterinfo();
  inline ::pb::TBigHuntMonsterBeKilledInfo* release_monsterinfo();
  inline void set_allocated_monsterinfo(::pb::TBigHuntMonsterBeKilledInfo* monsterinfo);

  // @@protoc_insertion_point(class_scope:pb.TBigHuntMonsterBeKilledNotify)
 private:
  inline void set_has_monsterinfo();
  inline void clear_has_monsterinfo();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::pb::TBigHuntMonsterBeKilledInfo* monsterinfo_;
  friend void  protobuf_AddDesc_net_2fBigHunt_2eproto();
  friend void protobuf_AssignDesc_net_2fBigHunt_2eproto();
  friend void protobuf_ShutdownFile_net_2fBigHunt_2eproto();

  void InitAsDefaultInstance();
  static TBigHuntMonsterBeKilledNotify* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TBigHuntDynamicNotify</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/BigHunt.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TBigHuntDynamicNotify : public ::google::protobuf::Message {
 public:
  TBigHuntDynamicNotify();
  virtual ~TBigHuntDynamicNotify();

  TBigHuntDynamicNotify(const TBigHuntDynamicNotify& from);

  inline TBigHuntDynamicNotify& operator=(const TBigHuntDynamicNotify& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TBigHuntDynamicNotify& default_instance();

  void Swap(TBigHuntDynamicNotify* other);

  // implements Message ----------------------------------------------

  TBigHuntDynamicNotify* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TBigHuntDynamicNotify& from);
  void MergeFrom(const TBigHuntDynamicNotify& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .pb.TBigHuntMapDynamicInfo RecordInfo = 1;
  inline bool has_recordinfo() const;
  inline void clear_recordinfo();
  static const int kRecordInfoFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TBigHuntDynamicNotify</name>
  	<Function>
  		<name>recordinfo</name>
  		<replaceName>RecordInfo</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_recordinfo</name>
  		<replaceName>RecordInfo</replaceName>
  		<handler>descripter = pb_set_message_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_allocated_recordinfo</name>
  		<replaceName>RecordInfo</replaceName>
  		<handler>descripter = pb_set_message_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_recordinfo</name>
  		<replaceName>RecordInfo</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TBigHuntMapDynamicInfo& recordinfo() const;
  inline ::pb::TBigHuntMapDynamicInfo* mutable_recordinfo();
  inline ::pb::TBigHuntMapDynamicInfo* release_recordinfo();
  inline void set_allocated_recordinfo(::pb::TBigHuntMapDynamicInfo* recordinfo);

  // @@protoc_insertion_point(class_scope:pb.TBigHuntDynamicNotify)
 private:
  inline void set_has_recordinfo();
  inline void clear_has_recordinfo();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::pb::TBigHuntMapDynamicInfo* recordinfo_;
  friend void  protobuf_AddDesc_net_2fBigHunt_2eproto();
  friend void protobuf_AssignDesc_net_2fBigHunt_2eproto();
  friend void protobuf_ShutdownFile_net_2fBigHunt_2eproto();

  void InitAsDefaultInstance();
  static TBigHuntDynamicNotify* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TBigHuntUserDimensionNotify</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/BigHunt.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TBigHuntUserDimensionNotify : public ::google::protobuf::Message {
 public:
  TBigHuntUserDimensionNotify();
  virtual ~TBigHuntUserDimensionNotify();

  TBigHuntUserDimensionNotify(const TBigHuntUserDimensionNotify& from);

  inline TBigHuntUserDimensionNotify& operator=(const TBigHuntUserDimensionNotify& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TBigHuntUserDimensionNotify& default_instance();

  void Swap(TBigHuntUserDimensionNotify* other);

  // implements Message ----------------------------------------------

  TBigHuntUserDimensionNotify* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TBigHuntUserDimensionNotify& from);
  void MergeFrom(const TBigHuntUserDimensionNotify& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 Id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TBigHuntUserDimensionNotify</name>
  	<Function>
  		<name>id</name>
  		<replaceName>Id</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_id</name>
  		<replaceName>Id</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_id</name>
  		<replaceName>Id</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 id() const;
  inline void set_id(::google::protobuf::uint32 value);

  // optional uint32 nowLevel = 2;
  inline bool has_nowlevel() const;
  inline void clear_nowlevel();
  static const int kNowLevelFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TBigHuntUserDimensionNotify</name>
  	<Function>
  		<name>nowlevel</name>
  		<replaceName>nowLevel</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_nowlevel</name>
  		<replaceName>nowLevel</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_nowlevel</name>
  		<replaceName>nowLevel</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 nowlevel() const;
  inline void set_nowlevel(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:pb.TBigHuntUserDimensionNotify)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_nowlevel();
  inline void clear_has_nowlevel();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 id_;
  ::google::protobuf::uint32 nowlevel_;
  friend void  protobuf_AddDesc_net_2fBigHunt_2eproto();
  friend void protobuf_AssignDesc_net_2fBigHunt_2eproto();
  friend void protobuf_ShutdownFile_net_2fBigHunt_2eproto();

  void InitAsDefaultInstance();
  static TBigHuntUserDimensionNotify* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TBigHuntCancelSuppressNotify</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/BigHunt.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TBigHuntCancelSuppressNotify : public ::google::protobuf::Message {
 public:
  TBigHuntCancelSuppressNotify();
  virtual ~TBigHuntCancelSuppressNotify();

  TBigHuntCancelSuppressNotify(const TBigHuntCancelSuppressNotify& from);

  inline TBigHuntCancelSuppressNotify& operator=(const TBigHuntCancelSuppressNotify& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TBigHuntCancelSuppressNotify& default_instance();

  void Swap(TBigHuntCancelSuppressNotify* other);

  // implements Message ----------------------------------------------

  TBigHuntCancelSuppressNotify* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TBigHuntCancelSuppressNotify& from);
  void MergeFrom(const TBigHuntCancelSuppressNotify& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 MonsterId = 1;
  inline bool has_monsterid() const;
  inline void clear_monsterid();
  static const int kMonsterIdFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TBigHuntCancelSuppressNotify</name>
  	<Function>
  		<name>monsterid</name>
  		<replaceName>MonsterId</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_monsterid</name>
  		<replaceName>MonsterId</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_monsterid</name>
  		<replaceName>MonsterId</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 monsterid() const;
  inline void set_monsterid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:pb.TBigHuntCancelSuppressNotify)
 private:
  inline void set_has_monsterid();
  inline void clear_has_monsterid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 monsterid_;
  friend void  protobuf_AddDesc_net_2fBigHunt_2eproto();
  friend void protobuf_AssignDesc_net_2fBigHunt_2eproto();
  friend void protobuf_ShutdownFile_net_2fBigHunt_2eproto();

  void InitAsDefaultInstance();
  static TBigHuntCancelSuppressNotify* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TBigHuntUserDataChangeNotify</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/BigHunt.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TBigHuntUserDataChangeNotify : public ::google::protobuf::Message {
 public:
  TBigHuntUserDataChangeNotify();
  virtual ~TBigHuntUserDataChangeNotify();

  TBigHuntUserDataChangeNotify(const TBigHuntUserDataChangeNotify& from);

  inline TBigHuntUserDataChangeNotify& operator=(const TBigHuntUserDataChangeNotify& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TBigHuntUserDataChangeNotify& default_instance();

  void Swap(TBigHuntUserDataChangeNotify* other);

  // implements Message ----------------------------------------------

  TBigHuntUserDataChangeNotify* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TBigHuntUserDataChangeNotify& from);
  void MergeFrom(const TBigHuntUserDataChangeNotify& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 LeftChallengeNum = 1;
  inline bool has_leftchallengenum() const;
  inline void clear_leftchallengenum();
  static const int kLeftChallengeNumFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TBigHuntUserDataChangeNotify</name>
  	<Function>
  		<name>leftchallengenum</name>
  		<replaceName>LeftChallengeNum</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_leftchallengenum</name>
  		<replaceName>LeftChallengeNum</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_leftchallengenum</name>
  		<replaceName>LeftChallengeNum</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 leftchallengenum() const;
  inline void set_leftchallengenum(::google::protobuf::uint32 value);

  // optional uint64 SelfCoin = 2;
  inline bool has_selfcoin() const;
  inline void clear_selfcoin();
  static const int kSelfCoinFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TBigHuntUserDataChangeNotify</name>
  	<Function>
  		<name>selfcoin</name>
  		<replaceName>SelfCoin</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_selfcoin</name>
  		<replaceName>SelfCoin</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_selfcoin</name>
  		<replaceName>SelfCoin</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint64 selfcoin() const;
  inline void set_selfcoin(::google::protobuf::uint64 value);

  // optional uint64 AllianceCoin = 3;
  inline bool has_alliancecoin() const;
  inline void clear_alliancecoin();
  static const int kAllianceCoinFieldNumber = 3;
  /*FOR2LUA
  <Record>
  	<name>TBigHuntUserDataChangeNotify</name>
  	<Function>
  		<name>alliancecoin</name>
  		<replaceName>AllianceCoin</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_alliancecoin</name>
  		<replaceName>AllianceCoin</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_alliancecoin</name>
  		<replaceName>AllianceCoin</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint64 alliancecoin() const;
  inline void set_alliancecoin(::google::protobuf::uint64 value);

  // optional uint32 EliteMonster = 4;
  inline bool has_elitemonster() const;
  inline void clear_elitemonster();
  static const int kEliteMonsterFieldNumber = 4;
  /*FOR2LUA
  <Record>
  	<name>TBigHuntUserDataChangeNotify</name>
  	<Function>
  		<name>elitemonster</name>
  		<replaceName>EliteMonster</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_elitemonster</name>
  		<replaceName>EliteMonster</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_elitemonster</name>
  		<replaceName>EliteMonster</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 elitemonster() const;
  inline void set_elitemonster(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:pb.TBigHuntUserDataChangeNotify)
 private:
  inline void set_has_leftchallengenum();
  inline void clear_has_leftchallengenum();
  inline void set_has_selfcoin();
  inline void clear_has_selfcoin();
  inline void set_has_alliancecoin();
  inline void clear_has_alliancecoin();
  inline void set_has_elitemonster();
  inline void clear_has_elitemonster();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint64 selfcoin_;
  ::google::protobuf::uint32 leftchallengenum_;
  ::google::protobuf::uint32 elitemonster_;
  ::google::protobuf::uint64 alliancecoin_;
  friend void  protobuf_AddDesc_net_2fBigHunt_2eproto();
  friend void protobuf_AssignDesc_net_2fBigHunt_2eproto();
  friend void protobuf_ShutdownFile_net_2fBigHunt_2eproto();

  void InitAsDefaultInstance();
  static TBigHuntUserDataChangeNotify* default_instance_;
};
// ===================================================================


// ===================================================================

// TBigHuntDimensionInfo

// optional uint32 DimensionId = 1;
inline bool TBigHuntDimensionInfo::has_dimensionid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TBigHuntDimensionInfo::set_has_dimensionid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TBigHuntDimensionInfo::clear_has_dimensionid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TBigHuntDimensionInfo::clear_dimensionid() {
  dimensionid_ = 0u;
  clear_has_dimensionid();
}
inline ::google::protobuf::uint32 TBigHuntDimensionInfo::dimensionid() const {
  // @@protoc_insertion_point(field_get:pb.TBigHuntDimensionInfo.DimensionId)
  return dimensionid_;
}
inline void TBigHuntDimensionInfo::set_dimensionid(::google::protobuf::uint32 value) {
  set_has_dimensionid();
  dimensionid_ = value;
  // @@protoc_insertion_point(field_set:pb.TBigHuntDimensionInfo.DimensionId)
}

// optional uint32 Level = 2;
inline bool TBigHuntDimensionInfo::has_level() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TBigHuntDimensionInfo::set_has_level() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TBigHuntDimensionInfo::clear_has_level() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TBigHuntDimensionInfo::clear_level() {
  level_ = 0u;
  clear_has_level();
}
inline ::google::protobuf::uint32 TBigHuntDimensionInfo::level() const {
  // @@protoc_insertion_point(field_get:pb.TBigHuntDimensionInfo.Level)
  return level_;
}
inline void TBigHuntDimensionInfo::set_level(::google::protobuf::uint32 value) {
  set_has_level();
  level_ = value;
  // @@protoc_insertion_point(field_set:pb.TBigHuntDimensionInfo.Level)
}

// -------------------------------------------------------------------

// TBigHuntSelfDynamicInfo

// optional .pb.EBigHuntDynamicType DynamicType = 1;
inline bool TBigHuntSelfDynamicInfo::has_dynamictype() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TBigHuntSelfDynamicInfo::set_has_dynamictype() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TBigHuntSelfDynamicInfo::clear_has_dynamictype() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TBigHuntSelfDynamicInfo::clear_dynamictype() {
  dynamictype_ = 101;
  clear_has_dynamictype();
}
inline ::pb::EBigHuntDynamicType TBigHuntSelfDynamicInfo::dynamictype() const {
  // @@protoc_insertion_point(field_get:pb.TBigHuntSelfDynamicInfo.DynamicType)
  return static_cast< ::pb::EBigHuntDynamicType >(dynamictype_);
}
inline void TBigHuntSelfDynamicInfo::set_dynamictype(::pb::EBigHuntDynamicType value) {
  assert(::pb::EBigHuntDynamicType_IsValid(value));
  set_has_dynamictype();
  dynamictype_ = value;
  // @@protoc_insertion_point(field_set:pb.TBigHuntSelfDynamicInfo.DynamicType)
}

// optional uint64 RecordTime = 2;
inline bool TBigHuntSelfDynamicInfo::has_recordtime() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TBigHuntSelfDynamicInfo::set_has_recordtime() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TBigHuntSelfDynamicInfo::clear_has_recordtime() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TBigHuntSelfDynamicInfo::clear_recordtime() {
  recordtime_ = GOOGLE_ULONGLONG(0);
  clear_has_recordtime();
}
inline ::google::protobuf::uint64 TBigHuntSelfDynamicInfo::recordtime() const {
  // @@protoc_insertion_point(field_get:pb.TBigHuntSelfDynamicInfo.RecordTime)
  return recordtime_;
}
inline void TBigHuntSelfDynamicInfo::set_recordtime(::google::protobuf::uint64 value) {
  set_has_recordtime();
  recordtime_ = value;
  // @@protoc_insertion_point(field_set:pb.TBigHuntSelfDynamicInfo.RecordTime)
}

// repeated .pb.TCommonReward RewardArr = 3;
inline int TBigHuntSelfDynamicInfo::rewardarr_size() const {
  return rewardarr_.size();
}
inline void TBigHuntSelfDynamicInfo::clear_rewardarr() {
  rewardarr_.Clear();
}
inline const ::pb::TCommonReward& TBigHuntSelfDynamicInfo::rewardarr(int index) const {
  // @@protoc_insertion_point(field_get:pb.TBigHuntSelfDynamicInfo.RewardArr)
  return rewardarr_.Get(index);
}
inline ::pb::TCommonReward* TBigHuntSelfDynamicInfo::mutable_rewardarr(int index) {
  // @@protoc_insertion_point(field_mutable:pb.TBigHuntSelfDynamicInfo.RewardArr)
  return rewardarr_.Mutable(index);
}
inline ::pb::TCommonReward* TBigHuntSelfDynamicInfo::add_rewardarr() {
  // @@protoc_insertion_point(field_add:pb.TBigHuntSelfDynamicInfo.RewardArr)
  return rewardarr_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::TCommonReward >&
TBigHuntSelfDynamicInfo::rewardarr() const {
  // @@protoc_insertion_point(field_list:pb.TBigHuntSelfDynamicInfo.RewardArr)
  return rewardarr_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb::TCommonReward >*
TBigHuntSelfDynamicInfo::mutable_rewardarr() {
  // @@protoc_insertion_point(field_mutable_list:pb.TBigHuntSelfDynamicInfo.RewardArr)
  return &rewardarr_;
}

// optional uint64 RecordId = 4;
inline bool TBigHuntSelfDynamicInfo::has_recordid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void TBigHuntSelfDynamicInfo::set_has_recordid() {
  _has_bits_[0] |= 0x00000008u;
}
inline void TBigHuntSelfDynamicInfo::clear_has_recordid() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void TBigHuntSelfDynamicInfo::clear_recordid() {
  recordid_ = GOOGLE_ULONGLONG(0);
  clear_has_recordid();
}
inline ::google::protobuf::uint64 TBigHuntSelfDynamicInfo::recordid() const {
  // @@protoc_insertion_point(field_get:pb.TBigHuntSelfDynamicInfo.RecordId)
  return recordid_;
}
inline void TBigHuntSelfDynamicInfo::set_recordid(::google::protobuf::uint64 value) {
  set_has_recordid();
  recordid_ = value;
  // @@protoc_insertion_point(field_set:pb.TBigHuntSelfDynamicInfo.RecordId)
}

// repeated uint32 monsterId = 5;
inline int TBigHuntSelfDynamicInfo::monsterid_size() const {
  return monsterid_.size();
}
inline void TBigHuntSelfDynamicInfo::clear_monsterid() {
  monsterid_.Clear();
}
inline ::google::protobuf::uint32 TBigHuntSelfDynamicInfo::monsterid(int index) const {
  // @@protoc_insertion_point(field_get:pb.TBigHuntSelfDynamicInfo.monsterId)
  return monsterid_.Get(index);
}
inline void TBigHuntSelfDynamicInfo::set_monsterid(int index, ::google::protobuf::uint32 value) {
  monsterid_.Set(index, value);
  // @@protoc_insertion_point(field_set:pb.TBigHuntSelfDynamicInfo.monsterId)
}
inline void TBigHuntSelfDynamicInfo::add_monsterid(::google::protobuf::uint32 value) {
  monsterid_.Add(value);
  // @@protoc_insertion_point(field_add:pb.TBigHuntSelfDynamicInfo.monsterId)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
TBigHuntSelfDynamicInfo::monsterid() const {
  // @@protoc_insertion_point(field_list:pb.TBigHuntSelfDynamicInfo.monsterId)
  return monsterid_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
TBigHuntSelfDynamicInfo::mutable_monsterid() {
  // @@protoc_insertion_point(field_mutable_list:pb.TBigHuntSelfDynamicInfo.monsterId)
  return &monsterid_;
}

// repeated string UserName = 6;
inline int TBigHuntSelfDynamicInfo::username_size() const {
  return username_.size();
}
inline void TBigHuntSelfDynamicInfo::clear_username() {
  username_.Clear();
}
inline const ::std::string& TBigHuntSelfDynamicInfo::username(int index) const {
  // @@protoc_insertion_point(field_get:pb.TBigHuntSelfDynamicInfo.UserName)
  return username_.Get(index);
}
inline ::std::string* TBigHuntSelfDynamicInfo::mutable_username(int index) {
  // @@protoc_insertion_point(field_mutable:pb.TBigHuntSelfDynamicInfo.UserName)
  return username_.Mutable(index);
}
inline void TBigHuntSelfDynamicInfo::set_username(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:pb.TBigHuntSelfDynamicInfo.UserName)
  username_.Mutable(index)->assign(value);
}
inline void TBigHuntSelfDynamicInfo::set_username(int index, const char* value) {
  username_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:pb.TBigHuntSelfDynamicInfo.UserName)
}
inline void TBigHuntSelfDynamicInfo::set_username(int index, const char* value, size_t size) {
  username_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:pb.TBigHuntSelfDynamicInfo.UserName)
}
inline ::std::string* TBigHuntSelfDynamicInfo::add_username() {
  return username_.Add();
}
inline void TBigHuntSelfDynamicInfo::add_username(const ::std::string& value) {
  username_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:pb.TBigHuntSelfDynamicInfo.UserName)
}
inline void TBigHuntSelfDynamicInfo::add_username(const char* value) {
  username_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:pb.TBigHuntSelfDynamicInfo.UserName)
}
inline void TBigHuntSelfDynamicInfo::add_username(const char* value, size_t size) {
  username_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:pb.TBigHuntSelfDynamicInfo.UserName)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
TBigHuntSelfDynamicInfo::username() const {
  // @@protoc_insertion_point(field_list:pb.TBigHuntSelfDynamicInfo.UserName)
  return username_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
TBigHuntSelfDynamicInfo::mutable_username() {
  // @@protoc_insertion_point(field_mutable_list:pb.TBigHuntSelfDynamicInfo.UserName)
  return &username_;
}

// optional uint32 nextMapId = 7;
inline bool TBigHuntSelfDynamicInfo::has_nextmapid() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void TBigHuntSelfDynamicInfo::set_has_nextmapid() {
  _has_bits_[0] |= 0x00000040u;
}
inline void TBigHuntSelfDynamicInfo::clear_has_nextmapid() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void TBigHuntSelfDynamicInfo::clear_nextmapid() {
  nextmapid_ = 0u;
  clear_has_nextmapid();
}
inline ::google::protobuf::uint32 TBigHuntSelfDynamicInfo::nextmapid() const {
  // @@protoc_insertion_point(field_get:pb.TBigHuntSelfDynamicInfo.nextMapId)
  return nextmapid_;
}
inline void TBigHuntSelfDynamicInfo::set_nextmapid(::google::protobuf::uint32 value) {
  set_has_nextmapid();
  nextmapid_ = value;
  // @@protoc_insertion_point(field_set:pb.TBigHuntSelfDynamicInfo.nextMapId)
}

// optional uint64 BossDamage = 8;
inline bool TBigHuntSelfDynamicInfo::has_bossdamage() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void TBigHuntSelfDynamicInfo::set_has_bossdamage() {
  _has_bits_[0] |= 0x00000080u;
}
inline void TBigHuntSelfDynamicInfo::clear_has_bossdamage() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void TBigHuntSelfDynamicInfo::clear_bossdamage() {
  bossdamage_ = GOOGLE_ULONGLONG(0);
  clear_has_bossdamage();
}
inline ::google::protobuf::uint64 TBigHuntSelfDynamicInfo::bossdamage() const {
  // @@protoc_insertion_point(field_get:pb.TBigHuntSelfDynamicInfo.BossDamage)
  return bossdamage_;
}
inline void TBigHuntSelfDynamicInfo::set_bossdamage(::google::protobuf::uint64 value) {
  set_has_bossdamage();
  bossdamage_ = value;
  // @@protoc_insertion_point(field_set:pb.TBigHuntSelfDynamicInfo.BossDamage)
}

// -------------------------------------------------------------------

// TBigHuntMapDynamicInfo

// optional .pb.EBigHuntDynamicType DynamicType = 1;
inline bool TBigHuntMapDynamicInfo::has_dynamictype() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TBigHuntMapDynamicInfo::set_has_dynamictype() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TBigHuntMapDynamicInfo::clear_has_dynamictype() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TBigHuntMapDynamicInfo::clear_dynamictype() {
  dynamictype_ = 101;
  clear_has_dynamictype();
}
inline ::pb::EBigHuntDynamicType TBigHuntMapDynamicInfo::dynamictype() const {
  // @@protoc_insertion_point(field_get:pb.TBigHuntMapDynamicInfo.DynamicType)
  return static_cast< ::pb::EBigHuntDynamicType >(dynamictype_);
}
inline void TBigHuntMapDynamicInfo::set_dynamictype(::pb::EBigHuntDynamicType value) {
  assert(::pb::EBigHuntDynamicType_IsValid(value));
  set_has_dynamictype();
  dynamictype_ = value;
  // @@protoc_insertion_point(field_set:pb.TBigHuntMapDynamicInfo.DynamicType)
}

// optional uint64 DynamicTime = 2;
inline bool TBigHuntMapDynamicInfo::has_dynamictime() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TBigHuntMapDynamicInfo::set_has_dynamictime() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TBigHuntMapDynamicInfo::clear_has_dynamictime() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TBigHuntMapDynamicInfo::clear_dynamictime() {
  dynamictime_ = GOOGLE_ULONGLONG(0);
  clear_has_dynamictime();
}
inline ::google::protobuf::uint64 TBigHuntMapDynamicInfo::dynamictime() const {
  // @@protoc_insertion_point(field_get:pb.TBigHuntMapDynamicInfo.DynamicTime)
  return dynamictime_;
}
inline void TBigHuntMapDynamicInfo::set_dynamictime(::google::protobuf::uint64 value) {
  set_has_dynamictime();
  dynamictime_ = value;
  // @@protoc_insertion_point(field_set:pb.TBigHuntMapDynamicInfo.DynamicTime)
}

// repeated .pb.TCommonReward RewardArr = 3;
inline int TBigHuntMapDynamicInfo::rewardarr_size() const {
  return rewardarr_.size();
}
inline void TBigHuntMapDynamicInfo::clear_rewardarr() {
  rewardarr_.Clear();
}
inline const ::pb::TCommonReward& TBigHuntMapDynamicInfo::rewardarr(int index) const {
  // @@protoc_insertion_point(field_get:pb.TBigHuntMapDynamicInfo.RewardArr)
  return rewardarr_.Get(index);
}
inline ::pb::TCommonReward* TBigHuntMapDynamicInfo::mutable_rewardarr(int index) {
  // @@protoc_insertion_point(field_mutable:pb.TBigHuntMapDynamicInfo.RewardArr)
  return rewardarr_.Mutable(index);
}
inline ::pb::TCommonReward* TBigHuntMapDynamicInfo::add_rewardarr() {
  // @@protoc_insertion_point(field_add:pb.TBigHuntMapDynamicInfo.RewardArr)
  return rewardarr_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::TCommonReward >&
TBigHuntMapDynamicInfo::rewardarr() const {
  // @@protoc_insertion_point(field_list:pb.TBigHuntMapDynamicInfo.RewardArr)
  return rewardarr_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb::TCommonReward >*
TBigHuntMapDynamicInfo::mutable_rewardarr() {
  // @@protoc_insertion_point(field_mutable_list:pb.TBigHuntMapDynamicInfo.RewardArr)
  return &rewardarr_;
}

// optional uint64 RecordId = 4;
inline bool TBigHuntMapDynamicInfo::has_recordid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void TBigHuntMapDynamicInfo::set_has_recordid() {
  _has_bits_[0] |= 0x00000008u;
}
inline void TBigHuntMapDynamicInfo::clear_has_recordid() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void TBigHuntMapDynamicInfo::clear_recordid() {
  recordid_ = GOOGLE_ULONGLONG(0);
  clear_has_recordid();
}
inline ::google::protobuf::uint64 TBigHuntMapDynamicInfo::recordid() const {
  // @@protoc_insertion_point(field_get:pb.TBigHuntMapDynamicInfo.RecordId)
  return recordid_;
}
inline void TBigHuntMapDynamicInfo::set_recordid(::google::protobuf::uint64 value) {
  set_has_recordid();
  recordid_ = value;
  // @@protoc_insertion_point(field_set:pb.TBigHuntMapDynamicInfo.RecordId)
}

// repeated .pb.TUserSimpleInfo UserInfo = 5;
inline int TBigHuntMapDynamicInfo::userinfo_size() const {
  return userinfo_.size();
}
inline void TBigHuntMapDynamicInfo::clear_userinfo() {
  userinfo_.Clear();
}
inline const ::pb::TUserSimpleInfo& TBigHuntMapDynamicInfo::userinfo(int index) const {
  // @@protoc_insertion_point(field_get:pb.TBigHuntMapDynamicInfo.UserInfo)
  return userinfo_.Get(index);
}
inline ::pb::TUserSimpleInfo* TBigHuntMapDynamicInfo::mutable_userinfo(int index) {
  // @@protoc_insertion_point(field_mutable:pb.TBigHuntMapDynamicInfo.UserInfo)
  return userinfo_.Mutable(index);
}
inline ::pb::TUserSimpleInfo* TBigHuntMapDynamicInfo::add_userinfo() {
  // @@protoc_insertion_point(field_add:pb.TBigHuntMapDynamicInfo.UserInfo)
  return userinfo_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::TUserSimpleInfo >&
TBigHuntMapDynamicInfo::userinfo() const {
  // @@protoc_insertion_point(field_list:pb.TBigHuntMapDynamicInfo.UserInfo)
  return userinfo_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb::TUserSimpleInfo >*
TBigHuntMapDynamicInfo::mutable_userinfo() {
  // @@protoc_insertion_point(field_mutable_list:pb.TBigHuntMapDynamicInfo.UserInfo)
  return &userinfo_;
}

// repeated uint32 monsterId = 6;
inline int TBigHuntMapDynamicInfo::monsterid_size() const {
  return monsterid_.size();
}
inline void TBigHuntMapDynamicInfo::clear_monsterid() {
  monsterid_.Clear();
}
inline ::google::protobuf::uint32 TBigHuntMapDynamicInfo::monsterid(int index) const {
  // @@protoc_insertion_point(field_get:pb.TBigHuntMapDynamicInfo.monsterId)
  return monsterid_.Get(index);
}
inline void TBigHuntMapDynamicInfo::set_monsterid(int index, ::google::protobuf::uint32 value) {
  monsterid_.Set(index, value);
  // @@protoc_insertion_point(field_set:pb.TBigHuntMapDynamicInfo.monsterId)
}
inline void TBigHuntMapDynamicInfo::add_monsterid(::google::protobuf::uint32 value) {
  monsterid_.Add(value);
  // @@protoc_insertion_point(field_add:pb.TBigHuntMapDynamicInfo.monsterId)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
TBigHuntMapDynamicInfo::monsterid() const {
  // @@protoc_insertion_point(field_list:pb.TBigHuntMapDynamicInfo.monsterId)
  return monsterid_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
TBigHuntMapDynamicInfo::mutable_monsterid() {
  // @@protoc_insertion_point(field_mutable_list:pb.TBigHuntMapDynamicInfo.monsterId)
  return &monsterid_;
}

// optional uint32 nextMapId = 7;
inline bool TBigHuntMapDynamicInfo::has_nextmapid() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void TBigHuntMapDynamicInfo::set_has_nextmapid() {
  _has_bits_[0] |= 0x00000040u;
}
inline void TBigHuntMapDynamicInfo::clear_has_nextmapid() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void TBigHuntMapDynamicInfo::clear_nextmapid() {
  nextmapid_ = 0u;
  clear_has_nextmapid();
}
inline ::google::protobuf::uint32 TBigHuntMapDynamicInfo::nextmapid() const {
  // @@protoc_insertion_point(field_get:pb.TBigHuntMapDynamicInfo.nextMapId)
  return nextmapid_;
}
inline void TBigHuntMapDynamicInfo::set_nextmapid(::google::protobuf::uint32 value) {
  set_has_nextmapid();
  nextmapid_ = value;
  // @@protoc_insertion_point(field_set:pb.TBigHuntMapDynamicInfo.nextMapId)
}

// -------------------------------------------------------------------

// TBigHuntBossHpInfo

// optional uint32 hid = 1;
inline bool TBigHuntBossHpInfo::has_hid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TBigHuntBossHpInfo::set_has_hid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TBigHuntBossHpInfo::clear_has_hid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TBigHuntBossHpInfo::clear_hid() {
  hid_ = 0u;
  clear_has_hid();
}
inline ::google::protobuf::uint32 TBigHuntBossHpInfo::hid() const {
  // @@protoc_insertion_point(field_get:pb.TBigHuntBossHpInfo.hid)
  return hid_;
}
inline void TBigHuntBossHpInfo::set_hid(::google::protobuf::uint32 value) {
  set_has_hid();
  hid_ = value;
  // @@protoc_insertion_point(field_set:pb.TBigHuntBossHpInfo.hid)
}

// optional uint64 HpPercentage = 2;
inline bool TBigHuntBossHpInfo::has_hppercentage() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TBigHuntBossHpInfo::set_has_hppercentage() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TBigHuntBossHpInfo::clear_has_hppercentage() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TBigHuntBossHpInfo::clear_hppercentage() {
  hppercentage_ = GOOGLE_ULONGLONG(0);
  clear_has_hppercentage();
}
inline ::google::protobuf::uint64 TBigHuntBossHpInfo::hppercentage() const {
  // @@protoc_insertion_point(field_get:pb.TBigHuntBossHpInfo.HpPercentage)
  return hppercentage_;
}
inline void TBigHuntBossHpInfo::set_hppercentage(::google::protobuf::uint64 value) {
  set_has_hppercentage();
  hppercentage_ = value;
  // @@protoc_insertion_point(field_set:pb.TBigHuntBossHpInfo.HpPercentage)
}

// -------------------------------------------------------------------

// TBigHuntBossInfo

// optional uint32 BossId = 1;
inline bool TBigHuntBossInfo::has_bossid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TBigHuntBossInfo::set_has_bossid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TBigHuntBossInfo::clear_has_bossid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TBigHuntBossInfo::clear_bossid() {
  bossid_ = 0u;
  clear_has_bossid();
}
inline ::google::protobuf::uint32 TBigHuntBossInfo::bossid() const {
  // @@protoc_insertion_point(field_get:pb.TBigHuntBossInfo.BossId)
  return bossid_;
}
inline void TBigHuntBossInfo::set_bossid(::google::protobuf::uint32 value) {
  set_has_bossid();
  bossid_ = value;
  // @@protoc_insertion_point(field_set:pb.TBigHuntBossInfo.BossId)
}

// optional uint64 HpPercentage = 2;
inline bool TBigHuntBossInfo::has_hppercentage() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TBigHuntBossInfo::set_has_hppercentage() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TBigHuntBossInfo::clear_has_hppercentage() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TBigHuntBossInfo::clear_hppercentage() {
  hppercentage_ = GOOGLE_ULONGLONG(0);
  clear_has_hppercentage();
}
inline ::google::protobuf::uint64 TBigHuntBossInfo::hppercentage() const {
  // @@protoc_insertion_point(field_get:pb.TBigHuntBossInfo.HpPercentage)
  return hppercentage_;
}
inline void TBigHuntBossInfo::set_hppercentage(::google::protobuf::uint64 value) {
  set_has_hppercentage();
  hppercentage_ = value;
  // @@protoc_insertion_point(field_set:pb.TBigHuntBossInfo.HpPercentage)
}

// -------------------------------------------------------------------

// TBigHuntMonsterInfo

// optional uint32 MonsterId = 1;
inline bool TBigHuntMonsterInfo::has_monsterid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TBigHuntMonsterInfo::set_has_monsterid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TBigHuntMonsterInfo::clear_has_monsterid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TBigHuntMonsterInfo::clear_monsterid() {
  monsterid_ = 0u;
  clear_has_monsterid();
}
inline ::google::protobuf::uint32 TBigHuntMonsterInfo::monsterid() const {
  // @@protoc_insertion_point(field_get:pb.TBigHuntMonsterInfo.MonsterId)
  return monsterid_;
}
inline void TBigHuntMonsterInfo::set_monsterid(::google::protobuf::uint32 value) {
  set_has_monsterid();
  monsterid_ = value;
  // @@protoc_insertion_point(field_set:pb.TBigHuntMonsterInfo.MonsterId)
}

// optional .pb.TUserSimpleInfo SuppressUserInfo = 2;
inline bool TBigHuntMonsterInfo::has_suppressuserinfo() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TBigHuntMonsterInfo::set_has_suppressuserinfo() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TBigHuntMonsterInfo::clear_has_suppressuserinfo() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TBigHuntMonsterInfo::clear_suppressuserinfo() {
  if (suppressuserinfo_ != NULL) suppressuserinfo_->::pb::TUserSimpleInfo::Clear();
  clear_has_suppressuserinfo();
}
inline const ::pb::TUserSimpleInfo& TBigHuntMonsterInfo::suppressuserinfo() const {
  // @@protoc_insertion_point(field_get:pb.TBigHuntMonsterInfo.SuppressUserInfo)
  return suppressuserinfo_ != NULL ? *suppressuserinfo_ : *default_instance_->suppressuserinfo_;
}
inline ::pb::TUserSimpleInfo* TBigHuntMonsterInfo::mutable_suppressuserinfo() {
  set_has_suppressuserinfo();
  if (suppressuserinfo_ == NULL) suppressuserinfo_ = new ::pb::TUserSimpleInfo;
  // @@protoc_insertion_point(field_mutable:pb.TBigHuntMonsterInfo.SuppressUserInfo)
  return suppressuserinfo_;
}
inline ::pb::TUserSimpleInfo* TBigHuntMonsterInfo::release_suppressuserinfo() {
  clear_has_suppressuserinfo();
  ::pb::TUserSimpleInfo* temp = suppressuserinfo_;
  suppressuserinfo_ = NULL;
  return temp;
}
inline void TBigHuntMonsterInfo::set_allocated_suppressuserinfo(::pb::TUserSimpleInfo* suppressuserinfo) {
  delete suppressuserinfo_;
  suppressuserinfo_ = suppressuserinfo;
  if (suppressuserinfo) {
    set_has_suppressuserinfo();
  } else {
    clear_has_suppressuserinfo();
  }
  // @@protoc_insertion_point(field_set_allocated:pb.TBigHuntMonsterInfo.SuppressUserInfo)
}

// -------------------------------------------------------------------

// TBigHuntHidPosInfo

// optional uint32 Hid = 1;
inline bool TBigHuntHidPosInfo::has_hid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TBigHuntHidPosInfo::set_has_hid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TBigHuntHidPosInfo::clear_has_hid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TBigHuntHidPosInfo::clear_hid() {
  hid_ = 0u;
  clear_has_hid();
}
inline ::google::protobuf::uint32 TBigHuntHidPosInfo::hid() const {
  // @@protoc_insertion_point(field_get:pb.TBigHuntHidPosInfo.Hid)
  return hid_;
}
inline void TBigHuntHidPosInfo::set_hid(::google::protobuf::uint32 value) {
  set_has_hid();
  hid_ = value;
  // @@protoc_insertion_point(field_set:pb.TBigHuntHidPosInfo.Hid)
}

// optional uint32 Pos = 2;
inline bool TBigHuntHidPosInfo::has_pos() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TBigHuntHidPosInfo::set_has_pos() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TBigHuntHidPosInfo::clear_has_pos() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TBigHuntHidPosInfo::clear_pos() {
  pos_ = 0u;
  clear_has_pos();
}
inline ::google::protobuf::uint32 TBigHuntHidPosInfo::pos() const {
  // @@protoc_insertion_point(field_get:pb.TBigHuntHidPosInfo.Pos)
  return pos_;
}
inline void TBigHuntHidPosInfo::set_pos(::google::protobuf::uint32 value) {
  set_has_pos();
  pos_ = value;
  // @@protoc_insertion_point(field_set:pb.TBigHuntHidPosInfo.Pos)
}

// -------------------------------------------------------------------

// TBigHuntFormationInfo

// optional uint32 FormationId = 1;
inline bool TBigHuntFormationInfo::has_formationid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TBigHuntFormationInfo::set_has_formationid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TBigHuntFormationInfo::clear_has_formationid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TBigHuntFormationInfo::clear_formationid() {
  formationid_ = 0u;
  clear_has_formationid();
}
inline ::google::protobuf::uint32 TBigHuntFormationInfo::formationid() const {
  // @@protoc_insertion_point(field_get:pb.TBigHuntFormationInfo.FormationId)
  return formationid_;
}
inline void TBigHuntFormationInfo::set_formationid(::google::protobuf::uint32 value) {
  set_has_formationid();
  formationid_ = value;
  // @@protoc_insertion_point(field_set:pb.TBigHuntFormationInfo.FormationId)
}

// repeated .pb.TBigHuntHidPosInfo HidPosArr = 2;
inline int TBigHuntFormationInfo::hidposarr_size() const {
  return hidposarr_.size();
}
inline void TBigHuntFormationInfo::clear_hidposarr() {
  hidposarr_.Clear();
}
inline const ::pb::TBigHuntHidPosInfo& TBigHuntFormationInfo::hidposarr(int index) const {
  // @@protoc_insertion_point(field_get:pb.TBigHuntFormationInfo.HidPosArr)
  return hidposarr_.Get(index);
}
inline ::pb::TBigHuntHidPosInfo* TBigHuntFormationInfo::mutable_hidposarr(int index) {
  // @@protoc_insertion_point(field_mutable:pb.TBigHuntFormationInfo.HidPosArr)
  return hidposarr_.Mutable(index);
}
inline ::pb::TBigHuntHidPosInfo* TBigHuntFormationInfo::add_hidposarr() {
  // @@protoc_insertion_point(field_add:pb.TBigHuntFormationInfo.HidPosArr)
  return hidposarr_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::TBigHuntHidPosInfo >&
TBigHuntFormationInfo::hidposarr() const {
  // @@protoc_insertion_point(field_list:pb.TBigHuntFormationInfo.HidPosArr)
  return hidposarr_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb::TBigHuntHidPosInfo >*
TBigHuntFormationInfo::mutable_hidposarr() {
  // @@protoc_insertion_point(field_mutable_list:pb.TBigHuntFormationInfo.HidPosArr)
  return &hidposarr_;
}

// -------------------------------------------------------------------

// TBigHuntEnterRsp

// repeated .pb.TBigHuntMapDynamicInfo MapDynamicInfoArr = 1;
inline int TBigHuntEnterRsp::mapdynamicinfoarr_size() const {
  return mapdynamicinfoarr_.size();
}
inline void TBigHuntEnterRsp::clear_mapdynamicinfoarr() {
  mapdynamicinfoarr_.Clear();
}
inline const ::pb::TBigHuntMapDynamicInfo& TBigHuntEnterRsp::mapdynamicinfoarr(int index) const {
  // @@protoc_insertion_point(field_get:pb.TBigHuntEnterRsp.MapDynamicInfoArr)
  return mapdynamicinfoarr_.Get(index);
}
inline ::pb::TBigHuntMapDynamicInfo* TBigHuntEnterRsp::mutable_mapdynamicinfoarr(int index) {
  // @@protoc_insertion_point(field_mutable:pb.TBigHuntEnterRsp.MapDynamicInfoArr)
  return mapdynamicinfoarr_.Mutable(index);
}
inline ::pb::TBigHuntMapDynamicInfo* TBigHuntEnterRsp::add_mapdynamicinfoarr() {
  // @@protoc_insertion_point(field_add:pb.TBigHuntEnterRsp.MapDynamicInfoArr)
  return mapdynamicinfoarr_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::TBigHuntMapDynamicInfo >&
TBigHuntEnterRsp::mapdynamicinfoarr() const {
  // @@protoc_insertion_point(field_list:pb.TBigHuntEnterRsp.MapDynamicInfoArr)
  return mapdynamicinfoarr_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb::TBigHuntMapDynamicInfo >*
TBigHuntEnterRsp::mutable_mapdynamicinfoarr() {
  // @@protoc_insertion_point(field_mutable_list:pb.TBigHuntEnterRsp.MapDynamicInfoArr)
  return &mapdynamicinfoarr_;
}

// repeated .pb.TBigHuntBossInfo BossInfoArr = 2;
inline int TBigHuntEnterRsp::bossinfoarr_size() const {
  return bossinfoarr_.size();
}
inline void TBigHuntEnterRsp::clear_bossinfoarr() {
  bossinfoarr_.Clear();
}
inline const ::pb::TBigHuntBossInfo& TBigHuntEnterRsp::bossinfoarr(int index) const {
  // @@protoc_insertion_point(field_get:pb.TBigHuntEnterRsp.BossInfoArr)
  return bossinfoarr_.Get(index);
}
inline ::pb::TBigHuntBossInfo* TBigHuntEnterRsp::mutable_bossinfoarr(int index) {
  // @@protoc_insertion_point(field_mutable:pb.TBigHuntEnterRsp.BossInfoArr)
  return bossinfoarr_.Mutable(index);
}
inline ::pb::TBigHuntBossInfo* TBigHuntEnterRsp::add_bossinfoarr() {
  // @@protoc_insertion_point(field_add:pb.TBigHuntEnterRsp.BossInfoArr)
  return bossinfoarr_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::TBigHuntBossInfo >&
TBigHuntEnterRsp::bossinfoarr() const {
  // @@protoc_insertion_point(field_list:pb.TBigHuntEnterRsp.BossInfoArr)
  return bossinfoarr_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb::TBigHuntBossInfo >*
TBigHuntEnterRsp::mutable_bossinfoarr() {
  // @@protoc_insertion_point(field_mutable_list:pb.TBigHuntEnterRsp.BossInfoArr)
  return &bossinfoarr_;
}

// repeated .pb.TBigHuntMonsterInfo MonsterInfoArr = 3;
inline int TBigHuntEnterRsp::monsterinfoarr_size() const {
  return monsterinfoarr_.size();
}
inline void TBigHuntEnterRsp::clear_monsterinfoarr() {
  monsterinfoarr_.Clear();
}
inline const ::pb::TBigHuntMonsterInfo& TBigHuntEnterRsp::monsterinfoarr(int index) const {
  // @@protoc_insertion_point(field_get:pb.TBigHuntEnterRsp.MonsterInfoArr)
  return monsterinfoarr_.Get(index);
}
inline ::pb::TBigHuntMonsterInfo* TBigHuntEnterRsp::mutable_monsterinfoarr(int index) {
  // @@protoc_insertion_point(field_mutable:pb.TBigHuntEnterRsp.MonsterInfoArr)
  return monsterinfoarr_.Mutable(index);
}
inline ::pb::TBigHuntMonsterInfo* TBigHuntEnterRsp::add_monsterinfoarr() {
  // @@protoc_insertion_point(field_add:pb.TBigHuntEnterRsp.MonsterInfoArr)
  return monsterinfoarr_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::TBigHuntMonsterInfo >&
TBigHuntEnterRsp::monsterinfoarr() const {
  // @@protoc_insertion_point(field_list:pb.TBigHuntEnterRsp.MonsterInfoArr)
  return monsterinfoarr_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb::TBigHuntMonsterInfo >*
TBigHuntEnterRsp::mutable_monsterinfoarr() {
  // @@protoc_insertion_point(field_mutable_list:pb.TBigHuntEnterRsp.MonsterInfoArr)
  return &monsterinfoarr_;
}

// repeated .pb.TBigHuntSelfDynamicInfo SelfDynamicInfoArr = 4;
inline int TBigHuntEnterRsp::selfdynamicinfoarr_size() const {
  return selfdynamicinfoarr_.size();
}
inline void TBigHuntEnterRsp::clear_selfdynamicinfoarr() {
  selfdynamicinfoarr_.Clear();
}
inline const ::pb::TBigHuntSelfDynamicInfo& TBigHuntEnterRsp::selfdynamicinfoarr(int index) const {
  // @@protoc_insertion_point(field_get:pb.TBigHuntEnterRsp.SelfDynamicInfoArr)
  return selfdynamicinfoarr_.Get(index);
}
inline ::pb::TBigHuntSelfDynamicInfo* TBigHuntEnterRsp::mutable_selfdynamicinfoarr(int index) {
  // @@protoc_insertion_point(field_mutable:pb.TBigHuntEnterRsp.SelfDynamicInfoArr)
  return selfdynamicinfoarr_.Mutable(index);
}
inline ::pb::TBigHuntSelfDynamicInfo* TBigHuntEnterRsp::add_selfdynamicinfoarr() {
  // @@protoc_insertion_point(field_add:pb.TBigHuntEnterRsp.SelfDynamicInfoArr)
  return selfdynamicinfoarr_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::TBigHuntSelfDynamicInfo >&
TBigHuntEnterRsp::selfdynamicinfoarr() const {
  // @@protoc_insertion_point(field_list:pb.TBigHuntEnterRsp.SelfDynamicInfoArr)
  return selfdynamicinfoarr_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb::TBigHuntSelfDynamicInfo >*
TBigHuntEnterRsp::mutable_selfdynamicinfoarr() {
  // @@protoc_insertion_point(field_mutable_list:pb.TBigHuntEnterRsp.SelfDynamicInfoArr)
  return &selfdynamicinfoarr_;
}

// optional uint32 CurMapId = 5;
inline bool TBigHuntEnterRsp::has_curmapid() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void TBigHuntEnterRsp::set_has_curmapid() {
  _has_bits_[0] |= 0x00000010u;
}
inline void TBigHuntEnterRsp::clear_has_curmapid() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void TBigHuntEnterRsp::clear_curmapid() {
  curmapid_ = 0u;
  clear_has_curmapid();
}
inline ::google::protobuf::uint32 TBigHuntEnterRsp::curmapid() const {
  // @@protoc_insertion_point(field_get:pb.TBigHuntEnterRsp.CurMapId)
  return curmapid_;
}
inline void TBigHuntEnterRsp::set_curmapid(::google::protobuf::uint32 value) {
  set_has_curmapid();
  curmapid_ = value;
  // @@protoc_insertion_point(field_set:pb.TBigHuntEnterRsp.CurMapId)
}

// optional uint32 FormMapId = 6;
inline bool TBigHuntEnterRsp::has_formmapid() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void TBigHuntEnterRsp::set_has_formmapid() {
  _has_bits_[0] |= 0x00000020u;
}
inline void TBigHuntEnterRsp::clear_has_formmapid() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void TBigHuntEnterRsp::clear_formmapid() {
  formmapid_ = 0u;
  clear_has_formmapid();
}
inline ::google::protobuf::uint32 TBigHuntEnterRsp::formmapid() const {
  // @@protoc_insertion_point(field_get:pb.TBigHuntEnterRsp.FormMapId)
  return formmapid_;
}
inline void TBigHuntEnterRsp::set_formmapid(::google::protobuf::uint32 value) {
  set_has_formmapid();
  formmapid_ = value;
  // @@protoc_insertion_point(field_set:pb.TBigHuntEnterRsp.FormMapId)
}

// optional string SceneId = 7;
inline bool TBigHuntEnterRsp::has_sceneid() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void TBigHuntEnterRsp::set_has_sceneid() {
  _has_bits_[0] |= 0x00000040u;
}
inline void TBigHuntEnterRsp::clear_has_sceneid() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void TBigHuntEnterRsp::clear_sceneid() {
  if (sceneid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    sceneid_->clear();
  }
  clear_has_sceneid();
}
inline const ::std::string& TBigHuntEnterRsp::sceneid() const {
  // @@protoc_insertion_point(field_get:pb.TBigHuntEnterRsp.SceneId)
  return *sceneid_;
}
inline void TBigHuntEnterRsp::set_sceneid(const ::std::string& value) {
  set_has_sceneid();
  if (sceneid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    sceneid_ = new ::std::string;
  }
  sceneid_->assign(value);
  // @@protoc_insertion_point(field_set:pb.TBigHuntEnterRsp.SceneId)
}
inline void TBigHuntEnterRsp::set_sceneid(const char* value) {
  set_has_sceneid();
  if (sceneid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    sceneid_ = new ::std::string;
  }
  sceneid_->assign(value);
  // @@protoc_insertion_point(field_set_char:pb.TBigHuntEnterRsp.SceneId)
}
inline void TBigHuntEnterRsp::set_sceneid(const char* value, size_t size) {
  set_has_sceneid();
  if (sceneid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    sceneid_ = new ::std::string;
  }
  sceneid_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:pb.TBigHuntEnterRsp.SceneId)
}
inline ::std::string* TBigHuntEnterRsp::mutable_sceneid() {
  set_has_sceneid();
  if (sceneid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    sceneid_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:pb.TBigHuntEnterRsp.SceneId)
  return sceneid_;
}
inline ::std::string* TBigHuntEnterRsp::release_sceneid() {
  clear_has_sceneid();
  if (sceneid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = sceneid_;
    sceneid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void TBigHuntEnterRsp::set_allocated_sceneid(::std::string* sceneid) {
  if (sceneid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete sceneid_;
  }
  if (sceneid) {
    set_has_sceneid();
    sceneid_ = sceneid;
  } else {
    clear_has_sceneid();
    sceneid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:pb.TBigHuntEnterRsp.SceneId)
}

// repeated uint32 MonsterId = 8;
inline int TBigHuntEnterRsp::monsterid_size() const {
  return monsterid_.size();
}
inline void TBigHuntEnterRsp::clear_monsterid() {
  monsterid_.Clear();
}
inline ::google::protobuf::uint32 TBigHuntEnterRsp::monsterid(int index) const {
  // @@protoc_insertion_point(field_get:pb.TBigHuntEnterRsp.MonsterId)
  return monsterid_.Get(index);
}
inline void TBigHuntEnterRsp::set_monsterid(int index, ::google::protobuf::uint32 value) {
  monsterid_.Set(index, value);
  // @@protoc_insertion_point(field_set:pb.TBigHuntEnterRsp.MonsterId)
}
inline void TBigHuntEnterRsp::add_monsterid(::google::protobuf::uint32 value) {
  monsterid_.Add(value);
  // @@protoc_insertion_point(field_add:pb.TBigHuntEnterRsp.MonsterId)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
TBigHuntEnterRsp::monsterid() const {
  // @@protoc_insertion_point(field_list:pb.TBigHuntEnterRsp.MonsterId)
  return monsterid_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
TBigHuntEnterRsp::mutable_monsterid() {
  // @@protoc_insertion_point(field_mutable_list:pb.TBigHuntEnterRsp.MonsterId)
  return &monsterid_;
}

// repeated uint32 BossId = 9;
inline int TBigHuntEnterRsp::bossid_size() const {
  return bossid_.size();
}
inline void TBigHuntEnterRsp::clear_bossid() {
  bossid_.Clear();
}
inline ::google::protobuf::uint32 TBigHuntEnterRsp::bossid(int index) const {
  // @@protoc_insertion_point(field_get:pb.TBigHuntEnterRsp.BossId)
  return bossid_.Get(index);
}
inline void TBigHuntEnterRsp::set_bossid(int index, ::google::protobuf::uint32 value) {
  bossid_.Set(index, value);
  // @@protoc_insertion_point(field_set:pb.TBigHuntEnterRsp.BossId)
}
inline void TBigHuntEnterRsp::add_bossid(::google::protobuf::uint32 value) {
  bossid_.Add(value);
  // @@protoc_insertion_point(field_add:pb.TBigHuntEnterRsp.BossId)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
TBigHuntEnterRsp::bossid() const {
  // @@protoc_insertion_point(field_list:pb.TBigHuntEnterRsp.BossId)
  return bossid_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
TBigHuntEnterRsp::mutable_bossid() {
  // @@protoc_insertion_point(field_mutable_list:pb.TBigHuntEnterRsp.BossId)
  return &bossid_;
}

// -------------------------------------------------------------------

// TBigHuntGetUserInfoRsp

// optional uint32 LeftChallengeNum = 1;
inline bool TBigHuntGetUserInfoRsp::has_leftchallengenum() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TBigHuntGetUserInfoRsp::set_has_leftchallengenum() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TBigHuntGetUserInfoRsp::clear_has_leftchallengenum() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TBigHuntGetUserInfoRsp::clear_leftchallengenum() {
  leftchallengenum_ = 0u;
  clear_has_leftchallengenum();
}
inline ::google::protobuf::uint32 TBigHuntGetUserInfoRsp::leftchallengenum() const {
  // @@protoc_insertion_point(field_get:pb.TBigHuntGetUserInfoRsp.LeftChallengeNum)
  return leftchallengenum_;
}
inline void TBigHuntGetUserInfoRsp::set_leftchallengenum(::google::protobuf::uint32 value) {
  set_has_leftchallengenum();
  leftchallengenum_ = value;
  // @@protoc_insertion_point(field_set:pb.TBigHuntGetUserInfoRsp.LeftChallengeNum)
}

// optional uint32 BuyChallengeNum = 2;
inline bool TBigHuntGetUserInfoRsp::has_buychallengenum() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TBigHuntGetUserInfoRsp::set_has_buychallengenum() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TBigHuntGetUserInfoRsp::clear_has_buychallengenum() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TBigHuntGetUserInfoRsp::clear_buychallengenum() {
  buychallengenum_ = 0u;
  clear_has_buychallengenum();
}
inline ::google::protobuf::uint32 TBigHuntGetUserInfoRsp::buychallengenum() const {
  // @@protoc_insertion_point(field_get:pb.TBigHuntGetUserInfoRsp.BuyChallengeNum)
  return buychallengenum_;
}
inline void TBigHuntGetUserInfoRsp::set_buychallengenum(::google::protobuf::uint32 value) {
  set_has_buychallengenum();
  buychallengenum_ = value;
  // @@protoc_insertion_point(field_set:pb.TBigHuntGetUserInfoRsp.BuyChallengeNum)
}

// repeated uint32 SuppressMonsterId = 3;
inline int TBigHuntGetUserInfoRsp::suppressmonsterid_size() const {
  return suppressmonsterid_.size();
}
inline void TBigHuntGetUserInfoRsp::clear_suppressmonsterid() {
  suppressmonsterid_.Clear();
}
inline ::google::protobuf::uint32 TBigHuntGetUserInfoRsp::suppressmonsterid(int index) const {
  // @@protoc_insertion_point(field_get:pb.TBigHuntGetUserInfoRsp.SuppressMonsterId)
  return suppressmonsterid_.Get(index);
}
inline void TBigHuntGetUserInfoRsp::set_suppressmonsterid(int index, ::google::protobuf::uint32 value) {
  suppressmonsterid_.Set(index, value);
  // @@protoc_insertion_point(field_set:pb.TBigHuntGetUserInfoRsp.SuppressMonsterId)
}
inline void TBigHuntGetUserInfoRsp::add_suppressmonsterid(::google::protobuf::uint32 value) {
  suppressmonsterid_.Add(value);
  // @@protoc_insertion_point(field_add:pb.TBigHuntGetUserInfoRsp.SuppressMonsterId)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
TBigHuntGetUserInfoRsp::suppressmonsterid() const {
  // @@protoc_insertion_point(field_list:pb.TBigHuntGetUserInfoRsp.SuppressMonsterId)
  return suppressmonsterid_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
TBigHuntGetUserInfoRsp::mutable_suppressmonsterid() {
  // @@protoc_insertion_point(field_mutable_list:pb.TBigHuntGetUserInfoRsp.SuppressMonsterId)
  return &suppressmonsterid_;
}

// optional uint64 SelfCoin = 4;
inline bool TBigHuntGetUserInfoRsp::has_selfcoin() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void TBigHuntGetUserInfoRsp::set_has_selfcoin() {
  _has_bits_[0] |= 0x00000008u;
}
inline void TBigHuntGetUserInfoRsp::clear_has_selfcoin() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void TBigHuntGetUserInfoRsp::clear_selfcoin() {
  selfcoin_ = GOOGLE_ULONGLONG(0);
  clear_has_selfcoin();
}
inline ::google::protobuf::uint64 TBigHuntGetUserInfoRsp::selfcoin() const {
  // @@protoc_insertion_point(field_get:pb.TBigHuntGetUserInfoRsp.SelfCoin)
  return selfcoin_;
}
inline void TBigHuntGetUserInfoRsp::set_selfcoin(::google::protobuf::uint64 value) {
  set_has_selfcoin();
  selfcoin_ = value;
  // @@protoc_insertion_point(field_set:pb.TBigHuntGetUserInfoRsp.SelfCoin)
}

// optional uint64 AllianceCoin = 5;
inline bool TBigHuntGetUserInfoRsp::has_alliancecoin() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void TBigHuntGetUserInfoRsp::set_has_alliancecoin() {
  _has_bits_[0] |= 0x00000010u;
}
inline void TBigHuntGetUserInfoRsp::clear_has_alliancecoin() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void TBigHuntGetUserInfoRsp::clear_alliancecoin() {
  alliancecoin_ = GOOGLE_ULONGLONG(0);
  clear_has_alliancecoin();
}
inline ::google::protobuf::uint64 TBigHuntGetUserInfoRsp::alliancecoin() const {
  // @@protoc_insertion_point(field_get:pb.TBigHuntGetUserInfoRsp.AllianceCoin)
  return alliancecoin_;
}
inline void TBigHuntGetUserInfoRsp::set_alliancecoin(::google::protobuf::uint64 value) {
  set_has_alliancecoin();
  alliancecoin_ = value;
  // @@protoc_insertion_point(field_set:pb.TBigHuntGetUserInfoRsp.AllianceCoin)
}

// repeated uint32 RewardIdArr = 6;
inline int TBigHuntGetUserInfoRsp::rewardidarr_size() const {
  return rewardidarr_.size();
}
inline void TBigHuntGetUserInfoRsp::clear_rewardidarr() {
  rewardidarr_.Clear();
}
inline ::google::protobuf::uint32 TBigHuntGetUserInfoRsp::rewardidarr(int index) const {
  // @@protoc_insertion_point(field_get:pb.TBigHuntGetUserInfoRsp.RewardIdArr)
  return rewardidarr_.Get(index);
}
inline void TBigHuntGetUserInfoRsp::set_rewardidarr(int index, ::google::protobuf::uint32 value) {
  rewardidarr_.Set(index, value);
  // @@protoc_insertion_point(field_set:pb.TBigHuntGetUserInfoRsp.RewardIdArr)
}
inline void TBigHuntGetUserInfoRsp::add_rewardidarr(::google::protobuf::uint32 value) {
  rewardidarr_.Add(value);
  // @@protoc_insertion_point(field_add:pb.TBigHuntGetUserInfoRsp.RewardIdArr)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
TBigHuntGetUserInfoRsp::rewardidarr() const {
  // @@protoc_insertion_point(field_list:pb.TBigHuntGetUserInfoRsp.RewardIdArr)
  return rewardidarr_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
TBigHuntGetUserInfoRsp::mutable_rewardidarr() {
  // @@protoc_insertion_point(field_mutable_list:pb.TBigHuntGetUserInfoRsp.RewardIdArr)
  return &rewardidarr_;
}

// optional uint64 LastRecoverTime = 7;
inline bool TBigHuntGetUserInfoRsp::has_lastrecovertime() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void TBigHuntGetUserInfoRsp::set_has_lastrecovertime() {
  _has_bits_[0] |= 0x00000040u;
}
inline void TBigHuntGetUserInfoRsp::clear_has_lastrecovertime() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void TBigHuntGetUserInfoRsp::clear_lastrecovertime() {
  lastrecovertime_ = GOOGLE_ULONGLONG(0);
  clear_has_lastrecovertime();
}
inline ::google::protobuf::uint64 TBigHuntGetUserInfoRsp::lastrecovertime() const {
  // @@protoc_insertion_point(field_get:pb.TBigHuntGetUserInfoRsp.LastRecoverTime)
  return lastrecovertime_;
}
inline void TBigHuntGetUserInfoRsp::set_lastrecovertime(::google::protobuf::uint64 value) {
  set_has_lastrecovertime();
  lastrecovertime_ = value;
  // @@protoc_insertion_point(field_set:pb.TBigHuntGetUserInfoRsp.LastRecoverTime)
}

// repeated .pb.TBigHuntDimensionInfo SelfDimensionArr = 8;
inline int TBigHuntGetUserInfoRsp::selfdimensionarr_size() const {
  return selfdimensionarr_.size();
}
inline void TBigHuntGetUserInfoRsp::clear_selfdimensionarr() {
  selfdimensionarr_.Clear();
}
inline const ::pb::TBigHuntDimensionInfo& TBigHuntGetUserInfoRsp::selfdimensionarr(int index) const {
  // @@protoc_insertion_point(field_get:pb.TBigHuntGetUserInfoRsp.SelfDimensionArr)
  return selfdimensionarr_.Get(index);
}
inline ::pb::TBigHuntDimensionInfo* TBigHuntGetUserInfoRsp::mutable_selfdimensionarr(int index) {
  // @@protoc_insertion_point(field_mutable:pb.TBigHuntGetUserInfoRsp.SelfDimensionArr)
  return selfdimensionarr_.Mutable(index);
}
inline ::pb::TBigHuntDimensionInfo* TBigHuntGetUserInfoRsp::add_selfdimensionarr() {
  // @@protoc_insertion_point(field_add:pb.TBigHuntGetUserInfoRsp.SelfDimensionArr)
  return selfdimensionarr_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::TBigHuntDimensionInfo >&
TBigHuntGetUserInfoRsp::selfdimensionarr() const {
  // @@protoc_insertion_point(field_list:pb.TBigHuntGetUserInfoRsp.SelfDimensionArr)
  return selfdimensionarr_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb::TBigHuntDimensionInfo >*
TBigHuntGetUserInfoRsp::mutable_selfdimensionarr() {
  // @@protoc_insertion_point(field_mutable_list:pb.TBigHuntGetUserInfoRsp.SelfDimensionArr)
  return &selfdimensionarr_;
}

// optional uint32 CurMapId = 9;
inline bool TBigHuntGetUserInfoRsp::has_curmapid() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void TBigHuntGetUserInfoRsp::set_has_curmapid() {
  _has_bits_[0] |= 0x00000100u;
}
inline void TBigHuntGetUserInfoRsp::clear_has_curmapid() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void TBigHuntGetUserInfoRsp::clear_curmapid() {
  curmapid_ = 0u;
  clear_has_curmapid();
}
inline ::google::protobuf::uint32 TBigHuntGetUserInfoRsp::curmapid() const {
  // @@protoc_insertion_point(field_get:pb.TBigHuntGetUserInfoRsp.CurMapId)
  return curmapid_;
}
inline void TBigHuntGetUserInfoRsp::set_curmapid(::google::protobuf::uint32 value) {
  set_has_curmapid();
  curmapid_ = value;
  // @@protoc_insertion_point(field_set:pb.TBigHuntGetUserInfoRsp.CurMapId)
}

// -------------------------------------------------------------------

// TBigHuntSetAtkFormationReq

// repeated .pb.TBigHuntFormationInfo FormationArr = 1;
inline int TBigHuntSetAtkFormationReq::formationarr_size() const {
  return formationarr_.size();
}
inline void TBigHuntSetAtkFormationReq::clear_formationarr() {
  formationarr_.Clear();
}
inline const ::pb::TBigHuntFormationInfo& TBigHuntSetAtkFormationReq::formationarr(int index) const {
  // @@protoc_insertion_point(field_get:pb.TBigHuntSetAtkFormationReq.FormationArr)
  return formationarr_.Get(index);
}
inline ::pb::TBigHuntFormationInfo* TBigHuntSetAtkFormationReq::mutable_formationarr(int index) {
  // @@protoc_insertion_point(field_mutable:pb.TBigHuntSetAtkFormationReq.FormationArr)
  return formationarr_.Mutable(index);
}
inline ::pb::TBigHuntFormationInfo* TBigHuntSetAtkFormationReq::add_formationarr() {
  // @@protoc_insertion_point(field_add:pb.TBigHuntSetAtkFormationReq.FormationArr)
  return formationarr_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::TBigHuntFormationInfo >&
TBigHuntSetAtkFormationReq::formationarr() const {
  // @@protoc_insertion_point(field_list:pb.TBigHuntSetAtkFormationReq.FormationArr)
  return formationarr_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb::TBigHuntFormationInfo >*
TBigHuntSetAtkFormationReq::mutable_formationarr() {
  // @@protoc_insertion_point(field_mutable_list:pb.TBigHuntSetAtkFormationReq.FormationArr)
  return &formationarr_;
}

// -------------------------------------------------------------------

// TBigHuntGetAtkFormationRsp

// repeated .pb.TBigHuntFormationInfo FormationArr = 1;
inline int TBigHuntGetAtkFormationRsp::formationarr_size() const {
  return formationarr_.size();
}
inline void TBigHuntGetAtkFormationRsp::clear_formationarr() {
  formationarr_.Clear();
}
inline const ::pb::TBigHuntFormationInfo& TBigHuntGetAtkFormationRsp::formationarr(int index) const {
  // @@protoc_insertion_point(field_get:pb.TBigHuntGetAtkFormationRsp.FormationArr)
  return formationarr_.Get(index);
}
inline ::pb::TBigHuntFormationInfo* TBigHuntGetAtkFormationRsp::mutable_formationarr(int index) {
  // @@protoc_insertion_point(field_mutable:pb.TBigHuntGetAtkFormationRsp.FormationArr)
  return formationarr_.Mutable(index);
}
inline ::pb::TBigHuntFormationInfo* TBigHuntGetAtkFormationRsp::add_formationarr() {
  // @@protoc_insertion_point(field_add:pb.TBigHuntGetAtkFormationRsp.FormationArr)
  return formationarr_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::TBigHuntFormationInfo >&
TBigHuntGetAtkFormationRsp::formationarr() const {
  // @@protoc_insertion_point(field_list:pb.TBigHuntGetAtkFormationRsp.FormationArr)
  return formationarr_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb::TBigHuntFormationInfo >*
TBigHuntGetAtkFormationRsp::mutable_formationarr() {
  // @@protoc_insertion_point(field_mutable_list:pb.TBigHuntGetAtkFormationRsp.FormationArr)
  return &formationarr_;
}

// -------------------------------------------------------------------

// TBigHuntGetBattleArgsReq

// optional uint32 Id = 1;
inline bool TBigHuntGetBattleArgsReq::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TBigHuntGetBattleArgsReq::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TBigHuntGetBattleArgsReq::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TBigHuntGetBattleArgsReq::clear_id() {
  id_ = 0u;
  clear_has_id();
}
inline ::google::protobuf::uint32 TBigHuntGetBattleArgsReq::id() const {
  // @@protoc_insertion_point(field_get:pb.TBigHuntGetBattleArgsReq.Id)
  return id_;
}
inline void TBigHuntGetBattleArgsReq::set_id(::google::protobuf::uint32 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:pb.TBigHuntGetBattleArgsReq.Id)
}

// optional .pb.TBattleCheckParam BattleCheckParam = 2;
inline bool TBigHuntGetBattleArgsReq::has_battlecheckparam() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TBigHuntGetBattleArgsReq::set_has_battlecheckparam() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TBigHuntGetBattleArgsReq::clear_has_battlecheckparam() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TBigHuntGetBattleArgsReq::clear_battlecheckparam() {
  if (battlecheckparam_ != NULL) battlecheckparam_->::pb::TBattleCheckParam::Clear();
  clear_has_battlecheckparam();
}
inline const ::pb::TBattleCheckParam& TBigHuntGetBattleArgsReq::battlecheckparam() const {
  // @@protoc_insertion_point(field_get:pb.TBigHuntGetBattleArgsReq.BattleCheckParam)
  return battlecheckparam_ != NULL ? *battlecheckparam_ : *default_instance_->battlecheckparam_;
}
inline ::pb::TBattleCheckParam* TBigHuntGetBattleArgsReq::mutable_battlecheckparam() {
  set_has_battlecheckparam();
  if (battlecheckparam_ == NULL) battlecheckparam_ = new ::pb::TBattleCheckParam;
  // @@protoc_insertion_point(field_mutable:pb.TBigHuntGetBattleArgsReq.BattleCheckParam)
  return battlecheckparam_;
}
inline ::pb::TBattleCheckParam* TBigHuntGetBattleArgsReq::release_battlecheckparam() {
  clear_has_battlecheckparam();
  ::pb::TBattleCheckParam* temp = battlecheckparam_;
  battlecheckparam_ = NULL;
  return temp;
}
inline void TBigHuntGetBattleArgsReq::set_allocated_battlecheckparam(::pb::TBattleCheckParam* battlecheckparam) {
  delete battlecheckparam_;
  battlecheckparam_ = battlecheckparam;
  if (battlecheckparam) {
    set_has_battlecheckparam();
  } else {
    clear_has_battlecheckparam();
  }
  // @@protoc_insertion_point(field_set_allocated:pb.TBigHuntGetBattleArgsReq.BattleCheckParam)
}

// -------------------------------------------------------------------

// TBigHuntGetBattleArgsRsp

// optional .pb.TBattleArgs BattleArgs = 1;
inline bool TBigHuntGetBattleArgsRsp::has_battleargs() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TBigHuntGetBattleArgsRsp::set_has_battleargs() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TBigHuntGetBattleArgsRsp::clear_has_battleargs() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TBigHuntGetBattleArgsRsp::clear_battleargs() {
  if (battleargs_ != NULL) battleargs_->::pb::TBattleArgs::Clear();
  clear_has_battleargs();
}
inline const ::pb::TBattleArgs& TBigHuntGetBattleArgsRsp::battleargs() const {
  // @@protoc_insertion_point(field_get:pb.TBigHuntGetBattleArgsRsp.BattleArgs)
  return battleargs_ != NULL ? *battleargs_ : *default_instance_->battleargs_;
}
inline ::pb::TBattleArgs* TBigHuntGetBattleArgsRsp::mutable_battleargs() {
  set_has_battleargs();
  if (battleargs_ == NULL) battleargs_ = new ::pb::TBattleArgs;
  // @@protoc_insertion_point(field_mutable:pb.TBigHuntGetBattleArgsRsp.BattleArgs)
  return battleargs_;
}
inline ::pb::TBattleArgs* TBigHuntGetBattleArgsRsp::release_battleargs() {
  clear_has_battleargs();
  ::pb::TBattleArgs* temp = battleargs_;
  battleargs_ = NULL;
  return temp;
}
inline void TBigHuntGetBattleArgsRsp::set_allocated_battleargs(::pb::TBattleArgs* battleargs) {
  delete battleargs_;
  battleargs_ = battleargs;
  if (battleargs) {
    set_has_battleargs();
  } else {
    clear_has_battleargs();
  }
  // @@protoc_insertion_point(field_set_allocated:pb.TBigHuntGetBattleArgsRsp.BattleArgs)
}

// -------------------------------------------------------------------

// TBigHuntReportBattleNormaMonsterReq

// optional uint32 MonsterId = 1;
inline bool TBigHuntReportBattleNormaMonsterReq::has_monsterid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TBigHuntReportBattleNormaMonsterReq::set_has_monsterid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TBigHuntReportBattleNormaMonsterReq::clear_has_monsterid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TBigHuntReportBattleNormaMonsterReq::clear_monsterid() {
  monsterid_ = 0u;
  clear_has_monsterid();
}
inline ::google::protobuf::uint32 TBigHuntReportBattleNormaMonsterReq::monsterid() const {
  // @@protoc_insertion_point(field_get:pb.TBigHuntReportBattleNormaMonsterReq.MonsterId)
  return monsterid_;
}
inline void TBigHuntReportBattleNormaMonsterReq::set_monsterid(::google::protobuf::uint32 value) {
  set_has_monsterid();
  monsterid_ = value;
  // @@protoc_insertion_point(field_set:pb.TBigHuntReportBattleNormaMonsterReq.MonsterId)
}

// optional bytes BattleRet = 2;
inline bool TBigHuntReportBattleNormaMonsterReq::has_battleret() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TBigHuntReportBattleNormaMonsterReq::set_has_battleret() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TBigHuntReportBattleNormaMonsterReq::clear_has_battleret() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TBigHuntReportBattleNormaMonsterReq::clear_battleret() {
  if (battleret_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    battleret_->clear();
  }
  clear_has_battleret();
}
inline const ::std::string& TBigHuntReportBattleNormaMonsterReq::battleret() const {
  // @@protoc_insertion_point(field_get:pb.TBigHuntReportBattleNormaMonsterReq.BattleRet)
  return *battleret_;
}
inline void TBigHuntReportBattleNormaMonsterReq::set_battleret(const ::std::string& value) {
  set_has_battleret();
  if (battleret_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    battleret_ = new ::std::string;
  }
  battleret_->assign(value);
  // @@protoc_insertion_point(field_set:pb.TBigHuntReportBattleNormaMonsterReq.BattleRet)
}
inline void TBigHuntReportBattleNormaMonsterReq::set_battleret(const char* value) {
  set_has_battleret();
  if (battleret_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    battleret_ = new ::std::string;
  }
  battleret_->assign(value);
  // @@protoc_insertion_point(field_set_char:pb.TBigHuntReportBattleNormaMonsterReq.BattleRet)
}
inline void TBigHuntReportBattleNormaMonsterReq::set_battleret(const void* value, size_t size) {
  set_has_battleret();
  if (battleret_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    battleret_ = new ::std::string;
  }
  battleret_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:pb.TBigHuntReportBattleNormaMonsterReq.BattleRet)
}
inline ::std::string* TBigHuntReportBattleNormaMonsterReq::mutable_battleret() {
  set_has_battleret();
  if (battleret_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    battleret_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:pb.TBigHuntReportBattleNormaMonsterReq.BattleRet)
  return battleret_;
}
inline ::std::string* TBigHuntReportBattleNormaMonsterReq::release_battleret() {
  clear_has_battleret();
  if (battleret_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = battleret_;
    battleret_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void TBigHuntReportBattleNormaMonsterReq::set_allocated_battleret(::std::string* battleret) {
  if (battleret_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete battleret_;
  }
  if (battleret) {
    set_has_battleret();
    battleret_ = battleret;
  } else {
    clear_has_battleret();
    battleret_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:pb.TBigHuntReportBattleNormaMonsterReq.BattleRet)
}

// -------------------------------------------------------------------

// TBigHuntReportBattleEliteMonsterReq

// optional uint32 MonsterId = 1;
inline bool TBigHuntReportBattleEliteMonsterReq::has_monsterid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TBigHuntReportBattleEliteMonsterReq::set_has_monsterid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TBigHuntReportBattleEliteMonsterReq::clear_has_monsterid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TBigHuntReportBattleEliteMonsterReq::clear_monsterid() {
  monsterid_ = 0u;
  clear_has_monsterid();
}
inline ::google::protobuf::uint32 TBigHuntReportBattleEliteMonsterReq::monsterid() const {
  // @@protoc_insertion_point(field_get:pb.TBigHuntReportBattleEliteMonsterReq.MonsterId)
  return monsterid_;
}
inline void TBigHuntReportBattleEliteMonsterReq::set_monsterid(::google::protobuf::uint32 value) {
  set_has_monsterid();
  monsterid_ = value;
  // @@protoc_insertion_point(field_set:pb.TBigHuntReportBattleEliteMonsterReq.MonsterId)
}

// optional bytes BattleRet = 2;
inline bool TBigHuntReportBattleEliteMonsterReq::has_battleret() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TBigHuntReportBattleEliteMonsterReq::set_has_battleret() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TBigHuntReportBattleEliteMonsterReq::clear_has_battleret() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TBigHuntReportBattleEliteMonsterReq::clear_battleret() {
  if (battleret_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    battleret_->clear();
  }
  clear_has_battleret();
}
inline const ::std::string& TBigHuntReportBattleEliteMonsterReq::battleret() const {
  // @@protoc_insertion_point(field_get:pb.TBigHuntReportBattleEliteMonsterReq.BattleRet)
  return *battleret_;
}
inline void TBigHuntReportBattleEliteMonsterReq::set_battleret(const ::std::string& value) {
  set_has_battleret();
  if (battleret_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    battleret_ = new ::std::string;
  }
  battleret_->assign(value);
  // @@protoc_insertion_point(field_set:pb.TBigHuntReportBattleEliteMonsterReq.BattleRet)
}
inline void TBigHuntReportBattleEliteMonsterReq::set_battleret(const char* value) {
  set_has_battleret();
  if (battleret_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    battleret_ = new ::std::string;
  }
  battleret_->assign(value);
  // @@protoc_insertion_point(field_set_char:pb.TBigHuntReportBattleEliteMonsterReq.BattleRet)
}
inline void TBigHuntReportBattleEliteMonsterReq::set_battleret(const void* value, size_t size) {
  set_has_battleret();
  if (battleret_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    battleret_ = new ::std::string;
  }
  battleret_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:pb.TBigHuntReportBattleEliteMonsterReq.BattleRet)
}
inline ::std::string* TBigHuntReportBattleEliteMonsterReq::mutable_battleret() {
  set_has_battleret();
  if (battleret_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    battleret_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:pb.TBigHuntReportBattleEliteMonsterReq.BattleRet)
  return battleret_;
}
inline ::std::string* TBigHuntReportBattleEliteMonsterReq::release_battleret() {
  clear_has_battleret();
  if (battleret_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = battleret_;
    battleret_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void TBigHuntReportBattleEliteMonsterReq::set_allocated_battleret(::std::string* battleret) {
  if (battleret_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete battleret_;
  }
  if (battleret) {
    set_has_battleret();
    battleret_ = battleret;
  } else {
    clear_has_battleret();
    battleret_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:pb.TBigHuntReportBattleEliteMonsterReq.BattleRet)
}

// -------------------------------------------------------------------

// TBigHuntReportBattleStakeReq

// optional uint32 MonsterId = 1;
inline bool TBigHuntReportBattleStakeReq::has_monsterid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TBigHuntReportBattleStakeReq::set_has_monsterid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TBigHuntReportBattleStakeReq::clear_has_monsterid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TBigHuntReportBattleStakeReq::clear_monsterid() {
  monsterid_ = 0u;
  clear_has_monsterid();
}
inline ::google::protobuf::uint32 TBigHuntReportBattleStakeReq::monsterid() const {
  // @@protoc_insertion_point(field_get:pb.TBigHuntReportBattleStakeReq.MonsterId)
  return monsterid_;
}
inline void TBigHuntReportBattleStakeReq::set_monsterid(::google::protobuf::uint32 value) {
  set_has_monsterid();
  monsterid_ = value;
  // @@protoc_insertion_point(field_set:pb.TBigHuntReportBattleStakeReq.MonsterId)
}

// optional bytes BattleRet = 2;
inline bool TBigHuntReportBattleStakeReq::has_battleret() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TBigHuntReportBattleStakeReq::set_has_battleret() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TBigHuntReportBattleStakeReq::clear_has_battleret() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TBigHuntReportBattleStakeReq::clear_battleret() {
  if (battleret_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    battleret_->clear();
  }
  clear_has_battleret();
}
inline const ::std::string& TBigHuntReportBattleStakeReq::battleret() const {
  // @@protoc_insertion_point(field_get:pb.TBigHuntReportBattleStakeReq.BattleRet)
  return *battleret_;
}
inline void TBigHuntReportBattleStakeReq::set_battleret(const ::std::string& value) {
  set_has_battleret();
  if (battleret_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    battleret_ = new ::std::string;
  }
  battleret_->assign(value);
  // @@protoc_insertion_point(field_set:pb.TBigHuntReportBattleStakeReq.BattleRet)
}
inline void TBigHuntReportBattleStakeReq::set_battleret(const char* value) {
  set_has_battleret();
  if (battleret_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    battleret_ = new ::std::string;
  }
  battleret_->assign(value);
  // @@protoc_insertion_point(field_set_char:pb.TBigHuntReportBattleStakeReq.BattleRet)
}
inline void TBigHuntReportBattleStakeReq::set_battleret(const void* value, size_t size) {
  set_has_battleret();
  if (battleret_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    battleret_ = new ::std::string;
  }
  battleret_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:pb.TBigHuntReportBattleStakeReq.BattleRet)
}
inline ::std::string* TBigHuntReportBattleStakeReq::mutable_battleret() {
  set_has_battleret();
  if (battleret_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    battleret_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:pb.TBigHuntReportBattleStakeReq.BattleRet)
  return battleret_;
}
inline ::std::string* TBigHuntReportBattleStakeReq::release_battleret() {
  clear_has_battleret();
  if (battleret_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = battleret_;
    battleret_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void TBigHuntReportBattleStakeReq::set_allocated_battleret(::std::string* battleret) {
  if (battleret_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete battleret_;
  }
  if (battleret) {
    set_has_battleret();
    battleret_ = battleret;
  } else {
    clear_has_battleret();
    battleret_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:pb.TBigHuntReportBattleStakeReq.BattleRet)
}

// -------------------------------------------------------------------

// TBigHuntReportBattleMonsterRsp

// optional .pb.EBigHuntKillType KillType = 1;
inline bool TBigHuntReportBattleMonsterRsp::has_killtype() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TBigHuntReportBattleMonsterRsp::set_has_killtype() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TBigHuntReportBattleMonsterRsp::clear_has_killtype() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TBigHuntReportBattleMonsterRsp::clear_killtype() {
  killtype_ = 301;
  clear_has_killtype();
}
inline ::pb::EBigHuntKillType TBigHuntReportBattleMonsterRsp::killtype() const {
  // @@protoc_insertion_point(field_get:pb.TBigHuntReportBattleMonsterRsp.KillType)
  return static_cast< ::pb::EBigHuntKillType >(killtype_);
}
inline void TBigHuntReportBattleMonsterRsp::set_killtype(::pb::EBigHuntKillType value) {
  assert(::pb::EBigHuntKillType_IsValid(value));
  set_has_killtype();
  killtype_ = value;
  // @@protoc_insertion_point(field_set:pb.TBigHuntReportBattleMonsterRsp.KillType)
}

// repeated .pb.TCommonReward RewardArr = 2;
inline int TBigHuntReportBattleMonsterRsp::rewardarr_size() const {
  return rewardarr_.size();
}
inline void TBigHuntReportBattleMonsterRsp::clear_rewardarr() {
  rewardarr_.Clear();
}
inline const ::pb::TCommonReward& TBigHuntReportBattleMonsterRsp::rewardarr(int index) const {
  // @@protoc_insertion_point(field_get:pb.TBigHuntReportBattleMonsterRsp.RewardArr)
  return rewardarr_.Get(index);
}
inline ::pb::TCommonReward* TBigHuntReportBattleMonsterRsp::mutable_rewardarr(int index) {
  // @@protoc_insertion_point(field_mutable:pb.TBigHuntReportBattleMonsterRsp.RewardArr)
  return rewardarr_.Mutable(index);
}
inline ::pb::TCommonReward* TBigHuntReportBattleMonsterRsp::add_rewardarr() {
  // @@protoc_insertion_point(field_add:pb.TBigHuntReportBattleMonsterRsp.RewardArr)
  return rewardarr_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::TCommonReward >&
TBigHuntReportBattleMonsterRsp::rewardarr() const {
  // @@protoc_insertion_point(field_list:pb.TBigHuntReportBattleMonsterRsp.RewardArr)
  return rewardarr_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb::TCommonReward >*
TBigHuntReportBattleMonsterRsp::mutable_rewardarr() {
  // @@protoc_insertion_point(field_mutable_list:pb.TBigHuntReportBattleMonsterRsp.RewardArr)
  return &rewardarr_;
}

// optional .pb.EBigHuntSuccessType isSuccess = 3;
inline bool TBigHuntReportBattleMonsterRsp::has_issuccess() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void TBigHuntReportBattleMonsterRsp::set_has_issuccess() {
  _has_bits_[0] |= 0x00000004u;
}
inline void TBigHuntReportBattleMonsterRsp::clear_has_issuccess() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void TBigHuntReportBattleMonsterRsp::clear_issuccess() {
  issuccess_ = 201;
  clear_has_issuccess();
}
inline ::pb::EBigHuntSuccessType TBigHuntReportBattleMonsterRsp::issuccess() const {
  // @@protoc_insertion_point(field_get:pb.TBigHuntReportBattleMonsterRsp.isSuccess)
  return static_cast< ::pb::EBigHuntSuccessType >(issuccess_);
}
inline void TBigHuntReportBattleMonsterRsp::set_issuccess(::pb::EBigHuntSuccessType value) {
  assert(::pb::EBigHuntSuccessType_IsValid(value));
  set_has_issuccess();
  issuccess_ = value;
  // @@protoc_insertion_point(field_set:pb.TBigHuntReportBattleMonsterRsp.isSuccess)
}

// -------------------------------------------------------------------

// TBigHuntReportBattleBossReq

// optional uint32 BossId = 1;
inline bool TBigHuntReportBattleBossReq::has_bossid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TBigHuntReportBattleBossReq::set_has_bossid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TBigHuntReportBattleBossReq::clear_has_bossid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TBigHuntReportBattleBossReq::clear_bossid() {
  bossid_ = 0u;
  clear_has_bossid();
}
inline ::google::protobuf::uint32 TBigHuntReportBattleBossReq::bossid() const {
  // @@protoc_insertion_point(field_get:pb.TBigHuntReportBattleBossReq.BossId)
  return bossid_;
}
inline void TBigHuntReportBattleBossReq::set_bossid(::google::protobuf::uint32 value) {
  set_has_bossid();
  bossid_ = value;
  // @@protoc_insertion_point(field_set:pb.TBigHuntReportBattleBossReq.BossId)
}

// optional bytes BattleRet = 2;
inline bool TBigHuntReportBattleBossReq::has_battleret() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TBigHuntReportBattleBossReq::set_has_battleret() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TBigHuntReportBattleBossReq::clear_has_battleret() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TBigHuntReportBattleBossReq::clear_battleret() {
  if (battleret_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    battleret_->clear();
  }
  clear_has_battleret();
}
inline const ::std::string& TBigHuntReportBattleBossReq::battleret() const {
  // @@protoc_insertion_point(field_get:pb.TBigHuntReportBattleBossReq.BattleRet)
  return *battleret_;
}
inline void TBigHuntReportBattleBossReq::set_battleret(const ::std::string& value) {
  set_has_battleret();
  if (battleret_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    battleret_ = new ::std::string;
  }
  battleret_->assign(value);
  // @@protoc_insertion_point(field_set:pb.TBigHuntReportBattleBossReq.BattleRet)
}
inline void TBigHuntReportBattleBossReq::set_battleret(const char* value) {
  set_has_battleret();
  if (battleret_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    battleret_ = new ::std::string;
  }
  battleret_->assign(value);
  // @@protoc_insertion_point(field_set_char:pb.TBigHuntReportBattleBossReq.BattleRet)
}
inline void TBigHuntReportBattleBossReq::set_battleret(const void* value, size_t size) {
  set_has_battleret();
  if (battleret_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    battleret_ = new ::std::string;
  }
  battleret_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:pb.TBigHuntReportBattleBossReq.BattleRet)
}
inline ::std::string* TBigHuntReportBattleBossReq::mutable_battleret() {
  set_has_battleret();
  if (battleret_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    battleret_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:pb.TBigHuntReportBattleBossReq.BattleRet)
  return battleret_;
}
inline ::std::string* TBigHuntReportBattleBossReq::release_battleret() {
  clear_has_battleret();
  if (battleret_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = battleret_;
    battleret_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void TBigHuntReportBattleBossReq::set_allocated_battleret(::std::string* battleret) {
  if (battleret_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete battleret_;
  }
  if (battleret) {
    set_has_battleret();
    battleret_ = battleret;
  } else {
    clear_has_battleret();
    battleret_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:pb.TBigHuntReportBattleBossReq.BattleRet)
}

// -------------------------------------------------------------------

// TBigHuntReportBattleBossRsp

// optional uint32 isKill = 1;
inline bool TBigHuntReportBattleBossRsp::has_iskill() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TBigHuntReportBattleBossRsp::set_has_iskill() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TBigHuntReportBattleBossRsp::clear_has_iskill() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TBigHuntReportBattleBossRsp::clear_iskill() {
  iskill_ = 0u;
  clear_has_iskill();
}
inline ::google::protobuf::uint32 TBigHuntReportBattleBossRsp::iskill() const {
  // @@protoc_insertion_point(field_get:pb.TBigHuntReportBattleBossRsp.isKill)
  return iskill_;
}
inline void TBigHuntReportBattleBossRsp::set_iskill(::google::protobuf::uint32 value) {
  set_has_iskill();
  iskill_ = value;
  // @@protoc_insertion_point(field_set:pb.TBigHuntReportBattleBossRsp.isKill)
}

// repeated .pb.TCommonReward RewardArr = 2;
inline int TBigHuntReportBattleBossRsp::rewardarr_size() const {
  return rewardarr_.size();
}
inline void TBigHuntReportBattleBossRsp::clear_rewardarr() {
  rewardarr_.Clear();
}
inline const ::pb::TCommonReward& TBigHuntReportBattleBossRsp::rewardarr(int index) const {
  // @@protoc_insertion_point(field_get:pb.TBigHuntReportBattleBossRsp.RewardArr)
  return rewardarr_.Get(index);
}
inline ::pb::TCommonReward* TBigHuntReportBattleBossRsp::mutable_rewardarr(int index) {
  // @@protoc_insertion_point(field_mutable:pb.TBigHuntReportBattleBossRsp.RewardArr)
  return rewardarr_.Mutable(index);
}
inline ::pb::TCommonReward* TBigHuntReportBattleBossRsp::add_rewardarr() {
  // @@protoc_insertion_point(field_add:pb.TBigHuntReportBattleBossRsp.RewardArr)
  return rewardarr_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::TCommonReward >&
TBigHuntReportBattleBossRsp::rewardarr() const {
  // @@protoc_insertion_point(field_list:pb.TBigHuntReportBattleBossRsp.RewardArr)
  return rewardarr_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb::TCommonReward >*
TBigHuntReportBattleBossRsp::mutable_rewardarr() {
  // @@protoc_insertion_point(field_mutable_list:pb.TBigHuntReportBattleBossRsp.RewardArr)
  return &rewardarr_;
}

// optional uint64 HpPercentage = 3;
inline bool TBigHuntReportBattleBossRsp::has_hppercentage() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void TBigHuntReportBattleBossRsp::set_has_hppercentage() {
  _has_bits_[0] |= 0x00000004u;
}
inline void TBigHuntReportBattleBossRsp::clear_has_hppercentage() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void TBigHuntReportBattleBossRsp::clear_hppercentage() {
  hppercentage_ = GOOGLE_ULONGLONG(0);
  clear_has_hppercentage();
}
inline ::google::protobuf::uint64 TBigHuntReportBattleBossRsp::hppercentage() const {
  // @@protoc_insertion_point(field_get:pb.TBigHuntReportBattleBossRsp.HpPercentage)
  return hppercentage_;
}
inline void TBigHuntReportBattleBossRsp::set_hppercentage(::google::protobuf::uint64 value) {
  set_has_hppercentage();
  hppercentage_ = value;
  // @@protoc_insertion_point(field_set:pb.TBigHuntReportBattleBossRsp.HpPercentage)
}

// optional .pb.EBigHuntSuccessType isSuccess = 4;
inline bool TBigHuntReportBattleBossRsp::has_issuccess() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void TBigHuntReportBattleBossRsp::set_has_issuccess() {
  _has_bits_[0] |= 0x00000008u;
}
inline void TBigHuntReportBattleBossRsp::clear_has_issuccess() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void TBigHuntReportBattleBossRsp::clear_issuccess() {
  issuccess_ = 201;
  clear_has_issuccess();
}
inline ::pb::EBigHuntSuccessType TBigHuntReportBattleBossRsp::issuccess() const {
  // @@protoc_insertion_point(field_get:pb.TBigHuntReportBattleBossRsp.isSuccess)
  return static_cast< ::pb::EBigHuntSuccessType >(issuccess_);
}
inline void TBigHuntReportBattleBossRsp::set_issuccess(::pb::EBigHuntSuccessType value) {
  assert(::pb::EBigHuntSuccessType_IsValid(value));
  set_has_issuccess();
  issuccess_ = value;
  // @@protoc_insertion_point(field_set:pb.TBigHuntReportBattleBossRsp.isSuccess)
}

// -------------------------------------------------------------------

// TBigHuntGetSelfDynamicInfoRsp

// repeated .pb.TBigHuntSelfDynamicInfo DynamicArr = 1;
inline int TBigHuntGetSelfDynamicInfoRsp::dynamicarr_size() const {
  return dynamicarr_.size();
}
inline void TBigHuntGetSelfDynamicInfoRsp::clear_dynamicarr() {
  dynamicarr_.Clear();
}
inline const ::pb::TBigHuntSelfDynamicInfo& TBigHuntGetSelfDynamicInfoRsp::dynamicarr(int index) const {
  // @@protoc_insertion_point(field_get:pb.TBigHuntGetSelfDynamicInfoRsp.DynamicArr)
  return dynamicarr_.Get(index);
}
inline ::pb::TBigHuntSelfDynamicInfo* TBigHuntGetSelfDynamicInfoRsp::mutable_dynamicarr(int index) {
  // @@protoc_insertion_point(field_mutable:pb.TBigHuntGetSelfDynamicInfoRsp.DynamicArr)
  return dynamicarr_.Mutable(index);
}
inline ::pb::TBigHuntSelfDynamicInfo* TBigHuntGetSelfDynamicInfoRsp::add_dynamicarr() {
  // @@protoc_insertion_point(field_add:pb.TBigHuntGetSelfDynamicInfoRsp.DynamicArr)
  return dynamicarr_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::TBigHuntSelfDynamicInfo >&
TBigHuntGetSelfDynamicInfoRsp::dynamicarr() const {
  // @@protoc_insertion_point(field_list:pb.TBigHuntGetSelfDynamicInfoRsp.DynamicArr)
  return dynamicarr_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb::TBigHuntSelfDynamicInfo >*
TBigHuntGetSelfDynamicInfoRsp::mutable_dynamicarr() {
  // @@protoc_insertion_point(field_mutable_list:pb.TBigHuntGetSelfDynamicInfoRsp.DynamicArr)
  return &dynamicarr_;
}

// -------------------------------------------------------------------

// TBigHuntReceiveAllianceCoinRewardReq

// optional uint32 Id = 1;
inline bool TBigHuntReceiveAllianceCoinRewardReq::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TBigHuntReceiveAllianceCoinRewardReq::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TBigHuntReceiveAllianceCoinRewardReq::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TBigHuntReceiveAllianceCoinRewardReq::clear_id() {
  id_ = 0u;
  clear_has_id();
}
inline ::google::protobuf::uint32 TBigHuntReceiveAllianceCoinRewardReq::id() const {
  // @@protoc_insertion_point(field_get:pb.TBigHuntReceiveAllianceCoinRewardReq.Id)
  return id_;
}
inline void TBigHuntReceiveAllianceCoinRewardReq::set_id(::google::protobuf::uint32 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:pb.TBigHuntReceiveAllianceCoinRewardReq.Id)
}

// -------------------------------------------------------------------

// TBigHuntReceiveAllianceCoinRewardRsp

// repeated .pb.TCommonReward RewardArr = 1;
inline int TBigHuntReceiveAllianceCoinRewardRsp::rewardarr_size() const {
  return rewardarr_.size();
}
inline void TBigHuntReceiveAllianceCoinRewardRsp::clear_rewardarr() {
  rewardarr_.Clear();
}
inline const ::pb::TCommonReward& TBigHuntReceiveAllianceCoinRewardRsp::rewardarr(int index) const {
  // @@protoc_insertion_point(field_get:pb.TBigHuntReceiveAllianceCoinRewardRsp.RewardArr)
  return rewardarr_.Get(index);
}
inline ::pb::TCommonReward* TBigHuntReceiveAllianceCoinRewardRsp::mutable_rewardarr(int index) {
  // @@protoc_insertion_point(field_mutable:pb.TBigHuntReceiveAllianceCoinRewardRsp.RewardArr)
  return rewardarr_.Mutable(index);
}
inline ::pb::TCommonReward* TBigHuntReceiveAllianceCoinRewardRsp::add_rewardarr() {
  // @@protoc_insertion_point(field_add:pb.TBigHuntReceiveAllianceCoinRewardRsp.RewardArr)
  return rewardarr_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::TCommonReward >&
TBigHuntReceiveAllianceCoinRewardRsp::rewardarr() const {
  // @@protoc_insertion_point(field_list:pb.TBigHuntReceiveAllianceCoinRewardRsp.RewardArr)
  return rewardarr_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb::TCommonReward >*
TBigHuntReceiveAllianceCoinRewardRsp::mutable_rewardarr() {
  // @@protoc_insertion_point(field_mutable_list:pb.TBigHuntReceiveAllianceCoinRewardRsp.RewardArr)
  return &rewardarr_;
}

// -------------------------------------------------------------------

// TBigHuntBuyChallengeNumReq

// optional uint32 Num = 1;
inline bool TBigHuntBuyChallengeNumReq::has_num() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TBigHuntBuyChallengeNumReq::set_has_num() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TBigHuntBuyChallengeNumReq::clear_has_num() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TBigHuntBuyChallengeNumReq::clear_num() {
  num_ = 0u;
  clear_has_num();
}
inline ::google::protobuf::uint32 TBigHuntBuyChallengeNumReq::num() const {
  // @@protoc_insertion_point(field_get:pb.TBigHuntBuyChallengeNumReq.Num)
  return num_;
}
inline void TBigHuntBuyChallengeNumReq::set_num(::google::protobuf::uint32 value) {
  set_has_num();
  num_ = value;
  // @@protoc_insertion_point(field_set:pb.TBigHuntBuyChallengeNumReq.Num)
}

// -------------------------------------------------------------------

// TBigHuntUpgradeDimensionReq

// optional uint32 Id = 1;
inline bool TBigHuntUpgradeDimensionReq::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TBigHuntUpgradeDimensionReq::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TBigHuntUpgradeDimensionReq::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TBigHuntUpgradeDimensionReq::clear_id() {
  id_ = 0u;
  clear_has_id();
}
inline ::google::protobuf::uint32 TBigHuntUpgradeDimensionReq::id() const {
  // @@protoc_insertion_point(field_get:pb.TBigHuntUpgradeDimensionReq.Id)
  return id_;
}
inline void TBigHuntUpgradeDimensionReq::set_id(::google::protobuf::uint32 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:pb.TBigHuntUpgradeDimensionReq.Id)
}

// -------------------------------------------------------------------

// TBigHuntAllianceCoinRankList

// optional .pb.TAllianceSimpleInfo AllianceInfo = 1;
inline bool TBigHuntAllianceCoinRankList::has_allianceinfo() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TBigHuntAllianceCoinRankList::set_has_allianceinfo() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TBigHuntAllianceCoinRankList::clear_has_allianceinfo() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TBigHuntAllianceCoinRankList::clear_allianceinfo() {
  if (allianceinfo_ != NULL) allianceinfo_->::pb::TAllianceSimpleInfo::Clear();
  clear_has_allianceinfo();
}
inline const ::pb::TAllianceSimpleInfo& TBigHuntAllianceCoinRankList::allianceinfo() const {
  // @@protoc_insertion_point(field_get:pb.TBigHuntAllianceCoinRankList.AllianceInfo)
  return allianceinfo_ != NULL ? *allianceinfo_ : *default_instance_->allianceinfo_;
}
inline ::pb::TAllianceSimpleInfo* TBigHuntAllianceCoinRankList::mutable_allianceinfo() {
  set_has_allianceinfo();
  if (allianceinfo_ == NULL) allianceinfo_ = new ::pb::TAllianceSimpleInfo;
  // @@protoc_insertion_point(field_mutable:pb.TBigHuntAllianceCoinRankList.AllianceInfo)
  return allianceinfo_;
}
inline ::pb::TAllianceSimpleInfo* TBigHuntAllianceCoinRankList::release_allianceinfo() {
  clear_has_allianceinfo();
  ::pb::TAllianceSimpleInfo* temp = allianceinfo_;
  allianceinfo_ = NULL;
  return temp;
}
inline void TBigHuntAllianceCoinRankList::set_allocated_allianceinfo(::pb::TAllianceSimpleInfo* allianceinfo) {
  delete allianceinfo_;
  allianceinfo_ = allianceinfo;
  if (allianceinfo) {
    set_has_allianceinfo();
  } else {
    clear_has_allianceinfo();
  }
  // @@protoc_insertion_point(field_set_allocated:pb.TBigHuntAllianceCoinRankList.AllianceInfo)
}

// optional uint64 CoinNum = 2;
inline bool TBigHuntAllianceCoinRankList::has_coinnum() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TBigHuntAllianceCoinRankList::set_has_coinnum() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TBigHuntAllianceCoinRankList::clear_has_coinnum() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TBigHuntAllianceCoinRankList::clear_coinnum() {
  coinnum_ = GOOGLE_ULONGLONG(0);
  clear_has_coinnum();
}
inline ::google::protobuf::uint64 TBigHuntAllianceCoinRankList::coinnum() const {
  // @@protoc_insertion_point(field_get:pb.TBigHuntAllianceCoinRankList.CoinNum)
  return coinnum_;
}
inline void TBigHuntAllianceCoinRankList::set_coinnum(::google::protobuf::uint64 value) {
  set_has_coinnum();
  coinnum_ = value;
  // @@protoc_insertion_point(field_set:pb.TBigHuntAllianceCoinRankList.CoinNum)
}

// optional uint32 Rank = 3;
inline bool TBigHuntAllianceCoinRankList::has_rank() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void TBigHuntAllianceCoinRankList::set_has_rank() {
  _has_bits_[0] |= 0x00000004u;
}
inline void TBigHuntAllianceCoinRankList::clear_has_rank() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void TBigHuntAllianceCoinRankList::clear_rank() {
  rank_ = 0u;
  clear_has_rank();
}
inline ::google::protobuf::uint32 TBigHuntAllianceCoinRankList::rank() const {
  // @@protoc_insertion_point(field_get:pb.TBigHuntAllianceCoinRankList.Rank)
  return rank_;
}
inline void TBigHuntAllianceCoinRankList::set_rank(::google::protobuf::uint32 value) {
  set_has_rank();
  rank_ = value;
  // @@protoc_insertion_point(field_set:pb.TBigHuntAllianceCoinRankList.Rank)
}

// -------------------------------------------------------------------

// TBigHuntAllianceCoinListRankReq

// optional uint32 Offset = 1;
inline bool TBigHuntAllianceCoinListRankReq::has_offset() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TBigHuntAllianceCoinListRankReq::set_has_offset() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TBigHuntAllianceCoinListRankReq::clear_has_offset() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TBigHuntAllianceCoinListRankReq::clear_offset() {
  offset_ = 0u;
  clear_has_offset();
}
inline ::google::protobuf::uint32 TBigHuntAllianceCoinListRankReq::offset() const {
  // @@protoc_insertion_point(field_get:pb.TBigHuntAllianceCoinListRankReq.Offset)
  return offset_;
}
inline void TBigHuntAllianceCoinListRankReq::set_offset(::google::protobuf::uint32 value) {
  set_has_offset();
  offset_ = value;
  // @@protoc_insertion_point(field_set:pb.TBigHuntAllianceCoinListRankReq.Offset)
}

// optional uint32 Limit = 2;
inline bool TBigHuntAllianceCoinListRankReq::has_limit() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TBigHuntAllianceCoinListRankReq::set_has_limit() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TBigHuntAllianceCoinListRankReq::clear_has_limit() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TBigHuntAllianceCoinListRankReq::clear_limit() {
  limit_ = 0u;
  clear_has_limit();
}
inline ::google::protobuf::uint32 TBigHuntAllianceCoinListRankReq::limit() const {
  // @@protoc_insertion_point(field_get:pb.TBigHuntAllianceCoinListRankReq.Limit)
  return limit_;
}
inline void TBigHuntAllianceCoinListRankReq::set_limit(::google::protobuf::uint32 value) {
  set_has_limit();
  limit_ = value;
  // @@protoc_insertion_point(field_set:pb.TBigHuntAllianceCoinListRankReq.Limit)
}

// -------------------------------------------------------------------

// TBigHuntAllianceCoinListRankRsp

// optional .pb.TBigHuntAllianceCoinRankList SelfAllianceRank = 1;
inline bool TBigHuntAllianceCoinListRankRsp::has_selfalliancerank() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TBigHuntAllianceCoinListRankRsp::set_has_selfalliancerank() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TBigHuntAllianceCoinListRankRsp::clear_has_selfalliancerank() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TBigHuntAllianceCoinListRankRsp::clear_selfalliancerank() {
  if (selfalliancerank_ != NULL) selfalliancerank_->::pb::TBigHuntAllianceCoinRankList::Clear();
  clear_has_selfalliancerank();
}
inline const ::pb::TBigHuntAllianceCoinRankList& TBigHuntAllianceCoinListRankRsp::selfalliancerank() const {
  // @@protoc_insertion_point(field_get:pb.TBigHuntAllianceCoinListRankRsp.SelfAllianceRank)
  return selfalliancerank_ != NULL ? *selfalliancerank_ : *default_instance_->selfalliancerank_;
}
inline ::pb::TBigHuntAllianceCoinRankList* TBigHuntAllianceCoinListRankRsp::mutable_selfalliancerank() {
  set_has_selfalliancerank();
  if (selfalliancerank_ == NULL) selfalliancerank_ = new ::pb::TBigHuntAllianceCoinRankList;
  // @@protoc_insertion_point(field_mutable:pb.TBigHuntAllianceCoinListRankRsp.SelfAllianceRank)
  return selfalliancerank_;
}
inline ::pb::TBigHuntAllianceCoinRankList* TBigHuntAllianceCoinListRankRsp::release_selfalliancerank() {
  clear_has_selfalliancerank();
  ::pb::TBigHuntAllianceCoinRankList* temp = selfalliancerank_;
  selfalliancerank_ = NULL;
  return temp;
}
inline void TBigHuntAllianceCoinListRankRsp::set_allocated_selfalliancerank(::pb::TBigHuntAllianceCoinRankList* selfalliancerank) {
  delete selfalliancerank_;
  selfalliancerank_ = selfalliancerank;
  if (selfalliancerank) {
    set_has_selfalliancerank();
  } else {
    clear_has_selfalliancerank();
  }
  // @@protoc_insertion_point(field_set_allocated:pb.TBigHuntAllianceCoinListRankRsp.SelfAllianceRank)
}

// repeated .pb.TBigHuntAllianceCoinRankList AllianceListArr = 2;
inline int TBigHuntAllianceCoinListRankRsp::alliancelistarr_size() const {
  return alliancelistarr_.size();
}
inline void TBigHuntAllianceCoinListRankRsp::clear_alliancelistarr() {
  alliancelistarr_.Clear();
}
inline const ::pb::TBigHuntAllianceCoinRankList& TBigHuntAllianceCoinListRankRsp::alliancelistarr(int index) const {
  // @@protoc_insertion_point(field_get:pb.TBigHuntAllianceCoinListRankRsp.AllianceListArr)
  return alliancelistarr_.Get(index);
}
inline ::pb::TBigHuntAllianceCoinRankList* TBigHuntAllianceCoinListRankRsp::mutable_alliancelistarr(int index) {
  // @@protoc_insertion_point(field_mutable:pb.TBigHuntAllianceCoinListRankRsp.AllianceListArr)
  return alliancelistarr_.Mutable(index);
}
inline ::pb::TBigHuntAllianceCoinRankList* TBigHuntAllianceCoinListRankRsp::add_alliancelistarr() {
  // @@protoc_insertion_point(field_add:pb.TBigHuntAllianceCoinListRankRsp.AllianceListArr)
  return alliancelistarr_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::TBigHuntAllianceCoinRankList >&
TBigHuntAllianceCoinListRankRsp::alliancelistarr() const {
  // @@protoc_insertion_point(field_list:pb.TBigHuntAllianceCoinListRankRsp.AllianceListArr)
  return alliancelistarr_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb::TBigHuntAllianceCoinRankList >*
TBigHuntAllianceCoinListRankRsp::mutable_alliancelistarr() {
  // @@protoc_insertion_point(field_mutable_list:pb.TBigHuntAllianceCoinListRankRsp.AllianceListArr)
  return &alliancelistarr_;
}

// -------------------------------------------------------------------

// TBigHuntBossSelfDamageRankList

// optional uint64 Damage = 1;
inline bool TBigHuntBossSelfDamageRankList::has_damage() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TBigHuntBossSelfDamageRankList::set_has_damage() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TBigHuntBossSelfDamageRankList::clear_has_damage() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TBigHuntBossSelfDamageRankList::clear_damage() {
  damage_ = GOOGLE_ULONGLONG(0);
  clear_has_damage();
}
inline ::google::protobuf::uint64 TBigHuntBossSelfDamageRankList::damage() const {
  // @@protoc_insertion_point(field_get:pb.TBigHuntBossSelfDamageRankList.Damage)
  return damage_;
}
inline void TBigHuntBossSelfDamageRankList::set_damage(::google::protobuf::uint64 value) {
  set_has_damage();
  damage_ = value;
  // @@protoc_insertion_point(field_set:pb.TBigHuntBossSelfDamageRankList.Damage)
}

// optional .pb.TUserSimpleInfo UserInfo = 2;
inline bool TBigHuntBossSelfDamageRankList::has_userinfo() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TBigHuntBossSelfDamageRankList::set_has_userinfo() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TBigHuntBossSelfDamageRankList::clear_has_userinfo() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TBigHuntBossSelfDamageRankList::clear_userinfo() {
  if (userinfo_ != NULL) userinfo_->::pb::TUserSimpleInfo::Clear();
  clear_has_userinfo();
}
inline const ::pb::TUserSimpleInfo& TBigHuntBossSelfDamageRankList::userinfo() const {
  // @@protoc_insertion_point(field_get:pb.TBigHuntBossSelfDamageRankList.UserInfo)
  return userinfo_ != NULL ? *userinfo_ : *default_instance_->userinfo_;
}
inline ::pb::TUserSimpleInfo* TBigHuntBossSelfDamageRankList::mutable_userinfo() {
  set_has_userinfo();
  if (userinfo_ == NULL) userinfo_ = new ::pb::TUserSimpleInfo;
  // @@protoc_insertion_point(field_mutable:pb.TBigHuntBossSelfDamageRankList.UserInfo)
  return userinfo_;
}
inline ::pb::TUserSimpleInfo* TBigHuntBossSelfDamageRankList::release_userinfo() {
  clear_has_userinfo();
  ::pb::TUserSimpleInfo* temp = userinfo_;
  userinfo_ = NULL;
  return temp;
}
inline void TBigHuntBossSelfDamageRankList::set_allocated_userinfo(::pb::TUserSimpleInfo* userinfo) {
  delete userinfo_;
  userinfo_ = userinfo;
  if (userinfo) {
    set_has_userinfo();
  } else {
    clear_has_userinfo();
  }
  // @@protoc_insertion_point(field_set_allocated:pb.TBigHuntBossSelfDamageRankList.UserInfo)
}

// optional uint32 Rank = 3;
inline bool TBigHuntBossSelfDamageRankList::has_rank() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void TBigHuntBossSelfDamageRankList::set_has_rank() {
  _has_bits_[0] |= 0x00000004u;
}
inline void TBigHuntBossSelfDamageRankList::clear_has_rank() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void TBigHuntBossSelfDamageRankList::clear_rank() {
  rank_ = 0u;
  clear_has_rank();
}
inline ::google::protobuf::uint32 TBigHuntBossSelfDamageRankList::rank() const {
  // @@protoc_insertion_point(field_get:pb.TBigHuntBossSelfDamageRankList.Rank)
  return rank_;
}
inline void TBigHuntBossSelfDamageRankList::set_rank(::google::protobuf::uint32 value) {
  set_has_rank();
  rank_ = value;
  // @@protoc_insertion_point(field_set:pb.TBigHuntBossSelfDamageRankList.Rank)
}

// -------------------------------------------------------------------

// TBigHuntGetBossSelfDamageRankListReq

// optional uint32 BossId = 1;
inline bool TBigHuntGetBossSelfDamageRankListReq::has_bossid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TBigHuntGetBossSelfDamageRankListReq::set_has_bossid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TBigHuntGetBossSelfDamageRankListReq::clear_has_bossid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TBigHuntGetBossSelfDamageRankListReq::clear_bossid() {
  bossid_ = 0u;
  clear_has_bossid();
}
inline ::google::protobuf::uint32 TBigHuntGetBossSelfDamageRankListReq::bossid() const {
  // @@protoc_insertion_point(field_get:pb.TBigHuntGetBossSelfDamageRankListReq.BossId)
  return bossid_;
}
inline void TBigHuntGetBossSelfDamageRankListReq::set_bossid(::google::protobuf::uint32 value) {
  set_has_bossid();
  bossid_ = value;
  // @@protoc_insertion_point(field_set:pb.TBigHuntGetBossSelfDamageRankListReq.BossId)
}

// optional uint32 Offset = 2;
inline bool TBigHuntGetBossSelfDamageRankListReq::has_offset() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TBigHuntGetBossSelfDamageRankListReq::set_has_offset() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TBigHuntGetBossSelfDamageRankListReq::clear_has_offset() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TBigHuntGetBossSelfDamageRankListReq::clear_offset() {
  offset_ = 0u;
  clear_has_offset();
}
inline ::google::protobuf::uint32 TBigHuntGetBossSelfDamageRankListReq::offset() const {
  // @@protoc_insertion_point(field_get:pb.TBigHuntGetBossSelfDamageRankListReq.Offset)
  return offset_;
}
inline void TBigHuntGetBossSelfDamageRankListReq::set_offset(::google::protobuf::uint32 value) {
  set_has_offset();
  offset_ = value;
  // @@protoc_insertion_point(field_set:pb.TBigHuntGetBossSelfDamageRankListReq.Offset)
}

// optional uint32 Limit = 3;
inline bool TBigHuntGetBossSelfDamageRankListReq::has_limit() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void TBigHuntGetBossSelfDamageRankListReq::set_has_limit() {
  _has_bits_[0] |= 0x00000004u;
}
inline void TBigHuntGetBossSelfDamageRankListReq::clear_has_limit() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void TBigHuntGetBossSelfDamageRankListReq::clear_limit() {
  limit_ = 0u;
  clear_has_limit();
}
inline ::google::protobuf::uint32 TBigHuntGetBossSelfDamageRankListReq::limit() const {
  // @@protoc_insertion_point(field_get:pb.TBigHuntGetBossSelfDamageRankListReq.Limit)
  return limit_;
}
inline void TBigHuntGetBossSelfDamageRankListReq::set_limit(::google::protobuf::uint32 value) {
  set_has_limit();
  limit_ = value;
  // @@protoc_insertion_point(field_set:pb.TBigHuntGetBossSelfDamageRankListReq.Limit)
}

// -------------------------------------------------------------------

// TBigHuntGetBossSelfDamageRankListRsp

// optional .pb.TBigHuntBossSelfDamageRankList MyRank = 1;
inline bool TBigHuntGetBossSelfDamageRankListRsp::has_myrank() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TBigHuntGetBossSelfDamageRankListRsp::set_has_myrank() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TBigHuntGetBossSelfDamageRankListRsp::clear_has_myrank() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TBigHuntGetBossSelfDamageRankListRsp::clear_myrank() {
  if (myrank_ != NULL) myrank_->::pb::TBigHuntBossSelfDamageRankList::Clear();
  clear_has_myrank();
}
inline const ::pb::TBigHuntBossSelfDamageRankList& TBigHuntGetBossSelfDamageRankListRsp::myrank() const {
  // @@protoc_insertion_point(field_get:pb.TBigHuntGetBossSelfDamageRankListRsp.MyRank)
  return myrank_ != NULL ? *myrank_ : *default_instance_->myrank_;
}
inline ::pb::TBigHuntBossSelfDamageRankList* TBigHuntGetBossSelfDamageRankListRsp::mutable_myrank() {
  set_has_myrank();
  if (myrank_ == NULL) myrank_ = new ::pb::TBigHuntBossSelfDamageRankList;
  // @@protoc_insertion_point(field_mutable:pb.TBigHuntGetBossSelfDamageRankListRsp.MyRank)
  return myrank_;
}
inline ::pb::TBigHuntBossSelfDamageRankList* TBigHuntGetBossSelfDamageRankListRsp::release_myrank() {
  clear_has_myrank();
  ::pb::TBigHuntBossSelfDamageRankList* temp = myrank_;
  myrank_ = NULL;
  return temp;
}
inline void TBigHuntGetBossSelfDamageRankListRsp::set_allocated_myrank(::pb::TBigHuntBossSelfDamageRankList* myrank) {
  delete myrank_;
  myrank_ = myrank;
  if (myrank) {
    set_has_myrank();
  } else {
    clear_has_myrank();
  }
  // @@protoc_insertion_point(field_set_allocated:pb.TBigHuntGetBossSelfDamageRankListRsp.MyRank)
}

// repeated .pb.TBigHuntBossSelfDamageRankList UserListArr = 2;
inline int TBigHuntGetBossSelfDamageRankListRsp::userlistarr_size() const {
  return userlistarr_.size();
}
inline void TBigHuntGetBossSelfDamageRankListRsp::clear_userlistarr() {
  userlistarr_.Clear();
}
inline const ::pb::TBigHuntBossSelfDamageRankList& TBigHuntGetBossSelfDamageRankListRsp::userlistarr(int index) const {
  // @@protoc_insertion_point(field_get:pb.TBigHuntGetBossSelfDamageRankListRsp.UserListArr)
  return userlistarr_.Get(index);
}
inline ::pb::TBigHuntBossSelfDamageRankList* TBigHuntGetBossSelfDamageRankListRsp::mutable_userlistarr(int index) {
  // @@protoc_insertion_point(field_mutable:pb.TBigHuntGetBossSelfDamageRankListRsp.UserListArr)
  return userlistarr_.Mutable(index);
}
inline ::pb::TBigHuntBossSelfDamageRankList* TBigHuntGetBossSelfDamageRankListRsp::add_userlistarr() {
  // @@protoc_insertion_point(field_add:pb.TBigHuntGetBossSelfDamageRankListRsp.UserListArr)
  return userlistarr_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::TBigHuntBossSelfDamageRankList >&
TBigHuntGetBossSelfDamageRankListRsp::userlistarr() const {
  // @@protoc_insertion_point(field_list:pb.TBigHuntGetBossSelfDamageRankListRsp.UserListArr)
  return userlistarr_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb::TBigHuntBossSelfDamageRankList >*
TBigHuntGetBossSelfDamageRankListRsp::mutable_userlistarr() {
  // @@protoc_insertion_point(field_mutable_list:pb.TBigHuntGetBossSelfDamageRankListRsp.UserListArr)
  return &userlistarr_;
}

// optional uint32 BossId = 3;
inline bool TBigHuntGetBossSelfDamageRankListRsp::has_bossid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void TBigHuntGetBossSelfDamageRankListRsp::set_has_bossid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void TBigHuntGetBossSelfDamageRankListRsp::clear_has_bossid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void TBigHuntGetBossSelfDamageRankListRsp::clear_bossid() {
  bossid_ = 0u;
  clear_has_bossid();
}
inline ::google::protobuf::uint32 TBigHuntGetBossSelfDamageRankListRsp::bossid() const {
  // @@protoc_insertion_point(field_get:pb.TBigHuntGetBossSelfDamageRankListRsp.BossId)
  return bossid_;
}
inline void TBigHuntGetBossSelfDamageRankListRsp::set_bossid(::google::protobuf::uint32 value) {
  set_has_bossid();
  bossid_ = value;
  // @@protoc_insertion_point(field_set:pb.TBigHuntGetBossSelfDamageRankListRsp.BossId)
}

// -------------------------------------------------------------------

// TBigHuntGetSelfCoinRankList

// optional uint64 CoinNum = 1;
inline bool TBigHuntGetSelfCoinRankList::has_coinnum() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TBigHuntGetSelfCoinRankList::set_has_coinnum() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TBigHuntGetSelfCoinRankList::clear_has_coinnum() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TBigHuntGetSelfCoinRankList::clear_coinnum() {
  coinnum_ = GOOGLE_ULONGLONG(0);
  clear_has_coinnum();
}
inline ::google::protobuf::uint64 TBigHuntGetSelfCoinRankList::coinnum() const {
  // @@protoc_insertion_point(field_get:pb.TBigHuntGetSelfCoinRankList.CoinNum)
  return coinnum_;
}
inline void TBigHuntGetSelfCoinRankList::set_coinnum(::google::protobuf::uint64 value) {
  set_has_coinnum();
  coinnum_ = value;
  // @@protoc_insertion_point(field_set:pb.TBigHuntGetSelfCoinRankList.CoinNum)
}

// optional .pb.TUserSimpleInfo UserInfo = 2;
inline bool TBigHuntGetSelfCoinRankList::has_userinfo() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TBigHuntGetSelfCoinRankList::set_has_userinfo() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TBigHuntGetSelfCoinRankList::clear_has_userinfo() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TBigHuntGetSelfCoinRankList::clear_userinfo() {
  if (userinfo_ != NULL) userinfo_->::pb::TUserSimpleInfo::Clear();
  clear_has_userinfo();
}
inline const ::pb::TUserSimpleInfo& TBigHuntGetSelfCoinRankList::userinfo() const {
  // @@protoc_insertion_point(field_get:pb.TBigHuntGetSelfCoinRankList.UserInfo)
  return userinfo_ != NULL ? *userinfo_ : *default_instance_->userinfo_;
}
inline ::pb::TUserSimpleInfo* TBigHuntGetSelfCoinRankList::mutable_userinfo() {
  set_has_userinfo();
  if (userinfo_ == NULL) userinfo_ = new ::pb::TUserSimpleInfo;
  // @@protoc_insertion_point(field_mutable:pb.TBigHuntGetSelfCoinRankList.UserInfo)
  return userinfo_;
}
inline ::pb::TUserSimpleInfo* TBigHuntGetSelfCoinRankList::release_userinfo() {
  clear_has_userinfo();
  ::pb::TUserSimpleInfo* temp = userinfo_;
  userinfo_ = NULL;
  return temp;
}
inline void TBigHuntGetSelfCoinRankList::set_allocated_userinfo(::pb::TUserSimpleInfo* userinfo) {
  delete userinfo_;
  userinfo_ = userinfo;
  if (userinfo) {
    set_has_userinfo();
  } else {
    clear_has_userinfo();
  }
  // @@protoc_insertion_point(field_set_allocated:pb.TBigHuntGetSelfCoinRankList.UserInfo)
}

// optional uint32 Rank = 3;
inline bool TBigHuntGetSelfCoinRankList::has_rank() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void TBigHuntGetSelfCoinRankList::set_has_rank() {
  _has_bits_[0] |= 0x00000004u;
}
inline void TBigHuntGetSelfCoinRankList::clear_has_rank() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void TBigHuntGetSelfCoinRankList::clear_rank() {
  rank_ = 0u;
  clear_has_rank();
}
inline ::google::protobuf::uint32 TBigHuntGetSelfCoinRankList::rank() const {
  // @@protoc_insertion_point(field_get:pb.TBigHuntGetSelfCoinRankList.Rank)
  return rank_;
}
inline void TBigHuntGetSelfCoinRankList::set_rank(::google::protobuf::uint32 value) {
  set_has_rank();
  rank_ = value;
  // @@protoc_insertion_point(field_set:pb.TBigHuntGetSelfCoinRankList.Rank)
}

// -------------------------------------------------------------------

// TBigHuntGetSelfCoinRankListReq

// optional uint32 Offset = 1;
inline bool TBigHuntGetSelfCoinRankListReq::has_offset() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TBigHuntGetSelfCoinRankListReq::set_has_offset() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TBigHuntGetSelfCoinRankListReq::clear_has_offset() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TBigHuntGetSelfCoinRankListReq::clear_offset() {
  offset_ = 0u;
  clear_has_offset();
}
inline ::google::protobuf::uint32 TBigHuntGetSelfCoinRankListReq::offset() const {
  // @@protoc_insertion_point(field_get:pb.TBigHuntGetSelfCoinRankListReq.Offset)
  return offset_;
}
inline void TBigHuntGetSelfCoinRankListReq::set_offset(::google::protobuf::uint32 value) {
  set_has_offset();
  offset_ = value;
  // @@protoc_insertion_point(field_set:pb.TBigHuntGetSelfCoinRankListReq.Offset)
}

// optional uint32 Limit = 2;
inline bool TBigHuntGetSelfCoinRankListReq::has_limit() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TBigHuntGetSelfCoinRankListReq::set_has_limit() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TBigHuntGetSelfCoinRankListReq::clear_has_limit() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TBigHuntGetSelfCoinRankListReq::clear_limit() {
  limit_ = 0u;
  clear_has_limit();
}
inline ::google::protobuf::uint32 TBigHuntGetSelfCoinRankListReq::limit() const {
  // @@protoc_insertion_point(field_get:pb.TBigHuntGetSelfCoinRankListReq.Limit)
  return limit_;
}
inline void TBigHuntGetSelfCoinRankListReq::set_limit(::google::protobuf::uint32 value) {
  set_has_limit();
  limit_ = value;
  // @@protoc_insertion_point(field_set:pb.TBigHuntGetSelfCoinRankListReq.Limit)
}

// -------------------------------------------------------------------

// TBigHuntGetSelfCoinRankListRsp

// optional .pb.TBigHuntGetSelfCoinRankList MyRank = 1;
inline bool TBigHuntGetSelfCoinRankListRsp::has_myrank() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TBigHuntGetSelfCoinRankListRsp::set_has_myrank() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TBigHuntGetSelfCoinRankListRsp::clear_has_myrank() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TBigHuntGetSelfCoinRankListRsp::clear_myrank() {
  if (myrank_ != NULL) myrank_->::pb::TBigHuntGetSelfCoinRankList::Clear();
  clear_has_myrank();
}
inline const ::pb::TBigHuntGetSelfCoinRankList& TBigHuntGetSelfCoinRankListRsp::myrank() const {
  // @@protoc_insertion_point(field_get:pb.TBigHuntGetSelfCoinRankListRsp.MyRank)
  return myrank_ != NULL ? *myrank_ : *default_instance_->myrank_;
}
inline ::pb::TBigHuntGetSelfCoinRankList* TBigHuntGetSelfCoinRankListRsp::mutable_myrank() {
  set_has_myrank();
  if (myrank_ == NULL) myrank_ = new ::pb::TBigHuntGetSelfCoinRankList;
  // @@protoc_insertion_point(field_mutable:pb.TBigHuntGetSelfCoinRankListRsp.MyRank)
  return myrank_;
}
inline ::pb::TBigHuntGetSelfCoinRankList* TBigHuntGetSelfCoinRankListRsp::release_myrank() {
  clear_has_myrank();
  ::pb::TBigHuntGetSelfCoinRankList* temp = myrank_;
  myrank_ = NULL;
  return temp;
}
inline void TBigHuntGetSelfCoinRankListRsp::set_allocated_myrank(::pb::TBigHuntGetSelfCoinRankList* myrank) {
  delete myrank_;
  myrank_ = myrank;
  if (myrank) {
    set_has_myrank();
  } else {
    clear_has_myrank();
  }
  // @@protoc_insertion_point(field_set_allocated:pb.TBigHuntGetSelfCoinRankListRsp.MyRank)
}

// repeated .pb.TBigHuntGetSelfCoinRankList AllUserRankInfo = 2;
inline int TBigHuntGetSelfCoinRankListRsp::alluserrankinfo_size() const {
  return alluserrankinfo_.size();
}
inline void TBigHuntGetSelfCoinRankListRsp::clear_alluserrankinfo() {
  alluserrankinfo_.Clear();
}
inline const ::pb::TBigHuntGetSelfCoinRankList& TBigHuntGetSelfCoinRankListRsp::alluserrankinfo(int index) const {
  // @@protoc_insertion_point(field_get:pb.TBigHuntGetSelfCoinRankListRsp.AllUserRankInfo)
  return alluserrankinfo_.Get(index);
}
inline ::pb::TBigHuntGetSelfCoinRankList* TBigHuntGetSelfCoinRankListRsp::mutable_alluserrankinfo(int index) {
  // @@protoc_insertion_point(field_mutable:pb.TBigHuntGetSelfCoinRankListRsp.AllUserRankInfo)
  return alluserrankinfo_.Mutable(index);
}
inline ::pb::TBigHuntGetSelfCoinRankList* TBigHuntGetSelfCoinRankListRsp::add_alluserrankinfo() {
  // @@protoc_insertion_point(field_add:pb.TBigHuntGetSelfCoinRankListRsp.AllUserRankInfo)
  return alluserrankinfo_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::TBigHuntGetSelfCoinRankList >&
TBigHuntGetSelfCoinRankListRsp::alluserrankinfo() const {
  // @@protoc_insertion_point(field_list:pb.TBigHuntGetSelfCoinRankListRsp.AllUserRankInfo)
  return alluserrankinfo_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb::TBigHuntGetSelfCoinRankList >*
TBigHuntGetSelfCoinRankListRsp::mutable_alluserrankinfo() {
  // @@protoc_insertion_point(field_mutable_list:pb.TBigHuntGetSelfCoinRankListRsp.AllUserRankInfo)
  return &alluserrankinfo_;
}

// -------------------------------------------------------------------

// TBigHuntCancelSuppressReq

// optional uint32 MonsterId = 1;
inline bool TBigHuntCancelSuppressReq::has_monsterid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TBigHuntCancelSuppressReq::set_has_monsterid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TBigHuntCancelSuppressReq::clear_has_monsterid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TBigHuntCancelSuppressReq::clear_monsterid() {
  monsterid_ = 0u;
  clear_has_monsterid();
}
inline ::google::protobuf::uint32 TBigHuntCancelSuppressReq::monsterid() const {
  // @@protoc_insertion_point(field_get:pb.TBigHuntCancelSuppressReq.MonsterId)
  return monsterid_;
}
inline void TBigHuntCancelSuppressReq::set_monsterid(::google::protobuf::uint32 value) {
  set_has_monsterid();
  monsterid_ = value;
  // @@protoc_insertion_point(field_set:pb.TBigHuntCancelSuppressReq.MonsterId)
}

// -------------------------------------------------------------------

// TBigHuntMonsterBeKilledInfo

// optional uint32 MonsterId = 1;
inline bool TBigHuntMonsterBeKilledInfo::has_monsterid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TBigHuntMonsterBeKilledInfo::set_has_monsterid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TBigHuntMonsterBeKilledInfo::clear_has_monsterid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TBigHuntMonsterBeKilledInfo::clear_monsterid() {
  monsterid_ = 0u;
  clear_has_monsterid();
}
inline ::google::protobuf::uint32 TBigHuntMonsterBeKilledInfo::monsterid() const {
  // @@protoc_insertion_point(field_get:pb.TBigHuntMonsterBeKilledInfo.MonsterId)
  return monsterid_;
}
inline void TBigHuntMonsterBeKilledInfo::set_monsterid(::google::protobuf::uint32 value) {
  set_has_monsterid();
  monsterid_ = value;
  // @@protoc_insertion_point(field_set:pb.TBigHuntMonsterBeKilledInfo.MonsterId)
}

// optional uint64 Hp = 2;
inline bool TBigHuntMonsterBeKilledInfo::has_hp() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TBigHuntMonsterBeKilledInfo::set_has_hp() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TBigHuntMonsterBeKilledInfo::clear_has_hp() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TBigHuntMonsterBeKilledInfo::clear_hp() {
  hp_ = GOOGLE_ULONGLONG(0);
  clear_has_hp();
}
inline ::google::protobuf::uint64 TBigHuntMonsterBeKilledInfo::hp() const {
  // @@protoc_insertion_point(field_get:pb.TBigHuntMonsterBeKilledInfo.Hp)
  return hp_;
}
inline void TBigHuntMonsterBeKilledInfo::set_hp(::google::protobuf::uint64 value) {
  set_has_hp();
  hp_ = value;
  // @@protoc_insertion_point(field_set:pb.TBigHuntMonsterBeKilledInfo.Hp)
}

// optional .pb.TUserSimpleInfo UserInfo = 3;
inline bool TBigHuntMonsterBeKilledInfo::has_userinfo() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void TBigHuntMonsterBeKilledInfo::set_has_userinfo() {
  _has_bits_[0] |= 0x00000004u;
}
inline void TBigHuntMonsterBeKilledInfo::clear_has_userinfo() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void TBigHuntMonsterBeKilledInfo::clear_userinfo() {
  if (userinfo_ != NULL) userinfo_->::pb::TUserSimpleInfo::Clear();
  clear_has_userinfo();
}
inline const ::pb::TUserSimpleInfo& TBigHuntMonsterBeKilledInfo::userinfo() const {
  // @@protoc_insertion_point(field_get:pb.TBigHuntMonsterBeKilledInfo.UserInfo)
  return userinfo_ != NULL ? *userinfo_ : *default_instance_->userinfo_;
}
inline ::pb::TUserSimpleInfo* TBigHuntMonsterBeKilledInfo::mutable_userinfo() {
  set_has_userinfo();
  if (userinfo_ == NULL) userinfo_ = new ::pb::TUserSimpleInfo;
  // @@protoc_insertion_point(field_mutable:pb.TBigHuntMonsterBeKilledInfo.UserInfo)
  return userinfo_;
}
inline ::pb::TUserSimpleInfo* TBigHuntMonsterBeKilledInfo::release_userinfo() {
  clear_has_userinfo();
  ::pb::TUserSimpleInfo* temp = userinfo_;
  userinfo_ = NULL;
  return temp;
}
inline void TBigHuntMonsterBeKilledInfo::set_allocated_userinfo(::pb::TUserSimpleInfo* userinfo) {
  delete userinfo_;
  userinfo_ = userinfo;
  if (userinfo) {
    set_has_userinfo();
  } else {
    clear_has_userinfo();
  }
  // @@protoc_insertion_point(field_set_allocated:pb.TBigHuntMonsterBeKilledInfo.UserInfo)
}

// -------------------------------------------------------------------

// TBigHuntMonsterBeKilledNotify

// optional .pb.TBigHuntMonsterBeKilledInfo MonsterInfo = 1;
inline bool TBigHuntMonsterBeKilledNotify::has_monsterinfo() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TBigHuntMonsterBeKilledNotify::set_has_monsterinfo() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TBigHuntMonsterBeKilledNotify::clear_has_monsterinfo() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TBigHuntMonsterBeKilledNotify::clear_monsterinfo() {
  if (monsterinfo_ != NULL) monsterinfo_->::pb::TBigHuntMonsterBeKilledInfo::Clear();
  clear_has_monsterinfo();
}
inline const ::pb::TBigHuntMonsterBeKilledInfo& TBigHuntMonsterBeKilledNotify::monsterinfo() const {
  // @@protoc_insertion_point(field_get:pb.TBigHuntMonsterBeKilledNotify.MonsterInfo)
  return monsterinfo_ != NULL ? *monsterinfo_ : *default_instance_->monsterinfo_;
}
inline ::pb::TBigHuntMonsterBeKilledInfo* TBigHuntMonsterBeKilledNotify::mutable_monsterinfo() {
  set_has_monsterinfo();
  if (monsterinfo_ == NULL) monsterinfo_ = new ::pb::TBigHuntMonsterBeKilledInfo;
  // @@protoc_insertion_point(field_mutable:pb.TBigHuntMonsterBeKilledNotify.MonsterInfo)
  return monsterinfo_;
}
inline ::pb::TBigHuntMonsterBeKilledInfo* TBigHuntMonsterBeKilledNotify::release_monsterinfo() {
  clear_has_monsterinfo();
  ::pb::TBigHuntMonsterBeKilledInfo* temp = monsterinfo_;
  monsterinfo_ = NULL;
  return temp;
}
inline void TBigHuntMonsterBeKilledNotify::set_allocated_monsterinfo(::pb::TBigHuntMonsterBeKilledInfo* monsterinfo) {
  delete monsterinfo_;
  monsterinfo_ = monsterinfo;
  if (monsterinfo) {
    set_has_monsterinfo();
  } else {
    clear_has_monsterinfo();
  }
  // @@protoc_insertion_point(field_set_allocated:pb.TBigHuntMonsterBeKilledNotify.MonsterInfo)
}

// -------------------------------------------------------------------

// TBigHuntDynamicNotify

// optional .pb.TBigHuntMapDynamicInfo RecordInfo = 1;
inline bool TBigHuntDynamicNotify::has_recordinfo() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TBigHuntDynamicNotify::set_has_recordinfo() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TBigHuntDynamicNotify::clear_has_recordinfo() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TBigHuntDynamicNotify::clear_recordinfo() {
  if (recordinfo_ != NULL) recordinfo_->::pb::TBigHuntMapDynamicInfo::Clear();
  clear_has_recordinfo();
}
inline const ::pb::TBigHuntMapDynamicInfo& TBigHuntDynamicNotify::recordinfo() const {
  // @@protoc_insertion_point(field_get:pb.TBigHuntDynamicNotify.RecordInfo)
  return recordinfo_ != NULL ? *recordinfo_ : *default_instance_->recordinfo_;
}
inline ::pb::TBigHuntMapDynamicInfo* TBigHuntDynamicNotify::mutable_recordinfo() {
  set_has_recordinfo();
  if (recordinfo_ == NULL) recordinfo_ = new ::pb::TBigHuntMapDynamicInfo;
  // @@protoc_insertion_point(field_mutable:pb.TBigHuntDynamicNotify.RecordInfo)
  return recordinfo_;
}
inline ::pb::TBigHuntMapDynamicInfo* TBigHuntDynamicNotify::release_recordinfo() {
  clear_has_recordinfo();
  ::pb::TBigHuntMapDynamicInfo* temp = recordinfo_;
  recordinfo_ = NULL;
  return temp;
}
inline void TBigHuntDynamicNotify::set_allocated_recordinfo(::pb::TBigHuntMapDynamicInfo* recordinfo) {
  delete recordinfo_;
  recordinfo_ = recordinfo;
  if (recordinfo) {
    set_has_recordinfo();
  } else {
    clear_has_recordinfo();
  }
  // @@protoc_insertion_point(field_set_allocated:pb.TBigHuntDynamicNotify.RecordInfo)
}

// -------------------------------------------------------------------

// TBigHuntUserDimensionNotify

// optional uint32 Id = 1;
inline bool TBigHuntUserDimensionNotify::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TBigHuntUserDimensionNotify::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TBigHuntUserDimensionNotify::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TBigHuntUserDimensionNotify::clear_id() {
  id_ = 0u;
  clear_has_id();
}
inline ::google::protobuf::uint32 TBigHuntUserDimensionNotify::id() const {
  // @@protoc_insertion_point(field_get:pb.TBigHuntUserDimensionNotify.Id)
  return id_;
}
inline void TBigHuntUserDimensionNotify::set_id(::google::protobuf::uint32 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:pb.TBigHuntUserDimensionNotify.Id)
}

// optional uint32 nowLevel = 2;
inline bool TBigHuntUserDimensionNotify::has_nowlevel() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TBigHuntUserDimensionNotify::set_has_nowlevel() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TBigHuntUserDimensionNotify::clear_has_nowlevel() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TBigHuntUserDimensionNotify::clear_nowlevel() {
  nowlevel_ = 0u;
  clear_has_nowlevel();
}
inline ::google::protobuf::uint32 TBigHuntUserDimensionNotify::nowlevel() const {
  // @@protoc_insertion_point(field_get:pb.TBigHuntUserDimensionNotify.nowLevel)
  return nowlevel_;
}
inline void TBigHuntUserDimensionNotify::set_nowlevel(::google::protobuf::uint32 value) {
  set_has_nowlevel();
  nowlevel_ = value;
  // @@protoc_insertion_point(field_set:pb.TBigHuntUserDimensionNotify.nowLevel)
}

// -------------------------------------------------------------------

// TBigHuntCancelSuppressNotify

// optional uint32 MonsterId = 1;
inline bool TBigHuntCancelSuppressNotify::has_monsterid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TBigHuntCancelSuppressNotify::set_has_monsterid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TBigHuntCancelSuppressNotify::clear_has_monsterid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TBigHuntCancelSuppressNotify::clear_monsterid() {
  monsterid_ = 0u;
  clear_has_monsterid();
}
inline ::google::protobuf::uint32 TBigHuntCancelSuppressNotify::monsterid() const {
  // @@protoc_insertion_point(field_get:pb.TBigHuntCancelSuppressNotify.MonsterId)
  return monsterid_;
}
inline void TBigHuntCancelSuppressNotify::set_monsterid(::google::protobuf::uint32 value) {
  set_has_monsterid();
  monsterid_ = value;
  // @@protoc_insertion_point(field_set:pb.TBigHuntCancelSuppressNotify.MonsterId)
}

// -------------------------------------------------------------------

// TBigHuntUserDataChangeNotify

// optional uint32 LeftChallengeNum = 1;
inline bool TBigHuntUserDataChangeNotify::has_leftchallengenum() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TBigHuntUserDataChangeNotify::set_has_leftchallengenum() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TBigHuntUserDataChangeNotify::clear_has_leftchallengenum() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TBigHuntUserDataChangeNotify::clear_leftchallengenum() {
  leftchallengenum_ = 0u;
  clear_has_leftchallengenum();
}
inline ::google::protobuf::uint32 TBigHuntUserDataChangeNotify::leftchallengenum() const {
  // @@protoc_insertion_point(field_get:pb.TBigHuntUserDataChangeNotify.LeftChallengeNum)
  return leftchallengenum_;
}
inline void TBigHuntUserDataChangeNotify::set_leftchallengenum(::google::protobuf::uint32 value) {
  set_has_leftchallengenum();
  leftchallengenum_ = value;
  // @@protoc_insertion_point(field_set:pb.TBigHuntUserDataChangeNotify.LeftChallengeNum)
}

// optional uint64 SelfCoin = 2;
inline bool TBigHuntUserDataChangeNotify::has_selfcoin() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TBigHuntUserDataChangeNotify::set_has_selfcoin() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TBigHuntUserDataChangeNotify::clear_has_selfcoin() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TBigHuntUserDataChangeNotify::clear_selfcoin() {
  selfcoin_ = GOOGLE_ULONGLONG(0);
  clear_has_selfcoin();
}
inline ::google::protobuf::uint64 TBigHuntUserDataChangeNotify::selfcoin() const {
  // @@protoc_insertion_point(field_get:pb.TBigHuntUserDataChangeNotify.SelfCoin)
  return selfcoin_;
}
inline void TBigHuntUserDataChangeNotify::set_selfcoin(::google::protobuf::uint64 value) {
  set_has_selfcoin();
  selfcoin_ = value;
  // @@protoc_insertion_point(field_set:pb.TBigHuntUserDataChangeNotify.SelfCoin)
}

// optional uint64 AllianceCoin = 3;
inline bool TBigHuntUserDataChangeNotify::has_alliancecoin() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void TBigHuntUserDataChangeNotify::set_has_alliancecoin() {
  _has_bits_[0] |= 0x00000004u;
}
inline void TBigHuntUserDataChangeNotify::clear_has_alliancecoin() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void TBigHuntUserDataChangeNotify::clear_alliancecoin() {
  alliancecoin_ = GOOGLE_ULONGLONG(0);
  clear_has_alliancecoin();
}
inline ::google::protobuf::uint64 TBigHuntUserDataChangeNotify::alliancecoin() const {
  // @@protoc_insertion_point(field_get:pb.TBigHuntUserDataChangeNotify.AllianceCoin)
  return alliancecoin_;
}
inline void TBigHuntUserDataChangeNotify::set_alliancecoin(::google::protobuf::uint64 value) {
  set_has_alliancecoin();
  alliancecoin_ = value;
  // @@protoc_insertion_point(field_set:pb.TBigHuntUserDataChangeNotify.AllianceCoin)
}

// optional uint32 EliteMonster = 4;
inline bool TBigHuntUserDataChangeNotify::has_elitemonster() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void TBigHuntUserDataChangeNotify::set_has_elitemonster() {
  _has_bits_[0] |= 0x00000008u;
}
inline void TBigHuntUserDataChangeNotify::clear_has_elitemonster() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void TBigHuntUserDataChangeNotify::clear_elitemonster() {
  elitemonster_ = 0u;
  clear_has_elitemonster();
}
inline ::google::protobuf::uint32 TBigHuntUserDataChangeNotify::elitemonster() const {
  // @@protoc_insertion_point(field_get:pb.TBigHuntUserDataChangeNotify.EliteMonster)
  return elitemonster_;
}
inline void TBigHuntUserDataChangeNotify::set_elitemonster(::google::protobuf::uint32 value) {
  set_has_elitemonster();
  elitemonster_ = value;
  // @@protoc_insertion_point(field_set:pb.TBigHuntUserDataChangeNotify.EliteMonster)
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace pb

#ifndef SWIG
namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::pb::EBigHuntDynamicType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::pb::EBigHuntDynamicType>() {
  return ::pb::EBigHuntDynamicType_descriptor();
}
template <> struct is_proto_enum< ::pb::EBigHuntSuccessType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::pb::EBigHuntSuccessType>() {
  return ::pb::EBigHuntSuccessType_descriptor();
}
template <> struct is_proto_enum< ::pb::EBigHuntKillType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::pb::EBigHuntKillType>() {
  return ::pb::EBigHuntKillType_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_net_2fBigHunt_2eproto__INCLUDED
