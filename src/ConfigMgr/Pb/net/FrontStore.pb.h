// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: net/FrontStore.proto

#ifndef PROTOBUF_net_2fFrontStore_2eproto__INCLUDED
#define PROTOBUF_net_2fFrontStore_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace pb {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_net_2fFrontStore_2eproto();
void protobuf_AssignDesc_net_2fFrontStore_2eproto();
void protobuf_ShutdownFile_net_2fFrontStore_2eproto();

class TFrontStore;
class TFrontStoreSetKeyReq;
class TFrontStoreDelKeyReq;

// ===================================================================

/*FOR2LUA
<Record>
	<name>TFrontStore</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/FrontStore.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TFrontStore : public ::google::protobuf::Message {
 public:
  TFrontStore();
  virtual ~TFrontStore();

  TFrontStore(const TFrontStore& from);

  inline TFrontStore& operator=(const TFrontStore& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TFrontStore& default_instance();

  void Swap(TFrontStore* other);

  // implements Message ----------------------------------------------

  TFrontStore* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TFrontStore& from);
  void MergeFrom(const TFrontStore& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint64 key = 1;
  inline bool has_key() const;
  inline void clear_key();
  static const int kKeyFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TFrontStore</name>
  	<Function>
  		<name>key</name>
  		<replaceName>key</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_key</name>
  		<replaceName>key</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_key</name>
  		<replaceName>key</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint64 key() const;
  inline void set_key(::google::protobuf::uint64 value);

  // optional bytes value = 2;
  inline bool has_value() const;
  inline void clear_value();
  static const int kValueFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TFrontStore</name>
  	<Function>
  		<name>value</name>
  		<replaceName>value</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_value</name>
  		<replaceName>value</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_value</name>
  		<replaceName>value</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::std::string& value() const;
  inline void set_value(const ::std::string& value);
  inline void set_value(const char* value);
  inline void set_value(const void* value, size_t size);
  inline ::std::string* mutable_value();
  inline ::std::string* release_value();
  inline void set_allocated_value(::std::string* value);

  // @@protoc_insertion_point(class_scope:pb.TFrontStore)
 private:
  inline void set_has_key();
  inline void clear_has_key();
  inline void set_has_value();
  inline void clear_has_value();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint64 key_;
  ::std::string* value_;
  friend void  protobuf_AddDesc_net_2fFrontStore_2eproto();
  friend void protobuf_AssignDesc_net_2fFrontStore_2eproto();
  friend void protobuf_ShutdownFile_net_2fFrontStore_2eproto();

  void InitAsDefaultInstance();
  static TFrontStore* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TFrontStoreSetKeyReq</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/FrontStore.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TFrontStoreSetKeyReq : public ::google::protobuf::Message {
 public:
  TFrontStoreSetKeyReq();
  virtual ~TFrontStoreSetKeyReq();

  TFrontStoreSetKeyReq(const TFrontStoreSetKeyReq& from);

  inline TFrontStoreSetKeyReq& operator=(const TFrontStoreSetKeyReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TFrontStoreSetKeyReq& default_instance();

  void Swap(TFrontStoreSetKeyReq* other);

  // implements Message ----------------------------------------------

  TFrontStoreSetKeyReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TFrontStoreSetKeyReq& from);
  void MergeFrom(const TFrontStoreSetKeyReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint64 key = 1;
  inline bool has_key() const;
  inline void clear_key();
  static const int kKeyFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TFrontStoreSetKeyReq</name>
  	<Function>
  		<name>key</name>
  		<replaceName>key</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_key</name>
  		<replaceName>key</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_key</name>
  		<replaceName>key</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint64 key() const;
  inline void set_key(::google::protobuf::uint64 value);

  // optional bytes value = 2;
  inline bool has_value() const;
  inline void clear_value();
  static const int kValueFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TFrontStoreSetKeyReq</name>
  	<Function>
  		<name>value</name>
  		<replaceName>value</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_value</name>
  		<replaceName>value</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_value</name>
  		<replaceName>value</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::std::string& value() const;
  inline void set_value(const ::std::string& value);
  inline void set_value(const char* value);
  inline void set_value(const void* value, size_t size);
  inline ::std::string* mutable_value();
  inline ::std::string* release_value();
  inline void set_allocated_value(::std::string* value);

  // @@protoc_insertion_point(class_scope:pb.TFrontStoreSetKeyReq)
 private:
  inline void set_has_key();
  inline void clear_has_key();
  inline void set_has_value();
  inline void clear_has_value();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint64 key_;
  ::std::string* value_;
  friend void  protobuf_AddDesc_net_2fFrontStore_2eproto();
  friend void protobuf_AssignDesc_net_2fFrontStore_2eproto();
  friend void protobuf_ShutdownFile_net_2fFrontStore_2eproto();

  void InitAsDefaultInstance();
  static TFrontStoreSetKeyReq* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TFrontStoreDelKeyReq</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/FrontStore.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TFrontStoreDelKeyReq : public ::google::protobuf::Message {
 public:
  TFrontStoreDelKeyReq();
  virtual ~TFrontStoreDelKeyReq();

  TFrontStoreDelKeyReq(const TFrontStoreDelKeyReq& from);

  inline TFrontStoreDelKeyReq& operator=(const TFrontStoreDelKeyReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TFrontStoreDelKeyReq& default_instance();

  void Swap(TFrontStoreDelKeyReq* other);

  // implements Message ----------------------------------------------

  TFrontStoreDelKeyReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TFrontStoreDelKeyReq& from);
  void MergeFrom(const TFrontStoreDelKeyReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint64 key = 1;
  inline bool has_key() const;
  inline void clear_key();
  static const int kKeyFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TFrontStoreDelKeyReq</name>
  	<Function>
  		<name>key</name>
  		<replaceName>key</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_key</name>
  		<replaceName>key</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_key</name>
  		<replaceName>key</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint64 key() const;
  inline void set_key(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:pb.TFrontStoreDelKeyReq)
 private:
  inline void set_has_key();
  inline void clear_has_key();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint64 key_;
  friend void  protobuf_AddDesc_net_2fFrontStore_2eproto();
  friend void protobuf_AssignDesc_net_2fFrontStore_2eproto();
  friend void protobuf_ShutdownFile_net_2fFrontStore_2eproto();

  void InitAsDefaultInstance();
  static TFrontStoreDelKeyReq* default_instance_;
};
// ===================================================================


// ===================================================================

// TFrontStore

// optional uint64 key = 1;
inline bool TFrontStore::has_key() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TFrontStore::set_has_key() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TFrontStore::clear_has_key() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TFrontStore::clear_key() {
  key_ = GOOGLE_ULONGLONG(0);
  clear_has_key();
}
inline ::google::protobuf::uint64 TFrontStore::key() const {
  // @@protoc_insertion_point(field_get:pb.TFrontStore.key)
  return key_;
}
inline void TFrontStore::set_key(::google::protobuf::uint64 value) {
  set_has_key();
  key_ = value;
  // @@protoc_insertion_point(field_set:pb.TFrontStore.key)
}

// optional bytes value = 2;
inline bool TFrontStore::has_value() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TFrontStore::set_has_value() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TFrontStore::clear_has_value() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TFrontStore::clear_value() {
  if (value_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    value_->clear();
  }
  clear_has_value();
}
inline const ::std::string& TFrontStore::value() const {
  // @@protoc_insertion_point(field_get:pb.TFrontStore.value)
  return *value_;
}
inline void TFrontStore::set_value(const ::std::string& value) {
  set_has_value();
  if (value_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    value_ = new ::std::string;
  }
  value_->assign(value);
  // @@protoc_insertion_point(field_set:pb.TFrontStore.value)
}
inline void TFrontStore::set_value(const char* value) {
  set_has_value();
  if (value_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    value_ = new ::std::string;
  }
  value_->assign(value);
  // @@protoc_insertion_point(field_set_char:pb.TFrontStore.value)
}
inline void TFrontStore::set_value(const void* value, size_t size) {
  set_has_value();
  if (value_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    value_ = new ::std::string;
  }
  value_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:pb.TFrontStore.value)
}
inline ::std::string* TFrontStore::mutable_value() {
  set_has_value();
  if (value_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    value_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:pb.TFrontStore.value)
  return value_;
}
inline ::std::string* TFrontStore::release_value() {
  clear_has_value();
  if (value_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = value_;
    value_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void TFrontStore::set_allocated_value(::std::string* value) {
  if (value_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete value_;
  }
  if (value) {
    set_has_value();
    value_ = value;
  } else {
    clear_has_value();
    value_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:pb.TFrontStore.value)
}

// -------------------------------------------------------------------

// TFrontStoreSetKeyReq

// optional uint64 key = 1;
inline bool TFrontStoreSetKeyReq::has_key() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TFrontStoreSetKeyReq::set_has_key() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TFrontStoreSetKeyReq::clear_has_key() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TFrontStoreSetKeyReq::clear_key() {
  key_ = GOOGLE_ULONGLONG(0);
  clear_has_key();
}
inline ::google::protobuf::uint64 TFrontStoreSetKeyReq::key() const {
  // @@protoc_insertion_point(field_get:pb.TFrontStoreSetKeyReq.key)
  return key_;
}
inline void TFrontStoreSetKeyReq::set_key(::google::protobuf::uint64 value) {
  set_has_key();
  key_ = value;
  // @@protoc_insertion_point(field_set:pb.TFrontStoreSetKeyReq.key)
}

// optional bytes value = 2;
inline bool TFrontStoreSetKeyReq::has_value() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TFrontStoreSetKeyReq::set_has_value() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TFrontStoreSetKeyReq::clear_has_value() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TFrontStoreSetKeyReq::clear_value() {
  if (value_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    value_->clear();
  }
  clear_has_value();
}
inline const ::std::string& TFrontStoreSetKeyReq::value() const {
  // @@protoc_insertion_point(field_get:pb.TFrontStoreSetKeyReq.value)
  return *value_;
}
inline void TFrontStoreSetKeyReq::set_value(const ::std::string& value) {
  set_has_value();
  if (value_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    value_ = new ::std::string;
  }
  value_->assign(value);
  // @@protoc_insertion_point(field_set:pb.TFrontStoreSetKeyReq.value)
}
inline void TFrontStoreSetKeyReq::set_value(const char* value) {
  set_has_value();
  if (value_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    value_ = new ::std::string;
  }
  value_->assign(value);
  // @@protoc_insertion_point(field_set_char:pb.TFrontStoreSetKeyReq.value)
}
inline void TFrontStoreSetKeyReq::set_value(const void* value, size_t size) {
  set_has_value();
  if (value_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    value_ = new ::std::string;
  }
  value_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:pb.TFrontStoreSetKeyReq.value)
}
inline ::std::string* TFrontStoreSetKeyReq::mutable_value() {
  set_has_value();
  if (value_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    value_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:pb.TFrontStoreSetKeyReq.value)
  return value_;
}
inline ::std::string* TFrontStoreSetKeyReq::release_value() {
  clear_has_value();
  if (value_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = value_;
    value_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void TFrontStoreSetKeyReq::set_allocated_value(::std::string* value) {
  if (value_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete value_;
  }
  if (value) {
    set_has_value();
    value_ = value;
  } else {
    clear_has_value();
    value_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:pb.TFrontStoreSetKeyReq.value)
}

// -------------------------------------------------------------------

// TFrontStoreDelKeyReq

// optional uint64 key = 1;
inline bool TFrontStoreDelKeyReq::has_key() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TFrontStoreDelKeyReq::set_has_key() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TFrontStoreDelKeyReq::clear_has_key() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TFrontStoreDelKeyReq::clear_key() {
  key_ = GOOGLE_ULONGLONG(0);
  clear_has_key();
}
inline ::google::protobuf::uint64 TFrontStoreDelKeyReq::key() const {
  // @@protoc_insertion_point(field_get:pb.TFrontStoreDelKeyReq.key)
  return key_;
}
inline void TFrontStoreDelKeyReq::set_key(::google::protobuf::uint64 value) {
  set_has_key();
  key_ = value;
  // @@protoc_insertion_point(field_set:pb.TFrontStoreDelKeyReq.key)
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace pb

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_net_2fFrontStore_2eproto__INCLUDED
