// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: net/TowerHell.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "net/TowerHell.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace pb {

namespace {

const ::google::protobuf::Descriptor* TTowerHellInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TTowerHellInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* TTowerHellGetTowerHellInfoRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TTowerHellGetTowerHellInfoRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* TTowerHellEnterChallengeReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TTowerHellEnterChallengeReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* TTowerHellEnterChallengeRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TTowerHellEnterChallengeRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* TTowerHellReportChallengeReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TTowerHellReportChallengeReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* TTowerHellReportChallengeRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TTowerHellReportChallengeRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* TTowerHellPassedLevelRankReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TTowerHellPassedLevelRankReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* TTowerHellPassedLevelRankRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TTowerHellPassedLevelRankRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* TTowerHellPassedLevelRankItem_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TTowerHellPassedLevelRankItem_reflection_ = NULL;
const ::google::protobuf::Descriptor* TTowerHellGetAchieveRewardReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TTowerHellGetAchieveRewardReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* TTowerHellGetHangRewardInfoRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TTowerHellGetHangRewardInfoRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* TTowerHellHangRewardInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TTowerHellHangRewardInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* TTowerHellReceiveHangRewardRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TTowerHellReceiveHangRewardRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* TTowerHellBuyHangRewardRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TTowerHellBuyHangRewardRsp_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_net_2fTowerHell_2eproto() {
  protobuf_AddDesc_net_2fTowerHell_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "net/TowerHell.proto");
  GOOGLE_CHECK(file != NULL);
  TTowerHellInfo_descriptor_ = file->message_type(0);
  static const int TTowerHellInfo_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TTowerHellInfo, curpassedlayerid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TTowerHellInfo, maxpassedlayerid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TTowerHellInfo, achieverewardinfoarr_),
  };
  TTowerHellInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TTowerHellInfo_descriptor_,
      TTowerHellInfo::default_instance_,
      TTowerHellInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TTowerHellInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TTowerHellInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TTowerHellInfo));
  TTowerHellGetTowerHellInfoRsp_descriptor_ = file->message_type(1);
  static const int TTowerHellGetTowerHellInfoRsp_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TTowerHellGetTowerHellInfoRsp, towerhellinfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TTowerHellGetTowerHellInfoRsp, hanginfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TTowerHellGetTowerHellInfoRsp, boughthangrewardnum_),
  };
  TTowerHellGetTowerHellInfoRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TTowerHellGetTowerHellInfoRsp_descriptor_,
      TTowerHellGetTowerHellInfoRsp::default_instance_,
      TTowerHellGetTowerHellInfoRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TTowerHellGetTowerHellInfoRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TTowerHellGetTowerHellInfoRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TTowerHellGetTowerHellInfoRsp));
  TTowerHellEnterChallengeReq_descriptor_ = file->message_type(2);
  static const int TTowerHellEnterChallengeReq_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TTowerHellEnterChallengeReq, layerid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TTowerHellEnterChallengeReq, battlecheckparam_),
  };
  TTowerHellEnterChallengeReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TTowerHellEnterChallengeReq_descriptor_,
      TTowerHellEnterChallengeReq::default_instance_,
      TTowerHellEnterChallengeReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TTowerHellEnterChallengeReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TTowerHellEnterChallengeReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TTowerHellEnterChallengeReq));
  TTowerHellEnterChallengeRsp_descriptor_ = file->message_type(3);
  static const int TTowerHellEnterChallengeRsp_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TTowerHellEnterChallengeRsp, battleargs_),
  };
  TTowerHellEnterChallengeRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TTowerHellEnterChallengeRsp_descriptor_,
      TTowerHellEnterChallengeRsp::default_instance_,
      TTowerHellEnterChallengeRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TTowerHellEnterChallengeRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TTowerHellEnterChallengeRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TTowerHellEnterChallengeRsp));
  TTowerHellReportChallengeReq_descriptor_ = file->message_type(4);
  static const int TTowerHellReportChallengeReq_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TTowerHellReportChallengeReq, layerid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TTowerHellReportChallengeReq, battlereport_),
  };
  TTowerHellReportChallengeReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TTowerHellReportChallengeReq_descriptor_,
      TTowerHellReportChallengeReq::default_instance_,
      TTowerHellReportChallengeReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TTowerHellReportChallengeReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TTowerHellReportChallengeReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TTowerHellReportChallengeReq));
  TTowerHellReportChallengeRsp_descriptor_ = file->message_type(5);
  static const int TTowerHellReportChallengeRsp_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TTowerHellReportChallengeRsp, iswin_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TTowerHellReportChallengeRsp, curpassedlayerid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TTowerHellReportChallengeRsp, maxpassedlayerid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TTowerHellReportChallengeRsp, star_),
  };
  TTowerHellReportChallengeRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TTowerHellReportChallengeRsp_descriptor_,
      TTowerHellReportChallengeRsp::default_instance_,
      TTowerHellReportChallengeRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TTowerHellReportChallengeRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TTowerHellReportChallengeRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TTowerHellReportChallengeRsp));
  TTowerHellPassedLevelRankReq_descriptor_ = file->message_type(6);
  static const int TTowerHellPassedLevelRankReq_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TTowerHellPassedLevelRankReq, offset_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TTowerHellPassedLevelRankReq, limit_),
  };
  TTowerHellPassedLevelRankReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TTowerHellPassedLevelRankReq_descriptor_,
      TTowerHellPassedLevelRankReq::default_instance_,
      TTowerHellPassedLevelRankReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TTowerHellPassedLevelRankReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TTowerHellPassedLevelRankReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TTowerHellPassedLevelRankReq));
  TTowerHellPassedLevelRankRsp_descriptor_ = file->message_type(7);
  static const int TTowerHellPassedLevelRankRsp_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TTowerHellPassedLevelRankRsp, rankarr_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TTowerHellPassedLevelRankRsp, myrank_),
  };
  TTowerHellPassedLevelRankRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TTowerHellPassedLevelRankRsp_descriptor_,
      TTowerHellPassedLevelRankRsp::default_instance_,
      TTowerHellPassedLevelRankRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TTowerHellPassedLevelRankRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TTowerHellPassedLevelRankRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TTowerHellPassedLevelRankRsp));
  TTowerHellPassedLevelRankItem_descriptor_ = file->message_type(8);
  static const int TTowerHellPassedLevelRankItem_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TTowerHellPassedLevelRankItem, userinfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TTowerHellPassedLevelRankItem, passedlayer_),
  };
  TTowerHellPassedLevelRankItem_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TTowerHellPassedLevelRankItem_descriptor_,
      TTowerHellPassedLevelRankItem::default_instance_,
      TTowerHellPassedLevelRankItem_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TTowerHellPassedLevelRankItem, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TTowerHellPassedLevelRankItem, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TTowerHellPassedLevelRankItem));
  TTowerHellGetAchieveRewardReq_descriptor_ = file->message_type(9);
  static const int TTowerHellGetAchieveRewardReq_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TTowerHellGetAchieveRewardReq, rewardid_),
  };
  TTowerHellGetAchieveRewardReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TTowerHellGetAchieveRewardReq_descriptor_,
      TTowerHellGetAchieveRewardReq::default_instance_,
      TTowerHellGetAchieveRewardReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TTowerHellGetAchieveRewardReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TTowerHellGetAchieveRewardReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TTowerHellGetAchieveRewardReq));
  TTowerHellGetHangRewardInfoRsp_descriptor_ = file->message_type(10);
  static const int TTowerHellGetHangRewardInfoRsp_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TTowerHellGetHangRewardInfoRsp, hanginfo_),
  };
  TTowerHellGetHangRewardInfoRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TTowerHellGetHangRewardInfoRsp_descriptor_,
      TTowerHellGetHangRewardInfoRsp::default_instance_,
      TTowerHellGetHangRewardInfoRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TTowerHellGetHangRewardInfoRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TTowerHellGetHangRewardInfoRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TTowerHellGetHangRewardInfoRsp));
  TTowerHellHangRewardInfo_descriptor_ = file->message_type(11);
  static const int TTowerHellHangRewardInfo_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TTowerHellHangRewardInfo, hangtime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TTowerHellHangRewardInfo, hangreceivetime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TTowerHellHangRewardInfo, randomrewardarr_),
  };
  TTowerHellHangRewardInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TTowerHellHangRewardInfo_descriptor_,
      TTowerHellHangRewardInfo::default_instance_,
      TTowerHellHangRewardInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TTowerHellHangRewardInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TTowerHellHangRewardInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TTowerHellHangRewardInfo));
  TTowerHellReceiveHangRewardRsp_descriptor_ = file->message_type(12);
  static const int TTowerHellReceiveHangRewardRsp_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TTowerHellReceiveHangRewardRsp, hangtime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TTowerHellReceiveHangRewardRsp, hangreceivetime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TTowerHellReceiveHangRewardRsp, rewardarr_),
  };
  TTowerHellReceiveHangRewardRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TTowerHellReceiveHangRewardRsp_descriptor_,
      TTowerHellReceiveHangRewardRsp::default_instance_,
      TTowerHellReceiveHangRewardRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TTowerHellReceiveHangRewardRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TTowerHellReceiveHangRewardRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TTowerHellReceiveHangRewardRsp));
  TTowerHellBuyHangRewardRsp_descriptor_ = file->message_type(13);
  static const int TTowerHellBuyHangRewardRsp_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TTowerHellBuyHangRewardRsp, boughthangrewardnum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TTowerHellBuyHangRewardRsp, rewardarr_),
  };
  TTowerHellBuyHangRewardRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TTowerHellBuyHangRewardRsp_descriptor_,
      TTowerHellBuyHangRewardRsp::default_instance_,
      TTowerHellBuyHangRewardRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TTowerHellBuyHangRewardRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TTowerHellBuyHangRewardRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TTowerHellBuyHangRewardRsp));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_net_2fTowerHell_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TTowerHellInfo_descriptor_, &TTowerHellInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TTowerHellGetTowerHellInfoRsp_descriptor_, &TTowerHellGetTowerHellInfoRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TTowerHellEnterChallengeReq_descriptor_, &TTowerHellEnterChallengeReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TTowerHellEnterChallengeRsp_descriptor_, &TTowerHellEnterChallengeRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TTowerHellReportChallengeReq_descriptor_, &TTowerHellReportChallengeReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TTowerHellReportChallengeRsp_descriptor_, &TTowerHellReportChallengeRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TTowerHellPassedLevelRankReq_descriptor_, &TTowerHellPassedLevelRankReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TTowerHellPassedLevelRankRsp_descriptor_, &TTowerHellPassedLevelRankRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TTowerHellPassedLevelRankItem_descriptor_, &TTowerHellPassedLevelRankItem::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TTowerHellGetAchieveRewardReq_descriptor_, &TTowerHellGetAchieveRewardReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TTowerHellGetHangRewardInfoRsp_descriptor_, &TTowerHellGetHangRewardInfoRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TTowerHellHangRewardInfo_descriptor_, &TTowerHellHangRewardInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TTowerHellReceiveHangRewardRsp_descriptor_, &TTowerHellReceiveHangRewardRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TTowerHellBuyHangRewardRsp_descriptor_, &TTowerHellBuyHangRewardRsp::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_net_2fTowerHell_2eproto() {
  delete TTowerHellInfo::default_instance_;
  delete TTowerHellInfo_reflection_;
  delete TTowerHellGetTowerHellInfoRsp::default_instance_;
  delete TTowerHellGetTowerHellInfoRsp_reflection_;
  delete TTowerHellEnterChallengeReq::default_instance_;
  delete TTowerHellEnterChallengeReq_reflection_;
  delete TTowerHellEnterChallengeRsp::default_instance_;
  delete TTowerHellEnterChallengeRsp_reflection_;
  delete TTowerHellReportChallengeReq::default_instance_;
  delete TTowerHellReportChallengeReq_reflection_;
  delete TTowerHellReportChallengeRsp::default_instance_;
  delete TTowerHellReportChallengeRsp_reflection_;
  delete TTowerHellPassedLevelRankReq::default_instance_;
  delete TTowerHellPassedLevelRankReq_reflection_;
  delete TTowerHellPassedLevelRankRsp::default_instance_;
  delete TTowerHellPassedLevelRankRsp_reflection_;
  delete TTowerHellPassedLevelRankItem::default_instance_;
  delete TTowerHellPassedLevelRankItem_reflection_;
  delete TTowerHellGetAchieveRewardReq::default_instance_;
  delete TTowerHellGetAchieveRewardReq_reflection_;
  delete TTowerHellGetHangRewardInfoRsp::default_instance_;
  delete TTowerHellGetHangRewardInfoRsp_reflection_;
  delete TTowerHellHangRewardInfo::default_instance_;
  delete TTowerHellHangRewardInfo_reflection_;
  delete TTowerHellReceiveHangRewardRsp::default_instance_;
  delete TTowerHellReceiveHangRewardRsp_reflection_;
  delete TTowerHellBuyHangRewardRsp::default_instance_;
  delete TTowerHellBuyHangRewardRsp_reflection_;
}

void protobuf_AddDesc_net_2fTowerHell_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::pb::protobuf_AddDesc_net_2fBattle_2eproto();
  ::pb::protobuf_AddDesc_net_2fUser_2eproto();
  ::pb::protobuf_AddDesc_net_2fCommonReward_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\023net/TowerHell.proto\022\002pb\032\020net/Battle.pr"
    "oto\032\016net/User.proto\032\026net/CommonReward.pr"
    "oto\"b\n\016TTowerHellInfo\022\030\n\020CurPassedLayerI"
    "d\030\001 \001(\r\022\030\n\020MaxPassedLayerId\030\002 \001(\r\022\034\n\024Ach"
    "ieveRewardInfoArr\030\003 \003(\r\"\227\001\n\035TTowerHellGe"
    "tTowerHellInfoRsp\022)\n\rTowerHellInfo\030\001 \001(\013"
    "2\022.pb.TTowerHellInfo\022.\n\010HangInfo\030\002 \001(\0132\034"
    ".pb.TTowerHellHangRewardInfo\022\033\n\023BoughtHa"
    "ngRewardNum\030\003 \001(\r\"_\n\033TTowerHellEnterChal"
    "lengeReq\022\017\n\007LayerId\030\001 \001(\r\022/\n\020BattleCheck"
    "Param\030\002 \001(\0132\025.pb.TBattleCheckParam\"B\n\033TT"
    "owerHellEnterChallengeRsp\022#\n\nBattleArgs\030"
    "\001 \001(\0132\017.pb.TBattleArgs\"E\n\034TTowerHellRepo"
    "rtChallengeReq\022\017\n\007LayerId\030\001 \001(\r\022\024\n\014Battl"
    "eReport\030\002 \001(\014\"o\n\034TTowerHellReportChallen"
    "geRsp\022\r\n\005IsWin\030\001 \001(\010\022\030\n\020CurPassedLayerId"
    "\030\002 \001(\r\022\030\n\020MaxPassedLayerId\030\003 \001(\r\022\014\n\004Star"
    "\030\004 \001(\r\"=\n\034TTowerHellPassedLevelRankReq\022\016"
    "\n\006Offset\030\001 \001(\005\022\r\n\005Limit\030\002 \001(\005\"b\n\034TTowerH"
    "ellPassedLevelRankRsp\0222\n\007RankArr\030\001 \003(\0132!"
    ".pb.TTowerHellPassedLevelRankItem\022\016\n\006MyR"
    "ank\030\002 \001(\r\"[\n\035TTowerHellPassedLevelRankIt"
    "em\022%\n\010UserInfo\030\001 \001(\0132\023.pb.TUserSimpleInf"
    "o\022\023\n\013PassedLayer\030\002 \001(\r\"1\n\035TTowerHellGetA"
    "chieveRewardReq\022\020\n\010RewardId\030\001 \001(\r\"P\n\036TTo"
    "werHellGetHangRewardInfoRsp\022.\n\010HangInfo\030"
    "\001 \001(\0132\034.pb.TTowerHellHangRewardInfo\"q\n\030T"
    "TowerHellHangRewardInfo\022\020\n\010HangTime\030\001 \001("
    "\004\022\027\n\017HangReceiveTime\030\002 \001(\004\022*\n\017RandomRewa"
    "rdArr\030\003 \003(\0132\021.pb.TCommonReward\"q\n\036TTower"
    "HellReceiveHangRewardRsp\022\020\n\010HangTime\030\001 \001"
    "(\004\022\027\n\017HangReceiveTime\030\002 \001(\004\022$\n\tRewardArr"
    "\030\003 \003(\0132\021.pb.TCommonReward\"_\n\032TTowerHellB"
    "uyHangRewardRsp\022\033\n\023BoughtHangRewardNum\030\001"
    " \001(\r\022$\n\tRewardArr\030\002 \003(\0132\021.pb.TCommonRewa"
    "rd", 1402);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "net/TowerHell.proto", &protobuf_RegisterTypes);
  TTowerHellInfo::default_instance_ = new TTowerHellInfo();
  TTowerHellGetTowerHellInfoRsp::default_instance_ = new TTowerHellGetTowerHellInfoRsp();
  TTowerHellEnterChallengeReq::default_instance_ = new TTowerHellEnterChallengeReq();
  TTowerHellEnterChallengeRsp::default_instance_ = new TTowerHellEnterChallengeRsp();
  TTowerHellReportChallengeReq::default_instance_ = new TTowerHellReportChallengeReq();
  TTowerHellReportChallengeRsp::default_instance_ = new TTowerHellReportChallengeRsp();
  TTowerHellPassedLevelRankReq::default_instance_ = new TTowerHellPassedLevelRankReq();
  TTowerHellPassedLevelRankRsp::default_instance_ = new TTowerHellPassedLevelRankRsp();
  TTowerHellPassedLevelRankItem::default_instance_ = new TTowerHellPassedLevelRankItem();
  TTowerHellGetAchieveRewardReq::default_instance_ = new TTowerHellGetAchieveRewardReq();
  TTowerHellGetHangRewardInfoRsp::default_instance_ = new TTowerHellGetHangRewardInfoRsp();
  TTowerHellHangRewardInfo::default_instance_ = new TTowerHellHangRewardInfo();
  TTowerHellReceiveHangRewardRsp::default_instance_ = new TTowerHellReceiveHangRewardRsp();
  TTowerHellBuyHangRewardRsp::default_instance_ = new TTowerHellBuyHangRewardRsp();
  TTowerHellInfo::default_instance_->InitAsDefaultInstance();
  TTowerHellGetTowerHellInfoRsp::default_instance_->InitAsDefaultInstance();
  TTowerHellEnterChallengeReq::default_instance_->InitAsDefaultInstance();
  TTowerHellEnterChallengeRsp::default_instance_->InitAsDefaultInstance();
  TTowerHellReportChallengeReq::default_instance_->InitAsDefaultInstance();
  TTowerHellReportChallengeRsp::default_instance_->InitAsDefaultInstance();
  TTowerHellPassedLevelRankReq::default_instance_->InitAsDefaultInstance();
  TTowerHellPassedLevelRankRsp::default_instance_->InitAsDefaultInstance();
  TTowerHellPassedLevelRankItem::default_instance_->InitAsDefaultInstance();
  TTowerHellGetAchieveRewardReq::default_instance_->InitAsDefaultInstance();
  TTowerHellGetHangRewardInfoRsp::default_instance_->InitAsDefaultInstance();
  TTowerHellHangRewardInfo::default_instance_->InitAsDefaultInstance();
  TTowerHellReceiveHangRewardRsp::default_instance_->InitAsDefaultInstance();
  TTowerHellBuyHangRewardRsp::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_net_2fTowerHell_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_net_2fTowerHell_2eproto {
  StaticDescriptorInitializer_net_2fTowerHell_2eproto() {
    protobuf_AddDesc_net_2fTowerHell_2eproto();
  }
} static_descriptor_initializer_net_2fTowerHell_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int TTowerHellInfo::kCurPassedLayerIdFieldNumber;
const int TTowerHellInfo::kMaxPassedLayerIdFieldNumber;
const int TTowerHellInfo::kAchieveRewardInfoArrFieldNumber;
#endif  // !_MSC_VER

TTowerHellInfo::TTowerHellInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TTowerHellInfo)
}

void TTowerHellInfo::InitAsDefaultInstance() {
}

TTowerHellInfo::TTowerHellInfo(const TTowerHellInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TTowerHellInfo)
}

void TTowerHellInfo::SharedCtor() {
  _cached_size_ = 0;
  curpassedlayerid_ = 0u;
  maxpassedlayerid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TTowerHellInfo::~TTowerHellInfo() {
  // @@protoc_insertion_point(destructor:pb.TTowerHellInfo)
  SharedDtor();
}

void TTowerHellInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TTowerHellInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TTowerHellInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TTowerHellInfo_descriptor_;
}

const TTowerHellInfo& TTowerHellInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fTowerHell_2eproto();
  return *default_instance_;
}

TTowerHellInfo* TTowerHellInfo::default_instance_ = NULL;

TTowerHellInfo* TTowerHellInfo::New() const {
  return new TTowerHellInfo;
}

void TTowerHellInfo::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<TTowerHellInfo*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(curpassedlayerid_, maxpassedlayerid_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  achieverewardinfoarr_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TTowerHellInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TTowerHellInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 CurPassedLayerId = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &curpassedlayerid_)));
          set_has_curpassedlayerid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_MaxPassedLayerId;
        break;
      }

      // optional uint32 MaxPassedLayerId = 2;
      case 2: {
        if (tag == 16) {
         parse_MaxPassedLayerId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &maxpassedlayerid_)));
          set_has_maxpassedlayerid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_AchieveRewardInfoArr;
        break;
      }

      // repeated uint32 AchieveRewardInfoArr = 3;
      case 3: {
        if (tag == 24) {
         parse_AchieveRewardInfoArr:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 24, input, this->mutable_achieverewardinfoarr())));
        } else if (tag == 26) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_achieverewardinfoarr())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_AchieveRewardInfoArr;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TTowerHellInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TTowerHellInfo)
  return false;
#undef DO_
}

void TTowerHellInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TTowerHellInfo)
  // optional uint32 CurPassedLayerId = 1;
  if (has_curpassedlayerid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->curpassedlayerid(), output);
  }

  // optional uint32 MaxPassedLayerId = 2;
  if (has_maxpassedlayerid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->maxpassedlayerid(), output);
  }

  // repeated uint32 AchieveRewardInfoArr = 3;
  for (int i = 0; i < this->achieverewardinfoarr_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      3, this->achieverewardinfoarr(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TTowerHellInfo)
}

::google::protobuf::uint8* TTowerHellInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TTowerHellInfo)
  // optional uint32 CurPassedLayerId = 1;
  if (has_curpassedlayerid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->curpassedlayerid(), target);
  }

  // optional uint32 MaxPassedLayerId = 2;
  if (has_maxpassedlayerid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->maxpassedlayerid(), target);
  }

  // repeated uint32 AchieveRewardInfoArr = 3;
  for (int i = 0; i < this->achieverewardinfoarr_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(3, this->achieverewardinfoarr(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TTowerHellInfo)
  return target;
}

int TTowerHellInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 CurPassedLayerId = 1;
    if (has_curpassedlayerid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->curpassedlayerid());
    }

    // optional uint32 MaxPassedLayerId = 2;
    if (has_maxpassedlayerid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->maxpassedlayerid());
    }

  }
  // repeated uint32 AchieveRewardInfoArr = 3;
  {
    int data_size = 0;
    for (int i = 0; i < this->achieverewardinfoarr_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->achieverewardinfoarr(i));
    }
    total_size += 1 * this->achieverewardinfoarr_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TTowerHellInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TTowerHellInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TTowerHellInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TTowerHellInfo::MergeFrom(const TTowerHellInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  achieverewardinfoarr_.MergeFrom(from.achieverewardinfoarr_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_curpassedlayerid()) {
      set_curpassedlayerid(from.curpassedlayerid());
    }
    if (from.has_maxpassedlayerid()) {
      set_maxpassedlayerid(from.maxpassedlayerid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TTowerHellInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TTowerHellInfo::CopyFrom(const TTowerHellInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TTowerHellInfo::IsInitialized() const {

  return true;
}

void TTowerHellInfo::Swap(TTowerHellInfo* other) {
  if (other != this) {
    std::swap(curpassedlayerid_, other->curpassedlayerid_);
    std::swap(maxpassedlayerid_, other->maxpassedlayerid_);
    achieverewardinfoarr_.Swap(&other->achieverewardinfoarr_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TTowerHellInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TTowerHellInfo_descriptor_;
  metadata.reflection = TTowerHellInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TTowerHellGetTowerHellInfoRsp::kTowerHellInfoFieldNumber;
const int TTowerHellGetTowerHellInfoRsp::kHangInfoFieldNumber;
const int TTowerHellGetTowerHellInfoRsp::kBoughtHangRewardNumFieldNumber;
#endif  // !_MSC_VER

TTowerHellGetTowerHellInfoRsp::TTowerHellGetTowerHellInfoRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TTowerHellGetTowerHellInfoRsp)
}

void TTowerHellGetTowerHellInfoRsp::InitAsDefaultInstance() {
  towerhellinfo_ = const_cast< ::pb::TTowerHellInfo*>(&::pb::TTowerHellInfo::default_instance());
  hanginfo_ = const_cast< ::pb::TTowerHellHangRewardInfo*>(&::pb::TTowerHellHangRewardInfo::default_instance());
}

TTowerHellGetTowerHellInfoRsp::TTowerHellGetTowerHellInfoRsp(const TTowerHellGetTowerHellInfoRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TTowerHellGetTowerHellInfoRsp)
}

void TTowerHellGetTowerHellInfoRsp::SharedCtor() {
  _cached_size_ = 0;
  towerhellinfo_ = NULL;
  hanginfo_ = NULL;
  boughthangrewardnum_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TTowerHellGetTowerHellInfoRsp::~TTowerHellGetTowerHellInfoRsp() {
  // @@protoc_insertion_point(destructor:pb.TTowerHellGetTowerHellInfoRsp)
  SharedDtor();
}

void TTowerHellGetTowerHellInfoRsp::SharedDtor() {
  if (this != default_instance_) {
    delete towerhellinfo_;
    delete hanginfo_;
  }
}

void TTowerHellGetTowerHellInfoRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TTowerHellGetTowerHellInfoRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TTowerHellGetTowerHellInfoRsp_descriptor_;
}

const TTowerHellGetTowerHellInfoRsp& TTowerHellGetTowerHellInfoRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fTowerHell_2eproto();
  return *default_instance_;
}

TTowerHellGetTowerHellInfoRsp* TTowerHellGetTowerHellInfoRsp::default_instance_ = NULL;

TTowerHellGetTowerHellInfoRsp* TTowerHellGetTowerHellInfoRsp::New() const {
  return new TTowerHellGetTowerHellInfoRsp;
}

void TTowerHellGetTowerHellInfoRsp::Clear() {
  if (_has_bits_[0 / 32] & 7) {
    if (has_towerhellinfo()) {
      if (towerhellinfo_ != NULL) towerhellinfo_->::pb::TTowerHellInfo::Clear();
    }
    if (has_hanginfo()) {
      if (hanginfo_ != NULL) hanginfo_->::pb::TTowerHellHangRewardInfo::Clear();
    }
    boughthangrewardnum_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TTowerHellGetTowerHellInfoRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TTowerHellGetTowerHellInfoRsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .pb.TTowerHellInfo TowerHellInfo = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_towerhellinfo()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_HangInfo;
        break;
      }

      // optional .pb.TTowerHellHangRewardInfo HangInfo = 2;
      case 2: {
        if (tag == 18) {
         parse_HangInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_hanginfo()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_BoughtHangRewardNum;
        break;
      }

      // optional uint32 BoughtHangRewardNum = 3;
      case 3: {
        if (tag == 24) {
         parse_BoughtHangRewardNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &boughthangrewardnum_)));
          set_has_boughthangrewardnum();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TTowerHellGetTowerHellInfoRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TTowerHellGetTowerHellInfoRsp)
  return false;
#undef DO_
}

void TTowerHellGetTowerHellInfoRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TTowerHellGetTowerHellInfoRsp)
  // optional .pb.TTowerHellInfo TowerHellInfo = 1;
  if (has_towerhellinfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->towerhellinfo(), output);
  }

  // optional .pb.TTowerHellHangRewardInfo HangInfo = 2;
  if (has_hanginfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->hanginfo(), output);
  }

  // optional uint32 BoughtHangRewardNum = 3;
  if (has_boughthangrewardnum()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->boughthangrewardnum(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TTowerHellGetTowerHellInfoRsp)
}

::google::protobuf::uint8* TTowerHellGetTowerHellInfoRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TTowerHellGetTowerHellInfoRsp)
  // optional .pb.TTowerHellInfo TowerHellInfo = 1;
  if (has_towerhellinfo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->towerhellinfo(), target);
  }

  // optional .pb.TTowerHellHangRewardInfo HangInfo = 2;
  if (has_hanginfo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->hanginfo(), target);
  }

  // optional uint32 BoughtHangRewardNum = 3;
  if (has_boughthangrewardnum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->boughthangrewardnum(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TTowerHellGetTowerHellInfoRsp)
  return target;
}

int TTowerHellGetTowerHellInfoRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .pb.TTowerHellInfo TowerHellInfo = 1;
    if (has_towerhellinfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->towerhellinfo());
    }

    // optional .pb.TTowerHellHangRewardInfo HangInfo = 2;
    if (has_hanginfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->hanginfo());
    }

    // optional uint32 BoughtHangRewardNum = 3;
    if (has_boughthangrewardnum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->boughthangrewardnum());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TTowerHellGetTowerHellInfoRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TTowerHellGetTowerHellInfoRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TTowerHellGetTowerHellInfoRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TTowerHellGetTowerHellInfoRsp::MergeFrom(const TTowerHellGetTowerHellInfoRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_towerhellinfo()) {
      mutable_towerhellinfo()->::pb::TTowerHellInfo::MergeFrom(from.towerhellinfo());
    }
    if (from.has_hanginfo()) {
      mutable_hanginfo()->::pb::TTowerHellHangRewardInfo::MergeFrom(from.hanginfo());
    }
    if (from.has_boughthangrewardnum()) {
      set_boughthangrewardnum(from.boughthangrewardnum());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TTowerHellGetTowerHellInfoRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TTowerHellGetTowerHellInfoRsp::CopyFrom(const TTowerHellGetTowerHellInfoRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TTowerHellGetTowerHellInfoRsp::IsInitialized() const {

  return true;
}

void TTowerHellGetTowerHellInfoRsp::Swap(TTowerHellGetTowerHellInfoRsp* other) {
  if (other != this) {
    std::swap(towerhellinfo_, other->towerhellinfo_);
    std::swap(hanginfo_, other->hanginfo_);
    std::swap(boughthangrewardnum_, other->boughthangrewardnum_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TTowerHellGetTowerHellInfoRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TTowerHellGetTowerHellInfoRsp_descriptor_;
  metadata.reflection = TTowerHellGetTowerHellInfoRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TTowerHellEnterChallengeReq::kLayerIdFieldNumber;
const int TTowerHellEnterChallengeReq::kBattleCheckParamFieldNumber;
#endif  // !_MSC_VER

TTowerHellEnterChallengeReq::TTowerHellEnterChallengeReq()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TTowerHellEnterChallengeReq)
}

void TTowerHellEnterChallengeReq::InitAsDefaultInstance() {
  battlecheckparam_ = const_cast< ::pb::TBattleCheckParam*>(&::pb::TBattleCheckParam::default_instance());
}

TTowerHellEnterChallengeReq::TTowerHellEnterChallengeReq(const TTowerHellEnterChallengeReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TTowerHellEnterChallengeReq)
}

void TTowerHellEnterChallengeReq::SharedCtor() {
  _cached_size_ = 0;
  layerid_ = 0u;
  battlecheckparam_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TTowerHellEnterChallengeReq::~TTowerHellEnterChallengeReq() {
  // @@protoc_insertion_point(destructor:pb.TTowerHellEnterChallengeReq)
  SharedDtor();
}

void TTowerHellEnterChallengeReq::SharedDtor() {
  if (this != default_instance_) {
    delete battlecheckparam_;
  }
}

void TTowerHellEnterChallengeReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TTowerHellEnterChallengeReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TTowerHellEnterChallengeReq_descriptor_;
}

const TTowerHellEnterChallengeReq& TTowerHellEnterChallengeReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fTowerHell_2eproto();
  return *default_instance_;
}

TTowerHellEnterChallengeReq* TTowerHellEnterChallengeReq::default_instance_ = NULL;

TTowerHellEnterChallengeReq* TTowerHellEnterChallengeReq::New() const {
  return new TTowerHellEnterChallengeReq;
}

void TTowerHellEnterChallengeReq::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    layerid_ = 0u;
    if (has_battlecheckparam()) {
      if (battlecheckparam_ != NULL) battlecheckparam_->::pb::TBattleCheckParam::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TTowerHellEnterChallengeReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TTowerHellEnterChallengeReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 LayerId = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &layerid_)));
          set_has_layerid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_BattleCheckParam;
        break;
      }

      // optional .pb.TBattleCheckParam BattleCheckParam = 2;
      case 2: {
        if (tag == 18) {
         parse_BattleCheckParam:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_battlecheckparam()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TTowerHellEnterChallengeReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TTowerHellEnterChallengeReq)
  return false;
#undef DO_
}

void TTowerHellEnterChallengeReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TTowerHellEnterChallengeReq)
  // optional uint32 LayerId = 1;
  if (has_layerid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->layerid(), output);
  }

  // optional .pb.TBattleCheckParam BattleCheckParam = 2;
  if (has_battlecheckparam()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->battlecheckparam(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TTowerHellEnterChallengeReq)
}

::google::protobuf::uint8* TTowerHellEnterChallengeReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TTowerHellEnterChallengeReq)
  // optional uint32 LayerId = 1;
  if (has_layerid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->layerid(), target);
  }

  // optional .pb.TBattleCheckParam BattleCheckParam = 2;
  if (has_battlecheckparam()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->battlecheckparam(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TTowerHellEnterChallengeReq)
  return target;
}

int TTowerHellEnterChallengeReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 LayerId = 1;
    if (has_layerid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->layerid());
    }

    // optional .pb.TBattleCheckParam BattleCheckParam = 2;
    if (has_battlecheckparam()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->battlecheckparam());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TTowerHellEnterChallengeReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TTowerHellEnterChallengeReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TTowerHellEnterChallengeReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TTowerHellEnterChallengeReq::MergeFrom(const TTowerHellEnterChallengeReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_layerid()) {
      set_layerid(from.layerid());
    }
    if (from.has_battlecheckparam()) {
      mutable_battlecheckparam()->::pb::TBattleCheckParam::MergeFrom(from.battlecheckparam());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TTowerHellEnterChallengeReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TTowerHellEnterChallengeReq::CopyFrom(const TTowerHellEnterChallengeReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TTowerHellEnterChallengeReq::IsInitialized() const {

  return true;
}

void TTowerHellEnterChallengeReq::Swap(TTowerHellEnterChallengeReq* other) {
  if (other != this) {
    std::swap(layerid_, other->layerid_);
    std::swap(battlecheckparam_, other->battlecheckparam_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TTowerHellEnterChallengeReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TTowerHellEnterChallengeReq_descriptor_;
  metadata.reflection = TTowerHellEnterChallengeReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TTowerHellEnterChallengeRsp::kBattleArgsFieldNumber;
#endif  // !_MSC_VER

TTowerHellEnterChallengeRsp::TTowerHellEnterChallengeRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TTowerHellEnterChallengeRsp)
}

void TTowerHellEnterChallengeRsp::InitAsDefaultInstance() {
  battleargs_ = const_cast< ::pb::TBattleArgs*>(&::pb::TBattleArgs::default_instance());
}

TTowerHellEnterChallengeRsp::TTowerHellEnterChallengeRsp(const TTowerHellEnterChallengeRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TTowerHellEnterChallengeRsp)
}

void TTowerHellEnterChallengeRsp::SharedCtor() {
  _cached_size_ = 0;
  battleargs_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TTowerHellEnterChallengeRsp::~TTowerHellEnterChallengeRsp() {
  // @@protoc_insertion_point(destructor:pb.TTowerHellEnterChallengeRsp)
  SharedDtor();
}

void TTowerHellEnterChallengeRsp::SharedDtor() {
  if (this != default_instance_) {
    delete battleargs_;
  }
}

void TTowerHellEnterChallengeRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TTowerHellEnterChallengeRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TTowerHellEnterChallengeRsp_descriptor_;
}

const TTowerHellEnterChallengeRsp& TTowerHellEnterChallengeRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fTowerHell_2eproto();
  return *default_instance_;
}

TTowerHellEnterChallengeRsp* TTowerHellEnterChallengeRsp::default_instance_ = NULL;

TTowerHellEnterChallengeRsp* TTowerHellEnterChallengeRsp::New() const {
  return new TTowerHellEnterChallengeRsp;
}

void TTowerHellEnterChallengeRsp::Clear() {
  if (has_battleargs()) {
    if (battleargs_ != NULL) battleargs_->::pb::TBattleArgs::Clear();
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TTowerHellEnterChallengeRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TTowerHellEnterChallengeRsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .pb.TBattleArgs BattleArgs = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_battleargs()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TTowerHellEnterChallengeRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TTowerHellEnterChallengeRsp)
  return false;
#undef DO_
}

void TTowerHellEnterChallengeRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TTowerHellEnterChallengeRsp)
  // optional .pb.TBattleArgs BattleArgs = 1;
  if (has_battleargs()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->battleargs(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TTowerHellEnterChallengeRsp)
}

::google::protobuf::uint8* TTowerHellEnterChallengeRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TTowerHellEnterChallengeRsp)
  // optional .pb.TBattleArgs BattleArgs = 1;
  if (has_battleargs()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->battleargs(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TTowerHellEnterChallengeRsp)
  return target;
}

int TTowerHellEnterChallengeRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .pb.TBattleArgs BattleArgs = 1;
    if (has_battleargs()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->battleargs());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TTowerHellEnterChallengeRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TTowerHellEnterChallengeRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TTowerHellEnterChallengeRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TTowerHellEnterChallengeRsp::MergeFrom(const TTowerHellEnterChallengeRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_battleargs()) {
      mutable_battleargs()->::pb::TBattleArgs::MergeFrom(from.battleargs());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TTowerHellEnterChallengeRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TTowerHellEnterChallengeRsp::CopyFrom(const TTowerHellEnterChallengeRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TTowerHellEnterChallengeRsp::IsInitialized() const {

  if (has_battleargs()) {
    if (!this->battleargs().IsInitialized()) return false;
  }
  return true;
}

void TTowerHellEnterChallengeRsp::Swap(TTowerHellEnterChallengeRsp* other) {
  if (other != this) {
    std::swap(battleargs_, other->battleargs_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TTowerHellEnterChallengeRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TTowerHellEnterChallengeRsp_descriptor_;
  metadata.reflection = TTowerHellEnterChallengeRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TTowerHellReportChallengeReq::kLayerIdFieldNumber;
const int TTowerHellReportChallengeReq::kBattleReportFieldNumber;
#endif  // !_MSC_VER

TTowerHellReportChallengeReq::TTowerHellReportChallengeReq()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TTowerHellReportChallengeReq)
}

void TTowerHellReportChallengeReq::InitAsDefaultInstance() {
}

TTowerHellReportChallengeReq::TTowerHellReportChallengeReq(const TTowerHellReportChallengeReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TTowerHellReportChallengeReq)
}

void TTowerHellReportChallengeReq::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  layerid_ = 0u;
  battlereport_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TTowerHellReportChallengeReq::~TTowerHellReportChallengeReq() {
  // @@protoc_insertion_point(destructor:pb.TTowerHellReportChallengeReq)
  SharedDtor();
}

void TTowerHellReportChallengeReq::SharedDtor() {
  if (battlereport_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete battlereport_;
  }
  if (this != default_instance_) {
  }
}

void TTowerHellReportChallengeReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TTowerHellReportChallengeReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TTowerHellReportChallengeReq_descriptor_;
}

const TTowerHellReportChallengeReq& TTowerHellReportChallengeReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fTowerHell_2eproto();
  return *default_instance_;
}

TTowerHellReportChallengeReq* TTowerHellReportChallengeReq::default_instance_ = NULL;

TTowerHellReportChallengeReq* TTowerHellReportChallengeReq::New() const {
  return new TTowerHellReportChallengeReq;
}

void TTowerHellReportChallengeReq::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    layerid_ = 0u;
    if (has_battlereport()) {
      if (battlereport_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        battlereport_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TTowerHellReportChallengeReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TTowerHellReportChallengeReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 LayerId = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &layerid_)));
          set_has_layerid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_BattleReport;
        break;
      }

      // optional bytes BattleReport = 2;
      case 2: {
        if (tag == 18) {
         parse_BattleReport:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_battlereport()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TTowerHellReportChallengeReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TTowerHellReportChallengeReq)
  return false;
#undef DO_
}

void TTowerHellReportChallengeReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TTowerHellReportChallengeReq)
  // optional uint32 LayerId = 1;
  if (has_layerid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->layerid(), output);
  }

  // optional bytes BattleReport = 2;
  if (has_battlereport()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->battlereport(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TTowerHellReportChallengeReq)
}

::google::protobuf::uint8* TTowerHellReportChallengeReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TTowerHellReportChallengeReq)
  // optional uint32 LayerId = 1;
  if (has_layerid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->layerid(), target);
  }

  // optional bytes BattleReport = 2;
  if (has_battlereport()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->battlereport(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TTowerHellReportChallengeReq)
  return target;
}

int TTowerHellReportChallengeReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 LayerId = 1;
    if (has_layerid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->layerid());
    }

    // optional bytes BattleReport = 2;
    if (has_battlereport()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->battlereport());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TTowerHellReportChallengeReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TTowerHellReportChallengeReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TTowerHellReportChallengeReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TTowerHellReportChallengeReq::MergeFrom(const TTowerHellReportChallengeReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_layerid()) {
      set_layerid(from.layerid());
    }
    if (from.has_battlereport()) {
      set_battlereport(from.battlereport());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TTowerHellReportChallengeReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TTowerHellReportChallengeReq::CopyFrom(const TTowerHellReportChallengeReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TTowerHellReportChallengeReq::IsInitialized() const {

  return true;
}

void TTowerHellReportChallengeReq::Swap(TTowerHellReportChallengeReq* other) {
  if (other != this) {
    std::swap(layerid_, other->layerid_);
    std::swap(battlereport_, other->battlereport_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TTowerHellReportChallengeReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TTowerHellReportChallengeReq_descriptor_;
  metadata.reflection = TTowerHellReportChallengeReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TTowerHellReportChallengeRsp::kIsWinFieldNumber;
const int TTowerHellReportChallengeRsp::kCurPassedLayerIdFieldNumber;
const int TTowerHellReportChallengeRsp::kMaxPassedLayerIdFieldNumber;
const int TTowerHellReportChallengeRsp::kStarFieldNumber;
#endif  // !_MSC_VER

TTowerHellReportChallengeRsp::TTowerHellReportChallengeRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TTowerHellReportChallengeRsp)
}

void TTowerHellReportChallengeRsp::InitAsDefaultInstance() {
}

TTowerHellReportChallengeRsp::TTowerHellReportChallengeRsp(const TTowerHellReportChallengeRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TTowerHellReportChallengeRsp)
}

void TTowerHellReportChallengeRsp::SharedCtor() {
  _cached_size_ = 0;
  iswin_ = false;
  curpassedlayerid_ = 0u;
  maxpassedlayerid_ = 0u;
  star_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TTowerHellReportChallengeRsp::~TTowerHellReportChallengeRsp() {
  // @@protoc_insertion_point(destructor:pb.TTowerHellReportChallengeRsp)
  SharedDtor();
}

void TTowerHellReportChallengeRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TTowerHellReportChallengeRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TTowerHellReportChallengeRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TTowerHellReportChallengeRsp_descriptor_;
}

const TTowerHellReportChallengeRsp& TTowerHellReportChallengeRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fTowerHell_2eproto();
  return *default_instance_;
}

TTowerHellReportChallengeRsp* TTowerHellReportChallengeRsp::default_instance_ = NULL;

TTowerHellReportChallengeRsp* TTowerHellReportChallengeRsp::New() const {
  return new TTowerHellReportChallengeRsp;
}

void TTowerHellReportChallengeRsp::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<TTowerHellReportChallengeRsp*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(iswin_, star_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TTowerHellReportChallengeRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TTowerHellReportChallengeRsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool IsWin = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &iswin_)));
          set_has_iswin();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_CurPassedLayerId;
        break;
      }

      // optional uint32 CurPassedLayerId = 2;
      case 2: {
        if (tag == 16) {
         parse_CurPassedLayerId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &curpassedlayerid_)));
          set_has_curpassedlayerid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_MaxPassedLayerId;
        break;
      }

      // optional uint32 MaxPassedLayerId = 3;
      case 3: {
        if (tag == 24) {
         parse_MaxPassedLayerId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &maxpassedlayerid_)));
          set_has_maxpassedlayerid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_Star;
        break;
      }

      // optional uint32 Star = 4;
      case 4: {
        if (tag == 32) {
         parse_Star:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &star_)));
          set_has_star();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TTowerHellReportChallengeRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TTowerHellReportChallengeRsp)
  return false;
#undef DO_
}

void TTowerHellReportChallengeRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TTowerHellReportChallengeRsp)
  // optional bool IsWin = 1;
  if (has_iswin()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->iswin(), output);
  }

  // optional uint32 CurPassedLayerId = 2;
  if (has_curpassedlayerid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->curpassedlayerid(), output);
  }

  // optional uint32 MaxPassedLayerId = 3;
  if (has_maxpassedlayerid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->maxpassedlayerid(), output);
  }

  // optional uint32 Star = 4;
  if (has_star()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->star(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TTowerHellReportChallengeRsp)
}

::google::protobuf::uint8* TTowerHellReportChallengeRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TTowerHellReportChallengeRsp)
  // optional bool IsWin = 1;
  if (has_iswin()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->iswin(), target);
  }

  // optional uint32 CurPassedLayerId = 2;
  if (has_curpassedlayerid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->curpassedlayerid(), target);
  }

  // optional uint32 MaxPassedLayerId = 3;
  if (has_maxpassedlayerid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->maxpassedlayerid(), target);
  }

  // optional uint32 Star = 4;
  if (has_star()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->star(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TTowerHellReportChallengeRsp)
  return target;
}

int TTowerHellReportChallengeRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bool IsWin = 1;
    if (has_iswin()) {
      total_size += 1 + 1;
    }

    // optional uint32 CurPassedLayerId = 2;
    if (has_curpassedlayerid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->curpassedlayerid());
    }

    // optional uint32 MaxPassedLayerId = 3;
    if (has_maxpassedlayerid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->maxpassedlayerid());
    }

    // optional uint32 Star = 4;
    if (has_star()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->star());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TTowerHellReportChallengeRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TTowerHellReportChallengeRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TTowerHellReportChallengeRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TTowerHellReportChallengeRsp::MergeFrom(const TTowerHellReportChallengeRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_iswin()) {
      set_iswin(from.iswin());
    }
    if (from.has_curpassedlayerid()) {
      set_curpassedlayerid(from.curpassedlayerid());
    }
    if (from.has_maxpassedlayerid()) {
      set_maxpassedlayerid(from.maxpassedlayerid());
    }
    if (from.has_star()) {
      set_star(from.star());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TTowerHellReportChallengeRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TTowerHellReportChallengeRsp::CopyFrom(const TTowerHellReportChallengeRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TTowerHellReportChallengeRsp::IsInitialized() const {

  return true;
}

void TTowerHellReportChallengeRsp::Swap(TTowerHellReportChallengeRsp* other) {
  if (other != this) {
    std::swap(iswin_, other->iswin_);
    std::swap(curpassedlayerid_, other->curpassedlayerid_);
    std::swap(maxpassedlayerid_, other->maxpassedlayerid_);
    std::swap(star_, other->star_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TTowerHellReportChallengeRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TTowerHellReportChallengeRsp_descriptor_;
  metadata.reflection = TTowerHellReportChallengeRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TTowerHellPassedLevelRankReq::kOffsetFieldNumber;
const int TTowerHellPassedLevelRankReq::kLimitFieldNumber;
#endif  // !_MSC_VER

TTowerHellPassedLevelRankReq::TTowerHellPassedLevelRankReq()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TTowerHellPassedLevelRankReq)
}

void TTowerHellPassedLevelRankReq::InitAsDefaultInstance() {
}

TTowerHellPassedLevelRankReq::TTowerHellPassedLevelRankReq(const TTowerHellPassedLevelRankReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TTowerHellPassedLevelRankReq)
}

void TTowerHellPassedLevelRankReq::SharedCtor() {
  _cached_size_ = 0;
  offset_ = 0;
  limit_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TTowerHellPassedLevelRankReq::~TTowerHellPassedLevelRankReq() {
  // @@protoc_insertion_point(destructor:pb.TTowerHellPassedLevelRankReq)
  SharedDtor();
}

void TTowerHellPassedLevelRankReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TTowerHellPassedLevelRankReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TTowerHellPassedLevelRankReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TTowerHellPassedLevelRankReq_descriptor_;
}

const TTowerHellPassedLevelRankReq& TTowerHellPassedLevelRankReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fTowerHell_2eproto();
  return *default_instance_;
}

TTowerHellPassedLevelRankReq* TTowerHellPassedLevelRankReq::default_instance_ = NULL;

TTowerHellPassedLevelRankReq* TTowerHellPassedLevelRankReq::New() const {
  return new TTowerHellPassedLevelRankReq;
}

void TTowerHellPassedLevelRankReq::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<TTowerHellPassedLevelRankReq*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(offset_, limit_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TTowerHellPassedLevelRankReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TTowerHellPassedLevelRankReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 Offset = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &offset_)));
          set_has_offset();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_Limit;
        break;
      }

      // optional int32 Limit = 2;
      case 2: {
        if (tag == 16) {
         parse_Limit:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &limit_)));
          set_has_limit();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TTowerHellPassedLevelRankReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TTowerHellPassedLevelRankReq)
  return false;
#undef DO_
}

void TTowerHellPassedLevelRankReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TTowerHellPassedLevelRankReq)
  // optional int32 Offset = 1;
  if (has_offset()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->offset(), output);
  }

  // optional int32 Limit = 2;
  if (has_limit()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->limit(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TTowerHellPassedLevelRankReq)
}

::google::protobuf::uint8* TTowerHellPassedLevelRankReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TTowerHellPassedLevelRankReq)
  // optional int32 Offset = 1;
  if (has_offset()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->offset(), target);
  }

  // optional int32 Limit = 2;
  if (has_limit()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->limit(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TTowerHellPassedLevelRankReq)
  return target;
}

int TTowerHellPassedLevelRankReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 Offset = 1;
    if (has_offset()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->offset());
    }

    // optional int32 Limit = 2;
    if (has_limit()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->limit());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TTowerHellPassedLevelRankReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TTowerHellPassedLevelRankReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TTowerHellPassedLevelRankReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TTowerHellPassedLevelRankReq::MergeFrom(const TTowerHellPassedLevelRankReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_offset()) {
      set_offset(from.offset());
    }
    if (from.has_limit()) {
      set_limit(from.limit());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TTowerHellPassedLevelRankReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TTowerHellPassedLevelRankReq::CopyFrom(const TTowerHellPassedLevelRankReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TTowerHellPassedLevelRankReq::IsInitialized() const {

  return true;
}

void TTowerHellPassedLevelRankReq::Swap(TTowerHellPassedLevelRankReq* other) {
  if (other != this) {
    std::swap(offset_, other->offset_);
    std::swap(limit_, other->limit_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TTowerHellPassedLevelRankReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TTowerHellPassedLevelRankReq_descriptor_;
  metadata.reflection = TTowerHellPassedLevelRankReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TTowerHellPassedLevelRankRsp::kRankArrFieldNumber;
const int TTowerHellPassedLevelRankRsp::kMyRankFieldNumber;
#endif  // !_MSC_VER

TTowerHellPassedLevelRankRsp::TTowerHellPassedLevelRankRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TTowerHellPassedLevelRankRsp)
}

void TTowerHellPassedLevelRankRsp::InitAsDefaultInstance() {
}

TTowerHellPassedLevelRankRsp::TTowerHellPassedLevelRankRsp(const TTowerHellPassedLevelRankRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TTowerHellPassedLevelRankRsp)
}

void TTowerHellPassedLevelRankRsp::SharedCtor() {
  _cached_size_ = 0;
  myrank_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TTowerHellPassedLevelRankRsp::~TTowerHellPassedLevelRankRsp() {
  // @@protoc_insertion_point(destructor:pb.TTowerHellPassedLevelRankRsp)
  SharedDtor();
}

void TTowerHellPassedLevelRankRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TTowerHellPassedLevelRankRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TTowerHellPassedLevelRankRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TTowerHellPassedLevelRankRsp_descriptor_;
}

const TTowerHellPassedLevelRankRsp& TTowerHellPassedLevelRankRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fTowerHell_2eproto();
  return *default_instance_;
}

TTowerHellPassedLevelRankRsp* TTowerHellPassedLevelRankRsp::default_instance_ = NULL;

TTowerHellPassedLevelRankRsp* TTowerHellPassedLevelRankRsp::New() const {
  return new TTowerHellPassedLevelRankRsp;
}

void TTowerHellPassedLevelRankRsp::Clear() {
  myrank_ = 0u;
  rankarr_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TTowerHellPassedLevelRankRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TTowerHellPassedLevelRankRsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .pb.TTowerHellPassedLevelRankItem RankArr = 1;
      case 1: {
        if (tag == 10) {
         parse_RankArr:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_rankarr()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_RankArr;
        if (input->ExpectTag(16)) goto parse_MyRank;
        break;
      }

      // optional uint32 MyRank = 2;
      case 2: {
        if (tag == 16) {
         parse_MyRank:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &myrank_)));
          set_has_myrank();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TTowerHellPassedLevelRankRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TTowerHellPassedLevelRankRsp)
  return false;
#undef DO_
}

void TTowerHellPassedLevelRankRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TTowerHellPassedLevelRankRsp)
  // repeated .pb.TTowerHellPassedLevelRankItem RankArr = 1;
  for (int i = 0; i < this->rankarr_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->rankarr(i), output);
  }

  // optional uint32 MyRank = 2;
  if (has_myrank()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->myrank(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TTowerHellPassedLevelRankRsp)
}

::google::protobuf::uint8* TTowerHellPassedLevelRankRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TTowerHellPassedLevelRankRsp)
  // repeated .pb.TTowerHellPassedLevelRankItem RankArr = 1;
  for (int i = 0; i < this->rankarr_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->rankarr(i), target);
  }

  // optional uint32 MyRank = 2;
  if (has_myrank()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->myrank(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TTowerHellPassedLevelRankRsp)
  return target;
}

int TTowerHellPassedLevelRankRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // optional uint32 MyRank = 2;
    if (has_myrank()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->myrank());
    }

  }
  // repeated .pb.TTowerHellPassedLevelRankItem RankArr = 1;
  total_size += 1 * this->rankarr_size();
  for (int i = 0; i < this->rankarr_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->rankarr(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TTowerHellPassedLevelRankRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TTowerHellPassedLevelRankRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TTowerHellPassedLevelRankRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TTowerHellPassedLevelRankRsp::MergeFrom(const TTowerHellPassedLevelRankRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  rankarr_.MergeFrom(from.rankarr_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_myrank()) {
      set_myrank(from.myrank());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TTowerHellPassedLevelRankRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TTowerHellPassedLevelRankRsp::CopyFrom(const TTowerHellPassedLevelRankRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TTowerHellPassedLevelRankRsp::IsInitialized() const {

  return true;
}

void TTowerHellPassedLevelRankRsp::Swap(TTowerHellPassedLevelRankRsp* other) {
  if (other != this) {
    rankarr_.Swap(&other->rankarr_);
    std::swap(myrank_, other->myrank_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TTowerHellPassedLevelRankRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TTowerHellPassedLevelRankRsp_descriptor_;
  metadata.reflection = TTowerHellPassedLevelRankRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TTowerHellPassedLevelRankItem::kUserInfoFieldNumber;
const int TTowerHellPassedLevelRankItem::kPassedLayerFieldNumber;
#endif  // !_MSC_VER

TTowerHellPassedLevelRankItem::TTowerHellPassedLevelRankItem()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TTowerHellPassedLevelRankItem)
}

void TTowerHellPassedLevelRankItem::InitAsDefaultInstance() {
  userinfo_ = const_cast< ::pb::TUserSimpleInfo*>(&::pb::TUserSimpleInfo::default_instance());
}

TTowerHellPassedLevelRankItem::TTowerHellPassedLevelRankItem(const TTowerHellPassedLevelRankItem& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TTowerHellPassedLevelRankItem)
}

void TTowerHellPassedLevelRankItem::SharedCtor() {
  _cached_size_ = 0;
  userinfo_ = NULL;
  passedlayer_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TTowerHellPassedLevelRankItem::~TTowerHellPassedLevelRankItem() {
  // @@protoc_insertion_point(destructor:pb.TTowerHellPassedLevelRankItem)
  SharedDtor();
}

void TTowerHellPassedLevelRankItem::SharedDtor() {
  if (this != default_instance_) {
    delete userinfo_;
  }
}

void TTowerHellPassedLevelRankItem::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TTowerHellPassedLevelRankItem::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TTowerHellPassedLevelRankItem_descriptor_;
}

const TTowerHellPassedLevelRankItem& TTowerHellPassedLevelRankItem::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fTowerHell_2eproto();
  return *default_instance_;
}

TTowerHellPassedLevelRankItem* TTowerHellPassedLevelRankItem::default_instance_ = NULL;

TTowerHellPassedLevelRankItem* TTowerHellPassedLevelRankItem::New() const {
  return new TTowerHellPassedLevelRankItem;
}

void TTowerHellPassedLevelRankItem::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    if (has_userinfo()) {
      if (userinfo_ != NULL) userinfo_->::pb::TUserSimpleInfo::Clear();
    }
    passedlayer_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TTowerHellPassedLevelRankItem::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TTowerHellPassedLevelRankItem)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .pb.TUserSimpleInfo UserInfo = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_userinfo()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_PassedLayer;
        break;
      }

      // optional uint32 PassedLayer = 2;
      case 2: {
        if (tag == 16) {
         parse_PassedLayer:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &passedlayer_)));
          set_has_passedlayer();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TTowerHellPassedLevelRankItem)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TTowerHellPassedLevelRankItem)
  return false;
#undef DO_
}

void TTowerHellPassedLevelRankItem::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TTowerHellPassedLevelRankItem)
  // optional .pb.TUserSimpleInfo UserInfo = 1;
  if (has_userinfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->userinfo(), output);
  }

  // optional uint32 PassedLayer = 2;
  if (has_passedlayer()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->passedlayer(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TTowerHellPassedLevelRankItem)
}

::google::protobuf::uint8* TTowerHellPassedLevelRankItem::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TTowerHellPassedLevelRankItem)
  // optional .pb.TUserSimpleInfo UserInfo = 1;
  if (has_userinfo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->userinfo(), target);
  }

  // optional uint32 PassedLayer = 2;
  if (has_passedlayer()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->passedlayer(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TTowerHellPassedLevelRankItem)
  return target;
}

int TTowerHellPassedLevelRankItem::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .pb.TUserSimpleInfo UserInfo = 1;
    if (has_userinfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->userinfo());
    }

    // optional uint32 PassedLayer = 2;
    if (has_passedlayer()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->passedlayer());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TTowerHellPassedLevelRankItem::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TTowerHellPassedLevelRankItem* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TTowerHellPassedLevelRankItem*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TTowerHellPassedLevelRankItem::MergeFrom(const TTowerHellPassedLevelRankItem& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_userinfo()) {
      mutable_userinfo()->::pb::TUserSimpleInfo::MergeFrom(from.userinfo());
    }
    if (from.has_passedlayer()) {
      set_passedlayer(from.passedlayer());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TTowerHellPassedLevelRankItem::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TTowerHellPassedLevelRankItem::CopyFrom(const TTowerHellPassedLevelRankItem& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TTowerHellPassedLevelRankItem::IsInitialized() const {

  return true;
}

void TTowerHellPassedLevelRankItem::Swap(TTowerHellPassedLevelRankItem* other) {
  if (other != this) {
    std::swap(userinfo_, other->userinfo_);
    std::swap(passedlayer_, other->passedlayer_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TTowerHellPassedLevelRankItem::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TTowerHellPassedLevelRankItem_descriptor_;
  metadata.reflection = TTowerHellPassedLevelRankItem_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TTowerHellGetAchieveRewardReq::kRewardIdFieldNumber;
#endif  // !_MSC_VER

TTowerHellGetAchieveRewardReq::TTowerHellGetAchieveRewardReq()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TTowerHellGetAchieveRewardReq)
}

void TTowerHellGetAchieveRewardReq::InitAsDefaultInstance() {
}

TTowerHellGetAchieveRewardReq::TTowerHellGetAchieveRewardReq(const TTowerHellGetAchieveRewardReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TTowerHellGetAchieveRewardReq)
}

void TTowerHellGetAchieveRewardReq::SharedCtor() {
  _cached_size_ = 0;
  rewardid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TTowerHellGetAchieveRewardReq::~TTowerHellGetAchieveRewardReq() {
  // @@protoc_insertion_point(destructor:pb.TTowerHellGetAchieveRewardReq)
  SharedDtor();
}

void TTowerHellGetAchieveRewardReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TTowerHellGetAchieveRewardReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TTowerHellGetAchieveRewardReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TTowerHellGetAchieveRewardReq_descriptor_;
}

const TTowerHellGetAchieveRewardReq& TTowerHellGetAchieveRewardReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fTowerHell_2eproto();
  return *default_instance_;
}

TTowerHellGetAchieveRewardReq* TTowerHellGetAchieveRewardReq::default_instance_ = NULL;

TTowerHellGetAchieveRewardReq* TTowerHellGetAchieveRewardReq::New() const {
  return new TTowerHellGetAchieveRewardReq;
}

void TTowerHellGetAchieveRewardReq::Clear() {
  rewardid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TTowerHellGetAchieveRewardReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TTowerHellGetAchieveRewardReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 RewardId = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &rewardid_)));
          set_has_rewardid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TTowerHellGetAchieveRewardReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TTowerHellGetAchieveRewardReq)
  return false;
#undef DO_
}

void TTowerHellGetAchieveRewardReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TTowerHellGetAchieveRewardReq)
  // optional uint32 RewardId = 1;
  if (has_rewardid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->rewardid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TTowerHellGetAchieveRewardReq)
}

::google::protobuf::uint8* TTowerHellGetAchieveRewardReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TTowerHellGetAchieveRewardReq)
  // optional uint32 RewardId = 1;
  if (has_rewardid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->rewardid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TTowerHellGetAchieveRewardReq)
  return target;
}

int TTowerHellGetAchieveRewardReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 RewardId = 1;
    if (has_rewardid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->rewardid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TTowerHellGetAchieveRewardReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TTowerHellGetAchieveRewardReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TTowerHellGetAchieveRewardReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TTowerHellGetAchieveRewardReq::MergeFrom(const TTowerHellGetAchieveRewardReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_rewardid()) {
      set_rewardid(from.rewardid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TTowerHellGetAchieveRewardReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TTowerHellGetAchieveRewardReq::CopyFrom(const TTowerHellGetAchieveRewardReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TTowerHellGetAchieveRewardReq::IsInitialized() const {

  return true;
}

void TTowerHellGetAchieveRewardReq::Swap(TTowerHellGetAchieveRewardReq* other) {
  if (other != this) {
    std::swap(rewardid_, other->rewardid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TTowerHellGetAchieveRewardReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TTowerHellGetAchieveRewardReq_descriptor_;
  metadata.reflection = TTowerHellGetAchieveRewardReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TTowerHellGetHangRewardInfoRsp::kHangInfoFieldNumber;
#endif  // !_MSC_VER

TTowerHellGetHangRewardInfoRsp::TTowerHellGetHangRewardInfoRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TTowerHellGetHangRewardInfoRsp)
}

void TTowerHellGetHangRewardInfoRsp::InitAsDefaultInstance() {
  hanginfo_ = const_cast< ::pb::TTowerHellHangRewardInfo*>(&::pb::TTowerHellHangRewardInfo::default_instance());
}

TTowerHellGetHangRewardInfoRsp::TTowerHellGetHangRewardInfoRsp(const TTowerHellGetHangRewardInfoRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TTowerHellGetHangRewardInfoRsp)
}

void TTowerHellGetHangRewardInfoRsp::SharedCtor() {
  _cached_size_ = 0;
  hanginfo_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TTowerHellGetHangRewardInfoRsp::~TTowerHellGetHangRewardInfoRsp() {
  // @@protoc_insertion_point(destructor:pb.TTowerHellGetHangRewardInfoRsp)
  SharedDtor();
}

void TTowerHellGetHangRewardInfoRsp::SharedDtor() {
  if (this != default_instance_) {
    delete hanginfo_;
  }
}

void TTowerHellGetHangRewardInfoRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TTowerHellGetHangRewardInfoRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TTowerHellGetHangRewardInfoRsp_descriptor_;
}

const TTowerHellGetHangRewardInfoRsp& TTowerHellGetHangRewardInfoRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fTowerHell_2eproto();
  return *default_instance_;
}

TTowerHellGetHangRewardInfoRsp* TTowerHellGetHangRewardInfoRsp::default_instance_ = NULL;

TTowerHellGetHangRewardInfoRsp* TTowerHellGetHangRewardInfoRsp::New() const {
  return new TTowerHellGetHangRewardInfoRsp;
}

void TTowerHellGetHangRewardInfoRsp::Clear() {
  if (has_hanginfo()) {
    if (hanginfo_ != NULL) hanginfo_->::pb::TTowerHellHangRewardInfo::Clear();
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TTowerHellGetHangRewardInfoRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TTowerHellGetHangRewardInfoRsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .pb.TTowerHellHangRewardInfo HangInfo = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_hanginfo()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TTowerHellGetHangRewardInfoRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TTowerHellGetHangRewardInfoRsp)
  return false;
#undef DO_
}

void TTowerHellGetHangRewardInfoRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TTowerHellGetHangRewardInfoRsp)
  // optional .pb.TTowerHellHangRewardInfo HangInfo = 1;
  if (has_hanginfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->hanginfo(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TTowerHellGetHangRewardInfoRsp)
}

::google::protobuf::uint8* TTowerHellGetHangRewardInfoRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TTowerHellGetHangRewardInfoRsp)
  // optional .pb.TTowerHellHangRewardInfo HangInfo = 1;
  if (has_hanginfo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->hanginfo(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TTowerHellGetHangRewardInfoRsp)
  return target;
}

int TTowerHellGetHangRewardInfoRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .pb.TTowerHellHangRewardInfo HangInfo = 1;
    if (has_hanginfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->hanginfo());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TTowerHellGetHangRewardInfoRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TTowerHellGetHangRewardInfoRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TTowerHellGetHangRewardInfoRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TTowerHellGetHangRewardInfoRsp::MergeFrom(const TTowerHellGetHangRewardInfoRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_hanginfo()) {
      mutable_hanginfo()->::pb::TTowerHellHangRewardInfo::MergeFrom(from.hanginfo());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TTowerHellGetHangRewardInfoRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TTowerHellGetHangRewardInfoRsp::CopyFrom(const TTowerHellGetHangRewardInfoRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TTowerHellGetHangRewardInfoRsp::IsInitialized() const {

  return true;
}

void TTowerHellGetHangRewardInfoRsp::Swap(TTowerHellGetHangRewardInfoRsp* other) {
  if (other != this) {
    std::swap(hanginfo_, other->hanginfo_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TTowerHellGetHangRewardInfoRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TTowerHellGetHangRewardInfoRsp_descriptor_;
  metadata.reflection = TTowerHellGetHangRewardInfoRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TTowerHellHangRewardInfo::kHangTimeFieldNumber;
const int TTowerHellHangRewardInfo::kHangReceiveTimeFieldNumber;
const int TTowerHellHangRewardInfo::kRandomRewardArrFieldNumber;
#endif  // !_MSC_VER

TTowerHellHangRewardInfo::TTowerHellHangRewardInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TTowerHellHangRewardInfo)
}

void TTowerHellHangRewardInfo::InitAsDefaultInstance() {
}

TTowerHellHangRewardInfo::TTowerHellHangRewardInfo(const TTowerHellHangRewardInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TTowerHellHangRewardInfo)
}

void TTowerHellHangRewardInfo::SharedCtor() {
  _cached_size_ = 0;
  hangtime_ = GOOGLE_ULONGLONG(0);
  hangreceivetime_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TTowerHellHangRewardInfo::~TTowerHellHangRewardInfo() {
  // @@protoc_insertion_point(destructor:pb.TTowerHellHangRewardInfo)
  SharedDtor();
}

void TTowerHellHangRewardInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TTowerHellHangRewardInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TTowerHellHangRewardInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TTowerHellHangRewardInfo_descriptor_;
}

const TTowerHellHangRewardInfo& TTowerHellHangRewardInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fTowerHell_2eproto();
  return *default_instance_;
}

TTowerHellHangRewardInfo* TTowerHellHangRewardInfo::default_instance_ = NULL;

TTowerHellHangRewardInfo* TTowerHellHangRewardInfo::New() const {
  return new TTowerHellHangRewardInfo;
}

void TTowerHellHangRewardInfo::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<TTowerHellHangRewardInfo*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(hangtime_, hangreceivetime_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  randomrewardarr_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TTowerHellHangRewardInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TTowerHellHangRewardInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 HangTime = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &hangtime_)));
          set_has_hangtime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_HangReceiveTime;
        break;
      }

      // optional uint64 HangReceiveTime = 2;
      case 2: {
        if (tag == 16) {
         parse_HangReceiveTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &hangreceivetime_)));
          set_has_hangreceivetime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_RandomRewardArr;
        break;
      }

      // repeated .pb.TCommonReward RandomRewardArr = 3;
      case 3: {
        if (tag == 26) {
         parse_RandomRewardArr:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_randomrewardarr()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_RandomRewardArr;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TTowerHellHangRewardInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TTowerHellHangRewardInfo)
  return false;
#undef DO_
}

void TTowerHellHangRewardInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TTowerHellHangRewardInfo)
  // optional uint64 HangTime = 1;
  if (has_hangtime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->hangtime(), output);
  }

  // optional uint64 HangReceiveTime = 2;
  if (has_hangreceivetime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->hangreceivetime(), output);
  }

  // repeated .pb.TCommonReward RandomRewardArr = 3;
  for (int i = 0; i < this->randomrewardarr_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->randomrewardarr(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TTowerHellHangRewardInfo)
}

::google::protobuf::uint8* TTowerHellHangRewardInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TTowerHellHangRewardInfo)
  // optional uint64 HangTime = 1;
  if (has_hangtime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->hangtime(), target);
  }

  // optional uint64 HangReceiveTime = 2;
  if (has_hangreceivetime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->hangreceivetime(), target);
  }

  // repeated .pb.TCommonReward RandomRewardArr = 3;
  for (int i = 0; i < this->randomrewardarr_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->randomrewardarr(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TTowerHellHangRewardInfo)
  return target;
}

int TTowerHellHangRewardInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 HangTime = 1;
    if (has_hangtime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->hangtime());
    }

    // optional uint64 HangReceiveTime = 2;
    if (has_hangreceivetime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->hangreceivetime());
    }

  }
  // repeated .pb.TCommonReward RandomRewardArr = 3;
  total_size += 1 * this->randomrewardarr_size();
  for (int i = 0; i < this->randomrewardarr_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->randomrewardarr(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TTowerHellHangRewardInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TTowerHellHangRewardInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TTowerHellHangRewardInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TTowerHellHangRewardInfo::MergeFrom(const TTowerHellHangRewardInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  randomrewardarr_.MergeFrom(from.randomrewardarr_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_hangtime()) {
      set_hangtime(from.hangtime());
    }
    if (from.has_hangreceivetime()) {
      set_hangreceivetime(from.hangreceivetime());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TTowerHellHangRewardInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TTowerHellHangRewardInfo::CopyFrom(const TTowerHellHangRewardInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TTowerHellHangRewardInfo::IsInitialized() const {

  return true;
}

void TTowerHellHangRewardInfo::Swap(TTowerHellHangRewardInfo* other) {
  if (other != this) {
    std::swap(hangtime_, other->hangtime_);
    std::swap(hangreceivetime_, other->hangreceivetime_);
    randomrewardarr_.Swap(&other->randomrewardarr_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TTowerHellHangRewardInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TTowerHellHangRewardInfo_descriptor_;
  metadata.reflection = TTowerHellHangRewardInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TTowerHellReceiveHangRewardRsp::kHangTimeFieldNumber;
const int TTowerHellReceiveHangRewardRsp::kHangReceiveTimeFieldNumber;
const int TTowerHellReceiveHangRewardRsp::kRewardArrFieldNumber;
#endif  // !_MSC_VER

TTowerHellReceiveHangRewardRsp::TTowerHellReceiveHangRewardRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TTowerHellReceiveHangRewardRsp)
}

void TTowerHellReceiveHangRewardRsp::InitAsDefaultInstance() {
}

TTowerHellReceiveHangRewardRsp::TTowerHellReceiveHangRewardRsp(const TTowerHellReceiveHangRewardRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TTowerHellReceiveHangRewardRsp)
}

void TTowerHellReceiveHangRewardRsp::SharedCtor() {
  _cached_size_ = 0;
  hangtime_ = GOOGLE_ULONGLONG(0);
  hangreceivetime_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TTowerHellReceiveHangRewardRsp::~TTowerHellReceiveHangRewardRsp() {
  // @@protoc_insertion_point(destructor:pb.TTowerHellReceiveHangRewardRsp)
  SharedDtor();
}

void TTowerHellReceiveHangRewardRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TTowerHellReceiveHangRewardRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TTowerHellReceiveHangRewardRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TTowerHellReceiveHangRewardRsp_descriptor_;
}

const TTowerHellReceiveHangRewardRsp& TTowerHellReceiveHangRewardRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fTowerHell_2eproto();
  return *default_instance_;
}

TTowerHellReceiveHangRewardRsp* TTowerHellReceiveHangRewardRsp::default_instance_ = NULL;

TTowerHellReceiveHangRewardRsp* TTowerHellReceiveHangRewardRsp::New() const {
  return new TTowerHellReceiveHangRewardRsp;
}

void TTowerHellReceiveHangRewardRsp::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<TTowerHellReceiveHangRewardRsp*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(hangtime_, hangreceivetime_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  rewardarr_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TTowerHellReceiveHangRewardRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TTowerHellReceiveHangRewardRsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 HangTime = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &hangtime_)));
          set_has_hangtime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_HangReceiveTime;
        break;
      }

      // optional uint64 HangReceiveTime = 2;
      case 2: {
        if (tag == 16) {
         parse_HangReceiveTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &hangreceivetime_)));
          set_has_hangreceivetime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_RewardArr;
        break;
      }

      // repeated .pb.TCommonReward RewardArr = 3;
      case 3: {
        if (tag == 26) {
         parse_RewardArr:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_rewardarr()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_RewardArr;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TTowerHellReceiveHangRewardRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TTowerHellReceiveHangRewardRsp)
  return false;
#undef DO_
}

void TTowerHellReceiveHangRewardRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TTowerHellReceiveHangRewardRsp)
  // optional uint64 HangTime = 1;
  if (has_hangtime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->hangtime(), output);
  }

  // optional uint64 HangReceiveTime = 2;
  if (has_hangreceivetime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->hangreceivetime(), output);
  }

  // repeated .pb.TCommonReward RewardArr = 3;
  for (int i = 0; i < this->rewardarr_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->rewardarr(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TTowerHellReceiveHangRewardRsp)
}

::google::protobuf::uint8* TTowerHellReceiveHangRewardRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TTowerHellReceiveHangRewardRsp)
  // optional uint64 HangTime = 1;
  if (has_hangtime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->hangtime(), target);
  }

  // optional uint64 HangReceiveTime = 2;
  if (has_hangreceivetime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->hangreceivetime(), target);
  }

  // repeated .pb.TCommonReward RewardArr = 3;
  for (int i = 0; i < this->rewardarr_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->rewardarr(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TTowerHellReceiveHangRewardRsp)
  return target;
}

int TTowerHellReceiveHangRewardRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 HangTime = 1;
    if (has_hangtime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->hangtime());
    }

    // optional uint64 HangReceiveTime = 2;
    if (has_hangreceivetime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->hangreceivetime());
    }

  }
  // repeated .pb.TCommonReward RewardArr = 3;
  total_size += 1 * this->rewardarr_size();
  for (int i = 0; i < this->rewardarr_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->rewardarr(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TTowerHellReceiveHangRewardRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TTowerHellReceiveHangRewardRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TTowerHellReceiveHangRewardRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TTowerHellReceiveHangRewardRsp::MergeFrom(const TTowerHellReceiveHangRewardRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  rewardarr_.MergeFrom(from.rewardarr_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_hangtime()) {
      set_hangtime(from.hangtime());
    }
    if (from.has_hangreceivetime()) {
      set_hangreceivetime(from.hangreceivetime());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TTowerHellReceiveHangRewardRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TTowerHellReceiveHangRewardRsp::CopyFrom(const TTowerHellReceiveHangRewardRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TTowerHellReceiveHangRewardRsp::IsInitialized() const {

  return true;
}

void TTowerHellReceiveHangRewardRsp::Swap(TTowerHellReceiveHangRewardRsp* other) {
  if (other != this) {
    std::swap(hangtime_, other->hangtime_);
    std::swap(hangreceivetime_, other->hangreceivetime_);
    rewardarr_.Swap(&other->rewardarr_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TTowerHellReceiveHangRewardRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TTowerHellReceiveHangRewardRsp_descriptor_;
  metadata.reflection = TTowerHellReceiveHangRewardRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TTowerHellBuyHangRewardRsp::kBoughtHangRewardNumFieldNumber;
const int TTowerHellBuyHangRewardRsp::kRewardArrFieldNumber;
#endif  // !_MSC_VER

TTowerHellBuyHangRewardRsp::TTowerHellBuyHangRewardRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TTowerHellBuyHangRewardRsp)
}

void TTowerHellBuyHangRewardRsp::InitAsDefaultInstance() {
}

TTowerHellBuyHangRewardRsp::TTowerHellBuyHangRewardRsp(const TTowerHellBuyHangRewardRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TTowerHellBuyHangRewardRsp)
}

void TTowerHellBuyHangRewardRsp::SharedCtor() {
  _cached_size_ = 0;
  boughthangrewardnum_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TTowerHellBuyHangRewardRsp::~TTowerHellBuyHangRewardRsp() {
  // @@protoc_insertion_point(destructor:pb.TTowerHellBuyHangRewardRsp)
  SharedDtor();
}

void TTowerHellBuyHangRewardRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TTowerHellBuyHangRewardRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TTowerHellBuyHangRewardRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TTowerHellBuyHangRewardRsp_descriptor_;
}

const TTowerHellBuyHangRewardRsp& TTowerHellBuyHangRewardRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fTowerHell_2eproto();
  return *default_instance_;
}

TTowerHellBuyHangRewardRsp* TTowerHellBuyHangRewardRsp::default_instance_ = NULL;

TTowerHellBuyHangRewardRsp* TTowerHellBuyHangRewardRsp::New() const {
  return new TTowerHellBuyHangRewardRsp;
}

void TTowerHellBuyHangRewardRsp::Clear() {
  boughthangrewardnum_ = 0u;
  rewardarr_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TTowerHellBuyHangRewardRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TTowerHellBuyHangRewardRsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 BoughtHangRewardNum = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &boughthangrewardnum_)));
          set_has_boughthangrewardnum();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_RewardArr;
        break;
      }

      // repeated .pb.TCommonReward RewardArr = 2;
      case 2: {
        if (tag == 18) {
         parse_RewardArr:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_rewardarr()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_RewardArr;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TTowerHellBuyHangRewardRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TTowerHellBuyHangRewardRsp)
  return false;
#undef DO_
}

void TTowerHellBuyHangRewardRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TTowerHellBuyHangRewardRsp)
  // optional uint32 BoughtHangRewardNum = 1;
  if (has_boughthangrewardnum()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->boughthangrewardnum(), output);
  }

  // repeated .pb.TCommonReward RewardArr = 2;
  for (int i = 0; i < this->rewardarr_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->rewardarr(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TTowerHellBuyHangRewardRsp)
}

::google::protobuf::uint8* TTowerHellBuyHangRewardRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TTowerHellBuyHangRewardRsp)
  // optional uint32 BoughtHangRewardNum = 1;
  if (has_boughthangrewardnum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->boughthangrewardnum(), target);
  }

  // repeated .pb.TCommonReward RewardArr = 2;
  for (int i = 0; i < this->rewardarr_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->rewardarr(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TTowerHellBuyHangRewardRsp)
  return target;
}

int TTowerHellBuyHangRewardRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 BoughtHangRewardNum = 1;
    if (has_boughthangrewardnum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->boughthangrewardnum());
    }

  }
  // repeated .pb.TCommonReward RewardArr = 2;
  total_size += 1 * this->rewardarr_size();
  for (int i = 0; i < this->rewardarr_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->rewardarr(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TTowerHellBuyHangRewardRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TTowerHellBuyHangRewardRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TTowerHellBuyHangRewardRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TTowerHellBuyHangRewardRsp::MergeFrom(const TTowerHellBuyHangRewardRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  rewardarr_.MergeFrom(from.rewardarr_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_boughthangrewardnum()) {
      set_boughthangrewardnum(from.boughthangrewardnum());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TTowerHellBuyHangRewardRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TTowerHellBuyHangRewardRsp::CopyFrom(const TTowerHellBuyHangRewardRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TTowerHellBuyHangRewardRsp::IsInitialized() const {

  return true;
}

void TTowerHellBuyHangRewardRsp::Swap(TTowerHellBuyHangRewardRsp* other) {
  if (other != this) {
    std::swap(boughthangrewardnum_, other->boughthangrewardnum_);
    rewardarr_.Swap(&other->rewardarr_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TTowerHellBuyHangRewardRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TTowerHellBuyHangRewardRsp_descriptor_;
  metadata.reflection = TTowerHellBuyHangRewardRsp_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace pb

// @@protoc_insertion_point(global_scope)
