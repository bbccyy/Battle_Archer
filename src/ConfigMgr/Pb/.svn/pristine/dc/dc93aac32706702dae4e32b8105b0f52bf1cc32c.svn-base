// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: module/SpineData.proto

#ifndef PROTOBUF_module_2fSpineData_2eproto__INCLUDED
#define PROTOBUF_module_2fSpineData_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
#include "module/Util.pb.h"
// @@protoc_insertion_point(includes)

namespace pb {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_module_2fSpineData_2eproto();
void protobuf_AssignDesc_module_2fSpineData_2eproto();
void protobuf_ShutdownFile_module_2fSpineData_2eproto();

class SpineAttachInfo;
class SpineData;

// ===================================================================

/*FOR2LUA
<Record>
	<name>SpineAttachInfo</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>module/SpineData.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class SpineAttachInfo : public ::google::protobuf::Message {
 public:
  SpineAttachInfo();
  virtual ~SpineAttachInfo();

  SpineAttachInfo(const SpineAttachInfo& from);

  inline SpineAttachInfo& operator=(const SpineAttachInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SpineAttachInfo& default_instance();

  void Swap(SpineAttachInfo* other);

  // implements Message ----------------------------------------------

  SpineAttachInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SpineAttachInfo& from);
  void MergeFrom(const SpineAttachInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string EffectAssetPath = 1;
  inline bool has_effectassetpath() const;
  inline void clear_effectassetpath();
  static const int kEffectAssetPathFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>SpineAttachInfo</name>
  	<Function>
  		<name>effectassetpath</name>
  		<replaceName>EffectAssetPath</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_effectassetpath</name>
  		<replaceName>EffectAssetPath</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_effectassetpath</name>
  		<replaceName>EffectAssetPath</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::std::string& effectassetpath() const;
  inline void set_effectassetpath(const ::std::string& value);
  inline void set_effectassetpath(const char* value);
  inline void set_effectassetpath(const char* value, size_t size);
  inline ::std::string* mutable_effectassetpath();
  inline ::std::string* release_effectassetpath();
  inline void set_allocated_effectassetpath(::std::string* effectassetpath);

  // optional string BoneName = 2;
  inline bool has_bonename() const;
  inline void clear_bonename();
  static const int kBoneNameFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>SpineAttachInfo</name>
  	<Function>
  		<name>bonename</name>
  		<replaceName>BoneName</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_bonename</name>
  		<replaceName>BoneName</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_bonename</name>
  		<replaceName>BoneName</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::std::string& bonename() const;
  inline void set_bonename(const ::std::string& value);
  inline void set_bonename(const char* value);
  inline void set_bonename(const char* value, size_t size);
  inline ::std::string* mutable_bonename();
  inline ::std::string* release_bonename();
  inline void set_allocated_bonename(::std::string* bonename);

  // optional .pb.PbVector3 Offset = 3;
  inline bool has_offset() const;
  inline void clear_offset();
  static const int kOffsetFieldNumber = 3;
  /*FOR2LUA
  <Record>
  	<name>SpineAttachInfo</name>
  	<Function>
  		<name>offset</name>
  		<replaceName>Offset</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_offset</name>
  		<replaceName>Offset</replaceName>
  		<handler>descripter = pb_set_message_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_allocated_offset</name>
  		<replaceName>Offset</replaceName>
  		<handler>descripter = pb_set_message_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_offset</name>
  		<replaceName>Offset</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::PbVector3& offset() const;
  inline ::pb::PbVector3* mutable_offset();
  inline ::pb::PbVector3* release_offset();
  inline void set_allocated_offset(::pb::PbVector3* offset);

  // optional int32 SortingOrder = 4;
  inline bool has_sortingorder() const;
  inline void clear_sortingorder();
  static const int kSortingOrderFieldNumber = 4;
  /*FOR2LUA
  <Record>
  	<name>SpineAttachInfo</name>
  	<Function>
  		<name>sortingorder</name>
  		<replaceName>SortingOrder</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_sortingorder</name>
  		<replaceName>SortingOrder</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_sortingorder</name>
  		<replaceName>SortingOrder</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::int32 sortingorder() const;
  inline void set_sortingorder(::google::protobuf::int32 value);

  // optional float Scale = 5;
  inline bool has_scale() const;
  inline void clear_scale();
  static const int kScaleFieldNumber = 5;
  /*FOR2LUA
  <Record>
  	<name>SpineAttachInfo</name>
  	<Function>
  		<name>scale</name>
  		<replaceName>Scale</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_scale</name>
  		<replaceName>Scale</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_scale</name>
  		<replaceName>Scale</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline float scale() const;
  inline void set_scale(float value);

  // @@protoc_insertion_point(class_scope:pb.SpineAttachInfo)
 private:
  inline void set_has_effectassetpath();
  inline void clear_has_effectassetpath();
  inline void set_has_bonename();
  inline void clear_has_bonename();
  inline void set_has_offset();
  inline void clear_has_offset();
  inline void set_has_sortingorder();
  inline void clear_has_sortingorder();
  inline void set_has_scale();
  inline void clear_has_scale();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* effectassetpath_;
  ::std::string* bonename_;
  ::pb::PbVector3* offset_;
  ::google::protobuf::int32 sortingorder_;
  float scale_;
  friend void  protobuf_AddDesc_module_2fSpineData_2eproto();
  friend void protobuf_AssignDesc_module_2fSpineData_2eproto();
  friend void protobuf_ShutdownFile_module_2fSpineData_2eproto();

  void InitAsDefaultInstance();
  static SpineAttachInfo* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>SpineData</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>module/SpineData.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class SpineData : public ::google::protobuf::Message {
 public:
  SpineData();
  virtual ~SpineData();

  SpineData(const SpineData& from);

  inline SpineData& operator=(const SpineData& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SpineData& default_instance();

  void Swap(SpineData* other);

  // implements Message ----------------------------------------------

  SpineData* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SpineData& from);
  void MergeFrom(const SpineData& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 Id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>SpineData</name>
  	<Function>
  		<name>id</name>
  		<replaceName>Id</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_id</name>
  		<replaceName>Id</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_id</name>
  		<replaceName>Id</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::int32 id() const;
  inline void set_id(::google::protobuf::int32 value);

  // required string SpineName = 2;
  inline bool has_spinename() const;
  inline void clear_spinename();
  static const int kSpineNameFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>SpineData</name>
  	<Function>
  		<name>spinename</name>
  		<replaceName>SpineName</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_spinename</name>
  		<replaceName>SpineName</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_spinename</name>
  		<replaceName>SpineName</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::std::string& spinename() const;
  inline void set_spinename(const ::std::string& value);
  inline void set_spinename(const char* value);
  inline void set_spinename(const char* value, size_t size);
  inline ::std::string* mutable_spinename();
  inline ::std::string* release_spinename();
  inline void set_allocated_spinename(::std::string* spinename);

  // repeated .pb.SpineAttachInfo AttachInfoArr = 3;
  inline int attachinfoarr_size() const;
  inline void clear_attachinfoarr();
  static const int kAttachInfoArrFieldNumber = 3;
  /*FOR2LUA
  <Record>
  	<name>SpineData</name>
  	<Function>
  		<name>attachinfoarr</name>
  		<replaceName>AttachInfoArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_attachinfoarr</name>
  		<replaceName>AttachInfoArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_attachinfoarr</name>
  		<replaceName>AttachInfoArr</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_attachinfoarr</name>
  		<replaceName>AttachInfoArr</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>attachinfoarr_size</name>
  		<replaceName>AttachInfoArr</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::SpineAttachInfo& attachinfoarr(int index) const;
  inline ::pb::SpineAttachInfo* mutable_attachinfoarr(int index);
  inline ::pb::SpineAttachInfo* add_attachinfoarr();
  inline const ::google::protobuf::RepeatedPtrField< ::pb::SpineAttachInfo >&
      attachinfoarr() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb::SpineAttachInfo >*
      mutable_attachinfoarr();

  // optional int32 UseLocal = 4;
  inline bool has_uselocal() const;
  inline void clear_uselocal();
  static const int kUseLocalFieldNumber = 4;
  /*FOR2LUA
  <Record>
  	<name>SpineData</name>
  	<Function>
  		<name>uselocal</name>
  		<replaceName>UseLocal</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_uselocal</name>
  		<replaceName>UseLocal</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_uselocal</name>
  		<replaceName>UseLocal</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::int32 uselocal() const;
  inline void set_uselocal(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:pb.SpineData)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_spinename();
  inline void clear_has_spinename();
  inline void set_has_uselocal();
  inline void clear_has_uselocal();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* spinename_;
  ::google::protobuf::int32 id_;
  ::google::protobuf::int32 uselocal_;
  ::google::protobuf::RepeatedPtrField< ::pb::SpineAttachInfo > attachinfoarr_;
  friend void  protobuf_AddDesc_module_2fSpineData_2eproto();
  friend void protobuf_AssignDesc_module_2fSpineData_2eproto();
  friend void protobuf_ShutdownFile_module_2fSpineData_2eproto();

  void InitAsDefaultInstance();
  static SpineData* default_instance_;
};
// ===================================================================


// ===================================================================

// SpineAttachInfo

// optional string EffectAssetPath = 1;
inline bool SpineAttachInfo::has_effectassetpath() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SpineAttachInfo::set_has_effectassetpath() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SpineAttachInfo::clear_has_effectassetpath() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SpineAttachInfo::clear_effectassetpath() {
  if (effectassetpath_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    effectassetpath_->clear();
  }
  clear_has_effectassetpath();
}
inline const ::std::string& SpineAttachInfo::effectassetpath() const {
  // @@protoc_insertion_point(field_get:pb.SpineAttachInfo.EffectAssetPath)
  return *effectassetpath_;
}
inline void SpineAttachInfo::set_effectassetpath(const ::std::string& value) {
  set_has_effectassetpath();
  if (effectassetpath_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    effectassetpath_ = new ::std::string;
  }
  effectassetpath_->assign(value);
  // @@protoc_insertion_point(field_set:pb.SpineAttachInfo.EffectAssetPath)
}
inline void SpineAttachInfo::set_effectassetpath(const char* value) {
  set_has_effectassetpath();
  if (effectassetpath_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    effectassetpath_ = new ::std::string;
  }
  effectassetpath_->assign(value);
  // @@protoc_insertion_point(field_set_char:pb.SpineAttachInfo.EffectAssetPath)
}
inline void SpineAttachInfo::set_effectassetpath(const char* value, size_t size) {
  set_has_effectassetpath();
  if (effectassetpath_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    effectassetpath_ = new ::std::string;
  }
  effectassetpath_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:pb.SpineAttachInfo.EffectAssetPath)
}
inline ::std::string* SpineAttachInfo::mutable_effectassetpath() {
  set_has_effectassetpath();
  if (effectassetpath_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    effectassetpath_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:pb.SpineAttachInfo.EffectAssetPath)
  return effectassetpath_;
}
inline ::std::string* SpineAttachInfo::release_effectassetpath() {
  clear_has_effectassetpath();
  if (effectassetpath_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = effectassetpath_;
    effectassetpath_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void SpineAttachInfo::set_allocated_effectassetpath(::std::string* effectassetpath) {
  if (effectassetpath_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete effectassetpath_;
  }
  if (effectassetpath) {
    set_has_effectassetpath();
    effectassetpath_ = effectassetpath;
  } else {
    clear_has_effectassetpath();
    effectassetpath_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:pb.SpineAttachInfo.EffectAssetPath)
}

// optional string BoneName = 2;
inline bool SpineAttachInfo::has_bonename() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SpineAttachInfo::set_has_bonename() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SpineAttachInfo::clear_has_bonename() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SpineAttachInfo::clear_bonename() {
  if (bonename_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    bonename_->clear();
  }
  clear_has_bonename();
}
inline const ::std::string& SpineAttachInfo::bonename() const {
  // @@protoc_insertion_point(field_get:pb.SpineAttachInfo.BoneName)
  return *bonename_;
}
inline void SpineAttachInfo::set_bonename(const ::std::string& value) {
  set_has_bonename();
  if (bonename_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    bonename_ = new ::std::string;
  }
  bonename_->assign(value);
  // @@protoc_insertion_point(field_set:pb.SpineAttachInfo.BoneName)
}
inline void SpineAttachInfo::set_bonename(const char* value) {
  set_has_bonename();
  if (bonename_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    bonename_ = new ::std::string;
  }
  bonename_->assign(value);
  // @@protoc_insertion_point(field_set_char:pb.SpineAttachInfo.BoneName)
}
inline void SpineAttachInfo::set_bonename(const char* value, size_t size) {
  set_has_bonename();
  if (bonename_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    bonename_ = new ::std::string;
  }
  bonename_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:pb.SpineAttachInfo.BoneName)
}
inline ::std::string* SpineAttachInfo::mutable_bonename() {
  set_has_bonename();
  if (bonename_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    bonename_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:pb.SpineAttachInfo.BoneName)
  return bonename_;
}
inline ::std::string* SpineAttachInfo::release_bonename() {
  clear_has_bonename();
  if (bonename_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = bonename_;
    bonename_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void SpineAttachInfo::set_allocated_bonename(::std::string* bonename) {
  if (bonename_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete bonename_;
  }
  if (bonename) {
    set_has_bonename();
    bonename_ = bonename;
  } else {
    clear_has_bonename();
    bonename_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:pb.SpineAttachInfo.BoneName)
}

// optional .pb.PbVector3 Offset = 3;
inline bool SpineAttachInfo::has_offset() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void SpineAttachInfo::set_has_offset() {
  _has_bits_[0] |= 0x00000004u;
}
inline void SpineAttachInfo::clear_has_offset() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void SpineAttachInfo::clear_offset() {
  if (offset_ != NULL) offset_->::pb::PbVector3::Clear();
  clear_has_offset();
}
inline const ::pb::PbVector3& SpineAttachInfo::offset() const {
  // @@protoc_insertion_point(field_get:pb.SpineAttachInfo.Offset)
  return offset_ != NULL ? *offset_ : *default_instance_->offset_;
}
inline ::pb::PbVector3* SpineAttachInfo::mutable_offset() {
  set_has_offset();
  if (offset_ == NULL) offset_ = new ::pb::PbVector3;
  // @@protoc_insertion_point(field_mutable:pb.SpineAttachInfo.Offset)
  return offset_;
}
inline ::pb::PbVector3* SpineAttachInfo::release_offset() {
  clear_has_offset();
  ::pb::PbVector3* temp = offset_;
  offset_ = NULL;
  return temp;
}
inline void SpineAttachInfo::set_allocated_offset(::pb::PbVector3* offset) {
  delete offset_;
  offset_ = offset;
  if (offset) {
    set_has_offset();
  } else {
    clear_has_offset();
  }
  // @@protoc_insertion_point(field_set_allocated:pb.SpineAttachInfo.Offset)
}

// optional int32 SortingOrder = 4;
inline bool SpineAttachInfo::has_sortingorder() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void SpineAttachInfo::set_has_sortingorder() {
  _has_bits_[0] |= 0x00000008u;
}
inline void SpineAttachInfo::clear_has_sortingorder() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void SpineAttachInfo::clear_sortingorder() {
  sortingorder_ = 0;
  clear_has_sortingorder();
}
inline ::google::protobuf::int32 SpineAttachInfo::sortingorder() const {
  // @@protoc_insertion_point(field_get:pb.SpineAttachInfo.SortingOrder)
  return sortingorder_;
}
inline void SpineAttachInfo::set_sortingorder(::google::protobuf::int32 value) {
  set_has_sortingorder();
  sortingorder_ = value;
  // @@protoc_insertion_point(field_set:pb.SpineAttachInfo.SortingOrder)
}

// optional float Scale = 5;
inline bool SpineAttachInfo::has_scale() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void SpineAttachInfo::set_has_scale() {
  _has_bits_[0] |= 0x00000010u;
}
inline void SpineAttachInfo::clear_has_scale() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void SpineAttachInfo::clear_scale() {
  scale_ = 0;
  clear_has_scale();
}
inline float SpineAttachInfo::scale() const {
  // @@protoc_insertion_point(field_get:pb.SpineAttachInfo.Scale)
  return scale_;
}
inline void SpineAttachInfo::set_scale(float value) {
  set_has_scale();
  scale_ = value;
  // @@protoc_insertion_point(field_set:pb.SpineAttachInfo.Scale)
}

// -------------------------------------------------------------------

// SpineData

// required int32 Id = 1;
inline bool SpineData::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SpineData::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SpineData::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SpineData::clear_id() {
  id_ = 0;
  clear_has_id();
}
inline ::google::protobuf::int32 SpineData::id() const {
  // @@protoc_insertion_point(field_get:pb.SpineData.Id)
  return id_;
}
inline void SpineData::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:pb.SpineData.Id)
}

// required string SpineName = 2;
inline bool SpineData::has_spinename() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SpineData::set_has_spinename() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SpineData::clear_has_spinename() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SpineData::clear_spinename() {
  if (spinename_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    spinename_->clear();
  }
  clear_has_spinename();
}
inline const ::std::string& SpineData::spinename() const {
  // @@protoc_insertion_point(field_get:pb.SpineData.SpineName)
  return *spinename_;
}
inline void SpineData::set_spinename(const ::std::string& value) {
  set_has_spinename();
  if (spinename_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    spinename_ = new ::std::string;
  }
  spinename_->assign(value);
  // @@protoc_insertion_point(field_set:pb.SpineData.SpineName)
}
inline void SpineData::set_spinename(const char* value) {
  set_has_spinename();
  if (spinename_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    spinename_ = new ::std::string;
  }
  spinename_->assign(value);
  // @@protoc_insertion_point(field_set_char:pb.SpineData.SpineName)
}
inline void SpineData::set_spinename(const char* value, size_t size) {
  set_has_spinename();
  if (spinename_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    spinename_ = new ::std::string;
  }
  spinename_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:pb.SpineData.SpineName)
}
inline ::std::string* SpineData::mutable_spinename() {
  set_has_spinename();
  if (spinename_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    spinename_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:pb.SpineData.SpineName)
  return spinename_;
}
inline ::std::string* SpineData::release_spinename() {
  clear_has_spinename();
  if (spinename_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = spinename_;
    spinename_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void SpineData::set_allocated_spinename(::std::string* spinename) {
  if (spinename_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete spinename_;
  }
  if (spinename) {
    set_has_spinename();
    spinename_ = spinename;
  } else {
    clear_has_spinename();
    spinename_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:pb.SpineData.SpineName)
}

// repeated .pb.SpineAttachInfo AttachInfoArr = 3;
inline int SpineData::attachinfoarr_size() const {
  return attachinfoarr_.size();
}
inline void SpineData::clear_attachinfoarr() {
  attachinfoarr_.Clear();
}
inline const ::pb::SpineAttachInfo& SpineData::attachinfoarr(int index) const {
  // @@protoc_insertion_point(field_get:pb.SpineData.AttachInfoArr)
  return attachinfoarr_.Get(index);
}
inline ::pb::SpineAttachInfo* SpineData::mutable_attachinfoarr(int index) {
  // @@protoc_insertion_point(field_mutable:pb.SpineData.AttachInfoArr)
  return attachinfoarr_.Mutable(index);
}
inline ::pb::SpineAttachInfo* SpineData::add_attachinfoarr() {
  // @@protoc_insertion_point(field_add:pb.SpineData.AttachInfoArr)
  return attachinfoarr_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::SpineAttachInfo >&
SpineData::attachinfoarr() const {
  // @@protoc_insertion_point(field_list:pb.SpineData.AttachInfoArr)
  return attachinfoarr_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb::SpineAttachInfo >*
SpineData::mutable_attachinfoarr() {
  // @@protoc_insertion_point(field_mutable_list:pb.SpineData.AttachInfoArr)
  return &attachinfoarr_;
}

// optional int32 UseLocal = 4;
inline bool SpineData::has_uselocal() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void SpineData::set_has_uselocal() {
  _has_bits_[0] |= 0x00000008u;
}
inline void SpineData::clear_has_uselocal() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void SpineData::clear_uselocal() {
  uselocal_ = 0;
  clear_has_uselocal();
}
inline ::google::protobuf::int32 SpineData::uselocal() const {
  // @@protoc_insertion_point(field_get:pb.SpineData.UseLocal)
  return uselocal_;
}
inline void SpineData::set_uselocal(::google::protobuf::int32 value) {
  set_has_uselocal();
  uselocal_ = value;
  // @@protoc_insertion_point(field_set:pb.SpineData.UseLocal)
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace pb

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_module_2fSpineData_2eproto__INCLUDED
