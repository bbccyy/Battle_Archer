// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: net/ActPasswordAct.proto

#ifndef PROTOBUF_net_2fActPasswordAct_2eproto__INCLUDED
#define PROTOBUF_net_2fActPasswordAct_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace pb {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_net_2fActPasswordAct_2eproto();
void protobuf_AssignDesc_net_2fActPasswordAct_2eproto();
void protobuf_ShutdownFile_net_2fActPasswordAct_2eproto();

class TActPasswordActGetInfoRsp;
class TActPasswordActEnterRsp;
class TActPasswordActActiveReq;
class TActPasswordActActiveRsp;
class TActPasswordActActiveByItemItemInfo;
class TActPasswordActActiveByItemReq;
class TActPasswordActActiveByItemRsp;
class TActPasswordActNotify;
class TActPasswordActReceiveRewardReq;

// ===================================================================

/*FOR2LUA
<Record>
	<name>TActPasswordActGetInfoRsp</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/ActPasswordAct.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TActPasswordActGetInfoRsp : public ::google::protobuf::Message {
 public:
  TActPasswordActGetInfoRsp();
  virtual ~TActPasswordActGetInfoRsp();

  TActPasswordActGetInfoRsp(const TActPasswordActGetInfoRsp& from);

  inline TActPasswordActGetInfoRsp& operator=(const TActPasswordActGetInfoRsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TActPasswordActGetInfoRsp& default_instance();

  void Swap(TActPasswordActGetInfoRsp* other);

  // implements Message ----------------------------------------------

  TActPasswordActGetInfoRsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TActPasswordActGetInfoRsp& from);
  void MergeFrom(const TActPasswordActGetInfoRsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated uint32 ArrId = 1;
  inline int arrid_size() const;
  inline void clear_arrid();
  static const int kArrIdFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TActPasswordActGetInfoRsp</name>
  	<Function>
  		<name>arrid</name>
  		<replaceName>ArrId</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_arrid</name>
  		<replaceName>ArrId</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_arrid</name>
  		<replaceName>ArrId</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_arrid</name>
  		<replaceName>ArrId</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>arrid_size</name>
  		<replaceName>ArrId</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 arrid(int index) const;
  inline void set_arrid(int index, ::google::protobuf::uint32 value);
  inline void add_arrid(::google::protobuf::uint32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      arrid() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_arrid();

  // repeated uint32 ArrRid = 2;
  inline int arrrid_size() const;
  inline void clear_arrrid();
  static const int kArrRidFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TActPasswordActGetInfoRsp</name>
  	<Function>
  		<name>arrrid</name>
  		<replaceName>ArrRid</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_arrrid</name>
  		<replaceName>ArrRid</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_arrrid</name>
  		<replaceName>ArrRid</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_arrrid</name>
  		<replaceName>ArrRid</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>arrrid_size</name>
  		<replaceName>ArrRid</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 arrrid(int index) const;
  inline void set_arrrid(int index, ::google::protobuf::uint32 value);
  inline void add_arrrid(::google::protobuf::uint32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      arrrid() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_arrrid();

  // repeated uint32 ArrRandId = 3;
  inline int arrrandid_size() const;
  inline void clear_arrrandid();
  static const int kArrRandIdFieldNumber = 3;
  /*FOR2LUA
  <Record>
  	<name>TActPasswordActGetInfoRsp</name>
  	<Function>
  		<name>arrrandid</name>
  		<replaceName>ArrRandId</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_arrrandid</name>
  		<replaceName>ArrRandId</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_arrrandid</name>
  		<replaceName>ArrRandId</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_arrrandid</name>
  		<replaceName>ArrRandId</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>arrrandid_size</name>
  		<replaceName>ArrRandId</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 arrrandid(int index) const;
  inline void set_arrrandid(int index, ::google::protobuf::uint32 value);
  inline void add_arrrandid(::google::protobuf::uint32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      arrrandid() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_arrrandid();

  // @@protoc_insertion_point(class_scope:pb.TActPasswordActGetInfoRsp)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > arrid_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > arrrid_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > arrrandid_;
  friend void  protobuf_AddDesc_net_2fActPasswordAct_2eproto();
  friend void protobuf_AssignDesc_net_2fActPasswordAct_2eproto();
  friend void protobuf_ShutdownFile_net_2fActPasswordAct_2eproto();

  void InitAsDefaultInstance();
  static TActPasswordActGetInfoRsp* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TActPasswordActEnterRsp</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/ActPasswordAct.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TActPasswordActEnterRsp : public ::google::protobuf::Message {
 public:
  TActPasswordActEnterRsp();
  virtual ~TActPasswordActEnterRsp();

  TActPasswordActEnterRsp(const TActPasswordActEnterRsp& from);

  inline TActPasswordActEnterRsp& operator=(const TActPasswordActEnterRsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TActPasswordActEnterRsp& default_instance();

  void Swap(TActPasswordActEnterRsp* other);

  // implements Message ----------------------------------------------

  TActPasswordActEnterRsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TActPasswordActEnterRsp& from);
  void MergeFrom(const TActPasswordActEnterRsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated uint32 ArrId = 1;
  inline int arrid_size() const;
  inline void clear_arrid();
  static const int kArrIdFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TActPasswordActEnterRsp</name>
  	<Function>
  		<name>arrid</name>
  		<replaceName>ArrId</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_arrid</name>
  		<replaceName>ArrId</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_arrid</name>
  		<replaceName>ArrId</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_arrid</name>
  		<replaceName>ArrId</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>arrid_size</name>
  		<replaceName>ArrId</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 arrid(int index) const;
  inline void set_arrid(int index, ::google::protobuf::uint32 value);
  inline void add_arrid(::google::protobuf::uint32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      arrid() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_arrid();

  // @@protoc_insertion_point(class_scope:pb.TActPasswordActEnterRsp)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > arrid_;
  friend void  protobuf_AddDesc_net_2fActPasswordAct_2eproto();
  friend void protobuf_AssignDesc_net_2fActPasswordAct_2eproto();
  friend void protobuf_ShutdownFile_net_2fActPasswordAct_2eproto();

  void InitAsDefaultInstance();
  static TActPasswordActEnterRsp* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TActPasswordActActiveReq</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/ActPasswordAct.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TActPasswordActActiveReq : public ::google::protobuf::Message {
 public:
  TActPasswordActActiveReq();
  virtual ~TActPasswordActActiveReq();

  TActPasswordActActiveReq(const TActPasswordActActiveReq& from);

  inline TActPasswordActActiveReq& operator=(const TActPasswordActActiveReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TActPasswordActActiveReq& default_instance();

  void Swap(TActPasswordActActiveReq* other);

  // implements Message ----------------------------------------------

  TActPasswordActActiveReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TActPasswordActActiveReq& from);
  void MergeFrom(const TActPasswordActActiveReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string StrMsg = 1;
  inline bool has_strmsg() const;
  inline void clear_strmsg();
  static const int kStrMsgFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TActPasswordActActiveReq</name>
  	<Function>
  		<name>strmsg</name>
  		<replaceName>StrMsg</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_strmsg</name>
  		<replaceName>StrMsg</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_strmsg</name>
  		<replaceName>StrMsg</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::std::string& strmsg() const;
  inline void set_strmsg(const ::std::string& value);
  inline void set_strmsg(const char* value);
  inline void set_strmsg(const char* value, size_t size);
  inline ::std::string* mutable_strmsg();
  inline ::std::string* release_strmsg();
  inline void set_allocated_strmsg(::std::string* strmsg);

  // @@protoc_insertion_point(class_scope:pb.TActPasswordActActiveReq)
 private:
  inline void set_has_strmsg();
  inline void clear_has_strmsg();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* strmsg_;
  friend void  protobuf_AddDesc_net_2fActPasswordAct_2eproto();
  friend void protobuf_AssignDesc_net_2fActPasswordAct_2eproto();
  friend void protobuf_ShutdownFile_net_2fActPasswordAct_2eproto();

  void InitAsDefaultInstance();
  static TActPasswordActActiveReq* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TActPasswordActActiveRsp</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/ActPasswordAct.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TActPasswordActActiveRsp : public ::google::protobuf::Message {
 public:
  TActPasswordActActiveRsp();
  virtual ~TActPasswordActActiveRsp();

  TActPasswordActActiveRsp(const TActPasswordActActiveRsp& from);

  inline TActPasswordActActiveRsp& operator=(const TActPasswordActActiveRsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TActPasswordActActiveRsp& default_instance();

  void Swap(TActPasswordActActiveRsp* other);

  // implements Message ----------------------------------------------

  TActPasswordActActiveRsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TActPasswordActActiveRsp& from);
  void MergeFrom(const TActPasswordActActiveRsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 ErrCode = 1;
  inline bool has_errcode() const;
  inline void clear_errcode();
  static const int kErrCodeFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TActPasswordActActiveRsp</name>
  	<Function>
  		<name>errcode</name>
  		<replaceName>ErrCode</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_errcode</name>
  		<replaceName>ErrCode</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_errcode</name>
  		<replaceName>ErrCode</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 errcode() const;
  inline void set_errcode(::google::protobuf::uint32 value);

  // optional uint32 Id = 2;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TActPasswordActActiveRsp</name>
  	<Function>
  		<name>id</name>
  		<replaceName>Id</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_id</name>
  		<replaceName>Id</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_id</name>
  		<replaceName>Id</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 id() const;
  inline void set_id(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:pb.TActPasswordActActiveRsp)
 private:
  inline void set_has_errcode();
  inline void clear_has_errcode();
  inline void set_has_id();
  inline void clear_has_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 errcode_;
  ::google::protobuf::uint32 id_;
  friend void  protobuf_AddDesc_net_2fActPasswordAct_2eproto();
  friend void protobuf_AssignDesc_net_2fActPasswordAct_2eproto();
  friend void protobuf_ShutdownFile_net_2fActPasswordAct_2eproto();

  void InitAsDefaultInstance();
  static TActPasswordActActiveRsp* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TActPasswordActActiveByItemItemInfo</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/ActPasswordAct.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TActPasswordActActiveByItemItemInfo : public ::google::protobuf::Message {
 public:
  TActPasswordActActiveByItemItemInfo();
  virtual ~TActPasswordActActiveByItemItemInfo();

  TActPasswordActActiveByItemItemInfo(const TActPasswordActActiveByItemItemInfo& from);

  inline TActPasswordActActiveByItemItemInfo& operator=(const TActPasswordActActiveByItemItemInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TActPasswordActActiveByItemItemInfo& default_instance();

  void Swap(TActPasswordActActiveByItemItemInfo* other);

  // implements Message ----------------------------------------------

  TActPasswordActActiveByItemItemInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TActPasswordActActiveByItemItemInfo& from);
  void MergeFrom(const TActPasswordActActiveByItemItemInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 Tid = 1;
  inline bool has_tid() const;
  inline void clear_tid();
  static const int kTidFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TActPasswordActActiveByItemItemInfo</name>
  	<Function>
  		<name>tid</name>
  		<replaceName>Tid</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_tid</name>
  		<replaceName>Tid</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_tid</name>
  		<replaceName>Tid</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 tid() const;
  inline void set_tid(::google::protobuf::uint32 value);

  // optional uint32 Num = 2;
  inline bool has_num() const;
  inline void clear_num();
  static const int kNumFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TActPasswordActActiveByItemItemInfo</name>
  	<Function>
  		<name>num</name>
  		<replaceName>Num</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_num</name>
  		<replaceName>Num</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_num</name>
  		<replaceName>Num</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 num() const;
  inline void set_num(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:pb.TActPasswordActActiveByItemItemInfo)
 private:
  inline void set_has_tid();
  inline void clear_has_tid();
  inline void set_has_num();
  inline void clear_has_num();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 tid_;
  ::google::protobuf::uint32 num_;
  friend void  protobuf_AddDesc_net_2fActPasswordAct_2eproto();
  friend void protobuf_AssignDesc_net_2fActPasswordAct_2eproto();
  friend void protobuf_ShutdownFile_net_2fActPasswordAct_2eproto();

  void InitAsDefaultInstance();
  static TActPasswordActActiveByItemItemInfo* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TActPasswordActActiveByItemReq</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/ActPasswordAct.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TActPasswordActActiveByItemReq : public ::google::protobuf::Message {
 public:
  TActPasswordActActiveByItemReq();
  virtual ~TActPasswordActActiveByItemReq();

  TActPasswordActActiveByItemReq(const TActPasswordActActiveByItemReq& from);

  inline TActPasswordActActiveByItemReq& operator=(const TActPasswordActActiveByItemReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TActPasswordActActiveByItemReq& default_instance();

  void Swap(TActPasswordActActiveByItemReq* other);

  // implements Message ----------------------------------------------

  TActPasswordActActiveByItemReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TActPasswordActActiveByItemReq& from);
  void MergeFrom(const TActPasswordActActiveByItemReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .pb.TActPasswordActActiveByItemItemInfo ArrItemInfo = 1;
  inline int arriteminfo_size() const;
  inline void clear_arriteminfo();
  static const int kArrItemInfoFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TActPasswordActActiveByItemReq</name>
  	<Function>
  		<name>arriteminfo</name>
  		<replaceName>ArrItemInfo</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_arriteminfo</name>
  		<replaceName>ArrItemInfo</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_arriteminfo</name>
  		<replaceName>ArrItemInfo</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_arriteminfo</name>
  		<replaceName>ArrItemInfo</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>arriteminfo_size</name>
  		<replaceName>ArrItemInfo</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TActPasswordActActiveByItemItemInfo& arriteminfo(int index) const;
  inline ::pb::TActPasswordActActiveByItemItemInfo* mutable_arriteminfo(int index);
  inline ::pb::TActPasswordActActiveByItemItemInfo* add_arriteminfo();
  inline const ::google::protobuf::RepeatedPtrField< ::pb::TActPasswordActActiveByItemItemInfo >&
      arriteminfo() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb::TActPasswordActActiveByItemItemInfo >*
      mutable_arriteminfo();

  // @@protoc_insertion_point(class_scope:pb.TActPasswordActActiveByItemReq)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::pb::TActPasswordActActiveByItemItemInfo > arriteminfo_;
  friend void  protobuf_AddDesc_net_2fActPasswordAct_2eproto();
  friend void protobuf_AssignDesc_net_2fActPasswordAct_2eproto();
  friend void protobuf_ShutdownFile_net_2fActPasswordAct_2eproto();

  void InitAsDefaultInstance();
  static TActPasswordActActiveByItemReq* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TActPasswordActActiveByItemRsp</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/ActPasswordAct.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TActPasswordActActiveByItemRsp : public ::google::protobuf::Message {
 public:
  TActPasswordActActiveByItemRsp();
  virtual ~TActPasswordActActiveByItemRsp();

  TActPasswordActActiveByItemRsp(const TActPasswordActActiveByItemRsp& from);

  inline TActPasswordActActiveByItemRsp& operator=(const TActPasswordActActiveByItemRsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TActPasswordActActiveByItemRsp& default_instance();

  void Swap(TActPasswordActActiveByItemRsp* other);

  // implements Message ----------------------------------------------

  TActPasswordActActiveByItemRsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TActPasswordActActiveByItemRsp& from);
  void MergeFrom(const TActPasswordActActiveByItemRsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated uint32 ArrId = 1;
  inline int arrid_size() const;
  inline void clear_arrid();
  static const int kArrIdFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TActPasswordActActiveByItemRsp</name>
  	<Function>
  		<name>arrid</name>
  		<replaceName>ArrId</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_arrid</name>
  		<replaceName>ArrId</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_arrid</name>
  		<replaceName>ArrId</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_arrid</name>
  		<replaceName>ArrId</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>arrid_size</name>
  		<replaceName>ArrId</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 arrid(int index) const;
  inline void set_arrid(int index, ::google::protobuf::uint32 value);
  inline void add_arrid(::google::protobuf::uint32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      arrid() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_arrid();

  // @@protoc_insertion_point(class_scope:pb.TActPasswordActActiveByItemRsp)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > arrid_;
  friend void  protobuf_AddDesc_net_2fActPasswordAct_2eproto();
  friend void protobuf_AssignDesc_net_2fActPasswordAct_2eproto();
  friend void protobuf_ShutdownFile_net_2fActPasswordAct_2eproto();

  void InitAsDefaultInstance();
  static TActPasswordActActiveByItemRsp* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TActPasswordActNotify</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/ActPasswordAct.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TActPasswordActNotify : public ::google::protobuf::Message {
 public:
  TActPasswordActNotify();
  virtual ~TActPasswordActNotify();

  TActPasswordActNotify(const TActPasswordActNotify& from);

  inline TActPasswordActNotify& operator=(const TActPasswordActNotify& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TActPasswordActNotify& default_instance();

  void Swap(TActPasswordActNotify* other);

  // implements Message ----------------------------------------------

  TActPasswordActNotify* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TActPasswordActNotify& from);
  void MergeFrom(const TActPasswordActNotify& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated uint32 ArrMid = 1;
  inline int arrmid_size() const;
  inline void clear_arrmid();
  static const int kArrMidFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TActPasswordActNotify</name>
  	<Function>
  		<name>arrmid</name>
  		<replaceName>ArrMid</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_arrmid</name>
  		<replaceName>ArrMid</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_arrmid</name>
  		<replaceName>ArrMid</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_arrmid</name>
  		<replaceName>ArrMid</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>arrmid_size</name>
  		<replaceName>ArrMid</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 arrmid(int index) const;
  inline void set_arrmid(int index, ::google::protobuf::uint32 value);
  inline void add_arrmid(::google::protobuf::uint32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      arrmid() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_arrmid();

  // @@protoc_insertion_point(class_scope:pb.TActPasswordActNotify)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > arrmid_;
  friend void  protobuf_AddDesc_net_2fActPasswordAct_2eproto();
  friend void protobuf_AssignDesc_net_2fActPasswordAct_2eproto();
  friend void protobuf_ShutdownFile_net_2fActPasswordAct_2eproto();

  void InitAsDefaultInstance();
  static TActPasswordActNotify* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TActPasswordActReceiveRewardReq</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/ActPasswordAct.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TActPasswordActReceiveRewardReq : public ::google::protobuf::Message {
 public:
  TActPasswordActReceiveRewardReq();
  virtual ~TActPasswordActReceiveRewardReq();

  TActPasswordActReceiveRewardReq(const TActPasswordActReceiveRewardReq& from);

  inline TActPasswordActReceiveRewardReq& operator=(const TActPasswordActReceiveRewardReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TActPasswordActReceiveRewardReq& default_instance();

  void Swap(TActPasswordActReceiveRewardReq* other);

  // implements Message ----------------------------------------------

  TActPasswordActReceiveRewardReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TActPasswordActReceiveRewardReq& from);
  void MergeFrom(const TActPasswordActReceiveRewardReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 Id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TActPasswordActReceiveRewardReq</name>
  	<Function>
  		<name>id</name>
  		<replaceName>Id</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_id</name>
  		<replaceName>Id</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_id</name>
  		<replaceName>Id</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 id() const;
  inline void set_id(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:pb.TActPasswordActReceiveRewardReq)
 private:
  inline void set_has_id();
  inline void clear_has_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 id_;
  friend void  protobuf_AddDesc_net_2fActPasswordAct_2eproto();
  friend void protobuf_AssignDesc_net_2fActPasswordAct_2eproto();
  friend void protobuf_ShutdownFile_net_2fActPasswordAct_2eproto();

  void InitAsDefaultInstance();
  static TActPasswordActReceiveRewardReq* default_instance_;
};
// ===================================================================


// ===================================================================

// TActPasswordActGetInfoRsp

// repeated uint32 ArrId = 1;
inline int TActPasswordActGetInfoRsp::arrid_size() const {
  return arrid_.size();
}
inline void TActPasswordActGetInfoRsp::clear_arrid() {
  arrid_.Clear();
}
inline ::google::protobuf::uint32 TActPasswordActGetInfoRsp::arrid(int index) const {
  // @@protoc_insertion_point(field_get:pb.TActPasswordActGetInfoRsp.ArrId)
  return arrid_.Get(index);
}
inline void TActPasswordActGetInfoRsp::set_arrid(int index, ::google::protobuf::uint32 value) {
  arrid_.Set(index, value);
  // @@protoc_insertion_point(field_set:pb.TActPasswordActGetInfoRsp.ArrId)
}
inline void TActPasswordActGetInfoRsp::add_arrid(::google::protobuf::uint32 value) {
  arrid_.Add(value);
  // @@protoc_insertion_point(field_add:pb.TActPasswordActGetInfoRsp.ArrId)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
TActPasswordActGetInfoRsp::arrid() const {
  // @@protoc_insertion_point(field_list:pb.TActPasswordActGetInfoRsp.ArrId)
  return arrid_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
TActPasswordActGetInfoRsp::mutable_arrid() {
  // @@protoc_insertion_point(field_mutable_list:pb.TActPasswordActGetInfoRsp.ArrId)
  return &arrid_;
}

// repeated uint32 ArrRid = 2;
inline int TActPasswordActGetInfoRsp::arrrid_size() const {
  return arrrid_.size();
}
inline void TActPasswordActGetInfoRsp::clear_arrrid() {
  arrrid_.Clear();
}
inline ::google::protobuf::uint32 TActPasswordActGetInfoRsp::arrrid(int index) const {
  // @@protoc_insertion_point(field_get:pb.TActPasswordActGetInfoRsp.ArrRid)
  return arrrid_.Get(index);
}
inline void TActPasswordActGetInfoRsp::set_arrrid(int index, ::google::protobuf::uint32 value) {
  arrrid_.Set(index, value);
  // @@protoc_insertion_point(field_set:pb.TActPasswordActGetInfoRsp.ArrRid)
}
inline void TActPasswordActGetInfoRsp::add_arrrid(::google::protobuf::uint32 value) {
  arrrid_.Add(value);
  // @@protoc_insertion_point(field_add:pb.TActPasswordActGetInfoRsp.ArrRid)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
TActPasswordActGetInfoRsp::arrrid() const {
  // @@protoc_insertion_point(field_list:pb.TActPasswordActGetInfoRsp.ArrRid)
  return arrrid_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
TActPasswordActGetInfoRsp::mutable_arrrid() {
  // @@protoc_insertion_point(field_mutable_list:pb.TActPasswordActGetInfoRsp.ArrRid)
  return &arrrid_;
}

// repeated uint32 ArrRandId = 3;
inline int TActPasswordActGetInfoRsp::arrrandid_size() const {
  return arrrandid_.size();
}
inline void TActPasswordActGetInfoRsp::clear_arrrandid() {
  arrrandid_.Clear();
}
inline ::google::protobuf::uint32 TActPasswordActGetInfoRsp::arrrandid(int index) const {
  // @@protoc_insertion_point(field_get:pb.TActPasswordActGetInfoRsp.ArrRandId)
  return arrrandid_.Get(index);
}
inline void TActPasswordActGetInfoRsp::set_arrrandid(int index, ::google::protobuf::uint32 value) {
  arrrandid_.Set(index, value);
  // @@protoc_insertion_point(field_set:pb.TActPasswordActGetInfoRsp.ArrRandId)
}
inline void TActPasswordActGetInfoRsp::add_arrrandid(::google::protobuf::uint32 value) {
  arrrandid_.Add(value);
  // @@protoc_insertion_point(field_add:pb.TActPasswordActGetInfoRsp.ArrRandId)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
TActPasswordActGetInfoRsp::arrrandid() const {
  // @@protoc_insertion_point(field_list:pb.TActPasswordActGetInfoRsp.ArrRandId)
  return arrrandid_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
TActPasswordActGetInfoRsp::mutable_arrrandid() {
  // @@protoc_insertion_point(field_mutable_list:pb.TActPasswordActGetInfoRsp.ArrRandId)
  return &arrrandid_;
}

// -------------------------------------------------------------------

// TActPasswordActEnterRsp

// repeated uint32 ArrId = 1;
inline int TActPasswordActEnterRsp::arrid_size() const {
  return arrid_.size();
}
inline void TActPasswordActEnterRsp::clear_arrid() {
  arrid_.Clear();
}
inline ::google::protobuf::uint32 TActPasswordActEnterRsp::arrid(int index) const {
  // @@protoc_insertion_point(field_get:pb.TActPasswordActEnterRsp.ArrId)
  return arrid_.Get(index);
}
inline void TActPasswordActEnterRsp::set_arrid(int index, ::google::protobuf::uint32 value) {
  arrid_.Set(index, value);
  // @@protoc_insertion_point(field_set:pb.TActPasswordActEnterRsp.ArrId)
}
inline void TActPasswordActEnterRsp::add_arrid(::google::protobuf::uint32 value) {
  arrid_.Add(value);
  // @@protoc_insertion_point(field_add:pb.TActPasswordActEnterRsp.ArrId)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
TActPasswordActEnterRsp::arrid() const {
  // @@protoc_insertion_point(field_list:pb.TActPasswordActEnterRsp.ArrId)
  return arrid_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
TActPasswordActEnterRsp::mutable_arrid() {
  // @@protoc_insertion_point(field_mutable_list:pb.TActPasswordActEnterRsp.ArrId)
  return &arrid_;
}

// -------------------------------------------------------------------

// TActPasswordActActiveReq

// optional string StrMsg = 1;
inline bool TActPasswordActActiveReq::has_strmsg() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TActPasswordActActiveReq::set_has_strmsg() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TActPasswordActActiveReq::clear_has_strmsg() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TActPasswordActActiveReq::clear_strmsg() {
  if (strmsg_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    strmsg_->clear();
  }
  clear_has_strmsg();
}
inline const ::std::string& TActPasswordActActiveReq::strmsg() const {
  // @@protoc_insertion_point(field_get:pb.TActPasswordActActiveReq.StrMsg)
  return *strmsg_;
}
inline void TActPasswordActActiveReq::set_strmsg(const ::std::string& value) {
  set_has_strmsg();
  if (strmsg_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    strmsg_ = new ::std::string;
  }
  strmsg_->assign(value);
  // @@protoc_insertion_point(field_set:pb.TActPasswordActActiveReq.StrMsg)
}
inline void TActPasswordActActiveReq::set_strmsg(const char* value) {
  set_has_strmsg();
  if (strmsg_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    strmsg_ = new ::std::string;
  }
  strmsg_->assign(value);
  // @@protoc_insertion_point(field_set_char:pb.TActPasswordActActiveReq.StrMsg)
}
inline void TActPasswordActActiveReq::set_strmsg(const char* value, size_t size) {
  set_has_strmsg();
  if (strmsg_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    strmsg_ = new ::std::string;
  }
  strmsg_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:pb.TActPasswordActActiveReq.StrMsg)
}
inline ::std::string* TActPasswordActActiveReq::mutable_strmsg() {
  set_has_strmsg();
  if (strmsg_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    strmsg_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:pb.TActPasswordActActiveReq.StrMsg)
  return strmsg_;
}
inline ::std::string* TActPasswordActActiveReq::release_strmsg() {
  clear_has_strmsg();
  if (strmsg_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = strmsg_;
    strmsg_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void TActPasswordActActiveReq::set_allocated_strmsg(::std::string* strmsg) {
  if (strmsg_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete strmsg_;
  }
  if (strmsg) {
    set_has_strmsg();
    strmsg_ = strmsg;
  } else {
    clear_has_strmsg();
    strmsg_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:pb.TActPasswordActActiveReq.StrMsg)
}

// -------------------------------------------------------------------

// TActPasswordActActiveRsp

// optional uint32 ErrCode = 1;
inline bool TActPasswordActActiveRsp::has_errcode() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TActPasswordActActiveRsp::set_has_errcode() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TActPasswordActActiveRsp::clear_has_errcode() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TActPasswordActActiveRsp::clear_errcode() {
  errcode_ = 0u;
  clear_has_errcode();
}
inline ::google::protobuf::uint32 TActPasswordActActiveRsp::errcode() const {
  // @@protoc_insertion_point(field_get:pb.TActPasswordActActiveRsp.ErrCode)
  return errcode_;
}
inline void TActPasswordActActiveRsp::set_errcode(::google::protobuf::uint32 value) {
  set_has_errcode();
  errcode_ = value;
  // @@protoc_insertion_point(field_set:pb.TActPasswordActActiveRsp.ErrCode)
}

// optional uint32 Id = 2;
inline bool TActPasswordActActiveRsp::has_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TActPasswordActActiveRsp::set_has_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TActPasswordActActiveRsp::clear_has_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TActPasswordActActiveRsp::clear_id() {
  id_ = 0u;
  clear_has_id();
}
inline ::google::protobuf::uint32 TActPasswordActActiveRsp::id() const {
  // @@protoc_insertion_point(field_get:pb.TActPasswordActActiveRsp.Id)
  return id_;
}
inline void TActPasswordActActiveRsp::set_id(::google::protobuf::uint32 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:pb.TActPasswordActActiveRsp.Id)
}

// -------------------------------------------------------------------

// TActPasswordActActiveByItemItemInfo

// optional uint32 Tid = 1;
inline bool TActPasswordActActiveByItemItemInfo::has_tid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TActPasswordActActiveByItemItemInfo::set_has_tid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TActPasswordActActiveByItemItemInfo::clear_has_tid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TActPasswordActActiveByItemItemInfo::clear_tid() {
  tid_ = 0u;
  clear_has_tid();
}
inline ::google::protobuf::uint32 TActPasswordActActiveByItemItemInfo::tid() const {
  // @@protoc_insertion_point(field_get:pb.TActPasswordActActiveByItemItemInfo.Tid)
  return tid_;
}
inline void TActPasswordActActiveByItemItemInfo::set_tid(::google::protobuf::uint32 value) {
  set_has_tid();
  tid_ = value;
  // @@protoc_insertion_point(field_set:pb.TActPasswordActActiveByItemItemInfo.Tid)
}

// optional uint32 Num = 2;
inline bool TActPasswordActActiveByItemItemInfo::has_num() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TActPasswordActActiveByItemItemInfo::set_has_num() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TActPasswordActActiveByItemItemInfo::clear_has_num() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TActPasswordActActiveByItemItemInfo::clear_num() {
  num_ = 0u;
  clear_has_num();
}
inline ::google::protobuf::uint32 TActPasswordActActiveByItemItemInfo::num() const {
  // @@protoc_insertion_point(field_get:pb.TActPasswordActActiveByItemItemInfo.Num)
  return num_;
}
inline void TActPasswordActActiveByItemItemInfo::set_num(::google::protobuf::uint32 value) {
  set_has_num();
  num_ = value;
  // @@protoc_insertion_point(field_set:pb.TActPasswordActActiveByItemItemInfo.Num)
}

// -------------------------------------------------------------------

// TActPasswordActActiveByItemReq

// repeated .pb.TActPasswordActActiveByItemItemInfo ArrItemInfo = 1;
inline int TActPasswordActActiveByItemReq::arriteminfo_size() const {
  return arriteminfo_.size();
}
inline void TActPasswordActActiveByItemReq::clear_arriteminfo() {
  arriteminfo_.Clear();
}
inline const ::pb::TActPasswordActActiveByItemItemInfo& TActPasswordActActiveByItemReq::arriteminfo(int index) const {
  // @@protoc_insertion_point(field_get:pb.TActPasswordActActiveByItemReq.ArrItemInfo)
  return arriteminfo_.Get(index);
}
inline ::pb::TActPasswordActActiveByItemItemInfo* TActPasswordActActiveByItemReq::mutable_arriteminfo(int index) {
  // @@protoc_insertion_point(field_mutable:pb.TActPasswordActActiveByItemReq.ArrItemInfo)
  return arriteminfo_.Mutable(index);
}
inline ::pb::TActPasswordActActiveByItemItemInfo* TActPasswordActActiveByItemReq::add_arriteminfo() {
  // @@protoc_insertion_point(field_add:pb.TActPasswordActActiveByItemReq.ArrItemInfo)
  return arriteminfo_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::TActPasswordActActiveByItemItemInfo >&
TActPasswordActActiveByItemReq::arriteminfo() const {
  // @@protoc_insertion_point(field_list:pb.TActPasswordActActiveByItemReq.ArrItemInfo)
  return arriteminfo_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb::TActPasswordActActiveByItemItemInfo >*
TActPasswordActActiveByItemReq::mutable_arriteminfo() {
  // @@protoc_insertion_point(field_mutable_list:pb.TActPasswordActActiveByItemReq.ArrItemInfo)
  return &arriteminfo_;
}

// -------------------------------------------------------------------

// TActPasswordActActiveByItemRsp

// repeated uint32 ArrId = 1;
inline int TActPasswordActActiveByItemRsp::arrid_size() const {
  return arrid_.size();
}
inline void TActPasswordActActiveByItemRsp::clear_arrid() {
  arrid_.Clear();
}
inline ::google::protobuf::uint32 TActPasswordActActiveByItemRsp::arrid(int index) const {
  // @@protoc_insertion_point(field_get:pb.TActPasswordActActiveByItemRsp.ArrId)
  return arrid_.Get(index);
}
inline void TActPasswordActActiveByItemRsp::set_arrid(int index, ::google::protobuf::uint32 value) {
  arrid_.Set(index, value);
  // @@protoc_insertion_point(field_set:pb.TActPasswordActActiveByItemRsp.ArrId)
}
inline void TActPasswordActActiveByItemRsp::add_arrid(::google::protobuf::uint32 value) {
  arrid_.Add(value);
  // @@protoc_insertion_point(field_add:pb.TActPasswordActActiveByItemRsp.ArrId)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
TActPasswordActActiveByItemRsp::arrid() const {
  // @@protoc_insertion_point(field_list:pb.TActPasswordActActiveByItemRsp.ArrId)
  return arrid_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
TActPasswordActActiveByItemRsp::mutable_arrid() {
  // @@protoc_insertion_point(field_mutable_list:pb.TActPasswordActActiveByItemRsp.ArrId)
  return &arrid_;
}

// -------------------------------------------------------------------

// TActPasswordActNotify

// repeated uint32 ArrMid = 1;
inline int TActPasswordActNotify::arrmid_size() const {
  return arrmid_.size();
}
inline void TActPasswordActNotify::clear_arrmid() {
  arrmid_.Clear();
}
inline ::google::protobuf::uint32 TActPasswordActNotify::arrmid(int index) const {
  // @@protoc_insertion_point(field_get:pb.TActPasswordActNotify.ArrMid)
  return arrmid_.Get(index);
}
inline void TActPasswordActNotify::set_arrmid(int index, ::google::protobuf::uint32 value) {
  arrmid_.Set(index, value);
  // @@protoc_insertion_point(field_set:pb.TActPasswordActNotify.ArrMid)
}
inline void TActPasswordActNotify::add_arrmid(::google::protobuf::uint32 value) {
  arrmid_.Add(value);
  // @@protoc_insertion_point(field_add:pb.TActPasswordActNotify.ArrMid)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
TActPasswordActNotify::arrmid() const {
  // @@protoc_insertion_point(field_list:pb.TActPasswordActNotify.ArrMid)
  return arrmid_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
TActPasswordActNotify::mutable_arrmid() {
  // @@protoc_insertion_point(field_mutable_list:pb.TActPasswordActNotify.ArrMid)
  return &arrmid_;
}

// -------------------------------------------------------------------

// TActPasswordActReceiveRewardReq

// optional uint32 Id = 1;
inline bool TActPasswordActReceiveRewardReq::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TActPasswordActReceiveRewardReq::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TActPasswordActReceiveRewardReq::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TActPasswordActReceiveRewardReq::clear_id() {
  id_ = 0u;
  clear_has_id();
}
inline ::google::protobuf::uint32 TActPasswordActReceiveRewardReq::id() const {
  // @@protoc_insertion_point(field_get:pb.TActPasswordActReceiveRewardReq.Id)
  return id_;
}
inline void TActPasswordActReceiveRewardReq::set_id(::google::protobuf::uint32 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:pb.TActPasswordActReceiveRewardReq.Id)
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace pb

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_net_2fActPasswordAct_2eproto__INCLUDED
