// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: net/Arena.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "net/Arena.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace pb {

namespace {

const ::google::protobuf::Descriptor* TArenaUser_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TArenaUser_reflection_ = NULL;
const ::google::protobuf::Descriptor* TArenaRankInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TArenaRankInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* TArenaReport_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TArenaReport_reflection_ = NULL;
const ::google::protobuf::Descriptor* TArenaGetInfoRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TArenaGetInfoRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* TArenaGetRankListReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TArenaGetRankListReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* TArenaGetRankListRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TArenaGetRankListRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* TArenaGetBattleReportsRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TArenaGetBattleReportsRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* TArenaRefreshPlayerListRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TArenaRefreshPlayerListRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* TArenaChallengeReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TArenaChallengeReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* TArenaChallengeRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TArenaChallengeRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* TArenaQuickChallengeReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TArenaQuickChallengeReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* TArenaQuickChallengeReward_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TArenaQuickChallengeReward_reflection_ = NULL;
const ::google::protobuf::Descriptor* TArenaQuickChallengeRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TArenaQuickChallengeRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* TArenaRevengeReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TArenaRevengeReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* TArenaRevengeRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TArenaRevengeRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* TArenaBuyChallengeNumReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TArenaBuyChallengeNumReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* TArenaUpdateArenaDataNotify_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TArenaUpdateArenaDataNotify_reflection_ = NULL;
const ::google::protobuf::Descriptor* TArenaExchangeReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TArenaExchangeReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* TArenaExchangeRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TArenaExchangeRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* TArenaRecordInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TArenaRecordInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* TArenaGetTopRecordsRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TArenaGetTopRecordsRsp_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_net_2fArena_2eproto() {
  protobuf_AddDesc_net_2fArena_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "net/Arena.proto");
  GOOGLE_CHECK(file != NULL);
  TArenaUser_descriptor_ = file->message_type(0);
  static const int TArenaUser_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TArenaUser, uid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TArenaUser, position_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TArenaUser, uname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TArenaUser, level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TArenaUser, fightforce_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TArenaUser, htid_),
  };
  TArenaUser_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TArenaUser_descriptor_,
      TArenaUser::default_instance_,
      TArenaUser_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TArenaUser, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TArenaUser, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TArenaUser));
  TArenaRankInfo_descriptor_ = file->message_type(1);
  static const int TArenaRankInfo_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TArenaRankInfo, userinfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TArenaRankInfo, position_),
  };
  TArenaRankInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TArenaRankInfo_descriptor_,
      TArenaRankInfo::default_instance_,
      TArenaRankInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TArenaRankInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TArenaRankInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TArenaRankInfo));
  TArenaReport_descriptor_ = file->message_type(2);
  static const int TArenaReport_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TArenaReport, userinfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TArenaReport, iswin_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TArenaReport, reportid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TArenaReport, isattack_),
  };
  TArenaReport_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TArenaReport_descriptor_,
      TArenaReport::default_instance_,
      TArenaReport_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TArenaReport, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TArenaReport, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TArenaReport));
  TArenaGetInfoRsp_descriptor_ = file->message_type(3);
  static const int TArenaGetInfoRsp_offsets_[12] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TArenaGetInfoRsp, position_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TArenaGetInfoRsp, bestposition_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TArenaGetInfoRsp, challengenum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TArenaGetInfoRsp, buynum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TArenaGetInfoRsp, buychallengenum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TArenaGetInfoRsp, refreshnum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TArenaGetInfoRsp, rewardtime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TArenaGetInfoRsp, opponentarray_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TArenaGetInfoRsp, toparray_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TArenaGetInfoRsp, challengetotal_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TArenaGetInfoRsp, wintotal_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TArenaGetInfoRsp, buyarray_),
  };
  TArenaGetInfoRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TArenaGetInfoRsp_descriptor_,
      TArenaGetInfoRsp::default_instance_,
      TArenaGetInfoRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TArenaGetInfoRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TArenaGetInfoRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TArenaGetInfoRsp));
  TArenaGetRankListReq_descriptor_ = file->message_type(4);
  static const int TArenaGetRankListReq_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TArenaGetRankListReq, offset_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TArenaGetRankListReq, limit_),
  };
  TArenaGetRankListReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TArenaGetRankListReq_descriptor_,
      TArenaGetRankListReq::default_instance_,
      TArenaGetRankListReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TArenaGetRankListReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TArenaGetRankListReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TArenaGetRankListReq));
  TArenaGetRankListRsp_descriptor_ = file->message_type(5);
  static const int TArenaGetRankListRsp_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TArenaGetRankListRsp, rankarr_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TArenaGetRankListRsp, myrank_),
  };
  TArenaGetRankListRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TArenaGetRankListRsp_descriptor_,
      TArenaGetRankListRsp::default_instance_,
      TArenaGetRankListRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TArenaGetRankListRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TArenaGetRankListRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TArenaGetRankListRsp));
  TArenaGetBattleReportsRsp_descriptor_ = file->message_type(6);
  static const int TArenaGetBattleReportsRsp_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TArenaGetBattleReportsRsp, reportarray_),
  };
  TArenaGetBattleReportsRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TArenaGetBattleReportsRsp_descriptor_,
      TArenaGetBattleReportsRsp::default_instance_,
      TArenaGetBattleReportsRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TArenaGetBattleReportsRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TArenaGetBattleReportsRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TArenaGetBattleReportsRsp));
  TArenaRefreshPlayerListRsp_descriptor_ = file->message_type(7);
  static const int TArenaRefreshPlayerListRsp_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TArenaRefreshPlayerListRsp, opponentarray_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TArenaRefreshPlayerListRsp, toparray_),
  };
  TArenaRefreshPlayerListRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TArenaRefreshPlayerListRsp_descriptor_,
      TArenaRefreshPlayerListRsp::default_instance_,
      TArenaRefreshPlayerListRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TArenaRefreshPlayerListRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TArenaRefreshPlayerListRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TArenaRefreshPlayerListRsp));
  TArenaChallengeReq_descriptor_ = file->message_type(8);
  static const int TArenaChallengeReq_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TArenaChallengeReq, attackpos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TArenaChallengeReq, defendpos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TArenaChallengeReq, defenduid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TArenaChallengeReq, hidarray_),
  };
  TArenaChallengeReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TArenaChallengeReq_descriptor_,
      TArenaChallengeReq::default_instance_,
      TArenaChallengeReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TArenaChallengeReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TArenaChallengeReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TArenaChallengeReq));
  TArenaChallengeRsp_descriptor_ = file->message_type(9);
  static const int TArenaChallengeRsp_offsets_[10] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TArenaChallengeRsp, refreshoppt_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TArenaChallengeRsp, position_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TArenaChallengeRsp, iswin_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TArenaChallengeRsp, fightret_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TArenaChallengeRsp, toparray_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TArenaChallengeRsp, opponentarray_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TArenaChallengeRsp, breakoutreward_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TArenaChallengeRsp, userexp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TArenaChallengeRsp, coinreward_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TArenaChallengeRsp, flopreward_),
  };
  TArenaChallengeRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TArenaChallengeRsp_descriptor_,
      TArenaChallengeRsp::default_instance_,
      TArenaChallengeRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TArenaChallengeRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TArenaChallengeRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TArenaChallengeRsp));
  TArenaQuickChallengeReq_descriptor_ = file->message_type(10);
  static const int TArenaQuickChallengeReq_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TArenaQuickChallengeReq, attackpos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TArenaQuickChallengeReq, defendpos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TArenaQuickChallengeReq, defenduid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TArenaQuickChallengeReq, num_),
  };
  TArenaQuickChallengeReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TArenaQuickChallengeReq_descriptor_,
      TArenaQuickChallengeReq::default_instance_,
      TArenaQuickChallengeReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TArenaQuickChallengeReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TArenaQuickChallengeReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TArenaQuickChallengeReq));
  TArenaQuickChallengeReward_descriptor_ = file->message_type(11);
  static const int TArenaQuickChallengeReward_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TArenaQuickChallengeReward, userexp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TArenaQuickChallengeReward, coinreward_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TArenaQuickChallengeReward, flopreward_),
  };
  TArenaQuickChallengeReward_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TArenaQuickChallengeReward_descriptor_,
      TArenaQuickChallengeReward::default_instance_,
      TArenaQuickChallengeReward_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TArenaQuickChallengeReward, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TArenaQuickChallengeReward, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TArenaQuickChallengeReward));
  TArenaQuickChallengeRsp_descriptor_ = file->message_type(12);
  static const int TArenaQuickChallengeRsp_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TArenaQuickChallengeRsp, refreshoppt_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TArenaQuickChallengeRsp, position_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TArenaQuickChallengeRsp, opponentarray_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TArenaQuickChallengeRsp, toparray_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TArenaQuickChallengeRsp, rewardarr_),
  };
  TArenaQuickChallengeRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TArenaQuickChallengeRsp_descriptor_,
      TArenaQuickChallengeRsp::default_instance_,
      TArenaQuickChallengeRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TArenaQuickChallengeRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TArenaQuickChallengeRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TArenaQuickChallengeRsp));
  TArenaRevengeReq_descriptor_ = file->message_type(13);
  static const int TArenaRevengeReq_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TArenaRevengeReq, enemyuid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TArenaRevengeReq, hidarray_),
  };
  TArenaRevengeReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TArenaRevengeReq_descriptor_,
      TArenaRevengeReq::default_instance_,
      TArenaRevengeReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TArenaRevengeReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TArenaRevengeReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TArenaRevengeReq));
  TArenaRevengeRsp_descriptor_ = file->message_type(14);
  static const int TArenaRevengeRsp_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TArenaRevengeRsp, attackpos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TArenaRevengeRsp, enemypos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TArenaRevengeRsp, enemyuid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TArenaRevengeRsp, challengersp_),
  };
  TArenaRevengeRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TArenaRevengeRsp_descriptor_,
      TArenaRevengeRsp::default_instance_,
      TArenaRevengeRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TArenaRevengeRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TArenaRevengeRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TArenaRevengeRsp));
  TArenaBuyChallengeNumReq_descriptor_ = file->message_type(15);
  static const int TArenaBuyChallengeNumReq_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TArenaBuyChallengeNumReq, buynum_),
  };
  TArenaBuyChallengeNumReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TArenaBuyChallengeNumReq_descriptor_,
      TArenaBuyChallengeNumReq::default_instance_,
      TArenaBuyChallengeNumReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TArenaBuyChallengeNumReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TArenaBuyChallengeNumReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TArenaBuyChallengeNumReq));
  TArenaUpdateArenaDataNotify_descriptor_ = file->message_type(16);
  static const int TArenaUpdateArenaDataNotify_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TArenaUpdateArenaDataNotify, position_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TArenaUpdateArenaDataNotify, opponentarray_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TArenaUpdateArenaDataNotify, toparray_),
  };
  TArenaUpdateArenaDataNotify_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TArenaUpdateArenaDataNotify_descriptor_,
      TArenaUpdateArenaDataNotify::default_instance_,
      TArenaUpdateArenaDataNotify_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TArenaUpdateArenaDataNotify, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TArenaUpdateArenaDataNotify, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TArenaUpdateArenaDataNotify));
  TArenaExchangeReq_descriptor_ = file->message_type(17);
  static const int TArenaExchangeReq_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TArenaExchangeReq, id_),
  };
  TArenaExchangeReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TArenaExchangeReq_descriptor_,
      TArenaExchangeReq::default_instance_,
      TArenaExchangeReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TArenaExchangeReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TArenaExchangeReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TArenaExchangeReq));
  TArenaExchangeRsp_descriptor_ = file->message_type(18);
  static const int TArenaExchangeRsp_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TArenaExchangeRsp, rewardarray_),
  };
  TArenaExchangeRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TArenaExchangeRsp_descriptor_,
      TArenaExchangeRsp::default_instance_,
      TArenaExchangeRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TArenaExchangeRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TArenaExchangeRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TArenaExchangeRsp));
  TArenaRecordInfo_descriptor_ = file->message_type(19);
  static const int TArenaRecordInfo_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TArenaRecordInfo, attackuserinfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TArenaRecordInfo, defenduserinfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TArenaRecordInfo, attackpos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TArenaRecordInfo, defendpos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TArenaRecordInfo, iswin_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TArenaRecordInfo, recordid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TArenaRecordInfo, recordtime_),
  };
  TArenaRecordInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TArenaRecordInfo_descriptor_,
      TArenaRecordInfo::default_instance_,
      TArenaRecordInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TArenaRecordInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TArenaRecordInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TArenaRecordInfo));
  TArenaGetTopRecordsRsp_descriptor_ = file->message_type(20);
  static const int TArenaGetTopRecordsRsp_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TArenaGetTopRecordsRsp, recordarray_),
  };
  TArenaGetTopRecordsRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TArenaGetTopRecordsRsp_descriptor_,
      TArenaGetTopRecordsRsp::default_instance_,
      TArenaGetTopRecordsRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TArenaGetTopRecordsRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TArenaGetTopRecordsRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TArenaGetTopRecordsRsp));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_net_2fArena_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TArenaUser_descriptor_, &TArenaUser::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TArenaRankInfo_descriptor_, &TArenaRankInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TArenaReport_descriptor_, &TArenaReport::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TArenaGetInfoRsp_descriptor_, &TArenaGetInfoRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TArenaGetRankListReq_descriptor_, &TArenaGetRankListReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TArenaGetRankListRsp_descriptor_, &TArenaGetRankListRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TArenaGetBattleReportsRsp_descriptor_, &TArenaGetBattleReportsRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TArenaRefreshPlayerListRsp_descriptor_, &TArenaRefreshPlayerListRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TArenaChallengeReq_descriptor_, &TArenaChallengeReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TArenaChallengeRsp_descriptor_, &TArenaChallengeRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TArenaQuickChallengeReq_descriptor_, &TArenaQuickChallengeReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TArenaQuickChallengeReward_descriptor_, &TArenaQuickChallengeReward::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TArenaQuickChallengeRsp_descriptor_, &TArenaQuickChallengeRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TArenaRevengeReq_descriptor_, &TArenaRevengeReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TArenaRevengeRsp_descriptor_, &TArenaRevengeRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TArenaBuyChallengeNumReq_descriptor_, &TArenaBuyChallengeNumReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TArenaUpdateArenaDataNotify_descriptor_, &TArenaUpdateArenaDataNotify::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TArenaExchangeReq_descriptor_, &TArenaExchangeReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TArenaExchangeRsp_descriptor_, &TArenaExchangeRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TArenaRecordInfo_descriptor_, &TArenaRecordInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TArenaGetTopRecordsRsp_descriptor_, &TArenaGetTopRecordsRsp::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_net_2fArena_2eproto() {
  delete TArenaUser::default_instance_;
  delete TArenaUser_reflection_;
  delete TArenaRankInfo::default_instance_;
  delete TArenaRankInfo_reflection_;
  delete TArenaReport::default_instance_;
  delete TArenaReport_reflection_;
  delete TArenaGetInfoRsp::default_instance_;
  delete TArenaGetInfoRsp_reflection_;
  delete TArenaGetRankListReq::default_instance_;
  delete TArenaGetRankListReq_reflection_;
  delete TArenaGetRankListRsp::default_instance_;
  delete TArenaGetRankListRsp_reflection_;
  delete TArenaGetBattleReportsRsp::default_instance_;
  delete TArenaGetBattleReportsRsp_reflection_;
  delete TArenaRefreshPlayerListRsp::default_instance_;
  delete TArenaRefreshPlayerListRsp_reflection_;
  delete TArenaChallengeReq::default_instance_;
  delete TArenaChallengeReq_reflection_;
  delete TArenaChallengeRsp::default_instance_;
  delete TArenaChallengeRsp_reflection_;
  delete TArenaQuickChallengeReq::default_instance_;
  delete TArenaQuickChallengeReq_reflection_;
  delete TArenaQuickChallengeReward::default_instance_;
  delete TArenaQuickChallengeReward_reflection_;
  delete TArenaQuickChallengeRsp::default_instance_;
  delete TArenaQuickChallengeRsp_reflection_;
  delete TArenaRevengeReq::default_instance_;
  delete TArenaRevengeReq_reflection_;
  delete TArenaRevengeRsp::default_instance_;
  delete TArenaRevengeRsp_reflection_;
  delete TArenaBuyChallengeNumReq::default_instance_;
  delete TArenaBuyChallengeNumReq_reflection_;
  delete TArenaUpdateArenaDataNotify::default_instance_;
  delete TArenaUpdateArenaDataNotify_reflection_;
  delete TArenaExchangeReq::default_instance_;
  delete TArenaExchangeReq_reflection_;
  delete TArenaExchangeRsp::default_instance_;
  delete TArenaExchangeRsp_reflection_;
  delete TArenaRecordInfo::default_instance_;
  delete TArenaRecordInfo_reflection_;
  delete TArenaGetTopRecordsRsp::default_instance_;
  delete TArenaGetTopRecordsRsp_reflection_;
}

void protobuf_AddDesc_net_2fArena_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::pb::protobuf_AddDesc_net_2fCommonReward_2eproto();
  ::pb::protobuf_AddDesc_net_2fBattle_2eproto();
  ::pb::protobuf_AddDesc_net_2fHero_2eproto();
  ::pb::protobuf_AddDesc_net_2fUser_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\017net/Arena.proto\022\002pb\032\026net/CommonReward."
    "proto\032\020net/Battle.proto\032\016net/Hero.proto\032"
    "\016net/User.proto\"k\n\nTArenaUser\022\013\n\003Uid\030\001 \001"
    "(\004\022\020\n\010Position\030\002 \001(\r\022\r\n\005Uname\030\003 \001(\t\022\r\n\005L"
    "evel\030\004 \001(\r\022\022\n\nFightForce\030\005 \001(\004\022\014\n\004Htid\030\006"
    " \001(\r\"I\n\016TArenaRankInfo\022%\n\010UserInfo\030\001 \001(\013"
    "2\023.pb.TUserSimpleInfo\022\020\n\010Position\030\002 \001(\r\""
    "h\n\014TArenaReport\022%\n\010UserInfo\030\001 \001(\0132\023.pb.T"
    "UserSimpleInfo\022\r\n\005IsWin\030\002 \001(\010\022\020\n\010ReportI"
    "d\030\003 \001(\r\022\020\n\010IsAttack\030\004 \001(\010\"\246\002\n\020TArenaGetI"
    "nfoRsp\022\020\n\010Position\030\001 \001(\r\022\024\n\014BestPosition"
    "\030\002 \001(\r\022\024\n\014ChallengeNum\030\003 \001(\r\022\016\n\006BuyNum\030\004"
    " \001(\r\022\027\n\017BuyChallengeNum\030\005 \001(\r\022\022\n\nRefresh"
    "Num\030\006 \001(\r\022\022\n\nRewardTime\030\007 \001(\004\022%\n\rOpponen"
    "tArray\030\010 \003(\0132\016.pb.TArenaUser\022 \n\010TopArray"
    "\030\t \003(\0132\016.pb.TArenaUser\022\026\n\016ChallengeTotal"
    "\030\n \001(\r\022\020\n\010WinTotal\030\013 \001(\r\022\020\n\010BuyArray\030\014 \003"
    "(\r\"5\n\024TArenaGetRankListReq\022\016\n\006Offset\030\001 \001"
    "(\r\022\r\n\005Limit\030\002 \001(\r\"K\n\024TArenaGetRankListRs"
    "p\022#\n\007RankArr\030\001 \003(\0132\022.pb.TArenaRankInfo\022\016"
    "\n\006MyRank\030\002 \001(\005\"B\n\031TArenaGetBattleReports"
    "Rsp\022%\n\013ReportArray\030\001 \003(\0132\020.pb.TArenaRepo"
    "rt\"e\n\032TArenaRefreshPlayerListRsp\022%\n\rOppo"
    "nentArray\030\001 \003(\0132\016.pb.TArenaUser\022 \n\010TopAr"
    "ray\030\002 \003(\0132\016.pb.TArenaUser\"_\n\022TArenaChall"
    "engeReq\022\021\n\tAttackPos\030\001 \001(\r\022\021\n\tDefendPos\030"
    "\002 \001(\r\022\021\n\tDefendUid\030\003 \001(\004\022\020\n\010HidArray\030\004 \003"
    "(\r\"\257\002\n\022TArenaChallengeRsp\022\023\n\013RefreshOppt"
    "\030\001 \001(\010\022\020\n\010Position\030\002 \001(\r\022\r\n\005IsWin\030\003 \001(\010\022"
    "#\n\010FightRet\030\004 \001(\0132\021.pb.TBattleResult\022 \n\010"
    "TopArray\030\005 \003(\0132\016.pb.TArenaUser\022%\n\rOppone"
    "ntArray\030\006 \003(\0132\016.pb.TArenaUser\022\026\n\016Breakou"
    "tReward\030\007 \001(\r\022\017\n\007UserExp\030\010 \001(\r\022%\n\nCoinRe"
    "ward\030\t \003(\0132\021.pb.TCommonReward\022%\n\nFlopRew"
    "ard\030\n \003(\0132\021.pb.TCommonReward\"_\n\027TArenaQu"
    "ickChallengeReq\022\021\n\tAttackPos\030\001 \001(\r\022\021\n\tDe"
    "fendPos\030\002 \001(\r\022\021\n\tDefendUid\030\003 \001(\004\022\013\n\003Num\030"
    "\004 \001(\r\"{\n\032TArenaQuickChallengeReward\022\017\n\007U"
    "serExp\030\001 \001(\r\022%\n\nCoinReward\030\002 \003(\0132\021.pb.TC"
    "ommonReward\022%\n\nFlopReward\030\003 \003(\0132\021.pb.TCo"
    "mmonReward\"\274\001\n\027TArenaQuickChallengeRsp\022\023"
    "\n\013RefreshOppt\030\001 \001(\010\022\020\n\010Position\030\002 \001(\r\022%\n"
    "\rOpponentArray\030\003 \003(\0132\016.pb.TArenaUser\022 \n\010"
    "TopArray\030\004 \003(\0132\016.pb.TArenaUser\0221\n\tReward"
    "Arr\030\005 \003(\0132\036.pb.TArenaQuickChallengeRewar"
    "d\"6\n\020TArenaRevengeReq\022\020\n\010EnemyUid\030\001 \001(\004\022"
    "\020\n\010HidArray\030\002 \003(\r\"w\n\020TArenaRevengeRsp\022\021\n"
    "\tAttackPos\030\001 \001(\r\022\020\n\010EnemyPos\030\002 \001(\r\022\020\n\010En"
    "emyUid\030\003 \001(\004\022,\n\014ChallengeRsp\030\004 \001(\0132\026.pb."
    "TArenaChallengeRsp\"*\n\030TArenaBuyChallenge"
    "NumReq\022\016\n\006BuyNum\030\001 \001(\r\"x\n\033TArenaUpdateAr"
    "enaDataNotify\022\020\n\010Position\030\001 \001(\r\022%\n\rOppon"
    "entArray\030\002 \003(\0132\016.pb.TArenaUser\022 \n\010TopArr"
    "ay\030\003 \003(\0132\016.pb.TArenaUser\"\037\n\021TArenaExchan"
    "geReq\022\n\n\002Id\030\001 \001(\r\";\n\021TArenaExchangeRsp\022&"
    "\n\013RewardArray\030\001 \003(\0132\021.pb.TCommonReward\"\307"
    "\001\n\020TArenaRecordInfo\022+\n\016AttackUserInfo\030\001 "
    "\001(\0132\023.pb.TUserSimpleInfo\022+\n\016DefendUserIn"
    "fo\030\002 \001(\0132\023.pb.TUserSimpleInfo\022\021\n\tAttackP"
    "os\030\003 \001(\r\022\021\n\tDefendPos\030\004 \001(\r\022\r\n\005IsWin\030\005 \001"
    "(\010\022\020\n\010RecordId\030\006 \001(\r\022\022\n\nRecordTime\030\007 \001(\004"
    "\"C\n\026TArenaGetTopRecordsRsp\022)\n\013RecordArra"
    "y\030\001 \003(\0132\024.pb.TArenaRecordInfo", 2509);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "net/Arena.proto", &protobuf_RegisterTypes);
  TArenaUser::default_instance_ = new TArenaUser();
  TArenaRankInfo::default_instance_ = new TArenaRankInfo();
  TArenaReport::default_instance_ = new TArenaReport();
  TArenaGetInfoRsp::default_instance_ = new TArenaGetInfoRsp();
  TArenaGetRankListReq::default_instance_ = new TArenaGetRankListReq();
  TArenaGetRankListRsp::default_instance_ = new TArenaGetRankListRsp();
  TArenaGetBattleReportsRsp::default_instance_ = new TArenaGetBattleReportsRsp();
  TArenaRefreshPlayerListRsp::default_instance_ = new TArenaRefreshPlayerListRsp();
  TArenaChallengeReq::default_instance_ = new TArenaChallengeReq();
  TArenaChallengeRsp::default_instance_ = new TArenaChallengeRsp();
  TArenaQuickChallengeReq::default_instance_ = new TArenaQuickChallengeReq();
  TArenaQuickChallengeReward::default_instance_ = new TArenaQuickChallengeReward();
  TArenaQuickChallengeRsp::default_instance_ = new TArenaQuickChallengeRsp();
  TArenaRevengeReq::default_instance_ = new TArenaRevengeReq();
  TArenaRevengeRsp::default_instance_ = new TArenaRevengeRsp();
  TArenaBuyChallengeNumReq::default_instance_ = new TArenaBuyChallengeNumReq();
  TArenaUpdateArenaDataNotify::default_instance_ = new TArenaUpdateArenaDataNotify();
  TArenaExchangeReq::default_instance_ = new TArenaExchangeReq();
  TArenaExchangeRsp::default_instance_ = new TArenaExchangeRsp();
  TArenaRecordInfo::default_instance_ = new TArenaRecordInfo();
  TArenaGetTopRecordsRsp::default_instance_ = new TArenaGetTopRecordsRsp();
  TArenaUser::default_instance_->InitAsDefaultInstance();
  TArenaRankInfo::default_instance_->InitAsDefaultInstance();
  TArenaReport::default_instance_->InitAsDefaultInstance();
  TArenaGetInfoRsp::default_instance_->InitAsDefaultInstance();
  TArenaGetRankListReq::default_instance_->InitAsDefaultInstance();
  TArenaGetRankListRsp::default_instance_->InitAsDefaultInstance();
  TArenaGetBattleReportsRsp::default_instance_->InitAsDefaultInstance();
  TArenaRefreshPlayerListRsp::default_instance_->InitAsDefaultInstance();
  TArenaChallengeReq::default_instance_->InitAsDefaultInstance();
  TArenaChallengeRsp::default_instance_->InitAsDefaultInstance();
  TArenaQuickChallengeReq::default_instance_->InitAsDefaultInstance();
  TArenaQuickChallengeReward::default_instance_->InitAsDefaultInstance();
  TArenaQuickChallengeRsp::default_instance_->InitAsDefaultInstance();
  TArenaRevengeReq::default_instance_->InitAsDefaultInstance();
  TArenaRevengeRsp::default_instance_->InitAsDefaultInstance();
  TArenaBuyChallengeNumReq::default_instance_->InitAsDefaultInstance();
  TArenaUpdateArenaDataNotify::default_instance_->InitAsDefaultInstance();
  TArenaExchangeReq::default_instance_->InitAsDefaultInstance();
  TArenaExchangeRsp::default_instance_->InitAsDefaultInstance();
  TArenaRecordInfo::default_instance_->InitAsDefaultInstance();
  TArenaGetTopRecordsRsp::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_net_2fArena_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_net_2fArena_2eproto {
  StaticDescriptorInitializer_net_2fArena_2eproto() {
    protobuf_AddDesc_net_2fArena_2eproto();
  }
} static_descriptor_initializer_net_2fArena_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int TArenaUser::kUidFieldNumber;
const int TArenaUser::kPositionFieldNumber;
const int TArenaUser::kUnameFieldNumber;
const int TArenaUser::kLevelFieldNumber;
const int TArenaUser::kFightForceFieldNumber;
const int TArenaUser::kHtidFieldNumber;
#endif  // !_MSC_VER

TArenaUser::TArenaUser()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TArenaUser)
}

void TArenaUser::InitAsDefaultInstance() {
}

TArenaUser::TArenaUser(const TArenaUser& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TArenaUser)
}

void TArenaUser::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  uid_ = GOOGLE_ULONGLONG(0);
  position_ = 0u;
  uname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  level_ = 0u;
  fightforce_ = GOOGLE_ULONGLONG(0);
  htid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TArenaUser::~TArenaUser() {
  // @@protoc_insertion_point(destructor:pb.TArenaUser)
  SharedDtor();
}

void TArenaUser::SharedDtor() {
  if (uname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete uname_;
  }
  if (this != default_instance_) {
  }
}

void TArenaUser::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TArenaUser::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TArenaUser_descriptor_;
}

const TArenaUser& TArenaUser::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fArena_2eproto();
  return *default_instance_;
}

TArenaUser* TArenaUser::default_instance_ = NULL;

TArenaUser* TArenaUser::New() const {
  return new TArenaUser;
}

void TArenaUser::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<TArenaUser*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 63) {
    ZR_(position_, htid_);
    uid_ = GOOGLE_ULONGLONG(0);
    if (has_uname()) {
      if (uname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        uname_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TArenaUser::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TArenaUser)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 Uid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &uid_)));
          set_has_uid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_Position;
        break;
      }

      // optional uint32 Position = 2;
      case 2: {
        if (tag == 16) {
         parse_Position:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &position_)));
          set_has_position();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_Uname;
        break;
      }

      // optional string Uname = 3;
      case 3: {
        if (tag == 26) {
         parse_Uname:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_uname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->uname().data(), this->uname().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "uname");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_Level;
        break;
      }

      // optional uint32 Level = 4;
      case 4: {
        if (tag == 32) {
         parse_Level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &level_)));
          set_has_level();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_FightForce;
        break;
      }

      // optional uint64 FightForce = 5;
      case 5: {
        if (tag == 40) {
         parse_FightForce:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &fightforce_)));
          set_has_fightforce();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_Htid;
        break;
      }

      // optional uint32 Htid = 6;
      case 6: {
        if (tag == 48) {
         parse_Htid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &htid_)));
          set_has_htid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TArenaUser)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TArenaUser)
  return false;
#undef DO_
}

void TArenaUser::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TArenaUser)
  // optional uint64 Uid = 1;
  if (has_uid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->uid(), output);
  }

  // optional uint32 Position = 2;
  if (has_position()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->position(), output);
  }

  // optional string Uname = 3;
  if (has_uname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->uname().data(), this->uname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "uname");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->uname(), output);
  }

  // optional uint32 Level = 4;
  if (has_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->level(), output);
  }

  // optional uint64 FightForce = 5;
  if (has_fightforce()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(5, this->fightforce(), output);
  }

  // optional uint32 Htid = 6;
  if (has_htid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->htid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TArenaUser)
}

::google::protobuf::uint8* TArenaUser::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TArenaUser)
  // optional uint64 Uid = 1;
  if (has_uid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->uid(), target);
  }

  // optional uint32 Position = 2;
  if (has_position()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->position(), target);
  }

  // optional string Uname = 3;
  if (has_uname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->uname().data(), this->uname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "uname");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->uname(), target);
  }

  // optional uint32 Level = 4;
  if (has_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->level(), target);
  }

  // optional uint64 FightForce = 5;
  if (has_fightforce()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(5, this->fightforce(), target);
  }

  // optional uint32 Htid = 6;
  if (has_htid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->htid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TArenaUser)
  return target;
}

int TArenaUser::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 Uid = 1;
    if (has_uid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->uid());
    }

    // optional uint32 Position = 2;
    if (has_position()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->position());
    }

    // optional string Uname = 3;
    if (has_uname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->uname());
    }

    // optional uint32 Level = 4;
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->level());
    }

    // optional uint64 FightForce = 5;
    if (has_fightforce()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->fightforce());
    }

    // optional uint32 Htid = 6;
    if (has_htid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->htid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TArenaUser::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TArenaUser* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TArenaUser*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TArenaUser::MergeFrom(const TArenaUser& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_uid()) {
      set_uid(from.uid());
    }
    if (from.has_position()) {
      set_position(from.position());
    }
    if (from.has_uname()) {
      set_uname(from.uname());
    }
    if (from.has_level()) {
      set_level(from.level());
    }
    if (from.has_fightforce()) {
      set_fightforce(from.fightforce());
    }
    if (from.has_htid()) {
      set_htid(from.htid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TArenaUser::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TArenaUser::CopyFrom(const TArenaUser& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TArenaUser::IsInitialized() const {

  return true;
}

void TArenaUser::Swap(TArenaUser* other) {
  if (other != this) {
    std::swap(uid_, other->uid_);
    std::swap(position_, other->position_);
    std::swap(uname_, other->uname_);
    std::swap(level_, other->level_);
    std::swap(fightforce_, other->fightforce_);
    std::swap(htid_, other->htid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TArenaUser::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TArenaUser_descriptor_;
  metadata.reflection = TArenaUser_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TArenaRankInfo::kUserInfoFieldNumber;
const int TArenaRankInfo::kPositionFieldNumber;
#endif  // !_MSC_VER

TArenaRankInfo::TArenaRankInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TArenaRankInfo)
}

void TArenaRankInfo::InitAsDefaultInstance() {
  userinfo_ = const_cast< ::pb::TUserSimpleInfo*>(&::pb::TUserSimpleInfo::default_instance());
}

TArenaRankInfo::TArenaRankInfo(const TArenaRankInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TArenaRankInfo)
}

void TArenaRankInfo::SharedCtor() {
  _cached_size_ = 0;
  userinfo_ = NULL;
  position_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TArenaRankInfo::~TArenaRankInfo() {
  // @@protoc_insertion_point(destructor:pb.TArenaRankInfo)
  SharedDtor();
}

void TArenaRankInfo::SharedDtor() {
  if (this != default_instance_) {
    delete userinfo_;
  }
}

void TArenaRankInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TArenaRankInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TArenaRankInfo_descriptor_;
}

const TArenaRankInfo& TArenaRankInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fArena_2eproto();
  return *default_instance_;
}

TArenaRankInfo* TArenaRankInfo::default_instance_ = NULL;

TArenaRankInfo* TArenaRankInfo::New() const {
  return new TArenaRankInfo;
}

void TArenaRankInfo::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    if (has_userinfo()) {
      if (userinfo_ != NULL) userinfo_->::pb::TUserSimpleInfo::Clear();
    }
    position_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TArenaRankInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TArenaRankInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .pb.TUserSimpleInfo UserInfo = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_userinfo()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_Position;
        break;
      }

      // optional uint32 Position = 2;
      case 2: {
        if (tag == 16) {
         parse_Position:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &position_)));
          set_has_position();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TArenaRankInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TArenaRankInfo)
  return false;
#undef DO_
}

void TArenaRankInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TArenaRankInfo)
  // optional .pb.TUserSimpleInfo UserInfo = 1;
  if (has_userinfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->userinfo(), output);
  }

  // optional uint32 Position = 2;
  if (has_position()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->position(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TArenaRankInfo)
}

::google::protobuf::uint8* TArenaRankInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TArenaRankInfo)
  // optional .pb.TUserSimpleInfo UserInfo = 1;
  if (has_userinfo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->userinfo(), target);
  }

  // optional uint32 Position = 2;
  if (has_position()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->position(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TArenaRankInfo)
  return target;
}

int TArenaRankInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .pb.TUserSimpleInfo UserInfo = 1;
    if (has_userinfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->userinfo());
    }

    // optional uint32 Position = 2;
    if (has_position()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->position());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TArenaRankInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TArenaRankInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TArenaRankInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TArenaRankInfo::MergeFrom(const TArenaRankInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_userinfo()) {
      mutable_userinfo()->::pb::TUserSimpleInfo::MergeFrom(from.userinfo());
    }
    if (from.has_position()) {
      set_position(from.position());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TArenaRankInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TArenaRankInfo::CopyFrom(const TArenaRankInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TArenaRankInfo::IsInitialized() const {

  return true;
}

void TArenaRankInfo::Swap(TArenaRankInfo* other) {
  if (other != this) {
    std::swap(userinfo_, other->userinfo_);
    std::swap(position_, other->position_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TArenaRankInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TArenaRankInfo_descriptor_;
  metadata.reflection = TArenaRankInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TArenaReport::kUserInfoFieldNumber;
const int TArenaReport::kIsWinFieldNumber;
const int TArenaReport::kReportIdFieldNumber;
const int TArenaReport::kIsAttackFieldNumber;
#endif  // !_MSC_VER

TArenaReport::TArenaReport()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TArenaReport)
}

void TArenaReport::InitAsDefaultInstance() {
  userinfo_ = const_cast< ::pb::TUserSimpleInfo*>(&::pb::TUserSimpleInfo::default_instance());
}

TArenaReport::TArenaReport(const TArenaReport& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TArenaReport)
}

void TArenaReport::SharedCtor() {
  _cached_size_ = 0;
  userinfo_ = NULL;
  iswin_ = false;
  reportid_ = 0u;
  isattack_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TArenaReport::~TArenaReport() {
  // @@protoc_insertion_point(destructor:pb.TArenaReport)
  SharedDtor();
}

void TArenaReport::SharedDtor() {
  if (this != default_instance_) {
    delete userinfo_;
  }
}

void TArenaReport::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TArenaReport::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TArenaReport_descriptor_;
}

const TArenaReport& TArenaReport::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fArena_2eproto();
  return *default_instance_;
}

TArenaReport* TArenaReport::default_instance_ = NULL;

TArenaReport* TArenaReport::New() const {
  return new TArenaReport;
}

void TArenaReport::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<TArenaReport*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 15) {
    ZR_(reportid_, isattack_);
    if (has_userinfo()) {
      if (userinfo_ != NULL) userinfo_->::pb::TUserSimpleInfo::Clear();
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TArenaReport::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TArenaReport)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .pb.TUserSimpleInfo UserInfo = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_userinfo()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_IsWin;
        break;
      }

      // optional bool IsWin = 2;
      case 2: {
        if (tag == 16) {
         parse_IsWin:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &iswin_)));
          set_has_iswin();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_ReportId;
        break;
      }

      // optional uint32 ReportId = 3;
      case 3: {
        if (tag == 24) {
         parse_ReportId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &reportid_)));
          set_has_reportid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_IsAttack;
        break;
      }

      // optional bool IsAttack = 4;
      case 4: {
        if (tag == 32) {
         parse_IsAttack:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &isattack_)));
          set_has_isattack();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TArenaReport)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TArenaReport)
  return false;
#undef DO_
}

void TArenaReport::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TArenaReport)
  // optional .pb.TUserSimpleInfo UserInfo = 1;
  if (has_userinfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->userinfo(), output);
  }

  // optional bool IsWin = 2;
  if (has_iswin()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->iswin(), output);
  }

  // optional uint32 ReportId = 3;
  if (has_reportid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->reportid(), output);
  }

  // optional bool IsAttack = 4;
  if (has_isattack()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->isattack(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TArenaReport)
}

::google::protobuf::uint8* TArenaReport::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TArenaReport)
  // optional .pb.TUserSimpleInfo UserInfo = 1;
  if (has_userinfo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->userinfo(), target);
  }

  // optional bool IsWin = 2;
  if (has_iswin()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->iswin(), target);
  }

  // optional uint32 ReportId = 3;
  if (has_reportid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->reportid(), target);
  }

  // optional bool IsAttack = 4;
  if (has_isattack()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->isattack(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TArenaReport)
  return target;
}

int TArenaReport::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .pb.TUserSimpleInfo UserInfo = 1;
    if (has_userinfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->userinfo());
    }

    // optional bool IsWin = 2;
    if (has_iswin()) {
      total_size += 1 + 1;
    }

    // optional uint32 ReportId = 3;
    if (has_reportid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->reportid());
    }

    // optional bool IsAttack = 4;
    if (has_isattack()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TArenaReport::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TArenaReport* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TArenaReport*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TArenaReport::MergeFrom(const TArenaReport& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_userinfo()) {
      mutable_userinfo()->::pb::TUserSimpleInfo::MergeFrom(from.userinfo());
    }
    if (from.has_iswin()) {
      set_iswin(from.iswin());
    }
    if (from.has_reportid()) {
      set_reportid(from.reportid());
    }
    if (from.has_isattack()) {
      set_isattack(from.isattack());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TArenaReport::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TArenaReport::CopyFrom(const TArenaReport& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TArenaReport::IsInitialized() const {

  return true;
}

void TArenaReport::Swap(TArenaReport* other) {
  if (other != this) {
    std::swap(userinfo_, other->userinfo_);
    std::swap(iswin_, other->iswin_);
    std::swap(reportid_, other->reportid_);
    std::swap(isattack_, other->isattack_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TArenaReport::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TArenaReport_descriptor_;
  metadata.reflection = TArenaReport_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TArenaGetInfoRsp::kPositionFieldNumber;
const int TArenaGetInfoRsp::kBestPositionFieldNumber;
const int TArenaGetInfoRsp::kChallengeNumFieldNumber;
const int TArenaGetInfoRsp::kBuyNumFieldNumber;
const int TArenaGetInfoRsp::kBuyChallengeNumFieldNumber;
const int TArenaGetInfoRsp::kRefreshNumFieldNumber;
const int TArenaGetInfoRsp::kRewardTimeFieldNumber;
const int TArenaGetInfoRsp::kOpponentArrayFieldNumber;
const int TArenaGetInfoRsp::kTopArrayFieldNumber;
const int TArenaGetInfoRsp::kChallengeTotalFieldNumber;
const int TArenaGetInfoRsp::kWinTotalFieldNumber;
const int TArenaGetInfoRsp::kBuyArrayFieldNumber;
#endif  // !_MSC_VER

TArenaGetInfoRsp::TArenaGetInfoRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TArenaGetInfoRsp)
}

void TArenaGetInfoRsp::InitAsDefaultInstance() {
}

TArenaGetInfoRsp::TArenaGetInfoRsp(const TArenaGetInfoRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TArenaGetInfoRsp)
}

void TArenaGetInfoRsp::SharedCtor() {
  _cached_size_ = 0;
  position_ = 0u;
  bestposition_ = 0u;
  challengenum_ = 0u;
  buynum_ = 0u;
  buychallengenum_ = 0u;
  refreshnum_ = 0u;
  rewardtime_ = GOOGLE_ULONGLONG(0);
  challengetotal_ = 0u;
  wintotal_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TArenaGetInfoRsp::~TArenaGetInfoRsp() {
  // @@protoc_insertion_point(destructor:pb.TArenaGetInfoRsp)
  SharedDtor();
}

void TArenaGetInfoRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TArenaGetInfoRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TArenaGetInfoRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TArenaGetInfoRsp_descriptor_;
}

const TArenaGetInfoRsp& TArenaGetInfoRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fArena_2eproto();
  return *default_instance_;
}

TArenaGetInfoRsp* TArenaGetInfoRsp::default_instance_ = NULL;

TArenaGetInfoRsp* TArenaGetInfoRsp::New() const {
  return new TArenaGetInfoRsp;
}

void TArenaGetInfoRsp::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<TArenaGetInfoRsp*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 127) {
    ZR_(position_, rewardtime_);
  }
  ZR_(challengetotal_, wintotal_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  opponentarray_.Clear();
  toparray_.Clear();
  buyarray_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TArenaGetInfoRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TArenaGetInfoRsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 Position = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &position_)));
          set_has_position();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_BestPosition;
        break;
      }

      // optional uint32 BestPosition = 2;
      case 2: {
        if (tag == 16) {
         parse_BestPosition:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &bestposition_)));
          set_has_bestposition();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_ChallengeNum;
        break;
      }

      // optional uint32 ChallengeNum = 3;
      case 3: {
        if (tag == 24) {
         parse_ChallengeNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &challengenum_)));
          set_has_challengenum();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_BuyNum;
        break;
      }

      // optional uint32 BuyNum = 4;
      case 4: {
        if (tag == 32) {
         parse_BuyNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &buynum_)));
          set_has_buynum();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_BuyChallengeNum;
        break;
      }

      // optional uint32 BuyChallengeNum = 5;
      case 5: {
        if (tag == 40) {
         parse_BuyChallengeNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &buychallengenum_)));
          set_has_buychallengenum();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_RefreshNum;
        break;
      }

      // optional uint32 RefreshNum = 6;
      case 6: {
        if (tag == 48) {
         parse_RefreshNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &refreshnum_)));
          set_has_refreshnum();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_RewardTime;
        break;
      }

      // optional uint64 RewardTime = 7;
      case 7: {
        if (tag == 56) {
         parse_RewardTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &rewardtime_)));
          set_has_rewardtime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_OpponentArray;
        break;
      }

      // repeated .pb.TArenaUser OpponentArray = 8;
      case 8: {
        if (tag == 66) {
         parse_OpponentArray:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_opponentarray()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_OpponentArray;
        if (input->ExpectTag(74)) goto parse_TopArray;
        break;
      }

      // repeated .pb.TArenaUser TopArray = 9;
      case 9: {
        if (tag == 74) {
         parse_TopArray:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_toparray()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(74)) goto parse_TopArray;
        if (input->ExpectTag(80)) goto parse_ChallengeTotal;
        break;
      }

      // optional uint32 ChallengeTotal = 10;
      case 10: {
        if (tag == 80) {
         parse_ChallengeTotal:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &challengetotal_)));
          set_has_challengetotal();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(88)) goto parse_WinTotal;
        break;
      }

      // optional uint32 WinTotal = 11;
      case 11: {
        if (tag == 88) {
         parse_WinTotal:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &wintotal_)));
          set_has_wintotal();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(96)) goto parse_BuyArray;
        break;
      }

      // repeated uint32 BuyArray = 12;
      case 12: {
        if (tag == 96) {
         parse_BuyArray:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 96, input, this->mutable_buyarray())));
        } else if (tag == 98) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_buyarray())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(96)) goto parse_BuyArray;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TArenaGetInfoRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TArenaGetInfoRsp)
  return false;
#undef DO_
}

void TArenaGetInfoRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TArenaGetInfoRsp)
  // optional uint32 Position = 1;
  if (has_position()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->position(), output);
  }

  // optional uint32 BestPosition = 2;
  if (has_bestposition()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->bestposition(), output);
  }

  // optional uint32 ChallengeNum = 3;
  if (has_challengenum()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->challengenum(), output);
  }

  // optional uint32 BuyNum = 4;
  if (has_buynum()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->buynum(), output);
  }

  // optional uint32 BuyChallengeNum = 5;
  if (has_buychallengenum()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->buychallengenum(), output);
  }

  // optional uint32 RefreshNum = 6;
  if (has_refreshnum()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->refreshnum(), output);
  }

  // optional uint64 RewardTime = 7;
  if (has_rewardtime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(7, this->rewardtime(), output);
  }

  // repeated .pb.TArenaUser OpponentArray = 8;
  for (int i = 0; i < this->opponentarray_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, this->opponentarray(i), output);
  }

  // repeated .pb.TArenaUser TopArray = 9;
  for (int i = 0; i < this->toparray_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, this->toparray(i), output);
  }

  // optional uint32 ChallengeTotal = 10;
  if (has_challengetotal()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->challengetotal(), output);
  }

  // optional uint32 WinTotal = 11;
  if (has_wintotal()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(11, this->wintotal(), output);
  }

  // repeated uint32 BuyArray = 12;
  for (int i = 0; i < this->buyarray_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      12, this->buyarray(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TArenaGetInfoRsp)
}

::google::protobuf::uint8* TArenaGetInfoRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TArenaGetInfoRsp)
  // optional uint32 Position = 1;
  if (has_position()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->position(), target);
  }

  // optional uint32 BestPosition = 2;
  if (has_bestposition()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->bestposition(), target);
  }

  // optional uint32 ChallengeNum = 3;
  if (has_challengenum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->challengenum(), target);
  }

  // optional uint32 BuyNum = 4;
  if (has_buynum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->buynum(), target);
  }

  // optional uint32 BuyChallengeNum = 5;
  if (has_buychallengenum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->buychallengenum(), target);
  }

  // optional uint32 RefreshNum = 6;
  if (has_refreshnum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->refreshnum(), target);
  }

  // optional uint64 RewardTime = 7;
  if (has_rewardtime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(7, this->rewardtime(), target);
  }

  // repeated .pb.TArenaUser OpponentArray = 8;
  for (int i = 0; i < this->opponentarray_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        8, this->opponentarray(i), target);
  }

  // repeated .pb.TArenaUser TopArray = 9;
  for (int i = 0; i < this->toparray_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        9, this->toparray(i), target);
  }

  // optional uint32 ChallengeTotal = 10;
  if (has_challengetotal()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(10, this->challengetotal(), target);
  }

  // optional uint32 WinTotal = 11;
  if (has_wintotal()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(11, this->wintotal(), target);
  }

  // repeated uint32 BuyArray = 12;
  for (int i = 0; i < this->buyarray_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(12, this->buyarray(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TArenaGetInfoRsp)
  return target;
}

int TArenaGetInfoRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 Position = 1;
    if (has_position()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->position());
    }

    // optional uint32 BestPosition = 2;
    if (has_bestposition()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->bestposition());
    }

    // optional uint32 ChallengeNum = 3;
    if (has_challengenum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->challengenum());
    }

    // optional uint32 BuyNum = 4;
    if (has_buynum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->buynum());
    }

    // optional uint32 BuyChallengeNum = 5;
    if (has_buychallengenum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->buychallengenum());
    }

    // optional uint32 RefreshNum = 6;
    if (has_refreshnum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->refreshnum());
    }

    // optional uint64 RewardTime = 7;
    if (has_rewardtime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->rewardtime());
    }

  }
  if (_has_bits_[9 / 32] & (0xffu << (9 % 32))) {
    // optional uint32 ChallengeTotal = 10;
    if (has_challengetotal()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->challengetotal());
    }

    // optional uint32 WinTotal = 11;
    if (has_wintotal()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->wintotal());
    }

  }
  // repeated .pb.TArenaUser OpponentArray = 8;
  total_size += 1 * this->opponentarray_size();
  for (int i = 0; i < this->opponentarray_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->opponentarray(i));
  }

  // repeated .pb.TArenaUser TopArray = 9;
  total_size += 1 * this->toparray_size();
  for (int i = 0; i < this->toparray_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->toparray(i));
  }

  // repeated uint32 BuyArray = 12;
  {
    int data_size = 0;
    for (int i = 0; i < this->buyarray_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->buyarray(i));
    }
    total_size += 1 * this->buyarray_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TArenaGetInfoRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TArenaGetInfoRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TArenaGetInfoRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TArenaGetInfoRsp::MergeFrom(const TArenaGetInfoRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  opponentarray_.MergeFrom(from.opponentarray_);
  toparray_.MergeFrom(from.toparray_);
  buyarray_.MergeFrom(from.buyarray_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_position()) {
      set_position(from.position());
    }
    if (from.has_bestposition()) {
      set_bestposition(from.bestposition());
    }
    if (from.has_challengenum()) {
      set_challengenum(from.challengenum());
    }
    if (from.has_buynum()) {
      set_buynum(from.buynum());
    }
    if (from.has_buychallengenum()) {
      set_buychallengenum(from.buychallengenum());
    }
    if (from.has_refreshnum()) {
      set_refreshnum(from.refreshnum());
    }
    if (from.has_rewardtime()) {
      set_rewardtime(from.rewardtime());
    }
  }
  if (from._has_bits_[9 / 32] & (0xffu << (9 % 32))) {
    if (from.has_challengetotal()) {
      set_challengetotal(from.challengetotal());
    }
    if (from.has_wintotal()) {
      set_wintotal(from.wintotal());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TArenaGetInfoRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TArenaGetInfoRsp::CopyFrom(const TArenaGetInfoRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TArenaGetInfoRsp::IsInitialized() const {

  return true;
}

void TArenaGetInfoRsp::Swap(TArenaGetInfoRsp* other) {
  if (other != this) {
    std::swap(position_, other->position_);
    std::swap(bestposition_, other->bestposition_);
    std::swap(challengenum_, other->challengenum_);
    std::swap(buynum_, other->buynum_);
    std::swap(buychallengenum_, other->buychallengenum_);
    std::swap(refreshnum_, other->refreshnum_);
    std::swap(rewardtime_, other->rewardtime_);
    opponentarray_.Swap(&other->opponentarray_);
    toparray_.Swap(&other->toparray_);
    std::swap(challengetotal_, other->challengetotal_);
    std::swap(wintotal_, other->wintotal_);
    buyarray_.Swap(&other->buyarray_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TArenaGetInfoRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TArenaGetInfoRsp_descriptor_;
  metadata.reflection = TArenaGetInfoRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TArenaGetRankListReq::kOffsetFieldNumber;
const int TArenaGetRankListReq::kLimitFieldNumber;
#endif  // !_MSC_VER

TArenaGetRankListReq::TArenaGetRankListReq()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TArenaGetRankListReq)
}

void TArenaGetRankListReq::InitAsDefaultInstance() {
}

TArenaGetRankListReq::TArenaGetRankListReq(const TArenaGetRankListReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TArenaGetRankListReq)
}

void TArenaGetRankListReq::SharedCtor() {
  _cached_size_ = 0;
  offset_ = 0u;
  limit_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TArenaGetRankListReq::~TArenaGetRankListReq() {
  // @@protoc_insertion_point(destructor:pb.TArenaGetRankListReq)
  SharedDtor();
}

void TArenaGetRankListReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TArenaGetRankListReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TArenaGetRankListReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TArenaGetRankListReq_descriptor_;
}

const TArenaGetRankListReq& TArenaGetRankListReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fArena_2eproto();
  return *default_instance_;
}

TArenaGetRankListReq* TArenaGetRankListReq::default_instance_ = NULL;

TArenaGetRankListReq* TArenaGetRankListReq::New() const {
  return new TArenaGetRankListReq;
}

void TArenaGetRankListReq::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<TArenaGetRankListReq*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(offset_, limit_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TArenaGetRankListReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TArenaGetRankListReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 Offset = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &offset_)));
          set_has_offset();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_Limit;
        break;
      }

      // optional uint32 Limit = 2;
      case 2: {
        if (tag == 16) {
         parse_Limit:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &limit_)));
          set_has_limit();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TArenaGetRankListReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TArenaGetRankListReq)
  return false;
#undef DO_
}

void TArenaGetRankListReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TArenaGetRankListReq)
  // optional uint32 Offset = 1;
  if (has_offset()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->offset(), output);
  }

  // optional uint32 Limit = 2;
  if (has_limit()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->limit(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TArenaGetRankListReq)
}

::google::protobuf::uint8* TArenaGetRankListReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TArenaGetRankListReq)
  // optional uint32 Offset = 1;
  if (has_offset()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->offset(), target);
  }

  // optional uint32 Limit = 2;
  if (has_limit()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->limit(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TArenaGetRankListReq)
  return target;
}

int TArenaGetRankListReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 Offset = 1;
    if (has_offset()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->offset());
    }

    // optional uint32 Limit = 2;
    if (has_limit()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->limit());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TArenaGetRankListReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TArenaGetRankListReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TArenaGetRankListReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TArenaGetRankListReq::MergeFrom(const TArenaGetRankListReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_offset()) {
      set_offset(from.offset());
    }
    if (from.has_limit()) {
      set_limit(from.limit());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TArenaGetRankListReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TArenaGetRankListReq::CopyFrom(const TArenaGetRankListReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TArenaGetRankListReq::IsInitialized() const {

  return true;
}

void TArenaGetRankListReq::Swap(TArenaGetRankListReq* other) {
  if (other != this) {
    std::swap(offset_, other->offset_);
    std::swap(limit_, other->limit_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TArenaGetRankListReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TArenaGetRankListReq_descriptor_;
  metadata.reflection = TArenaGetRankListReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TArenaGetRankListRsp::kRankArrFieldNumber;
const int TArenaGetRankListRsp::kMyRankFieldNumber;
#endif  // !_MSC_VER

TArenaGetRankListRsp::TArenaGetRankListRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TArenaGetRankListRsp)
}

void TArenaGetRankListRsp::InitAsDefaultInstance() {
}

TArenaGetRankListRsp::TArenaGetRankListRsp(const TArenaGetRankListRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TArenaGetRankListRsp)
}

void TArenaGetRankListRsp::SharedCtor() {
  _cached_size_ = 0;
  myrank_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TArenaGetRankListRsp::~TArenaGetRankListRsp() {
  // @@protoc_insertion_point(destructor:pb.TArenaGetRankListRsp)
  SharedDtor();
}

void TArenaGetRankListRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TArenaGetRankListRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TArenaGetRankListRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TArenaGetRankListRsp_descriptor_;
}

const TArenaGetRankListRsp& TArenaGetRankListRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fArena_2eproto();
  return *default_instance_;
}

TArenaGetRankListRsp* TArenaGetRankListRsp::default_instance_ = NULL;

TArenaGetRankListRsp* TArenaGetRankListRsp::New() const {
  return new TArenaGetRankListRsp;
}

void TArenaGetRankListRsp::Clear() {
  myrank_ = 0;
  rankarr_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TArenaGetRankListRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TArenaGetRankListRsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .pb.TArenaRankInfo RankArr = 1;
      case 1: {
        if (tag == 10) {
         parse_RankArr:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_rankarr()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_RankArr;
        if (input->ExpectTag(16)) goto parse_MyRank;
        break;
      }

      // optional int32 MyRank = 2;
      case 2: {
        if (tag == 16) {
         parse_MyRank:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &myrank_)));
          set_has_myrank();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TArenaGetRankListRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TArenaGetRankListRsp)
  return false;
#undef DO_
}

void TArenaGetRankListRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TArenaGetRankListRsp)
  // repeated .pb.TArenaRankInfo RankArr = 1;
  for (int i = 0; i < this->rankarr_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->rankarr(i), output);
  }

  // optional int32 MyRank = 2;
  if (has_myrank()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->myrank(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TArenaGetRankListRsp)
}

::google::protobuf::uint8* TArenaGetRankListRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TArenaGetRankListRsp)
  // repeated .pb.TArenaRankInfo RankArr = 1;
  for (int i = 0; i < this->rankarr_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->rankarr(i), target);
  }

  // optional int32 MyRank = 2;
  if (has_myrank()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->myrank(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TArenaGetRankListRsp)
  return target;
}

int TArenaGetRankListRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // optional int32 MyRank = 2;
    if (has_myrank()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->myrank());
    }

  }
  // repeated .pb.TArenaRankInfo RankArr = 1;
  total_size += 1 * this->rankarr_size();
  for (int i = 0; i < this->rankarr_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->rankarr(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TArenaGetRankListRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TArenaGetRankListRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TArenaGetRankListRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TArenaGetRankListRsp::MergeFrom(const TArenaGetRankListRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  rankarr_.MergeFrom(from.rankarr_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_myrank()) {
      set_myrank(from.myrank());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TArenaGetRankListRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TArenaGetRankListRsp::CopyFrom(const TArenaGetRankListRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TArenaGetRankListRsp::IsInitialized() const {

  return true;
}

void TArenaGetRankListRsp::Swap(TArenaGetRankListRsp* other) {
  if (other != this) {
    rankarr_.Swap(&other->rankarr_);
    std::swap(myrank_, other->myrank_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TArenaGetRankListRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TArenaGetRankListRsp_descriptor_;
  metadata.reflection = TArenaGetRankListRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TArenaGetBattleReportsRsp::kReportArrayFieldNumber;
#endif  // !_MSC_VER

TArenaGetBattleReportsRsp::TArenaGetBattleReportsRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TArenaGetBattleReportsRsp)
}

void TArenaGetBattleReportsRsp::InitAsDefaultInstance() {
}

TArenaGetBattleReportsRsp::TArenaGetBattleReportsRsp(const TArenaGetBattleReportsRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TArenaGetBattleReportsRsp)
}

void TArenaGetBattleReportsRsp::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TArenaGetBattleReportsRsp::~TArenaGetBattleReportsRsp() {
  // @@protoc_insertion_point(destructor:pb.TArenaGetBattleReportsRsp)
  SharedDtor();
}

void TArenaGetBattleReportsRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TArenaGetBattleReportsRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TArenaGetBattleReportsRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TArenaGetBattleReportsRsp_descriptor_;
}

const TArenaGetBattleReportsRsp& TArenaGetBattleReportsRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fArena_2eproto();
  return *default_instance_;
}

TArenaGetBattleReportsRsp* TArenaGetBattleReportsRsp::default_instance_ = NULL;

TArenaGetBattleReportsRsp* TArenaGetBattleReportsRsp::New() const {
  return new TArenaGetBattleReportsRsp;
}

void TArenaGetBattleReportsRsp::Clear() {
  reportarray_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TArenaGetBattleReportsRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TArenaGetBattleReportsRsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .pb.TArenaReport ReportArray = 1;
      case 1: {
        if (tag == 10) {
         parse_ReportArray:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_reportarray()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_ReportArray;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TArenaGetBattleReportsRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TArenaGetBattleReportsRsp)
  return false;
#undef DO_
}

void TArenaGetBattleReportsRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TArenaGetBattleReportsRsp)
  // repeated .pb.TArenaReport ReportArray = 1;
  for (int i = 0; i < this->reportarray_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->reportarray(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TArenaGetBattleReportsRsp)
}

::google::protobuf::uint8* TArenaGetBattleReportsRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TArenaGetBattleReportsRsp)
  // repeated .pb.TArenaReport ReportArray = 1;
  for (int i = 0; i < this->reportarray_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->reportarray(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TArenaGetBattleReportsRsp)
  return target;
}

int TArenaGetBattleReportsRsp::ByteSize() const {
  int total_size = 0;

  // repeated .pb.TArenaReport ReportArray = 1;
  total_size += 1 * this->reportarray_size();
  for (int i = 0; i < this->reportarray_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->reportarray(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TArenaGetBattleReportsRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TArenaGetBattleReportsRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TArenaGetBattleReportsRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TArenaGetBattleReportsRsp::MergeFrom(const TArenaGetBattleReportsRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  reportarray_.MergeFrom(from.reportarray_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TArenaGetBattleReportsRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TArenaGetBattleReportsRsp::CopyFrom(const TArenaGetBattleReportsRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TArenaGetBattleReportsRsp::IsInitialized() const {

  return true;
}

void TArenaGetBattleReportsRsp::Swap(TArenaGetBattleReportsRsp* other) {
  if (other != this) {
    reportarray_.Swap(&other->reportarray_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TArenaGetBattleReportsRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TArenaGetBattleReportsRsp_descriptor_;
  metadata.reflection = TArenaGetBattleReportsRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TArenaRefreshPlayerListRsp::kOpponentArrayFieldNumber;
const int TArenaRefreshPlayerListRsp::kTopArrayFieldNumber;
#endif  // !_MSC_VER

TArenaRefreshPlayerListRsp::TArenaRefreshPlayerListRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TArenaRefreshPlayerListRsp)
}

void TArenaRefreshPlayerListRsp::InitAsDefaultInstance() {
}

TArenaRefreshPlayerListRsp::TArenaRefreshPlayerListRsp(const TArenaRefreshPlayerListRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TArenaRefreshPlayerListRsp)
}

void TArenaRefreshPlayerListRsp::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TArenaRefreshPlayerListRsp::~TArenaRefreshPlayerListRsp() {
  // @@protoc_insertion_point(destructor:pb.TArenaRefreshPlayerListRsp)
  SharedDtor();
}

void TArenaRefreshPlayerListRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TArenaRefreshPlayerListRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TArenaRefreshPlayerListRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TArenaRefreshPlayerListRsp_descriptor_;
}

const TArenaRefreshPlayerListRsp& TArenaRefreshPlayerListRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fArena_2eproto();
  return *default_instance_;
}

TArenaRefreshPlayerListRsp* TArenaRefreshPlayerListRsp::default_instance_ = NULL;

TArenaRefreshPlayerListRsp* TArenaRefreshPlayerListRsp::New() const {
  return new TArenaRefreshPlayerListRsp;
}

void TArenaRefreshPlayerListRsp::Clear() {
  opponentarray_.Clear();
  toparray_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TArenaRefreshPlayerListRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TArenaRefreshPlayerListRsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .pb.TArenaUser OpponentArray = 1;
      case 1: {
        if (tag == 10) {
         parse_OpponentArray:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_opponentarray()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_OpponentArray;
        if (input->ExpectTag(18)) goto parse_TopArray;
        break;
      }

      // repeated .pb.TArenaUser TopArray = 2;
      case 2: {
        if (tag == 18) {
         parse_TopArray:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_toparray()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_TopArray;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TArenaRefreshPlayerListRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TArenaRefreshPlayerListRsp)
  return false;
#undef DO_
}

void TArenaRefreshPlayerListRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TArenaRefreshPlayerListRsp)
  // repeated .pb.TArenaUser OpponentArray = 1;
  for (int i = 0; i < this->opponentarray_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->opponentarray(i), output);
  }

  // repeated .pb.TArenaUser TopArray = 2;
  for (int i = 0; i < this->toparray_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->toparray(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TArenaRefreshPlayerListRsp)
}

::google::protobuf::uint8* TArenaRefreshPlayerListRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TArenaRefreshPlayerListRsp)
  // repeated .pb.TArenaUser OpponentArray = 1;
  for (int i = 0; i < this->opponentarray_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->opponentarray(i), target);
  }

  // repeated .pb.TArenaUser TopArray = 2;
  for (int i = 0; i < this->toparray_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->toparray(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TArenaRefreshPlayerListRsp)
  return target;
}

int TArenaRefreshPlayerListRsp::ByteSize() const {
  int total_size = 0;

  // repeated .pb.TArenaUser OpponentArray = 1;
  total_size += 1 * this->opponentarray_size();
  for (int i = 0; i < this->opponentarray_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->opponentarray(i));
  }

  // repeated .pb.TArenaUser TopArray = 2;
  total_size += 1 * this->toparray_size();
  for (int i = 0; i < this->toparray_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->toparray(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TArenaRefreshPlayerListRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TArenaRefreshPlayerListRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TArenaRefreshPlayerListRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TArenaRefreshPlayerListRsp::MergeFrom(const TArenaRefreshPlayerListRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  opponentarray_.MergeFrom(from.opponentarray_);
  toparray_.MergeFrom(from.toparray_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TArenaRefreshPlayerListRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TArenaRefreshPlayerListRsp::CopyFrom(const TArenaRefreshPlayerListRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TArenaRefreshPlayerListRsp::IsInitialized() const {

  return true;
}

void TArenaRefreshPlayerListRsp::Swap(TArenaRefreshPlayerListRsp* other) {
  if (other != this) {
    opponentarray_.Swap(&other->opponentarray_);
    toparray_.Swap(&other->toparray_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TArenaRefreshPlayerListRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TArenaRefreshPlayerListRsp_descriptor_;
  metadata.reflection = TArenaRefreshPlayerListRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TArenaChallengeReq::kAttackPosFieldNumber;
const int TArenaChallengeReq::kDefendPosFieldNumber;
const int TArenaChallengeReq::kDefendUidFieldNumber;
const int TArenaChallengeReq::kHidArrayFieldNumber;
#endif  // !_MSC_VER

TArenaChallengeReq::TArenaChallengeReq()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TArenaChallengeReq)
}

void TArenaChallengeReq::InitAsDefaultInstance() {
}

TArenaChallengeReq::TArenaChallengeReq(const TArenaChallengeReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TArenaChallengeReq)
}

void TArenaChallengeReq::SharedCtor() {
  _cached_size_ = 0;
  attackpos_ = 0u;
  defendpos_ = 0u;
  defenduid_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TArenaChallengeReq::~TArenaChallengeReq() {
  // @@protoc_insertion_point(destructor:pb.TArenaChallengeReq)
  SharedDtor();
}

void TArenaChallengeReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TArenaChallengeReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TArenaChallengeReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TArenaChallengeReq_descriptor_;
}

const TArenaChallengeReq& TArenaChallengeReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fArena_2eproto();
  return *default_instance_;
}

TArenaChallengeReq* TArenaChallengeReq::default_instance_ = NULL;

TArenaChallengeReq* TArenaChallengeReq::New() const {
  return new TArenaChallengeReq;
}

void TArenaChallengeReq::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<TArenaChallengeReq*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(attackpos_, defenduid_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  hidarray_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TArenaChallengeReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TArenaChallengeReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 AttackPos = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &attackpos_)));
          set_has_attackpos();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_DefendPos;
        break;
      }

      // optional uint32 DefendPos = 2;
      case 2: {
        if (tag == 16) {
         parse_DefendPos:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &defendpos_)));
          set_has_defendpos();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_DefendUid;
        break;
      }

      // optional uint64 DefendUid = 3;
      case 3: {
        if (tag == 24) {
         parse_DefendUid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &defenduid_)));
          set_has_defenduid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_HidArray;
        break;
      }

      // repeated uint32 HidArray = 4;
      case 4: {
        if (tag == 32) {
         parse_HidArray:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 32, input, this->mutable_hidarray())));
        } else if (tag == 34) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_hidarray())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_HidArray;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TArenaChallengeReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TArenaChallengeReq)
  return false;
#undef DO_
}

void TArenaChallengeReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TArenaChallengeReq)
  // optional uint32 AttackPos = 1;
  if (has_attackpos()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->attackpos(), output);
  }

  // optional uint32 DefendPos = 2;
  if (has_defendpos()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->defendpos(), output);
  }

  // optional uint64 DefendUid = 3;
  if (has_defenduid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->defenduid(), output);
  }

  // repeated uint32 HidArray = 4;
  for (int i = 0; i < this->hidarray_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      4, this->hidarray(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TArenaChallengeReq)
}

::google::protobuf::uint8* TArenaChallengeReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TArenaChallengeReq)
  // optional uint32 AttackPos = 1;
  if (has_attackpos()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->attackpos(), target);
  }

  // optional uint32 DefendPos = 2;
  if (has_defendpos()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->defendpos(), target);
  }

  // optional uint64 DefendUid = 3;
  if (has_defenduid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->defenduid(), target);
  }

  // repeated uint32 HidArray = 4;
  for (int i = 0; i < this->hidarray_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(4, this->hidarray(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TArenaChallengeReq)
  return target;
}

int TArenaChallengeReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 AttackPos = 1;
    if (has_attackpos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->attackpos());
    }

    // optional uint32 DefendPos = 2;
    if (has_defendpos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->defendpos());
    }

    // optional uint64 DefendUid = 3;
    if (has_defenduid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->defenduid());
    }

  }
  // repeated uint32 HidArray = 4;
  {
    int data_size = 0;
    for (int i = 0; i < this->hidarray_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->hidarray(i));
    }
    total_size += 1 * this->hidarray_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TArenaChallengeReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TArenaChallengeReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TArenaChallengeReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TArenaChallengeReq::MergeFrom(const TArenaChallengeReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  hidarray_.MergeFrom(from.hidarray_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_attackpos()) {
      set_attackpos(from.attackpos());
    }
    if (from.has_defendpos()) {
      set_defendpos(from.defendpos());
    }
    if (from.has_defenduid()) {
      set_defenduid(from.defenduid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TArenaChallengeReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TArenaChallengeReq::CopyFrom(const TArenaChallengeReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TArenaChallengeReq::IsInitialized() const {

  return true;
}

void TArenaChallengeReq::Swap(TArenaChallengeReq* other) {
  if (other != this) {
    std::swap(attackpos_, other->attackpos_);
    std::swap(defendpos_, other->defendpos_);
    std::swap(defenduid_, other->defenduid_);
    hidarray_.Swap(&other->hidarray_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TArenaChallengeReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TArenaChallengeReq_descriptor_;
  metadata.reflection = TArenaChallengeReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TArenaChallengeRsp::kRefreshOpptFieldNumber;
const int TArenaChallengeRsp::kPositionFieldNumber;
const int TArenaChallengeRsp::kIsWinFieldNumber;
const int TArenaChallengeRsp::kFightRetFieldNumber;
const int TArenaChallengeRsp::kTopArrayFieldNumber;
const int TArenaChallengeRsp::kOpponentArrayFieldNumber;
const int TArenaChallengeRsp::kBreakoutRewardFieldNumber;
const int TArenaChallengeRsp::kUserExpFieldNumber;
const int TArenaChallengeRsp::kCoinRewardFieldNumber;
const int TArenaChallengeRsp::kFlopRewardFieldNumber;
#endif  // !_MSC_VER

TArenaChallengeRsp::TArenaChallengeRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TArenaChallengeRsp)
}

void TArenaChallengeRsp::InitAsDefaultInstance() {
  fightret_ = const_cast< ::pb::TBattleResult*>(&::pb::TBattleResult::default_instance());
}

TArenaChallengeRsp::TArenaChallengeRsp(const TArenaChallengeRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TArenaChallengeRsp)
}

void TArenaChallengeRsp::SharedCtor() {
  _cached_size_ = 0;
  refreshoppt_ = false;
  position_ = 0u;
  iswin_ = false;
  fightret_ = NULL;
  breakoutreward_ = 0u;
  userexp_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TArenaChallengeRsp::~TArenaChallengeRsp() {
  // @@protoc_insertion_point(destructor:pb.TArenaChallengeRsp)
  SharedDtor();
}

void TArenaChallengeRsp::SharedDtor() {
  if (this != default_instance_) {
    delete fightret_;
  }
}

void TArenaChallengeRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TArenaChallengeRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TArenaChallengeRsp_descriptor_;
}

const TArenaChallengeRsp& TArenaChallengeRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fArena_2eproto();
  return *default_instance_;
}

TArenaChallengeRsp* TArenaChallengeRsp::default_instance_ = NULL;

TArenaChallengeRsp* TArenaChallengeRsp::New() const {
  return new TArenaChallengeRsp;
}

void TArenaChallengeRsp::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<TArenaChallengeRsp*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 207) {
    ZR_(position_, iswin_);
    ZR_(breakoutreward_, userexp_);
    if (has_fightret()) {
      if (fightret_ != NULL) fightret_->::pb::TBattleResult::Clear();
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  toparray_.Clear();
  opponentarray_.Clear();
  coinreward_.Clear();
  flopreward_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TArenaChallengeRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TArenaChallengeRsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool RefreshOppt = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &refreshoppt_)));
          set_has_refreshoppt();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_Position;
        break;
      }

      // optional uint32 Position = 2;
      case 2: {
        if (tag == 16) {
         parse_Position:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &position_)));
          set_has_position();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_IsWin;
        break;
      }

      // optional bool IsWin = 3;
      case 3: {
        if (tag == 24) {
         parse_IsWin:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &iswin_)));
          set_has_iswin();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_FightRet;
        break;
      }

      // optional .pb.TBattleResult FightRet = 4;
      case 4: {
        if (tag == 34) {
         parse_FightRet:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_fightret()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_TopArray;
        break;
      }

      // repeated .pb.TArenaUser TopArray = 5;
      case 5: {
        if (tag == 42) {
         parse_TopArray:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_toparray()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_TopArray;
        if (input->ExpectTag(50)) goto parse_OpponentArray;
        break;
      }

      // repeated .pb.TArenaUser OpponentArray = 6;
      case 6: {
        if (tag == 50) {
         parse_OpponentArray:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_opponentarray()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_OpponentArray;
        if (input->ExpectTag(56)) goto parse_BreakoutReward;
        break;
      }

      // optional uint32 BreakoutReward = 7;
      case 7: {
        if (tag == 56) {
         parse_BreakoutReward:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &breakoutreward_)));
          set_has_breakoutreward();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_UserExp;
        break;
      }

      // optional uint32 UserExp = 8;
      case 8: {
        if (tag == 64) {
         parse_UserExp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &userexp_)));
          set_has_userexp();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(74)) goto parse_CoinReward;
        break;
      }

      // repeated .pb.TCommonReward CoinReward = 9;
      case 9: {
        if (tag == 74) {
         parse_CoinReward:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_coinreward()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(74)) goto parse_CoinReward;
        if (input->ExpectTag(82)) goto parse_FlopReward;
        break;
      }

      // repeated .pb.TCommonReward FlopReward = 10;
      case 10: {
        if (tag == 82) {
         parse_FlopReward:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_flopreward()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(82)) goto parse_FlopReward;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TArenaChallengeRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TArenaChallengeRsp)
  return false;
#undef DO_
}

void TArenaChallengeRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TArenaChallengeRsp)
  // optional bool RefreshOppt = 1;
  if (has_refreshoppt()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->refreshoppt(), output);
  }

  // optional uint32 Position = 2;
  if (has_position()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->position(), output);
  }

  // optional bool IsWin = 3;
  if (has_iswin()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->iswin(), output);
  }

  // optional .pb.TBattleResult FightRet = 4;
  if (has_fightret()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->fightret(), output);
  }

  // repeated .pb.TArenaUser TopArray = 5;
  for (int i = 0; i < this->toparray_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->toparray(i), output);
  }

  // repeated .pb.TArenaUser OpponentArray = 6;
  for (int i = 0; i < this->opponentarray_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->opponentarray(i), output);
  }

  // optional uint32 BreakoutReward = 7;
  if (has_breakoutreward()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->breakoutreward(), output);
  }

  // optional uint32 UserExp = 8;
  if (has_userexp()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->userexp(), output);
  }

  // repeated .pb.TCommonReward CoinReward = 9;
  for (int i = 0; i < this->coinreward_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, this->coinreward(i), output);
  }

  // repeated .pb.TCommonReward FlopReward = 10;
  for (int i = 0; i < this->flopreward_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, this->flopreward(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TArenaChallengeRsp)
}

::google::protobuf::uint8* TArenaChallengeRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TArenaChallengeRsp)
  // optional bool RefreshOppt = 1;
  if (has_refreshoppt()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->refreshoppt(), target);
  }

  // optional uint32 Position = 2;
  if (has_position()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->position(), target);
  }

  // optional bool IsWin = 3;
  if (has_iswin()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->iswin(), target);
  }

  // optional .pb.TBattleResult FightRet = 4;
  if (has_fightret()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->fightret(), target);
  }

  // repeated .pb.TArenaUser TopArray = 5;
  for (int i = 0; i < this->toparray_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->toparray(i), target);
  }

  // repeated .pb.TArenaUser OpponentArray = 6;
  for (int i = 0; i < this->opponentarray_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->opponentarray(i), target);
  }

  // optional uint32 BreakoutReward = 7;
  if (has_breakoutreward()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->breakoutreward(), target);
  }

  // optional uint32 UserExp = 8;
  if (has_userexp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->userexp(), target);
  }

  // repeated .pb.TCommonReward CoinReward = 9;
  for (int i = 0; i < this->coinreward_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        9, this->coinreward(i), target);
  }

  // repeated .pb.TCommonReward FlopReward = 10;
  for (int i = 0; i < this->flopreward_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        10, this->flopreward(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TArenaChallengeRsp)
  return target;
}

int TArenaChallengeRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bool RefreshOppt = 1;
    if (has_refreshoppt()) {
      total_size += 1 + 1;
    }

    // optional uint32 Position = 2;
    if (has_position()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->position());
    }

    // optional bool IsWin = 3;
    if (has_iswin()) {
      total_size += 1 + 1;
    }

    // optional .pb.TBattleResult FightRet = 4;
    if (has_fightret()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->fightret());
    }

    // optional uint32 BreakoutReward = 7;
    if (has_breakoutreward()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->breakoutreward());
    }

    // optional uint32 UserExp = 8;
    if (has_userexp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->userexp());
    }

  }
  // repeated .pb.TArenaUser TopArray = 5;
  total_size += 1 * this->toparray_size();
  for (int i = 0; i < this->toparray_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->toparray(i));
  }

  // repeated .pb.TArenaUser OpponentArray = 6;
  total_size += 1 * this->opponentarray_size();
  for (int i = 0; i < this->opponentarray_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->opponentarray(i));
  }

  // repeated .pb.TCommonReward CoinReward = 9;
  total_size += 1 * this->coinreward_size();
  for (int i = 0; i < this->coinreward_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->coinreward(i));
  }

  // repeated .pb.TCommonReward FlopReward = 10;
  total_size += 1 * this->flopreward_size();
  for (int i = 0; i < this->flopreward_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->flopreward(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TArenaChallengeRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TArenaChallengeRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TArenaChallengeRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TArenaChallengeRsp::MergeFrom(const TArenaChallengeRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  toparray_.MergeFrom(from.toparray_);
  opponentarray_.MergeFrom(from.opponentarray_);
  coinreward_.MergeFrom(from.coinreward_);
  flopreward_.MergeFrom(from.flopreward_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_refreshoppt()) {
      set_refreshoppt(from.refreshoppt());
    }
    if (from.has_position()) {
      set_position(from.position());
    }
    if (from.has_iswin()) {
      set_iswin(from.iswin());
    }
    if (from.has_fightret()) {
      mutable_fightret()->::pb::TBattleResult::MergeFrom(from.fightret());
    }
    if (from.has_breakoutreward()) {
      set_breakoutreward(from.breakoutreward());
    }
    if (from.has_userexp()) {
      set_userexp(from.userexp());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TArenaChallengeRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TArenaChallengeRsp::CopyFrom(const TArenaChallengeRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TArenaChallengeRsp::IsInitialized() const {

  if (has_fightret()) {
    if (!this->fightret().IsInitialized()) return false;
  }
  return true;
}

void TArenaChallengeRsp::Swap(TArenaChallengeRsp* other) {
  if (other != this) {
    std::swap(refreshoppt_, other->refreshoppt_);
    std::swap(position_, other->position_);
    std::swap(iswin_, other->iswin_);
    std::swap(fightret_, other->fightret_);
    toparray_.Swap(&other->toparray_);
    opponentarray_.Swap(&other->opponentarray_);
    std::swap(breakoutreward_, other->breakoutreward_);
    std::swap(userexp_, other->userexp_);
    coinreward_.Swap(&other->coinreward_);
    flopreward_.Swap(&other->flopreward_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TArenaChallengeRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TArenaChallengeRsp_descriptor_;
  metadata.reflection = TArenaChallengeRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TArenaQuickChallengeReq::kAttackPosFieldNumber;
const int TArenaQuickChallengeReq::kDefendPosFieldNumber;
const int TArenaQuickChallengeReq::kDefendUidFieldNumber;
const int TArenaQuickChallengeReq::kNumFieldNumber;
#endif  // !_MSC_VER

TArenaQuickChallengeReq::TArenaQuickChallengeReq()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TArenaQuickChallengeReq)
}

void TArenaQuickChallengeReq::InitAsDefaultInstance() {
}

TArenaQuickChallengeReq::TArenaQuickChallengeReq(const TArenaQuickChallengeReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TArenaQuickChallengeReq)
}

void TArenaQuickChallengeReq::SharedCtor() {
  _cached_size_ = 0;
  attackpos_ = 0u;
  defendpos_ = 0u;
  defenduid_ = GOOGLE_ULONGLONG(0);
  num_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TArenaQuickChallengeReq::~TArenaQuickChallengeReq() {
  // @@protoc_insertion_point(destructor:pb.TArenaQuickChallengeReq)
  SharedDtor();
}

void TArenaQuickChallengeReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TArenaQuickChallengeReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TArenaQuickChallengeReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TArenaQuickChallengeReq_descriptor_;
}

const TArenaQuickChallengeReq& TArenaQuickChallengeReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fArena_2eproto();
  return *default_instance_;
}

TArenaQuickChallengeReq* TArenaQuickChallengeReq::default_instance_ = NULL;

TArenaQuickChallengeReq* TArenaQuickChallengeReq::New() const {
  return new TArenaQuickChallengeReq;
}

void TArenaQuickChallengeReq::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<TArenaQuickChallengeReq*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(attackpos_, num_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TArenaQuickChallengeReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TArenaQuickChallengeReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 AttackPos = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &attackpos_)));
          set_has_attackpos();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_DefendPos;
        break;
      }

      // optional uint32 DefendPos = 2;
      case 2: {
        if (tag == 16) {
         parse_DefendPos:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &defendpos_)));
          set_has_defendpos();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_DefendUid;
        break;
      }

      // optional uint64 DefendUid = 3;
      case 3: {
        if (tag == 24) {
         parse_DefendUid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &defenduid_)));
          set_has_defenduid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_Num;
        break;
      }

      // optional uint32 Num = 4;
      case 4: {
        if (tag == 32) {
         parse_Num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &num_)));
          set_has_num();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TArenaQuickChallengeReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TArenaQuickChallengeReq)
  return false;
#undef DO_
}

void TArenaQuickChallengeReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TArenaQuickChallengeReq)
  // optional uint32 AttackPos = 1;
  if (has_attackpos()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->attackpos(), output);
  }

  // optional uint32 DefendPos = 2;
  if (has_defendpos()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->defendpos(), output);
  }

  // optional uint64 DefendUid = 3;
  if (has_defenduid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->defenduid(), output);
  }

  // optional uint32 Num = 4;
  if (has_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->num(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TArenaQuickChallengeReq)
}

::google::protobuf::uint8* TArenaQuickChallengeReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TArenaQuickChallengeReq)
  // optional uint32 AttackPos = 1;
  if (has_attackpos()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->attackpos(), target);
  }

  // optional uint32 DefendPos = 2;
  if (has_defendpos()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->defendpos(), target);
  }

  // optional uint64 DefendUid = 3;
  if (has_defenduid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->defenduid(), target);
  }

  // optional uint32 Num = 4;
  if (has_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->num(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TArenaQuickChallengeReq)
  return target;
}

int TArenaQuickChallengeReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 AttackPos = 1;
    if (has_attackpos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->attackpos());
    }

    // optional uint32 DefendPos = 2;
    if (has_defendpos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->defendpos());
    }

    // optional uint64 DefendUid = 3;
    if (has_defenduid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->defenduid());
    }

    // optional uint32 Num = 4;
    if (has_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->num());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TArenaQuickChallengeReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TArenaQuickChallengeReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TArenaQuickChallengeReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TArenaQuickChallengeReq::MergeFrom(const TArenaQuickChallengeReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_attackpos()) {
      set_attackpos(from.attackpos());
    }
    if (from.has_defendpos()) {
      set_defendpos(from.defendpos());
    }
    if (from.has_defenduid()) {
      set_defenduid(from.defenduid());
    }
    if (from.has_num()) {
      set_num(from.num());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TArenaQuickChallengeReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TArenaQuickChallengeReq::CopyFrom(const TArenaQuickChallengeReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TArenaQuickChallengeReq::IsInitialized() const {

  return true;
}

void TArenaQuickChallengeReq::Swap(TArenaQuickChallengeReq* other) {
  if (other != this) {
    std::swap(attackpos_, other->attackpos_);
    std::swap(defendpos_, other->defendpos_);
    std::swap(defenduid_, other->defenduid_);
    std::swap(num_, other->num_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TArenaQuickChallengeReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TArenaQuickChallengeReq_descriptor_;
  metadata.reflection = TArenaQuickChallengeReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TArenaQuickChallengeReward::kUserExpFieldNumber;
const int TArenaQuickChallengeReward::kCoinRewardFieldNumber;
const int TArenaQuickChallengeReward::kFlopRewardFieldNumber;
#endif  // !_MSC_VER

TArenaQuickChallengeReward::TArenaQuickChallengeReward()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TArenaQuickChallengeReward)
}

void TArenaQuickChallengeReward::InitAsDefaultInstance() {
}

TArenaQuickChallengeReward::TArenaQuickChallengeReward(const TArenaQuickChallengeReward& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TArenaQuickChallengeReward)
}

void TArenaQuickChallengeReward::SharedCtor() {
  _cached_size_ = 0;
  userexp_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TArenaQuickChallengeReward::~TArenaQuickChallengeReward() {
  // @@protoc_insertion_point(destructor:pb.TArenaQuickChallengeReward)
  SharedDtor();
}

void TArenaQuickChallengeReward::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TArenaQuickChallengeReward::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TArenaQuickChallengeReward::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TArenaQuickChallengeReward_descriptor_;
}

const TArenaQuickChallengeReward& TArenaQuickChallengeReward::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fArena_2eproto();
  return *default_instance_;
}

TArenaQuickChallengeReward* TArenaQuickChallengeReward::default_instance_ = NULL;

TArenaQuickChallengeReward* TArenaQuickChallengeReward::New() const {
  return new TArenaQuickChallengeReward;
}

void TArenaQuickChallengeReward::Clear() {
  userexp_ = 0u;
  coinreward_.Clear();
  flopreward_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TArenaQuickChallengeReward::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TArenaQuickChallengeReward)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 UserExp = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &userexp_)));
          set_has_userexp();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_CoinReward;
        break;
      }

      // repeated .pb.TCommonReward CoinReward = 2;
      case 2: {
        if (tag == 18) {
         parse_CoinReward:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_coinreward()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_CoinReward;
        if (input->ExpectTag(26)) goto parse_FlopReward;
        break;
      }

      // repeated .pb.TCommonReward FlopReward = 3;
      case 3: {
        if (tag == 26) {
         parse_FlopReward:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_flopreward()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_FlopReward;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TArenaQuickChallengeReward)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TArenaQuickChallengeReward)
  return false;
#undef DO_
}

void TArenaQuickChallengeReward::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TArenaQuickChallengeReward)
  // optional uint32 UserExp = 1;
  if (has_userexp()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->userexp(), output);
  }

  // repeated .pb.TCommonReward CoinReward = 2;
  for (int i = 0; i < this->coinreward_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->coinreward(i), output);
  }

  // repeated .pb.TCommonReward FlopReward = 3;
  for (int i = 0; i < this->flopreward_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->flopreward(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TArenaQuickChallengeReward)
}

::google::protobuf::uint8* TArenaQuickChallengeReward::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TArenaQuickChallengeReward)
  // optional uint32 UserExp = 1;
  if (has_userexp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->userexp(), target);
  }

  // repeated .pb.TCommonReward CoinReward = 2;
  for (int i = 0; i < this->coinreward_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->coinreward(i), target);
  }

  // repeated .pb.TCommonReward FlopReward = 3;
  for (int i = 0; i < this->flopreward_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->flopreward(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TArenaQuickChallengeReward)
  return target;
}

int TArenaQuickChallengeReward::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 UserExp = 1;
    if (has_userexp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->userexp());
    }

  }
  // repeated .pb.TCommonReward CoinReward = 2;
  total_size += 1 * this->coinreward_size();
  for (int i = 0; i < this->coinreward_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->coinreward(i));
  }

  // repeated .pb.TCommonReward FlopReward = 3;
  total_size += 1 * this->flopreward_size();
  for (int i = 0; i < this->flopreward_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->flopreward(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TArenaQuickChallengeReward::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TArenaQuickChallengeReward* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TArenaQuickChallengeReward*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TArenaQuickChallengeReward::MergeFrom(const TArenaQuickChallengeReward& from) {
  GOOGLE_CHECK_NE(&from, this);
  coinreward_.MergeFrom(from.coinreward_);
  flopreward_.MergeFrom(from.flopreward_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_userexp()) {
      set_userexp(from.userexp());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TArenaQuickChallengeReward::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TArenaQuickChallengeReward::CopyFrom(const TArenaQuickChallengeReward& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TArenaQuickChallengeReward::IsInitialized() const {

  return true;
}

void TArenaQuickChallengeReward::Swap(TArenaQuickChallengeReward* other) {
  if (other != this) {
    std::swap(userexp_, other->userexp_);
    coinreward_.Swap(&other->coinreward_);
    flopreward_.Swap(&other->flopreward_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TArenaQuickChallengeReward::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TArenaQuickChallengeReward_descriptor_;
  metadata.reflection = TArenaQuickChallengeReward_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TArenaQuickChallengeRsp::kRefreshOpptFieldNumber;
const int TArenaQuickChallengeRsp::kPositionFieldNumber;
const int TArenaQuickChallengeRsp::kOpponentArrayFieldNumber;
const int TArenaQuickChallengeRsp::kTopArrayFieldNumber;
const int TArenaQuickChallengeRsp::kRewardArrFieldNumber;
#endif  // !_MSC_VER

TArenaQuickChallengeRsp::TArenaQuickChallengeRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TArenaQuickChallengeRsp)
}

void TArenaQuickChallengeRsp::InitAsDefaultInstance() {
}

TArenaQuickChallengeRsp::TArenaQuickChallengeRsp(const TArenaQuickChallengeRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TArenaQuickChallengeRsp)
}

void TArenaQuickChallengeRsp::SharedCtor() {
  _cached_size_ = 0;
  refreshoppt_ = false;
  position_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TArenaQuickChallengeRsp::~TArenaQuickChallengeRsp() {
  // @@protoc_insertion_point(destructor:pb.TArenaQuickChallengeRsp)
  SharedDtor();
}

void TArenaQuickChallengeRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TArenaQuickChallengeRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TArenaQuickChallengeRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TArenaQuickChallengeRsp_descriptor_;
}

const TArenaQuickChallengeRsp& TArenaQuickChallengeRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fArena_2eproto();
  return *default_instance_;
}

TArenaQuickChallengeRsp* TArenaQuickChallengeRsp::default_instance_ = NULL;

TArenaQuickChallengeRsp* TArenaQuickChallengeRsp::New() const {
  return new TArenaQuickChallengeRsp;
}

void TArenaQuickChallengeRsp::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<TArenaQuickChallengeRsp*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(refreshoppt_, position_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  opponentarray_.Clear();
  toparray_.Clear();
  rewardarr_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TArenaQuickChallengeRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TArenaQuickChallengeRsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool RefreshOppt = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &refreshoppt_)));
          set_has_refreshoppt();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_Position;
        break;
      }

      // optional uint32 Position = 2;
      case 2: {
        if (tag == 16) {
         parse_Position:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &position_)));
          set_has_position();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_OpponentArray;
        break;
      }

      // repeated .pb.TArenaUser OpponentArray = 3;
      case 3: {
        if (tag == 26) {
         parse_OpponentArray:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_opponentarray()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_OpponentArray;
        if (input->ExpectTag(34)) goto parse_TopArray;
        break;
      }

      // repeated .pb.TArenaUser TopArray = 4;
      case 4: {
        if (tag == 34) {
         parse_TopArray:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_toparray()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_TopArray;
        if (input->ExpectTag(42)) goto parse_RewardArr;
        break;
      }

      // repeated .pb.TArenaQuickChallengeReward RewardArr = 5;
      case 5: {
        if (tag == 42) {
         parse_RewardArr:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_rewardarr()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_RewardArr;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TArenaQuickChallengeRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TArenaQuickChallengeRsp)
  return false;
#undef DO_
}

void TArenaQuickChallengeRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TArenaQuickChallengeRsp)
  // optional bool RefreshOppt = 1;
  if (has_refreshoppt()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->refreshoppt(), output);
  }

  // optional uint32 Position = 2;
  if (has_position()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->position(), output);
  }

  // repeated .pb.TArenaUser OpponentArray = 3;
  for (int i = 0; i < this->opponentarray_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->opponentarray(i), output);
  }

  // repeated .pb.TArenaUser TopArray = 4;
  for (int i = 0; i < this->toparray_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->toparray(i), output);
  }

  // repeated .pb.TArenaQuickChallengeReward RewardArr = 5;
  for (int i = 0; i < this->rewardarr_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->rewardarr(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TArenaQuickChallengeRsp)
}

::google::protobuf::uint8* TArenaQuickChallengeRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TArenaQuickChallengeRsp)
  // optional bool RefreshOppt = 1;
  if (has_refreshoppt()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->refreshoppt(), target);
  }

  // optional uint32 Position = 2;
  if (has_position()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->position(), target);
  }

  // repeated .pb.TArenaUser OpponentArray = 3;
  for (int i = 0; i < this->opponentarray_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->opponentarray(i), target);
  }

  // repeated .pb.TArenaUser TopArray = 4;
  for (int i = 0; i < this->toparray_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->toparray(i), target);
  }

  // repeated .pb.TArenaQuickChallengeReward RewardArr = 5;
  for (int i = 0; i < this->rewardarr_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->rewardarr(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TArenaQuickChallengeRsp)
  return target;
}

int TArenaQuickChallengeRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bool RefreshOppt = 1;
    if (has_refreshoppt()) {
      total_size += 1 + 1;
    }

    // optional uint32 Position = 2;
    if (has_position()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->position());
    }

  }
  // repeated .pb.TArenaUser OpponentArray = 3;
  total_size += 1 * this->opponentarray_size();
  for (int i = 0; i < this->opponentarray_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->opponentarray(i));
  }

  // repeated .pb.TArenaUser TopArray = 4;
  total_size += 1 * this->toparray_size();
  for (int i = 0; i < this->toparray_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->toparray(i));
  }

  // repeated .pb.TArenaQuickChallengeReward RewardArr = 5;
  total_size += 1 * this->rewardarr_size();
  for (int i = 0; i < this->rewardarr_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->rewardarr(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TArenaQuickChallengeRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TArenaQuickChallengeRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TArenaQuickChallengeRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TArenaQuickChallengeRsp::MergeFrom(const TArenaQuickChallengeRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  opponentarray_.MergeFrom(from.opponentarray_);
  toparray_.MergeFrom(from.toparray_);
  rewardarr_.MergeFrom(from.rewardarr_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_refreshoppt()) {
      set_refreshoppt(from.refreshoppt());
    }
    if (from.has_position()) {
      set_position(from.position());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TArenaQuickChallengeRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TArenaQuickChallengeRsp::CopyFrom(const TArenaQuickChallengeRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TArenaQuickChallengeRsp::IsInitialized() const {

  return true;
}

void TArenaQuickChallengeRsp::Swap(TArenaQuickChallengeRsp* other) {
  if (other != this) {
    std::swap(refreshoppt_, other->refreshoppt_);
    std::swap(position_, other->position_);
    opponentarray_.Swap(&other->opponentarray_);
    toparray_.Swap(&other->toparray_);
    rewardarr_.Swap(&other->rewardarr_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TArenaQuickChallengeRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TArenaQuickChallengeRsp_descriptor_;
  metadata.reflection = TArenaQuickChallengeRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TArenaRevengeReq::kEnemyUidFieldNumber;
const int TArenaRevengeReq::kHidArrayFieldNumber;
#endif  // !_MSC_VER

TArenaRevengeReq::TArenaRevengeReq()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TArenaRevengeReq)
}

void TArenaRevengeReq::InitAsDefaultInstance() {
}

TArenaRevengeReq::TArenaRevengeReq(const TArenaRevengeReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TArenaRevengeReq)
}

void TArenaRevengeReq::SharedCtor() {
  _cached_size_ = 0;
  enemyuid_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TArenaRevengeReq::~TArenaRevengeReq() {
  // @@protoc_insertion_point(destructor:pb.TArenaRevengeReq)
  SharedDtor();
}

void TArenaRevengeReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TArenaRevengeReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TArenaRevengeReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TArenaRevengeReq_descriptor_;
}

const TArenaRevengeReq& TArenaRevengeReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fArena_2eproto();
  return *default_instance_;
}

TArenaRevengeReq* TArenaRevengeReq::default_instance_ = NULL;

TArenaRevengeReq* TArenaRevengeReq::New() const {
  return new TArenaRevengeReq;
}

void TArenaRevengeReq::Clear() {
  enemyuid_ = GOOGLE_ULONGLONG(0);
  hidarray_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TArenaRevengeReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TArenaRevengeReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 EnemyUid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &enemyuid_)));
          set_has_enemyuid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_HidArray;
        break;
      }

      // repeated uint32 HidArray = 2;
      case 2: {
        if (tag == 16) {
         parse_HidArray:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 16, input, this->mutable_hidarray())));
        } else if (tag == 18) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_hidarray())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_HidArray;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TArenaRevengeReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TArenaRevengeReq)
  return false;
#undef DO_
}

void TArenaRevengeReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TArenaRevengeReq)
  // optional uint64 EnemyUid = 1;
  if (has_enemyuid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->enemyuid(), output);
  }

  // repeated uint32 HidArray = 2;
  for (int i = 0; i < this->hidarray_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      2, this->hidarray(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TArenaRevengeReq)
}

::google::protobuf::uint8* TArenaRevengeReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TArenaRevengeReq)
  // optional uint64 EnemyUid = 1;
  if (has_enemyuid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->enemyuid(), target);
  }

  // repeated uint32 HidArray = 2;
  for (int i = 0; i < this->hidarray_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(2, this->hidarray(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TArenaRevengeReq)
  return target;
}

int TArenaRevengeReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 EnemyUid = 1;
    if (has_enemyuid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->enemyuid());
    }

  }
  // repeated uint32 HidArray = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->hidarray_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->hidarray(i));
    }
    total_size += 1 * this->hidarray_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TArenaRevengeReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TArenaRevengeReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TArenaRevengeReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TArenaRevengeReq::MergeFrom(const TArenaRevengeReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  hidarray_.MergeFrom(from.hidarray_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_enemyuid()) {
      set_enemyuid(from.enemyuid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TArenaRevengeReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TArenaRevengeReq::CopyFrom(const TArenaRevengeReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TArenaRevengeReq::IsInitialized() const {

  return true;
}

void TArenaRevengeReq::Swap(TArenaRevengeReq* other) {
  if (other != this) {
    std::swap(enemyuid_, other->enemyuid_);
    hidarray_.Swap(&other->hidarray_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TArenaRevengeReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TArenaRevengeReq_descriptor_;
  metadata.reflection = TArenaRevengeReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TArenaRevengeRsp::kAttackPosFieldNumber;
const int TArenaRevengeRsp::kEnemyPosFieldNumber;
const int TArenaRevengeRsp::kEnemyUidFieldNumber;
const int TArenaRevengeRsp::kChallengeRspFieldNumber;
#endif  // !_MSC_VER

TArenaRevengeRsp::TArenaRevengeRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TArenaRevengeRsp)
}

void TArenaRevengeRsp::InitAsDefaultInstance() {
  challengersp_ = const_cast< ::pb::TArenaChallengeRsp*>(&::pb::TArenaChallengeRsp::default_instance());
}

TArenaRevengeRsp::TArenaRevengeRsp(const TArenaRevengeRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TArenaRevengeRsp)
}

void TArenaRevengeRsp::SharedCtor() {
  _cached_size_ = 0;
  attackpos_ = 0u;
  enemypos_ = 0u;
  enemyuid_ = GOOGLE_ULONGLONG(0);
  challengersp_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TArenaRevengeRsp::~TArenaRevengeRsp() {
  // @@protoc_insertion_point(destructor:pb.TArenaRevengeRsp)
  SharedDtor();
}

void TArenaRevengeRsp::SharedDtor() {
  if (this != default_instance_) {
    delete challengersp_;
  }
}

void TArenaRevengeRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TArenaRevengeRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TArenaRevengeRsp_descriptor_;
}

const TArenaRevengeRsp& TArenaRevengeRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fArena_2eproto();
  return *default_instance_;
}

TArenaRevengeRsp* TArenaRevengeRsp::default_instance_ = NULL;

TArenaRevengeRsp* TArenaRevengeRsp::New() const {
  return new TArenaRevengeRsp;
}

void TArenaRevengeRsp::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<TArenaRevengeRsp*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 15) {
    ZR_(attackpos_, enemyuid_);
    if (has_challengersp()) {
      if (challengersp_ != NULL) challengersp_->::pb::TArenaChallengeRsp::Clear();
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TArenaRevengeRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TArenaRevengeRsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 AttackPos = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &attackpos_)));
          set_has_attackpos();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_EnemyPos;
        break;
      }

      // optional uint32 EnemyPos = 2;
      case 2: {
        if (tag == 16) {
         parse_EnemyPos:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &enemypos_)));
          set_has_enemypos();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_EnemyUid;
        break;
      }

      // optional uint64 EnemyUid = 3;
      case 3: {
        if (tag == 24) {
         parse_EnemyUid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &enemyuid_)));
          set_has_enemyuid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_ChallengeRsp;
        break;
      }

      // optional .pb.TArenaChallengeRsp ChallengeRsp = 4;
      case 4: {
        if (tag == 34) {
         parse_ChallengeRsp:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_challengersp()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TArenaRevengeRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TArenaRevengeRsp)
  return false;
#undef DO_
}

void TArenaRevengeRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TArenaRevengeRsp)
  // optional uint32 AttackPos = 1;
  if (has_attackpos()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->attackpos(), output);
  }

  // optional uint32 EnemyPos = 2;
  if (has_enemypos()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->enemypos(), output);
  }

  // optional uint64 EnemyUid = 3;
  if (has_enemyuid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->enemyuid(), output);
  }

  // optional .pb.TArenaChallengeRsp ChallengeRsp = 4;
  if (has_challengersp()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->challengersp(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TArenaRevengeRsp)
}

::google::protobuf::uint8* TArenaRevengeRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TArenaRevengeRsp)
  // optional uint32 AttackPos = 1;
  if (has_attackpos()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->attackpos(), target);
  }

  // optional uint32 EnemyPos = 2;
  if (has_enemypos()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->enemypos(), target);
  }

  // optional uint64 EnemyUid = 3;
  if (has_enemyuid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->enemyuid(), target);
  }

  // optional .pb.TArenaChallengeRsp ChallengeRsp = 4;
  if (has_challengersp()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->challengersp(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TArenaRevengeRsp)
  return target;
}

int TArenaRevengeRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 AttackPos = 1;
    if (has_attackpos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->attackpos());
    }

    // optional uint32 EnemyPos = 2;
    if (has_enemypos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->enemypos());
    }

    // optional uint64 EnemyUid = 3;
    if (has_enemyuid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->enemyuid());
    }

    // optional .pb.TArenaChallengeRsp ChallengeRsp = 4;
    if (has_challengersp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->challengersp());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TArenaRevengeRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TArenaRevengeRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TArenaRevengeRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TArenaRevengeRsp::MergeFrom(const TArenaRevengeRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_attackpos()) {
      set_attackpos(from.attackpos());
    }
    if (from.has_enemypos()) {
      set_enemypos(from.enemypos());
    }
    if (from.has_enemyuid()) {
      set_enemyuid(from.enemyuid());
    }
    if (from.has_challengersp()) {
      mutable_challengersp()->::pb::TArenaChallengeRsp::MergeFrom(from.challengersp());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TArenaRevengeRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TArenaRevengeRsp::CopyFrom(const TArenaRevengeRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TArenaRevengeRsp::IsInitialized() const {

  if (has_challengersp()) {
    if (!this->challengersp().IsInitialized()) return false;
  }
  return true;
}

void TArenaRevengeRsp::Swap(TArenaRevengeRsp* other) {
  if (other != this) {
    std::swap(attackpos_, other->attackpos_);
    std::swap(enemypos_, other->enemypos_);
    std::swap(enemyuid_, other->enemyuid_);
    std::swap(challengersp_, other->challengersp_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TArenaRevengeRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TArenaRevengeRsp_descriptor_;
  metadata.reflection = TArenaRevengeRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TArenaBuyChallengeNumReq::kBuyNumFieldNumber;
#endif  // !_MSC_VER

TArenaBuyChallengeNumReq::TArenaBuyChallengeNumReq()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TArenaBuyChallengeNumReq)
}

void TArenaBuyChallengeNumReq::InitAsDefaultInstance() {
}

TArenaBuyChallengeNumReq::TArenaBuyChallengeNumReq(const TArenaBuyChallengeNumReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TArenaBuyChallengeNumReq)
}

void TArenaBuyChallengeNumReq::SharedCtor() {
  _cached_size_ = 0;
  buynum_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TArenaBuyChallengeNumReq::~TArenaBuyChallengeNumReq() {
  // @@protoc_insertion_point(destructor:pb.TArenaBuyChallengeNumReq)
  SharedDtor();
}

void TArenaBuyChallengeNumReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TArenaBuyChallengeNumReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TArenaBuyChallengeNumReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TArenaBuyChallengeNumReq_descriptor_;
}

const TArenaBuyChallengeNumReq& TArenaBuyChallengeNumReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fArena_2eproto();
  return *default_instance_;
}

TArenaBuyChallengeNumReq* TArenaBuyChallengeNumReq::default_instance_ = NULL;

TArenaBuyChallengeNumReq* TArenaBuyChallengeNumReq::New() const {
  return new TArenaBuyChallengeNumReq;
}

void TArenaBuyChallengeNumReq::Clear() {
  buynum_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TArenaBuyChallengeNumReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TArenaBuyChallengeNumReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 BuyNum = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &buynum_)));
          set_has_buynum();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TArenaBuyChallengeNumReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TArenaBuyChallengeNumReq)
  return false;
#undef DO_
}

void TArenaBuyChallengeNumReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TArenaBuyChallengeNumReq)
  // optional uint32 BuyNum = 1;
  if (has_buynum()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->buynum(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TArenaBuyChallengeNumReq)
}

::google::protobuf::uint8* TArenaBuyChallengeNumReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TArenaBuyChallengeNumReq)
  // optional uint32 BuyNum = 1;
  if (has_buynum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->buynum(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TArenaBuyChallengeNumReq)
  return target;
}

int TArenaBuyChallengeNumReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 BuyNum = 1;
    if (has_buynum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->buynum());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TArenaBuyChallengeNumReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TArenaBuyChallengeNumReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TArenaBuyChallengeNumReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TArenaBuyChallengeNumReq::MergeFrom(const TArenaBuyChallengeNumReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_buynum()) {
      set_buynum(from.buynum());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TArenaBuyChallengeNumReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TArenaBuyChallengeNumReq::CopyFrom(const TArenaBuyChallengeNumReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TArenaBuyChallengeNumReq::IsInitialized() const {

  return true;
}

void TArenaBuyChallengeNumReq::Swap(TArenaBuyChallengeNumReq* other) {
  if (other != this) {
    std::swap(buynum_, other->buynum_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TArenaBuyChallengeNumReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TArenaBuyChallengeNumReq_descriptor_;
  metadata.reflection = TArenaBuyChallengeNumReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TArenaUpdateArenaDataNotify::kPositionFieldNumber;
const int TArenaUpdateArenaDataNotify::kOpponentArrayFieldNumber;
const int TArenaUpdateArenaDataNotify::kTopArrayFieldNumber;
#endif  // !_MSC_VER

TArenaUpdateArenaDataNotify::TArenaUpdateArenaDataNotify()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TArenaUpdateArenaDataNotify)
}

void TArenaUpdateArenaDataNotify::InitAsDefaultInstance() {
}

TArenaUpdateArenaDataNotify::TArenaUpdateArenaDataNotify(const TArenaUpdateArenaDataNotify& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TArenaUpdateArenaDataNotify)
}

void TArenaUpdateArenaDataNotify::SharedCtor() {
  _cached_size_ = 0;
  position_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TArenaUpdateArenaDataNotify::~TArenaUpdateArenaDataNotify() {
  // @@protoc_insertion_point(destructor:pb.TArenaUpdateArenaDataNotify)
  SharedDtor();
}

void TArenaUpdateArenaDataNotify::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TArenaUpdateArenaDataNotify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TArenaUpdateArenaDataNotify::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TArenaUpdateArenaDataNotify_descriptor_;
}

const TArenaUpdateArenaDataNotify& TArenaUpdateArenaDataNotify::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fArena_2eproto();
  return *default_instance_;
}

TArenaUpdateArenaDataNotify* TArenaUpdateArenaDataNotify::default_instance_ = NULL;

TArenaUpdateArenaDataNotify* TArenaUpdateArenaDataNotify::New() const {
  return new TArenaUpdateArenaDataNotify;
}

void TArenaUpdateArenaDataNotify::Clear() {
  position_ = 0u;
  opponentarray_.Clear();
  toparray_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TArenaUpdateArenaDataNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TArenaUpdateArenaDataNotify)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 Position = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &position_)));
          set_has_position();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_OpponentArray;
        break;
      }

      // repeated .pb.TArenaUser OpponentArray = 2;
      case 2: {
        if (tag == 18) {
         parse_OpponentArray:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_opponentarray()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_OpponentArray;
        if (input->ExpectTag(26)) goto parse_TopArray;
        break;
      }

      // repeated .pb.TArenaUser TopArray = 3;
      case 3: {
        if (tag == 26) {
         parse_TopArray:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_toparray()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_TopArray;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TArenaUpdateArenaDataNotify)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TArenaUpdateArenaDataNotify)
  return false;
#undef DO_
}

void TArenaUpdateArenaDataNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TArenaUpdateArenaDataNotify)
  // optional uint32 Position = 1;
  if (has_position()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->position(), output);
  }

  // repeated .pb.TArenaUser OpponentArray = 2;
  for (int i = 0; i < this->opponentarray_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->opponentarray(i), output);
  }

  // repeated .pb.TArenaUser TopArray = 3;
  for (int i = 0; i < this->toparray_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->toparray(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TArenaUpdateArenaDataNotify)
}

::google::protobuf::uint8* TArenaUpdateArenaDataNotify::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TArenaUpdateArenaDataNotify)
  // optional uint32 Position = 1;
  if (has_position()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->position(), target);
  }

  // repeated .pb.TArenaUser OpponentArray = 2;
  for (int i = 0; i < this->opponentarray_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->opponentarray(i), target);
  }

  // repeated .pb.TArenaUser TopArray = 3;
  for (int i = 0; i < this->toparray_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->toparray(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TArenaUpdateArenaDataNotify)
  return target;
}

int TArenaUpdateArenaDataNotify::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 Position = 1;
    if (has_position()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->position());
    }

  }
  // repeated .pb.TArenaUser OpponentArray = 2;
  total_size += 1 * this->opponentarray_size();
  for (int i = 0; i < this->opponentarray_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->opponentarray(i));
  }

  // repeated .pb.TArenaUser TopArray = 3;
  total_size += 1 * this->toparray_size();
  for (int i = 0; i < this->toparray_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->toparray(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TArenaUpdateArenaDataNotify::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TArenaUpdateArenaDataNotify* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TArenaUpdateArenaDataNotify*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TArenaUpdateArenaDataNotify::MergeFrom(const TArenaUpdateArenaDataNotify& from) {
  GOOGLE_CHECK_NE(&from, this);
  opponentarray_.MergeFrom(from.opponentarray_);
  toparray_.MergeFrom(from.toparray_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_position()) {
      set_position(from.position());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TArenaUpdateArenaDataNotify::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TArenaUpdateArenaDataNotify::CopyFrom(const TArenaUpdateArenaDataNotify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TArenaUpdateArenaDataNotify::IsInitialized() const {

  return true;
}

void TArenaUpdateArenaDataNotify::Swap(TArenaUpdateArenaDataNotify* other) {
  if (other != this) {
    std::swap(position_, other->position_);
    opponentarray_.Swap(&other->opponentarray_);
    toparray_.Swap(&other->toparray_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TArenaUpdateArenaDataNotify::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TArenaUpdateArenaDataNotify_descriptor_;
  metadata.reflection = TArenaUpdateArenaDataNotify_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TArenaExchangeReq::kIdFieldNumber;
#endif  // !_MSC_VER

TArenaExchangeReq::TArenaExchangeReq()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TArenaExchangeReq)
}

void TArenaExchangeReq::InitAsDefaultInstance() {
}

TArenaExchangeReq::TArenaExchangeReq(const TArenaExchangeReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TArenaExchangeReq)
}

void TArenaExchangeReq::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TArenaExchangeReq::~TArenaExchangeReq() {
  // @@protoc_insertion_point(destructor:pb.TArenaExchangeReq)
  SharedDtor();
}

void TArenaExchangeReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TArenaExchangeReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TArenaExchangeReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TArenaExchangeReq_descriptor_;
}

const TArenaExchangeReq& TArenaExchangeReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fArena_2eproto();
  return *default_instance_;
}

TArenaExchangeReq* TArenaExchangeReq::default_instance_ = NULL;

TArenaExchangeReq* TArenaExchangeReq::New() const {
  return new TArenaExchangeReq;
}

void TArenaExchangeReq::Clear() {
  id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TArenaExchangeReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TArenaExchangeReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 Id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TArenaExchangeReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TArenaExchangeReq)
  return false;
#undef DO_
}

void TArenaExchangeReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TArenaExchangeReq)
  // optional uint32 Id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TArenaExchangeReq)
}

::google::protobuf::uint8* TArenaExchangeReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TArenaExchangeReq)
  // optional uint32 Id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TArenaExchangeReq)
  return target;
}

int TArenaExchangeReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 Id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TArenaExchangeReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TArenaExchangeReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TArenaExchangeReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TArenaExchangeReq::MergeFrom(const TArenaExchangeReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TArenaExchangeReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TArenaExchangeReq::CopyFrom(const TArenaExchangeReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TArenaExchangeReq::IsInitialized() const {

  return true;
}

void TArenaExchangeReq::Swap(TArenaExchangeReq* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TArenaExchangeReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TArenaExchangeReq_descriptor_;
  metadata.reflection = TArenaExchangeReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TArenaExchangeRsp::kRewardArrayFieldNumber;
#endif  // !_MSC_VER

TArenaExchangeRsp::TArenaExchangeRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TArenaExchangeRsp)
}

void TArenaExchangeRsp::InitAsDefaultInstance() {
}

TArenaExchangeRsp::TArenaExchangeRsp(const TArenaExchangeRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TArenaExchangeRsp)
}

void TArenaExchangeRsp::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TArenaExchangeRsp::~TArenaExchangeRsp() {
  // @@protoc_insertion_point(destructor:pb.TArenaExchangeRsp)
  SharedDtor();
}

void TArenaExchangeRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TArenaExchangeRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TArenaExchangeRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TArenaExchangeRsp_descriptor_;
}

const TArenaExchangeRsp& TArenaExchangeRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fArena_2eproto();
  return *default_instance_;
}

TArenaExchangeRsp* TArenaExchangeRsp::default_instance_ = NULL;

TArenaExchangeRsp* TArenaExchangeRsp::New() const {
  return new TArenaExchangeRsp;
}

void TArenaExchangeRsp::Clear() {
  rewardarray_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TArenaExchangeRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TArenaExchangeRsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .pb.TCommonReward RewardArray = 1;
      case 1: {
        if (tag == 10) {
         parse_RewardArray:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_rewardarray()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_RewardArray;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TArenaExchangeRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TArenaExchangeRsp)
  return false;
#undef DO_
}

void TArenaExchangeRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TArenaExchangeRsp)
  // repeated .pb.TCommonReward RewardArray = 1;
  for (int i = 0; i < this->rewardarray_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->rewardarray(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TArenaExchangeRsp)
}

::google::protobuf::uint8* TArenaExchangeRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TArenaExchangeRsp)
  // repeated .pb.TCommonReward RewardArray = 1;
  for (int i = 0; i < this->rewardarray_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->rewardarray(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TArenaExchangeRsp)
  return target;
}

int TArenaExchangeRsp::ByteSize() const {
  int total_size = 0;

  // repeated .pb.TCommonReward RewardArray = 1;
  total_size += 1 * this->rewardarray_size();
  for (int i = 0; i < this->rewardarray_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->rewardarray(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TArenaExchangeRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TArenaExchangeRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TArenaExchangeRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TArenaExchangeRsp::MergeFrom(const TArenaExchangeRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  rewardarray_.MergeFrom(from.rewardarray_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TArenaExchangeRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TArenaExchangeRsp::CopyFrom(const TArenaExchangeRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TArenaExchangeRsp::IsInitialized() const {

  return true;
}

void TArenaExchangeRsp::Swap(TArenaExchangeRsp* other) {
  if (other != this) {
    rewardarray_.Swap(&other->rewardarray_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TArenaExchangeRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TArenaExchangeRsp_descriptor_;
  metadata.reflection = TArenaExchangeRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TArenaRecordInfo::kAttackUserInfoFieldNumber;
const int TArenaRecordInfo::kDefendUserInfoFieldNumber;
const int TArenaRecordInfo::kAttackPosFieldNumber;
const int TArenaRecordInfo::kDefendPosFieldNumber;
const int TArenaRecordInfo::kIsWinFieldNumber;
const int TArenaRecordInfo::kRecordIdFieldNumber;
const int TArenaRecordInfo::kRecordTimeFieldNumber;
#endif  // !_MSC_VER

TArenaRecordInfo::TArenaRecordInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TArenaRecordInfo)
}

void TArenaRecordInfo::InitAsDefaultInstance() {
  attackuserinfo_ = const_cast< ::pb::TUserSimpleInfo*>(&::pb::TUserSimpleInfo::default_instance());
  defenduserinfo_ = const_cast< ::pb::TUserSimpleInfo*>(&::pb::TUserSimpleInfo::default_instance());
}

TArenaRecordInfo::TArenaRecordInfo(const TArenaRecordInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TArenaRecordInfo)
}

void TArenaRecordInfo::SharedCtor() {
  _cached_size_ = 0;
  attackuserinfo_ = NULL;
  defenduserinfo_ = NULL;
  attackpos_ = 0u;
  defendpos_ = 0u;
  iswin_ = false;
  recordid_ = 0u;
  recordtime_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TArenaRecordInfo::~TArenaRecordInfo() {
  // @@protoc_insertion_point(destructor:pb.TArenaRecordInfo)
  SharedDtor();
}

void TArenaRecordInfo::SharedDtor() {
  if (this != default_instance_) {
    delete attackuserinfo_;
    delete defenduserinfo_;
  }
}

void TArenaRecordInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TArenaRecordInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TArenaRecordInfo_descriptor_;
}

const TArenaRecordInfo& TArenaRecordInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fArena_2eproto();
  return *default_instance_;
}

TArenaRecordInfo* TArenaRecordInfo::default_instance_ = NULL;

TArenaRecordInfo* TArenaRecordInfo::New() const {
  return new TArenaRecordInfo;
}

void TArenaRecordInfo::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<TArenaRecordInfo*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 127) {
    ZR_(attackpos_, recordtime_);
    if (has_attackuserinfo()) {
      if (attackuserinfo_ != NULL) attackuserinfo_->::pb::TUserSimpleInfo::Clear();
    }
    if (has_defenduserinfo()) {
      if (defenduserinfo_ != NULL) defenduserinfo_->::pb::TUserSimpleInfo::Clear();
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TArenaRecordInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TArenaRecordInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .pb.TUserSimpleInfo AttackUserInfo = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_attackuserinfo()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_DefendUserInfo;
        break;
      }

      // optional .pb.TUserSimpleInfo DefendUserInfo = 2;
      case 2: {
        if (tag == 18) {
         parse_DefendUserInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_defenduserinfo()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_AttackPos;
        break;
      }

      // optional uint32 AttackPos = 3;
      case 3: {
        if (tag == 24) {
         parse_AttackPos:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &attackpos_)));
          set_has_attackpos();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_DefendPos;
        break;
      }

      // optional uint32 DefendPos = 4;
      case 4: {
        if (tag == 32) {
         parse_DefendPos:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &defendpos_)));
          set_has_defendpos();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_IsWin;
        break;
      }

      // optional bool IsWin = 5;
      case 5: {
        if (tag == 40) {
         parse_IsWin:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &iswin_)));
          set_has_iswin();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_RecordId;
        break;
      }

      // optional uint32 RecordId = 6;
      case 6: {
        if (tag == 48) {
         parse_RecordId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &recordid_)));
          set_has_recordid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_RecordTime;
        break;
      }

      // optional uint64 RecordTime = 7;
      case 7: {
        if (tag == 56) {
         parse_RecordTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &recordtime_)));
          set_has_recordtime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TArenaRecordInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TArenaRecordInfo)
  return false;
#undef DO_
}

void TArenaRecordInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TArenaRecordInfo)
  // optional .pb.TUserSimpleInfo AttackUserInfo = 1;
  if (has_attackuserinfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->attackuserinfo(), output);
  }

  // optional .pb.TUserSimpleInfo DefendUserInfo = 2;
  if (has_defenduserinfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->defenduserinfo(), output);
  }

  // optional uint32 AttackPos = 3;
  if (has_attackpos()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->attackpos(), output);
  }

  // optional uint32 DefendPos = 4;
  if (has_defendpos()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->defendpos(), output);
  }

  // optional bool IsWin = 5;
  if (has_iswin()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->iswin(), output);
  }

  // optional uint32 RecordId = 6;
  if (has_recordid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->recordid(), output);
  }

  // optional uint64 RecordTime = 7;
  if (has_recordtime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(7, this->recordtime(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TArenaRecordInfo)
}

::google::protobuf::uint8* TArenaRecordInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TArenaRecordInfo)
  // optional .pb.TUserSimpleInfo AttackUserInfo = 1;
  if (has_attackuserinfo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->attackuserinfo(), target);
  }

  // optional .pb.TUserSimpleInfo DefendUserInfo = 2;
  if (has_defenduserinfo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->defenduserinfo(), target);
  }

  // optional uint32 AttackPos = 3;
  if (has_attackpos()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->attackpos(), target);
  }

  // optional uint32 DefendPos = 4;
  if (has_defendpos()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->defendpos(), target);
  }

  // optional bool IsWin = 5;
  if (has_iswin()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->iswin(), target);
  }

  // optional uint32 RecordId = 6;
  if (has_recordid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->recordid(), target);
  }

  // optional uint64 RecordTime = 7;
  if (has_recordtime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(7, this->recordtime(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TArenaRecordInfo)
  return target;
}

int TArenaRecordInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .pb.TUserSimpleInfo AttackUserInfo = 1;
    if (has_attackuserinfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->attackuserinfo());
    }

    // optional .pb.TUserSimpleInfo DefendUserInfo = 2;
    if (has_defenduserinfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->defenduserinfo());
    }

    // optional uint32 AttackPos = 3;
    if (has_attackpos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->attackpos());
    }

    // optional uint32 DefendPos = 4;
    if (has_defendpos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->defendpos());
    }

    // optional bool IsWin = 5;
    if (has_iswin()) {
      total_size += 1 + 1;
    }

    // optional uint32 RecordId = 6;
    if (has_recordid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->recordid());
    }

    // optional uint64 RecordTime = 7;
    if (has_recordtime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->recordtime());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TArenaRecordInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TArenaRecordInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TArenaRecordInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TArenaRecordInfo::MergeFrom(const TArenaRecordInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_attackuserinfo()) {
      mutable_attackuserinfo()->::pb::TUserSimpleInfo::MergeFrom(from.attackuserinfo());
    }
    if (from.has_defenduserinfo()) {
      mutable_defenduserinfo()->::pb::TUserSimpleInfo::MergeFrom(from.defenduserinfo());
    }
    if (from.has_attackpos()) {
      set_attackpos(from.attackpos());
    }
    if (from.has_defendpos()) {
      set_defendpos(from.defendpos());
    }
    if (from.has_iswin()) {
      set_iswin(from.iswin());
    }
    if (from.has_recordid()) {
      set_recordid(from.recordid());
    }
    if (from.has_recordtime()) {
      set_recordtime(from.recordtime());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TArenaRecordInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TArenaRecordInfo::CopyFrom(const TArenaRecordInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TArenaRecordInfo::IsInitialized() const {

  return true;
}

void TArenaRecordInfo::Swap(TArenaRecordInfo* other) {
  if (other != this) {
    std::swap(attackuserinfo_, other->attackuserinfo_);
    std::swap(defenduserinfo_, other->defenduserinfo_);
    std::swap(attackpos_, other->attackpos_);
    std::swap(defendpos_, other->defendpos_);
    std::swap(iswin_, other->iswin_);
    std::swap(recordid_, other->recordid_);
    std::swap(recordtime_, other->recordtime_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TArenaRecordInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TArenaRecordInfo_descriptor_;
  metadata.reflection = TArenaRecordInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TArenaGetTopRecordsRsp::kRecordArrayFieldNumber;
#endif  // !_MSC_VER

TArenaGetTopRecordsRsp::TArenaGetTopRecordsRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TArenaGetTopRecordsRsp)
}

void TArenaGetTopRecordsRsp::InitAsDefaultInstance() {
}

TArenaGetTopRecordsRsp::TArenaGetTopRecordsRsp(const TArenaGetTopRecordsRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TArenaGetTopRecordsRsp)
}

void TArenaGetTopRecordsRsp::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TArenaGetTopRecordsRsp::~TArenaGetTopRecordsRsp() {
  // @@protoc_insertion_point(destructor:pb.TArenaGetTopRecordsRsp)
  SharedDtor();
}

void TArenaGetTopRecordsRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TArenaGetTopRecordsRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TArenaGetTopRecordsRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TArenaGetTopRecordsRsp_descriptor_;
}

const TArenaGetTopRecordsRsp& TArenaGetTopRecordsRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fArena_2eproto();
  return *default_instance_;
}

TArenaGetTopRecordsRsp* TArenaGetTopRecordsRsp::default_instance_ = NULL;

TArenaGetTopRecordsRsp* TArenaGetTopRecordsRsp::New() const {
  return new TArenaGetTopRecordsRsp;
}

void TArenaGetTopRecordsRsp::Clear() {
  recordarray_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TArenaGetTopRecordsRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TArenaGetTopRecordsRsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .pb.TArenaRecordInfo RecordArray = 1;
      case 1: {
        if (tag == 10) {
         parse_RecordArray:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_recordarray()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_RecordArray;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TArenaGetTopRecordsRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TArenaGetTopRecordsRsp)
  return false;
#undef DO_
}

void TArenaGetTopRecordsRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TArenaGetTopRecordsRsp)
  // repeated .pb.TArenaRecordInfo RecordArray = 1;
  for (int i = 0; i < this->recordarray_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->recordarray(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TArenaGetTopRecordsRsp)
}

::google::protobuf::uint8* TArenaGetTopRecordsRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TArenaGetTopRecordsRsp)
  // repeated .pb.TArenaRecordInfo RecordArray = 1;
  for (int i = 0; i < this->recordarray_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->recordarray(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TArenaGetTopRecordsRsp)
  return target;
}

int TArenaGetTopRecordsRsp::ByteSize() const {
  int total_size = 0;

  // repeated .pb.TArenaRecordInfo RecordArray = 1;
  total_size += 1 * this->recordarray_size();
  for (int i = 0; i < this->recordarray_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->recordarray(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TArenaGetTopRecordsRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TArenaGetTopRecordsRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TArenaGetTopRecordsRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TArenaGetTopRecordsRsp::MergeFrom(const TArenaGetTopRecordsRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  recordarray_.MergeFrom(from.recordarray_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TArenaGetTopRecordsRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TArenaGetTopRecordsRsp::CopyFrom(const TArenaGetTopRecordsRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TArenaGetTopRecordsRsp::IsInitialized() const {

  return true;
}

void TArenaGetTopRecordsRsp::Swap(TArenaGetTopRecordsRsp* other) {
  if (other != this) {
    recordarray_.Swap(&other->recordarray_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TArenaGetTopRecordsRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TArenaGetTopRecordsRsp_descriptor_;
  metadata.reflection = TArenaGetTopRecordsRsp_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace pb

// @@protoc_insertion_point(global_scope)
