// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: module/SkillData.proto

#ifndef PROTOBUF_module_2fSkillData_2eproto__INCLUDED
#define PROTOBUF_module_2fSkillData_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
#include "module/SkillBaseData.pb.h"
#include "module/SkillBaseData2.pb.h"
// @@protoc_insertion_point(includes)

namespace pb {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_module_2fSkillData_2eproto();
void protobuf_AssignDesc_module_2fSkillData_2eproto();
void protobuf_ShutdownFile_module_2fSkillData_2eproto();

class SkillEffectData;
class SkillHitData;
class SkillEnergyDrawData;
class SkillEnergyAssistData;
class SkillLifeStealData;
class SkillSpeicalAdjust;
class SkillDamageData;
class SkillHealData;
class SkillSummonObstacleData;
class SkillSummonData;
class SkillRebornData;
class SkillGrabData;
class SkillEnergyRecoverData;
class SkillSubSkillData;
class SkillData;

// ===================================================================

/*FOR2LUA
<Record>
	<name>SkillEffectData</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>module/SkillData.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class SkillEffectData : public ::google::protobuf::Message {
 public:
  SkillEffectData();
  virtual ~SkillEffectData();

  SkillEffectData(const SkillEffectData& from);

  inline SkillEffectData& operator=(const SkillEffectData& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SkillEffectData& default_instance();

  void Swap(SkillEffectData* other);

  // implements Message ----------------------------------------------

  SkillEffectData* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SkillEffectData& from);
  void MergeFrom(const SkillEffectData& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 EffectType = 1;
  inline bool has_effecttype() const;
  inline void clear_effecttype();
  static const int kEffectTypeFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>SkillEffectData</name>
  	<Function>
  		<name>effecttype</name>
  		<replaceName>EffectType</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_effecttype</name>
  		<replaceName>EffectType</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_effecttype</name>
  		<replaceName>EffectType</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::int32 effecttype() const;
  inline void set_effecttype(::google::protobuf::int32 value);

  // optional int32 OriginType = 2;
  inline bool has_origintype() const;
  inline void clear_origintype();
  static const int kOriginTypeFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>SkillEffectData</name>
  	<Function>
  		<name>origintype</name>
  		<replaceName>OriginType</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_origintype</name>
  		<replaceName>OriginType</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_origintype</name>
  		<replaceName>OriginType</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::int32 origintype() const;
  inline void set_origintype(::google::protobuf::int32 value);

  // optional int32 EffectParam1 = 3;
  inline bool has_effectparam1() const;
  inline void clear_effectparam1();
  static const int kEffectParam1FieldNumber = 3;
  /*FOR2LUA
  <Record>
  	<name>SkillEffectData</name>
  	<Function>
  		<name>effectparam1</name>
  		<replaceName>EffectParam1</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_effectparam1</name>
  		<replaceName>EffectParam1</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_effectparam1</name>
  		<replaceName>EffectParam1</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::int32 effectparam1() const;
  inline void set_effectparam1(::google::protobuf::int32 value);

  // optional int32 EffectParam2 = 4;
  inline bool has_effectparam2() const;
  inline void clear_effectparam2();
  static const int kEffectParam2FieldNumber = 4;
  /*FOR2LUA
  <Record>
  	<name>SkillEffectData</name>
  	<Function>
  		<name>effectparam2</name>
  		<replaceName>EffectParam2</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_effectparam2</name>
  		<replaceName>EffectParam2</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_effectparam2</name>
  		<replaceName>EffectParam2</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::int32 effectparam2() const;
  inline void set_effectparam2(::google::protobuf::int32 value);

  // optional bool IsBySection = 5;
  inline bool has_isbysection() const;
  inline void clear_isbysection();
  static const int kIsBySectionFieldNumber = 5;
  /*FOR2LUA
  <Record>
  	<name>SkillEffectData</name>
  	<Function>
  		<name>isbysection</name>
  		<replaceName>IsBySection</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_isbysection</name>
  		<replaceName>IsBySection</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_isbysection</name>
  		<replaceName>IsBySection</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline bool isbysection() const;
  inline void set_isbysection(bool value);

  // optional int32 EffectDelay = 6;
  inline bool has_effectdelay() const;
  inline void clear_effectdelay();
  static const int kEffectDelayFieldNumber = 6;
  /*FOR2LUA
  <Record>
  	<name>SkillEffectData</name>
  	<Function>
  		<name>effectdelay</name>
  		<replaceName>EffectDelay</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_effectdelay</name>
  		<replaceName>EffectDelay</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_effectdelay</name>
  		<replaceName>EffectDelay</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::int32 effectdelay() const;
  inline void set_effectdelay(::google::protobuf::int32 value);

  // optional int32 EffectInterval = 7;
  inline bool has_effectinterval() const;
  inline void clear_effectinterval();
  static const int kEffectIntervalFieldNumber = 7;
  /*FOR2LUA
  <Record>
  	<name>SkillEffectData</name>
  	<Function>
  		<name>effectinterval</name>
  		<replaceName>EffectInterval</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_effectinterval</name>
  		<replaceName>EffectInterval</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_effectinterval</name>
  		<replaceName>EffectInterval</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::int32 effectinterval() const;
  inline void set_effectinterval(::google::protobuf::int32 value);

  // optional int32 EffectCount = 8;
  inline bool has_effectcount() const;
  inline void clear_effectcount();
  static const int kEffectCountFieldNumber = 8;
  /*FOR2LUA
  <Record>
  	<name>SkillEffectData</name>
  	<Function>
  		<name>effectcount</name>
  		<replaceName>EffectCount</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_effectcount</name>
  		<replaceName>EffectCount</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_effectcount</name>
  		<replaceName>EffectCount</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::int32 effectcount() const;
  inline void set_effectcount(::google::protobuf::int32 value);

  // optional int32 EffectTarget = 9;
  inline bool has_effecttarget() const;
  inline void clear_effecttarget();
  static const int kEffectTargetFieldNumber = 9;
  /*FOR2LUA
  <Record>
  	<name>SkillEffectData</name>
  	<Function>
  		<name>effecttarget</name>
  		<replaceName>EffectTarget</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_effecttarget</name>
  		<replaceName>EffectTarget</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_effecttarget</name>
  		<replaceName>EffectTarget</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::int32 effecttarget() const;
  inline void set_effecttarget(::google::protobuf::int32 value);

  // optional int32 SpeBuffID = 10;
  inline bool has_spebuffid() const;
  inline void clear_spebuffid();
  static const int kSpeBuffIDFieldNumber = 10;
  /*FOR2LUA
  <Record>
  	<name>SkillEffectData</name>
  	<Function>
  		<name>spebuffid</name>
  		<replaceName>SpeBuffID</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_spebuffid</name>
  		<replaceName>SpeBuffID</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_spebuffid</name>
  		<replaceName>SpeBuffID</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::int32 spebuffid() const;
  inline void set_spebuffid(::google::protobuf::int32 value);

  // optional int32 TargetNum = 11;
  inline bool has_targetnum() const;
  inline void clear_targetnum();
  static const int kTargetNumFieldNumber = 11;
  /*FOR2LUA
  <Record>
  	<name>SkillEffectData</name>
  	<Function>
  		<name>targetnum</name>
  		<replaceName>TargetNum</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_targetnum</name>
  		<replaceName>TargetNum</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_targetnum</name>
  		<replaceName>TargetNum</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::int32 targetnum() const;
  inline void set_targetnum(::google::protobuf::int32 value);

  // repeated int32 AddBuffID = 12;
  inline int addbuffid_size() const;
  inline void clear_addbuffid();
  static const int kAddBuffIDFieldNumber = 12;
  /*FOR2LUA
  <Record>
  	<name>SkillEffectData</name>
  	<Function>
  		<name>addbuffid</name>
  		<replaceName>AddBuffID</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_addbuffid</name>
  		<replaceName>AddBuffID</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_addbuffid</name>
  		<replaceName>AddBuffID</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_addbuffid</name>
  		<replaceName>AddBuffID</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>addbuffid_size</name>
  		<replaceName>AddBuffID</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::int32 addbuffid(int index) const;
  inline void set_addbuffid(int index, ::google::protobuf::int32 value);
  inline void add_addbuffid(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      addbuffid() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_addbuffid();

  // optional bool EffectTargetIncludeSelf = 13;
  inline bool has_effecttargetincludeself() const;
  inline void clear_effecttargetincludeself();
  static const int kEffectTargetIncludeSelfFieldNumber = 13;
  /*FOR2LUA
  <Record>
  	<name>SkillEffectData</name>
  	<Function>
  		<name>effecttargetincludeself</name>
  		<replaceName>EffectTargetIncludeSelf</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_effecttargetincludeself</name>
  		<replaceName>EffectTargetIncludeSelf</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_effecttargetincludeself</name>
  		<replaceName>EffectTargetIncludeSelf</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline bool effecttargetincludeself() const;
  inline void set_effecttargetincludeself(bool value);

  // optional bool RecordEffectTarget = 14;
  inline bool has_recordeffecttarget() const;
  inline void clear_recordeffecttarget();
  static const int kRecordEffectTargetFieldNumber = 14;
  /*FOR2LUA
  <Record>
  	<name>SkillEffectData</name>
  	<Function>
  		<name>recordeffecttarget</name>
  		<replaceName>RecordEffectTarget</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_recordeffecttarget</name>
  		<replaceName>RecordEffectTarget</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_recordeffecttarget</name>
  		<replaceName>RecordEffectTarget</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline bool recordeffecttarget() const;
  inline void set_recordeffecttarget(bool value);

  // optional .pb.SkillTargetPriority EffectPriority = 15;
  inline bool has_effectpriority() const;
  inline void clear_effectpriority();
  static const int kEffectPriorityFieldNumber = 15;
  /*FOR2LUA
  <Record>
  	<name>SkillEffectData</name>
  	<Function>
  		<name>effectpriority</name>
  		<replaceName>EffectPriority</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_effectpriority</name>
  		<replaceName>EffectPriority</replaceName>
  		<handler>descripter = pb_set_message_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_allocated_effectpriority</name>
  		<replaceName>EffectPriority</replaceName>
  		<handler>descripter = pb_set_message_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_effectpriority</name>
  		<replaceName>EffectPriority</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::SkillTargetPriority& effectpriority() const;
  inline ::pb::SkillTargetPriority* mutable_effectpriority();
  inline ::pb::SkillTargetPriority* release_effectpriority();
  inline void set_allocated_effectpriority(::pb::SkillTargetPriority* effectpriority);

  // optional int32 EffectParam3 = 16;
  inline bool has_effectparam3() const;
  inline void clear_effectparam3();
  static const int kEffectParam3FieldNumber = 16;
  /*FOR2LUA
  <Record>
  	<name>SkillEffectData</name>
  	<Function>
  		<name>effectparam3</name>
  		<replaceName>EffectParam3</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_effectparam3</name>
  		<replaceName>EffectParam3</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_effectparam3</name>
  		<replaceName>EffectParam3</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::int32 effectparam3() const;
  inline void set_effectparam3(::google::protobuf::int32 value);

  // repeated .pb.SkillLevelSubBuff LevelSubBuff = 17;
  inline int levelsubbuff_size() const;
  inline void clear_levelsubbuff();
  static const int kLevelSubBuffFieldNumber = 17;
  /*FOR2LUA
  <Record>
  	<name>SkillEffectData</name>
  	<Function>
  		<name>levelsubbuff</name>
  		<replaceName>LevelSubBuff</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_levelsubbuff</name>
  		<replaceName>LevelSubBuff</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_levelsubbuff</name>
  		<replaceName>LevelSubBuff</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_levelsubbuff</name>
  		<replaceName>LevelSubBuff</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>levelsubbuff_size</name>
  		<replaceName>LevelSubBuff</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::SkillLevelSubBuff& levelsubbuff(int index) const;
  inline ::pb::SkillLevelSubBuff* mutable_levelsubbuff(int index);
  inline ::pb::SkillLevelSubBuff* add_levelsubbuff();
  inline const ::google::protobuf::RepeatedPtrField< ::pb::SkillLevelSubBuff >&
      levelsubbuff() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb::SkillLevelSubBuff >*
      mutable_levelsubbuff();

  // optional int32 LevelRangeGrowth = 18;
  inline bool has_levelrangegrowth() const;
  inline void clear_levelrangegrowth();
  static const int kLevelRangeGrowthFieldNumber = 18;
  /*FOR2LUA
  <Record>
  	<name>SkillEffectData</name>
  	<Function>
  		<name>levelrangegrowth</name>
  		<replaceName>LevelRangeGrowth</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_levelrangegrowth</name>
  		<replaceName>LevelRangeGrowth</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_levelrangegrowth</name>
  		<replaceName>LevelRangeGrowth</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::int32 levelrangegrowth() const;
  inline void set_levelrangegrowth(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:pb.SkillEffectData)
 private:
  inline void set_has_effecttype();
  inline void clear_has_effecttype();
  inline void set_has_origintype();
  inline void clear_has_origintype();
  inline void set_has_effectparam1();
  inline void clear_has_effectparam1();
  inline void set_has_effectparam2();
  inline void clear_has_effectparam2();
  inline void set_has_isbysection();
  inline void clear_has_isbysection();
  inline void set_has_effectdelay();
  inline void clear_has_effectdelay();
  inline void set_has_effectinterval();
  inline void clear_has_effectinterval();
  inline void set_has_effectcount();
  inline void clear_has_effectcount();
  inline void set_has_effecttarget();
  inline void clear_has_effecttarget();
  inline void set_has_spebuffid();
  inline void clear_has_spebuffid();
  inline void set_has_targetnum();
  inline void clear_has_targetnum();
  inline void set_has_effecttargetincludeself();
  inline void clear_has_effecttargetincludeself();
  inline void set_has_recordeffecttarget();
  inline void clear_has_recordeffecttarget();
  inline void set_has_effectpriority();
  inline void clear_has_effectpriority();
  inline void set_has_effectparam3();
  inline void clear_has_effectparam3();
  inline void set_has_levelrangegrowth();
  inline void clear_has_levelrangegrowth();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int32 effecttype_;
  ::google::protobuf::int32 origintype_;
  ::google::protobuf::int32 effectparam1_;
  ::google::protobuf::int32 effectparam2_;
  ::google::protobuf::int32 effectdelay_;
  ::google::protobuf::int32 effectinterval_;
  ::google::protobuf::int32 effectcount_;
  ::google::protobuf::int32 effecttarget_;
  ::google::protobuf::int32 spebuffid_;
  bool isbysection_;
  bool effecttargetincludeself_;
  bool recordeffecttarget_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > addbuffid_;
  ::google::protobuf::int32 targetnum_;
  ::google::protobuf::int32 effectparam3_;
  ::pb::SkillTargetPriority* effectpriority_;
  ::google::protobuf::RepeatedPtrField< ::pb::SkillLevelSubBuff > levelsubbuff_;
  ::google::protobuf::int32 levelrangegrowth_;
  friend void  protobuf_AddDesc_module_2fSkillData_2eproto();
  friend void protobuf_AssignDesc_module_2fSkillData_2eproto();
  friend void protobuf_ShutdownFile_module_2fSkillData_2eproto();

  void InitAsDefaultInstance();
  static SkillEffectData* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>SkillHitData</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>module/SkillData.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class SkillHitData : public ::google::protobuf::Message {
 public:
  SkillHitData();
  virtual ~SkillHitData();

  SkillHitData(const SkillHitData& from);

  inline SkillHitData& operator=(const SkillHitData& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SkillHitData& default_instance();

  void Swap(SkillHitData* other);

  // implements Message ----------------------------------------------

  SkillHitData* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SkillHitData& from);
  void MergeFrom(const SkillHitData& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bool HitForSure = 1;
  inline bool has_hitforsure() const;
  inline void clear_hitforsure();
  static const int kHitForSureFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>SkillHitData</name>
  	<Function>
  		<name>hitforsure</name>
  		<replaceName>HitForSure</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_hitforsure</name>
  		<replaceName>HitForSure</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_hitforsure</name>
  		<replaceName>HitForSure</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline bool hitforsure() const;
  inline void set_hitforsure(bool value);

  // optional int32 EffectParent = 3;
  inline bool has_effectparent() const;
  inline void clear_effectparent();
  static const int kEffectParentFieldNumber = 3;
  /*FOR2LUA
  <Record>
  	<name>SkillHitData</name>
  	<Function>
  		<name>effectparent</name>
  		<replaceName>EffectParent</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_effectparent</name>
  		<replaceName>EffectParent</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_effectparent</name>
  		<replaceName>EffectParent</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::int32 effectparent() const;
  inline void set_effectparent(::google::protobuf::int32 value);

  // optional string HitEffect = 4;
  inline bool has_hiteffect() const;
  inline void clear_hiteffect();
  static const int kHitEffectFieldNumber = 4;
  /*FOR2LUA
  <Record>
  	<name>SkillHitData</name>
  	<Function>
  		<name>hiteffect</name>
  		<replaceName>HitEffect</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_hiteffect</name>
  		<replaceName>HitEffect</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_hiteffect</name>
  		<replaceName>HitEffect</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::std::string& hiteffect() const;
  inline void set_hiteffect(const ::std::string& value);
  inline void set_hiteffect(const char* value);
  inline void set_hiteffect(const char* value, size_t size);
  inline ::std::string* mutable_hiteffect();
  inline ::std::string* release_hiteffect();
  inline void set_allocated_hiteffect(::std::string* hiteffect);

  // optional string HitSound = 5;
  inline bool has_hitsound() const;
  inline void clear_hitsound();
  static const int kHitSoundFieldNumber = 5;
  /*FOR2LUA
  <Record>
  	<name>SkillHitData</name>
  	<Function>
  		<name>hitsound</name>
  		<replaceName>HitSound</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_hitsound</name>
  		<replaceName>HitSound</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_hitsound</name>
  		<replaceName>HitSound</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::std::string& hitsound() const;
  inline void set_hitsound(const ::std::string& value);
  inline void set_hitsound(const char* value);
  inline void set_hitsound(const char* value, size_t size);
  inline ::std::string* mutable_hitsound();
  inline ::std::string* release_hitsound();
  inline void set_allocated_hitsound(::std::string* hitsound);

  // optional int32 HitEffectPlayType = 6;
  inline bool has_hiteffectplaytype() const;
  inline void clear_hiteffectplaytype();
  static const int kHitEffectPlayTypeFieldNumber = 6;
  /*FOR2LUA
  <Record>
  	<name>SkillHitData</name>
  	<Function>
  		<name>hiteffectplaytype</name>
  		<replaceName>HitEffectPlayType</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_hiteffectplaytype</name>
  		<replaceName>HitEffectPlayType</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_hiteffectplaytype</name>
  		<replaceName>HitEffectPlayType</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::int32 hiteffectplaytype() const;
  inline void set_hiteffectplaytype(::google::protobuf::int32 value);

  // optional int32 HitEffectPlayParam = 7;
  inline bool has_hiteffectplayparam() const;
  inline void clear_hiteffectplayparam();
  static const int kHitEffectPlayParamFieldNumber = 7;
  /*FOR2LUA
  <Record>
  	<name>SkillHitData</name>
  	<Function>
  		<name>hiteffectplayparam</name>
  		<replaceName>HitEffectPlayParam</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_hiteffectplayparam</name>
  		<replaceName>HitEffectPlayParam</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_hiteffectplayparam</name>
  		<replaceName>HitEffectPlayParam</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::int32 hiteffectplayparam() const;
  inline void set_hiteffectplayparam(::google::protobuf::int32 value);

  // optional bool HitEffectFollow = 8;
  inline bool has_hiteffectfollow() const;
  inline void clear_hiteffectfollow();
  static const int kHitEffectFollowFieldNumber = 8;
  /*FOR2LUA
  <Record>
  	<name>SkillHitData</name>
  	<Function>
  		<name>hiteffectfollow</name>
  		<replaceName>HitEffectFollow</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_hiteffectfollow</name>
  		<replaceName>HitEffectFollow</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_hiteffectfollow</name>
  		<replaceName>HitEffectFollow</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline bool hiteffectfollow() const;
  inline void set_hiteffectfollow(bool value);

  // optional bool HitEffectFlip = 9;
  inline bool has_hiteffectflip() const;
  inline void clear_hiteffectflip();
  static const int kHitEffectFlipFieldNumber = 9;
  /*FOR2LUA
  <Record>
  	<name>SkillHitData</name>
  	<Function>
  		<name>hiteffectflip</name>
  		<replaceName>HitEffectFlip</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_hiteffectflip</name>
  		<replaceName>HitEffectFlip</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_hiteffectflip</name>
  		<replaceName>HitEffectFlip</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline bool hiteffectflip() const;
  inline void set_hiteffectflip(bool value);

  // optional int32 RefEffectParent = 10;
  inline bool has_refeffectparent() const;
  inline void clear_refeffectparent();
  static const int kRefEffectParentFieldNumber = 10;
  /*FOR2LUA
  <Record>
  	<name>SkillHitData</name>
  	<Function>
  		<name>refeffectparent</name>
  		<replaceName>RefEffectParent</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_refeffectparent</name>
  		<replaceName>RefEffectParent</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_refeffectparent</name>
  		<replaceName>RefEffectParent</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::int32 refeffectparent() const;
  inline void set_refeffectparent(::google::protobuf::int32 value);

  // optional string RefEffect = 11;
  inline bool has_refeffect() const;
  inline void clear_refeffect();
  static const int kRefEffectFieldNumber = 11;
  /*FOR2LUA
  <Record>
  	<name>SkillHitData</name>
  	<Function>
  		<name>refeffect</name>
  		<replaceName>RefEffect</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_refeffect</name>
  		<replaceName>RefEffect</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_refeffect</name>
  		<replaceName>RefEffect</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::std::string& refeffect() const;
  inline void set_refeffect(const ::std::string& value);
  inline void set_refeffect(const char* value);
  inline void set_refeffect(const char* value, size_t size);
  inline ::std::string* mutable_refeffect();
  inline ::std::string* release_refeffect();
  inline void set_allocated_refeffect(::std::string* refeffect);

  // optional string RefSound = 12;
  inline bool has_refsound() const;
  inline void clear_refsound();
  static const int kRefSoundFieldNumber = 12;
  /*FOR2LUA
  <Record>
  	<name>SkillHitData</name>
  	<Function>
  		<name>refsound</name>
  		<replaceName>RefSound</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_refsound</name>
  		<replaceName>RefSound</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_refsound</name>
  		<replaceName>RefSound</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::std::string& refsound() const;
  inline void set_refsound(const ::std::string& value);
  inline void set_refsound(const char* value);
  inline void set_refsound(const char* value, size_t size);
  inline ::std::string* mutable_refsound();
  inline ::std::string* release_refsound();
  inline void set_allocated_refsound(::std::string* refsound);

  // optional bool RefEffectFollow = 13;
  inline bool has_refeffectfollow() const;
  inline void clear_refeffectfollow();
  static const int kRefEffectFollowFieldNumber = 13;
  /*FOR2LUA
  <Record>
  	<name>SkillHitData</name>
  	<Function>
  		<name>refeffectfollow</name>
  		<replaceName>RefEffectFollow</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_refeffectfollow</name>
  		<replaceName>RefEffectFollow</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_refeffectfollow</name>
  		<replaceName>RefEffectFollow</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline bool refeffectfollow() const;
  inline void set_refeffectfollow(bool value);

  // optional bool RefEffectFlip = 14;
  inline bool has_refeffectflip() const;
  inline void clear_refeffectflip();
  static const int kRefEffectFlipFieldNumber = 14;
  /*FOR2LUA
  <Record>
  	<name>SkillHitData</name>
  	<Function>
  		<name>refeffectflip</name>
  		<replaceName>RefEffectFlip</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_refeffectflip</name>
  		<replaceName>RefEffectFlip</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_refeffectflip</name>
  		<replaceName>RefEffectFlip</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline bool refeffectflip() const;
  inline void set_refeffectflip(bool value);

  // optional bool PlayDownAnim = 15;
  inline bool has_playdownanim() const;
  inline void clear_playdownanim();
  static const int kPlayDownAnimFieldNumber = 15;
  /*FOR2LUA
  <Record>
  	<name>SkillHitData</name>
  	<Function>
  		<name>playdownanim</name>
  		<replaceName>PlayDownAnim</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_playdownanim</name>
  		<replaceName>PlayDownAnim</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_playdownanim</name>
  		<replaceName>PlayDownAnim</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline bool playdownanim() const;
  inline void set_playdownanim(bool value);

  // optional bool HitEffectRotateRandom = 16;
  inline bool has_hiteffectrotaterandom() const;
  inline void clear_hiteffectrotaterandom();
  static const int kHitEffectRotateRandomFieldNumber = 16;
  /*FOR2LUA
  <Record>
  	<name>SkillHitData</name>
  	<Function>
  		<name>hiteffectrotaterandom</name>
  		<replaceName>HitEffectRotateRandom</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_hiteffectrotaterandom</name>
  		<replaceName>HitEffectRotateRandom</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_hiteffectrotaterandom</name>
  		<replaceName>HitEffectRotateRandom</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline bool hiteffectrotaterandom() const;
  inline void set_hiteffectrotaterandom(bool value);

  // repeated int32 HitEffectRotateRangeX = 17;
  inline int hiteffectrotaterangex_size() const;
  inline void clear_hiteffectrotaterangex();
  static const int kHitEffectRotateRangeXFieldNumber = 17;
  /*FOR2LUA
  <Record>
  	<name>SkillHitData</name>
  	<Function>
  		<name>hiteffectrotaterangex</name>
  		<replaceName>HitEffectRotateRangeX</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_hiteffectrotaterangex</name>
  		<replaceName>HitEffectRotateRangeX</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_hiteffectrotaterangex</name>
  		<replaceName>HitEffectRotateRangeX</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_hiteffectrotaterangex</name>
  		<replaceName>HitEffectRotateRangeX</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>hiteffectrotaterangex_size</name>
  		<replaceName>HitEffectRotateRangeX</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::int32 hiteffectrotaterangex(int index) const;
  inline void set_hiteffectrotaterangex(int index, ::google::protobuf::int32 value);
  inline void add_hiteffectrotaterangex(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      hiteffectrotaterangex() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_hiteffectrotaterangex();

  // repeated int32 HitEffectRotateRangeY = 18;
  inline int hiteffectrotaterangey_size() const;
  inline void clear_hiteffectrotaterangey();
  static const int kHitEffectRotateRangeYFieldNumber = 18;
  /*FOR2LUA
  <Record>
  	<name>SkillHitData</name>
  	<Function>
  		<name>hiteffectrotaterangey</name>
  		<replaceName>HitEffectRotateRangeY</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_hiteffectrotaterangey</name>
  		<replaceName>HitEffectRotateRangeY</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_hiteffectrotaterangey</name>
  		<replaceName>HitEffectRotateRangeY</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_hiteffectrotaterangey</name>
  		<replaceName>HitEffectRotateRangeY</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>hiteffectrotaterangey_size</name>
  		<replaceName>HitEffectRotateRangeY</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::int32 hiteffectrotaterangey(int index) const;
  inline void set_hiteffectrotaterangey(int index, ::google::protobuf::int32 value);
  inline void add_hiteffectrotaterangey(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      hiteffectrotaterangey() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_hiteffectrotaterangey();

  // repeated .pb.HitEffectData HitEffectData = 19;
  inline int hiteffectdata_size() const;
  inline void clear_hiteffectdata();
  static const int kHitEffectDataFieldNumber = 19;
  /*FOR2LUA
  <Record>
  	<name>SkillHitData</name>
  	<Function>
  		<name>hiteffectdata</name>
  		<replaceName>HitEffectData</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_hiteffectdata</name>
  		<replaceName>HitEffectData</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_hiteffectdata</name>
  		<replaceName>HitEffectData</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_hiteffectdata</name>
  		<replaceName>HitEffectData</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>hiteffectdata_size</name>
  		<replaceName>HitEffectData</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::HitEffectData& hiteffectdata(int index) const;
  inline ::pb::HitEffectData* mutable_hiteffectdata(int index);
  inline ::pb::HitEffectData* add_hiteffectdata();
  inline const ::google::protobuf::RepeatedPtrField< ::pb::HitEffectData >&
      hiteffectdata() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb::HitEffectData >*
      mutable_hiteffectdata();

  // optional bool PlayLayerEffect = 20;
  inline bool has_playlayereffect() const;
  inline void clear_playlayereffect();
  static const int kPlayLayerEffectFieldNumber = 20;
  /*FOR2LUA
  <Record>
  	<name>SkillHitData</name>
  	<Function>
  		<name>playlayereffect</name>
  		<replaceName>PlayLayerEffect</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_playlayereffect</name>
  		<replaceName>PlayLayerEffect</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_playlayereffect</name>
  		<replaceName>PlayLayerEffect</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline bool playlayereffect() const;
  inline void set_playlayereffect(bool value);

  // @@protoc_insertion_point(class_scope:pb.SkillHitData)
 private:
  inline void set_has_hitforsure();
  inline void clear_has_hitforsure();
  inline void set_has_effectparent();
  inline void clear_has_effectparent();
  inline void set_has_hiteffect();
  inline void clear_has_hiteffect();
  inline void set_has_hitsound();
  inline void clear_has_hitsound();
  inline void set_has_hiteffectplaytype();
  inline void clear_has_hiteffectplaytype();
  inline void set_has_hiteffectplayparam();
  inline void clear_has_hiteffectplayparam();
  inline void set_has_hiteffectfollow();
  inline void clear_has_hiteffectfollow();
  inline void set_has_hiteffectflip();
  inline void clear_has_hiteffectflip();
  inline void set_has_refeffectparent();
  inline void clear_has_refeffectparent();
  inline void set_has_refeffect();
  inline void clear_has_refeffect();
  inline void set_has_refsound();
  inline void clear_has_refsound();
  inline void set_has_refeffectfollow();
  inline void clear_has_refeffectfollow();
  inline void set_has_refeffectflip();
  inline void clear_has_refeffectflip();
  inline void set_has_playdownanim();
  inline void clear_has_playdownanim();
  inline void set_has_hiteffectrotaterandom();
  inline void clear_has_hiteffectrotaterandom();
  inline void set_has_playlayereffect();
  inline void clear_has_playlayereffect();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* hiteffect_;
  ::google::protobuf::int32 effectparent_;
  ::google::protobuf::int32 hiteffectplaytype_;
  ::std::string* hitsound_;
  ::google::protobuf::int32 hiteffectplayparam_;
  bool hitforsure_;
  bool hiteffectfollow_;
  bool hiteffectflip_;
  bool refeffectfollow_;
  ::std::string* refeffect_;
  ::std::string* refsound_;
  ::google::protobuf::int32 refeffectparent_;
  bool refeffectflip_;
  bool playdownanim_;
  bool hiteffectrotaterandom_;
  bool playlayereffect_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > hiteffectrotaterangex_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > hiteffectrotaterangey_;
  ::google::protobuf::RepeatedPtrField< ::pb::HitEffectData > hiteffectdata_;
  friend void  protobuf_AddDesc_module_2fSkillData_2eproto();
  friend void protobuf_AssignDesc_module_2fSkillData_2eproto();
  friend void protobuf_ShutdownFile_module_2fSkillData_2eproto();

  void InitAsDefaultInstance();
  static SkillHitData* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>SkillEnergyDrawData</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>module/SkillData.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class SkillEnergyDrawData : public ::google::protobuf::Message {
 public:
  SkillEnergyDrawData();
  virtual ~SkillEnergyDrawData();

  SkillEnergyDrawData(const SkillEnergyDrawData& from);

  inline SkillEnergyDrawData& operator=(const SkillEnergyDrawData& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SkillEnergyDrawData& default_instance();

  void Swap(SkillEnergyDrawData* other);

  // implements Message ----------------------------------------------

  SkillEnergyDrawData* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SkillEnergyDrawData& from);
  void MergeFrom(const SkillEnergyDrawData& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 DrawType = 1;
  inline bool has_drawtype() const;
  inline void clear_drawtype();
  static const int kDrawTypeFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>SkillEnergyDrawData</name>
  	<Function>
  		<name>drawtype</name>
  		<replaceName>DrawType</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_drawtype</name>
  		<replaceName>DrawType</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_drawtype</name>
  		<replaceName>DrawType</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::int32 drawtype() const;
  inline void set_drawtype(::google::protobuf::int32 value);

  // optional int32 DrwaParam1 = 2;
  inline bool has_drwaparam1() const;
  inline void clear_drwaparam1();
  static const int kDrwaParam1FieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>SkillEnergyDrawData</name>
  	<Function>
  		<name>drwaparam1</name>
  		<replaceName>DrwaParam1</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_drwaparam1</name>
  		<replaceName>DrwaParam1</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_drwaparam1</name>
  		<replaceName>DrwaParam1</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::int32 drwaparam1() const;
  inline void set_drwaparam1(::google::protobuf::int32 value);

  // optional int32 DrawParam2 = 3;
  inline bool has_drawparam2() const;
  inline void clear_drawparam2();
  static const int kDrawParam2FieldNumber = 3;
  /*FOR2LUA
  <Record>
  	<name>SkillEnergyDrawData</name>
  	<Function>
  		<name>drawparam2</name>
  		<replaceName>DrawParam2</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_drawparam2</name>
  		<replaceName>DrawParam2</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_drawparam2</name>
  		<replaceName>DrawParam2</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::int32 drawparam2() const;
  inline void set_drawparam2(::google::protobuf::int32 value);

  // optional int32 RecoverType = 4;
  inline bool has_recovertype() const;
  inline void clear_recovertype();
  static const int kRecoverTypeFieldNumber = 4;
  /*FOR2LUA
  <Record>
  	<name>SkillEnergyDrawData</name>
  	<Function>
  		<name>recovertype</name>
  		<replaceName>RecoverType</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_recovertype</name>
  		<replaceName>RecoverType</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_recovertype</name>
  		<replaceName>RecoverType</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::int32 recovertype() const;
  inline void set_recovertype(::google::protobuf::int32 value);

  // optional int32 RecoverParam1 = 5;
  inline bool has_recoverparam1() const;
  inline void clear_recoverparam1();
  static const int kRecoverParam1FieldNumber = 5;
  /*FOR2LUA
  <Record>
  	<name>SkillEnergyDrawData</name>
  	<Function>
  		<name>recoverparam1</name>
  		<replaceName>RecoverParam1</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_recoverparam1</name>
  		<replaceName>RecoverParam1</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_recoverparam1</name>
  		<replaceName>RecoverParam1</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::int32 recoverparam1() const;
  inline void set_recoverparam1(::google::protobuf::int32 value);

  // optional int32 RecoverParam2 = 6;
  inline bool has_recoverparam2() const;
  inline void clear_recoverparam2();
  static const int kRecoverParam2FieldNumber = 6;
  /*FOR2LUA
  <Record>
  	<name>SkillEnergyDrawData</name>
  	<Function>
  		<name>recoverparam2</name>
  		<replaceName>RecoverParam2</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_recoverparam2</name>
  		<replaceName>RecoverParam2</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_recoverparam2</name>
  		<replaceName>RecoverParam2</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::int32 recoverparam2() const;
  inline void set_recoverparam2(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:pb.SkillEnergyDrawData)
 private:
  inline void set_has_drawtype();
  inline void clear_has_drawtype();
  inline void set_has_drwaparam1();
  inline void clear_has_drwaparam1();
  inline void set_has_drawparam2();
  inline void clear_has_drawparam2();
  inline void set_has_recovertype();
  inline void clear_has_recovertype();
  inline void set_has_recoverparam1();
  inline void clear_has_recoverparam1();
  inline void set_has_recoverparam2();
  inline void clear_has_recoverparam2();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int32 drawtype_;
  ::google::protobuf::int32 drwaparam1_;
  ::google::protobuf::int32 drawparam2_;
  ::google::protobuf::int32 recovertype_;
  ::google::protobuf::int32 recoverparam1_;
  ::google::protobuf::int32 recoverparam2_;
  friend void  protobuf_AddDesc_module_2fSkillData_2eproto();
  friend void protobuf_AssignDesc_module_2fSkillData_2eproto();
  friend void protobuf_ShutdownFile_module_2fSkillData_2eproto();

  void InitAsDefaultInstance();
  static SkillEnergyDrawData* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>SkillEnergyAssistData</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>module/SkillData.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class SkillEnergyAssistData : public ::google::protobuf::Message {
 public:
  SkillEnergyAssistData();
  virtual ~SkillEnergyAssistData();

  SkillEnergyAssistData(const SkillEnergyAssistData& from);

  inline SkillEnergyAssistData& operator=(const SkillEnergyAssistData& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SkillEnergyAssistData& default_instance();

  void Swap(SkillEnergyAssistData* other);

  // implements Message ----------------------------------------------

  SkillEnergyAssistData* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SkillEnergyAssistData& from);
  void MergeFrom(const SkillEnergyAssistData& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 AssistType = 1;
  inline bool has_assisttype() const;
  inline void clear_assisttype();
  static const int kAssistTypeFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>SkillEnergyAssistData</name>
  	<Function>
  		<name>assisttype</name>
  		<replaceName>AssistType</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_assisttype</name>
  		<replaceName>AssistType</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_assisttype</name>
  		<replaceName>AssistType</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::int32 assisttype() const;
  inline void set_assisttype(::google::protobuf::int32 value);

  // optional int32 AssistParam1 = 2;
  inline bool has_assistparam1() const;
  inline void clear_assistparam1();
  static const int kAssistParam1FieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>SkillEnergyAssistData</name>
  	<Function>
  		<name>assistparam1</name>
  		<replaceName>AssistParam1</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_assistparam1</name>
  		<replaceName>AssistParam1</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_assistparam1</name>
  		<replaceName>AssistParam1</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::int32 assistparam1() const;
  inline void set_assistparam1(::google::protobuf::int32 value);

  // optional int32 AssistParam2 = 3;
  inline bool has_assistparam2() const;
  inline void clear_assistparam2();
  static const int kAssistParam2FieldNumber = 3;
  /*FOR2LUA
  <Record>
  	<name>SkillEnergyAssistData</name>
  	<Function>
  		<name>assistparam2</name>
  		<replaceName>AssistParam2</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_assistparam2</name>
  		<replaceName>AssistParam2</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_assistparam2</name>
  		<replaceName>AssistParam2</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::int32 assistparam2() const;
  inline void set_assistparam2(::google::protobuf::int32 value);

  // optional int32 AddType = 4;
  inline bool has_addtype() const;
  inline void clear_addtype();
  static const int kAddTypeFieldNumber = 4;
  /*FOR2LUA
  <Record>
  	<name>SkillEnergyAssistData</name>
  	<Function>
  		<name>addtype</name>
  		<replaceName>AddType</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_addtype</name>
  		<replaceName>AddType</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_addtype</name>
  		<replaceName>AddType</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::int32 addtype() const;
  inline void set_addtype(::google::protobuf::int32 value);

  // optional int32 AddParam1 = 5;
  inline bool has_addparam1() const;
  inline void clear_addparam1();
  static const int kAddParam1FieldNumber = 5;
  /*FOR2LUA
  <Record>
  	<name>SkillEnergyAssistData</name>
  	<Function>
  		<name>addparam1</name>
  		<replaceName>AddParam1</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_addparam1</name>
  		<replaceName>AddParam1</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_addparam1</name>
  		<replaceName>AddParam1</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::int32 addparam1() const;
  inline void set_addparam1(::google::protobuf::int32 value);

  // optional int32 AddParam2 = 6;
  inline bool has_addparam2() const;
  inline void clear_addparam2();
  static const int kAddParam2FieldNumber = 6;
  /*FOR2LUA
  <Record>
  	<name>SkillEnergyAssistData</name>
  	<Function>
  		<name>addparam2</name>
  		<replaceName>AddParam2</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_addparam2</name>
  		<replaceName>AddParam2</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_addparam2</name>
  		<replaceName>AddParam2</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::int32 addparam2() const;
  inline void set_addparam2(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:pb.SkillEnergyAssistData)
 private:
  inline void set_has_assisttype();
  inline void clear_has_assisttype();
  inline void set_has_assistparam1();
  inline void clear_has_assistparam1();
  inline void set_has_assistparam2();
  inline void clear_has_assistparam2();
  inline void set_has_addtype();
  inline void clear_has_addtype();
  inline void set_has_addparam1();
  inline void clear_has_addparam1();
  inline void set_has_addparam2();
  inline void clear_has_addparam2();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int32 assisttype_;
  ::google::protobuf::int32 assistparam1_;
  ::google::protobuf::int32 assistparam2_;
  ::google::protobuf::int32 addtype_;
  ::google::protobuf::int32 addparam1_;
  ::google::protobuf::int32 addparam2_;
  friend void  protobuf_AddDesc_module_2fSkillData_2eproto();
  friend void protobuf_AssignDesc_module_2fSkillData_2eproto();
  friend void protobuf_ShutdownFile_module_2fSkillData_2eproto();

  void InitAsDefaultInstance();
  static SkillEnergyAssistData* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>SkillLifeStealData</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>module/SkillData.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class SkillLifeStealData : public ::google::protobuf::Message {
 public:
  SkillLifeStealData();
  virtual ~SkillLifeStealData();

  SkillLifeStealData(const SkillLifeStealData& from);

  inline SkillLifeStealData& operator=(const SkillLifeStealData& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SkillLifeStealData& default_instance();

  void Swap(SkillLifeStealData* other);

  // implements Message ----------------------------------------------

  SkillLifeStealData* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SkillLifeStealData& from);
  void MergeFrom(const SkillLifeStealData& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 Type = 1;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>SkillLifeStealData</name>
  	<Function>
  		<name>type</name>
  		<replaceName>Type</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_type</name>
  		<replaceName>Type</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_type</name>
  		<replaceName>Type</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::int32 type() const;
  inline void set_type(::google::protobuf::int32 value);

  // optional int32 Param1 = 2;
  inline bool has_param1() const;
  inline void clear_param1();
  static const int kParam1FieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>SkillLifeStealData</name>
  	<Function>
  		<name>param1</name>
  		<replaceName>Param1</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_param1</name>
  		<replaceName>Param1</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_param1</name>
  		<replaceName>Param1</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::int32 param1() const;
  inline void set_param1(::google::protobuf::int32 value);

  // optional int32 Param2 = 3;
  inline bool has_param2() const;
  inline void clear_param2();
  static const int kParam2FieldNumber = 3;
  /*FOR2LUA
  <Record>
  	<name>SkillLifeStealData</name>
  	<Function>
  		<name>param2</name>
  		<replaceName>Param2</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_param2</name>
  		<replaceName>Param2</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_param2</name>
  		<replaceName>Param2</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::int32 param2() const;
  inline void set_param2(::google::protobuf::int32 value);

  // optional bool UpperLimit = 4;
  inline bool has_upperlimit() const;
  inline void clear_upperlimit();
  static const int kUpperLimitFieldNumber = 4;
  /*FOR2LUA
  <Record>
  	<name>SkillLifeStealData</name>
  	<Function>
  		<name>upperlimit</name>
  		<replaceName>UpperLimit</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_upperlimit</name>
  		<replaceName>UpperLimit</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_upperlimit</name>
  		<replaceName>UpperLimit</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline bool upperlimit() const;
  inline void set_upperlimit(bool value);

  // optional int32 UpperLimitParam = 5;
  inline bool has_upperlimitparam() const;
  inline void clear_upperlimitparam();
  static const int kUpperLimitParamFieldNumber = 5;
  /*FOR2LUA
  <Record>
  	<name>SkillLifeStealData</name>
  	<Function>
  		<name>upperlimitparam</name>
  		<replaceName>UpperLimitParam</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_upperlimitparam</name>
  		<replaceName>UpperLimitParam</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_upperlimitparam</name>
  		<replaceName>UpperLimitParam</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::int32 upperlimitparam() const;
  inline void set_upperlimitparam(::google::protobuf::int32 value);

  // repeated int32 BuffSubTypeFilter = 6;
  inline int buffsubtypefilter_size() const;
  inline void clear_buffsubtypefilter();
  static const int kBuffSubTypeFilterFieldNumber = 6;
  /*FOR2LUA
  <Record>
  	<name>SkillLifeStealData</name>
  	<Function>
  		<name>buffsubtypefilter</name>
  		<replaceName>BuffSubTypeFilter</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_buffsubtypefilter</name>
  		<replaceName>BuffSubTypeFilter</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_buffsubtypefilter</name>
  		<replaceName>BuffSubTypeFilter</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_buffsubtypefilter</name>
  		<replaceName>BuffSubTypeFilter</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>buffsubtypefilter_size</name>
  		<replaceName>BuffSubTypeFilter</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::int32 buffsubtypefilter(int index) const;
  inline void set_buffsubtypefilter(int index, ::google::protobuf::int32 value);
  inline void add_buffsubtypefilter(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      buffsubtypefilter() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_buffsubtypefilter();

  // @@protoc_insertion_point(class_scope:pb.SkillLifeStealData)
 private:
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_param1();
  inline void clear_has_param1();
  inline void set_has_param2();
  inline void clear_has_param2();
  inline void set_has_upperlimit();
  inline void clear_has_upperlimit();
  inline void set_has_upperlimitparam();
  inline void clear_has_upperlimitparam();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int32 type_;
  ::google::protobuf::int32 param1_;
  ::google::protobuf::int32 param2_;
  bool upperlimit_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > buffsubtypefilter_;
  ::google::protobuf::int32 upperlimitparam_;
  friend void  protobuf_AddDesc_module_2fSkillData_2eproto();
  friend void protobuf_AssignDesc_module_2fSkillData_2eproto();
  friend void protobuf_ShutdownFile_module_2fSkillData_2eproto();

  void InitAsDefaultInstance();
  static SkillLifeStealData* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>SkillSpeicalAdjust</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>module/SkillData.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class SkillSpeicalAdjust : public ::google::protobuf::Message {
 public:
  SkillSpeicalAdjust();
  virtual ~SkillSpeicalAdjust();

  SkillSpeicalAdjust(const SkillSpeicalAdjust& from);

  inline SkillSpeicalAdjust& operator=(const SkillSpeicalAdjust& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SkillSpeicalAdjust& default_instance();

  void Swap(SkillSpeicalAdjust* other);

  // implements Message ----------------------------------------------

  SkillSpeicalAdjust* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SkillSpeicalAdjust& from);
  void MergeFrom(const SkillSpeicalAdjust& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bool Enable = 1;
  inline bool has_enable() const;
  inline void clear_enable();
  static const int kEnableFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>SkillSpeicalAdjust</name>
  	<Function>
  		<name>enable</name>
  		<replaceName>Enable</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_enable</name>
  		<replaceName>Enable</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_enable</name>
  		<replaceName>Enable</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline bool enable() const;
  inline void set_enable(bool value);

  // optional int32 EffectType = 2;
  inline bool has_effecttype() const;
  inline void clear_effecttype();
  static const int kEffectTypeFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>SkillSpeicalAdjust</name>
  	<Function>
  		<name>effecttype</name>
  		<replaceName>EffectType</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_effecttype</name>
  		<replaceName>EffectType</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_effecttype</name>
  		<replaceName>EffectType</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::int32 effecttype() const;
  inline void set_effecttype(::google::protobuf::int32 value);

  // optional int32 TargetBuffId = 3;
  inline bool has_targetbuffid() const;
  inline void clear_targetbuffid();
  static const int kTargetBuffIdFieldNumber = 3;
  /*FOR2LUA
  <Record>
  	<name>SkillSpeicalAdjust</name>
  	<Function>
  		<name>targetbuffid</name>
  		<replaceName>TargetBuffId</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_targetbuffid</name>
  		<replaceName>TargetBuffId</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_targetbuffid</name>
  		<replaceName>TargetBuffId</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::int32 targetbuffid() const;
  inline void set_targetbuffid(::google::protobuf::int32 value);

  // optional int32 BuffType = 4;
  inline bool has_bufftype() const;
  inline void clear_bufftype();
  static const int kBuffTypeFieldNumber = 4;
  /*FOR2LUA
  <Record>
  	<name>SkillSpeicalAdjust</name>
  	<Function>
  		<name>bufftype</name>
  		<replaceName>BuffType</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_bufftype</name>
  		<replaceName>BuffType</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_bufftype</name>
  		<replaceName>BuffType</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::int32 bufftype() const;
  inline void set_bufftype(::google::protobuf::int32 value);

  // repeated int32 BuffParam = 5;
  inline int buffparam_size() const;
  inline void clear_buffparam();
  static const int kBuffParamFieldNumber = 5;
  /*FOR2LUA
  <Record>
  	<name>SkillSpeicalAdjust</name>
  	<Function>
  		<name>buffparam</name>
  		<replaceName>BuffParam</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_buffparam</name>
  		<replaceName>BuffParam</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_buffparam</name>
  		<replaceName>BuffParam</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_buffparam</name>
  		<replaceName>BuffParam</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>buffparam_size</name>
  		<replaceName>BuffParam</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::int32 buffparam(int index) const;
  inline void set_buffparam(int index, ::google::protobuf::int32 value);
  inline void add_buffparam(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      buffparam() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_buffparam();

  // repeated int32 AdjustData = 6;
  inline int adjustdata_size() const;
  inline void clear_adjustdata();
  static const int kAdjustDataFieldNumber = 6;
  /*FOR2LUA
  <Record>
  	<name>SkillSpeicalAdjust</name>
  	<Function>
  		<name>adjustdata</name>
  		<replaceName>AdjustData</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_adjustdata</name>
  		<replaceName>AdjustData</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_adjustdata</name>
  		<replaceName>AdjustData</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_adjustdata</name>
  		<replaceName>AdjustData</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>adjustdata_size</name>
  		<replaceName>AdjustData</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::int32 adjustdata(int index) const;
  inline void set_adjustdata(int index, ::google::protobuf::int32 value);
  inline void add_adjustdata(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      adjustdata() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_adjustdata();

  // optional int32 AdjustTarget = 7;
  inline bool has_adjusttarget() const;
  inline void clear_adjusttarget();
  static const int kAdjustTargetFieldNumber = 7;
  /*FOR2LUA
  <Record>
  	<name>SkillSpeicalAdjust</name>
  	<Function>
  		<name>adjusttarget</name>
  		<replaceName>AdjustTarget</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_adjusttarget</name>
  		<replaceName>AdjustTarget</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_adjusttarget</name>
  		<replaceName>AdjustTarget</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::int32 adjusttarget() const;
  inline void set_adjusttarget(::google::protobuf::int32 value);

  // optional bool IsUseStateAdjust = 8;
  inline bool has_isusestateadjust() const;
  inline void clear_isusestateadjust();
  static const int kIsUseStateAdjustFieldNumber = 8;
  /*FOR2LUA
  <Record>
  	<name>SkillSpeicalAdjust</name>
  	<Function>
  		<name>isusestateadjust</name>
  		<replaceName>IsUseStateAdjust</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_isusestateadjust</name>
  		<replaceName>IsUseStateAdjust</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_isusestateadjust</name>
  		<replaceName>IsUseStateAdjust</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline bool isusestateadjust() const;
  inline void set_isusestateadjust(bool value);

  // @@protoc_insertion_point(class_scope:pb.SkillSpeicalAdjust)
 private:
  inline void set_has_enable();
  inline void clear_has_enable();
  inline void set_has_effecttype();
  inline void clear_has_effecttype();
  inline void set_has_targetbuffid();
  inline void clear_has_targetbuffid();
  inline void set_has_bufftype();
  inline void clear_has_bufftype();
  inline void set_has_adjusttarget();
  inline void clear_has_adjusttarget();
  inline void set_has_isusestateadjust();
  inline void clear_has_isusestateadjust();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int32 effecttype_;
  ::google::protobuf::int32 targetbuffid_;
  ::google::protobuf::int32 bufftype_;
  bool enable_;
  bool isusestateadjust_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > buffparam_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > adjustdata_;
  ::google::protobuf::int32 adjusttarget_;
  friend void  protobuf_AddDesc_module_2fSkillData_2eproto();
  friend void protobuf_AssignDesc_module_2fSkillData_2eproto();
  friend void protobuf_ShutdownFile_module_2fSkillData_2eproto();

  void InitAsDefaultInstance();
  static SkillSpeicalAdjust* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>SkillDamageData</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>module/SkillData.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class SkillDamageData : public ::google::protobuf::Message {
 public:
  SkillDamageData();
  virtual ~SkillDamageData();

  SkillDamageData(const SkillDamageData& from);

  inline SkillDamageData& operator=(const SkillDamageData& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SkillDamageData& default_instance();

  void Swap(SkillDamageData* other);

  // implements Message ----------------------------------------------

  SkillDamageData* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SkillDamageData& from);
  void MergeFrom(const SkillDamageData& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 DamageType = 1;
  inline bool has_damagetype() const;
  inline void clear_damagetype();
  static const int kDamageTypeFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>SkillDamageData</name>
  	<Function>
  		<name>damagetype</name>
  		<replaceName>DamageType</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_damagetype</name>
  		<replaceName>DamageType</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_damagetype</name>
  		<replaceName>DamageType</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::int32 damagetype() const;
  inline void set_damagetype(::google::protobuf::int32 value);

  // optional int32 TypeParam1 = 2;
  inline bool has_typeparam1() const;
  inline void clear_typeparam1();
  static const int kTypeParam1FieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>SkillDamageData</name>
  	<Function>
  		<name>typeparam1</name>
  		<replaceName>TypeParam1</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_typeparam1</name>
  		<replaceName>TypeParam1</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_typeparam1</name>
  		<replaceName>TypeParam1</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::int32 typeparam1() const;
  inline void set_typeparam1(::google::protobuf::int32 value);

  // optional int32 TypeParam2 = 3;
  inline bool has_typeparam2() const;
  inline void clear_typeparam2();
  static const int kTypeParam2FieldNumber = 3;
  /*FOR2LUA
  <Record>
  	<name>SkillDamageData</name>
  	<Function>
  		<name>typeparam2</name>
  		<replaceName>TypeParam2</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_typeparam2</name>
  		<replaceName>TypeParam2</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_typeparam2</name>
  		<replaceName>TypeParam2</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::int32 typeparam2() const;
  inline void set_typeparam2(::google::protobuf::int32 value);

  // optional int32 TypeParam3 = 4;
  inline bool has_typeparam3() const;
  inline void clear_typeparam3();
  static const int kTypeParam3FieldNumber = 4;
  /*FOR2LUA
  <Record>
  	<name>SkillDamageData</name>
  	<Function>
  		<name>typeparam3</name>
  		<replaceName>TypeParam3</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_typeparam3</name>
  		<replaceName>TypeParam3</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_typeparam3</name>
  		<replaceName>TypeParam3</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::int32 typeparam3() const;
  inline void set_typeparam3(::google::protobuf::int32 value);

  // optional int32 CritType = 5;
  inline bool has_crittype() const;
  inline void clear_crittype();
  static const int kCritTypeFieldNumber = 5;
  /*FOR2LUA
  <Record>
  	<name>SkillDamageData</name>
  	<Function>
  		<name>crittype</name>
  		<replaceName>CritType</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_crittype</name>
  		<replaceName>CritType</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_crittype</name>
  		<replaceName>CritType</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::int32 crittype() const;
  inline void set_crittype(::google::protobuf::int32 value);

  // optional int32 CritParam = 6;
  inline bool has_critparam() const;
  inline void clear_critparam();
  static const int kCritParamFieldNumber = 6;
  /*FOR2LUA
  <Record>
  	<name>SkillDamageData</name>
  	<Function>
  		<name>critparam</name>
  		<replaceName>CritParam</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_critparam</name>
  		<replaceName>CritParam</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_critparam</name>
  		<replaceName>CritParam</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::int32 critparam() const;
  inline void set_critparam(::google::protobuf::int32 value);

  // optional int32 CritParam2 = 7;
  inline bool has_critparam2() const;
  inline void clear_critparam2();
  static const int kCritParam2FieldNumber = 7;
  /*FOR2LUA
  <Record>
  	<name>SkillDamageData</name>
  	<Function>
  		<name>critparam2</name>
  		<replaceName>CritParam2</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_critparam2</name>
  		<replaceName>CritParam2</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_critparam2</name>
  		<replaceName>CritParam2</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::int32 critparam2() const;
  inline void set_critparam2(::google::protobuf::int32 value);

  // optional int32 ExtraArmourPiercing = 8;
  inline bool has_extraarmourpiercing() const;
  inline void clear_extraarmourpiercing();
  static const int kExtraArmourPiercingFieldNumber = 8;
  /*FOR2LUA
  <Record>
  	<name>SkillDamageData</name>
  	<Function>
  		<name>extraarmourpiercing</name>
  		<replaceName>ExtraArmourPiercing</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_extraarmourpiercing</name>
  		<replaceName>ExtraArmourPiercing</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_extraarmourpiercing</name>
  		<replaceName>ExtraArmourPiercing</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::int32 extraarmourpiercing() const;
  inline void set_extraarmourpiercing(::google::protobuf::int32 value);

  // optional int32 ExtraParam1 = 9;
  inline bool has_extraparam1() const;
  inline void clear_extraparam1();
  static const int kExtraParam1FieldNumber = 9;
  /*FOR2LUA
  <Record>
  	<name>SkillDamageData</name>
  	<Function>
  		<name>extraparam1</name>
  		<replaceName>ExtraParam1</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_extraparam1</name>
  		<replaceName>ExtraParam1</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_extraparam1</name>
  		<replaceName>ExtraParam1</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::int32 extraparam1() const;
  inline void set_extraparam1(::google::protobuf::int32 value);

  // optional int32 ExtraParam2 = 10;
  inline bool has_extraparam2() const;
  inline void clear_extraparam2();
  static const int kExtraParam2FieldNumber = 10;
  /*FOR2LUA
  <Record>
  	<name>SkillDamageData</name>
  	<Function>
  		<name>extraparam2</name>
  		<replaceName>ExtraParam2</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_extraparam2</name>
  		<replaceName>ExtraParam2</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_extraparam2</name>
  		<replaceName>ExtraParam2</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::int32 extraparam2() const;
  inline void set_extraparam2(::google::protobuf::int32 value);

  // optional bool IsIgnoreBlock = 14;
  inline bool has_isignoreblock() const;
  inline void clear_isignoreblock();
  static const int kIsIgnoreBlockFieldNumber = 14;
  /*FOR2LUA
  <Record>
  	<name>SkillDamageData</name>
  	<Function>
  		<name>isignoreblock</name>
  		<replaceName>IsIgnoreBlock</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_isignoreblock</name>
  		<replaceName>IsIgnoreBlock</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_isignoreblock</name>
  		<replaceName>IsIgnoreBlock</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline bool isignoreblock() const;
  inline void set_isignoreblock(bool value);

  // optional bool AdjustByTargetCount = 15;
  inline bool has_adjustbytargetcount() const;
  inline void clear_adjustbytargetcount();
  static const int kAdjustByTargetCountFieldNumber = 15;
  /*FOR2LUA
  <Record>
  	<name>SkillDamageData</name>
  	<Function>
  		<name>adjustbytargetcount</name>
  		<replaceName>AdjustByTargetCount</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_adjustbytargetcount</name>
  		<replaceName>AdjustByTargetCount</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_adjustbytargetcount</name>
  		<replaceName>AdjustByTargetCount</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline bool adjustbytargetcount() const;
  inline void set_adjustbytargetcount(bool value);

  // repeated int32 AdjustData = 16;
  inline int adjustdata_size() const;
  inline void clear_adjustdata();
  static const int kAdjustDataFieldNumber = 16;
  /*FOR2LUA
  <Record>
  	<name>SkillDamageData</name>
  	<Function>
  		<name>adjustdata</name>
  		<replaceName>AdjustData</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_adjustdata</name>
  		<replaceName>AdjustData</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_adjustdata</name>
  		<replaceName>AdjustData</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_adjustdata</name>
  		<replaceName>AdjustData</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>adjustdata_size</name>
  		<replaceName>AdjustData</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::int32 adjustdata(int index) const;
  inline void set_adjustdata(int index, ::google::protobuf::int32 value);
  inline void add_adjustdata(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      adjustdata() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_adjustdata();

  // optional bool SkipDamage = 17;
  inline bool has_skipdamage() const;
  inline void clear_skipdamage();
  static const int kSkipDamageFieldNumber = 17;
  /*FOR2LUA
  <Record>
  	<name>SkillDamageData</name>
  	<Function>
  		<name>skipdamage</name>
  		<replaceName>SkipDamage</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_skipdamage</name>
  		<replaceName>SkipDamage</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_skipdamage</name>
  		<replaceName>SkipDamage</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline bool skipdamage() const;
  inline void set_skipdamage(bool value);

  // optional bool UpperLimit = 18;
  inline bool has_upperlimit() const;
  inline void clear_upperlimit();
  static const int kUpperLimitFieldNumber = 18;
  /*FOR2LUA
  <Record>
  	<name>SkillDamageData</name>
  	<Function>
  		<name>upperlimit</name>
  		<replaceName>UpperLimit</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_upperlimit</name>
  		<replaceName>UpperLimit</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_upperlimit</name>
  		<replaceName>UpperLimit</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline bool upperlimit() const;
  inline void set_upperlimit(bool value);

  // optional int32 UpperLimitParam = 19;
  inline bool has_upperlimitparam() const;
  inline void clear_upperlimitparam();
  static const int kUpperLimitParamFieldNumber = 19;
  /*FOR2LUA
  <Record>
  	<name>SkillDamageData</name>
  	<Function>
  		<name>upperlimitparam</name>
  		<replaceName>UpperLimitParam</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_upperlimitparam</name>
  		<replaceName>UpperLimitParam</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_upperlimitparam</name>
  		<replaceName>UpperLimitParam</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::int32 upperlimitparam() const;
  inline void set_upperlimitparam(::google::protobuf::int32 value);

  // optional .pb.SkillSpeicalAdjust SpecialAdjust = 20;
  inline bool has_specialadjust() const;
  inline void clear_specialadjust();
  static const int kSpecialAdjustFieldNumber = 20;
  /*FOR2LUA
  <Record>
  	<name>SkillDamageData</name>
  	<Function>
  		<name>specialadjust</name>
  		<replaceName>SpecialAdjust</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_specialadjust</name>
  		<replaceName>SpecialAdjust</replaceName>
  		<handler>descripter = pb_set_message_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_allocated_specialadjust</name>
  		<replaceName>SpecialAdjust</replaceName>
  		<handler>descripter = pb_set_message_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_specialadjust</name>
  		<replaceName>SpecialAdjust</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::SkillSpeicalAdjust& specialadjust() const;
  inline ::pb::SkillSpeicalAdjust* mutable_specialadjust();
  inline ::pb::SkillSpeicalAdjust* release_specialadjust();
  inline void set_allocated_specialadjust(::pb::SkillSpeicalAdjust* specialadjust);

  // optional bool IsUseStateAdjust = 21;
  inline bool has_isusestateadjust() const;
  inline void clear_isusestateadjust();
  static const int kIsUseStateAdjustFieldNumber = 21;
  /*FOR2LUA
  <Record>
  	<name>SkillDamageData</name>
  	<Function>
  		<name>isusestateadjust</name>
  		<replaceName>IsUseStateAdjust</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_isusestateadjust</name>
  		<replaceName>IsUseStateAdjust</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_isusestateadjust</name>
  		<replaceName>IsUseStateAdjust</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline bool isusestateadjust() const;
  inline void set_isusestateadjust(bool value);

  // optional int32 StateAdjustType = 22;
  inline bool has_stateadjusttype() const;
  inline void clear_stateadjusttype();
  static const int kStateAdjustTypeFieldNumber = 22;
  /*FOR2LUA
  <Record>
  	<name>SkillDamageData</name>
  	<Function>
  		<name>stateadjusttype</name>
  		<replaceName>StateAdjustType</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_stateadjusttype</name>
  		<replaceName>StateAdjustType</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_stateadjusttype</name>
  		<replaceName>StateAdjustType</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::int32 stateadjusttype() const;
  inline void set_stateadjusttype(::google::protobuf::int32 value);

  // optional int32 SkillTunnel = 23;
  inline bool has_skilltunnel() const;
  inline void clear_skilltunnel();
  static const int kSkillTunnelFieldNumber = 23;
  /*FOR2LUA
  <Record>
  	<name>SkillDamageData</name>
  	<Function>
  		<name>skilltunnel</name>
  		<replaceName>SkillTunnel</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_skilltunnel</name>
  		<replaceName>SkillTunnel</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_skilltunnel</name>
  		<replaceName>SkillTunnel</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::int32 skilltunnel() const;
  inline void set_skilltunnel(::google::protobuf::int32 value);

  // optional bool LowerLimit = 24;
  inline bool has_lowerlimit() const;
  inline void clear_lowerlimit();
  static const int kLowerLimitFieldNumber = 24;
  /*FOR2LUA
  <Record>
  	<name>SkillDamageData</name>
  	<Function>
  		<name>lowerlimit</name>
  		<replaceName>LowerLimit</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_lowerlimit</name>
  		<replaceName>LowerLimit</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_lowerlimit</name>
  		<replaceName>LowerLimit</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline bool lowerlimit() const;
  inline void set_lowerlimit(bool value);

  // optional int32 LowerLimitType = 25;
  inline bool has_lowerlimittype() const;
  inline void clear_lowerlimittype();
  static const int kLowerLimitTypeFieldNumber = 25;
  /*FOR2LUA
  <Record>
  	<name>SkillDamageData</name>
  	<Function>
  		<name>lowerlimittype</name>
  		<replaceName>LowerLimitType</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_lowerlimittype</name>
  		<replaceName>LowerLimitType</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_lowerlimittype</name>
  		<replaceName>LowerLimitType</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::int32 lowerlimittype() const;
  inline void set_lowerlimittype(::google::protobuf::int32 value);

  // optional int32 LowerLimitParam = 26;
  inline bool has_lowerlimitparam() const;
  inline void clear_lowerlimitparam();
  static const int kLowerLimitParamFieldNumber = 26;
  /*FOR2LUA
  <Record>
  	<name>SkillDamageData</name>
  	<Function>
  		<name>lowerlimitparam</name>
  		<replaceName>LowerLimitParam</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_lowerlimitparam</name>
  		<replaceName>LowerLimitParam</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_lowerlimitparam</name>
  		<replaceName>LowerLimitParam</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::int32 lowerlimitparam() const;
  inline void set_lowerlimitparam(::google::protobuf::int32 value);

  // optional bool IgnoreShield = 27;
  inline bool has_ignoreshield() const;
  inline void clear_ignoreshield();
  static const int kIgnoreShieldFieldNumber = 27;
  /*FOR2LUA
  <Record>
  	<name>SkillDamageData</name>
  	<Function>
  		<name>ignoreshield</name>
  		<replaceName>IgnoreShield</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_ignoreshield</name>
  		<replaceName>IgnoreShield</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_ignoreshield</name>
  		<replaceName>IgnoreShield</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline bool ignoreshield() const;
  inline void set_ignoreshield(bool value);

  // optional bool IgnoreBeDamageRage = 28;
  inline bool has_ignorebedamagerage() const;
  inline void clear_ignorebedamagerage();
  static const int kIgnoreBeDamageRageFieldNumber = 28;
  /*FOR2LUA
  <Record>
  	<name>SkillDamageData</name>
  	<Function>
  		<name>ignorebedamagerage</name>
  		<replaceName>IgnoreBeDamageRage</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_ignorebedamagerage</name>
  		<replaceName>IgnoreBeDamageRage</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_ignorebedamagerage</name>
  		<replaceName>IgnoreBeDamageRage</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline bool ignorebedamagerage() const;
  inline void set_ignorebedamagerage(bool value);

  // optional int32 BuffId = 29;
  inline bool has_buffid() const;
  inline void clear_buffid();
  static const int kBuffIdFieldNumber = 29;
  /*FOR2LUA
  <Record>
  	<name>SkillDamageData</name>
  	<Function>
  		<name>buffid</name>
  		<replaceName>BuffId</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_buffid</name>
  		<replaceName>BuffId</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_buffid</name>
  		<replaceName>BuffId</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::int32 buffid() const;
  inline void set_buffid(::google::protobuf::int32 value);

  // optional bool HealByEffNum = 30;
  inline bool has_healbyeffnum() const;
  inline void clear_healbyeffnum();
  static const int kHealByEffNumFieldNumber = 30;
  /*FOR2LUA
  <Record>
  	<name>SkillDamageData</name>
  	<Function>
  		<name>healbyeffnum</name>
  		<replaceName>HealByEffNum</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_healbyeffnum</name>
  		<replaceName>HealByEffNum</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_healbyeffnum</name>
  		<replaceName>HealByEffNum</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline bool healbyeffnum() const;
  inline void set_healbyeffnum(bool value);

  // optional int32 HealCoefficient = 31;
  inline bool has_healcoefficient() const;
  inline void clear_healcoefficient();
  static const int kHealCoefficientFieldNumber = 31;
  /*FOR2LUA
  <Record>
  	<name>SkillDamageData</name>
  	<Function>
  		<name>healcoefficient</name>
  		<replaceName>HealCoefficient</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_healcoefficient</name>
  		<replaceName>HealCoefficient</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_healcoefficient</name>
  		<replaceName>HealCoefficient</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::int32 healcoefficient() const;
  inline void set_healcoefficient(::google::protobuf::int32 value);

  // optional int32 BuffId2 = 32;
  inline bool has_buffid2() const;
  inline void clear_buffid2();
  static const int kBuffId2FieldNumber = 32;
  /*FOR2LUA
  <Record>
  	<name>SkillDamageData</name>
  	<Function>
  		<name>buffid2</name>
  		<replaceName>BuffId2</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_buffid2</name>
  		<replaceName>BuffId2</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_buffid2</name>
  		<replaceName>BuffId2</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::int32 buffid2() const;
  inline void set_buffid2(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:pb.SkillDamageData)
 private:
  inline void set_has_damagetype();
  inline void clear_has_damagetype();
  inline void set_has_typeparam1();
  inline void clear_has_typeparam1();
  inline void set_has_typeparam2();
  inline void clear_has_typeparam2();
  inline void set_has_typeparam3();
  inline void clear_has_typeparam3();
  inline void set_has_crittype();
  inline void clear_has_crittype();
  inline void set_has_critparam();
  inline void clear_has_critparam();
  inline void set_has_critparam2();
  inline void clear_has_critparam2();
  inline void set_has_extraarmourpiercing();
  inline void clear_has_extraarmourpiercing();
  inline void set_has_extraparam1();
  inline void clear_has_extraparam1();
  inline void set_has_extraparam2();
  inline void clear_has_extraparam2();
  inline void set_has_isignoreblock();
  inline void clear_has_isignoreblock();
  inline void set_has_adjustbytargetcount();
  inline void clear_has_adjustbytargetcount();
  inline void set_has_skipdamage();
  inline void clear_has_skipdamage();
  inline void set_has_upperlimit();
  inline void clear_has_upperlimit();
  inline void set_has_upperlimitparam();
  inline void clear_has_upperlimitparam();
  inline void set_has_specialadjust();
  inline void clear_has_specialadjust();
  inline void set_has_isusestateadjust();
  inline void clear_has_isusestateadjust();
  inline void set_has_stateadjusttype();
  inline void clear_has_stateadjusttype();
  inline void set_has_skilltunnel();
  inline void clear_has_skilltunnel();
  inline void set_has_lowerlimit();
  inline void clear_has_lowerlimit();
  inline void set_has_lowerlimittype();
  inline void clear_has_lowerlimittype();
  inline void set_has_lowerlimitparam();
  inline void clear_has_lowerlimitparam();
  inline void set_has_ignoreshield();
  inline void clear_has_ignoreshield();
  inline void set_has_ignorebedamagerage();
  inline void clear_has_ignorebedamagerage();
  inline void set_has_buffid();
  inline void clear_has_buffid();
  inline void set_has_healbyeffnum();
  inline void clear_has_healbyeffnum();
  inline void set_has_healcoefficient();
  inline void clear_has_healcoefficient();
  inline void set_has_buffid2();
  inline void clear_has_buffid2();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int32 damagetype_;
  ::google::protobuf::int32 typeparam1_;
  ::google::protobuf::int32 typeparam2_;
  ::google::protobuf::int32 typeparam3_;
  ::google::protobuf::int32 crittype_;
  ::google::protobuf::int32 critparam_;
  ::google::protobuf::int32 critparam2_;
  ::google::protobuf::int32 extraarmourpiercing_;
  ::google::protobuf::int32 extraparam1_;
  ::google::protobuf::int32 extraparam2_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > adjustdata_;
  bool isignoreblock_;
  bool adjustbytargetcount_;
  bool skipdamage_;
  bool upperlimit_;
  ::google::protobuf::int32 upperlimitparam_;
  ::pb::SkillSpeicalAdjust* specialadjust_;
  ::google::protobuf::int32 stateadjusttype_;
  ::google::protobuf::int32 skilltunnel_;
  ::google::protobuf::int32 lowerlimittype_;
  bool isusestateadjust_;
  bool lowerlimit_;
  bool ignoreshield_;
  bool ignorebedamagerage_;
  ::google::protobuf::int32 lowerlimitparam_;
  ::google::protobuf::int32 buffid_;
  bool healbyeffnum_;
  ::google::protobuf::int32 healcoefficient_;
  ::google::protobuf::int32 buffid2_;
  friend void  protobuf_AddDesc_module_2fSkillData_2eproto();
  friend void protobuf_AssignDesc_module_2fSkillData_2eproto();
  friend void protobuf_ShutdownFile_module_2fSkillData_2eproto();

  void InitAsDefaultInstance();
  static SkillDamageData* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>SkillHealData</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>module/SkillData.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class SkillHealData : public ::google::protobuf::Message {
 public:
  SkillHealData();
  virtual ~SkillHealData();

  SkillHealData(const SkillHealData& from);

  inline SkillHealData& operator=(const SkillHealData& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SkillHealData& default_instance();

  void Swap(SkillHealData* other);

  // implements Message ----------------------------------------------

  SkillHealData* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SkillHealData& from);
  void MergeFrom(const SkillHealData& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 HealType = 1;
  inline bool has_healtype() const;
  inline void clear_healtype();
  static const int kHealTypeFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>SkillHealData</name>
  	<Function>
  		<name>healtype</name>
  		<replaceName>HealType</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_healtype</name>
  		<replaceName>HealType</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_healtype</name>
  		<replaceName>HealType</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::int32 healtype() const;
  inline void set_healtype(::google::protobuf::int32 value);

  // optional int32 TypeParam1 = 2;
  inline bool has_typeparam1() const;
  inline void clear_typeparam1();
  static const int kTypeParam1FieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>SkillHealData</name>
  	<Function>
  		<name>typeparam1</name>
  		<replaceName>TypeParam1</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_typeparam1</name>
  		<replaceName>TypeParam1</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_typeparam1</name>
  		<replaceName>TypeParam1</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::int32 typeparam1() const;
  inline void set_typeparam1(::google::protobuf::int32 value);

  // optional int32 TypeParam2 = 3;
  inline bool has_typeparam2() const;
  inline void clear_typeparam2();
  static const int kTypeParam2FieldNumber = 3;
  /*FOR2LUA
  <Record>
  	<name>SkillHealData</name>
  	<Function>
  		<name>typeparam2</name>
  		<replaceName>TypeParam2</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_typeparam2</name>
  		<replaceName>TypeParam2</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_typeparam2</name>
  		<replaceName>TypeParam2</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::int32 typeparam2() const;
  inline void set_typeparam2(::google::protobuf::int32 value);

  // optional int32 TypeParam3 = 4;
  inline bool has_typeparam3() const;
  inline void clear_typeparam3();
  static const int kTypeParam3FieldNumber = 4;
  /*FOR2LUA
  <Record>
  	<name>SkillHealData</name>
  	<Function>
  		<name>typeparam3</name>
  		<replaceName>TypeParam3</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_typeparam3</name>
  		<replaceName>TypeParam3</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_typeparam3</name>
  		<replaceName>TypeParam3</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::int32 typeparam3() const;
  inline void set_typeparam3(::google::protobuf::int32 value);

  // optional int32 CritType = 5;
  inline bool has_crittype() const;
  inline void clear_crittype();
  static const int kCritTypeFieldNumber = 5;
  /*FOR2LUA
  <Record>
  	<name>SkillHealData</name>
  	<Function>
  		<name>crittype</name>
  		<replaceName>CritType</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_crittype</name>
  		<replaceName>CritType</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_crittype</name>
  		<replaceName>CritType</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::int32 crittype() const;
  inline void set_crittype(::google::protobuf::int32 value);

  // optional int32 CritParam = 6;
  inline bool has_critparam() const;
  inline void clear_critparam();
  static const int kCritParamFieldNumber = 6;
  /*FOR2LUA
  <Record>
  	<name>SkillHealData</name>
  	<Function>
  		<name>critparam</name>
  		<replaceName>CritParam</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_critparam</name>
  		<replaceName>CritParam</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_critparam</name>
  		<replaceName>CritParam</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::int32 critparam() const;
  inline void set_critparam(::google::protobuf::int32 value);

  // optional int32 ExtraParam1 = 8;
  inline bool has_extraparam1() const;
  inline void clear_extraparam1();
  static const int kExtraParam1FieldNumber = 8;
  /*FOR2LUA
  <Record>
  	<name>SkillHealData</name>
  	<Function>
  		<name>extraparam1</name>
  		<replaceName>ExtraParam1</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_extraparam1</name>
  		<replaceName>ExtraParam1</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_extraparam1</name>
  		<replaceName>ExtraParam1</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::int32 extraparam1() const;
  inline void set_extraparam1(::google::protobuf::int32 value);

  // optional int32 ExtraParam2 = 9;
  inline bool has_extraparam2() const;
  inline void clear_extraparam2();
  static const int kExtraParam2FieldNumber = 9;
  /*FOR2LUA
  <Record>
  	<name>SkillHealData</name>
  	<Function>
  		<name>extraparam2</name>
  		<replaceName>ExtraParam2</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_extraparam2</name>
  		<replaceName>ExtraParam2</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_extraparam2</name>
  		<replaceName>ExtraParam2</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::int32 extraparam2() const;
  inline void set_extraparam2(::google::protobuf::int32 value);

  // optional bool IsIgnoreBlock = 13;
  inline bool has_isignoreblock() const;
  inline void clear_isignoreblock();
  static const int kIsIgnoreBlockFieldNumber = 13;
  /*FOR2LUA
  <Record>
  	<name>SkillHealData</name>
  	<Function>
  		<name>isignoreblock</name>
  		<replaceName>IsIgnoreBlock</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_isignoreblock</name>
  		<replaceName>IsIgnoreBlock</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_isignoreblock</name>
  		<replaceName>IsIgnoreBlock</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline bool isignoreblock() const;
  inline void set_isignoreblock(bool value);

  // optional bool AdjustByTargetCount = 14;
  inline bool has_adjustbytargetcount() const;
  inline void clear_adjustbytargetcount();
  static const int kAdjustByTargetCountFieldNumber = 14;
  /*FOR2LUA
  <Record>
  	<name>SkillHealData</name>
  	<Function>
  		<name>adjustbytargetcount</name>
  		<replaceName>AdjustByTargetCount</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_adjustbytargetcount</name>
  		<replaceName>AdjustByTargetCount</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_adjustbytargetcount</name>
  		<replaceName>AdjustByTargetCount</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline bool adjustbytargetcount() const;
  inline void set_adjustbytargetcount(bool value);

  // repeated int32 AdjustData = 15;
  inline int adjustdata_size() const;
  inline void clear_adjustdata();
  static const int kAdjustDataFieldNumber = 15;
  /*FOR2LUA
  <Record>
  	<name>SkillHealData</name>
  	<Function>
  		<name>adjustdata</name>
  		<replaceName>AdjustData</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_adjustdata</name>
  		<replaceName>AdjustData</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_adjustdata</name>
  		<replaceName>AdjustData</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_adjustdata</name>
  		<replaceName>AdjustData</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>adjustdata_size</name>
  		<replaceName>AdjustData</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::int32 adjustdata(int index) const;
  inline void set_adjustdata(int index, ::google::protobuf::int32 value);
  inline void add_adjustdata(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      adjustdata() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_adjustdata();

  // optional bool UpperLimit = 16;
  inline bool has_upperlimit() const;
  inline void clear_upperlimit();
  static const int kUpperLimitFieldNumber = 16;
  /*FOR2LUA
  <Record>
  	<name>SkillHealData</name>
  	<Function>
  		<name>upperlimit</name>
  		<replaceName>UpperLimit</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_upperlimit</name>
  		<replaceName>UpperLimit</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_upperlimit</name>
  		<replaceName>UpperLimit</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline bool upperlimit() const;
  inline void set_upperlimit(bool value);

  // optional int32 UpperLimitParam = 17;
  inline bool has_upperlimitparam() const;
  inline void clear_upperlimitparam();
  static const int kUpperLimitParamFieldNumber = 17;
  /*FOR2LUA
  <Record>
  	<name>SkillHealData</name>
  	<Function>
  		<name>upperlimitparam</name>
  		<replaceName>UpperLimitParam</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_upperlimitparam</name>
  		<replaceName>UpperLimitParam</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_upperlimitparam</name>
  		<replaceName>UpperLimitParam</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::int32 upperlimitparam() const;
  inline void set_upperlimitparam(::google::protobuf::int32 value);

  // optional .pb.SkillSpeicalAdjust SpecialAdjust = 18;
  inline bool has_specialadjust() const;
  inline void clear_specialadjust();
  static const int kSpecialAdjustFieldNumber = 18;
  /*FOR2LUA
  <Record>
  	<name>SkillHealData</name>
  	<Function>
  		<name>specialadjust</name>
  		<replaceName>SpecialAdjust</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_specialadjust</name>
  		<replaceName>SpecialAdjust</replaceName>
  		<handler>descripter = pb_set_message_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_allocated_specialadjust</name>
  		<replaceName>SpecialAdjust</replaceName>
  		<handler>descripter = pb_set_message_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_specialadjust</name>
  		<replaceName>SpecialAdjust</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::SkillSpeicalAdjust& specialadjust() const;
  inline ::pb::SkillSpeicalAdjust* mutable_specialadjust();
  inline ::pb::SkillSpeicalAdjust* release_specialadjust();
  inline void set_allocated_specialadjust(::pb::SkillSpeicalAdjust* specialadjust);

  // optional bool LowerLimit = 19;
  inline bool has_lowerlimit() const;
  inline void clear_lowerlimit();
  static const int kLowerLimitFieldNumber = 19;
  /*FOR2LUA
  <Record>
  	<name>SkillHealData</name>
  	<Function>
  		<name>lowerlimit</name>
  		<replaceName>LowerLimit</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_lowerlimit</name>
  		<replaceName>LowerLimit</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_lowerlimit</name>
  		<replaceName>LowerLimit</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline bool lowerlimit() const;
  inline void set_lowerlimit(bool value);

  // optional int32 LowerLimitType = 20;
  inline bool has_lowerlimittype() const;
  inline void clear_lowerlimittype();
  static const int kLowerLimitTypeFieldNumber = 20;
  /*FOR2LUA
  <Record>
  	<name>SkillHealData</name>
  	<Function>
  		<name>lowerlimittype</name>
  		<replaceName>LowerLimitType</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_lowerlimittype</name>
  		<replaceName>LowerLimitType</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_lowerlimittype</name>
  		<replaceName>LowerLimitType</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::int32 lowerlimittype() const;
  inline void set_lowerlimittype(::google::protobuf::int32 value);

  // optional int32 LowerLimitParam = 21;
  inline bool has_lowerlimitparam() const;
  inline void clear_lowerlimitparam();
  static const int kLowerLimitParamFieldNumber = 21;
  /*FOR2LUA
  <Record>
  	<name>SkillHealData</name>
  	<Function>
  		<name>lowerlimitparam</name>
  		<replaceName>LowerLimitParam</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_lowerlimitparam</name>
  		<replaceName>LowerLimitParam</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_lowerlimitparam</name>
  		<replaceName>LowerLimitParam</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::int32 lowerlimitparam() const;
  inline void set_lowerlimitparam(::google::protobuf::int32 value);

  // optional int32 BuffId = 22;
  inline bool has_buffid() const;
  inline void clear_buffid();
  static const int kBuffIdFieldNumber = 22;
  /*FOR2LUA
  <Record>
  	<name>SkillHealData</name>
  	<Function>
  		<name>buffid</name>
  		<replaceName>BuffId</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_buffid</name>
  		<replaceName>BuffId</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_buffid</name>
  		<replaceName>BuffId</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::int32 buffid() const;
  inline void set_buffid(::google::protobuf::int32 value);

  // optional int32 CritParam2 = 23;
  inline bool has_critparam2() const;
  inline void clear_critparam2();
  static const int kCritParam2FieldNumber = 23;
  /*FOR2LUA
  <Record>
  	<name>SkillHealData</name>
  	<Function>
  		<name>critparam2</name>
  		<replaceName>CritParam2</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_critparam2</name>
  		<replaceName>CritParam2</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_critparam2</name>
  		<replaceName>CritParam2</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::int32 critparam2() const;
  inline void set_critparam2(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:pb.SkillHealData)
 private:
  inline void set_has_healtype();
  inline void clear_has_healtype();
  inline void set_has_typeparam1();
  inline void clear_has_typeparam1();
  inline void set_has_typeparam2();
  inline void clear_has_typeparam2();
  inline void set_has_typeparam3();
  inline void clear_has_typeparam3();
  inline void set_has_crittype();
  inline void clear_has_crittype();
  inline void set_has_critparam();
  inline void clear_has_critparam();
  inline void set_has_extraparam1();
  inline void clear_has_extraparam1();
  inline void set_has_extraparam2();
  inline void clear_has_extraparam2();
  inline void set_has_isignoreblock();
  inline void clear_has_isignoreblock();
  inline void set_has_adjustbytargetcount();
  inline void clear_has_adjustbytargetcount();
  inline void set_has_upperlimit();
  inline void clear_has_upperlimit();
  inline void set_has_upperlimitparam();
  inline void clear_has_upperlimitparam();
  inline void set_has_specialadjust();
  inline void clear_has_specialadjust();
  inline void set_has_lowerlimit();
  inline void clear_has_lowerlimit();
  inline void set_has_lowerlimittype();
  inline void clear_has_lowerlimittype();
  inline void set_has_lowerlimitparam();
  inline void clear_has_lowerlimitparam();
  inline void set_has_buffid();
  inline void clear_has_buffid();
  inline void set_has_critparam2();
  inline void clear_has_critparam2();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int32 healtype_;
  ::google::protobuf::int32 typeparam1_;
  ::google::protobuf::int32 typeparam2_;
  ::google::protobuf::int32 typeparam3_;
  ::google::protobuf::int32 crittype_;
  ::google::protobuf::int32 critparam_;
  ::google::protobuf::int32 extraparam1_;
  ::google::protobuf::int32 extraparam2_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > adjustdata_;
  bool isignoreblock_;
  bool adjustbytargetcount_;
  bool upperlimit_;
  bool lowerlimit_;
  ::google::protobuf::int32 upperlimitparam_;
  ::pb::SkillSpeicalAdjust* specialadjust_;
  ::google::protobuf::int32 lowerlimittype_;
  ::google::protobuf::int32 lowerlimitparam_;
  ::google::protobuf::int32 buffid_;
  ::google::protobuf::int32 critparam2_;
  friend void  protobuf_AddDesc_module_2fSkillData_2eproto();
  friend void protobuf_AssignDesc_module_2fSkillData_2eproto();
  friend void protobuf_ShutdownFile_module_2fSkillData_2eproto();

  void InitAsDefaultInstance();
  static SkillHealData* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>SkillSummonObstacleData</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>module/SkillData.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class SkillSummonObstacleData : public ::google::protobuf::Message {
 public:
  SkillSummonObstacleData();
  virtual ~SkillSummonObstacleData();

  SkillSummonObstacleData(const SkillSummonObstacleData& from);

  inline SkillSummonObstacleData& operator=(const SkillSummonObstacleData& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SkillSummonObstacleData& default_instance();

  void Swap(SkillSummonObstacleData* other);

  // implements Message ----------------------------------------------

  SkillSummonObstacleData* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SkillSummonObstacleData& from);
  void MergeFrom(const SkillSummonObstacleData& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 ShapeType = 1;
  inline bool has_shapetype() const;
  inline void clear_shapetype();
  static const int kShapeTypeFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>SkillSummonObstacleData</name>
  	<Function>
  		<name>shapetype</name>
  		<replaceName>ShapeType</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_shapetype</name>
  		<replaceName>ShapeType</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_shapetype</name>
  		<replaceName>ShapeType</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::int32 shapetype() const;
  inline void set_shapetype(::google::protobuf::int32 value);

  // optional int32 ShapeParam1 = 2;
  inline bool has_shapeparam1() const;
  inline void clear_shapeparam1();
  static const int kShapeParam1FieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>SkillSummonObstacleData</name>
  	<Function>
  		<name>shapeparam1</name>
  		<replaceName>ShapeParam1</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_shapeparam1</name>
  		<replaceName>ShapeParam1</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_shapeparam1</name>
  		<replaceName>ShapeParam1</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::int32 shapeparam1() const;
  inline void set_shapeparam1(::google::protobuf::int32 value);

  // optional int32 ShapeParam2 = 3;
  inline bool has_shapeparam2() const;
  inline void clear_shapeparam2();
  static const int kShapeParam2FieldNumber = 3;
  /*FOR2LUA
  <Record>
  	<name>SkillSummonObstacleData</name>
  	<Function>
  		<name>shapeparam2</name>
  		<replaceName>ShapeParam2</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_shapeparam2</name>
  		<replaceName>ShapeParam2</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_shapeparam2</name>
  		<replaceName>ShapeParam2</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::int32 shapeparam2() const;
  inline void set_shapeparam2(::google::protobuf::int32 value);

  // optional int32 PositionType = 4;
  inline bool has_positiontype() const;
  inline void clear_positiontype();
  static const int kPositionTypeFieldNumber = 4;
  /*FOR2LUA
  <Record>
  	<name>SkillSummonObstacleData</name>
  	<Function>
  		<name>positiontype</name>
  		<replaceName>PositionType</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_positiontype</name>
  		<replaceName>PositionType</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_positiontype</name>
  		<replaceName>PositionType</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::int32 positiontype() const;
  inline void set_positiontype(::google::protobuf::int32 value);

  // optional int32 Distance = 5;
  inline bool has_distance() const;
  inline void clear_distance();
  static const int kDistanceFieldNumber = 5;
  /*FOR2LUA
  <Record>
  	<name>SkillSummonObstacleData</name>
  	<Function>
  		<name>distance</name>
  		<replaceName>Distance</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_distance</name>
  		<replaceName>Distance</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_distance</name>
  		<replaceName>Distance</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::int32 distance() const;
  inline void set_distance(::google::protobuf::int32 value);

  // optional int32 BuffId = 6;
  inline bool has_buffid() const;
  inline void clear_buffid();
  static const int kBuffIdFieldNumber = 6;
  /*FOR2LUA
  <Record>
  	<name>SkillSummonObstacleData</name>
  	<Function>
  		<name>buffid</name>
  		<replaceName>BuffId</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_buffid</name>
  		<replaceName>BuffId</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_buffid</name>
  		<replaceName>BuffId</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::int32 buffid() const;
  inline void set_buffid(::google::protobuf::int32 value);

  // optional int32 LastTime = 7;
  inline bool has_lasttime() const;
  inline void clear_lasttime();
  static const int kLastTimeFieldNumber = 7;
  /*FOR2LUA
  <Record>
  	<name>SkillSummonObstacleData</name>
  	<Function>
  		<name>lasttime</name>
  		<replaceName>LastTime</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_lasttime</name>
  		<replaceName>LastTime</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_lasttime</name>
  		<replaceName>LastTime</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::int32 lasttime() const;
  inline void set_lasttime(::google::protobuf::int32 value);

  // optional int32 TargetType = 9;
  inline bool has_targettype() const;
  inline void clear_targettype();
  static const int kTargetTypeFieldNumber = 9;
  /*FOR2LUA
  <Record>
  	<name>SkillSummonObstacleData</name>
  	<Function>
  		<name>targettype</name>
  		<replaceName>TargetType</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_targettype</name>
  		<replaceName>TargetType</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_targettype</name>
  		<replaceName>TargetType</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::int32 targettype() const;
  inline void set_targettype(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:pb.SkillSummonObstacleData)
 private:
  inline void set_has_shapetype();
  inline void clear_has_shapetype();
  inline void set_has_shapeparam1();
  inline void clear_has_shapeparam1();
  inline void set_has_shapeparam2();
  inline void clear_has_shapeparam2();
  inline void set_has_positiontype();
  inline void clear_has_positiontype();
  inline void set_has_distance();
  inline void clear_has_distance();
  inline void set_has_buffid();
  inline void clear_has_buffid();
  inline void set_has_lasttime();
  inline void clear_has_lasttime();
  inline void set_has_targettype();
  inline void clear_has_targettype();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int32 shapetype_;
  ::google::protobuf::int32 shapeparam1_;
  ::google::protobuf::int32 shapeparam2_;
  ::google::protobuf::int32 positiontype_;
  ::google::protobuf::int32 distance_;
  ::google::protobuf::int32 buffid_;
  ::google::protobuf::int32 lasttime_;
  ::google::protobuf::int32 targettype_;
  friend void  protobuf_AddDesc_module_2fSkillData_2eproto();
  friend void protobuf_AssignDesc_module_2fSkillData_2eproto();
  friend void protobuf_ShutdownFile_module_2fSkillData_2eproto();

  void InitAsDefaultInstance();
  static SkillSummonObstacleData* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>SkillSummonData</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>module/SkillData.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class SkillSummonData : public ::google::protobuf::Message {
 public:
  SkillSummonData();
  virtual ~SkillSummonData();

  SkillSummonData(const SkillSummonData& from);

  inline SkillSummonData& operator=(const SkillSummonData& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SkillSummonData& default_instance();

  void Swap(SkillSummonData* other);

  // implements Message ----------------------------------------------

  SkillSummonData* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SkillSummonData& from);
  void MergeFrom(const SkillSummonData& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated int32 ID = 1;
  inline int id_size() const;
  inline void clear_id();
  static const int kIDFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>SkillSummonData</name>
  	<Function>
  		<name>id</name>
  		<replaceName>ID</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_id</name>
  		<replaceName>ID</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_id</name>
  		<replaceName>ID</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_id</name>
  		<replaceName>ID</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>id_size</name>
  		<replaceName>ID</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::int32 id(int index) const;
  inline void set_id(int index, ::google::protobuf::int32 value);
  inline void add_id(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      id() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_id();

  // repeated int32 Num = 2;
  inline int num_size() const;
  inline void clear_num();
  static const int kNumFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>SkillSummonData</name>
  	<Function>
  		<name>num</name>
  		<replaceName>Num</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_num</name>
  		<replaceName>Num</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_num</name>
  		<replaceName>Num</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_num</name>
  		<replaceName>Num</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>num_size</name>
  		<replaceName>Num</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::int32 num(int index) const;
  inline void set_num(int index, ::google::protobuf::int32 value);
  inline void add_num(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      num() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_num();

  // optional int32 Positon = 3;
  inline bool has_positon() const;
  inline void clear_positon();
  static const int kPositonFieldNumber = 3;
  /*FOR2LUA
  <Record>
  	<name>SkillSummonData</name>
  	<Function>
  		<name>positon</name>
  		<replaceName>Positon</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_positon</name>
  		<replaceName>Positon</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_positon</name>
  		<replaceName>Positon</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::int32 positon() const;
  inline void set_positon(::google::protobuf::int32 value);

  // optional int32 Formation = 4;
  inline bool has_formation() const;
  inline void clear_formation();
  static const int kFormationFieldNumber = 4;
  /*FOR2LUA
  <Record>
  	<name>SkillSummonData</name>
  	<Function>
  		<name>formation</name>
  		<replaceName>Formation</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_formation</name>
  		<replaceName>Formation</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_formation</name>
  		<replaceName>Formation</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::int32 formation() const;
  inline void set_formation(::google::protobuf::int32 value);

  // optional int32 MinDistance = 5;
  inline bool has_mindistance() const;
  inline void clear_mindistance();
  static const int kMinDistanceFieldNumber = 5;
  /*FOR2LUA
  <Record>
  	<name>SkillSummonData</name>
  	<Function>
  		<name>mindistance</name>
  		<replaceName>MinDistance</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_mindistance</name>
  		<replaceName>MinDistance</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_mindistance</name>
  		<replaceName>MinDistance</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::int32 mindistance() const;
  inline void set_mindistance(::google::protobuf::int32 value);

  // optional string BornEffect = 6;
  inline bool has_borneffect() const;
  inline void clear_borneffect();
  static const int kBornEffectFieldNumber = 6;
  /*FOR2LUA
  <Record>
  	<name>SkillSummonData</name>
  	<Function>
  		<name>borneffect</name>
  		<replaceName>BornEffect</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_borneffect</name>
  		<replaceName>BornEffect</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_borneffect</name>
  		<replaceName>BornEffect</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::std::string& borneffect() const;
  inline void set_borneffect(const ::std::string& value);
  inline void set_borneffect(const char* value);
  inline void set_borneffect(const char* value, size_t size);
  inline ::std::string* mutable_borneffect();
  inline ::std::string* release_borneffect();
  inline void set_allocated_borneffect(::std::string* borneffect);

  // optional string BornSound = 7;
  inline bool has_bornsound() const;
  inline void clear_bornsound();
  static const int kBornSoundFieldNumber = 7;
  /*FOR2LUA
  <Record>
  	<name>SkillSummonData</name>
  	<Function>
  		<name>bornsound</name>
  		<replaceName>BornSound</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_bornsound</name>
  		<replaceName>BornSound</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_bornsound</name>
  		<replaceName>BornSound</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::std::string& bornsound() const;
  inline void set_bornsound(const ::std::string& value);
  inline void set_bornsound(const char* value);
  inline void set_bornsound(const char* value, size_t size);
  inline ::std::string* mutable_bornsound();
  inline ::std::string* release_bornsound();
  inline void set_allocated_bornsound(::std::string* bornsound);

  // optional int32 LevelType = 8;
  inline bool has_leveltype() const;
  inline void clear_leveltype();
  static const int kLevelTypeFieldNumber = 8;
  /*FOR2LUA
  <Record>
  	<name>SkillSummonData</name>
  	<Function>
  		<name>leveltype</name>
  		<replaceName>LevelType</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_leveltype</name>
  		<replaceName>LevelType</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_leveltype</name>
  		<replaceName>LevelType</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::int32 leveltype() const;
  inline void set_leveltype(::google::protobuf::int32 value);

  // optional int32 LevelParam = 9;
  inline bool has_levelparam() const;
  inline void clear_levelparam();
  static const int kLevelParamFieldNumber = 9;
  /*FOR2LUA
  <Record>
  	<name>SkillSummonData</name>
  	<Function>
  		<name>levelparam</name>
  		<replaceName>LevelParam</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_levelparam</name>
  		<replaceName>LevelParam</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_levelparam</name>
  		<replaceName>LevelParam</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::int32 levelparam() const;
  inline void set_levelparam(::google::protobuf::int32 value);

  // optional int32 LastTimeType = 10;
  inline bool has_lasttimetype() const;
  inline void clear_lasttimetype();
  static const int kLastTimeTypeFieldNumber = 10;
  /*FOR2LUA
  <Record>
  	<name>SkillSummonData</name>
  	<Function>
  		<name>lasttimetype</name>
  		<replaceName>LastTimeType</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_lasttimetype</name>
  		<replaceName>LastTimeType</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_lasttimetype</name>
  		<replaceName>LastTimeType</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::int32 lasttimetype() const;
  inline void set_lasttimetype(::google::protobuf::int32 value);

  // optional int32 LastTimeParam = 11;
  inline bool has_lasttimeparam() const;
  inline void clear_lasttimeparam();
  static const int kLastTimeParamFieldNumber = 11;
  /*FOR2LUA
  <Record>
  	<name>SkillSummonData</name>
  	<Function>
  		<name>lasttimeparam</name>
  		<replaceName>LastTimeParam</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_lasttimeparam</name>
  		<replaceName>LastTimeParam</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_lasttimeparam</name>
  		<replaceName>LastTimeParam</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::int32 lasttimeparam() const;
  inline void set_lasttimeparam(::google::protobuf::int32 value);

  // optional bool CanOverScreen = 12;
  inline bool has_canoverscreen() const;
  inline void clear_canoverscreen();
  static const int kCanOverScreenFieldNumber = 12;
  /*FOR2LUA
  <Record>
  	<name>SkillSummonData</name>
  	<Function>
  		<name>canoverscreen</name>
  		<replaceName>CanOverScreen</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_canoverscreen</name>
  		<replaceName>CanOverScreen</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_canoverscreen</name>
  		<replaceName>CanOverScreen</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline bool canoverscreen() const;
  inline void set_canoverscreen(bool value);

  // optional int32 MaxSameIDUnit = 13;
  inline bool has_maxsameidunit() const;
  inline void clear_maxsameidunit();
  static const int kMaxSameIDUnitFieldNumber = 13;
  /*FOR2LUA
  <Record>
  	<name>SkillSummonData</name>
  	<Function>
  		<name>maxsameidunit</name>
  		<replaceName>MaxSameIDUnit</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_maxsameidunit</name>
  		<replaceName>MaxSameIDUnit</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_maxsameidunit</name>
  		<replaceName>MaxSameIDUnit</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::int32 maxsameidunit() const;
  inline void set_maxsameidunit(::google::protobuf::int32 value);

  // optional bool DeleteSameIDUnit = 14;
  inline bool has_deletesameidunit() const;
  inline void clear_deletesameidunit();
  static const int kDeleteSameIDUnitFieldNumber = 14;
  /*FOR2LUA
  <Record>
  	<name>SkillSummonData</name>
  	<Function>
  		<name>deletesameidunit</name>
  		<replaceName>DeleteSameIDUnit</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_deletesameidunit</name>
  		<replaceName>DeleteSameIDUnit</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_deletesameidunit</name>
  		<replaceName>DeleteSameIDUnit</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline bool deletesameidunit() const;
  inline void set_deletesameidunit(bool value);

  // repeated int32 AddBuffID = 15;
  inline int addbuffid_size() const;
  inline void clear_addbuffid();
  static const int kAddBuffIDFieldNumber = 15;
  /*FOR2LUA
  <Record>
  	<name>SkillSummonData</name>
  	<Function>
  		<name>addbuffid</name>
  		<replaceName>AddBuffID</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_addbuffid</name>
  		<replaceName>AddBuffID</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_addbuffid</name>
  		<replaceName>AddBuffID</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_addbuffid</name>
  		<replaceName>AddBuffID</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>addbuffid_size</name>
  		<replaceName>AddBuffID</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::int32 addbuffid(int index) const;
  inline void set_addbuffid(int index, ::google::protobuf::int32 value);
  inline void add_addbuffid(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      addbuffid() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_addbuffid();

  // optional bool InheritAttribute = 16;
  inline bool has_inheritattribute() const;
  inline void clear_inheritattribute();
  static const int kInheritAttributeFieldNumber = 16;
  /*FOR2LUA
  <Record>
  	<name>SkillSummonData</name>
  	<Function>
  		<name>inheritattribute</name>
  		<replaceName>InheritAttribute</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_inheritattribute</name>
  		<replaceName>InheritAttribute</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_inheritattribute</name>
  		<replaceName>InheritAttribute</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline bool inheritattribute() const;
  inline void set_inheritattribute(bool value);

  // optional int32 InheritPercentage = 17;
  inline bool has_inheritpercentage() const;
  inline void clear_inheritpercentage();
  static const int kInheritPercentageFieldNumber = 17;
  /*FOR2LUA
  <Record>
  	<name>SkillSummonData</name>
  	<Function>
  		<name>inheritpercentage</name>
  		<replaceName>InheritPercentage</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_inheritpercentage</name>
  		<replaceName>InheritPercentage</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_inheritpercentage</name>
  		<replaceName>InheritPercentage</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::int32 inheritpercentage() const;
  inline void set_inheritpercentage(::google::protobuf::int32 value);

  // optional bool UseRefTargetAsBlueprint = 18;
  inline bool has_usereftargetasblueprint() const;
  inline void clear_usereftargetasblueprint();
  static const int kUseRefTargetAsBlueprintFieldNumber = 18;
  /*FOR2LUA
  <Record>
  	<name>SkillSummonData</name>
  	<Function>
  		<name>usereftargetasblueprint</name>
  		<replaceName>UseRefTargetAsBlueprint</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_usereftargetasblueprint</name>
  		<replaceName>UseRefTargetAsBlueprint</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_usereftargetasblueprint</name>
  		<replaceName>UseRefTargetAsBlueprint</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline bool usereftargetasblueprint() const;
  inline void set_usereftargetasblueprint(bool value);

  // optional bool InheritAttributeFromRefTarget = 19;
  inline bool has_inheritattributefromreftarget() const;
  inline void clear_inheritattributefromreftarget();
  static const int kInheritAttributeFromRefTargetFieldNumber = 19;
  /*FOR2LUA
  <Record>
  	<name>SkillSummonData</name>
  	<Function>
  		<name>inheritattributefromreftarget</name>
  		<replaceName>InheritAttributeFromRefTarget</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_inheritattributefromreftarget</name>
  		<replaceName>InheritAttributeFromRefTarget</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_inheritattributefromreftarget</name>
  		<replaceName>InheritAttributeFromRefTarget</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline bool inheritattributefromreftarget() const;
  inline void set_inheritattributefromreftarget(bool value);

  // optional bool InheritAttributeFromAncestor = 20;
  inline bool has_inheritattributefromancestor() const;
  inline void clear_inheritattributefromancestor();
  static const int kInheritAttributeFromAncestorFieldNumber = 20;
  /*FOR2LUA
  <Record>
  	<name>SkillSummonData</name>
  	<Function>
  		<name>inheritattributefromancestor</name>
  		<replaceName>InheritAttributeFromAncestor</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_inheritattributefromancestor</name>
  		<replaceName>InheritAttributeFromAncestor</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_inheritattributefromancestor</name>
  		<replaceName>InheritAttributeFromAncestor</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline bool inheritattributefromancestor() const;
  inline void set_inheritattributefromancestor(bool value);

  // optional int32 VerticalPosition = 21;
  inline bool has_verticalposition() const;
  inline void clear_verticalposition();
  static const int kVerticalPositionFieldNumber = 21;
  /*FOR2LUA
  <Record>
  	<name>SkillSummonData</name>
  	<Function>
  		<name>verticalposition</name>
  		<replaceName>VerticalPosition</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_verticalposition</name>
  		<replaceName>VerticalPosition</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_verticalposition</name>
  		<replaceName>VerticalPosition</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::int32 verticalposition() const;
  inline void set_verticalposition(::google::protobuf::int32 value);

  // optional bool IsNoKillRageBonus = 22;
  inline bool has_isnokillragebonus() const;
  inline void clear_isnokillragebonus();
  static const int kIsNoKillRageBonusFieldNumber = 22;
  /*FOR2LUA
  <Record>
  	<name>SkillSummonData</name>
  	<Function>
  		<name>isnokillragebonus</name>
  		<replaceName>IsNoKillRageBonus</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_isnokillragebonus</name>
  		<replaceName>IsNoKillRageBonus</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_isnokillragebonus</name>
  		<replaceName>IsNoKillRageBonus</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline bool isnokillragebonus() const;
  inline void set_isnokillragebonus(bool value);

  // repeated int32 PositionVectorArr = 23;
  inline int positionvectorarr_size() const;
  inline void clear_positionvectorarr();
  static const int kPositionVectorArrFieldNumber = 23;
  /*FOR2LUA
  <Record>
  	<name>SkillSummonData</name>
  	<Function>
  		<name>positionvectorarr</name>
  		<replaceName>PositionVectorArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_positionvectorarr</name>
  		<replaceName>PositionVectorArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_positionvectorarr</name>
  		<replaceName>PositionVectorArr</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_positionvectorarr</name>
  		<replaceName>PositionVectorArr</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>positionvectorarr_size</name>
  		<replaceName>PositionVectorArr</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::int32 positionvectorarr(int index) const;
  inline void set_positionvectorarr(int index, ::google::protobuf::int32 value);
  inline void add_positionvectorarr(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      positionvectorarr() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_positionvectorarr();

  // optional bool UseFixedRate = 24;
  inline bool has_usefixedrate() const;
  inline void clear_usefixedrate();
  static const int kUseFixedRateFieldNumber = 24;
  /*FOR2LUA
  <Record>
  	<name>SkillSummonData</name>
  	<Function>
  		<name>usefixedrate</name>
  		<replaceName>UseFixedRate</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_usefixedrate</name>
  		<replaceName>UseFixedRate</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_usefixedrate</name>
  		<replaceName>UseFixedRate</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline bool usefixedrate() const;
  inline void set_usefixedrate(bool value);

  // @@protoc_insertion_point(class_scope:pb.SkillSummonData)
 private:
  inline void set_has_positon();
  inline void clear_has_positon();
  inline void set_has_formation();
  inline void clear_has_formation();
  inline void set_has_mindistance();
  inline void clear_has_mindistance();
  inline void set_has_borneffect();
  inline void clear_has_borneffect();
  inline void set_has_bornsound();
  inline void clear_has_bornsound();
  inline void set_has_leveltype();
  inline void clear_has_leveltype();
  inline void set_has_levelparam();
  inline void clear_has_levelparam();
  inline void set_has_lasttimetype();
  inline void clear_has_lasttimetype();
  inline void set_has_lasttimeparam();
  inline void clear_has_lasttimeparam();
  inline void set_has_canoverscreen();
  inline void clear_has_canoverscreen();
  inline void set_has_maxsameidunit();
  inline void clear_has_maxsameidunit();
  inline void set_has_deletesameidunit();
  inline void clear_has_deletesameidunit();
  inline void set_has_inheritattribute();
  inline void clear_has_inheritattribute();
  inline void set_has_inheritpercentage();
  inline void clear_has_inheritpercentage();
  inline void set_has_usereftargetasblueprint();
  inline void clear_has_usereftargetasblueprint();
  inline void set_has_inheritattributefromreftarget();
  inline void clear_has_inheritattributefromreftarget();
  inline void set_has_inheritattributefromancestor();
  inline void clear_has_inheritattributefromancestor();
  inline void set_has_verticalposition();
  inline void clear_has_verticalposition();
  inline void set_has_isnokillragebonus();
  inline void clear_has_isnokillragebonus();
  inline void set_has_usefixedrate();
  inline void clear_has_usefixedrate();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > id_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > num_;
  ::google::protobuf::int32 positon_;
  ::google::protobuf::int32 formation_;
  ::std::string* borneffect_;
  ::google::protobuf::int32 mindistance_;
  ::google::protobuf::int32 leveltype_;
  ::std::string* bornsound_;
  ::google::protobuf::int32 levelparam_;
  ::google::protobuf::int32 lasttimetype_;
  ::google::protobuf::int32 lasttimeparam_;
  ::google::protobuf::int32 maxsameidunit_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > addbuffid_;
  bool canoverscreen_;
  bool deletesameidunit_;
  bool inheritattribute_;
  bool usereftargetasblueprint_;
  ::google::protobuf::int32 inheritpercentage_;
  ::google::protobuf::int32 verticalposition_;
  bool inheritattributefromreftarget_;
  bool inheritattributefromancestor_;
  bool isnokillragebonus_;
  bool usefixedrate_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > positionvectorarr_;
  friend void  protobuf_AddDesc_module_2fSkillData_2eproto();
  friend void protobuf_AssignDesc_module_2fSkillData_2eproto();
  friend void protobuf_ShutdownFile_module_2fSkillData_2eproto();

  void InitAsDefaultInstance();
  static SkillSummonData* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>SkillRebornData</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>module/SkillData.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class SkillRebornData : public ::google::protobuf::Message {
 public:
  SkillRebornData();
  virtual ~SkillRebornData();

  SkillRebornData(const SkillRebornData& from);

  inline SkillRebornData& operator=(const SkillRebornData& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SkillRebornData& default_instance();

  void Swap(SkillRebornData* other);

  // implements Message ----------------------------------------------

  SkillRebornData* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SkillRebornData& from);
  void MergeFrom(const SkillRebornData& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 LifeType = 1;
  inline bool has_lifetype() const;
  inline void clear_lifetype();
  static const int kLifeTypeFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>SkillRebornData</name>
  	<Function>
  		<name>lifetype</name>
  		<replaceName>LifeType</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_lifetype</name>
  		<replaceName>LifeType</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_lifetype</name>
  		<replaceName>LifeType</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::int32 lifetype() const;
  inline void set_lifetype(::google::protobuf::int32 value);

  // optional int32 LifeParam1 = 2;
  inline bool has_lifeparam1() const;
  inline void clear_lifeparam1();
  static const int kLifeParam1FieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>SkillRebornData</name>
  	<Function>
  		<name>lifeparam1</name>
  		<replaceName>LifeParam1</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_lifeparam1</name>
  		<replaceName>LifeParam1</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_lifeparam1</name>
  		<replaceName>LifeParam1</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::int32 lifeparam1() const;
  inline void set_lifeparam1(::google::protobuf::int32 value);

  // optional int32 LifeParam2 = 3;
  inline bool has_lifeparam2() const;
  inline void clear_lifeparam2();
  static const int kLifeParam2FieldNumber = 3;
  /*FOR2LUA
  <Record>
  	<name>SkillRebornData</name>
  	<Function>
  		<name>lifeparam2</name>
  		<replaceName>LifeParam2</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_lifeparam2</name>
  		<replaceName>LifeParam2</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_lifeparam2</name>
  		<replaceName>LifeParam2</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::int32 lifeparam2() const;
  inline void set_lifeparam2(::google::protobuf::int32 value);

  // optional int32 Positon = 4;
  inline bool has_positon() const;
  inline void clear_positon();
  static const int kPositonFieldNumber = 4;
  /*FOR2LUA
  <Record>
  	<name>SkillRebornData</name>
  	<Function>
  		<name>positon</name>
  		<replaceName>Positon</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_positon</name>
  		<replaceName>Positon</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_positon</name>
  		<replaceName>Positon</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::int32 positon() const;
  inline void set_positon(::google::protobuf::int32 value);

  // optional int32 Formation = 5;
  inline bool has_formation() const;
  inline void clear_formation();
  static const int kFormationFieldNumber = 5;
  /*FOR2LUA
  <Record>
  	<name>SkillRebornData</name>
  	<Function>
  		<name>formation</name>
  		<replaceName>Formation</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_formation</name>
  		<replaceName>Formation</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_formation</name>
  		<replaceName>Formation</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::int32 formation() const;
  inline void set_formation(::google::protobuf::int32 value);

  // optional int32 MinDistance = 6;
  inline bool has_mindistance() const;
  inline void clear_mindistance();
  static const int kMinDistanceFieldNumber = 6;
  /*FOR2LUA
  <Record>
  	<name>SkillRebornData</name>
  	<Function>
  		<name>mindistance</name>
  		<replaceName>MinDistance</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_mindistance</name>
  		<replaceName>MinDistance</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_mindistance</name>
  		<replaceName>MinDistance</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::int32 mindistance() const;
  inline void set_mindistance(::google::protobuf::int32 value);

  // optional string BornEffect = 7;
  inline bool has_borneffect() const;
  inline void clear_borneffect();
  static const int kBornEffectFieldNumber = 7;
  /*FOR2LUA
  <Record>
  	<name>SkillRebornData</name>
  	<Function>
  		<name>borneffect</name>
  		<replaceName>BornEffect</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_borneffect</name>
  		<replaceName>BornEffect</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_borneffect</name>
  		<replaceName>BornEffect</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::std::string& borneffect() const;
  inline void set_borneffect(const ::std::string& value);
  inline void set_borneffect(const char* value);
  inline void set_borneffect(const char* value, size_t size);
  inline ::std::string* mutable_borneffect();
  inline ::std::string* release_borneffect();
  inline void set_allocated_borneffect(::std::string* borneffect);

  // optional string BornSound = 8;
  inline bool has_bornsound() const;
  inline void clear_bornsound();
  static const int kBornSoundFieldNumber = 8;
  /*FOR2LUA
  <Record>
  	<name>SkillRebornData</name>
  	<Function>
  		<name>bornsound</name>
  		<replaceName>BornSound</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_bornsound</name>
  		<replaceName>BornSound</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_bornsound</name>
  		<replaceName>BornSound</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::std::string& bornsound() const;
  inline void set_bornsound(const ::std::string& value);
  inline void set_bornsound(const char* value);
  inline void set_bornsound(const char* value, size_t size);
  inline ::std::string* mutable_bornsound();
  inline ::std::string* release_bornsound();
  inline void set_allocated_bornsound(::std::string* bornsound);

  // optional int32 LastTimeType = 9;
  inline bool has_lasttimetype() const;
  inline void clear_lasttimetype();
  static const int kLastTimeTypeFieldNumber = 9;
  /*FOR2LUA
  <Record>
  	<name>SkillRebornData</name>
  	<Function>
  		<name>lasttimetype</name>
  		<replaceName>LastTimeType</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_lasttimetype</name>
  		<replaceName>LastTimeType</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_lasttimetype</name>
  		<replaceName>LastTimeType</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::int32 lasttimetype() const;
  inline void set_lasttimetype(::google::protobuf::int32 value);

  // optional int32 LastTimeParam = 10;
  inline bool has_lasttimeparam() const;
  inline void clear_lasttimeparam();
  static const int kLastTimeParamFieldNumber = 10;
  /*FOR2LUA
  <Record>
  	<name>SkillRebornData</name>
  	<Function>
  		<name>lasttimeparam</name>
  		<replaceName>LastTimeParam</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_lasttimeparam</name>
  		<replaceName>LastTimeParam</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_lasttimeparam</name>
  		<replaceName>LastTimeParam</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::int32 lasttimeparam() const;
  inline void set_lasttimeparam(::google::protobuf::int32 value);

  // optional bool CanOverScreen = 11;
  inline bool has_canoverscreen() const;
  inline void clear_canoverscreen();
  static const int kCanOverScreenFieldNumber = 11;
  /*FOR2LUA
  <Record>
  	<name>SkillRebornData</name>
  	<Function>
  		<name>canoverscreen</name>
  		<replaceName>CanOverScreen</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_canoverscreen</name>
  		<replaceName>CanOverScreen</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_canoverscreen</name>
  		<replaceName>CanOverScreen</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline bool canoverscreen() const;
  inline void set_canoverscreen(bool value);

  // optional bool ResetCooldown = 13;
  inline bool has_resetcooldown() const;
  inline void clear_resetcooldown();
  static const int kResetCooldownFieldNumber = 13;
  /*FOR2LUA
  <Record>
  	<name>SkillRebornData</name>
  	<Function>
  		<name>resetcooldown</name>
  		<replaceName>ResetCooldown</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_resetcooldown</name>
  		<replaceName>ResetCooldown</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_resetcooldown</name>
  		<replaceName>ResetCooldown</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline bool resetcooldown() const;
  inline void set_resetcooldown(bool value);

  // @@protoc_insertion_point(class_scope:pb.SkillRebornData)
 private:
  inline void set_has_lifetype();
  inline void clear_has_lifetype();
  inline void set_has_lifeparam1();
  inline void clear_has_lifeparam1();
  inline void set_has_lifeparam2();
  inline void clear_has_lifeparam2();
  inline void set_has_positon();
  inline void clear_has_positon();
  inline void set_has_formation();
  inline void clear_has_formation();
  inline void set_has_mindistance();
  inline void clear_has_mindistance();
  inline void set_has_borneffect();
  inline void clear_has_borneffect();
  inline void set_has_bornsound();
  inline void clear_has_bornsound();
  inline void set_has_lasttimetype();
  inline void clear_has_lasttimetype();
  inline void set_has_lasttimeparam();
  inline void clear_has_lasttimeparam();
  inline void set_has_canoverscreen();
  inline void clear_has_canoverscreen();
  inline void set_has_resetcooldown();
  inline void clear_has_resetcooldown();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int32 lifetype_;
  ::google::protobuf::int32 lifeparam1_;
  ::google::protobuf::int32 lifeparam2_;
  ::google::protobuf::int32 positon_;
  ::google::protobuf::int32 formation_;
  ::google::protobuf::int32 mindistance_;
  ::std::string* borneffect_;
  ::std::string* bornsound_;
  ::google::protobuf::int32 lasttimetype_;
  ::google::protobuf::int32 lasttimeparam_;
  bool canoverscreen_;
  bool resetcooldown_;
  friend void  protobuf_AddDesc_module_2fSkillData_2eproto();
  friend void protobuf_AssignDesc_module_2fSkillData_2eproto();
  friend void protobuf_ShutdownFile_module_2fSkillData_2eproto();

  void InitAsDefaultInstance();
  static SkillRebornData* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>SkillGrabData</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>module/SkillData.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class SkillGrabData : public ::google::protobuf::Message {
 public:
  SkillGrabData();
  virtual ~SkillGrabData();

  SkillGrabData(const SkillGrabData& from);

  inline SkillGrabData& operator=(const SkillGrabData& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SkillGrabData& default_instance();

  void Swap(SkillGrabData* other);

  // implements Message ----------------------------------------------

  SkillGrabData* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SkillGrabData& from);
  void MergeFrom(const SkillGrabData& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string SelfGrabSocket = 1;
  inline bool has_selfgrabsocket() const;
  inline void clear_selfgrabsocket();
  static const int kSelfGrabSocketFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>SkillGrabData</name>
  	<Function>
  		<name>selfgrabsocket</name>
  		<replaceName>SelfGrabSocket</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_selfgrabsocket</name>
  		<replaceName>SelfGrabSocket</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_selfgrabsocket</name>
  		<replaceName>SelfGrabSocket</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::std::string& selfgrabsocket() const;
  inline void set_selfgrabsocket(const ::std::string& value);
  inline void set_selfgrabsocket(const char* value);
  inline void set_selfgrabsocket(const char* value, size_t size);
  inline ::std::string* mutable_selfgrabsocket();
  inline ::std::string* release_selfgrabsocket();
  inline void set_allocated_selfgrabsocket(::std::string* selfgrabsocket);

  // optional int32 LastTime = 3;
  inline bool has_lasttime() const;
  inline void clear_lasttime();
  static const int kLastTimeFieldNumber = 3;
  /*FOR2LUA
  <Record>
  	<name>SkillGrabData</name>
  	<Function>
  		<name>lasttime</name>
  		<replaceName>LastTime</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_lasttime</name>
  		<replaceName>LastTime</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_lasttime</name>
  		<replaceName>LastTime</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::int32 lasttime() const;
  inline void set_lasttime(::google::protobuf::int32 value);

  // optional bool CanBeRefTarget = 4;
  inline bool has_canbereftarget() const;
  inline void clear_canbereftarget();
  static const int kCanBeRefTargetFieldNumber = 4;
  /*FOR2LUA
  <Record>
  	<name>SkillGrabData</name>
  	<Function>
  		<name>canbereftarget</name>
  		<replaceName>CanBeRefTarget</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_canbereftarget</name>
  		<replaceName>CanBeRefTarget</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_canbereftarget</name>
  		<replaceName>CanBeRefTarget</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline bool canbereftarget() const;
  inline void set_canbereftarget(bool value);

  // optional bool CanBeEffectTarget = 5;
  inline bool has_canbeeffecttarget() const;
  inline void clear_canbeeffecttarget();
  static const int kCanBeEffectTargetFieldNumber = 5;
  /*FOR2LUA
  <Record>
  	<name>SkillGrabData</name>
  	<Function>
  		<name>canbeeffecttarget</name>
  		<replaceName>CanBeEffectTarget</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_canbeeffecttarget</name>
  		<replaceName>CanBeEffectTarget</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_canbeeffecttarget</name>
  		<replaceName>CanBeEffectTarget</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline bool canbeeffecttarget() const;
  inline void set_canbeeffecttarget(bool value);

  // optional string AnimOnPlay = 6;
  inline bool has_animonplay() const;
  inline void clear_animonplay();
  static const int kAnimOnPlayFieldNumber = 6;
  /*FOR2LUA
  <Record>
  	<name>SkillGrabData</name>
  	<Function>
  		<name>animonplay</name>
  		<replaceName>AnimOnPlay</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_animonplay</name>
  		<replaceName>AnimOnPlay</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_animonplay</name>
  		<replaceName>AnimOnPlay</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::std::string& animonplay() const;
  inline void set_animonplay(const ::std::string& value);
  inline void set_animonplay(const char* value);
  inline void set_animonplay(const char* value, size_t size);
  inline ::std::string* mutable_animonplay();
  inline ::std::string* release_animonplay();
  inline void set_allocated_animonplay(::std::string* animonplay);

  // optional int32 DamageTime = 7;
  inline bool has_damagetime() const;
  inline void clear_damagetime();
  static const int kDamageTimeFieldNumber = 7;
  /*FOR2LUA
  <Record>
  	<name>SkillGrabData</name>
  	<Function>
  		<name>damagetime</name>
  		<replaceName>DamageTime</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_damagetime</name>
  		<replaceName>DamageTime</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_damagetime</name>
  		<replaceName>DamageTime</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::int32 damagetime() const;
  inline void set_damagetime(::google::protobuf::int32 value);

  // repeated int32 OffsetOfSlot = 8;
  inline int offsetofslot_size() const;
  inline void clear_offsetofslot();
  static const int kOffsetOfSlotFieldNumber = 8;
  /*FOR2LUA
  <Record>
  	<name>SkillGrabData</name>
  	<Function>
  		<name>offsetofslot</name>
  		<replaceName>OffsetOfSlot</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_offsetofslot</name>
  		<replaceName>OffsetOfSlot</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_offsetofslot</name>
  		<replaceName>OffsetOfSlot</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_offsetofslot</name>
  		<replaceName>OffsetOfSlot</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>offsetofslot_size</name>
  		<replaceName>OffsetOfSlot</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::int32 offsetofslot(int index) const;
  inline void set_offsetofslot(int index, ::google::protobuf::int32 value);
  inline void add_offsetofslot(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      offsetofslot() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_offsetofslot();

  // @@protoc_insertion_point(class_scope:pb.SkillGrabData)
 private:
  inline void set_has_selfgrabsocket();
  inline void clear_has_selfgrabsocket();
  inline void set_has_lasttime();
  inline void clear_has_lasttime();
  inline void set_has_canbereftarget();
  inline void clear_has_canbereftarget();
  inline void set_has_canbeeffecttarget();
  inline void clear_has_canbeeffecttarget();
  inline void set_has_animonplay();
  inline void clear_has_animonplay();
  inline void set_has_damagetime();
  inline void clear_has_damagetime();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* selfgrabsocket_;
  ::google::protobuf::int32 lasttime_;
  bool canbereftarget_;
  bool canbeeffecttarget_;
  ::std::string* animonplay_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > offsetofslot_;
  ::google::protobuf::int32 damagetime_;
  friend void  protobuf_AddDesc_module_2fSkillData_2eproto();
  friend void protobuf_AssignDesc_module_2fSkillData_2eproto();
  friend void protobuf_ShutdownFile_module_2fSkillData_2eproto();

  void InitAsDefaultInstance();
  static SkillGrabData* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>SkillEnergyRecoverData</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>module/SkillData.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class SkillEnergyRecoverData : public ::google::protobuf::Message {
 public:
  SkillEnergyRecoverData();
  virtual ~SkillEnergyRecoverData();

  SkillEnergyRecoverData(const SkillEnergyRecoverData& from);

  inline SkillEnergyRecoverData& operator=(const SkillEnergyRecoverData& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SkillEnergyRecoverData& default_instance();

  void Swap(SkillEnergyRecoverData* other);

  // implements Message ----------------------------------------------

  SkillEnergyRecoverData* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SkillEnergyRecoverData& from);
  void MergeFrom(const SkillEnergyRecoverData& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 Param1 = 1;
  inline bool has_param1() const;
  inline void clear_param1();
  static const int kParam1FieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>SkillEnergyRecoverData</name>
  	<Function>
  		<name>param1</name>
  		<replaceName>Param1</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_param1</name>
  		<replaceName>Param1</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_param1</name>
  		<replaceName>Param1</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::int32 param1() const;
  inline void set_param1(::google::protobuf::int32 value);

  // optional int32 Param2 = 2;
  inline bool has_param2() const;
  inline void clear_param2();
  static const int kParam2FieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>SkillEnergyRecoverData</name>
  	<Function>
  		<name>param2</name>
  		<replaceName>Param2</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_param2</name>
  		<replaceName>Param2</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_param2</name>
  		<replaceName>Param2</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::int32 param2() const;
  inline void set_param2(::google::protobuf::int32 value);

  // optional bool AdjustByTargetCount = 3;
  inline bool has_adjustbytargetcount() const;
  inline void clear_adjustbytargetcount();
  static const int kAdjustByTargetCountFieldNumber = 3;
  /*FOR2LUA
  <Record>
  	<name>SkillEnergyRecoverData</name>
  	<Function>
  		<name>adjustbytargetcount</name>
  		<replaceName>AdjustByTargetCount</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_adjustbytargetcount</name>
  		<replaceName>AdjustByTargetCount</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_adjustbytargetcount</name>
  		<replaceName>AdjustByTargetCount</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline bool adjustbytargetcount() const;
  inline void set_adjustbytargetcount(bool value);

  // repeated int32 AdjustData = 4;
  inline int adjustdata_size() const;
  inline void clear_adjustdata();
  static const int kAdjustDataFieldNumber = 4;
  /*FOR2LUA
  <Record>
  	<name>SkillEnergyRecoverData</name>
  	<Function>
  		<name>adjustdata</name>
  		<replaceName>AdjustData</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_adjustdata</name>
  		<replaceName>AdjustData</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_adjustdata</name>
  		<replaceName>AdjustData</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_adjustdata</name>
  		<replaceName>AdjustData</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>adjustdata_size</name>
  		<replaceName>AdjustData</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::int32 adjustdata(int index) const;
  inline void set_adjustdata(int index, ::google::protobuf::int32 value);
  inline void add_adjustdata(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      adjustdata() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_adjustdata();

  // @@protoc_insertion_point(class_scope:pb.SkillEnergyRecoverData)
 private:
  inline void set_has_param1();
  inline void clear_has_param1();
  inline void set_has_param2();
  inline void clear_has_param2();
  inline void set_has_adjustbytargetcount();
  inline void clear_has_adjustbytargetcount();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int32 param1_;
  ::google::protobuf::int32 param2_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > adjustdata_;
  bool adjustbytargetcount_;
  friend void  protobuf_AddDesc_module_2fSkillData_2eproto();
  friend void protobuf_AssignDesc_module_2fSkillData_2eproto();
  friend void protobuf_ShutdownFile_module_2fSkillData_2eproto();

  void InitAsDefaultInstance();
  static SkillEnergyRecoverData* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>SkillSubSkillData</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>module/SkillData.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class SkillSubSkillData : public ::google::protobuf::Message {
 public:
  SkillSubSkillData();
  virtual ~SkillSubSkillData();

  SkillSubSkillData(const SkillSubSkillData& from);

  inline SkillSubSkillData& operator=(const SkillSubSkillData& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SkillSubSkillData& default_instance();

  void Swap(SkillSubSkillData* other);

  // implements Message ----------------------------------------------

  SkillSubSkillData* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SkillSubSkillData& from);
  void MergeFrom(const SkillSubSkillData& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated int32 ID = 1;
  inline int id_size() const;
  inline void clear_id();
  static const int kIDFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>SkillSubSkillData</name>
  	<Function>
  		<name>id</name>
  		<replaceName>ID</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_id</name>
  		<replaceName>ID</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_id</name>
  		<replaceName>ID</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_id</name>
  		<replaceName>ID</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>id_size</name>
  		<replaceName>ID</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::int32 id(int index) const;
  inline void set_id(int index, ::google::protobuf::int32 value);
  inline void add_id(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      id() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_id();

  // optional int32 LevelType = 3;
  inline bool has_leveltype() const;
  inline void clear_leveltype();
  static const int kLevelTypeFieldNumber = 3;
  /*FOR2LUA
  <Record>
  	<name>SkillSubSkillData</name>
  	<Function>
  		<name>leveltype</name>
  		<replaceName>LevelType</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_leveltype</name>
  		<replaceName>LevelType</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_leveltype</name>
  		<replaceName>LevelType</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::int32 leveltype() const;
  inline void set_leveltype(::google::protobuf::int32 value);

  // optional int32 LevelParam = 4;
  inline bool has_levelparam() const;
  inline void clear_levelparam();
  static const int kLevelParamFieldNumber = 4;
  /*FOR2LUA
  <Record>
  	<name>SkillSubSkillData</name>
  	<Function>
  		<name>levelparam</name>
  		<replaceName>LevelParam</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_levelparam</name>
  		<replaceName>LevelParam</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_levelparam</name>
  		<replaceName>LevelParam</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::int32 levelparam() const;
  inline void set_levelparam(::google::protobuf::int32 value);

  // optional bool IsListenBreak = 5;
  inline bool has_islistenbreak() const;
  inline void clear_islistenbreak();
  static const int kIsListenBreakFieldNumber = 5;
  /*FOR2LUA
  <Record>
  	<name>SkillSubSkillData</name>
  	<Function>
  		<name>islistenbreak</name>
  		<replaceName>IsListenBreak</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_islistenbreak</name>
  		<replaceName>IsListenBreak</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_islistenbreak</name>
  		<replaceName>IsListenBreak</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline bool islistenbreak() const;
  inline void set_islistenbreak(bool value);

  // optional int32 DelayTime = 6;
  inline bool has_delaytime() const;
  inline void clear_delaytime();
  static const int kDelayTimeFieldNumber = 6;
  /*FOR2LUA
  <Record>
  	<name>SkillSubSkillData</name>
  	<Function>
  		<name>delaytime</name>
  		<replaceName>DelayTime</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_delaytime</name>
  		<replaceName>DelayTime</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_delaytime</name>
  		<replaceName>DelayTime</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::int32 delaytime() const;
  inline void set_delaytime(::google::protobuf::int32 value);

  // optional bool IsFollow = 7;
  inline bool has_isfollow() const;
  inline void clear_isfollow();
  static const int kIsFollowFieldNumber = 7;
  /*FOR2LUA
  <Record>
  	<name>SkillSubSkillData</name>
  	<Function>
  		<name>isfollow</name>
  		<replaceName>IsFollow</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_isfollow</name>
  		<replaceName>IsFollow</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_isfollow</name>
  		<replaceName>IsFollow</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline bool isfollow() const;
  inline void set_isfollow(bool value);

  // optional bool IsFollowRealTarget = 8;
  inline bool has_isfollowrealtarget() const;
  inline void clear_isfollowrealtarget();
  static const int kIsFollowRealTargetFieldNumber = 8;
  /*FOR2LUA
  <Record>
  	<name>SkillSubSkillData</name>
  	<Function>
  		<name>isfollowrealtarget</name>
  		<replaceName>IsFollowRealTarget</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_isfollowrealtarget</name>
  		<replaceName>IsFollowRealTarget</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_isfollowrealtarget</name>
  		<replaceName>IsFollowRealTarget</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline bool isfollowrealtarget() const;
  inline void set_isfollowrealtarget(bool value);

  // optional bool UseProbabilisticSubSkill = 9;
  inline bool has_useprobabilisticsubskill() const;
  inline void clear_useprobabilisticsubskill();
  static const int kUseProbabilisticSubSkillFieldNumber = 9;
  /*FOR2LUA
  <Record>
  	<name>SkillSubSkillData</name>
  	<Function>
  		<name>useprobabilisticsubskill</name>
  		<replaceName>UseProbabilisticSubSkill</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_useprobabilisticsubskill</name>
  		<replaceName>UseProbabilisticSubSkill</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_useprobabilisticsubskill</name>
  		<replaceName>UseProbabilisticSubSkill</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline bool useprobabilisticsubskill() const;
  inline void set_useprobabilisticsubskill(bool value);

  // repeated int32 ProbabilisticParams = 10;
  inline int probabilisticparams_size() const;
  inline void clear_probabilisticparams();
  static const int kProbabilisticParamsFieldNumber = 10;
  /*FOR2LUA
  <Record>
  	<name>SkillSubSkillData</name>
  	<Function>
  		<name>probabilisticparams</name>
  		<replaceName>ProbabilisticParams</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_probabilisticparams</name>
  		<replaceName>ProbabilisticParams</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_probabilisticparams</name>
  		<replaceName>ProbabilisticParams</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_probabilisticparams</name>
  		<replaceName>ProbabilisticParams</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>probabilisticparams_size</name>
  		<replaceName>ProbabilisticParams</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::int32 probabilisticparams(int index) const;
  inline void set_probabilisticparams(int index, ::google::protobuf::int32 value);
  inline void add_probabilisticparams(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      probabilisticparams() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_probabilisticparams();

  // repeated int32 ProbabilisticSkills = 11;
  inline int probabilisticskills_size() const;
  inline void clear_probabilisticskills();
  static const int kProbabilisticSkillsFieldNumber = 11;
  /*FOR2LUA
  <Record>
  	<name>SkillSubSkillData</name>
  	<Function>
  		<name>probabilisticskills</name>
  		<replaceName>ProbabilisticSkills</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_probabilisticskills</name>
  		<replaceName>ProbabilisticSkills</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_probabilisticskills</name>
  		<replaceName>ProbabilisticSkills</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_probabilisticskills</name>
  		<replaceName>ProbabilisticSkills</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>probabilisticskills_size</name>
  		<replaceName>ProbabilisticSkills</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::int32 probabilisticskills(int index) const;
  inline void set_probabilisticskills(int index, ::google::protobuf::int32 value);
  inline void add_probabilisticskills(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      probabilisticskills() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_probabilisticskills();

  // repeated .pb.SkillLevelSubSkill LevelSubSkill = 12;
  inline int levelsubskill_size() const;
  inline void clear_levelsubskill();
  static const int kLevelSubSkillFieldNumber = 12;
  /*FOR2LUA
  <Record>
  	<name>SkillSubSkillData</name>
  	<Function>
  		<name>levelsubskill</name>
  		<replaceName>LevelSubSkill</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_levelsubskill</name>
  		<replaceName>LevelSubSkill</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_levelsubskill</name>
  		<replaceName>LevelSubSkill</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_levelsubskill</name>
  		<replaceName>LevelSubSkill</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>levelsubskill_size</name>
  		<replaceName>LevelSubSkill</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::SkillLevelSubSkill& levelsubskill(int index) const;
  inline ::pb::SkillLevelSubSkill* mutable_levelsubskill(int index);
  inline ::pb::SkillLevelSubSkill* add_levelsubskill();
  inline const ::google::protobuf::RepeatedPtrField< ::pb::SkillLevelSubSkill >&
      levelsubskill() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb::SkillLevelSubSkill >*
      mutable_levelsubskill();

  // repeated .pb.SkillLevelProbSkill LevelProbSkill = 13;
  inline int levelprobskill_size() const;
  inline void clear_levelprobskill();
  static const int kLevelProbSkillFieldNumber = 13;
  /*FOR2LUA
  <Record>
  	<name>SkillSubSkillData</name>
  	<Function>
  		<name>levelprobskill</name>
  		<replaceName>LevelProbSkill</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_levelprobskill</name>
  		<replaceName>LevelProbSkill</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_levelprobskill</name>
  		<replaceName>LevelProbSkill</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_levelprobskill</name>
  		<replaceName>LevelProbSkill</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>levelprobskill_size</name>
  		<replaceName>LevelProbSkill</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::SkillLevelProbSkill& levelprobskill(int index) const;
  inline ::pb::SkillLevelProbSkill* mutable_levelprobskill(int index);
  inline ::pb::SkillLevelProbSkill* add_levelprobskill();
  inline const ::google::protobuf::RepeatedPtrField< ::pb::SkillLevelProbSkill >&
      levelprobskill() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb::SkillLevelProbSkill >*
      mutable_levelprobskill();

  // @@protoc_insertion_point(class_scope:pb.SkillSubSkillData)
 private:
  inline void set_has_leveltype();
  inline void clear_has_leveltype();
  inline void set_has_levelparam();
  inline void clear_has_levelparam();
  inline void set_has_islistenbreak();
  inline void clear_has_islistenbreak();
  inline void set_has_delaytime();
  inline void clear_has_delaytime();
  inline void set_has_isfollow();
  inline void clear_has_isfollow();
  inline void set_has_isfollowrealtarget();
  inline void clear_has_isfollowrealtarget();
  inline void set_has_useprobabilisticsubskill();
  inline void clear_has_useprobabilisticsubskill();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > id_;
  ::google::protobuf::int32 leveltype_;
  ::google::protobuf::int32 levelparam_;
  ::google::protobuf::int32 delaytime_;
  bool islistenbreak_;
  bool isfollow_;
  bool isfollowrealtarget_;
  bool useprobabilisticsubskill_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > probabilisticparams_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > probabilisticskills_;
  ::google::protobuf::RepeatedPtrField< ::pb::SkillLevelSubSkill > levelsubskill_;
  ::google::protobuf::RepeatedPtrField< ::pb::SkillLevelProbSkill > levelprobskill_;
  friend void  protobuf_AddDesc_module_2fSkillData_2eproto();
  friend void protobuf_AssignDesc_module_2fSkillData_2eproto();
  friend void protobuf_ShutdownFile_module_2fSkillData_2eproto();

  void InitAsDefaultInstance();
  static SkillSubSkillData* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>SkillData</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>module/SkillData.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class SkillData : public ::google::protobuf::Message {
 public:
  SkillData();
  virtual ~SkillData();

  SkillData(const SkillData& from);

  inline SkillData& operator=(const SkillData& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SkillData& default_instance();

  void Swap(SkillData* other);

  // implements Message ----------------------------------------------

  SkillData* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SkillData& from);
  void MergeFrom(const SkillData& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 ID = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIDFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>SkillData</name>
  	<Function>
  		<name>id</name>
  		<replaceName>ID</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_id</name>
  		<replaceName>ID</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_id</name>
  		<replaceName>ID</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::int32 id() const;
  inline void set_id(::google::protobuf::int32 value);

  // optional .pb.SkillBaseData BaseData = 2;
  inline bool has_basedata() const;
  inline void clear_basedata();
  static const int kBaseDataFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>SkillData</name>
  	<Function>
  		<name>basedata</name>
  		<replaceName>BaseData</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_basedata</name>
  		<replaceName>BaseData</replaceName>
  		<handler>descripter = pb_set_message_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_allocated_basedata</name>
  		<replaceName>BaseData</replaceName>
  		<handler>descripter = pb_set_message_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_basedata</name>
  		<replaceName>BaseData</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::SkillBaseData& basedata() const;
  inline ::pb::SkillBaseData* mutable_basedata();
  inline ::pb::SkillBaseData* release_basedata();
  inline void set_allocated_basedata(::pb::SkillBaseData* basedata);

  // optional .pb.SkillEffectData EffectData = 3;
  inline bool has_effectdata() const;
  inline void clear_effectdata();
  static const int kEffectDataFieldNumber = 3;
  /*FOR2LUA
  <Record>
  	<name>SkillData</name>
  	<Function>
  		<name>effectdata</name>
  		<replaceName>EffectData</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_effectdata</name>
  		<replaceName>EffectData</replaceName>
  		<handler>descripter = pb_set_message_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_allocated_effectdata</name>
  		<replaceName>EffectData</replaceName>
  		<handler>descripter = pb_set_message_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_effectdata</name>
  		<replaceName>EffectData</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::SkillEffectData& effectdata() const;
  inline ::pb::SkillEffectData* mutable_effectdata();
  inline ::pb::SkillEffectData* release_effectdata();
  inline void set_allocated_effectdata(::pb::SkillEffectData* effectdata);

  // optional .pb.SkillHitData HitData = 4;
  inline bool has_hitdata() const;
  inline void clear_hitdata();
  static const int kHitDataFieldNumber = 4;
  /*FOR2LUA
  <Record>
  	<name>SkillData</name>
  	<Function>
  		<name>hitdata</name>
  		<replaceName>HitData</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_hitdata</name>
  		<replaceName>HitData</replaceName>
  		<handler>descripter = pb_set_message_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_allocated_hitdata</name>
  		<replaceName>HitData</replaceName>
  		<handler>descripter = pb_set_message_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_hitdata</name>
  		<replaceName>HitData</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::SkillHitData& hitdata() const;
  inline ::pb::SkillHitData* mutable_hitdata();
  inline ::pb::SkillHitData* release_hitdata();
  inline void set_allocated_hitdata(::pb::SkillHitData* hitdata);

  // optional .pb.SkillMoveData MoveData = 5;
  inline bool has_movedata() const;
  inline void clear_movedata();
  static const int kMoveDataFieldNumber = 5;
  /*FOR2LUA
  <Record>
  	<name>SkillData</name>
  	<Function>
  		<name>movedata</name>
  		<replaceName>MoveData</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_movedata</name>
  		<replaceName>MoveData</replaceName>
  		<handler>descripter = pb_set_message_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_allocated_movedata</name>
  		<replaceName>MoveData</replaceName>
  		<handler>descripter = pb_set_message_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_movedata</name>
  		<replaceName>MoveData</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::SkillMoveData& movedata() const;
  inline ::pb::SkillMoveData* mutable_movedata();
  inline ::pb::SkillMoveData* release_movedata();
  inline void set_allocated_movedata(::pb::SkillMoveData* movedata);

  // optional .pb.SkillEnergyDrawData EnergyDrawData = 6;
  inline bool has_energydrawdata() const;
  inline void clear_energydrawdata();
  static const int kEnergyDrawDataFieldNumber = 6;
  /*FOR2LUA
  <Record>
  	<name>SkillData</name>
  	<Function>
  		<name>energydrawdata</name>
  		<replaceName>EnergyDrawData</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_energydrawdata</name>
  		<replaceName>EnergyDrawData</replaceName>
  		<handler>descripter = pb_set_message_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_allocated_energydrawdata</name>
  		<replaceName>EnergyDrawData</replaceName>
  		<handler>descripter = pb_set_message_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_energydrawdata</name>
  		<replaceName>EnergyDrawData</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::SkillEnergyDrawData& energydrawdata() const;
  inline ::pb::SkillEnergyDrawData* mutable_energydrawdata();
  inline ::pb::SkillEnergyDrawData* release_energydrawdata();
  inline void set_allocated_energydrawdata(::pb::SkillEnergyDrawData* energydrawdata);

  // optional .pb.SkillEnergyAssistData EnergyAssisData = 7;
  inline bool has_energyassisdata() const;
  inline void clear_energyassisdata();
  static const int kEnergyAssisDataFieldNumber = 7;
  /*FOR2LUA
  <Record>
  	<name>SkillData</name>
  	<Function>
  		<name>energyassisdata</name>
  		<replaceName>EnergyAssisData</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_energyassisdata</name>
  		<replaceName>EnergyAssisData</replaceName>
  		<handler>descripter = pb_set_message_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_allocated_energyassisdata</name>
  		<replaceName>EnergyAssisData</replaceName>
  		<handler>descripter = pb_set_message_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_energyassisdata</name>
  		<replaceName>EnergyAssisData</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::SkillEnergyAssistData& energyassisdata() const;
  inline ::pb::SkillEnergyAssistData* mutable_energyassisdata();
  inline ::pb::SkillEnergyAssistData* release_energyassisdata();
  inline void set_allocated_energyassisdata(::pb::SkillEnergyAssistData* energyassisdata);

  // optional .pb.SkillLifeStealData LifeStealData = 8;
  inline bool has_lifestealdata() const;
  inline void clear_lifestealdata();
  static const int kLifeStealDataFieldNumber = 8;
  /*FOR2LUA
  <Record>
  	<name>SkillData</name>
  	<Function>
  		<name>lifestealdata</name>
  		<replaceName>LifeStealData</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_lifestealdata</name>
  		<replaceName>LifeStealData</replaceName>
  		<handler>descripter = pb_set_message_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_allocated_lifestealdata</name>
  		<replaceName>LifeStealData</replaceName>
  		<handler>descripter = pb_set_message_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_lifestealdata</name>
  		<replaceName>LifeStealData</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::SkillLifeStealData& lifestealdata() const;
  inline ::pb::SkillLifeStealData* mutable_lifestealdata();
  inline ::pb::SkillLifeStealData* release_lifestealdata();
  inline void set_allocated_lifestealdata(::pb::SkillLifeStealData* lifestealdata);

  // optional .pb.SkillDamageData DamageData = 9;
  inline bool has_damagedata() const;
  inline void clear_damagedata();
  static const int kDamageDataFieldNumber = 9;
  /*FOR2LUA
  <Record>
  	<name>SkillData</name>
  	<Function>
  		<name>damagedata</name>
  		<replaceName>DamageData</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_damagedata</name>
  		<replaceName>DamageData</replaceName>
  		<handler>descripter = pb_set_message_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_allocated_damagedata</name>
  		<replaceName>DamageData</replaceName>
  		<handler>descripter = pb_set_message_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_damagedata</name>
  		<replaceName>DamageData</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::SkillDamageData& damagedata() const;
  inline ::pb::SkillDamageData* mutable_damagedata();
  inline ::pb::SkillDamageData* release_damagedata();
  inline void set_allocated_damagedata(::pb::SkillDamageData* damagedata);

  // optional .pb.SkillHealData HealData = 10;
  inline bool has_healdata() const;
  inline void clear_healdata();
  static const int kHealDataFieldNumber = 10;
  /*FOR2LUA
  <Record>
  	<name>SkillData</name>
  	<Function>
  		<name>healdata</name>
  		<replaceName>HealData</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_healdata</name>
  		<replaceName>HealData</replaceName>
  		<handler>descripter = pb_set_message_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_allocated_healdata</name>
  		<replaceName>HealData</replaceName>
  		<handler>descripter = pb_set_message_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_healdata</name>
  		<replaceName>HealData</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::SkillHealData& healdata() const;
  inline ::pb::SkillHealData* mutable_healdata();
  inline ::pb::SkillHealData* release_healdata();
  inline void set_allocated_healdata(::pb::SkillHealData* healdata);

  // optional .pb.SkillSummonData SummonData = 11;
  inline bool has_summondata() const;
  inline void clear_summondata();
  static const int kSummonDataFieldNumber = 11;
  /*FOR2LUA
  <Record>
  	<name>SkillData</name>
  	<Function>
  		<name>summondata</name>
  		<replaceName>SummonData</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_summondata</name>
  		<replaceName>SummonData</replaceName>
  		<handler>descripter = pb_set_message_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_allocated_summondata</name>
  		<replaceName>SummonData</replaceName>
  		<handler>descripter = pb_set_message_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_summondata</name>
  		<replaceName>SummonData</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::SkillSummonData& summondata() const;
  inline ::pb::SkillSummonData* mutable_summondata();
  inline ::pb::SkillSummonData* release_summondata();
  inline void set_allocated_summondata(::pb::SkillSummonData* summondata);

  // optional .pb.SkillRebornData RebornData = 12;
  inline bool has_reborndata() const;
  inline void clear_reborndata();
  static const int kRebornDataFieldNumber = 12;
  /*FOR2LUA
  <Record>
  	<name>SkillData</name>
  	<Function>
  		<name>reborndata</name>
  		<replaceName>RebornData</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_reborndata</name>
  		<replaceName>RebornData</replaceName>
  		<handler>descripter = pb_set_message_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_allocated_reborndata</name>
  		<replaceName>RebornData</replaceName>
  		<handler>descripter = pb_set_message_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_reborndata</name>
  		<replaceName>RebornData</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::SkillRebornData& reborndata() const;
  inline ::pb::SkillRebornData* mutable_reborndata();
  inline ::pb::SkillRebornData* release_reborndata();
  inline void set_allocated_reborndata(::pb::SkillRebornData* reborndata);

  // optional .pb.SkillEnergyRecoverData EnergyRecoverData = 13;
  inline bool has_energyrecoverdata() const;
  inline void clear_energyrecoverdata();
  static const int kEnergyRecoverDataFieldNumber = 13;
  /*FOR2LUA
  <Record>
  	<name>SkillData</name>
  	<Function>
  		<name>energyrecoverdata</name>
  		<replaceName>EnergyRecoverData</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_energyrecoverdata</name>
  		<replaceName>EnergyRecoverData</replaceName>
  		<handler>descripter = pb_set_message_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_allocated_energyrecoverdata</name>
  		<replaceName>EnergyRecoverData</replaceName>
  		<handler>descripter = pb_set_message_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_energyrecoverdata</name>
  		<replaceName>EnergyRecoverData</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::SkillEnergyRecoverData& energyrecoverdata() const;
  inline ::pb::SkillEnergyRecoverData* mutable_energyrecoverdata();
  inline ::pb::SkillEnergyRecoverData* release_energyrecoverdata();
  inline void set_allocated_energyrecoverdata(::pb::SkillEnergyRecoverData* energyrecoverdata);

  // optional .pb.SkillSubSkillData SubSkillData = 14;
  inline bool has_subskilldata() const;
  inline void clear_subskilldata();
  static const int kSubSkillDataFieldNumber = 14;
  /*FOR2LUA
  <Record>
  	<name>SkillData</name>
  	<Function>
  		<name>subskilldata</name>
  		<replaceName>SubSkillData</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_subskilldata</name>
  		<replaceName>SubSkillData</replaceName>
  		<handler>descripter = pb_set_message_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_allocated_subskilldata</name>
  		<replaceName>SubSkillData</replaceName>
  		<handler>descripter = pb_set_message_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_subskilldata</name>
  		<replaceName>SubSkillData</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::SkillSubSkillData& subskilldata() const;
  inline ::pb::SkillSubSkillData* mutable_subskilldata();
  inline ::pb::SkillSubSkillData* release_subskilldata();
  inline void set_allocated_subskilldata(::pb::SkillSubSkillData* subskilldata);

  // optional .pb.SkillCurveData CurvaData = 15;
  inline bool has_curvadata() const;
  inline void clear_curvadata();
  static const int kCurvaDataFieldNumber = 15;
  /*FOR2LUA
  <Record>
  	<name>SkillData</name>
  	<Function>
  		<name>curvadata</name>
  		<replaceName>CurvaData</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_curvadata</name>
  		<replaceName>CurvaData</replaceName>
  		<handler>descripter = pb_set_message_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_allocated_curvadata</name>
  		<replaceName>CurvaData</replaceName>
  		<handler>descripter = pb_set_message_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_curvadata</name>
  		<replaceName>CurvaData</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::SkillCurveData& curvadata() const;
  inline ::pb::SkillCurveData* mutable_curvadata();
  inline ::pb::SkillCurveData* release_curvadata();
  inline void set_allocated_curvadata(::pb::SkillCurveData* curvadata);

  // optional .pb.SkillGrabData GrabData = 16;
  inline bool has_grabdata() const;
  inline void clear_grabdata();
  static const int kGrabDataFieldNumber = 16;
  /*FOR2LUA
  <Record>
  	<name>SkillData</name>
  	<Function>
  		<name>grabdata</name>
  		<replaceName>GrabData</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_grabdata</name>
  		<replaceName>GrabData</replaceName>
  		<handler>descripter = pb_set_message_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_allocated_grabdata</name>
  		<replaceName>GrabData</replaceName>
  		<handler>descripter = pb_set_message_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_grabdata</name>
  		<replaceName>GrabData</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::SkillGrabData& grabdata() const;
  inline ::pb::SkillGrabData* mutable_grabdata();
  inline ::pb::SkillGrabData* release_grabdata();
  inline void set_allocated_grabdata(::pb::SkillGrabData* grabdata);

  // optional .pb.SkillSummonObstacleData SummonObstacleData = 17;
  inline bool has_summonobstacledata() const;
  inline void clear_summonobstacledata();
  static const int kSummonObstacleDataFieldNumber = 17;
  /*FOR2LUA
  <Record>
  	<name>SkillData</name>
  	<Function>
  		<name>summonobstacledata</name>
  		<replaceName>SummonObstacleData</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_summonobstacledata</name>
  		<replaceName>SummonObstacleData</replaceName>
  		<handler>descripter = pb_set_message_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_allocated_summonobstacledata</name>
  		<replaceName>SummonObstacleData</replaceName>
  		<handler>descripter = pb_set_message_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_summonobstacledata</name>
  		<replaceName>SummonObstacleData</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::SkillSummonObstacleData& summonobstacledata() const;
  inline ::pb::SkillSummonObstacleData* mutable_summonobstacledata();
  inline ::pb::SkillSummonObstacleData* release_summonobstacledata();
  inline void set_allocated_summonobstacledata(::pb::SkillSummonObstacleData* summonobstacledata);

  // optional .pb.SkillEnergyRecoverData MusouRecoverData = 18;
  inline bool has_musourecoverdata() const;
  inline void clear_musourecoverdata();
  static const int kMusouRecoverDataFieldNumber = 18;
  /*FOR2LUA
  <Record>
  	<name>SkillData</name>
  	<Function>
  		<name>musourecoverdata</name>
  		<replaceName>MusouRecoverData</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_musourecoverdata</name>
  		<replaceName>MusouRecoverData</replaceName>
  		<handler>descripter = pb_set_message_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_allocated_musourecoverdata</name>
  		<replaceName>MusouRecoverData</replaceName>
  		<handler>descripter = pb_set_message_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_musourecoverdata</name>
  		<replaceName>MusouRecoverData</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::SkillEnergyRecoverData& musourecoverdata() const;
  inline ::pb::SkillEnergyRecoverData* mutable_musourecoverdata();
  inline ::pb::SkillEnergyRecoverData* release_musourecoverdata();
  inline void set_allocated_musourecoverdata(::pb::SkillEnergyRecoverData* musourecoverdata);

  // @@protoc_insertion_point(class_scope:pb.SkillData)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_basedata();
  inline void clear_has_basedata();
  inline void set_has_effectdata();
  inline void clear_has_effectdata();
  inline void set_has_hitdata();
  inline void clear_has_hitdata();
  inline void set_has_movedata();
  inline void clear_has_movedata();
  inline void set_has_energydrawdata();
  inline void clear_has_energydrawdata();
  inline void set_has_energyassisdata();
  inline void clear_has_energyassisdata();
  inline void set_has_lifestealdata();
  inline void clear_has_lifestealdata();
  inline void set_has_damagedata();
  inline void clear_has_damagedata();
  inline void set_has_healdata();
  inline void clear_has_healdata();
  inline void set_has_summondata();
  inline void clear_has_summondata();
  inline void set_has_reborndata();
  inline void clear_has_reborndata();
  inline void set_has_energyrecoverdata();
  inline void clear_has_energyrecoverdata();
  inline void set_has_subskilldata();
  inline void clear_has_subskilldata();
  inline void set_has_curvadata();
  inline void clear_has_curvadata();
  inline void set_has_grabdata();
  inline void clear_has_grabdata();
  inline void set_has_summonobstacledata();
  inline void clear_has_summonobstacledata();
  inline void set_has_musourecoverdata();
  inline void clear_has_musourecoverdata();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::pb::SkillBaseData* basedata_;
  ::pb::SkillEffectData* effectdata_;
  ::pb::SkillHitData* hitdata_;
  ::pb::SkillMoveData* movedata_;
  ::pb::SkillEnergyDrawData* energydrawdata_;
  ::pb::SkillEnergyAssistData* energyassisdata_;
  ::pb::SkillLifeStealData* lifestealdata_;
  ::pb::SkillDamageData* damagedata_;
  ::pb::SkillHealData* healdata_;
  ::pb::SkillSummonData* summondata_;
  ::pb::SkillRebornData* reborndata_;
  ::pb::SkillEnergyRecoverData* energyrecoverdata_;
  ::pb::SkillSubSkillData* subskilldata_;
  ::pb::SkillCurveData* curvadata_;
  ::pb::SkillGrabData* grabdata_;
  ::pb::SkillSummonObstacleData* summonobstacledata_;
  ::pb::SkillEnergyRecoverData* musourecoverdata_;
  ::google::protobuf::int32 id_;
  friend void  protobuf_AddDesc_module_2fSkillData_2eproto();
  friend void protobuf_AssignDesc_module_2fSkillData_2eproto();
  friend void protobuf_ShutdownFile_module_2fSkillData_2eproto();

  void InitAsDefaultInstance();
  static SkillData* default_instance_;
};
// ===================================================================


// ===================================================================

// SkillEffectData

// optional int32 EffectType = 1;
inline bool SkillEffectData::has_effecttype() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SkillEffectData::set_has_effecttype() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SkillEffectData::clear_has_effecttype() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SkillEffectData::clear_effecttype() {
  effecttype_ = 0;
  clear_has_effecttype();
}
inline ::google::protobuf::int32 SkillEffectData::effecttype() const {
  // @@protoc_insertion_point(field_get:pb.SkillEffectData.EffectType)
  return effecttype_;
}
inline void SkillEffectData::set_effecttype(::google::protobuf::int32 value) {
  set_has_effecttype();
  effecttype_ = value;
  // @@protoc_insertion_point(field_set:pb.SkillEffectData.EffectType)
}

// optional int32 OriginType = 2;
inline bool SkillEffectData::has_origintype() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SkillEffectData::set_has_origintype() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SkillEffectData::clear_has_origintype() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SkillEffectData::clear_origintype() {
  origintype_ = 0;
  clear_has_origintype();
}
inline ::google::protobuf::int32 SkillEffectData::origintype() const {
  // @@protoc_insertion_point(field_get:pb.SkillEffectData.OriginType)
  return origintype_;
}
inline void SkillEffectData::set_origintype(::google::protobuf::int32 value) {
  set_has_origintype();
  origintype_ = value;
  // @@protoc_insertion_point(field_set:pb.SkillEffectData.OriginType)
}

// optional int32 EffectParam1 = 3;
inline bool SkillEffectData::has_effectparam1() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void SkillEffectData::set_has_effectparam1() {
  _has_bits_[0] |= 0x00000004u;
}
inline void SkillEffectData::clear_has_effectparam1() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void SkillEffectData::clear_effectparam1() {
  effectparam1_ = 0;
  clear_has_effectparam1();
}
inline ::google::protobuf::int32 SkillEffectData::effectparam1() const {
  // @@protoc_insertion_point(field_get:pb.SkillEffectData.EffectParam1)
  return effectparam1_;
}
inline void SkillEffectData::set_effectparam1(::google::protobuf::int32 value) {
  set_has_effectparam1();
  effectparam1_ = value;
  // @@protoc_insertion_point(field_set:pb.SkillEffectData.EffectParam1)
}

// optional int32 EffectParam2 = 4;
inline bool SkillEffectData::has_effectparam2() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void SkillEffectData::set_has_effectparam2() {
  _has_bits_[0] |= 0x00000008u;
}
inline void SkillEffectData::clear_has_effectparam2() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void SkillEffectData::clear_effectparam2() {
  effectparam2_ = 0;
  clear_has_effectparam2();
}
inline ::google::protobuf::int32 SkillEffectData::effectparam2() const {
  // @@protoc_insertion_point(field_get:pb.SkillEffectData.EffectParam2)
  return effectparam2_;
}
inline void SkillEffectData::set_effectparam2(::google::protobuf::int32 value) {
  set_has_effectparam2();
  effectparam2_ = value;
  // @@protoc_insertion_point(field_set:pb.SkillEffectData.EffectParam2)
}

// optional bool IsBySection = 5;
inline bool SkillEffectData::has_isbysection() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void SkillEffectData::set_has_isbysection() {
  _has_bits_[0] |= 0x00000010u;
}
inline void SkillEffectData::clear_has_isbysection() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void SkillEffectData::clear_isbysection() {
  isbysection_ = false;
  clear_has_isbysection();
}
inline bool SkillEffectData::isbysection() const {
  // @@protoc_insertion_point(field_get:pb.SkillEffectData.IsBySection)
  return isbysection_;
}
inline void SkillEffectData::set_isbysection(bool value) {
  set_has_isbysection();
  isbysection_ = value;
  // @@protoc_insertion_point(field_set:pb.SkillEffectData.IsBySection)
}

// optional int32 EffectDelay = 6;
inline bool SkillEffectData::has_effectdelay() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void SkillEffectData::set_has_effectdelay() {
  _has_bits_[0] |= 0x00000020u;
}
inline void SkillEffectData::clear_has_effectdelay() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void SkillEffectData::clear_effectdelay() {
  effectdelay_ = 0;
  clear_has_effectdelay();
}
inline ::google::protobuf::int32 SkillEffectData::effectdelay() const {
  // @@protoc_insertion_point(field_get:pb.SkillEffectData.EffectDelay)
  return effectdelay_;
}
inline void SkillEffectData::set_effectdelay(::google::protobuf::int32 value) {
  set_has_effectdelay();
  effectdelay_ = value;
  // @@protoc_insertion_point(field_set:pb.SkillEffectData.EffectDelay)
}

// optional int32 EffectInterval = 7;
inline bool SkillEffectData::has_effectinterval() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void SkillEffectData::set_has_effectinterval() {
  _has_bits_[0] |= 0x00000040u;
}
inline void SkillEffectData::clear_has_effectinterval() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void SkillEffectData::clear_effectinterval() {
  effectinterval_ = 0;
  clear_has_effectinterval();
}
inline ::google::protobuf::int32 SkillEffectData::effectinterval() const {
  // @@protoc_insertion_point(field_get:pb.SkillEffectData.EffectInterval)
  return effectinterval_;
}
inline void SkillEffectData::set_effectinterval(::google::protobuf::int32 value) {
  set_has_effectinterval();
  effectinterval_ = value;
  // @@protoc_insertion_point(field_set:pb.SkillEffectData.EffectInterval)
}

// optional int32 EffectCount = 8;
inline bool SkillEffectData::has_effectcount() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void SkillEffectData::set_has_effectcount() {
  _has_bits_[0] |= 0x00000080u;
}
inline void SkillEffectData::clear_has_effectcount() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void SkillEffectData::clear_effectcount() {
  effectcount_ = 0;
  clear_has_effectcount();
}
inline ::google::protobuf::int32 SkillEffectData::effectcount() const {
  // @@protoc_insertion_point(field_get:pb.SkillEffectData.EffectCount)
  return effectcount_;
}
inline void SkillEffectData::set_effectcount(::google::protobuf::int32 value) {
  set_has_effectcount();
  effectcount_ = value;
  // @@protoc_insertion_point(field_set:pb.SkillEffectData.EffectCount)
}

// optional int32 EffectTarget = 9;
inline bool SkillEffectData::has_effecttarget() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void SkillEffectData::set_has_effecttarget() {
  _has_bits_[0] |= 0x00000100u;
}
inline void SkillEffectData::clear_has_effecttarget() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void SkillEffectData::clear_effecttarget() {
  effecttarget_ = 0;
  clear_has_effecttarget();
}
inline ::google::protobuf::int32 SkillEffectData::effecttarget() const {
  // @@protoc_insertion_point(field_get:pb.SkillEffectData.EffectTarget)
  return effecttarget_;
}
inline void SkillEffectData::set_effecttarget(::google::protobuf::int32 value) {
  set_has_effecttarget();
  effecttarget_ = value;
  // @@protoc_insertion_point(field_set:pb.SkillEffectData.EffectTarget)
}

// optional int32 SpeBuffID = 10;
inline bool SkillEffectData::has_spebuffid() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void SkillEffectData::set_has_spebuffid() {
  _has_bits_[0] |= 0x00000200u;
}
inline void SkillEffectData::clear_has_spebuffid() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void SkillEffectData::clear_spebuffid() {
  spebuffid_ = 0;
  clear_has_spebuffid();
}
inline ::google::protobuf::int32 SkillEffectData::spebuffid() const {
  // @@protoc_insertion_point(field_get:pb.SkillEffectData.SpeBuffID)
  return spebuffid_;
}
inline void SkillEffectData::set_spebuffid(::google::protobuf::int32 value) {
  set_has_spebuffid();
  spebuffid_ = value;
  // @@protoc_insertion_point(field_set:pb.SkillEffectData.SpeBuffID)
}

// optional int32 TargetNum = 11;
inline bool SkillEffectData::has_targetnum() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void SkillEffectData::set_has_targetnum() {
  _has_bits_[0] |= 0x00000400u;
}
inline void SkillEffectData::clear_has_targetnum() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void SkillEffectData::clear_targetnum() {
  targetnum_ = 0;
  clear_has_targetnum();
}
inline ::google::protobuf::int32 SkillEffectData::targetnum() const {
  // @@protoc_insertion_point(field_get:pb.SkillEffectData.TargetNum)
  return targetnum_;
}
inline void SkillEffectData::set_targetnum(::google::protobuf::int32 value) {
  set_has_targetnum();
  targetnum_ = value;
  // @@protoc_insertion_point(field_set:pb.SkillEffectData.TargetNum)
}

// repeated int32 AddBuffID = 12;
inline int SkillEffectData::addbuffid_size() const {
  return addbuffid_.size();
}
inline void SkillEffectData::clear_addbuffid() {
  addbuffid_.Clear();
}
inline ::google::protobuf::int32 SkillEffectData::addbuffid(int index) const {
  // @@protoc_insertion_point(field_get:pb.SkillEffectData.AddBuffID)
  return addbuffid_.Get(index);
}
inline void SkillEffectData::set_addbuffid(int index, ::google::protobuf::int32 value) {
  addbuffid_.Set(index, value);
  // @@protoc_insertion_point(field_set:pb.SkillEffectData.AddBuffID)
}
inline void SkillEffectData::add_addbuffid(::google::protobuf::int32 value) {
  addbuffid_.Add(value);
  // @@protoc_insertion_point(field_add:pb.SkillEffectData.AddBuffID)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
SkillEffectData::addbuffid() const {
  // @@protoc_insertion_point(field_list:pb.SkillEffectData.AddBuffID)
  return addbuffid_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
SkillEffectData::mutable_addbuffid() {
  // @@protoc_insertion_point(field_mutable_list:pb.SkillEffectData.AddBuffID)
  return &addbuffid_;
}

// optional bool EffectTargetIncludeSelf = 13;
inline bool SkillEffectData::has_effecttargetincludeself() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void SkillEffectData::set_has_effecttargetincludeself() {
  _has_bits_[0] |= 0x00001000u;
}
inline void SkillEffectData::clear_has_effecttargetincludeself() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void SkillEffectData::clear_effecttargetincludeself() {
  effecttargetincludeself_ = false;
  clear_has_effecttargetincludeself();
}
inline bool SkillEffectData::effecttargetincludeself() const {
  // @@protoc_insertion_point(field_get:pb.SkillEffectData.EffectTargetIncludeSelf)
  return effecttargetincludeself_;
}
inline void SkillEffectData::set_effecttargetincludeself(bool value) {
  set_has_effecttargetincludeself();
  effecttargetincludeself_ = value;
  // @@protoc_insertion_point(field_set:pb.SkillEffectData.EffectTargetIncludeSelf)
}

// optional bool RecordEffectTarget = 14;
inline bool SkillEffectData::has_recordeffecttarget() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void SkillEffectData::set_has_recordeffecttarget() {
  _has_bits_[0] |= 0x00002000u;
}
inline void SkillEffectData::clear_has_recordeffecttarget() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void SkillEffectData::clear_recordeffecttarget() {
  recordeffecttarget_ = false;
  clear_has_recordeffecttarget();
}
inline bool SkillEffectData::recordeffecttarget() const {
  // @@protoc_insertion_point(field_get:pb.SkillEffectData.RecordEffectTarget)
  return recordeffecttarget_;
}
inline void SkillEffectData::set_recordeffecttarget(bool value) {
  set_has_recordeffecttarget();
  recordeffecttarget_ = value;
  // @@protoc_insertion_point(field_set:pb.SkillEffectData.RecordEffectTarget)
}

// optional .pb.SkillTargetPriority EffectPriority = 15;
inline bool SkillEffectData::has_effectpriority() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void SkillEffectData::set_has_effectpriority() {
  _has_bits_[0] |= 0x00004000u;
}
inline void SkillEffectData::clear_has_effectpriority() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void SkillEffectData::clear_effectpriority() {
  if (effectpriority_ != NULL) effectpriority_->::pb::SkillTargetPriority::Clear();
  clear_has_effectpriority();
}
inline const ::pb::SkillTargetPriority& SkillEffectData::effectpriority() const {
  // @@protoc_insertion_point(field_get:pb.SkillEffectData.EffectPriority)
  return effectpriority_ != NULL ? *effectpriority_ : *default_instance_->effectpriority_;
}
inline ::pb::SkillTargetPriority* SkillEffectData::mutable_effectpriority() {
  set_has_effectpriority();
  if (effectpriority_ == NULL) effectpriority_ = new ::pb::SkillTargetPriority;
  // @@protoc_insertion_point(field_mutable:pb.SkillEffectData.EffectPriority)
  return effectpriority_;
}
inline ::pb::SkillTargetPriority* SkillEffectData::release_effectpriority() {
  clear_has_effectpriority();
  ::pb::SkillTargetPriority* temp = effectpriority_;
  effectpriority_ = NULL;
  return temp;
}
inline void SkillEffectData::set_allocated_effectpriority(::pb::SkillTargetPriority* effectpriority) {
  delete effectpriority_;
  effectpriority_ = effectpriority;
  if (effectpriority) {
    set_has_effectpriority();
  } else {
    clear_has_effectpriority();
  }
  // @@protoc_insertion_point(field_set_allocated:pb.SkillEffectData.EffectPriority)
}

// optional int32 EffectParam3 = 16;
inline bool SkillEffectData::has_effectparam3() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void SkillEffectData::set_has_effectparam3() {
  _has_bits_[0] |= 0x00008000u;
}
inline void SkillEffectData::clear_has_effectparam3() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void SkillEffectData::clear_effectparam3() {
  effectparam3_ = 0;
  clear_has_effectparam3();
}
inline ::google::protobuf::int32 SkillEffectData::effectparam3() const {
  // @@protoc_insertion_point(field_get:pb.SkillEffectData.EffectParam3)
  return effectparam3_;
}
inline void SkillEffectData::set_effectparam3(::google::protobuf::int32 value) {
  set_has_effectparam3();
  effectparam3_ = value;
  // @@protoc_insertion_point(field_set:pb.SkillEffectData.EffectParam3)
}

// repeated .pb.SkillLevelSubBuff LevelSubBuff = 17;
inline int SkillEffectData::levelsubbuff_size() const {
  return levelsubbuff_.size();
}
inline void SkillEffectData::clear_levelsubbuff() {
  levelsubbuff_.Clear();
}
inline const ::pb::SkillLevelSubBuff& SkillEffectData::levelsubbuff(int index) const {
  // @@protoc_insertion_point(field_get:pb.SkillEffectData.LevelSubBuff)
  return levelsubbuff_.Get(index);
}
inline ::pb::SkillLevelSubBuff* SkillEffectData::mutable_levelsubbuff(int index) {
  // @@protoc_insertion_point(field_mutable:pb.SkillEffectData.LevelSubBuff)
  return levelsubbuff_.Mutable(index);
}
inline ::pb::SkillLevelSubBuff* SkillEffectData::add_levelsubbuff() {
  // @@protoc_insertion_point(field_add:pb.SkillEffectData.LevelSubBuff)
  return levelsubbuff_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::SkillLevelSubBuff >&
SkillEffectData::levelsubbuff() const {
  // @@protoc_insertion_point(field_list:pb.SkillEffectData.LevelSubBuff)
  return levelsubbuff_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb::SkillLevelSubBuff >*
SkillEffectData::mutable_levelsubbuff() {
  // @@protoc_insertion_point(field_mutable_list:pb.SkillEffectData.LevelSubBuff)
  return &levelsubbuff_;
}

// optional int32 LevelRangeGrowth = 18;
inline bool SkillEffectData::has_levelrangegrowth() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
inline void SkillEffectData::set_has_levelrangegrowth() {
  _has_bits_[0] |= 0x00020000u;
}
inline void SkillEffectData::clear_has_levelrangegrowth() {
  _has_bits_[0] &= ~0x00020000u;
}
inline void SkillEffectData::clear_levelrangegrowth() {
  levelrangegrowth_ = 0;
  clear_has_levelrangegrowth();
}
inline ::google::protobuf::int32 SkillEffectData::levelrangegrowth() const {
  // @@protoc_insertion_point(field_get:pb.SkillEffectData.LevelRangeGrowth)
  return levelrangegrowth_;
}
inline void SkillEffectData::set_levelrangegrowth(::google::protobuf::int32 value) {
  set_has_levelrangegrowth();
  levelrangegrowth_ = value;
  // @@protoc_insertion_point(field_set:pb.SkillEffectData.LevelRangeGrowth)
}

// -------------------------------------------------------------------

// SkillHitData

// optional bool HitForSure = 1;
inline bool SkillHitData::has_hitforsure() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SkillHitData::set_has_hitforsure() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SkillHitData::clear_has_hitforsure() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SkillHitData::clear_hitforsure() {
  hitforsure_ = false;
  clear_has_hitforsure();
}
inline bool SkillHitData::hitforsure() const {
  // @@protoc_insertion_point(field_get:pb.SkillHitData.HitForSure)
  return hitforsure_;
}
inline void SkillHitData::set_hitforsure(bool value) {
  set_has_hitforsure();
  hitforsure_ = value;
  // @@protoc_insertion_point(field_set:pb.SkillHitData.HitForSure)
}

// optional int32 EffectParent = 3;
inline bool SkillHitData::has_effectparent() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SkillHitData::set_has_effectparent() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SkillHitData::clear_has_effectparent() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SkillHitData::clear_effectparent() {
  effectparent_ = 0;
  clear_has_effectparent();
}
inline ::google::protobuf::int32 SkillHitData::effectparent() const {
  // @@protoc_insertion_point(field_get:pb.SkillHitData.EffectParent)
  return effectparent_;
}
inline void SkillHitData::set_effectparent(::google::protobuf::int32 value) {
  set_has_effectparent();
  effectparent_ = value;
  // @@protoc_insertion_point(field_set:pb.SkillHitData.EffectParent)
}

// optional string HitEffect = 4;
inline bool SkillHitData::has_hiteffect() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void SkillHitData::set_has_hiteffect() {
  _has_bits_[0] |= 0x00000004u;
}
inline void SkillHitData::clear_has_hiteffect() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void SkillHitData::clear_hiteffect() {
  if (hiteffect_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    hiteffect_->clear();
  }
  clear_has_hiteffect();
}
inline const ::std::string& SkillHitData::hiteffect() const {
  // @@protoc_insertion_point(field_get:pb.SkillHitData.HitEffect)
  return *hiteffect_;
}
inline void SkillHitData::set_hiteffect(const ::std::string& value) {
  set_has_hiteffect();
  if (hiteffect_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    hiteffect_ = new ::std::string;
  }
  hiteffect_->assign(value);
  // @@protoc_insertion_point(field_set:pb.SkillHitData.HitEffect)
}
inline void SkillHitData::set_hiteffect(const char* value) {
  set_has_hiteffect();
  if (hiteffect_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    hiteffect_ = new ::std::string;
  }
  hiteffect_->assign(value);
  // @@protoc_insertion_point(field_set_char:pb.SkillHitData.HitEffect)
}
inline void SkillHitData::set_hiteffect(const char* value, size_t size) {
  set_has_hiteffect();
  if (hiteffect_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    hiteffect_ = new ::std::string;
  }
  hiteffect_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:pb.SkillHitData.HitEffect)
}
inline ::std::string* SkillHitData::mutable_hiteffect() {
  set_has_hiteffect();
  if (hiteffect_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    hiteffect_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:pb.SkillHitData.HitEffect)
  return hiteffect_;
}
inline ::std::string* SkillHitData::release_hiteffect() {
  clear_has_hiteffect();
  if (hiteffect_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = hiteffect_;
    hiteffect_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void SkillHitData::set_allocated_hiteffect(::std::string* hiteffect) {
  if (hiteffect_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete hiteffect_;
  }
  if (hiteffect) {
    set_has_hiteffect();
    hiteffect_ = hiteffect;
  } else {
    clear_has_hiteffect();
    hiteffect_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:pb.SkillHitData.HitEffect)
}

// optional string HitSound = 5;
inline bool SkillHitData::has_hitsound() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void SkillHitData::set_has_hitsound() {
  _has_bits_[0] |= 0x00000008u;
}
inline void SkillHitData::clear_has_hitsound() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void SkillHitData::clear_hitsound() {
  if (hitsound_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    hitsound_->clear();
  }
  clear_has_hitsound();
}
inline const ::std::string& SkillHitData::hitsound() const {
  // @@protoc_insertion_point(field_get:pb.SkillHitData.HitSound)
  return *hitsound_;
}
inline void SkillHitData::set_hitsound(const ::std::string& value) {
  set_has_hitsound();
  if (hitsound_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    hitsound_ = new ::std::string;
  }
  hitsound_->assign(value);
  // @@protoc_insertion_point(field_set:pb.SkillHitData.HitSound)
}
inline void SkillHitData::set_hitsound(const char* value) {
  set_has_hitsound();
  if (hitsound_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    hitsound_ = new ::std::string;
  }
  hitsound_->assign(value);
  // @@protoc_insertion_point(field_set_char:pb.SkillHitData.HitSound)
}
inline void SkillHitData::set_hitsound(const char* value, size_t size) {
  set_has_hitsound();
  if (hitsound_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    hitsound_ = new ::std::string;
  }
  hitsound_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:pb.SkillHitData.HitSound)
}
inline ::std::string* SkillHitData::mutable_hitsound() {
  set_has_hitsound();
  if (hitsound_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    hitsound_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:pb.SkillHitData.HitSound)
  return hitsound_;
}
inline ::std::string* SkillHitData::release_hitsound() {
  clear_has_hitsound();
  if (hitsound_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = hitsound_;
    hitsound_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void SkillHitData::set_allocated_hitsound(::std::string* hitsound) {
  if (hitsound_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete hitsound_;
  }
  if (hitsound) {
    set_has_hitsound();
    hitsound_ = hitsound;
  } else {
    clear_has_hitsound();
    hitsound_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:pb.SkillHitData.HitSound)
}

// optional int32 HitEffectPlayType = 6;
inline bool SkillHitData::has_hiteffectplaytype() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void SkillHitData::set_has_hiteffectplaytype() {
  _has_bits_[0] |= 0x00000010u;
}
inline void SkillHitData::clear_has_hiteffectplaytype() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void SkillHitData::clear_hiteffectplaytype() {
  hiteffectplaytype_ = 0;
  clear_has_hiteffectplaytype();
}
inline ::google::protobuf::int32 SkillHitData::hiteffectplaytype() const {
  // @@protoc_insertion_point(field_get:pb.SkillHitData.HitEffectPlayType)
  return hiteffectplaytype_;
}
inline void SkillHitData::set_hiteffectplaytype(::google::protobuf::int32 value) {
  set_has_hiteffectplaytype();
  hiteffectplaytype_ = value;
  // @@protoc_insertion_point(field_set:pb.SkillHitData.HitEffectPlayType)
}

// optional int32 HitEffectPlayParam = 7;
inline bool SkillHitData::has_hiteffectplayparam() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void SkillHitData::set_has_hiteffectplayparam() {
  _has_bits_[0] |= 0x00000020u;
}
inline void SkillHitData::clear_has_hiteffectplayparam() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void SkillHitData::clear_hiteffectplayparam() {
  hiteffectplayparam_ = 0;
  clear_has_hiteffectplayparam();
}
inline ::google::protobuf::int32 SkillHitData::hiteffectplayparam() const {
  // @@protoc_insertion_point(field_get:pb.SkillHitData.HitEffectPlayParam)
  return hiteffectplayparam_;
}
inline void SkillHitData::set_hiteffectplayparam(::google::protobuf::int32 value) {
  set_has_hiteffectplayparam();
  hiteffectplayparam_ = value;
  // @@protoc_insertion_point(field_set:pb.SkillHitData.HitEffectPlayParam)
}

// optional bool HitEffectFollow = 8;
inline bool SkillHitData::has_hiteffectfollow() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void SkillHitData::set_has_hiteffectfollow() {
  _has_bits_[0] |= 0x00000040u;
}
inline void SkillHitData::clear_has_hiteffectfollow() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void SkillHitData::clear_hiteffectfollow() {
  hiteffectfollow_ = false;
  clear_has_hiteffectfollow();
}
inline bool SkillHitData::hiteffectfollow() const {
  // @@protoc_insertion_point(field_get:pb.SkillHitData.HitEffectFollow)
  return hiteffectfollow_;
}
inline void SkillHitData::set_hiteffectfollow(bool value) {
  set_has_hiteffectfollow();
  hiteffectfollow_ = value;
  // @@protoc_insertion_point(field_set:pb.SkillHitData.HitEffectFollow)
}

// optional bool HitEffectFlip = 9;
inline bool SkillHitData::has_hiteffectflip() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void SkillHitData::set_has_hiteffectflip() {
  _has_bits_[0] |= 0x00000080u;
}
inline void SkillHitData::clear_has_hiteffectflip() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void SkillHitData::clear_hiteffectflip() {
  hiteffectflip_ = false;
  clear_has_hiteffectflip();
}
inline bool SkillHitData::hiteffectflip() const {
  // @@protoc_insertion_point(field_get:pb.SkillHitData.HitEffectFlip)
  return hiteffectflip_;
}
inline void SkillHitData::set_hiteffectflip(bool value) {
  set_has_hiteffectflip();
  hiteffectflip_ = value;
  // @@protoc_insertion_point(field_set:pb.SkillHitData.HitEffectFlip)
}

// optional int32 RefEffectParent = 10;
inline bool SkillHitData::has_refeffectparent() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void SkillHitData::set_has_refeffectparent() {
  _has_bits_[0] |= 0x00000100u;
}
inline void SkillHitData::clear_has_refeffectparent() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void SkillHitData::clear_refeffectparent() {
  refeffectparent_ = 0;
  clear_has_refeffectparent();
}
inline ::google::protobuf::int32 SkillHitData::refeffectparent() const {
  // @@protoc_insertion_point(field_get:pb.SkillHitData.RefEffectParent)
  return refeffectparent_;
}
inline void SkillHitData::set_refeffectparent(::google::protobuf::int32 value) {
  set_has_refeffectparent();
  refeffectparent_ = value;
  // @@protoc_insertion_point(field_set:pb.SkillHitData.RefEffectParent)
}

// optional string RefEffect = 11;
inline bool SkillHitData::has_refeffect() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void SkillHitData::set_has_refeffect() {
  _has_bits_[0] |= 0x00000200u;
}
inline void SkillHitData::clear_has_refeffect() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void SkillHitData::clear_refeffect() {
  if (refeffect_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    refeffect_->clear();
  }
  clear_has_refeffect();
}
inline const ::std::string& SkillHitData::refeffect() const {
  // @@protoc_insertion_point(field_get:pb.SkillHitData.RefEffect)
  return *refeffect_;
}
inline void SkillHitData::set_refeffect(const ::std::string& value) {
  set_has_refeffect();
  if (refeffect_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    refeffect_ = new ::std::string;
  }
  refeffect_->assign(value);
  // @@protoc_insertion_point(field_set:pb.SkillHitData.RefEffect)
}
inline void SkillHitData::set_refeffect(const char* value) {
  set_has_refeffect();
  if (refeffect_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    refeffect_ = new ::std::string;
  }
  refeffect_->assign(value);
  // @@protoc_insertion_point(field_set_char:pb.SkillHitData.RefEffect)
}
inline void SkillHitData::set_refeffect(const char* value, size_t size) {
  set_has_refeffect();
  if (refeffect_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    refeffect_ = new ::std::string;
  }
  refeffect_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:pb.SkillHitData.RefEffect)
}
inline ::std::string* SkillHitData::mutable_refeffect() {
  set_has_refeffect();
  if (refeffect_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    refeffect_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:pb.SkillHitData.RefEffect)
  return refeffect_;
}
inline ::std::string* SkillHitData::release_refeffect() {
  clear_has_refeffect();
  if (refeffect_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = refeffect_;
    refeffect_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void SkillHitData::set_allocated_refeffect(::std::string* refeffect) {
  if (refeffect_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete refeffect_;
  }
  if (refeffect) {
    set_has_refeffect();
    refeffect_ = refeffect;
  } else {
    clear_has_refeffect();
    refeffect_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:pb.SkillHitData.RefEffect)
}

// optional string RefSound = 12;
inline bool SkillHitData::has_refsound() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void SkillHitData::set_has_refsound() {
  _has_bits_[0] |= 0x00000400u;
}
inline void SkillHitData::clear_has_refsound() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void SkillHitData::clear_refsound() {
  if (refsound_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    refsound_->clear();
  }
  clear_has_refsound();
}
inline const ::std::string& SkillHitData::refsound() const {
  // @@protoc_insertion_point(field_get:pb.SkillHitData.RefSound)
  return *refsound_;
}
inline void SkillHitData::set_refsound(const ::std::string& value) {
  set_has_refsound();
  if (refsound_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    refsound_ = new ::std::string;
  }
  refsound_->assign(value);
  // @@protoc_insertion_point(field_set:pb.SkillHitData.RefSound)
}
inline void SkillHitData::set_refsound(const char* value) {
  set_has_refsound();
  if (refsound_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    refsound_ = new ::std::string;
  }
  refsound_->assign(value);
  // @@protoc_insertion_point(field_set_char:pb.SkillHitData.RefSound)
}
inline void SkillHitData::set_refsound(const char* value, size_t size) {
  set_has_refsound();
  if (refsound_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    refsound_ = new ::std::string;
  }
  refsound_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:pb.SkillHitData.RefSound)
}
inline ::std::string* SkillHitData::mutable_refsound() {
  set_has_refsound();
  if (refsound_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    refsound_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:pb.SkillHitData.RefSound)
  return refsound_;
}
inline ::std::string* SkillHitData::release_refsound() {
  clear_has_refsound();
  if (refsound_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = refsound_;
    refsound_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void SkillHitData::set_allocated_refsound(::std::string* refsound) {
  if (refsound_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete refsound_;
  }
  if (refsound) {
    set_has_refsound();
    refsound_ = refsound;
  } else {
    clear_has_refsound();
    refsound_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:pb.SkillHitData.RefSound)
}

// optional bool RefEffectFollow = 13;
inline bool SkillHitData::has_refeffectfollow() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void SkillHitData::set_has_refeffectfollow() {
  _has_bits_[0] |= 0x00000800u;
}
inline void SkillHitData::clear_has_refeffectfollow() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void SkillHitData::clear_refeffectfollow() {
  refeffectfollow_ = false;
  clear_has_refeffectfollow();
}
inline bool SkillHitData::refeffectfollow() const {
  // @@protoc_insertion_point(field_get:pb.SkillHitData.RefEffectFollow)
  return refeffectfollow_;
}
inline void SkillHitData::set_refeffectfollow(bool value) {
  set_has_refeffectfollow();
  refeffectfollow_ = value;
  // @@protoc_insertion_point(field_set:pb.SkillHitData.RefEffectFollow)
}

// optional bool RefEffectFlip = 14;
inline bool SkillHitData::has_refeffectflip() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void SkillHitData::set_has_refeffectflip() {
  _has_bits_[0] |= 0x00001000u;
}
inline void SkillHitData::clear_has_refeffectflip() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void SkillHitData::clear_refeffectflip() {
  refeffectflip_ = false;
  clear_has_refeffectflip();
}
inline bool SkillHitData::refeffectflip() const {
  // @@protoc_insertion_point(field_get:pb.SkillHitData.RefEffectFlip)
  return refeffectflip_;
}
inline void SkillHitData::set_refeffectflip(bool value) {
  set_has_refeffectflip();
  refeffectflip_ = value;
  // @@protoc_insertion_point(field_set:pb.SkillHitData.RefEffectFlip)
}

// optional bool PlayDownAnim = 15;
inline bool SkillHitData::has_playdownanim() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void SkillHitData::set_has_playdownanim() {
  _has_bits_[0] |= 0x00002000u;
}
inline void SkillHitData::clear_has_playdownanim() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void SkillHitData::clear_playdownanim() {
  playdownanim_ = false;
  clear_has_playdownanim();
}
inline bool SkillHitData::playdownanim() const {
  // @@protoc_insertion_point(field_get:pb.SkillHitData.PlayDownAnim)
  return playdownanim_;
}
inline void SkillHitData::set_playdownanim(bool value) {
  set_has_playdownanim();
  playdownanim_ = value;
  // @@protoc_insertion_point(field_set:pb.SkillHitData.PlayDownAnim)
}

// optional bool HitEffectRotateRandom = 16;
inline bool SkillHitData::has_hiteffectrotaterandom() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void SkillHitData::set_has_hiteffectrotaterandom() {
  _has_bits_[0] |= 0x00004000u;
}
inline void SkillHitData::clear_has_hiteffectrotaterandom() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void SkillHitData::clear_hiteffectrotaterandom() {
  hiteffectrotaterandom_ = false;
  clear_has_hiteffectrotaterandom();
}
inline bool SkillHitData::hiteffectrotaterandom() const {
  // @@protoc_insertion_point(field_get:pb.SkillHitData.HitEffectRotateRandom)
  return hiteffectrotaterandom_;
}
inline void SkillHitData::set_hiteffectrotaterandom(bool value) {
  set_has_hiteffectrotaterandom();
  hiteffectrotaterandom_ = value;
  // @@protoc_insertion_point(field_set:pb.SkillHitData.HitEffectRotateRandom)
}

// repeated int32 HitEffectRotateRangeX = 17;
inline int SkillHitData::hiteffectrotaterangex_size() const {
  return hiteffectrotaterangex_.size();
}
inline void SkillHitData::clear_hiteffectrotaterangex() {
  hiteffectrotaterangex_.Clear();
}
inline ::google::protobuf::int32 SkillHitData::hiteffectrotaterangex(int index) const {
  // @@protoc_insertion_point(field_get:pb.SkillHitData.HitEffectRotateRangeX)
  return hiteffectrotaterangex_.Get(index);
}
inline void SkillHitData::set_hiteffectrotaterangex(int index, ::google::protobuf::int32 value) {
  hiteffectrotaterangex_.Set(index, value);
  // @@protoc_insertion_point(field_set:pb.SkillHitData.HitEffectRotateRangeX)
}
inline void SkillHitData::add_hiteffectrotaterangex(::google::protobuf::int32 value) {
  hiteffectrotaterangex_.Add(value);
  // @@protoc_insertion_point(field_add:pb.SkillHitData.HitEffectRotateRangeX)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
SkillHitData::hiteffectrotaterangex() const {
  // @@protoc_insertion_point(field_list:pb.SkillHitData.HitEffectRotateRangeX)
  return hiteffectrotaterangex_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
SkillHitData::mutable_hiteffectrotaterangex() {
  // @@protoc_insertion_point(field_mutable_list:pb.SkillHitData.HitEffectRotateRangeX)
  return &hiteffectrotaterangex_;
}

// repeated int32 HitEffectRotateRangeY = 18;
inline int SkillHitData::hiteffectrotaterangey_size() const {
  return hiteffectrotaterangey_.size();
}
inline void SkillHitData::clear_hiteffectrotaterangey() {
  hiteffectrotaterangey_.Clear();
}
inline ::google::protobuf::int32 SkillHitData::hiteffectrotaterangey(int index) const {
  // @@protoc_insertion_point(field_get:pb.SkillHitData.HitEffectRotateRangeY)
  return hiteffectrotaterangey_.Get(index);
}
inline void SkillHitData::set_hiteffectrotaterangey(int index, ::google::protobuf::int32 value) {
  hiteffectrotaterangey_.Set(index, value);
  // @@protoc_insertion_point(field_set:pb.SkillHitData.HitEffectRotateRangeY)
}
inline void SkillHitData::add_hiteffectrotaterangey(::google::protobuf::int32 value) {
  hiteffectrotaterangey_.Add(value);
  // @@protoc_insertion_point(field_add:pb.SkillHitData.HitEffectRotateRangeY)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
SkillHitData::hiteffectrotaterangey() const {
  // @@protoc_insertion_point(field_list:pb.SkillHitData.HitEffectRotateRangeY)
  return hiteffectrotaterangey_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
SkillHitData::mutable_hiteffectrotaterangey() {
  // @@protoc_insertion_point(field_mutable_list:pb.SkillHitData.HitEffectRotateRangeY)
  return &hiteffectrotaterangey_;
}

// repeated .pb.HitEffectData HitEffectData = 19;
inline int SkillHitData::hiteffectdata_size() const {
  return hiteffectdata_.size();
}
inline void SkillHitData::clear_hiteffectdata() {
  hiteffectdata_.Clear();
}
inline const ::pb::HitEffectData& SkillHitData::hiteffectdata(int index) const {
  // @@protoc_insertion_point(field_get:pb.SkillHitData.HitEffectData)
  return hiteffectdata_.Get(index);
}
inline ::pb::HitEffectData* SkillHitData::mutable_hiteffectdata(int index) {
  // @@protoc_insertion_point(field_mutable:pb.SkillHitData.HitEffectData)
  return hiteffectdata_.Mutable(index);
}
inline ::pb::HitEffectData* SkillHitData::add_hiteffectdata() {
  // @@protoc_insertion_point(field_add:pb.SkillHitData.HitEffectData)
  return hiteffectdata_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::HitEffectData >&
SkillHitData::hiteffectdata() const {
  // @@protoc_insertion_point(field_list:pb.SkillHitData.HitEffectData)
  return hiteffectdata_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb::HitEffectData >*
SkillHitData::mutable_hiteffectdata() {
  // @@protoc_insertion_point(field_mutable_list:pb.SkillHitData.HitEffectData)
  return &hiteffectdata_;
}

// optional bool PlayLayerEffect = 20;
inline bool SkillHitData::has_playlayereffect() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
inline void SkillHitData::set_has_playlayereffect() {
  _has_bits_[0] |= 0x00040000u;
}
inline void SkillHitData::clear_has_playlayereffect() {
  _has_bits_[0] &= ~0x00040000u;
}
inline void SkillHitData::clear_playlayereffect() {
  playlayereffect_ = false;
  clear_has_playlayereffect();
}
inline bool SkillHitData::playlayereffect() const {
  // @@protoc_insertion_point(field_get:pb.SkillHitData.PlayLayerEffect)
  return playlayereffect_;
}
inline void SkillHitData::set_playlayereffect(bool value) {
  set_has_playlayereffect();
  playlayereffect_ = value;
  // @@protoc_insertion_point(field_set:pb.SkillHitData.PlayLayerEffect)
}

// -------------------------------------------------------------------

// SkillEnergyDrawData

// optional int32 DrawType = 1;
inline bool SkillEnergyDrawData::has_drawtype() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SkillEnergyDrawData::set_has_drawtype() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SkillEnergyDrawData::clear_has_drawtype() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SkillEnergyDrawData::clear_drawtype() {
  drawtype_ = 0;
  clear_has_drawtype();
}
inline ::google::protobuf::int32 SkillEnergyDrawData::drawtype() const {
  // @@protoc_insertion_point(field_get:pb.SkillEnergyDrawData.DrawType)
  return drawtype_;
}
inline void SkillEnergyDrawData::set_drawtype(::google::protobuf::int32 value) {
  set_has_drawtype();
  drawtype_ = value;
  // @@protoc_insertion_point(field_set:pb.SkillEnergyDrawData.DrawType)
}

// optional int32 DrwaParam1 = 2;
inline bool SkillEnergyDrawData::has_drwaparam1() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SkillEnergyDrawData::set_has_drwaparam1() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SkillEnergyDrawData::clear_has_drwaparam1() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SkillEnergyDrawData::clear_drwaparam1() {
  drwaparam1_ = 0;
  clear_has_drwaparam1();
}
inline ::google::protobuf::int32 SkillEnergyDrawData::drwaparam1() const {
  // @@protoc_insertion_point(field_get:pb.SkillEnergyDrawData.DrwaParam1)
  return drwaparam1_;
}
inline void SkillEnergyDrawData::set_drwaparam1(::google::protobuf::int32 value) {
  set_has_drwaparam1();
  drwaparam1_ = value;
  // @@protoc_insertion_point(field_set:pb.SkillEnergyDrawData.DrwaParam1)
}

// optional int32 DrawParam2 = 3;
inline bool SkillEnergyDrawData::has_drawparam2() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void SkillEnergyDrawData::set_has_drawparam2() {
  _has_bits_[0] |= 0x00000004u;
}
inline void SkillEnergyDrawData::clear_has_drawparam2() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void SkillEnergyDrawData::clear_drawparam2() {
  drawparam2_ = 0;
  clear_has_drawparam2();
}
inline ::google::protobuf::int32 SkillEnergyDrawData::drawparam2() const {
  // @@protoc_insertion_point(field_get:pb.SkillEnergyDrawData.DrawParam2)
  return drawparam2_;
}
inline void SkillEnergyDrawData::set_drawparam2(::google::protobuf::int32 value) {
  set_has_drawparam2();
  drawparam2_ = value;
  // @@protoc_insertion_point(field_set:pb.SkillEnergyDrawData.DrawParam2)
}

// optional int32 RecoverType = 4;
inline bool SkillEnergyDrawData::has_recovertype() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void SkillEnergyDrawData::set_has_recovertype() {
  _has_bits_[0] |= 0x00000008u;
}
inline void SkillEnergyDrawData::clear_has_recovertype() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void SkillEnergyDrawData::clear_recovertype() {
  recovertype_ = 0;
  clear_has_recovertype();
}
inline ::google::protobuf::int32 SkillEnergyDrawData::recovertype() const {
  // @@protoc_insertion_point(field_get:pb.SkillEnergyDrawData.RecoverType)
  return recovertype_;
}
inline void SkillEnergyDrawData::set_recovertype(::google::protobuf::int32 value) {
  set_has_recovertype();
  recovertype_ = value;
  // @@protoc_insertion_point(field_set:pb.SkillEnergyDrawData.RecoverType)
}

// optional int32 RecoverParam1 = 5;
inline bool SkillEnergyDrawData::has_recoverparam1() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void SkillEnergyDrawData::set_has_recoverparam1() {
  _has_bits_[0] |= 0x00000010u;
}
inline void SkillEnergyDrawData::clear_has_recoverparam1() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void SkillEnergyDrawData::clear_recoverparam1() {
  recoverparam1_ = 0;
  clear_has_recoverparam1();
}
inline ::google::protobuf::int32 SkillEnergyDrawData::recoverparam1() const {
  // @@protoc_insertion_point(field_get:pb.SkillEnergyDrawData.RecoverParam1)
  return recoverparam1_;
}
inline void SkillEnergyDrawData::set_recoverparam1(::google::protobuf::int32 value) {
  set_has_recoverparam1();
  recoverparam1_ = value;
  // @@protoc_insertion_point(field_set:pb.SkillEnergyDrawData.RecoverParam1)
}

// optional int32 RecoverParam2 = 6;
inline bool SkillEnergyDrawData::has_recoverparam2() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void SkillEnergyDrawData::set_has_recoverparam2() {
  _has_bits_[0] |= 0x00000020u;
}
inline void SkillEnergyDrawData::clear_has_recoverparam2() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void SkillEnergyDrawData::clear_recoverparam2() {
  recoverparam2_ = 0;
  clear_has_recoverparam2();
}
inline ::google::protobuf::int32 SkillEnergyDrawData::recoverparam2() const {
  // @@protoc_insertion_point(field_get:pb.SkillEnergyDrawData.RecoverParam2)
  return recoverparam2_;
}
inline void SkillEnergyDrawData::set_recoverparam2(::google::protobuf::int32 value) {
  set_has_recoverparam2();
  recoverparam2_ = value;
  // @@protoc_insertion_point(field_set:pb.SkillEnergyDrawData.RecoverParam2)
}

// -------------------------------------------------------------------

// SkillEnergyAssistData

// optional int32 AssistType = 1;
inline bool SkillEnergyAssistData::has_assisttype() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SkillEnergyAssistData::set_has_assisttype() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SkillEnergyAssistData::clear_has_assisttype() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SkillEnergyAssistData::clear_assisttype() {
  assisttype_ = 0;
  clear_has_assisttype();
}
inline ::google::protobuf::int32 SkillEnergyAssistData::assisttype() const {
  // @@protoc_insertion_point(field_get:pb.SkillEnergyAssistData.AssistType)
  return assisttype_;
}
inline void SkillEnergyAssistData::set_assisttype(::google::protobuf::int32 value) {
  set_has_assisttype();
  assisttype_ = value;
  // @@protoc_insertion_point(field_set:pb.SkillEnergyAssistData.AssistType)
}

// optional int32 AssistParam1 = 2;
inline bool SkillEnergyAssistData::has_assistparam1() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SkillEnergyAssistData::set_has_assistparam1() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SkillEnergyAssistData::clear_has_assistparam1() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SkillEnergyAssistData::clear_assistparam1() {
  assistparam1_ = 0;
  clear_has_assistparam1();
}
inline ::google::protobuf::int32 SkillEnergyAssistData::assistparam1() const {
  // @@protoc_insertion_point(field_get:pb.SkillEnergyAssistData.AssistParam1)
  return assistparam1_;
}
inline void SkillEnergyAssistData::set_assistparam1(::google::protobuf::int32 value) {
  set_has_assistparam1();
  assistparam1_ = value;
  // @@protoc_insertion_point(field_set:pb.SkillEnergyAssistData.AssistParam1)
}

// optional int32 AssistParam2 = 3;
inline bool SkillEnergyAssistData::has_assistparam2() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void SkillEnergyAssistData::set_has_assistparam2() {
  _has_bits_[0] |= 0x00000004u;
}
inline void SkillEnergyAssistData::clear_has_assistparam2() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void SkillEnergyAssistData::clear_assistparam2() {
  assistparam2_ = 0;
  clear_has_assistparam2();
}
inline ::google::protobuf::int32 SkillEnergyAssistData::assistparam2() const {
  // @@protoc_insertion_point(field_get:pb.SkillEnergyAssistData.AssistParam2)
  return assistparam2_;
}
inline void SkillEnergyAssistData::set_assistparam2(::google::protobuf::int32 value) {
  set_has_assistparam2();
  assistparam2_ = value;
  // @@protoc_insertion_point(field_set:pb.SkillEnergyAssistData.AssistParam2)
}

// optional int32 AddType = 4;
inline bool SkillEnergyAssistData::has_addtype() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void SkillEnergyAssistData::set_has_addtype() {
  _has_bits_[0] |= 0x00000008u;
}
inline void SkillEnergyAssistData::clear_has_addtype() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void SkillEnergyAssistData::clear_addtype() {
  addtype_ = 0;
  clear_has_addtype();
}
inline ::google::protobuf::int32 SkillEnergyAssistData::addtype() const {
  // @@protoc_insertion_point(field_get:pb.SkillEnergyAssistData.AddType)
  return addtype_;
}
inline void SkillEnergyAssistData::set_addtype(::google::protobuf::int32 value) {
  set_has_addtype();
  addtype_ = value;
  // @@protoc_insertion_point(field_set:pb.SkillEnergyAssistData.AddType)
}

// optional int32 AddParam1 = 5;
inline bool SkillEnergyAssistData::has_addparam1() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void SkillEnergyAssistData::set_has_addparam1() {
  _has_bits_[0] |= 0x00000010u;
}
inline void SkillEnergyAssistData::clear_has_addparam1() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void SkillEnergyAssistData::clear_addparam1() {
  addparam1_ = 0;
  clear_has_addparam1();
}
inline ::google::protobuf::int32 SkillEnergyAssistData::addparam1() const {
  // @@protoc_insertion_point(field_get:pb.SkillEnergyAssistData.AddParam1)
  return addparam1_;
}
inline void SkillEnergyAssistData::set_addparam1(::google::protobuf::int32 value) {
  set_has_addparam1();
  addparam1_ = value;
  // @@protoc_insertion_point(field_set:pb.SkillEnergyAssistData.AddParam1)
}

// optional int32 AddParam2 = 6;
inline bool SkillEnergyAssistData::has_addparam2() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void SkillEnergyAssistData::set_has_addparam2() {
  _has_bits_[0] |= 0x00000020u;
}
inline void SkillEnergyAssistData::clear_has_addparam2() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void SkillEnergyAssistData::clear_addparam2() {
  addparam2_ = 0;
  clear_has_addparam2();
}
inline ::google::protobuf::int32 SkillEnergyAssistData::addparam2() const {
  // @@protoc_insertion_point(field_get:pb.SkillEnergyAssistData.AddParam2)
  return addparam2_;
}
inline void SkillEnergyAssistData::set_addparam2(::google::protobuf::int32 value) {
  set_has_addparam2();
  addparam2_ = value;
  // @@protoc_insertion_point(field_set:pb.SkillEnergyAssistData.AddParam2)
}

// -------------------------------------------------------------------

// SkillLifeStealData

// optional int32 Type = 1;
inline bool SkillLifeStealData::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SkillLifeStealData::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SkillLifeStealData::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SkillLifeStealData::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline ::google::protobuf::int32 SkillLifeStealData::type() const {
  // @@protoc_insertion_point(field_get:pb.SkillLifeStealData.Type)
  return type_;
}
inline void SkillLifeStealData::set_type(::google::protobuf::int32 value) {
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:pb.SkillLifeStealData.Type)
}

// optional int32 Param1 = 2;
inline bool SkillLifeStealData::has_param1() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SkillLifeStealData::set_has_param1() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SkillLifeStealData::clear_has_param1() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SkillLifeStealData::clear_param1() {
  param1_ = 0;
  clear_has_param1();
}
inline ::google::protobuf::int32 SkillLifeStealData::param1() const {
  // @@protoc_insertion_point(field_get:pb.SkillLifeStealData.Param1)
  return param1_;
}
inline void SkillLifeStealData::set_param1(::google::protobuf::int32 value) {
  set_has_param1();
  param1_ = value;
  // @@protoc_insertion_point(field_set:pb.SkillLifeStealData.Param1)
}

// optional int32 Param2 = 3;
inline bool SkillLifeStealData::has_param2() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void SkillLifeStealData::set_has_param2() {
  _has_bits_[0] |= 0x00000004u;
}
inline void SkillLifeStealData::clear_has_param2() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void SkillLifeStealData::clear_param2() {
  param2_ = 0;
  clear_has_param2();
}
inline ::google::protobuf::int32 SkillLifeStealData::param2() const {
  // @@protoc_insertion_point(field_get:pb.SkillLifeStealData.Param2)
  return param2_;
}
inline void SkillLifeStealData::set_param2(::google::protobuf::int32 value) {
  set_has_param2();
  param2_ = value;
  // @@protoc_insertion_point(field_set:pb.SkillLifeStealData.Param2)
}

// optional bool UpperLimit = 4;
inline bool SkillLifeStealData::has_upperlimit() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void SkillLifeStealData::set_has_upperlimit() {
  _has_bits_[0] |= 0x00000008u;
}
inline void SkillLifeStealData::clear_has_upperlimit() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void SkillLifeStealData::clear_upperlimit() {
  upperlimit_ = false;
  clear_has_upperlimit();
}
inline bool SkillLifeStealData::upperlimit() const {
  // @@protoc_insertion_point(field_get:pb.SkillLifeStealData.UpperLimit)
  return upperlimit_;
}
inline void SkillLifeStealData::set_upperlimit(bool value) {
  set_has_upperlimit();
  upperlimit_ = value;
  // @@protoc_insertion_point(field_set:pb.SkillLifeStealData.UpperLimit)
}

// optional int32 UpperLimitParam = 5;
inline bool SkillLifeStealData::has_upperlimitparam() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void SkillLifeStealData::set_has_upperlimitparam() {
  _has_bits_[0] |= 0x00000010u;
}
inline void SkillLifeStealData::clear_has_upperlimitparam() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void SkillLifeStealData::clear_upperlimitparam() {
  upperlimitparam_ = 0;
  clear_has_upperlimitparam();
}
inline ::google::protobuf::int32 SkillLifeStealData::upperlimitparam() const {
  // @@protoc_insertion_point(field_get:pb.SkillLifeStealData.UpperLimitParam)
  return upperlimitparam_;
}
inline void SkillLifeStealData::set_upperlimitparam(::google::protobuf::int32 value) {
  set_has_upperlimitparam();
  upperlimitparam_ = value;
  // @@protoc_insertion_point(field_set:pb.SkillLifeStealData.UpperLimitParam)
}

// repeated int32 BuffSubTypeFilter = 6;
inline int SkillLifeStealData::buffsubtypefilter_size() const {
  return buffsubtypefilter_.size();
}
inline void SkillLifeStealData::clear_buffsubtypefilter() {
  buffsubtypefilter_.Clear();
}
inline ::google::protobuf::int32 SkillLifeStealData::buffsubtypefilter(int index) const {
  // @@protoc_insertion_point(field_get:pb.SkillLifeStealData.BuffSubTypeFilter)
  return buffsubtypefilter_.Get(index);
}
inline void SkillLifeStealData::set_buffsubtypefilter(int index, ::google::protobuf::int32 value) {
  buffsubtypefilter_.Set(index, value);
  // @@protoc_insertion_point(field_set:pb.SkillLifeStealData.BuffSubTypeFilter)
}
inline void SkillLifeStealData::add_buffsubtypefilter(::google::protobuf::int32 value) {
  buffsubtypefilter_.Add(value);
  // @@protoc_insertion_point(field_add:pb.SkillLifeStealData.BuffSubTypeFilter)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
SkillLifeStealData::buffsubtypefilter() const {
  // @@protoc_insertion_point(field_list:pb.SkillLifeStealData.BuffSubTypeFilter)
  return buffsubtypefilter_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
SkillLifeStealData::mutable_buffsubtypefilter() {
  // @@protoc_insertion_point(field_mutable_list:pb.SkillLifeStealData.BuffSubTypeFilter)
  return &buffsubtypefilter_;
}

// -------------------------------------------------------------------

// SkillSpeicalAdjust

// optional bool Enable = 1;
inline bool SkillSpeicalAdjust::has_enable() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SkillSpeicalAdjust::set_has_enable() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SkillSpeicalAdjust::clear_has_enable() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SkillSpeicalAdjust::clear_enable() {
  enable_ = false;
  clear_has_enable();
}
inline bool SkillSpeicalAdjust::enable() const {
  // @@protoc_insertion_point(field_get:pb.SkillSpeicalAdjust.Enable)
  return enable_;
}
inline void SkillSpeicalAdjust::set_enable(bool value) {
  set_has_enable();
  enable_ = value;
  // @@protoc_insertion_point(field_set:pb.SkillSpeicalAdjust.Enable)
}

// optional int32 EffectType = 2;
inline bool SkillSpeicalAdjust::has_effecttype() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SkillSpeicalAdjust::set_has_effecttype() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SkillSpeicalAdjust::clear_has_effecttype() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SkillSpeicalAdjust::clear_effecttype() {
  effecttype_ = 0;
  clear_has_effecttype();
}
inline ::google::protobuf::int32 SkillSpeicalAdjust::effecttype() const {
  // @@protoc_insertion_point(field_get:pb.SkillSpeicalAdjust.EffectType)
  return effecttype_;
}
inline void SkillSpeicalAdjust::set_effecttype(::google::protobuf::int32 value) {
  set_has_effecttype();
  effecttype_ = value;
  // @@protoc_insertion_point(field_set:pb.SkillSpeicalAdjust.EffectType)
}

// optional int32 TargetBuffId = 3;
inline bool SkillSpeicalAdjust::has_targetbuffid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void SkillSpeicalAdjust::set_has_targetbuffid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void SkillSpeicalAdjust::clear_has_targetbuffid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void SkillSpeicalAdjust::clear_targetbuffid() {
  targetbuffid_ = 0;
  clear_has_targetbuffid();
}
inline ::google::protobuf::int32 SkillSpeicalAdjust::targetbuffid() const {
  // @@protoc_insertion_point(field_get:pb.SkillSpeicalAdjust.TargetBuffId)
  return targetbuffid_;
}
inline void SkillSpeicalAdjust::set_targetbuffid(::google::protobuf::int32 value) {
  set_has_targetbuffid();
  targetbuffid_ = value;
  // @@protoc_insertion_point(field_set:pb.SkillSpeicalAdjust.TargetBuffId)
}

// optional int32 BuffType = 4;
inline bool SkillSpeicalAdjust::has_bufftype() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void SkillSpeicalAdjust::set_has_bufftype() {
  _has_bits_[0] |= 0x00000008u;
}
inline void SkillSpeicalAdjust::clear_has_bufftype() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void SkillSpeicalAdjust::clear_bufftype() {
  bufftype_ = 0;
  clear_has_bufftype();
}
inline ::google::protobuf::int32 SkillSpeicalAdjust::bufftype() const {
  // @@protoc_insertion_point(field_get:pb.SkillSpeicalAdjust.BuffType)
  return bufftype_;
}
inline void SkillSpeicalAdjust::set_bufftype(::google::protobuf::int32 value) {
  set_has_bufftype();
  bufftype_ = value;
  // @@protoc_insertion_point(field_set:pb.SkillSpeicalAdjust.BuffType)
}

// repeated int32 BuffParam = 5;
inline int SkillSpeicalAdjust::buffparam_size() const {
  return buffparam_.size();
}
inline void SkillSpeicalAdjust::clear_buffparam() {
  buffparam_.Clear();
}
inline ::google::protobuf::int32 SkillSpeicalAdjust::buffparam(int index) const {
  // @@protoc_insertion_point(field_get:pb.SkillSpeicalAdjust.BuffParam)
  return buffparam_.Get(index);
}
inline void SkillSpeicalAdjust::set_buffparam(int index, ::google::protobuf::int32 value) {
  buffparam_.Set(index, value);
  // @@protoc_insertion_point(field_set:pb.SkillSpeicalAdjust.BuffParam)
}
inline void SkillSpeicalAdjust::add_buffparam(::google::protobuf::int32 value) {
  buffparam_.Add(value);
  // @@protoc_insertion_point(field_add:pb.SkillSpeicalAdjust.BuffParam)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
SkillSpeicalAdjust::buffparam() const {
  // @@protoc_insertion_point(field_list:pb.SkillSpeicalAdjust.BuffParam)
  return buffparam_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
SkillSpeicalAdjust::mutable_buffparam() {
  // @@protoc_insertion_point(field_mutable_list:pb.SkillSpeicalAdjust.BuffParam)
  return &buffparam_;
}

// repeated int32 AdjustData = 6;
inline int SkillSpeicalAdjust::adjustdata_size() const {
  return adjustdata_.size();
}
inline void SkillSpeicalAdjust::clear_adjustdata() {
  adjustdata_.Clear();
}
inline ::google::protobuf::int32 SkillSpeicalAdjust::adjustdata(int index) const {
  // @@protoc_insertion_point(field_get:pb.SkillSpeicalAdjust.AdjustData)
  return adjustdata_.Get(index);
}
inline void SkillSpeicalAdjust::set_adjustdata(int index, ::google::protobuf::int32 value) {
  adjustdata_.Set(index, value);
  // @@protoc_insertion_point(field_set:pb.SkillSpeicalAdjust.AdjustData)
}
inline void SkillSpeicalAdjust::add_adjustdata(::google::protobuf::int32 value) {
  adjustdata_.Add(value);
  // @@protoc_insertion_point(field_add:pb.SkillSpeicalAdjust.AdjustData)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
SkillSpeicalAdjust::adjustdata() const {
  // @@protoc_insertion_point(field_list:pb.SkillSpeicalAdjust.AdjustData)
  return adjustdata_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
SkillSpeicalAdjust::mutable_adjustdata() {
  // @@protoc_insertion_point(field_mutable_list:pb.SkillSpeicalAdjust.AdjustData)
  return &adjustdata_;
}

// optional int32 AdjustTarget = 7;
inline bool SkillSpeicalAdjust::has_adjusttarget() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void SkillSpeicalAdjust::set_has_adjusttarget() {
  _has_bits_[0] |= 0x00000040u;
}
inline void SkillSpeicalAdjust::clear_has_adjusttarget() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void SkillSpeicalAdjust::clear_adjusttarget() {
  adjusttarget_ = 0;
  clear_has_adjusttarget();
}
inline ::google::protobuf::int32 SkillSpeicalAdjust::adjusttarget() const {
  // @@protoc_insertion_point(field_get:pb.SkillSpeicalAdjust.AdjustTarget)
  return adjusttarget_;
}
inline void SkillSpeicalAdjust::set_adjusttarget(::google::protobuf::int32 value) {
  set_has_adjusttarget();
  adjusttarget_ = value;
  // @@protoc_insertion_point(field_set:pb.SkillSpeicalAdjust.AdjustTarget)
}

// optional bool IsUseStateAdjust = 8;
inline bool SkillSpeicalAdjust::has_isusestateadjust() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void SkillSpeicalAdjust::set_has_isusestateadjust() {
  _has_bits_[0] |= 0x00000080u;
}
inline void SkillSpeicalAdjust::clear_has_isusestateadjust() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void SkillSpeicalAdjust::clear_isusestateadjust() {
  isusestateadjust_ = false;
  clear_has_isusestateadjust();
}
inline bool SkillSpeicalAdjust::isusestateadjust() const {
  // @@protoc_insertion_point(field_get:pb.SkillSpeicalAdjust.IsUseStateAdjust)
  return isusestateadjust_;
}
inline void SkillSpeicalAdjust::set_isusestateadjust(bool value) {
  set_has_isusestateadjust();
  isusestateadjust_ = value;
  // @@protoc_insertion_point(field_set:pb.SkillSpeicalAdjust.IsUseStateAdjust)
}

// -------------------------------------------------------------------

// SkillDamageData

// optional int32 DamageType = 1;
inline bool SkillDamageData::has_damagetype() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SkillDamageData::set_has_damagetype() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SkillDamageData::clear_has_damagetype() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SkillDamageData::clear_damagetype() {
  damagetype_ = 0;
  clear_has_damagetype();
}
inline ::google::protobuf::int32 SkillDamageData::damagetype() const {
  // @@protoc_insertion_point(field_get:pb.SkillDamageData.DamageType)
  return damagetype_;
}
inline void SkillDamageData::set_damagetype(::google::protobuf::int32 value) {
  set_has_damagetype();
  damagetype_ = value;
  // @@protoc_insertion_point(field_set:pb.SkillDamageData.DamageType)
}

// optional int32 TypeParam1 = 2;
inline bool SkillDamageData::has_typeparam1() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SkillDamageData::set_has_typeparam1() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SkillDamageData::clear_has_typeparam1() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SkillDamageData::clear_typeparam1() {
  typeparam1_ = 0;
  clear_has_typeparam1();
}
inline ::google::protobuf::int32 SkillDamageData::typeparam1() const {
  // @@protoc_insertion_point(field_get:pb.SkillDamageData.TypeParam1)
  return typeparam1_;
}
inline void SkillDamageData::set_typeparam1(::google::protobuf::int32 value) {
  set_has_typeparam1();
  typeparam1_ = value;
  // @@protoc_insertion_point(field_set:pb.SkillDamageData.TypeParam1)
}

// optional int32 TypeParam2 = 3;
inline bool SkillDamageData::has_typeparam2() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void SkillDamageData::set_has_typeparam2() {
  _has_bits_[0] |= 0x00000004u;
}
inline void SkillDamageData::clear_has_typeparam2() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void SkillDamageData::clear_typeparam2() {
  typeparam2_ = 0;
  clear_has_typeparam2();
}
inline ::google::protobuf::int32 SkillDamageData::typeparam2() const {
  // @@protoc_insertion_point(field_get:pb.SkillDamageData.TypeParam2)
  return typeparam2_;
}
inline void SkillDamageData::set_typeparam2(::google::protobuf::int32 value) {
  set_has_typeparam2();
  typeparam2_ = value;
  // @@protoc_insertion_point(field_set:pb.SkillDamageData.TypeParam2)
}

// optional int32 TypeParam3 = 4;
inline bool SkillDamageData::has_typeparam3() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void SkillDamageData::set_has_typeparam3() {
  _has_bits_[0] |= 0x00000008u;
}
inline void SkillDamageData::clear_has_typeparam3() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void SkillDamageData::clear_typeparam3() {
  typeparam3_ = 0;
  clear_has_typeparam3();
}
inline ::google::protobuf::int32 SkillDamageData::typeparam3() const {
  // @@protoc_insertion_point(field_get:pb.SkillDamageData.TypeParam3)
  return typeparam3_;
}
inline void SkillDamageData::set_typeparam3(::google::protobuf::int32 value) {
  set_has_typeparam3();
  typeparam3_ = value;
  // @@protoc_insertion_point(field_set:pb.SkillDamageData.TypeParam3)
}

// optional int32 CritType = 5;
inline bool SkillDamageData::has_crittype() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void SkillDamageData::set_has_crittype() {
  _has_bits_[0] |= 0x00000010u;
}
inline void SkillDamageData::clear_has_crittype() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void SkillDamageData::clear_crittype() {
  crittype_ = 0;
  clear_has_crittype();
}
inline ::google::protobuf::int32 SkillDamageData::crittype() const {
  // @@protoc_insertion_point(field_get:pb.SkillDamageData.CritType)
  return crittype_;
}
inline void SkillDamageData::set_crittype(::google::protobuf::int32 value) {
  set_has_crittype();
  crittype_ = value;
  // @@protoc_insertion_point(field_set:pb.SkillDamageData.CritType)
}

// optional int32 CritParam = 6;
inline bool SkillDamageData::has_critparam() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void SkillDamageData::set_has_critparam() {
  _has_bits_[0] |= 0x00000020u;
}
inline void SkillDamageData::clear_has_critparam() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void SkillDamageData::clear_critparam() {
  critparam_ = 0;
  clear_has_critparam();
}
inline ::google::protobuf::int32 SkillDamageData::critparam() const {
  // @@protoc_insertion_point(field_get:pb.SkillDamageData.CritParam)
  return critparam_;
}
inline void SkillDamageData::set_critparam(::google::protobuf::int32 value) {
  set_has_critparam();
  critparam_ = value;
  // @@protoc_insertion_point(field_set:pb.SkillDamageData.CritParam)
}

// optional int32 CritParam2 = 7;
inline bool SkillDamageData::has_critparam2() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void SkillDamageData::set_has_critparam2() {
  _has_bits_[0] |= 0x00000040u;
}
inline void SkillDamageData::clear_has_critparam2() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void SkillDamageData::clear_critparam2() {
  critparam2_ = 0;
  clear_has_critparam2();
}
inline ::google::protobuf::int32 SkillDamageData::critparam2() const {
  // @@protoc_insertion_point(field_get:pb.SkillDamageData.CritParam2)
  return critparam2_;
}
inline void SkillDamageData::set_critparam2(::google::protobuf::int32 value) {
  set_has_critparam2();
  critparam2_ = value;
  // @@protoc_insertion_point(field_set:pb.SkillDamageData.CritParam2)
}

// optional int32 ExtraArmourPiercing = 8;
inline bool SkillDamageData::has_extraarmourpiercing() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void SkillDamageData::set_has_extraarmourpiercing() {
  _has_bits_[0] |= 0x00000080u;
}
inline void SkillDamageData::clear_has_extraarmourpiercing() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void SkillDamageData::clear_extraarmourpiercing() {
  extraarmourpiercing_ = 0;
  clear_has_extraarmourpiercing();
}
inline ::google::protobuf::int32 SkillDamageData::extraarmourpiercing() const {
  // @@protoc_insertion_point(field_get:pb.SkillDamageData.ExtraArmourPiercing)
  return extraarmourpiercing_;
}
inline void SkillDamageData::set_extraarmourpiercing(::google::protobuf::int32 value) {
  set_has_extraarmourpiercing();
  extraarmourpiercing_ = value;
  // @@protoc_insertion_point(field_set:pb.SkillDamageData.ExtraArmourPiercing)
}

// optional int32 ExtraParam1 = 9;
inline bool SkillDamageData::has_extraparam1() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void SkillDamageData::set_has_extraparam1() {
  _has_bits_[0] |= 0x00000100u;
}
inline void SkillDamageData::clear_has_extraparam1() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void SkillDamageData::clear_extraparam1() {
  extraparam1_ = 0;
  clear_has_extraparam1();
}
inline ::google::protobuf::int32 SkillDamageData::extraparam1() const {
  // @@protoc_insertion_point(field_get:pb.SkillDamageData.ExtraParam1)
  return extraparam1_;
}
inline void SkillDamageData::set_extraparam1(::google::protobuf::int32 value) {
  set_has_extraparam1();
  extraparam1_ = value;
  // @@protoc_insertion_point(field_set:pb.SkillDamageData.ExtraParam1)
}

// optional int32 ExtraParam2 = 10;
inline bool SkillDamageData::has_extraparam2() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void SkillDamageData::set_has_extraparam2() {
  _has_bits_[0] |= 0x00000200u;
}
inline void SkillDamageData::clear_has_extraparam2() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void SkillDamageData::clear_extraparam2() {
  extraparam2_ = 0;
  clear_has_extraparam2();
}
inline ::google::protobuf::int32 SkillDamageData::extraparam2() const {
  // @@protoc_insertion_point(field_get:pb.SkillDamageData.ExtraParam2)
  return extraparam2_;
}
inline void SkillDamageData::set_extraparam2(::google::protobuf::int32 value) {
  set_has_extraparam2();
  extraparam2_ = value;
  // @@protoc_insertion_point(field_set:pb.SkillDamageData.ExtraParam2)
}

// optional bool IsIgnoreBlock = 14;
inline bool SkillDamageData::has_isignoreblock() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void SkillDamageData::set_has_isignoreblock() {
  _has_bits_[0] |= 0x00000400u;
}
inline void SkillDamageData::clear_has_isignoreblock() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void SkillDamageData::clear_isignoreblock() {
  isignoreblock_ = false;
  clear_has_isignoreblock();
}
inline bool SkillDamageData::isignoreblock() const {
  // @@protoc_insertion_point(field_get:pb.SkillDamageData.IsIgnoreBlock)
  return isignoreblock_;
}
inline void SkillDamageData::set_isignoreblock(bool value) {
  set_has_isignoreblock();
  isignoreblock_ = value;
  // @@protoc_insertion_point(field_set:pb.SkillDamageData.IsIgnoreBlock)
}

// optional bool AdjustByTargetCount = 15;
inline bool SkillDamageData::has_adjustbytargetcount() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void SkillDamageData::set_has_adjustbytargetcount() {
  _has_bits_[0] |= 0x00000800u;
}
inline void SkillDamageData::clear_has_adjustbytargetcount() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void SkillDamageData::clear_adjustbytargetcount() {
  adjustbytargetcount_ = false;
  clear_has_adjustbytargetcount();
}
inline bool SkillDamageData::adjustbytargetcount() const {
  // @@protoc_insertion_point(field_get:pb.SkillDamageData.AdjustByTargetCount)
  return adjustbytargetcount_;
}
inline void SkillDamageData::set_adjustbytargetcount(bool value) {
  set_has_adjustbytargetcount();
  adjustbytargetcount_ = value;
  // @@protoc_insertion_point(field_set:pb.SkillDamageData.AdjustByTargetCount)
}

// repeated int32 AdjustData = 16;
inline int SkillDamageData::adjustdata_size() const {
  return adjustdata_.size();
}
inline void SkillDamageData::clear_adjustdata() {
  adjustdata_.Clear();
}
inline ::google::protobuf::int32 SkillDamageData::adjustdata(int index) const {
  // @@protoc_insertion_point(field_get:pb.SkillDamageData.AdjustData)
  return adjustdata_.Get(index);
}
inline void SkillDamageData::set_adjustdata(int index, ::google::protobuf::int32 value) {
  adjustdata_.Set(index, value);
  // @@protoc_insertion_point(field_set:pb.SkillDamageData.AdjustData)
}
inline void SkillDamageData::add_adjustdata(::google::protobuf::int32 value) {
  adjustdata_.Add(value);
  // @@protoc_insertion_point(field_add:pb.SkillDamageData.AdjustData)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
SkillDamageData::adjustdata() const {
  // @@protoc_insertion_point(field_list:pb.SkillDamageData.AdjustData)
  return adjustdata_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
SkillDamageData::mutable_adjustdata() {
  // @@protoc_insertion_point(field_mutable_list:pb.SkillDamageData.AdjustData)
  return &adjustdata_;
}

// optional bool SkipDamage = 17;
inline bool SkillDamageData::has_skipdamage() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void SkillDamageData::set_has_skipdamage() {
  _has_bits_[0] |= 0x00002000u;
}
inline void SkillDamageData::clear_has_skipdamage() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void SkillDamageData::clear_skipdamage() {
  skipdamage_ = false;
  clear_has_skipdamage();
}
inline bool SkillDamageData::skipdamage() const {
  // @@protoc_insertion_point(field_get:pb.SkillDamageData.SkipDamage)
  return skipdamage_;
}
inline void SkillDamageData::set_skipdamage(bool value) {
  set_has_skipdamage();
  skipdamage_ = value;
  // @@protoc_insertion_point(field_set:pb.SkillDamageData.SkipDamage)
}

// optional bool UpperLimit = 18;
inline bool SkillDamageData::has_upperlimit() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void SkillDamageData::set_has_upperlimit() {
  _has_bits_[0] |= 0x00004000u;
}
inline void SkillDamageData::clear_has_upperlimit() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void SkillDamageData::clear_upperlimit() {
  upperlimit_ = false;
  clear_has_upperlimit();
}
inline bool SkillDamageData::upperlimit() const {
  // @@protoc_insertion_point(field_get:pb.SkillDamageData.UpperLimit)
  return upperlimit_;
}
inline void SkillDamageData::set_upperlimit(bool value) {
  set_has_upperlimit();
  upperlimit_ = value;
  // @@protoc_insertion_point(field_set:pb.SkillDamageData.UpperLimit)
}

// optional int32 UpperLimitParam = 19;
inline bool SkillDamageData::has_upperlimitparam() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void SkillDamageData::set_has_upperlimitparam() {
  _has_bits_[0] |= 0x00008000u;
}
inline void SkillDamageData::clear_has_upperlimitparam() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void SkillDamageData::clear_upperlimitparam() {
  upperlimitparam_ = 0;
  clear_has_upperlimitparam();
}
inline ::google::protobuf::int32 SkillDamageData::upperlimitparam() const {
  // @@protoc_insertion_point(field_get:pb.SkillDamageData.UpperLimitParam)
  return upperlimitparam_;
}
inline void SkillDamageData::set_upperlimitparam(::google::protobuf::int32 value) {
  set_has_upperlimitparam();
  upperlimitparam_ = value;
  // @@protoc_insertion_point(field_set:pb.SkillDamageData.UpperLimitParam)
}

// optional .pb.SkillSpeicalAdjust SpecialAdjust = 20;
inline bool SkillDamageData::has_specialadjust() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void SkillDamageData::set_has_specialadjust() {
  _has_bits_[0] |= 0x00010000u;
}
inline void SkillDamageData::clear_has_specialadjust() {
  _has_bits_[0] &= ~0x00010000u;
}
inline void SkillDamageData::clear_specialadjust() {
  if (specialadjust_ != NULL) specialadjust_->::pb::SkillSpeicalAdjust::Clear();
  clear_has_specialadjust();
}
inline const ::pb::SkillSpeicalAdjust& SkillDamageData::specialadjust() const {
  // @@protoc_insertion_point(field_get:pb.SkillDamageData.SpecialAdjust)
  return specialadjust_ != NULL ? *specialadjust_ : *default_instance_->specialadjust_;
}
inline ::pb::SkillSpeicalAdjust* SkillDamageData::mutable_specialadjust() {
  set_has_specialadjust();
  if (specialadjust_ == NULL) specialadjust_ = new ::pb::SkillSpeicalAdjust;
  // @@protoc_insertion_point(field_mutable:pb.SkillDamageData.SpecialAdjust)
  return specialadjust_;
}
inline ::pb::SkillSpeicalAdjust* SkillDamageData::release_specialadjust() {
  clear_has_specialadjust();
  ::pb::SkillSpeicalAdjust* temp = specialadjust_;
  specialadjust_ = NULL;
  return temp;
}
inline void SkillDamageData::set_allocated_specialadjust(::pb::SkillSpeicalAdjust* specialadjust) {
  delete specialadjust_;
  specialadjust_ = specialadjust;
  if (specialadjust) {
    set_has_specialadjust();
  } else {
    clear_has_specialadjust();
  }
  // @@protoc_insertion_point(field_set_allocated:pb.SkillDamageData.SpecialAdjust)
}

// optional bool IsUseStateAdjust = 21;
inline bool SkillDamageData::has_isusestateadjust() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
inline void SkillDamageData::set_has_isusestateadjust() {
  _has_bits_[0] |= 0x00020000u;
}
inline void SkillDamageData::clear_has_isusestateadjust() {
  _has_bits_[0] &= ~0x00020000u;
}
inline void SkillDamageData::clear_isusestateadjust() {
  isusestateadjust_ = false;
  clear_has_isusestateadjust();
}
inline bool SkillDamageData::isusestateadjust() const {
  // @@protoc_insertion_point(field_get:pb.SkillDamageData.IsUseStateAdjust)
  return isusestateadjust_;
}
inline void SkillDamageData::set_isusestateadjust(bool value) {
  set_has_isusestateadjust();
  isusestateadjust_ = value;
  // @@protoc_insertion_point(field_set:pb.SkillDamageData.IsUseStateAdjust)
}

// optional int32 StateAdjustType = 22;
inline bool SkillDamageData::has_stateadjusttype() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
inline void SkillDamageData::set_has_stateadjusttype() {
  _has_bits_[0] |= 0x00040000u;
}
inline void SkillDamageData::clear_has_stateadjusttype() {
  _has_bits_[0] &= ~0x00040000u;
}
inline void SkillDamageData::clear_stateadjusttype() {
  stateadjusttype_ = 0;
  clear_has_stateadjusttype();
}
inline ::google::protobuf::int32 SkillDamageData::stateadjusttype() const {
  // @@protoc_insertion_point(field_get:pb.SkillDamageData.StateAdjustType)
  return stateadjusttype_;
}
inline void SkillDamageData::set_stateadjusttype(::google::protobuf::int32 value) {
  set_has_stateadjusttype();
  stateadjusttype_ = value;
  // @@protoc_insertion_point(field_set:pb.SkillDamageData.StateAdjustType)
}

// optional int32 SkillTunnel = 23;
inline bool SkillDamageData::has_skilltunnel() const {
  return (_has_bits_[0] & 0x00080000u) != 0;
}
inline void SkillDamageData::set_has_skilltunnel() {
  _has_bits_[0] |= 0x00080000u;
}
inline void SkillDamageData::clear_has_skilltunnel() {
  _has_bits_[0] &= ~0x00080000u;
}
inline void SkillDamageData::clear_skilltunnel() {
  skilltunnel_ = 0;
  clear_has_skilltunnel();
}
inline ::google::protobuf::int32 SkillDamageData::skilltunnel() const {
  // @@protoc_insertion_point(field_get:pb.SkillDamageData.SkillTunnel)
  return skilltunnel_;
}
inline void SkillDamageData::set_skilltunnel(::google::protobuf::int32 value) {
  set_has_skilltunnel();
  skilltunnel_ = value;
  // @@protoc_insertion_point(field_set:pb.SkillDamageData.SkillTunnel)
}

// optional bool LowerLimit = 24;
inline bool SkillDamageData::has_lowerlimit() const {
  return (_has_bits_[0] & 0x00100000u) != 0;
}
inline void SkillDamageData::set_has_lowerlimit() {
  _has_bits_[0] |= 0x00100000u;
}
inline void SkillDamageData::clear_has_lowerlimit() {
  _has_bits_[0] &= ~0x00100000u;
}
inline void SkillDamageData::clear_lowerlimit() {
  lowerlimit_ = false;
  clear_has_lowerlimit();
}
inline bool SkillDamageData::lowerlimit() const {
  // @@protoc_insertion_point(field_get:pb.SkillDamageData.LowerLimit)
  return lowerlimit_;
}
inline void SkillDamageData::set_lowerlimit(bool value) {
  set_has_lowerlimit();
  lowerlimit_ = value;
  // @@protoc_insertion_point(field_set:pb.SkillDamageData.LowerLimit)
}

// optional int32 LowerLimitType = 25;
inline bool SkillDamageData::has_lowerlimittype() const {
  return (_has_bits_[0] & 0x00200000u) != 0;
}
inline void SkillDamageData::set_has_lowerlimittype() {
  _has_bits_[0] |= 0x00200000u;
}
inline void SkillDamageData::clear_has_lowerlimittype() {
  _has_bits_[0] &= ~0x00200000u;
}
inline void SkillDamageData::clear_lowerlimittype() {
  lowerlimittype_ = 0;
  clear_has_lowerlimittype();
}
inline ::google::protobuf::int32 SkillDamageData::lowerlimittype() const {
  // @@protoc_insertion_point(field_get:pb.SkillDamageData.LowerLimitType)
  return lowerlimittype_;
}
inline void SkillDamageData::set_lowerlimittype(::google::protobuf::int32 value) {
  set_has_lowerlimittype();
  lowerlimittype_ = value;
  // @@protoc_insertion_point(field_set:pb.SkillDamageData.LowerLimitType)
}

// optional int32 LowerLimitParam = 26;
inline bool SkillDamageData::has_lowerlimitparam() const {
  return (_has_bits_[0] & 0x00400000u) != 0;
}
inline void SkillDamageData::set_has_lowerlimitparam() {
  _has_bits_[0] |= 0x00400000u;
}
inline void SkillDamageData::clear_has_lowerlimitparam() {
  _has_bits_[0] &= ~0x00400000u;
}
inline void SkillDamageData::clear_lowerlimitparam() {
  lowerlimitparam_ = 0;
  clear_has_lowerlimitparam();
}
inline ::google::protobuf::int32 SkillDamageData::lowerlimitparam() const {
  // @@protoc_insertion_point(field_get:pb.SkillDamageData.LowerLimitParam)
  return lowerlimitparam_;
}
inline void SkillDamageData::set_lowerlimitparam(::google::protobuf::int32 value) {
  set_has_lowerlimitparam();
  lowerlimitparam_ = value;
  // @@protoc_insertion_point(field_set:pb.SkillDamageData.LowerLimitParam)
}

// optional bool IgnoreShield = 27;
inline bool SkillDamageData::has_ignoreshield() const {
  return (_has_bits_[0] & 0x00800000u) != 0;
}
inline void SkillDamageData::set_has_ignoreshield() {
  _has_bits_[0] |= 0x00800000u;
}
inline void SkillDamageData::clear_has_ignoreshield() {
  _has_bits_[0] &= ~0x00800000u;
}
inline void SkillDamageData::clear_ignoreshield() {
  ignoreshield_ = false;
  clear_has_ignoreshield();
}
inline bool SkillDamageData::ignoreshield() const {
  // @@protoc_insertion_point(field_get:pb.SkillDamageData.IgnoreShield)
  return ignoreshield_;
}
inline void SkillDamageData::set_ignoreshield(bool value) {
  set_has_ignoreshield();
  ignoreshield_ = value;
  // @@protoc_insertion_point(field_set:pb.SkillDamageData.IgnoreShield)
}

// optional bool IgnoreBeDamageRage = 28;
inline bool SkillDamageData::has_ignorebedamagerage() const {
  return (_has_bits_[0] & 0x01000000u) != 0;
}
inline void SkillDamageData::set_has_ignorebedamagerage() {
  _has_bits_[0] |= 0x01000000u;
}
inline void SkillDamageData::clear_has_ignorebedamagerage() {
  _has_bits_[0] &= ~0x01000000u;
}
inline void SkillDamageData::clear_ignorebedamagerage() {
  ignorebedamagerage_ = false;
  clear_has_ignorebedamagerage();
}
inline bool SkillDamageData::ignorebedamagerage() const {
  // @@protoc_insertion_point(field_get:pb.SkillDamageData.IgnoreBeDamageRage)
  return ignorebedamagerage_;
}
inline void SkillDamageData::set_ignorebedamagerage(bool value) {
  set_has_ignorebedamagerage();
  ignorebedamagerage_ = value;
  // @@protoc_insertion_point(field_set:pb.SkillDamageData.IgnoreBeDamageRage)
}

// optional int32 BuffId = 29;
inline bool SkillDamageData::has_buffid() const {
  return (_has_bits_[0] & 0x02000000u) != 0;
}
inline void SkillDamageData::set_has_buffid() {
  _has_bits_[0] |= 0x02000000u;
}
inline void SkillDamageData::clear_has_buffid() {
  _has_bits_[0] &= ~0x02000000u;
}
inline void SkillDamageData::clear_buffid() {
  buffid_ = 0;
  clear_has_buffid();
}
inline ::google::protobuf::int32 SkillDamageData::buffid() const {
  // @@protoc_insertion_point(field_get:pb.SkillDamageData.BuffId)
  return buffid_;
}
inline void SkillDamageData::set_buffid(::google::protobuf::int32 value) {
  set_has_buffid();
  buffid_ = value;
  // @@protoc_insertion_point(field_set:pb.SkillDamageData.BuffId)
}

// optional bool HealByEffNum = 30;
inline bool SkillDamageData::has_healbyeffnum() const {
  return (_has_bits_[0] & 0x04000000u) != 0;
}
inline void SkillDamageData::set_has_healbyeffnum() {
  _has_bits_[0] |= 0x04000000u;
}
inline void SkillDamageData::clear_has_healbyeffnum() {
  _has_bits_[0] &= ~0x04000000u;
}
inline void SkillDamageData::clear_healbyeffnum() {
  healbyeffnum_ = false;
  clear_has_healbyeffnum();
}
inline bool SkillDamageData::healbyeffnum() const {
  // @@protoc_insertion_point(field_get:pb.SkillDamageData.HealByEffNum)
  return healbyeffnum_;
}
inline void SkillDamageData::set_healbyeffnum(bool value) {
  set_has_healbyeffnum();
  healbyeffnum_ = value;
  // @@protoc_insertion_point(field_set:pb.SkillDamageData.HealByEffNum)
}

// optional int32 HealCoefficient = 31;
inline bool SkillDamageData::has_healcoefficient() const {
  return (_has_bits_[0] & 0x08000000u) != 0;
}
inline void SkillDamageData::set_has_healcoefficient() {
  _has_bits_[0] |= 0x08000000u;
}
inline void SkillDamageData::clear_has_healcoefficient() {
  _has_bits_[0] &= ~0x08000000u;
}
inline void SkillDamageData::clear_healcoefficient() {
  healcoefficient_ = 0;
  clear_has_healcoefficient();
}
inline ::google::protobuf::int32 SkillDamageData::healcoefficient() const {
  // @@protoc_insertion_point(field_get:pb.SkillDamageData.HealCoefficient)
  return healcoefficient_;
}
inline void SkillDamageData::set_healcoefficient(::google::protobuf::int32 value) {
  set_has_healcoefficient();
  healcoefficient_ = value;
  // @@protoc_insertion_point(field_set:pb.SkillDamageData.HealCoefficient)
}

// optional int32 BuffId2 = 32;
inline bool SkillDamageData::has_buffid2() const {
  return (_has_bits_[0] & 0x10000000u) != 0;
}
inline void SkillDamageData::set_has_buffid2() {
  _has_bits_[0] |= 0x10000000u;
}
inline void SkillDamageData::clear_has_buffid2() {
  _has_bits_[0] &= ~0x10000000u;
}
inline void SkillDamageData::clear_buffid2() {
  buffid2_ = 0;
  clear_has_buffid2();
}
inline ::google::protobuf::int32 SkillDamageData::buffid2() const {
  // @@protoc_insertion_point(field_get:pb.SkillDamageData.BuffId2)
  return buffid2_;
}
inline void SkillDamageData::set_buffid2(::google::protobuf::int32 value) {
  set_has_buffid2();
  buffid2_ = value;
  // @@protoc_insertion_point(field_set:pb.SkillDamageData.BuffId2)
}

// -------------------------------------------------------------------

// SkillHealData

// optional int32 HealType = 1;
inline bool SkillHealData::has_healtype() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SkillHealData::set_has_healtype() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SkillHealData::clear_has_healtype() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SkillHealData::clear_healtype() {
  healtype_ = 0;
  clear_has_healtype();
}
inline ::google::protobuf::int32 SkillHealData::healtype() const {
  // @@protoc_insertion_point(field_get:pb.SkillHealData.HealType)
  return healtype_;
}
inline void SkillHealData::set_healtype(::google::protobuf::int32 value) {
  set_has_healtype();
  healtype_ = value;
  // @@protoc_insertion_point(field_set:pb.SkillHealData.HealType)
}

// optional int32 TypeParam1 = 2;
inline bool SkillHealData::has_typeparam1() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SkillHealData::set_has_typeparam1() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SkillHealData::clear_has_typeparam1() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SkillHealData::clear_typeparam1() {
  typeparam1_ = 0;
  clear_has_typeparam1();
}
inline ::google::protobuf::int32 SkillHealData::typeparam1() const {
  // @@protoc_insertion_point(field_get:pb.SkillHealData.TypeParam1)
  return typeparam1_;
}
inline void SkillHealData::set_typeparam1(::google::protobuf::int32 value) {
  set_has_typeparam1();
  typeparam1_ = value;
  // @@protoc_insertion_point(field_set:pb.SkillHealData.TypeParam1)
}

// optional int32 TypeParam2 = 3;
inline bool SkillHealData::has_typeparam2() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void SkillHealData::set_has_typeparam2() {
  _has_bits_[0] |= 0x00000004u;
}
inline void SkillHealData::clear_has_typeparam2() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void SkillHealData::clear_typeparam2() {
  typeparam2_ = 0;
  clear_has_typeparam2();
}
inline ::google::protobuf::int32 SkillHealData::typeparam2() const {
  // @@protoc_insertion_point(field_get:pb.SkillHealData.TypeParam2)
  return typeparam2_;
}
inline void SkillHealData::set_typeparam2(::google::protobuf::int32 value) {
  set_has_typeparam2();
  typeparam2_ = value;
  // @@protoc_insertion_point(field_set:pb.SkillHealData.TypeParam2)
}

// optional int32 TypeParam3 = 4;
inline bool SkillHealData::has_typeparam3() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void SkillHealData::set_has_typeparam3() {
  _has_bits_[0] |= 0x00000008u;
}
inline void SkillHealData::clear_has_typeparam3() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void SkillHealData::clear_typeparam3() {
  typeparam3_ = 0;
  clear_has_typeparam3();
}
inline ::google::protobuf::int32 SkillHealData::typeparam3() const {
  // @@protoc_insertion_point(field_get:pb.SkillHealData.TypeParam3)
  return typeparam3_;
}
inline void SkillHealData::set_typeparam3(::google::protobuf::int32 value) {
  set_has_typeparam3();
  typeparam3_ = value;
  // @@protoc_insertion_point(field_set:pb.SkillHealData.TypeParam3)
}

// optional int32 CritType = 5;
inline bool SkillHealData::has_crittype() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void SkillHealData::set_has_crittype() {
  _has_bits_[0] |= 0x00000010u;
}
inline void SkillHealData::clear_has_crittype() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void SkillHealData::clear_crittype() {
  crittype_ = 0;
  clear_has_crittype();
}
inline ::google::protobuf::int32 SkillHealData::crittype() const {
  // @@protoc_insertion_point(field_get:pb.SkillHealData.CritType)
  return crittype_;
}
inline void SkillHealData::set_crittype(::google::protobuf::int32 value) {
  set_has_crittype();
  crittype_ = value;
  // @@protoc_insertion_point(field_set:pb.SkillHealData.CritType)
}

// optional int32 CritParam = 6;
inline bool SkillHealData::has_critparam() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void SkillHealData::set_has_critparam() {
  _has_bits_[0] |= 0x00000020u;
}
inline void SkillHealData::clear_has_critparam() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void SkillHealData::clear_critparam() {
  critparam_ = 0;
  clear_has_critparam();
}
inline ::google::protobuf::int32 SkillHealData::critparam() const {
  // @@protoc_insertion_point(field_get:pb.SkillHealData.CritParam)
  return critparam_;
}
inline void SkillHealData::set_critparam(::google::protobuf::int32 value) {
  set_has_critparam();
  critparam_ = value;
  // @@protoc_insertion_point(field_set:pb.SkillHealData.CritParam)
}

// optional int32 ExtraParam1 = 8;
inline bool SkillHealData::has_extraparam1() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void SkillHealData::set_has_extraparam1() {
  _has_bits_[0] |= 0x00000040u;
}
inline void SkillHealData::clear_has_extraparam1() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void SkillHealData::clear_extraparam1() {
  extraparam1_ = 0;
  clear_has_extraparam1();
}
inline ::google::protobuf::int32 SkillHealData::extraparam1() const {
  // @@protoc_insertion_point(field_get:pb.SkillHealData.ExtraParam1)
  return extraparam1_;
}
inline void SkillHealData::set_extraparam1(::google::protobuf::int32 value) {
  set_has_extraparam1();
  extraparam1_ = value;
  // @@protoc_insertion_point(field_set:pb.SkillHealData.ExtraParam1)
}

// optional int32 ExtraParam2 = 9;
inline bool SkillHealData::has_extraparam2() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void SkillHealData::set_has_extraparam2() {
  _has_bits_[0] |= 0x00000080u;
}
inline void SkillHealData::clear_has_extraparam2() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void SkillHealData::clear_extraparam2() {
  extraparam2_ = 0;
  clear_has_extraparam2();
}
inline ::google::protobuf::int32 SkillHealData::extraparam2() const {
  // @@protoc_insertion_point(field_get:pb.SkillHealData.ExtraParam2)
  return extraparam2_;
}
inline void SkillHealData::set_extraparam2(::google::protobuf::int32 value) {
  set_has_extraparam2();
  extraparam2_ = value;
  // @@protoc_insertion_point(field_set:pb.SkillHealData.ExtraParam2)
}

// optional bool IsIgnoreBlock = 13;
inline bool SkillHealData::has_isignoreblock() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void SkillHealData::set_has_isignoreblock() {
  _has_bits_[0] |= 0x00000100u;
}
inline void SkillHealData::clear_has_isignoreblock() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void SkillHealData::clear_isignoreblock() {
  isignoreblock_ = false;
  clear_has_isignoreblock();
}
inline bool SkillHealData::isignoreblock() const {
  // @@protoc_insertion_point(field_get:pb.SkillHealData.IsIgnoreBlock)
  return isignoreblock_;
}
inline void SkillHealData::set_isignoreblock(bool value) {
  set_has_isignoreblock();
  isignoreblock_ = value;
  // @@protoc_insertion_point(field_set:pb.SkillHealData.IsIgnoreBlock)
}

// optional bool AdjustByTargetCount = 14;
inline bool SkillHealData::has_adjustbytargetcount() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void SkillHealData::set_has_adjustbytargetcount() {
  _has_bits_[0] |= 0x00000200u;
}
inline void SkillHealData::clear_has_adjustbytargetcount() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void SkillHealData::clear_adjustbytargetcount() {
  adjustbytargetcount_ = false;
  clear_has_adjustbytargetcount();
}
inline bool SkillHealData::adjustbytargetcount() const {
  // @@protoc_insertion_point(field_get:pb.SkillHealData.AdjustByTargetCount)
  return adjustbytargetcount_;
}
inline void SkillHealData::set_adjustbytargetcount(bool value) {
  set_has_adjustbytargetcount();
  adjustbytargetcount_ = value;
  // @@protoc_insertion_point(field_set:pb.SkillHealData.AdjustByTargetCount)
}

// repeated int32 AdjustData = 15;
inline int SkillHealData::adjustdata_size() const {
  return adjustdata_.size();
}
inline void SkillHealData::clear_adjustdata() {
  adjustdata_.Clear();
}
inline ::google::protobuf::int32 SkillHealData::adjustdata(int index) const {
  // @@protoc_insertion_point(field_get:pb.SkillHealData.AdjustData)
  return adjustdata_.Get(index);
}
inline void SkillHealData::set_adjustdata(int index, ::google::protobuf::int32 value) {
  adjustdata_.Set(index, value);
  // @@protoc_insertion_point(field_set:pb.SkillHealData.AdjustData)
}
inline void SkillHealData::add_adjustdata(::google::protobuf::int32 value) {
  adjustdata_.Add(value);
  // @@protoc_insertion_point(field_add:pb.SkillHealData.AdjustData)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
SkillHealData::adjustdata() const {
  // @@protoc_insertion_point(field_list:pb.SkillHealData.AdjustData)
  return adjustdata_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
SkillHealData::mutable_adjustdata() {
  // @@protoc_insertion_point(field_mutable_list:pb.SkillHealData.AdjustData)
  return &adjustdata_;
}

// optional bool UpperLimit = 16;
inline bool SkillHealData::has_upperlimit() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void SkillHealData::set_has_upperlimit() {
  _has_bits_[0] |= 0x00000800u;
}
inline void SkillHealData::clear_has_upperlimit() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void SkillHealData::clear_upperlimit() {
  upperlimit_ = false;
  clear_has_upperlimit();
}
inline bool SkillHealData::upperlimit() const {
  // @@protoc_insertion_point(field_get:pb.SkillHealData.UpperLimit)
  return upperlimit_;
}
inline void SkillHealData::set_upperlimit(bool value) {
  set_has_upperlimit();
  upperlimit_ = value;
  // @@protoc_insertion_point(field_set:pb.SkillHealData.UpperLimit)
}

// optional int32 UpperLimitParam = 17;
inline bool SkillHealData::has_upperlimitparam() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void SkillHealData::set_has_upperlimitparam() {
  _has_bits_[0] |= 0x00001000u;
}
inline void SkillHealData::clear_has_upperlimitparam() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void SkillHealData::clear_upperlimitparam() {
  upperlimitparam_ = 0;
  clear_has_upperlimitparam();
}
inline ::google::protobuf::int32 SkillHealData::upperlimitparam() const {
  // @@protoc_insertion_point(field_get:pb.SkillHealData.UpperLimitParam)
  return upperlimitparam_;
}
inline void SkillHealData::set_upperlimitparam(::google::protobuf::int32 value) {
  set_has_upperlimitparam();
  upperlimitparam_ = value;
  // @@protoc_insertion_point(field_set:pb.SkillHealData.UpperLimitParam)
}

// optional .pb.SkillSpeicalAdjust SpecialAdjust = 18;
inline bool SkillHealData::has_specialadjust() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void SkillHealData::set_has_specialadjust() {
  _has_bits_[0] |= 0x00002000u;
}
inline void SkillHealData::clear_has_specialadjust() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void SkillHealData::clear_specialadjust() {
  if (specialadjust_ != NULL) specialadjust_->::pb::SkillSpeicalAdjust::Clear();
  clear_has_specialadjust();
}
inline const ::pb::SkillSpeicalAdjust& SkillHealData::specialadjust() const {
  // @@protoc_insertion_point(field_get:pb.SkillHealData.SpecialAdjust)
  return specialadjust_ != NULL ? *specialadjust_ : *default_instance_->specialadjust_;
}
inline ::pb::SkillSpeicalAdjust* SkillHealData::mutable_specialadjust() {
  set_has_specialadjust();
  if (specialadjust_ == NULL) specialadjust_ = new ::pb::SkillSpeicalAdjust;
  // @@protoc_insertion_point(field_mutable:pb.SkillHealData.SpecialAdjust)
  return specialadjust_;
}
inline ::pb::SkillSpeicalAdjust* SkillHealData::release_specialadjust() {
  clear_has_specialadjust();
  ::pb::SkillSpeicalAdjust* temp = specialadjust_;
  specialadjust_ = NULL;
  return temp;
}
inline void SkillHealData::set_allocated_specialadjust(::pb::SkillSpeicalAdjust* specialadjust) {
  delete specialadjust_;
  specialadjust_ = specialadjust;
  if (specialadjust) {
    set_has_specialadjust();
  } else {
    clear_has_specialadjust();
  }
  // @@protoc_insertion_point(field_set_allocated:pb.SkillHealData.SpecialAdjust)
}

// optional bool LowerLimit = 19;
inline bool SkillHealData::has_lowerlimit() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void SkillHealData::set_has_lowerlimit() {
  _has_bits_[0] |= 0x00004000u;
}
inline void SkillHealData::clear_has_lowerlimit() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void SkillHealData::clear_lowerlimit() {
  lowerlimit_ = false;
  clear_has_lowerlimit();
}
inline bool SkillHealData::lowerlimit() const {
  // @@protoc_insertion_point(field_get:pb.SkillHealData.LowerLimit)
  return lowerlimit_;
}
inline void SkillHealData::set_lowerlimit(bool value) {
  set_has_lowerlimit();
  lowerlimit_ = value;
  // @@protoc_insertion_point(field_set:pb.SkillHealData.LowerLimit)
}

// optional int32 LowerLimitType = 20;
inline bool SkillHealData::has_lowerlimittype() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void SkillHealData::set_has_lowerlimittype() {
  _has_bits_[0] |= 0x00008000u;
}
inline void SkillHealData::clear_has_lowerlimittype() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void SkillHealData::clear_lowerlimittype() {
  lowerlimittype_ = 0;
  clear_has_lowerlimittype();
}
inline ::google::protobuf::int32 SkillHealData::lowerlimittype() const {
  // @@protoc_insertion_point(field_get:pb.SkillHealData.LowerLimitType)
  return lowerlimittype_;
}
inline void SkillHealData::set_lowerlimittype(::google::protobuf::int32 value) {
  set_has_lowerlimittype();
  lowerlimittype_ = value;
  // @@protoc_insertion_point(field_set:pb.SkillHealData.LowerLimitType)
}

// optional int32 LowerLimitParam = 21;
inline bool SkillHealData::has_lowerlimitparam() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void SkillHealData::set_has_lowerlimitparam() {
  _has_bits_[0] |= 0x00010000u;
}
inline void SkillHealData::clear_has_lowerlimitparam() {
  _has_bits_[0] &= ~0x00010000u;
}
inline void SkillHealData::clear_lowerlimitparam() {
  lowerlimitparam_ = 0;
  clear_has_lowerlimitparam();
}
inline ::google::protobuf::int32 SkillHealData::lowerlimitparam() const {
  // @@protoc_insertion_point(field_get:pb.SkillHealData.LowerLimitParam)
  return lowerlimitparam_;
}
inline void SkillHealData::set_lowerlimitparam(::google::protobuf::int32 value) {
  set_has_lowerlimitparam();
  lowerlimitparam_ = value;
  // @@protoc_insertion_point(field_set:pb.SkillHealData.LowerLimitParam)
}

// optional int32 BuffId = 22;
inline bool SkillHealData::has_buffid() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
inline void SkillHealData::set_has_buffid() {
  _has_bits_[0] |= 0x00020000u;
}
inline void SkillHealData::clear_has_buffid() {
  _has_bits_[0] &= ~0x00020000u;
}
inline void SkillHealData::clear_buffid() {
  buffid_ = 0;
  clear_has_buffid();
}
inline ::google::protobuf::int32 SkillHealData::buffid() const {
  // @@protoc_insertion_point(field_get:pb.SkillHealData.BuffId)
  return buffid_;
}
inline void SkillHealData::set_buffid(::google::protobuf::int32 value) {
  set_has_buffid();
  buffid_ = value;
  // @@protoc_insertion_point(field_set:pb.SkillHealData.BuffId)
}

// optional int32 CritParam2 = 23;
inline bool SkillHealData::has_critparam2() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
inline void SkillHealData::set_has_critparam2() {
  _has_bits_[0] |= 0x00040000u;
}
inline void SkillHealData::clear_has_critparam2() {
  _has_bits_[0] &= ~0x00040000u;
}
inline void SkillHealData::clear_critparam2() {
  critparam2_ = 0;
  clear_has_critparam2();
}
inline ::google::protobuf::int32 SkillHealData::critparam2() const {
  // @@protoc_insertion_point(field_get:pb.SkillHealData.CritParam2)
  return critparam2_;
}
inline void SkillHealData::set_critparam2(::google::protobuf::int32 value) {
  set_has_critparam2();
  critparam2_ = value;
  // @@protoc_insertion_point(field_set:pb.SkillHealData.CritParam2)
}

// -------------------------------------------------------------------

// SkillSummonObstacleData

// optional int32 ShapeType = 1;
inline bool SkillSummonObstacleData::has_shapetype() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SkillSummonObstacleData::set_has_shapetype() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SkillSummonObstacleData::clear_has_shapetype() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SkillSummonObstacleData::clear_shapetype() {
  shapetype_ = 0;
  clear_has_shapetype();
}
inline ::google::protobuf::int32 SkillSummonObstacleData::shapetype() const {
  // @@protoc_insertion_point(field_get:pb.SkillSummonObstacleData.ShapeType)
  return shapetype_;
}
inline void SkillSummonObstacleData::set_shapetype(::google::protobuf::int32 value) {
  set_has_shapetype();
  shapetype_ = value;
  // @@protoc_insertion_point(field_set:pb.SkillSummonObstacleData.ShapeType)
}

// optional int32 ShapeParam1 = 2;
inline bool SkillSummonObstacleData::has_shapeparam1() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SkillSummonObstacleData::set_has_shapeparam1() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SkillSummonObstacleData::clear_has_shapeparam1() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SkillSummonObstacleData::clear_shapeparam1() {
  shapeparam1_ = 0;
  clear_has_shapeparam1();
}
inline ::google::protobuf::int32 SkillSummonObstacleData::shapeparam1() const {
  // @@protoc_insertion_point(field_get:pb.SkillSummonObstacleData.ShapeParam1)
  return shapeparam1_;
}
inline void SkillSummonObstacleData::set_shapeparam1(::google::protobuf::int32 value) {
  set_has_shapeparam1();
  shapeparam1_ = value;
  // @@protoc_insertion_point(field_set:pb.SkillSummonObstacleData.ShapeParam1)
}

// optional int32 ShapeParam2 = 3;
inline bool SkillSummonObstacleData::has_shapeparam2() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void SkillSummonObstacleData::set_has_shapeparam2() {
  _has_bits_[0] |= 0x00000004u;
}
inline void SkillSummonObstacleData::clear_has_shapeparam2() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void SkillSummonObstacleData::clear_shapeparam2() {
  shapeparam2_ = 0;
  clear_has_shapeparam2();
}
inline ::google::protobuf::int32 SkillSummonObstacleData::shapeparam2() const {
  // @@protoc_insertion_point(field_get:pb.SkillSummonObstacleData.ShapeParam2)
  return shapeparam2_;
}
inline void SkillSummonObstacleData::set_shapeparam2(::google::protobuf::int32 value) {
  set_has_shapeparam2();
  shapeparam2_ = value;
  // @@protoc_insertion_point(field_set:pb.SkillSummonObstacleData.ShapeParam2)
}

// optional int32 PositionType = 4;
inline bool SkillSummonObstacleData::has_positiontype() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void SkillSummonObstacleData::set_has_positiontype() {
  _has_bits_[0] |= 0x00000008u;
}
inline void SkillSummonObstacleData::clear_has_positiontype() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void SkillSummonObstacleData::clear_positiontype() {
  positiontype_ = 0;
  clear_has_positiontype();
}
inline ::google::protobuf::int32 SkillSummonObstacleData::positiontype() const {
  // @@protoc_insertion_point(field_get:pb.SkillSummonObstacleData.PositionType)
  return positiontype_;
}
inline void SkillSummonObstacleData::set_positiontype(::google::protobuf::int32 value) {
  set_has_positiontype();
  positiontype_ = value;
  // @@protoc_insertion_point(field_set:pb.SkillSummonObstacleData.PositionType)
}

// optional int32 Distance = 5;
inline bool SkillSummonObstacleData::has_distance() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void SkillSummonObstacleData::set_has_distance() {
  _has_bits_[0] |= 0x00000010u;
}
inline void SkillSummonObstacleData::clear_has_distance() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void SkillSummonObstacleData::clear_distance() {
  distance_ = 0;
  clear_has_distance();
}
inline ::google::protobuf::int32 SkillSummonObstacleData::distance() const {
  // @@protoc_insertion_point(field_get:pb.SkillSummonObstacleData.Distance)
  return distance_;
}
inline void SkillSummonObstacleData::set_distance(::google::protobuf::int32 value) {
  set_has_distance();
  distance_ = value;
  // @@protoc_insertion_point(field_set:pb.SkillSummonObstacleData.Distance)
}

// optional int32 BuffId = 6;
inline bool SkillSummonObstacleData::has_buffid() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void SkillSummonObstacleData::set_has_buffid() {
  _has_bits_[0] |= 0x00000020u;
}
inline void SkillSummonObstacleData::clear_has_buffid() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void SkillSummonObstacleData::clear_buffid() {
  buffid_ = 0;
  clear_has_buffid();
}
inline ::google::protobuf::int32 SkillSummonObstacleData::buffid() const {
  // @@protoc_insertion_point(field_get:pb.SkillSummonObstacleData.BuffId)
  return buffid_;
}
inline void SkillSummonObstacleData::set_buffid(::google::protobuf::int32 value) {
  set_has_buffid();
  buffid_ = value;
  // @@protoc_insertion_point(field_set:pb.SkillSummonObstacleData.BuffId)
}

// optional int32 LastTime = 7;
inline bool SkillSummonObstacleData::has_lasttime() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void SkillSummonObstacleData::set_has_lasttime() {
  _has_bits_[0] |= 0x00000040u;
}
inline void SkillSummonObstacleData::clear_has_lasttime() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void SkillSummonObstacleData::clear_lasttime() {
  lasttime_ = 0;
  clear_has_lasttime();
}
inline ::google::protobuf::int32 SkillSummonObstacleData::lasttime() const {
  // @@protoc_insertion_point(field_get:pb.SkillSummonObstacleData.LastTime)
  return lasttime_;
}
inline void SkillSummonObstacleData::set_lasttime(::google::protobuf::int32 value) {
  set_has_lasttime();
  lasttime_ = value;
  // @@protoc_insertion_point(field_set:pb.SkillSummonObstacleData.LastTime)
}

// optional int32 TargetType = 9;
inline bool SkillSummonObstacleData::has_targettype() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void SkillSummonObstacleData::set_has_targettype() {
  _has_bits_[0] |= 0x00000080u;
}
inline void SkillSummonObstacleData::clear_has_targettype() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void SkillSummonObstacleData::clear_targettype() {
  targettype_ = 0;
  clear_has_targettype();
}
inline ::google::protobuf::int32 SkillSummonObstacleData::targettype() const {
  // @@protoc_insertion_point(field_get:pb.SkillSummonObstacleData.TargetType)
  return targettype_;
}
inline void SkillSummonObstacleData::set_targettype(::google::protobuf::int32 value) {
  set_has_targettype();
  targettype_ = value;
  // @@protoc_insertion_point(field_set:pb.SkillSummonObstacleData.TargetType)
}

// -------------------------------------------------------------------

// SkillSummonData

// repeated int32 ID = 1;
inline int SkillSummonData::id_size() const {
  return id_.size();
}
inline void SkillSummonData::clear_id() {
  id_.Clear();
}
inline ::google::protobuf::int32 SkillSummonData::id(int index) const {
  // @@protoc_insertion_point(field_get:pb.SkillSummonData.ID)
  return id_.Get(index);
}
inline void SkillSummonData::set_id(int index, ::google::protobuf::int32 value) {
  id_.Set(index, value);
  // @@protoc_insertion_point(field_set:pb.SkillSummonData.ID)
}
inline void SkillSummonData::add_id(::google::protobuf::int32 value) {
  id_.Add(value);
  // @@protoc_insertion_point(field_add:pb.SkillSummonData.ID)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
SkillSummonData::id() const {
  // @@protoc_insertion_point(field_list:pb.SkillSummonData.ID)
  return id_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
SkillSummonData::mutable_id() {
  // @@protoc_insertion_point(field_mutable_list:pb.SkillSummonData.ID)
  return &id_;
}

// repeated int32 Num = 2;
inline int SkillSummonData::num_size() const {
  return num_.size();
}
inline void SkillSummonData::clear_num() {
  num_.Clear();
}
inline ::google::protobuf::int32 SkillSummonData::num(int index) const {
  // @@protoc_insertion_point(field_get:pb.SkillSummonData.Num)
  return num_.Get(index);
}
inline void SkillSummonData::set_num(int index, ::google::protobuf::int32 value) {
  num_.Set(index, value);
  // @@protoc_insertion_point(field_set:pb.SkillSummonData.Num)
}
inline void SkillSummonData::add_num(::google::protobuf::int32 value) {
  num_.Add(value);
  // @@protoc_insertion_point(field_add:pb.SkillSummonData.Num)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
SkillSummonData::num() const {
  // @@protoc_insertion_point(field_list:pb.SkillSummonData.Num)
  return num_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
SkillSummonData::mutable_num() {
  // @@protoc_insertion_point(field_mutable_list:pb.SkillSummonData.Num)
  return &num_;
}

// optional int32 Positon = 3;
inline bool SkillSummonData::has_positon() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void SkillSummonData::set_has_positon() {
  _has_bits_[0] |= 0x00000004u;
}
inline void SkillSummonData::clear_has_positon() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void SkillSummonData::clear_positon() {
  positon_ = 0;
  clear_has_positon();
}
inline ::google::protobuf::int32 SkillSummonData::positon() const {
  // @@protoc_insertion_point(field_get:pb.SkillSummonData.Positon)
  return positon_;
}
inline void SkillSummonData::set_positon(::google::protobuf::int32 value) {
  set_has_positon();
  positon_ = value;
  // @@protoc_insertion_point(field_set:pb.SkillSummonData.Positon)
}

// optional int32 Formation = 4;
inline bool SkillSummonData::has_formation() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void SkillSummonData::set_has_formation() {
  _has_bits_[0] |= 0x00000008u;
}
inline void SkillSummonData::clear_has_formation() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void SkillSummonData::clear_formation() {
  formation_ = 0;
  clear_has_formation();
}
inline ::google::protobuf::int32 SkillSummonData::formation() const {
  // @@protoc_insertion_point(field_get:pb.SkillSummonData.Formation)
  return formation_;
}
inline void SkillSummonData::set_formation(::google::protobuf::int32 value) {
  set_has_formation();
  formation_ = value;
  // @@protoc_insertion_point(field_set:pb.SkillSummonData.Formation)
}

// optional int32 MinDistance = 5;
inline bool SkillSummonData::has_mindistance() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void SkillSummonData::set_has_mindistance() {
  _has_bits_[0] |= 0x00000010u;
}
inline void SkillSummonData::clear_has_mindistance() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void SkillSummonData::clear_mindistance() {
  mindistance_ = 0;
  clear_has_mindistance();
}
inline ::google::protobuf::int32 SkillSummonData::mindistance() const {
  // @@protoc_insertion_point(field_get:pb.SkillSummonData.MinDistance)
  return mindistance_;
}
inline void SkillSummonData::set_mindistance(::google::protobuf::int32 value) {
  set_has_mindistance();
  mindistance_ = value;
  // @@protoc_insertion_point(field_set:pb.SkillSummonData.MinDistance)
}

// optional string BornEffect = 6;
inline bool SkillSummonData::has_borneffect() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void SkillSummonData::set_has_borneffect() {
  _has_bits_[0] |= 0x00000020u;
}
inline void SkillSummonData::clear_has_borneffect() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void SkillSummonData::clear_borneffect() {
  if (borneffect_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    borneffect_->clear();
  }
  clear_has_borneffect();
}
inline const ::std::string& SkillSummonData::borneffect() const {
  // @@protoc_insertion_point(field_get:pb.SkillSummonData.BornEffect)
  return *borneffect_;
}
inline void SkillSummonData::set_borneffect(const ::std::string& value) {
  set_has_borneffect();
  if (borneffect_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    borneffect_ = new ::std::string;
  }
  borneffect_->assign(value);
  // @@protoc_insertion_point(field_set:pb.SkillSummonData.BornEffect)
}
inline void SkillSummonData::set_borneffect(const char* value) {
  set_has_borneffect();
  if (borneffect_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    borneffect_ = new ::std::string;
  }
  borneffect_->assign(value);
  // @@protoc_insertion_point(field_set_char:pb.SkillSummonData.BornEffect)
}
inline void SkillSummonData::set_borneffect(const char* value, size_t size) {
  set_has_borneffect();
  if (borneffect_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    borneffect_ = new ::std::string;
  }
  borneffect_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:pb.SkillSummonData.BornEffect)
}
inline ::std::string* SkillSummonData::mutable_borneffect() {
  set_has_borneffect();
  if (borneffect_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    borneffect_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:pb.SkillSummonData.BornEffect)
  return borneffect_;
}
inline ::std::string* SkillSummonData::release_borneffect() {
  clear_has_borneffect();
  if (borneffect_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = borneffect_;
    borneffect_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void SkillSummonData::set_allocated_borneffect(::std::string* borneffect) {
  if (borneffect_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete borneffect_;
  }
  if (borneffect) {
    set_has_borneffect();
    borneffect_ = borneffect;
  } else {
    clear_has_borneffect();
    borneffect_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:pb.SkillSummonData.BornEffect)
}

// optional string BornSound = 7;
inline bool SkillSummonData::has_bornsound() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void SkillSummonData::set_has_bornsound() {
  _has_bits_[0] |= 0x00000040u;
}
inline void SkillSummonData::clear_has_bornsound() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void SkillSummonData::clear_bornsound() {
  if (bornsound_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    bornsound_->clear();
  }
  clear_has_bornsound();
}
inline const ::std::string& SkillSummonData::bornsound() const {
  // @@protoc_insertion_point(field_get:pb.SkillSummonData.BornSound)
  return *bornsound_;
}
inline void SkillSummonData::set_bornsound(const ::std::string& value) {
  set_has_bornsound();
  if (bornsound_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    bornsound_ = new ::std::string;
  }
  bornsound_->assign(value);
  // @@protoc_insertion_point(field_set:pb.SkillSummonData.BornSound)
}
inline void SkillSummonData::set_bornsound(const char* value) {
  set_has_bornsound();
  if (bornsound_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    bornsound_ = new ::std::string;
  }
  bornsound_->assign(value);
  // @@protoc_insertion_point(field_set_char:pb.SkillSummonData.BornSound)
}
inline void SkillSummonData::set_bornsound(const char* value, size_t size) {
  set_has_bornsound();
  if (bornsound_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    bornsound_ = new ::std::string;
  }
  bornsound_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:pb.SkillSummonData.BornSound)
}
inline ::std::string* SkillSummonData::mutable_bornsound() {
  set_has_bornsound();
  if (bornsound_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    bornsound_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:pb.SkillSummonData.BornSound)
  return bornsound_;
}
inline ::std::string* SkillSummonData::release_bornsound() {
  clear_has_bornsound();
  if (bornsound_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = bornsound_;
    bornsound_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void SkillSummonData::set_allocated_bornsound(::std::string* bornsound) {
  if (bornsound_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete bornsound_;
  }
  if (bornsound) {
    set_has_bornsound();
    bornsound_ = bornsound;
  } else {
    clear_has_bornsound();
    bornsound_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:pb.SkillSummonData.BornSound)
}

// optional int32 LevelType = 8;
inline bool SkillSummonData::has_leveltype() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void SkillSummonData::set_has_leveltype() {
  _has_bits_[0] |= 0x00000080u;
}
inline void SkillSummonData::clear_has_leveltype() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void SkillSummonData::clear_leveltype() {
  leveltype_ = 0;
  clear_has_leveltype();
}
inline ::google::protobuf::int32 SkillSummonData::leveltype() const {
  // @@protoc_insertion_point(field_get:pb.SkillSummonData.LevelType)
  return leveltype_;
}
inline void SkillSummonData::set_leveltype(::google::protobuf::int32 value) {
  set_has_leveltype();
  leveltype_ = value;
  // @@protoc_insertion_point(field_set:pb.SkillSummonData.LevelType)
}

// optional int32 LevelParam = 9;
inline bool SkillSummonData::has_levelparam() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void SkillSummonData::set_has_levelparam() {
  _has_bits_[0] |= 0x00000100u;
}
inline void SkillSummonData::clear_has_levelparam() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void SkillSummonData::clear_levelparam() {
  levelparam_ = 0;
  clear_has_levelparam();
}
inline ::google::protobuf::int32 SkillSummonData::levelparam() const {
  // @@protoc_insertion_point(field_get:pb.SkillSummonData.LevelParam)
  return levelparam_;
}
inline void SkillSummonData::set_levelparam(::google::protobuf::int32 value) {
  set_has_levelparam();
  levelparam_ = value;
  // @@protoc_insertion_point(field_set:pb.SkillSummonData.LevelParam)
}

// optional int32 LastTimeType = 10;
inline bool SkillSummonData::has_lasttimetype() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void SkillSummonData::set_has_lasttimetype() {
  _has_bits_[0] |= 0x00000200u;
}
inline void SkillSummonData::clear_has_lasttimetype() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void SkillSummonData::clear_lasttimetype() {
  lasttimetype_ = 0;
  clear_has_lasttimetype();
}
inline ::google::protobuf::int32 SkillSummonData::lasttimetype() const {
  // @@protoc_insertion_point(field_get:pb.SkillSummonData.LastTimeType)
  return lasttimetype_;
}
inline void SkillSummonData::set_lasttimetype(::google::protobuf::int32 value) {
  set_has_lasttimetype();
  lasttimetype_ = value;
  // @@protoc_insertion_point(field_set:pb.SkillSummonData.LastTimeType)
}

// optional int32 LastTimeParam = 11;
inline bool SkillSummonData::has_lasttimeparam() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void SkillSummonData::set_has_lasttimeparam() {
  _has_bits_[0] |= 0x00000400u;
}
inline void SkillSummonData::clear_has_lasttimeparam() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void SkillSummonData::clear_lasttimeparam() {
  lasttimeparam_ = 0;
  clear_has_lasttimeparam();
}
inline ::google::protobuf::int32 SkillSummonData::lasttimeparam() const {
  // @@protoc_insertion_point(field_get:pb.SkillSummonData.LastTimeParam)
  return lasttimeparam_;
}
inline void SkillSummonData::set_lasttimeparam(::google::protobuf::int32 value) {
  set_has_lasttimeparam();
  lasttimeparam_ = value;
  // @@protoc_insertion_point(field_set:pb.SkillSummonData.LastTimeParam)
}

// optional bool CanOverScreen = 12;
inline bool SkillSummonData::has_canoverscreen() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void SkillSummonData::set_has_canoverscreen() {
  _has_bits_[0] |= 0x00000800u;
}
inline void SkillSummonData::clear_has_canoverscreen() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void SkillSummonData::clear_canoverscreen() {
  canoverscreen_ = false;
  clear_has_canoverscreen();
}
inline bool SkillSummonData::canoverscreen() const {
  // @@protoc_insertion_point(field_get:pb.SkillSummonData.CanOverScreen)
  return canoverscreen_;
}
inline void SkillSummonData::set_canoverscreen(bool value) {
  set_has_canoverscreen();
  canoverscreen_ = value;
  // @@protoc_insertion_point(field_set:pb.SkillSummonData.CanOverScreen)
}

// optional int32 MaxSameIDUnit = 13;
inline bool SkillSummonData::has_maxsameidunit() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void SkillSummonData::set_has_maxsameidunit() {
  _has_bits_[0] |= 0x00001000u;
}
inline void SkillSummonData::clear_has_maxsameidunit() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void SkillSummonData::clear_maxsameidunit() {
  maxsameidunit_ = 0;
  clear_has_maxsameidunit();
}
inline ::google::protobuf::int32 SkillSummonData::maxsameidunit() const {
  // @@protoc_insertion_point(field_get:pb.SkillSummonData.MaxSameIDUnit)
  return maxsameidunit_;
}
inline void SkillSummonData::set_maxsameidunit(::google::protobuf::int32 value) {
  set_has_maxsameidunit();
  maxsameidunit_ = value;
  // @@protoc_insertion_point(field_set:pb.SkillSummonData.MaxSameIDUnit)
}

// optional bool DeleteSameIDUnit = 14;
inline bool SkillSummonData::has_deletesameidunit() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void SkillSummonData::set_has_deletesameidunit() {
  _has_bits_[0] |= 0x00002000u;
}
inline void SkillSummonData::clear_has_deletesameidunit() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void SkillSummonData::clear_deletesameidunit() {
  deletesameidunit_ = false;
  clear_has_deletesameidunit();
}
inline bool SkillSummonData::deletesameidunit() const {
  // @@protoc_insertion_point(field_get:pb.SkillSummonData.DeleteSameIDUnit)
  return deletesameidunit_;
}
inline void SkillSummonData::set_deletesameidunit(bool value) {
  set_has_deletesameidunit();
  deletesameidunit_ = value;
  // @@protoc_insertion_point(field_set:pb.SkillSummonData.DeleteSameIDUnit)
}

// repeated int32 AddBuffID = 15;
inline int SkillSummonData::addbuffid_size() const {
  return addbuffid_.size();
}
inline void SkillSummonData::clear_addbuffid() {
  addbuffid_.Clear();
}
inline ::google::protobuf::int32 SkillSummonData::addbuffid(int index) const {
  // @@protoc_insertion_point(field_get:pb.SkillSummonData.AddBuffID)
  return addbuffid_.Get(index);
}
inline void SkillSummonData::set_addbuffid(int index, ::google::protobuf::int32 value) {
  addbuffid_.Set(index, value);
  // @@protoc_insertion_point(field_set:pb.SkillSummonData.AddBuffID)
}
inline void SkillSummonData::add_addbuffid(::google::protobuf::int32 value) {
  addbuffid_.Add(value);
  // @@protoc_insertion_point(field_add:pb.SkillSummonData.AddBuffID)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
SkillSummonData::addbuffid() const {
  // @@protoc_insertion_point(field_list:pb.SkillSummonData.AddBuffID)
  return addbuffid_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
SkillSummonData::mutable_addbuffid() {
  // @@protoc_insertion_point(field_mutable_list:pb.SkillSummonData.AddBuffID)
  return &addbuffid_;
}

// optional bool InheritAttribute = 16;
inline bool SkillSummonData::has_inheritattribute() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void SkillSummonData::set_has_inheritattribute() {
  _has_bits_[0] |= 0x00008000u;
}
inline void SkillSummonData::clear_has_inheritattribute() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void SkillSummonData::clear_inheritattribute() {
  inheritattribute_ = false;
  clear_has_inheritattribute();
}
inline bool SkillSummonData::inheritattribute() const {
  // @@protoc_insertion_point(field_get:pb.SkillSummonData.InheritAttribute)
  return inheritattribute_;
}
inline void SkillSummonData::set_inheritattribute(bool value) {
  set_has_inheritattribute();
  inheritattribute_ = value;
  // @@protoc_insertion_point(field_set:pb.SkillSummonData.InheritAttribute)
}

// optional int32 InheritPercentage = 17;
inline bool SkillSummonData::has_inheritpercentage() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void SkillSummonData::set_has_inheritpercentage() {
  _has_bits_[0] |= 0x00010000u;
}
inline void SkillSummonData::clear_has_inheritpercentage() {
  _has_bits_[0] &= ~0x00010000u;
}
inline void SkillSummonData::clear_inheritpercentage() {
  inheritpercentage_ = 0;
  clear_has_inheritpercentage();
}
inline ::google::protobuf::int32 SkillSummonData::inheritpercentage() const {
  // @@protoc_insertion_point(field_get:pb.SkillSummonData.InheritPercentage)
  return inheritpercentage_;
}
inline void SkillSummonData::set_inheritpercentage(::google::protobuf::int32 value) {
  set_has_inheritpercentage();
  inheritpercentage_ = value;
  // @@protoc_insertion_point(field_set:pb.SkillSummonData.InheritPercentage)
}

// optional bool UseRefTargetAsBlueprint = 18;
inline bool SkillSummonData::has_usereftargetasblueprint() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
inline void SkillSummonData::set_has_usereftargetasblueprint() {
  _has_bits_[0] |= 0x00020000u;
}
inline void SkillSummonData::clear_has_usereftargetasblueprint() {
  _has_bits_[0] &= ~0x00020000u;
}
inline void SkillSummonData::clear_usereftargetasblueprint() {
  usereftargetasblueprint_ = false;
  clear_has_usereftargetasblueprint();
}
inline bool SkillSummonData::usereftargetasblueprint() const {
  // @@protoc_insertion_point(field_get:pb.SkillSummonData.UseRefTargetAsBlueprint)
  return usereftargetasblueprint_;
}
inline void SkillSummonData::set_usereftargetasblueprint(bool value) {
  set_has_usereftargetasblueprint();
  usereftargetasblueprint_ = value;
  // @@protoc_insertion_point(field_set:pb.SkillSummonData.UseRefTargetAsBlueprint)
}

// optional bool InheritAttributeFromRefTarget = 19;
inline bool SkillSummonData::has_inheritattributefromreftarget() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
inline void SkillSummonData::set_has_inheritattributefromreftarget() {
  _has_bits_[0] |= 0x00040000u;
}
inline void SkillSummonData::clear_has_inheritattributefromreftarget() {
  _has_bits_[0] &= ~0x00040000u;
}
inline void SkillSummonData::clear_inheritattributefromreftarget() {
  inheritattributefromreftarget_ = false;
  clear_has_inheritattributefromreftarget();
}
inline bool SkillSummonData::inheritattributefromreftarget() const {
  // @@protoc_insertion_point(field_get:pb.SkillSummonData.InheritAttributeFromRefTarget)
  return inheritattributefromreftarget_;
}
inline void SkillSummonData::set_inheritattributefromreftarget(bool value) {
  set_has_inheritattributefromreftarget();
  inheritattributefromreftarget_ = value;
  // @@protoc_insertion_point(field_set:pb.SkillSummonData.InheritAttributeFromRefTarget)
}

// optional bool InheritAttributeFromAncestor = 20;
inline bool SkillSummonData::has_inheritattributefromancestor() const {
  return (_has_bits_[0] & 0x00080000u) != 0;
}
inline void SkillSummonData::set_has_inheritattributefromancestor() {
  _has_bits_[0] |= 0x00080000u;
}
inline void SkillSummonData::clear_has_inheritattributefromancestor() {
  _has_bits_[0] &= ~0x00080000u;
}
inline void SkillSummonData::clear_inheritattributefromancestor() {
  inheritattributefromancestor_ = false;
  clear_has_inheritattributefromancestor();
}
inline bool SkillSummonData::inheritattributefromancestor() const {
  // @@protoc_insertion_point(field_get:pb.SkillSummonData.InheritAttributeFromAncestor)
  return inheritattributefromancestor_;
}
inline void SkillSummonData::set_inheritattributefromancestor(bool value) {
  set_has_inheritattributefromancestor();
  inheritattributefromancestor_ = value;
  // @@protoc_insertion_point(field_set:pb.SkillSummonData.InheritAttributeFromAncestor)
}

// optional int32 VerticalPosition = 21;
inline bool SkillSummonData::has_verticalposition() const {
  return (_has_bits_[0] & 0x00100000u) != 0;
}
inline void SkillSummonData::set_has_verticalposition() {
  _has_bits_[0] |= 0x00100000u;
}
inline void SkillSummonData::clear_has_verticalposition() {
  _has_bits_[0] &= ~0x00100000u;
}
inline void SkillSummonData::clear_verticalposition() {
  verticalposition_ = 0;
  clear_has_verticalposition();
}
inline ::google::protobuf::int32 SkillSummonData::verticalposition() const {
  // @@protoc_insertion_point(field_get:pb.SkillSummonData.VerticalPosition)
  return verticalposition_;
}
inline void SkillSummonData::set_verticalposition(::google::protobuf::int32 value) {
  set_has_verticalposition();
  verticalposition_ = value;
  // @@protoc_insertion_point(field_set:pb.SkillSummonData.VerticalPosition)
}

// optional bool IsNoKillRageBonus = 22;
inline bool SkillSummonData::has_isnokillragebonus() const {
  return (_has_bits_[0] & 0x00200000u) != 0;
}
inline void SkillSummonData::set_has_isnokillragebonus() {
  _has_bits_[0] |= 0x00200000u;
}
inline void SkillSummonData::clear_has_isnokillragebonus() {
  _has_bits_[0] &= ~0x00200000u;
}
inline void SkillSummonData::clear_isnokillragebonus() {
  isnokillragebonus_ = false;
  clear_has_isnokillragebonus();
}
inline bool SkillSummonData::isnokillragebonus() const {
  // @@protoc_insertion_point(field_get:pb.SkillSummonData.IsNoKillRageBonus)
  return isnokillragebonus_;
}
inline void SkillSummonData::set_isnokillragebonus(bool value) {
  set_has_isnokillragebonus();
  isnokillragebonus_ = value;
  // @@protoc_insertion_point(field_set:pb.SkillSummonData.IsNoKillRageBonus)
}

// repeated int32 PositionVectorArr = 23;
inline int SkillSummonData::positionvectorarr_size() const {
  return positionvectorarr_.size();
}
inline void SkillSummonData::clear_positionvectorarr() {
  positionvectorarr_.Clear();
}
inline ::google::protobuf::int32 SkillSummonData::positionvectorarr(int index) const {
  // @@protoc_insertion_point(field_get:pb.SkillSummonData.PositionVectorArr)
  return positionvectorarr_.Get(index);
}
inline void SkillSummonData::set_positionvectorarr(int index, ::google::protobuf::int32 value) {
  positionvectorarr_.Set(index, value);
  // @@protoc_insertion_point(field_set:pb.SkillSummonData.PositionVectorArr)
}
inline void SkillSummonData::add_positionvectorarr(::google::protobuf::int32 value) {
  positionvectorarr_.Add(value);
  // @@protoc_insertion_point(field_add:pb.SkillSummonData.PositionVectorArr)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
SkillSummonData::positionvectorarr() const {
  // @@protoc_insertion_point(field_list:pb.SkillSummonData.PositionVectorArr)
  return positionvectorarr_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
SkillSummonData::mutable_positionvectorarr() {
  // @@protoc_insertion_point(field_mutable_list:pb.SkillSummonData.PositionVectorArr)
  return &positionvectorarr_;
}

// optional bool UseFixedRate = 24;
inline bool SkillSummonData::has_usefixedrate() const {
  return (_has_bits_[0] & 0x00800000u) != 0;
}
inline void SkillSummonData::set_has_usefixedrate() {
  _has_bits_[0] |= 0x00800000u;
}
inline void SkillSummonData::clear_has_usefixedrate() {
  _has_bits_[0] &= ~0x00800000u;
}
inline void SkillSummonData::clear_usefixedrate() {
  usefixedrate_ = false;
  clear_has_usefixedrate();
}
inline bool SkillSummonData::usefixedrate() const {
  // @@protoc_insertion_point(field_get:pb.SkillSummonData.UseFixedRate)
  return usefixedrate_;
}
inline void SkillSummonData::set_usefixedrate(bool value) {
  set_has_usefixedrate();
  usefixedrate_ = value;
  // @@protoc_insertion_point(field_set:pb.SkillSummonData.UseFixedRate)
}

// -------------------------------------------------------------------

// SkillRebornData

// optional int32 LifeType = 1;
inline bool SkillRebornData::has_lifetype() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SkillRebornData::set_has_lifetype() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SkillRebornData::clear_has_lifetype() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SkillRebornData::clear_lifetype() {
  lifetype_ = 0;
  clear_has_lifetype();
}
inline ::google::protobuf::int32 SkillRebornData::lifetype() const {
  // @@protoc_insertion_point(field_get:pb.SkillRebornData.LifeType)
  return lifetype_;
}
inline void SkillRebornData::set_lifetype(::google::protobuf::int32 value) {
  set_has_lifetype();
  lifetype_ = value;
  // @@protoc_insertion_point(field_set:pb.SkillRebornData.LifeType)
}

// optional int32 LifeParam1 = 2;
inline bool SkillRebornData::has_lifeparam1() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SkillRebornData::set_has_lifeparam1() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SkillRebornData::clear_has_lifeparam1() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SkillRebornData::clear_lifeparam1() {
  lifeparam1_ = 0;
  clear_has_lifeparam1();
}
inline ::google::protobuf::int32 SkillRebornData::lifeparam1() const {
  // @@protoc_insertion_point(field_get:pb.SkillRebornData.LifeParam1)
  return lifeparam1_;
}
inline void SkillRebornData::set_lifeparam1(::google::protobuf::int32 value) {
  set_has_lifeparam1();
  lifeparam1_ = value;
  // @@protoc_insertion_point(field_set:pb.SkillRebornData.LifeParam1)
}

// optional int32 LifeParam2 = 3;
inline bool SkillRebornData::has_lifeparam2() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void SkillRebornData::set_has_lifeparam2() {
  _has_bits_[0] |= 0x00000004u;
}
inline void SkillRebornData::clear_has_lifeparam2() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void SkillRebornData::clear_lifeparam2() {
  lifeparam2_ = 0;
  clear_has_lifeparam2();
}
inline ::google::protobuf::int32 SkillRebornData::lifeparam2() const {
  // @@protoc_insertion_point(field_get:pb.SkillRebornData.LifeParam2)
  return lifeparam2_;
}
inline void SkillRebornData::set_lifeparam2(::google::protobuf::int32 value) {
  set_has_lifeparam2();
  lifeparam2_ = value;
  // @@protoc_insertion_point(field_set:pb.SkillRebornData.LifeParam2)
}

// optional int32 Positon = 4;
inline bool SkillRebornData::has_positon() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void SkillRebornData::set_has_positon() {
  _has_bits_[0] |= 0x00000008u;
}
inline void SkillRebornData::clear_has_positon() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void SkillRebornData::clear_positon() {
  positon_ = 0;
  clear_has_positon();
}
inline ::google::protobuf::int32 SkillRebornData::positon() const {
  // @@protoc_insertion_point(field_get:pb.SkillRebornData.Positon)
  return positon_;
}
inline void SkillRebornData::set_positon(::google::protobuf::int32 value) {
  set_has_positon();
  positon_ = value;
  // @@protoc_insertion_point(field_set:pb.SkillRebornData.Positon)
}

// optional int32 Formation = 5;
inline bool SkillRebornData::has_formation() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void SkillRebornData::set_has_formation() {
  _has_bits_[0] |= 0x00000010u;
}
inline void SkillRebornData::clear_has_formation() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void SkillRebornData::clear_formation() {
  formation_ = 0;
  clear_has_formation();
}
inline ::google::protobuf::int32 SkillRebornData::formation() const {
  // @@protoc_insertion_point(field_get:pb.SkillRebornData.Formation)
  return formation_;
}
inline void SkillRebornData::set_formation(::google::protobuf::int32 value) {
  set_has_formation();
  formation_ = value;
  // @@protoc_insertion_point(field_set:pb.SkillRebornData.Formation)
}

// optional int32 MinDistance = 6;
inline bool SkillRebornData::has_mindistance() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void SkillRebornData::set_has_mindistance() {
  _has_bits_[0] |= 0x00000020u;
}
inline void SkillRebornData::clear_has_mindistance() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void SkillRebornData::clear_mindistance() {
  mindistance_ = 0;
  clear_has_mindistance();
}
inline ::google::protobuf::int32 SkillRebornData::mindistance() const {
  // @@protoc_insertion_point(field_get:pb.SkillRebornData.MinDistance)
  return mindistance_;
}
inline void SkillRebornData::set_mindistance(::google::protobuf::int32 value) {
  set_has_mindistance();
  mindistance_ = value;
  // @@protoc_insertion_point(field_set:pb.SkillRebornData.MinDistance)
}

// optional string BornEffect = 7;
inline bool SkillRebornData::has_borneffect() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void SkillRebornData::set_has_borneffect() {
  _has_bits_[0] |= 0x00000040u;
}
inline void SkillRebornData::clear_has_borneffect() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void SkillRebornData::clear_borneffect() {
  if (borneffect_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    borneffect_->clear();
  }
  clear_has_borneffect();
}
inline const ::std::string& SkillRebornData::borneffect() const {
  // @@protoc_insertion_point(field_get:pb.SkillRebornData.BornEffect)
  return *borneffect_;
}
inline void SkillRebornData::set_borneffect(const ::std::string& value) {
  set_has_borneffect();
  if (borneffect_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    borneffect_ = new ::std::string;
  }
  borneffect_->assign(value);
  // @@protoc_insertion_point(field_set:pb.SkillRebornData.BornEffect)
}
inline void SkillRebornData::set_borneffect(const char* value) {
  set_has_borneffect();
  if (borneffect_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    borneffect_ = new ::std::string;
  }
  borneffect_->assign(value);
  // @@protoc_insertion_point(field_set_char:pb.SkillRebornData.BornEffect)
}
inline void SkillRebornData::set_borneffect(const char* value, size_t size) {
  set_has_borneffect();
  if (borneffect_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    borneffect_ = new ::std::string;
  }
  borneffect_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:pb.SkillRebornData.BornEffect)
}
inline ::std::string* SkillRebornData::mutable_borneffect() {
  set_has_borneffect();
  if (borneffect_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    borneffect_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:pb.SkillRebornData.BornEffect)
  return borneffect_;
}
inline ::std::string* SkillRebornData::release_borneffect() {
  clear_has_borneffect();
  if (borneffect_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = borneffect_;
    borneffect_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void SkillRebornData::set_allocated_borneffect(::std::string* borneffect) {
  if (borneffect_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete borneffect_;
  }
  if (borneffect) {
    set_has_borneffect();
    borneffect_ = borneffect;
  } else {
    clear_has_borneffect();
    borneffect_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:pb.SkillRebornData.BornEffect)
}

// optional string BornSound = 8;
inline bool SkillRebornData::has_bornsound() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void SkillRebornData::set_has_bornsound() {
  _has_bits_[0] |= 0x00000080u;
}
inline void SkillRebornData::clear_has_bornsound() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void SkillRebornData::clear_bornsound() {
  if (bornsound_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    bornsound_->clear();
  }
  clear_has_bornsound();
}
inline const ::std::string& SkillRebornData::bornsound() const {
  // @@protoc_insertion_point(field_get:pb.SkillRebornData.BornSound)
  return *bornsound_;
}
inline void SkillRebornData::set_bornsound(const ::std::string& value) {
  set_has_bornsound();
  if (bornsound_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    bornsound_ = new ::std::string;
  }
  bornsound_->assign(value);
  // @@protoc_insertion_point(field_set:pb.SkillRebornData.BornSound)
}
inline void SkillRebornData::set_bornsound(const char* value) {
  set_has_bornsound();
  if (bornsound_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    bornsound_ = new ::std::string;
  }
  bornsound_->assign(value);
  // @@protoc_insertion_point(field_set_char:pb.SkillRebornData.BornSound)
}
inline void SkillRebornData::set_bornsound(const char* value, size_t size) {
  set_has_bornsound();
  if (bornsound_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    bornsound_ = new ::std::string;
  }
  bornsound_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:pb.SkillRebornData.BornSound)
}
inline ::std::string* SkillRebornData::mutable_bornsound() {
  set_has_bornsound();
  if (bornsound_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    bornsound_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:pb.SkillRebornData.BornSound)
  return bornsound_;
}
inline ::std::string* SkillRebornData::release_bornsound() {
  clear_has_bornsound();
  if (bornsound_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = bornsound_;
    bornsound_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void SkillRebornData::set_allocated_bornsound(::std::string* bornsound) {
  if (bornsound_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete bornsound_;
  }
  if (bornsound) {
    set_has_bornsound();
    bornsound_ = bornsound;
  } else {
    clear_has_bornsound();
    bornsound_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:pb.SkillRebornData.BornSound)
}

// optional int32 LastTimeType = 9;
inline bool SkillRebornData::has_lasttimetype() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void SkillRebornData::set_has_lasttimetype() {
  _has_bits_[0] |= 0x00000100u;
}
inline void SkillRebornData::clear_has_lasttimetype() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void SkillRebornData::clear_lasttimetype() {
  lasttimetype_ = 0;
  clear_has_lasttimetype();
}
inline ::google::protobuf::int32 SkillRebornData::lasttimetype() const {
  // @@protoc_insertion_point(field_get:pb.SkillRebornData.LastTimeType)
  return lasttimetype_;
}
inline void SkillRebornData::set_lasttimetype(::google::protobuf::int32 value) {
  set_has_lasttimetype();
  lasttimetype_ = value;
  // @@protoc_insertion_point(field_set:pb.SkillRebornData.LastTimeType)
}

// optional int32 LastTimeParam = 10;
inline bool SkillRebornData::has_lasttimeparam() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void SkillRebornData::set_has_lasttimeparam() {
  _has_bits_[0] |= 0x00000200u;
}
inline void SkillRebornData::clear_has_lasttimeparam() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void SkillRebornData::clear_lasttimeparam() {
  lasttimeparam_ = 0;
  clear_has_lasttimeparam();
}
inline ::google::protobuf::int32 SkillRebornData::lasttimeparam() const {
  // @@protoc_insertion_point(field_get:pb.SkillRebornData.LastTimeParam)
  return lasttimeparam_;
}
inline void SkillRebornData::set_lasttimeparam(::google::protobuf::int32 value) {
  set_has_lasttimeparam();
  lasttimeparam_ = value;
  // @@protoc_insertion_point(field_set:pb.SkillRebornData.LastTimeParam)
}

// optional bool CanOverScreen = 11;
inline bool SkillRebornData::has_canoverscreen() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void SkillRebornData::set_has_canoverscreen() {
  _has_bits_[0] |= 0x00000400u;
}
inline void SkillRebornData::clear_has_canoverscreen() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void SkillRebornData::clear_canoverscreen() {
  canoverscreen_ = false;
  clear_has_canoverscreen();
}
inline bool SkillRebornData::canoverscreen() const {
  // @@protoc_insertion_point(field_get:pb.SkillRebornData.CanOverScreen)
  return canoverscreen_;
}
inline void SkillRebornData::set_canoverscreen(bool value) {
  set_has_canoverscreen();
  canoverscreen_ = value;
  // @@protoc_insertion_point(field_set:pb.SkillRebornData.CanOverScreen)
}

// optional bool ResetCooldown = 13;
inline bool SkillRebornData::has_resetcooldown() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void SkillRebornData::set_has_resetcooldown() {
  _has_bits_[0] |= 0x00000800u;
}
inline void SkillRebornData::clear_has_resetcooldown() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void SkillRebornData::clear_resetcooldown() {
  resetcooldown_ = false;
  clear_has_resetcooldown();
}
inline bool SkillRebornData::resetcooldown() const {
  // @@protoc_insertion_point(field_get:pb.SkillRebornData.ResetCooldown)
  return resetcooldown_;
}
inline void SkillRebornData::set_resetcooldown(bool value) {
  set_has_resetcooldown();
  resetcooldown_ = value;
  // @@protoc_insertion_point(field_set:pb.SkillRebornData.ResetCooldown)
}

// -------------------------------------------------------------------

// SkillGrabData

// optional string SelfGrabSocket = 1;
inline bool SkillGrabData::has_selfgrabsocket() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SkillGrabData::set_has_selfgrabsocket() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SkillGrabData::clear_has_selfgrabsocket() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SkillGrabData::clear_selfgrabsocket() {
  if (selfgrabsocket_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    selfgrabsocket_->clear();
  }
  clear_has_selfgrabsocket();
}
inline const ::std::string& SkillGrabData::selfgrabsocket() const {
  // @@protoc_insertion_point(field_get:pb.SkillGrabData.SelfGrabSocket)
  return *selfgrabsocket_;
}
inline void SkillGrabData::set_selfgrabsocket(const ::std::string& value) {
  set_has_selfgrabsocket();
  if (selfgrabsocket_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    selfgrabsocket_ = new ::std::string;
  }
  selfgrabsocket_->assign(value);
  // @@protoc_insertion_point(field_set:pb.SkillGrabData.SelfGrabSocket)
}
inline void SkillGrabData::set_selfgrabsocket(const char* value) {
  set_has_selfgrabsocket();
  if (selfgrabsocket_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    selfgrabsocket_ = new ::std::string;
  }
  selfgrabsocket_->assign(value);
  // @@protoc_insertion_point(field_set_char:pb.SkillGrabData.SelfGrabSocket)
}
inline void SkillGrabData::set_selfgrabsocket(const char* value, size_t size) {
  set_has_selfgrabsocket();
  if (selfgrabsocket_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    selfgrabsocket_ = new ::std::string;
  }
  selfgrabsocket_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:pb.SkillGrabData.SelfGrabSocket)
}
inline ::std::string* SkillGrabData::mutable_selfgrabsocket() {
  set_has_selfgrabsocket();
  if (selfgrabsocket_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    selfgrabsocket_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:pb.SkillGrabData.SelfGrabSocket)
  return selfgrabsocket_;
}
inline ::std::string* SkillGrabData::release_selfgrabsocket() {
  clear_has_selfgrabsocket();
  if (selfgrabsocket_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = selfgrabsocket_;
    selfgrabsocket_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void SkillGrabData::set_allocated_selfgrabsocket(::std::string* selfgrabsocket) {
  if (selfgrabsocket_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete selfgrabsocket_;
  }
  if (selfgrabsocket) {
    set_has_selfgrabsocket();
    selfgrabsocket_ = selfgrabsocket;
  } else {
    clear_has_selfgrabsocket();
    selfgrabsocket_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:pb.SkillGrabData.SelfGrabSocket)
}

// optional int32 LastTime = 3;
inline bool SkillGrabData::has_lasttime() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SkillGrabData::set_has_lasttime() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SkillGrabData::clear_has_lasttime() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SkillGrabData::clear_lasttime() {
  lasttime_ = 0;
  clear_has_lasttime();
}
inline ::google::protobuf::int32 SkillGrabData::lasttime() const {
  // @@protoc_insertion_point(field_get:pb.SkillGrabData.LastTime)
  return lasttime_;
}
inline void SkillGrabData::set_lasttime(::google::protobuf::int32 value) {
  set_has_lasttime();
  lasttime_ = value;
  // @@protoc_insertion_point(field_set:pb.SkillGrabData.LastTime)
}

// optional bool CanBeRefTarget = 4;
inline bool SkillGrabData::has_canbereftarget() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void SkillGrabData::set_has_canbereftarget() {
  _has_bits_[0] |= 0x00000004u;
}
inline void SkillGrabData::clear_has_canbereftarget() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void SkillGrabData::clear_canbereftarget() {
  canbereftarget_ = false;
  clear_has_canbereftarget();
}
inline bool SkillGrabData::canbereftarget() const {
  // @@protoc_insertion_point(field_get:pb.SkillGrabData.CanBeRefTarget)
  return canbereftarget_;
}
inline void SkillGrabData::set_canbereftarget(bool value) {
  set_has_canbereftarget();
  canbereftarget_ = value;
  // @@protoc_insertion_point(field_set:pb.SkillGrabData.CanBeRefTarget)
}

// optional bool CanBeEffectTarget = 5;
inline bool SkillGrabData::has_canbeeffecttarget() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void SkillGrabData::set_has_canbeeffecttarget() {
  _has_bits_[0] |= 0x00000008u;
}
inline void SkillGrabData::clear_has_canbeeffecttarget() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void SkillGrabData::clear_canbeeffecttarget() {
  canbeeffecttarget_ = false;
  clear_has_canbeeffecttarget();
}
inline bool SkillGrabData::canbeeffecttarget() const {
  // @@protoc_insertion_point(field_get:pb.SkillGrabData.CanBeEffectTarget)
  return canbeeffecttarget_;
}
inline void SkillGrabData::set_canbeeffecttarget(bool value) {
  set_has_canbeeffecttarget();
  canbeeffecttarget_ = value;
  // @@protoc_insertion_point(field_set:pb.SkillGrabData.CanBeEffectTarget)
}

// optional string AnimOnPlay = 6;
inline bool SkillGrabData::has_animonplay() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void SkillGrabData::set_has_animonplay() {
  _has_bits_[0] |= 0x00000010u;
}
inline void SkillGrabData::clear_has_animonplay() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void SkillGrabData::clear_animonplay() {
  if (animonplay_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    animonplay_->clear();
  }
  clear_has_animonplay();
}
inline const ::std::string& SkillGrabData::animonplay() const {
  // @@protoc_insertion_point(field_get:pb.SkillGrabData.AnimOnPlay)
  return *animonplay_;
}
inline void SkillGrabData::set_animonplay(const ::std::string& value) {
  set_has_animonplay();
  if (animonplay_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    animonplay_ = new ::std::string;
  }
  animonplay_->assign(value);
  // @@protoc_insertion_point(field_set:pb.SkillGrabData.AnimOnPlay)
}
inline void SkillGrabData::set_animonplay(const char* value) {
  set_has_animonplay();
  if (animonplay_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    animonplay_ = new ::std::string;
  }
  animonplay_->assign(value);
  // @@protoc_insertion_point(field_set_char:pb.SkillGrabData.AnimOnPlay)
}
inline void SkillGrabData::set_animonplay(const char* value, size_t size) {
  set_has_animonplay();
  if (animonplay_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    animonplay_ = new ::std::string;
  }
  animonplay_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:pb.SkillGrabData.AnimOnPlay)
}
inline ::std::string* SkillGrabData::mutable_animonplay() {
  set_has_animonplay();
  if (animonplay_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    animonplay_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:pb.SkillGrabData.AnimOnPlay)
  return animonplay_;
}
inline ::std::string* SkillGrabData::release_animonplay() {
  clear_has_animonplay();
  if (animonplay_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = animonplay_;
    animonplay_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void SkillGrabData::set_allocated_animonplay(::std::string* animonplay) {
  if (animonplay_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete animonplay_;
  }
  if (animonplay) {
    set_has_animonplay();
    animonplay_ = animonplay;
  } else {
    clear_has_animonplay();
    animonplay_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:pb.SkillGrabData.AnimOnPlay)
}

// optional int32 DamageTime = 7;
inline bool SkillGrabData::has_damagetime() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void SkillGrabData::set_has_damagetime() {
  _has_bits_[0] |= 0x00000020u;
}
inline void SkillGrabData::clear_has_damagetime() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void SkillGrabData::clear_damagetime() {
  damagetime_ = 0;
  clear_has_damagetime();
}
inline ::google::protobuf::int32 SkillGrabData::damagetime() const {
  // @@protoc_insertion_point(field_get:pb.SkillGrabData.DamageTime)
  return damagetime_;
}
inline void SkillGrabData::set_damagetime(::google::protobuf::int32 value) {
  set_has_damagetime();
  damagetime_ = value;
  // @@protoc_insertion_point(field_set:pb.SkillGrabData.DamageTime)
}

// repeated int32 OffsetOfSlot = 8;
inline int SkillGrabData::offsetofslot_size() const {
  return offsetofslot_.size();
}
inline void SkillGrabData::clear_offsetofslot() {
  offsetofslot_.Clear();
}
inline ::google::protobuf::int32 SkillGrabData::offsetofslot(int index) const {
  // @@protoc_insertion_point(field_get:pb.SkillGrabData.OffsetOfSlot)
  return offsetofslot_.Get(index);
}
inline void SkillGrabData::set_offsetofslot(int index, ::google::protobuf::int32 value) {
  offsetofslot_.Set(index, value);
  // @@protoc_insertion_point(field_set:pb.SkillGrabData.OffsetOfSlot)
}
inline void SkillGrabData::add_offsetofslot(::google::protobuf::int32 value) {
  offsetofslot_.Add(value);
  // @@protoc_insertion_point(field_add:pb.SkillGrabData.OffsetOfSlot)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
SkillGrabData::offsetofslot() const {
  // @@protoc_insertion_point(field_list:pb.SkillGrabData.OffsetOfSlot)
  return offsetofslot_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
SkillGrabData::mutable_offsetofslot() {
  // @@protoc_insertion_point(field_mutable_list:pb.SkillGrabData.OffsetOfSlot)
  return &offsetofslot_;
}

// -------------------------------------------------------------------

// SkillEnergyRecoverData

// optional int32 Param1 = 1;
inline bool SkillEnergyRecoverData::has_param1() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SkillEnergyRecoverData::set_has_param1() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SkillEnergyRecoverData::clear_has_param1() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SkillEnergyRecoverData::clear_param1() {
  param1_ = 0;
  clear_has_param1();
}
inline ::google::protobuf::int32 SkillEnergyRecoverData::param1() const {
  // @@protoc_insertion_point(field_get:pb.SkillEnergyRecoverData.Param1)
  return param1_;
}
inline void SkillEnergyRecoverData::set_param1(::google::protobuf::int32 value) {
  set_has_param1();
  param1_ = value;
  // @@protoc_insertion_point(field_set:pb.SkillEnergyRecoverData.Param1)
}

// optional int32 Param2 = 2;
inline bool SkillEnergyRecoverData::has_param2() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SkillEnergyRecoverData::set_has_param2() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SkillEnergyRecoverData::clear_has_param2() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SkillEnergyRecoverData::clear_param2() {
  param2_ = 0;
  clear_has_param2();
}
inline ::google::protobuf::int32 SkillEnergyRecoverData::param2() const {
  // @@protoc_insertion_point(field_get:pb.SkillEnergyRecoverData.Param2)
  return param2_;
}
inline void SkillEnergyRecoverData::set_param2(::google::protobuf::int32 value) {
  set_has_param2();
  param2_ = value;
  // @@protoc_insertion_point(field_set:pb.SkillEnergyRecoverData.Param2)
}

// optional bool AdjustByTargetCount = 3;
inline bool SkillEnergyRecoverData::has_adjustbytargetcount() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void SkillEnergyRecoverData::set_has_adjustbytargetcount() {
  _has_bits_[0] |= 0x00000004u;
}
inline void SkillEnergyRecoverData::clear_has_adjustbytargetcount() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void SkillEnergyRecoverData::clear_adjustbytargetcount() {
  adjustbytargetcount_ = false;
  clear_has_adjustbytargetcount();
}
inline bool SkillEnergyRecoverData::adjustbytargetcount() const {
  // @@protoc_insertion_point(field_get:pb.SkillEnergyRecoverData.AdjustByTargetCount)
  return adjustbytargetcount_;
}
inline void SkillEnergyRecoverData::set_adjustbytargetcount(bool value) {
  set_has_adjustbytargetcount();
  adjustbytargetcount_ = value;
  // @@protoc_insertion_point(field_set:pb.SkillEnergyRecoverData.AdjustByTargetCount)
}

// repeated int32 AdjustData = 4;
inline int SkillEnergyRecoverData::adjustdata_size() const {
  return adjustdata_.size();
}
inline void SkillEnergyRecoverData::clear_adjustdata() {
  adjustdata_.Clear();
}
inline ::google::protobuf::int32 SkillEnergyRecoverData::adjustdata(int index) const {
  // @@protoc_insertion_point(field_get:pb.SkillEnergyRecoverData.AdjustData)
  return adjustdata_.Get(index);
}
inline void SkillEnergyRecoverData::set_adjustdata(int index, ::google::protobuf::int32 value) {
  adjustdata_.Set(index, value);
  // @@protoc_insertion_point(field_set:pb.SkillEnergyRecoverData.AdjustData)
}
inline void SkillEnergyRecoverData::add_adjustdata(::google::protobuf::int32 value) {
  adjustdata_.Add(value);
  // @@protoc_insertion_point(field_add:pb.SkillEnergyRecoverData.AdjustData)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
SkillEnergyRecoverData::adjustdata() const {
  // @@protoc_insertion_point(field_list:pb.SkillEnergyRecoverData.AdjustData)
  return adjustdata_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
SkillEnergyRecoverData::mutable_adjustdata() {
  // @@protoc_insertion_point(field_mutable_list:pb.SkillEnergyRecoverData.AdjustData)
  return &adjustdata_;
}

// -------------------------------------------------------------------

// SkillSubSkillData

// repeated int32 ID = 1;
inline int SkillSubSkillData::id_size() const {
  return id_.size();
}
inline void SkillSubSkillData::clear_id() {
  id_.Clear();
}
inline ::google::protobuf::int32 SkillSubSkillData::id(int index) const {
  // @@protoc_insertion_point(field_get:pb.SkillSubSkillData.ID)
  return id_.Get(index);
}
inline void SkillSubSkillData::set_id(int index, ::google::protobuf::int32 value) {
  id_.Set(index, value);
  // @@protoc_insertion_point(field_set:pb.SkillSubSkillData.ID)
}
inline void SkillSubSkillData::add_id(::google::protobuf::int32 value) {
  id_.Add(value);
  // @@protoc_insertion_point(field_add:pb.SkillSubSkillData.ID)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
SkillSubSkillData::id() const {
  // @@protoc_insertion_point(field_list:pb.SkillSubSkillData.ID)
  return id_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
SkillSubSkillData::mutable_id() {
  // @@protoc_insertion_point(field_mutable_list:pb.SkillSubSkillData.ID)
  return &id_;
}

// optional int32 LevelType = 3;
inline bool SkillSubSkillData::has_leveltype() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SkillSubSkillData::set_has_leveltype() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SkillSubSkillData::clear_has_leveltype() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SkillSubSkillData::clear_leveltype() {
  leveltype_ = 0;
  clear_has_leveltype();
}
inline ::google::protobuf::int32 SkillSubSkillData::leveltype() const {
  // @@protoc_insertion_point(field_get:pb.SkillSubSkillData.LevelType)
  return leveltype_;
}
inline void SkillSubSkillData::set_leveltype(::google::protobuf::int32 value) {
  set_has_leveltype();
  leveltype_ = value;
  // @@protoc_insertion_point(field_set:pb.SkillSubSkillData.LevelType)
}

// optional int32 LevelParam = 4;
inline bool SkillSubSkillData::has_levelparam() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void SkillSubSkillData::set_has_levelparam() {
  _has_bits_[0] |= 0x00000004u;
}
inline void SkillSubSkillData::clear_has_levelparam() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void SkillSubSkillData::clear_levelparam() {
  levelparam_ = 0;
  clear_has_levelparam();
}
inline ::google::protobuf::int32 SkillSubSkillData::levelparam() const {
  // @@protoc_insertion_point(field_get:pb.SkillSubSkillData.LevelParam)
  return levelparam_;
}
inline void SkillSubSkillData::set_levelparam(::google::protobuf::int32 value) {
  set_has_levelparam();
  levelparam_ = value;
  // @@protoc_insertion_point(field_set:pb.SkillSubSkillData.LevelParam)
}

// optional bool IsListenBreak = 5;
inline bool SkillSubSkillData::has_islistenbreak() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void SkillSubSkillData::set_has_islistenbreak() {
  _has_bits_[0] |= 0x00000008u;
}
inline void SkillSubSkillData::clear_has_islistenbreak() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void SkillSubSkillData::clear_islistenbreak() {
  islistenbreak_ = false;
  clear_has_islistenbreak();
}
inline bool SkillSubSkillData::islistenbreak() const {
  // @@protoc_insertion_point(field_get:pb.SkillSubSkillData.IsListenBreak)
  return islistenbreak_;
}
inline void SkillSubSkillData::set_islistenbreak(bool value) {
  set_has_islistenbreak();
  islistenbreak_ = value;
  // @@protoc_insertion_point(field_set:pb.SkillSubSkillData.IsListenBreak)
}

// optional int32 DelayTime = 6;
inline bool SkillSubSkillData::has_delaytime() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void SkillSubSkillData::set_has_delaytime() {
  _has_bits_[0] |= 0x00000010u;
}
inline void SkillSubSkillData::clear_has_delaytime() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void SkillSubSkillData::clear_delaytime() {
  delaytime_ = 0;
  clear_has_delaytime();
}
inline ::google::protobuf::int32 SkillSubSkillData::delaytime() const {
  // @@protoc_insertion_point(field_get:pb.SkillSubSkillData.DelayTime)
  return delaytime_;
}
inline void SkillSubSkillData::set_delaytime(::google::protobuf::int32 value) {
  set_has_delaytime();
  delaytime_ = value;
  // @@protoc_insertion_point(field_set:pb.SkillSubSkillData.DelayTime)
}

// optional bool IsFollow = 7;
inline bool SkillSubSkillData::has_isfollow() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void SkillSubSkillData::set_has_isfollow() {
  _has_bits_[0] |= 0x00000020u;
}
inline void SkillSubSkillData::clear_has_isfollow() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void SkillSubSkillData::clear_isfollow() {
  isfollow_ = false;
  clear_has_isfollow();
}
inline bool SkillSubSkillData::isfollow() const {
  // @@protoc_insertion_point(field_get:pb.SkillSubSkillData.IsFollow)
  return isfollow_;
}
inline void SkillSubSkillData::set_isfollow(bool value) {
  set_has_isfollow();
  isfollow_ = value;
  // @@protoc_insertion_point(field_set:pb.SkillSubSkillData.IsFollow)
}

// optional bool IsFollowRealTarget = 8;
inline bool SkillSubSkillData::has_isfollowrealtarget() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void SkillSubSkillData::set_has_isfollowrealtarget() {
  _has_bits_[0] |= 0x00000040u;
}
inline void SkillSubSkillData::clear_has_isfollowrealtarget() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void SkillSubSkillData::clear_isfollowrealtarget() {
  isfollowrealtarget_ = false;
  clear_has_isfollowrealtarget();
}
inline bool SkillSubSkillData::isfollowrealtarget() const {
  // @@protoc_insertion_point(field_get:pb.SkillSubSkillData.IsFollowRealTarget)
  return isfollowrealtarget_;
}
inline void SkillSubSkillData::set_isfollowrealtarget(bool value) {
  set_has_isfollowrealtarget();
  isfollowrealtarget_ = value;
  // @@protoc_insertion_point(field_set:pb.SkillSubSkillData.IsFollowRealTarget)
}

// optional bool UseProbabilisticSubSkill = 9;
inline bool SkillSubSkillData::has_useprobabilisticsubskill() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void SkillSubSkillData::set_has_useprobabilisticsubskill() {
  _has_bits_[0] |= 0x00000080u;
}
inline void SkillSubSkillData::clear_has_useprobabilisticsubskill() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void SkillSubSkillData::clear_useprobabilisticsubskill() {
  useprobabilisticsubskill_ = false;
  clear_has_useprobabilisticsubskill();
}
inline bool SkillSubSkillData::useprobabilisticsubskill() const {
  // @@protoc_insertion_point(field_get:pb.SkillSubSkillData.UseProbabilisticSubSkill)
  return useprobabilisticsubskill_;
}
inline void SkillSubSkillData::set_useprobabilisticsubskill(bool value) {
  set_has_useprobabilisticsubskill();
  useprobabilisticsubskill_ = value;
  // @@protoc_insertion_point(field_set:pb.SkillSubSkillData.UseProbabilisticSubSkill)
}

// repeated int32 ProbabilisticParams = 10;
inline int SkillSubSkillData::probabilisticparams_size() const {
  return probabilisticparams_.size();
}
inline void SkillSubSkillData::clear_probabilisticparams() {
  probabilisticparams_.Clear();
}
inline ::google::protobuf::int32 SkillSubSkillData::probabilisticparams(int index) const {
  // @@protoc_insertion_point(field_get:pb.SkillSubSkillData.ProbabilisticParams)
  return probabilisticparams_.Get(index);
}
inline void SkillSubSkillData::set_probabilisticparams(int index, ::google::protobuf::int32 value) {
  probabilisticparams_.Set(index, value);
  // @@protoc_insertion_point(field_set:pb.SkillSubSkillData.ProbabilisticParams)
}
inline void SkillSubSkillData::add_probabilisticparams(::google::protobuf::int32 value) {
  probabilisticparams_.Add(value);
  // @@protoc_insertion_point(field_add:pb.SkillSubSkillData.ProbabilisticParams)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
SkillSubSkillData::probabilisticparams() const {
  // @@protoc_insertion_point(field_list:pb.SkillSubSkillData.ProbabilisticParams)
  return probabilisticparams_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
SkillSubSkillData::mutable_probabilisticparams() {
  // @@protoc_insertion_point(field_mutable_list:pb.SkillSubSkillData.ProbabilisticParams)
  return &probabilisticparams_;
}

// repeated int32 ProbabilisticSkills = 11;
inline int SkillSubSkillData::probabilisticskills_size() const {
  return probabilisticskills_.size();
}
inline void SkillSubSkillData::clear_probabilisticskills() {
  probabilisticskills_.Clear();
}
inline ::google::protobuf::int32 SkillSubSkillData::probabilisticskills(int index) const {
  // @@protoc_insertion_point(field_get:pb.SkillSubSkillData.ProbabilisticSkills)
  return probabilisticskills_.Get(index);
}
inline void SkillSubSkillData::set_probabilisticskills(int index, ::google::protobuf::int32 value) {
  probabilisticskills_.Set(index, value);
  // @@protoc_insertion_point(field_set:pb.SkillSubSkillData.ProbabilisticSkills)
}
inline void SkillSubSkillData::add_probabilisticskills(::google::protobuf::int32 value) {
  probabilisticskills_.Add(value);
  // @@protoc_insertion_point(field_add:pb.SkillSubSkillData.ProbabilisticSkills)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
SkillSubSkillData::probabilisticskills() const {
  // @@protoc_insertion_point(field_list:pb.SkillSubSkillData.ProbabilisticSkills)
  return probabilisticskills_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
SkillSubSkillData::mutable_probabilisticskills() {
  // @@protoc_insertion_point(field_mutable_list:pb.SkillSubSkillData.ProbabilisticSkills)
  return &probabilisticskills_;
}

// repeated .pb.SkillLevelSubSkill LevelSubSkill = 12;
inline int SkillSubSkillData::levelsubskill_size() const {
  return levelsubskill_.size();
}
inline void SkillSubSkillData::clear_levelsubskill() {
  levelsubskill_.Clear();
}
inline const ::pb::SkillLevelSubSkill& SkillSubSkillData::levelsubskill(int index) const {
  // @@protoc_insertion_point(field_get:pb.SkillSubSkillData.LevelSubSkill)
  return levelsubskill_.Get(index);
}
inline ::pb::SkillLevelSubSkill* SkillSubSkillData::mutable_levelsubskill(int index) {
  // @@protoc_insertion_point(field_mutable:pb.SkillSubSkillData.LevelSubSkill)
  return levelsubskill_.Mutable(index);
}
inline ::pb::SkillLevelSubSkill* SkillSubSkillData::add_levelsubskill() {
  // @@protoc_insertion_point(field_add:pb.SkillSubSkillData.LevelSubSkill)
  return levelsubskill_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::SkillLevelSubSkill >&
SkillSubSkillData::levelsubskill() const {
  // @@protoc_insertion_point(field_list:pb.SkillSubSkillData.LevelSubSkill)
  return levelsubskill_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb::SkillLevelSubSkill >*
SkillSubSkillData::mutable_levelsubskill() {
  // @@protoc_insertion_point(field_mutable_list:pb.SkillSubSkillData.LevelSubSkill)
  return &levelsubskill_;
}

// repeated .pb.SkillLevelProbSkill LevelProbSkill = 13;
inline int SkillSubSkillData::levelprobskill_size() const {
  return levelprobskill_.size();
}
inline void SkillSubSkillData::clear_levelprobskill() {
  levelprobskill_.Clear();
}
inline const ::pb::SkillLevelProbSkill& SkillSubSkillData::levelprobskill(int index) const {
  // @@protoc_insertion_point(field_get:pb.SkillSubSkillData.LevelProbSkill)
  return levelprobskill_.Get(index);
}
inline ::pb::SkillLevelProbSkill* SkillSubSkillData::mutable_levelprobskill(int index) {
  // @@protoc_insertion_point(field_mutable:pb.SkillSubSkillData.LevelProbSkill)
  return levelprobskill_.Mutable(index);
}
inline ::pb::SkillLevelProbSkill* SkillSubSkillData::add_levelprobskill() {
  // @@protoc_insertion_point(field_add:pb.SkillSubSkillData.LevelProbSkill)
  return levelprobskill_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::SkillLevelProbSkill >&
SkillSubSkillData::levelprobskill() const {
  // @@protoc_insertion_point(field_list:pb.SkillSubSkillData.LevelProbSkill)
  return levelprobskill_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb::SkillLevelProbSkill >*
SkillSubSkillData::mutable_levelprobskill() {
  // @@protoc_insertion_point(field_mutable_list:pb.SkillSubSkillData.LevelProbSkill)
  return &levelprobskill_;
}

// -------------------------------------------------------------------

// SkillData

// optional int32 ID = 1;
inline bool SkillData::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SkillData::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SkillData::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SkillData::clear_id() {
  id_ = 0;
  clear_has_id();
}
inline ::google::protobuf::int32 SkillData::id() const {
  // @@protoc_insertion_point(field_get:pb.SkillData.ID)
  return id_;
}
inline void SkillData::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:pb.SkillData.ID)
}

// optional .pb.SkillBaseData BaseData = 2;
inline bool SkillData::has_basedata() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SkillData::set_has_basedata() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SkillData::clear_has_basedata() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SkillData::clear_basedata() {
  if (basedata_ != NULL) basedata_->::pb::SkillBaseData::Clear();
  clear_has_basedata();
}
inline const ::pb::SkillBaseData& SkillData::basedata() const {
  // @@protoc_insertion_point(field_get:pb.SkillData.BaseData)
  return basedata_ != NULL ? *basedata_ : *default_instance_->basedata_;
}
inline ::pb::SkillBaseData* SkillData::mutable_basedata() {
  set_has_basedata();
  if (basedata_ == NULL) basedata_ = new ::pb::SkillBaseData;
  // @@protoc_insertion_point(field_mutable:pb.SkillData.BaseData)
  return basedata_;
}
inline ::pb::SkillBaseData* SkillData::release_basedata() {
  clear_has_basedata();
  ::pb::SkillBaseData* temp = basedata_;
  basedata_ = NULL;
  return temp;
}
inline void SkillData::set_allocated_basedata(::pb::SkillBaseData* basedata) {
  delete basedata_;
  basedata_ = basedata;
  if (basedata) {
    set_has_basedata();
  } else {
    clear_has_basedata();
  }
  // @@protoc_insertion_point(field_set_allocated:pb.SkillData.BaseData)
}

// optional .pb.SkillEffectData EffectData = 3;
inline bool SkillData::has_effectdata() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void SkillData::set_has_effectdata() {
  _has_bits_[0] |= 0x00000004u;
}
inline void SkillData::clear_has_effectdata() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void SkillData::clear_effectdata() {
  if (effectdata_ != NULL) effectdata_->::pb::SkillEffectData::Clear();
  clear_has_effectdata();
}
inline const ::pb::SkillEffectData& SkillData::effectdata() const {
  // @@protoc_insertion_point(field_get:pb.SkillData.EffectData)
  return effectdata_ != NULL ? *effectdata_ : *default_instance_->effectdata_;
}
inline ::pb::SkillEffectData* SkillData::mutable_effectdata() {
  set_has_effectdata();
  if (effectdata_ == NULL) effectdata_ = new ::pb::SkillEffectData;
  // @@protoc_insertion_point(field_mutable:pb.SkillData.EffectData)
  return effectdata_;
}
inline ::pb::SkillEffectData* SkillData::release_effectdata() {
  clear_has_effectdata();
  ::pb::SkillEffectData* temp = effectdata_;
  effectdata_ = NULL;
  return temp;
}
inline void SkillData::set_allocated_effectdata(::pb::SkillEffectData* effectdata) {
  delete effectdata_;
  effectdata_ = effectdata;
  if (effectdata) {
    set_has_effectdata();
  } else {
    clear_has_effectdata();
  }
  // @@protoc_insertion_point(field_set_allocated:pb.SkillData.EffectData)
}

// optional .pb.SkillHitData HitData = 4;
inline bool SkillData::has_hitdata() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void SkillData::set_has_hitdata() {
  _has_bits_[0] |= 0x00000008u;
}
inline void SkillData::clear_has_hitdata() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void SkillData::clear_hitdata() {
  if (hitdata_ != NULL) hitdata_->::pb::SkillHitData::Clear();
  clear_has_hitdata();
}
inline const ::pb::SkillHitData& SkillData::hitdata() const {
  // @@protoc_insertion_point(field_get:pb.SkillData.HitData)
  return hitdata_ != NULL ? *hitdata_ : *default_instance_->hitdata_;
}
inline ::pb::SkillHitData* SkillData::mutable_hitdata() {
  set_has_hitdata();
  if (hitdata_ == NULL) hitdata_ = new ::pb::SkillHitData;
  // @@protoc_insertion_point(field_mutable:pb.SkillData.HitData)
  return hitdata_;
}
inline ::pb::SkillHitData* SkillData::release_hitdata() {
  clear_has_hitdata();
  ::pb::SkillHitData* temp = hitdata_;
  hitdata_ = NULL;
  return temp;
}
inline void SkillData::set_allocated_hitdata(::pb::SkillHitData* hitdata) {
  delete hitdata_;
  hitdata_ = hitdata;
  if (hitdata) {
    set_has_hitdata();
  } else {
    clear_has_hitdata();
  }
  // @@protoc_insertion_point(field_set_allocated:pb.SkillData.HitData)
}

// optional .pb.SkillMoveData MoveData = 5;
inline bool SkillData::has_movedata() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void SkillData::set_has_movedata() {
  _has_bits_[0] |= 0x00000010u;
}
inline void SkillData::clear_has_movedata() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void SkillData::clear_movedata() {
  if (movedata_ != NULL) movedata_->::pb::SkillMoveData::Clear();
  clear_has_movedata();
}
inline const ::pb::SkillMoveData& SkillData::movedata() const {
  // @@protoc_insertion_point(field_get:pb.SkillData.MoveData)
  return movedata_ != NULL ? *movedata_ : *default_instance_->movedata_;
}
inline ::pb::SkillMoveData* SkillData::mutable_movedata() {
  set_has_movedata();
  if (movedata_ == NULL) movedata_ = new ::pb::SkillMoveData;
  // @@protoc_insertion_point(field_mutable:pb.SkillData.MoveData)
  return movedata_;
}
inline ::pb::SkillMoveData* SkillData::release_movedata() {
  clear_has_movedata();
  ::pb::SkillMoveData* temp = movedata_;
  movedata_ = NULL;
  return temp;
}
inline void SkillData::set_allocated_movedata(::pb::SkillMoveData* movedata) {
  delete movedata_;
  movedata_ = movedata;
  if (movedata) {
    set_has_movedata();
  } else {
    clear_has_movedata();
  }
  // @@protoc_insertion_point(field_set_allocated:pb.SkillData.MoveData)
}

// optional .pb.SkillEnergyDrawData EnergyDrawData = 6;
inline bool SkillData::has_energydrawdata() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void SkillData::set_has_energydrawdata() {
  _has_bits_[0] |= 0x00000020u;
}
inline void SkillData::clear_has_energydrawdata() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void SkillData::clear_energydrawdata() {
  if (energydrawdata_ != NULL) energydrawdata_->::pb::SkillEnergyDrawData::Clear();
  clear_has_energydrawdata();
}
inline const ::pb::SkillEnergyDrawData& SkillData::energydrawdata() const {
  // @@protoc_insertion_point(field_get:pb.SkillData.EnergyDrawData)
  return energydrawdata_ != NULL ? *energydrawdata_ : *default_instance_->energydrawdata_;
}
inline ::pb::SkillEnergyDrawData* SkillData::mutable_energydrawdata() {
  set_has_energydrawdata();
  if (energydrawdata_ == NULL) energydrawdata_ = new ::pb::SkillEnergyDrawData;
  // @@protoc_insertion_point(field_mutable:pb.SkillData.EnergyDrawData)
  return energydrawdata_;
}
inline ::pb::SkillEnergyDrawData* SkillData::release_energydrawdata() {
  clear_has_energydrawdata();
  ::pb::SkillEnergyDrawData* temp = energydrawdata_;
  energydrawdata_ = NULL;
  return temp;
}
inline void SkillData::set_allocated_energydrawdata(::pb::SkillEnergyDrawData* energydrawdata) {
  delete energydrawdata_;
  energydrawdata_ = energydrawdata;
  if (energydrawdata) {
    set_has_energydrawdata();
  } else {
    clear_has_energydrawdata();
  }
  // @@protoc_insertion_point(field_set_allocated:pb.SkillData.EnergyDrawData)
}

// optional .pb.SkillEnergyAssistData EnergyAssisData = 7;
inline bool SkillData::has_energyassisdata() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void SkillData::set_has_energyassisdata() {
  _has_bits_[0] |= 0x00000040u;
}
inline void SkillData::clear_has_energyassisdata() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void SkillData::clear_energyassisdata() {
  if (energyassisdata_ != NULL) energyassisdata_->::pb::SkillEnergyAssistData::Clear();
  clear_has_energyassisdata();
}
inline const ::pb::SkillEnergyAssistData& SkillData::energyassisdata() const {
  // @@protoc_insertion_point(field_get:pb.SkillData.EnergyAssisData)
  return energyassisdata_ != NULL ? *energyassisdata_ : *default_instance_->energyassisdata_;
}
inline ::pb::SkillEnergyAssistData* SkillData::mutable_energyassisdata() {
  set_has_energyassisdata();
  if (energyassisdata_ == NULL) energyassisdata_ = new ::pb::SkillEnergyAssistData;
  // @@protoc_insertion_point(field_mutable:pb.SkillData.EnergyAssisData)
  return energyassisdata_;
}
inline ::pb::SkillEnergyAssistData* SkillData::release_energyassisdata() {
  clear_has_energyassisdata();
  ::pb::SkillEnergyAssistData* temp = energyassisdata_;
  energyassisdata_ = NULL;
  return temp;
}
inline void SkillData::set_allocated_energyassisdata(::pb::SkillEnergyAssistData* energyassisdata) {
  delete energyassisdata_;
  energyassisdata_ = energyassisdata;
  if (energyassisdata) {
    set_has_energyassisdata();
  } else {
    clear_has_energyassisdata();
  }
  // @@protoc_insertion_point(field_set_allocated:pb.SkillData.EnergyAssisData)
}

// optional .pb.SkillLifeStealData LifeStealData = 8;
inline bool SkillData::has_lifestealdata() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void SkillData::set_has_lifestealdata() {
  _has_bits_[0] |= 0x00000080u;
}
inline void SkillData::clear_has_lifestealdata() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void SkillData::clear_lifestealdata() {
  if (lifestealdata_ != NULL) lifestealdata_->::pb::SkillLifeStealData::Clear();
  clear_has_lifestealdata();
}
inline const ::pb::SkillLifeStealData& SkillData::lifestealdata() const {
  // @@protoc_insertion_point(field_get:pb.SkillData.LifeStealData)
  return lifestealdata_ != NULL ? *lifestealdata_ : *default_instance_->lifestealdata_;
}
inline ::pb::SkillLifeStealData* SkillData::mutable_lifestealdata() {
  set_has_lifestealdata();
  if (lifestealdata_ == NULL) lifestealdata_ = new ::pb::SkillLifeStealData;
  // @@protoc_insertion_point(field_mutable:pb.SkillData.LifeStealData)
  return lifestealdata_;
}
inline ::pb::SkillLifeStealData* SkillData::release_lifestealdata() {
  clear_has_lifestealdata();
  ::pb::SkillLifeStealData* temp = lifestealdata_;
  lifestealdata_ = NULL;
  return temp;
}
inline void SkillData::set_allocated_lifestealdata(::pb::SkillLifeStealData* lifestealdata) {
  delete lifestealdata_;
  lifestealdata_ = lifestealdata;
  if (lifestealdata) {
    set_has_lifestealdata();
  } else {
    clear_has_lifestealdata();
  }
  // @@protoc_insertion_point(field_set_allocated:pb.SkillData.LifeStealData)
}

// optional .pb.SkillDamageData DamageData = 9;
inline bool SkillData::has_damagedata() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void SkillData::set_has_damagedata() {
  _has_bits_[0] |= 0x00000100u;
}
inline void SkillData::clear_has_damagedata() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void SkillData::clear_damagedata() {
  if (damagedata_ != NULL) damagedata_->::pb::SkillDamageData::Clear();
  clear_has_damagedata();
}
inline const ::pb::SkillDamageData& SkillData::damagedata() const {
  // @@protoc_insertion_point(field_get:pb.SkillData.DamageData)
  return damagedata_ != NULL ? *damagedata_ : *default_instance_->damagedata_;
}
inline ::pb::SkillDamageData* SkillData::mutable_damagedata() {
  set_has_damagedata();
  if (damagedata_ == NULL) damagedata_ = new ::pb::SkillDamageData;
  // @@protoc_insertion_point(field_mutable:pb.SkillData.DamageData)
  return damagedata_;
}
inline ::pb::SkillDamageData* SkillData::release_damagedata() {
  clear_has_damagedata();
  ::pb::SkillDamageData* temp = damagedata_;
  damagedata_ = NULL;
  return temp;
}
inline void SkillData::set_allocated_damagedata(::pb::SkillDamageData* damagedata) {
  delete damagedata_;
  damagedata_ = damagedata;
  if (damagedata) {
    set_has_damagedata();
  } else {
    clear_has_damagedata();
  }
  // @@protoc_insertion_point(field_set_allocated:pb.SkillData.DamageData)
}

// optional .pb.SkillHealData HealData = 10;
inline bool SkillData::has_healdata() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void SkillData::set_has_healdata() {
  _has_bits_[0] |= 0x00000200u;
}
inline void SkillData::clear_has_healdata() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void SkillData::clear_healdata() {
  if (healdata_ != NULL) healdata_->::pb::SkillHealData::Clear();
  clear_has_healdata();
}
inline const ::pb::SkillHealData& SkillData::healdata() const {
  // @@protoc_insertion_point(field_get:pb.SkillData.HealData)
  return healdata_ != NULL ? *healdata_ : *default_instance_->healdata_;
}
inline ::pb::SkillHealData* SkillData::mutable_healdata() {
  set_has_healdata();
  if (healdata_ == NULL) healdata_ = new ::pb::SkillHealData;
  // @@protoc_insertion_point(field_mutable:pb.SkillData.HealData)
  return healdata_;
}
inline ::pb::SkillHealData* SkillData::release_healdata() {
  clear_has_healdata();
  ::pb::SkillHealData* temp = healdata_;
  healdata_ = NULL;
  return temp;
}
inline void SkillData::set_allocated_healdata(::pb::SkillHealData* healdata) {
  delete healdata_;
  healdata_ = healdata;
  if (healdata) {
    set_has_healdata();
  } else {
    clear_has_healdata();
  }
  // @@protoc_insertion_point(field_set_allocated:pb.SkillData.HealData)
}

// optional .pb.SkillSummonData SummonData = 11;
inline bool SkillData::has_summondata() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void SkillData::set_has_summondata() {
  _has_bits_[0] |= 0x00000400u;
}
inline void SkillData::clear_has_summondata() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void SkillData::clear_summondata() {
  if (summondata_ != NULL) summondata_->::pb::SkillSummonData::Clear();
  clear_has_summondata();
}
inline const ::pb::SkillSummonData& SkillData::summondata() const {
  // @@protoc_insertion_point(field_get:pb.SkillData.SummonData)
  return summondata_ != NULL ? *summondata_ : *default_instance_->summondata_;
}
inline ::pb::SkillSummonData* SkillData::mutable_summondata() {
  set_has_summondata();
  if (summondata_ == NULL) summondata_ = new ::pb::SkillSummonData;
  // @@protoc_insertion_point(field_mutable:pb.SkillData.SummonData)
  return summondata_;
}
inline ::pb::SkillSummonData* SkillData::release_summondata() {
  clear_has_summondata();
  ::pb::SkillSummonData* temp = summondata_;
  summondata_ = NULL;
  return temp;
}
inline void SkillData::set_allocated_summondata(::pb::SkillSummonData* summondata) {
  delete summondata_;
  summondata_ = summondata;
  if (summondata) {
    set_has_summondata();
  } else {
    clear_has_summondata();
  }
  // @@protoc_insertion_point(field_set_allocated:pb.SkillData.SummonData)
}

// optional .pb.SkillRebornData RebornData = 12;
inline bool SkillData::has_reborndata() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void SkillData::set_has_reborndata() {
  _has_bits_[0] |= 0x00000800u;
}
inline void SkillData::clear_has_reborndata() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void SkillData::clear_reborndata() {
  if (reborndata_ != NULL) reborndata_->::pb::SkillRebornData::Clear();
  clear_has_reborndata();
}
inline const ::pb::SkillRebornData& SkillData::reborndata() const {
  // @@protoc_insertion_point(field_get:pb.SkillData.RebornData)
  return reborndata_ != NULL ? *reborndata_ : *default_instance_->reborndata_;
}
inline ::pb::SkillRebornData* SkillData::mutable_reborndata() {
  set_has_reborndata();
  if (reborndata_ == NULL) reborndata_ = new ::pb::SkillRebornData;
  // @@protoc_insertion_point(field_mutable:pb.SkillData.RebornData)
  return reborndata_;
}
inline ::pb::SkillRebornData* SkillData::release_reborndata() {
  clear_has_reborndata();
  ::pb::SkillRebornData* temp = reborndata_;
  reborndata_ = NULL;
  return temp;
}
inline void SkillData::set_allocated_reborndata(::pb::SkillRebornData* reborndata) {
  delete reborndata_;
  reborndata_ = reborndata;
  if (reborndata) {
    set_has_reborndata();
  } else {
    clear_has_reborndata();
  }
  // @@protoc_insertion_point(field_set_allocated:pb.SkillData.RebornData)
}

// optional .pb.SkillEnergyRecoverData EnergyRecoverData = 13;
inline bool SkillData::has_energyrecoverdata() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void SkillData::set_has_energyrecoverdata() {
  _has_bits_[0] |= 0x00001000u;
}
inline void SkillData::clear_has_energyrecoverdata() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void SkillData::clear_energyrecoverdata() {
  if (energyrecoverdata_ != NULL) energyrecoverdata_->::pb::SkillEnergyRecoverData::Clear();
  clear_has_energyrecoverdata();
}
inline const ::pb::SkillEnergyRecoverData& SkillData::energyrecoverdata() const {
  // @@protoc_insertion_point(field_get:pb.SkillData.EnergyRecoverData)
  return energyrecoverdata_ != NULL ? *energyrecoverdata_ : *default_instance_->energyrecoverdata_;
}
inline ::pb::SkillEnergyRecoverData* SkillData::mutable_energyrecoverdata() {
  set_has_energyrecoverdata();
  if (energyrecoverdata_ == NULL) energyrecoverdata_ = new ::pb::SkillEnergyRecoverData;
  // @@protoc_insertion_point(field_mutable:pb.SkillData.EnergyRecoverData)
  return energyrecoverdata_;
}
inline ::pb::SkillEnergyRecoverData* SkillData::release_energyrecoverdata() {
  clear_has_energyrecoverdata();
  ::pb::SkillEnergyRecoverData* temp = energyrecoverdata_;
  energyrecoverdata_ = NULL;
  return temp;
}
inline void SkillData::set_allocated_energyrecoverdata(::pb::SkillEnergyRecoverData* energyrecoverdata) {
  delete energyrecoverdata_;
  energyrecoverdata_ = energyrecoverdata;
  if (energyrecoverdata) {
    set_has_energyrecoverdata();
  } else {
    clear_has_energyrecoverdata();
  }
  // @@protoc_insertion_point(field_set_allocated:pb.SkillData.EnergyRecoverData)
}

// optional .pb.SkillSubSkillData SubSkillData = 14;
inline bool SkillData::has_subskilldata() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void SkillData::set_has_subskilldata() {
  _has_bits_[0] |= 0x00002000u;
}
inline void SkillData::clear_has_subskilldata() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void SkillData::clear_subskilldata() {
  if (subskilldata_ != NULL) subskilldata_->::pb::SkillSubSkillData::Clear();
  clear_has_subskilldata();
}
inline const ::pb::SkillSubSkillData& SkillData::subskilldata() const {
  // @@protoc_insertion_point(field_get:pb.SkillData.SubSkillData)
  return subskilldata_ != NULL ? *subskilldata_ : *default_instance_->subskilldata_;
}
inline ::pb::SkillSubSkillData* SkillData::mutable_subskilldata() {
  set_has_subskilldata();
  if (subskilldata_ == NULL) subskilldata_ = new ::pb::SkillSubSkillData;
  // @@protoc_insertion_point(field_mutable:pb.SkillData.SubSkillData)
  return subskilldata_;
}
inline ::pb::SkillSubSkillData* SkillData::release_subskilldata() {
  clear_has_subskilldata();
  ::pb::SkillSubSkillData* temp = subskilldata_;
  subskilldata_ = NULL;
  return temp;
}
inline void SkillData::set_allocated_subskilldata(::pb::SkillSubSkillData* subskilldata) {
  delete subskilldata_;
  subskilldata_ = subskilldata;
  if (subskilldata) {
    set_has_subskilldata();
  } else {
    clear_has_subskilldata();
  }
  // @@protoc_insertion_point(field_set_allocated:pb.SkillData.SubSkillData)
}

// optional .pb.SkillCurveData CurvaData = 15;
inline bool SkillData::has_curvadata() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void SkillData::set_has_curvadata() {
  _has_bits_[0] |= 0x00004000u;
}
inline void SkillData::clear_has_curvadata() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void SkillData::clear_curvadata() {
  if (curvadata_ != NULL) curvadata_->::pb::SkillCurveData::Clear();
  clear_has_curvadata();
}
inline const ::pb::SkillCurveData& SkillData::curvadata() const {
  // @@protoc_insertion_point(field_get:pb.SkillData.CurvaData)
  return curvadata_ != NULL ? *curvadata_ : *default_instance_->curvadata_;
}
inline ::pb::SkillCurveData* SkillData::mutable_curvadata() {
  set_has_curvadata();
  if (curvadata_ == NULL) curvadata_ = new ::pb::SkillCurveData;
  // @@protoc_insertion_point(field_mutable:pb.SkillData.CurvaData)
  return curvadata_;
}
inline ::pb::SkillCurveData* SkillData::release_curvadata() {
  clear_has_curvadata();
  ::pb::SkillCurveData* temp = curvadata_;
  curvadata_ = NULL;
  return temp;
}
inline void SkillData::set_allocated_curvadata(::pb::SkillCurveData* curvadata) {
  delete curvadata_;
  curvadata_ = curvadata;
  if (curvadata) {
    set_has_curvadata();
  } else {
    clear_has_curvadata();
  }
  // @@protoc_insertion_point(field_set_allocated:pb.SkillData.CurvaData)
}

// optional .pb.SkillGrabData GrabData = 16;
inline bool SkillData::has_grabdata() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void SkillData::set_has_grabdata() {
  _has_bits_[0] |= 0x00008000u;
}
inline void SkillData::clear_has_grabdata() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void SkillData::clear_grabdata() {
  if (grabdata_ != NULL) grabdata_->::pb::SkillGrabData::Clear();
  clear_has_grabdata();
}
inline const ::pb::SkillGrabData& SkillData::grabdata() const {
  // @@protoc_insertion_point(field_get:pb.SkillData.GrabData)
  return grabdata_ != NULL ? *grabdata_ : *default_instance_->grabdata_;
}
inline ::pb::SkillGrabData* SkillData::mutable_grabdata() {
  set_has_grabdata();
  if (grabdata_ == NULL) grabdata_ = new ::pb::SkillGrabData;
  // @@protoc_insertion_point(field_mutable:pb.SkillData.GrabData)
  return grabdata_;
}
inline ::pb::SkillGrabData* SkillData::release_grabdata() {
  clear_has_grabdata();
  ::pb::SkillGrabData* temp = grabdata_;
  grabdata_ = NULL;
  return temp;
}
inline void SkillData::set_allocated_grabdata(::pb::SkillGrabData* grabdata) {
  delete grabdata_;
  grabdata_ = grabdata;
  if (grabdata) {
    set_has_grabdata();
  } else {
    clear_has_grabdata();
  }
  // @@protoc_insertion_point(field_set_allocated:pb.SkillData.GrabData)
}

// optional .pb.SkillSummonObstacleData SummonObstacleData = 17;
inline bool SkillData::has_summonobstacledata() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void SkillData::set_has_summonobstacledata() {
  _has_bits_[0] |= 0x00010000u;
}
inline void SkillData::clear_has_summonobstacledata() {
  _has_bits_[0] &= ~0x00010000u;
}
inline void SkillData::clear_summonobstacledata() {
  if (summonobstacledata_ != NULL) summonobstacledata_->::pb::SkillSummonObstacleData::Clear();
  clear_has_summonobstacledata();
}
inline const ::pb::SkillSummonObstacleData& SkillData::summonobstacledata() const {
  // @@protoc_insertion_point(field_get:pb.SkillData.SummonObstacleData)
  return summonobstacledata_ != NULL ? *summonobstacledata_ : *default_instance_->summonobstacledata_;
}
inline ::pb::SkillSummonObstacleData* SkillData::mutable_summonobstacledata() {
  set_has_summonobstacledata();
  if (summonobstacledata_ == NULL) summonobstacledata_ = new ::pb::SkillSummonObstacleData;
  // @@protoc_insertion_point(field_mutable:pb.SkillData.SummonObstacleData)
  return summonobstacledata_;
}
inline ::pb::SkillSummonObstacleData* SkillData::release_summonobstacledata() {
  clear_has_summonobstacledata();
  ::pb::SkillSummonObstacleData* temp = summonobstacledata_;
  summonobstacledata_ = NULL;
  return temp;
}
inline void SkillData::set_allocated_summonobstacledata(::pb::SkillSummonObstacleData* summonobstacledata) {
  delete summonobstacledata_;
  summonobstacledata_ = summonobstacledata;
  if (summonobstacledata) {
    set_has_summonobstacledata();
  } else {
    clear_has_summonobstacledata();
  }
  // @@protoc_insertion_point(field_set_allocated:pb.SkillData.SummonObstacleData)
}

// optional .pb.SkillEnergyRecoverData MusouRecoverData = 18;
inline bool SkillData::has_musourecoverdata() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
inline void SkillData::set_has_musourecoverdata() {
  _has_bits_[0] |= 0x00020000u;
}
inline void SkillData::clear_has_musourecoverdata() {
  _has_bits_[0] &= ~0x00020000u;
}
inline void SkillData::clear_musourecoverdata() {
  if (musourecoverdata_ != NULL) musourecoverdata_->::pb::SkillEnergyRecoverData::Clear();
  clear_has_musourecoverdata();
}
inline const ::pb::SkillEnergyRecoverData& SkillData::musourecoverdata() const {
  // @@protoc_insertion_point(field_get:pb.SkillData.MusouRecoverData)
  return musourecoverdata_ != NULL ? *musourecoverdata_ : *default_instance_->musourecoverdata_;
}
inline ::pb::SkillEnergyRecoverData* SkillData::mutable_musourecoverdata() {
  set_has_musourecoverdata();
  if (musourecoverdata_ == NULL) musourecoverdata_ = new ::pb::SkillEnergyRecoverData;
  // @@protoc_insertion_point(field_mutable:pb.SkillData.MusouRecoverData)
  return musourecoverdata_;
}
inline ::pb::SkillEnergyRecoverData* SkillData::release_musourecoverdata() {
  clear_has_musourecoverdata();
  ::pb::SkillEnergyRecoverData* temp = musourecoverdata_;
  musourecoverdata_ = NULL;
  return temp;
}
inline void SkillData::set_allocated_musourecoverdata(::pb::SkillEnergyRecoverData* musourecoverdata) {
  delete musourecoverdata_;
  musourecoverdata_ = musourecoverdata;
  if (musourecoverdata) {
    set_has_musourecoverdata();
  } else {
    clear_has_musourecoverdata();
  }
  // @@protoc_insertion_point(field_set_allocated:pb.SkillData.MusouRecoverData)
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace pb

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_module_2fSkillData_2eproto__INCLUDED
