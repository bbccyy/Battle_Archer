// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: net/FightSoul.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "net/FightSoul.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace pb {

namespace {

const ::google::protobuf::Descriptor* TFightSoulHuntInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TFightSoulHuntInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* TFightSoulGetHuntInfoRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TFightSoulGetHuntInfoRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* TFightSoulHuntSoulRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TFightSoulHuntSoulRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* TFightSoulGiveUpBattleReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TFightSoulGiveUpBattleReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* TFightSoulReportBattleReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TFightSoulReportBattleReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* TFightSoulReportBattleRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TFightSoulReportBattleRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* TFightSoulCombineRecord_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TFightSoulCombineRecord_reflection_ = NULL;
const ::google::protobuf::Descriptor* TFightSoulGetCombineRecordRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TFightSoulGetCombineRecordRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* TFightSoulCombineSoulReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TFightSoulCombineSoulReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* TFightSoulCombineSoulRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TFightSoulCombineSoulRsp_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_net_2fFightSoul_2eproto() {
  protobuf_AddDesc_net_2fFightSoul_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "net/FightSoul.proto");
  GOOGLE_CHECK(file != NULL);
  TFightSoulHuntInfo_descriptor_ = file->message_type(0);
  static const int TFightSoulHuntInfo_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TFightSoulHuntInfo, cursoulheroid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TFightSoulHuntInfo, curhuntnum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TFightSoulHuntInfo, huntlimit_),
  };
  TFightSoulHuntInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TFightSoulHuntInfo_descriptor_,
      TFightSoulHuntInfo::default_instance_,
      TFightSoulHuntInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TFightSoulHuntInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TFightSoulHuntInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TFightSoulHuntInfo));
  TFightSoulGetHuntInfoRsp_descriptor_ = file->message_type(1);
  static const int TFightSoulGetHuntInfoRsp_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TFightSoulGetHuntInfoRsp, huntinfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TFightSoulGetHuntInfoRsp, battleeventid_),
  };
  TFightSoulGetHuntInfoRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TFightSoulGetHuntInfoRsp_descriptor_,
      TFightSoulGetHuntInfoRsp::default_instance_,
      TFightSoulGetHuntInfoRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TFightSoulGetHuntInfoRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TFightSoulGetHuntInfoRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TFightSoulGetHuntInfoRsp));
  TFightSoulHuntSoulRsp_descriptor_ = file->message_type(2);
  static const int TFightSoulHuntSoulRsp_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TFightSoulHuntSoulRsp, soularr_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TFightSoulHuntSoulRsp, extraarr_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TFightSoulHuntSoulRsp, eventid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TFightSoulHuntSoulRsp, huntinfo_),
  };
  TFightSoulHuntSoulRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TFightSoulHuntSoulRsp_descriptor_,
      TFightSoulHuntSoulRsp::default_instance_,
      TFightSoulHuntSoulRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TFightSoulHuntSoulRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TFightSoulHuntSoulRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TFightSoulHuntSoulRsp));
  TFightSoulGiveUpBattleReq_descriptor_ = file->message_type(3);
  static const int TFightSoulGiveUpBattleReq_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TFightSoulGiveUpBattleReq, battleeventid_),
  };
  TFightSoulGiveUpBattleReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TFightSoulGiveUpBattleReq_descriptor_,
      TFightSoulGiveUpBattleReq::default_instance_,
      TFightSoulGiveUpBattleReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TFightSoulGiveUpBattleReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TFightSoulGiveUpBattleReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TFightSoulGiveUpBattleReq));
  TFightSoulReportBattleReq_descriptor_ = file->message_type(4);
  static const int TFightSoulReportBattleReq_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TFightSoulReportBattleReq, battleeventid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TFightSoulReportBattleReq, battleresult_),
  };
  TFightSoulReportBattleReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TFightSoulReportBattleReq_descriptor_,
      TFightSoulReportBattleReq::default_instance_,
      TFightSoulReportBattleReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TFightSoulReportBattleReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TFightSoulReportBattleReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TFightSoulReportBattleReq));
  TFightSoulReportBattleRsp_descriptor_ = file->message_type(5);
  static const int TFightSoulReportBattleRsp_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TFightSoulReportBattleRsp, ispass_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TFightSoulReportBattleRsp, rewardarr_),
  };
  TFightSoulReportBattleRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TFightSoulReportBattleRsp_descriptor_,
      TFightSoulReportBattleRsp::default_instance_,
      TFightSoulReportBattleRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TFightSoulReportBattleRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TFightSoulReportBattleRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TFightSoulReportBattleRsp));
  TFightSoulCombineRecord_descriptor_ = file->message_type(6);
  static const int TFightSoulCombineRecord_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TFightSoulCombineRecord, quality_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TFightSoulCombineRecord, failnum_),
  };
  TFightSoulCombineRecord_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TFightSoulCombineRecord_descriptor_,
      TFightSoulCombineRecord::default_instance_,
      TFightSoulCombineRecord_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TFightSoulCombineRecord, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TFightSoulCombineRecord, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TFightSoulCombineRecord));
  TFightSoulGetCombineRecordRsp_descriptor_ = file->message_type(7);
  static const int TFightSoulGetCombineRecordRsp_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TFightSoulGetCombineRecordRsp, recordarr_),
  };
  TFightSoulGetCombineRecordRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TFightSoulGetCombineRecordRsp_descriptor_,
      TFightSoulGetCombineRecordRsp::default_instance_,
      TFightSoulGetCombineRecordRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TFightSoulGetCombineRecordRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TFightSoulGetCombineRecordRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TFightSoulGetCombineRecordRsp));
  TFightSoulCombineSoulReq_descriptor_ = file->message_type(8);
  static const int TFightSoulCombineSoulReq_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TFightSoulCombineSoulReq, itemarr_),
  };
  TFightSoulCombineSoulReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TFightSoulCombineSoulReq_descriptor_,
      TFightSoulCombineSoulReq::default_instance_,
      TFightSoulCombineSoulReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TFightSoulCombineSoulReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TFightSoulCombineSoulReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TFightSoulCombineSoulReq));
  TFightSoulCombineSoulRsp_descriptor_ = file->message_type(9);
  static const int TFightSoulCombineSoulRsp_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TFightSoulCombineSoulRsp, issuccess_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TFightSoulCombineSoulRsp, soulitem_),
  };
  TFightSoulCombineSoulRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TFightSoulCombineSoulRsp_descriptor_,
      TFightSoulCombineSoulRsp::default_instance_,
      TFightSoulCombineSoulRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TFightSoulCombineSoulRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TFightSoulCombineSoulRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TFightSoulCombineSoulRsp));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_net_2fFightSoul_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TFightSoulHuntInfo_descriptor_, &TFightSoulHuntInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TFightSoulGetHuntInfoRsp_descriptor_, &TFightSoulGetHuntInfoRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TFightSoulHuntSoulRsp_descriptor_, &TFightSoulHuntSoulRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TFightSoulGiveUpBattleReq_descriptor_, &TFightSoulGiveUpBattleReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TFightSoulReportBattleReq_descriptor_, &TFightSoulReportBattleReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TFightSoulReportBattleRsp_descriptor_, &TFightSoulReportBattleRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TFightSoulCombineRecord_descriptor_, &TFightSoulCombineRecord::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TFightSoulGetCombineRecordRsp_descriptor_, &TFightSoulGetCombineRecordRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TFightSoulCombineSoulReq_descriptor_, &TFightSoulCombineSoulReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TFightSoulCombineSoulRsp_descriptor_, &TFightSoulCombineSoulRsp::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_net_2fFightSoul_2eproto() {
  delete TFightSoulHuntInfo::default_instance_;
  delete TFightSoulHuntInfo_reflection_;
  delete TFightSoulGetHuntInfoRsp::default_instance_;
  delete TFightSoulGetHuntInfoRsp_reflection_;
  delete TFightSoulHuntSoulRsp::default_instance_;
  delete TFightSoulHuntSoulRsp_reflection_;
  delete TFightSoulGiveUpBattleReq::default_instance_;
  delete TFightSoulGiveUpBattleReq_reflection_;
  delete TFightSoulReportBattleReq::default_instance_;
  delete TFightSoulReportBattleReq_reflection_;
  delete TFightSoulReportBattleRsp::default_instance_;
  delete TFightSoulReportBattleRsp_reflection_;
  delete TFightSoulCombineRecord::default_instance_;
  delete TFightSoulCombineRecord_reflection_;
  delete TFightSoulGetCombineRecordRsp::default_instance_;
  delete TFightSoulGetCombineRecordRsp_reflection_;
  delete TFightSoulCombineSoulReq::default_instance_;
  delete TFightSoulCombineSoulReq_reflection_;
  delete TFightSoulCombineSoulRsp::default_instance_;
  delete TFightSoulCombineSoulRsp_reflection_;
}

void protobuf_AddDesc_net_2fFightSoul_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::pb::protobuf_AddDesc_net_2fCommonReward_2eproto();
  ::pb::protobuf_AddDesc_net_2fBattle_2eproto();
  ::pb::protobuf_AddDesc_net_2fCommon_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\023net/FightSoul.proto\022\002pb\032\026net/CommonRew"
    "ard.proto\032\020net/Battle.proto\032\020net/Common."
    "proto\"R\n\022TFightSoulHuntInfo\022\025\n\rCurSoulHe"
    "roId\030\001 \001(\r\022\022\n\nCurHuntNum\030\002 \001(\r\022\021\n\tHuntLi"
    "mit\030\003 \001(\r\"[\n\030TFightSoulGetHuntInfoRsp\022(\n"
    "\010HuntInfo\030\001 \001(\0132\026.pb.TFightSoulHuntInfo\022"
    "\025\n\rBattleEventId\030\002 \001(\r\"\233\001\n\025TFightSoulHun"
    "tSoulRsp\022\"\n\007SoulArr\030\001 \003(\0132\021.pb.TCommonRe"
    "ward\022#\n\010ExtraArr\030\002 \003(\0132\021.pb.TCommonRewar"
    "d\022\017\n\007EventId\030\003 \001(\r\022(\n\010HuntInfo\030\004 \001(\0132\026.p"
    "b.TFightSoulHuntInfo\"2\n\031TFightSoulGiveUp"
    "BattleReq\022\025\n\rBattleEventId\030\001 \001(\r\"[\n\031TFig"
    "htSoulReportBattleReq\022\025\n\rBattleEventId\030\001"
    " \001(\r\022\'\n\014BattleResult\030\002 \001(\0132\021.pb.TBattleR"
    "esult\"Q\n\031TFightSoulReportBattleRsp\022\016\n\006Is"
    "Pass\030\001 \001(\r\022$\n\tRewardArr\030\002 \003(\0132\021.pb.TComm"
    "onReward\";\n\027TFightSoulCombineRecord\022\017\n\007Q"
    "uality\030\001 \001(\r\022\017\n\007FailNum\030\002 \001(\r\"O\n\035TFightS"
    "oulGetCombineRecordRsp\022.\n\tRecordArr\030\001 \003("
    "\0132\033.pb.TFightSoulCombineRecord\"<\n\030TFight"
    "SoulCombineSoulReq\022 \n\007ItemArr\030\001 \003(\0132\017.pb"
    ".TSimpleItem\"P\n\030TFightSoulCombineSoulRsp"
    "\022\021\n\tIsSuccess\030\001 \001(\r\022!\n\010SoulItem\030\002 \001(\0132\017."
    "pb.TSimpleItem", 934);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "net/FightSoul.proto", &protobuf_RegisterTypes);
  TFightSoulHuntInfo::default_instance_ = new TFightSoulHuntInfo();
  TFightSoulGetHuntInfoRsp::default_instance_ = new TFightSoulGetHuntInfoRsp();
  TFightSoulHuntSoulRsp::default_instance_ = new TFightSoulHuntSoulRsp();
  TFightSoulGiveUpBattleReq::default_instance_ = new TFightSoulGiveUpBattleReq();
  TFightSoulReportBattleReq::default_instance_ = new TFightSoulReportBattleReq();
  TFightSoulReportBattleRsp::default_instance_ = new TFightSoulReportBattleRsp();
  TFightSoulCombineRecord::default_instance_ = new TFightSoulCombineRecord();
  TFightSoulGetCombineRecordRsp::default_instance_ = new TFightSoulGetCombineRecordRsp();
  TFightSoulCombineSoulReq::default_instance_ = new TFightSoulCombineSoulReq();
  TFightSoulCombineSoulRsp::default_instance_ = new TFightSoulCombineSoulRsp();
  TFightSoulHuntInfo::default_instance_->InitAsDefaultInstance();
  TFightSoulGetHuntInfoRsp::default_instance_->InitAsDefaultInstance();
  TFightSoulHuntSoulRsp::default_instance_->InitAsDefaultInstance();
  TFightSoulGiveUpBattleReq::default_instance_->InitAsDefaultInstance();
  TFightSoulReportBattleReq::default_instance_->InitAsDefaultInstance();
  TFightSoulReportBattleRsp::default_instance_->InitAsDefaultInstance();
  TFightSoulCombineRecord::default_instance_->InitAsDefaultInstance();
  TFightSoulGetCombineRecordRsp::default_instance_->InitAsDefaultInstance();
  TFightSoulCombineSoulReq::default_instance_->InitAsDefaultInstance();
  TFightSoulCombineSoulRsp::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_net_2fFightSoul_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_net_2fFightSoul_2eproto {
  StaticDescriptorInitializer_net_2fFightSoul_2eproto() {
    protobuf_AddDesc_net_2fFightSoul_2eproto();
  }
} static_descriptor_initializer_net_2fFightSoul_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int TFightSoulHuntInfo::kCurSoulHeroIdFieldNumber;
const int TFightSoulHuntInfo::kCurHuntNumFieldNumber;
const int TFightSoulHuntInfo::kHuntLimitFieldNumber;
#endif  // !_MSC_VER

TFightSoulHuntInfo::TFightSoulHuntInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TFightSoulHuntInfo)
}

void TFightSoulHuntInfo::InitAsDefaultInstance() {
}

TFightSoulHuntInfo::TFightSoulHuntInfo(const TFightSoulHuntInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TFightSoulHuntInfo)
}

void TFightSoulHuntInfo::SharedCtor() {
  _cached_size_ = 0;
  cursoulheroid_ = 0u;
  curhuntnum_ = 0u;
  huntlimit_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TFightSoulHuntInfo::~TFightSoulHuntInfo() {
  // @@protoc_insertion_point(destructor:pb.TFightSoulHuntInfo)
  SharedDtor();
}

void TFightSoulHuntInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TFightSoulHuntInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TFightSoulHuntInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TFightSoulHuntInfo_descriptor_;
}

const TFightSoulHuntInfo& TFightSoulHuntInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fFightSoul_2eproto();
  return *default_instance_;
}

TFightSoulHuntInfo* TFightSoulHuntInfo::default_instance_ = NULL;

TFightSoulHuntInfo* TFightSoulHuntInfo::New() const {
  return new TFightSoulHuntInfo;
}

void TFightSoulHuntInfo::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<TFightSoulHuntInfo*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(cursoulheroid_, huntlimit_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TFightSoulHuntInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TFightSoulHuntInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 CurSoulHeroId = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &cursoulheroid_)));
          set_has_cursoulheroid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_CurHuntNum;
        break;
      }

      // optional uint32 CurHuntNum = 2;
      case 2: {
        if (tag == 16) {
         parse_CurHuntNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &curhuntnum_)));
          set_has_curhuntnum();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_HuntLimit;
        break;
      }

      // optional uint32 HuntLimit = 3;
      case 3: {
        if (tag == 24) {
         parse_HuntLimit:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &huntlimit_)));
          set_has_huntlimit();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TFightSoulHuntInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TFightSoulHuntInfo)
  return false;
#undef DO_
}

void TFightSoulHuntInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TFightSoulHuntInfo)
  // optional uint32 CurSoulHeroId = 1;
  if (has_cursoulheroid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->cursoulheroid(), output);
  }

  // optional uint32 CurHuntNum = 2;
  if (has_curhuntnum()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->curhuntnum(), output);
  }

  // optional uint32 HuntLimit = 3;
  if (has_huntlimit()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->huntlimit(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TFightSoulHuntInfo)
}

::google::protobuf::uint8* TFightSoulHuntInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TFightSoulHuntInfo)
  // optional uint32 CurSoulHeroId = 1;
  if (has_cursoulheroid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->cursoulheroid(), target);
  }

  // optional uint32 CurHuntNum = 2;
  if (has_curhuntnum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->curhuntnum(), target);
  }

  // optional uint32 HuntLimit = 3;
  if (has_huntlimit()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->huntlimit(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TFightSoulHuntInfo)
  return target;
}

int TFightSoulHuntInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 CurSoulHeroId = 1;
    if (has_cursoulheroid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->cursoulheroid());
    }

    // optional uint32 CurHuntNum = 2;
    if (has_curhuntnum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->curhuntnum());
    }

    // optional uint32 HuntLimit = 3;
    if (has_huntlimit()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->huntlimit());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TFightSoulHuntInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TFightSoulHuntInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TFightSoulHuntInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TFightSoulHuntInfo::MergeFrom(const TFightSoulHuntInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cursoulheroid()) {
      set_cursoulheroid(from.cursoulheroid());
    }
    if (from.has_curhuntnum()) {
      set_curhuntnum(from.curhuntnum());
    }
    if (from.has_huntlimit()) {
      set_huntlimit(from.huntlimit());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TFightSoulHuntInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TFightSoulHuntInfo::CopyFrom(const TFightSoulHuntInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TFightSoulHuntInfo::IsInitialized() const {

  return true;
}

void TFightSoulHuntInfo::Swap(TFightSoulHuntInfo* other) {
  if (other != this) {
    std::swap(cursoulheroid_, other->cursoulheroid_);
    std::swap(curhuntnum_, other->curhuntnum_);
    std::swap(huntlimit_, other->huntlimit_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TFightSoulHuntInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TFightSoulHuntInfo_descriptor_;
  metadata.reflection = TFightSoulHuntInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TFightSoulGetHuntInfoRsp::kHuntInfoFieldNumber;
const int TFightSoulGetHuntInfoRsp::kBattleEventIdFieldNumber;
#endif  // !_MSC_VER

TFightSoulGetHuntInfoRsp::TFightSoulGetHuntInfoRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TFightSoulGetHuntInfoRsp)
}

void TFightSoulGetHuntInfoRsp::InitAsDefaultInstance() {
  huntinfo_ = const_cast< ::pb::TFightSoulHuntInfo*>(&::pb::TFightSoulHuntInfo::default_instance());
}

TFightSoulGetHuntInfoRsp::TFightSoulGetHuntInfoRsp(const TFightSoulGetHuntInfoRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TFightSoulGetHuntInfoRsp)
}

void TFightSoulGetHuntInfoRsp::SharedCtor() {
  _cached_size_ = 0;
  huntinfo_ = NULL;
  battleeventid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TFightSoulGetHuntInfoRsp::~TFightSoulGetHuntInfoRsp() {
  // @@protoc_insertion_point(destructor:pb.TFightSoulGetHuntInfoRsp)
  SharedDtor();
}

void TFightSoulGetHuntInfoRsp::SharedDtor() {
  if (this != default_instance_) {
    delete huntinfo_;
  }
}

void TFightSoulGetHuntInfoRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TFightSoulGetHuntInfoRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TFightSoulGetHuntInfoRsp_descriptor_;
}

const TFightSoulGetHuntInfoRsp& TFightSoulGetHuntInfoRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fFightSoul_2eproto();
  return *default_instance_;
}

TFightSoulGetHuntInfoRsp* TFightSoulGetHuntInfoRsp::default_instance_ = NULL;

TFightSoulGetHuntInfoRsp* TFightSoulGetHuntInfoRsp::New() const {
  return new TFightSoulGetHuntInfoRsp;
}

void TFightSoulGetHuntInfoRsp::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    if (has_huntinfo()) {
      if (huntinfo_ != NULL) huntinfo_->::pb::TFightSoulHuntInfo::Clear();
    }
    battleeventid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TFightSoulGetHuntInfoRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TFightSoulGetHuntInfoRsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .pb.TFightSoulHuntInfo HuntInfo = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_huntinfo()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_BattleEventId;
        break;
      }

      // optional uint32 BattleEventId = 2;
      case 2: {
        if (tag == 16) {
         parse_BattleEventId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &battleeventid_)));
          set_has_battleeventid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TFightSoulGetHuntInfoRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TFightSoulGetHuntInfoRsp)
  return false;
#undef DO_
}

void TFightSoulGetHuntInfoRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TFightSoulGetHuntInfoRsp)
  // optional .pb.TFightSoulHuntInfo HuntInfo = 1;
  if (has_huntinfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->huntinfo(), output);
  }

  // optional uint32 BattleEventId = 2;
  if (has_battleeventid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->battleeventid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TFightSoulGetHuntInfoRsp)
}

::google::protobuf::uint8* TFightSoulGetHuntInfoRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TFightSoulGetHuntInfoRsp)
  // optional .pb.TFightSoulHuntInfo HuntInfo = 1;
  if (has_huntinfo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->huntinfo(), target);
  }

  // optional uint32 BattleEventId = 2;
  if (has_battleeventid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->battleeventid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TFightSoulGetHuntInfoRsp)
  return target;
}

int TFightSoulGetHuntInfoRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .pb.TFightSoulHuntInfo HuntInfo = 1;
    if (has_huntinfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->huntinfo());
    }

    // optional uint32 BattleEventId = 2;
    if (has_battleeventid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->battleeventid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TFightSoulGetHuntInfoRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TFightSoulGetHuntInfoRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TFightSoulGetHuntInfoRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TFightSoulGetHuntInfoRsp::MergeFrom(const TFightSoulGetHuntInfoRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_huntinfo()) {
      mutable_huntinfo()->::pb::TFightSoulHuntInfo::MergeFrom(from.huntinfo());
    }
    if (from.has_battleeventid()) {
      set_battleeventid(from.battleeventid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TFightSoulGetHuntInfoRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TFightSoulGetHuntInfoRsp::CopyFrom(const TFightSoulGetHuntInfoRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TFightSoulGetHuntInfoRsp::IsInitialized() const {

  return true;
}

void TFightSoulGetHuntInfoRsp::Swap(TFightSoulGetHuntInfoRsp* other) {
  if (other != this) {
    std::swap(huntinfo_, other->huntinfo_);
    std::swap(battleeventid_, other->battleeventid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TFightSoulGetHuntInfoRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TFightSoulGetHuntInfoRsp_descriptor_;
  metadata.reflection = TFightSoulGetHuntInfoRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TFightSoulHuntSoulRsp::kSoulArrFieldNumber;
const int TFightSoulHuntSoulRsp::kExtraArrFieldNumber;
const int TFightSoulHuntSoulRsp::kEventIdFieldNumber;
const int TFightSoulHuntSoulRsp::kHuntInfoFieldNumber;
#endif  // !_MSC_VER

TFightSoulHuntSoulRsp::TFightSoulHuntSoulRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TFightSoulHuntSoulRsp)
}

void TFightSoulHuntSoulRsp::InitAsDefaultInstance() {
  huntinfo_ = const_cast< ::pb::TFightSoulHuntInfo*>(&::pb::TFightSoulHuntInfo::default_instance());
}

TFightSoulHuntSoulRsp::TFightSoulHuntSoulRsp(const TFightSoulHuntSoulRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TFightSoulHuntSoulRsp)
}

void TFightSoulHuntSoulRsp::SharedCtor() {
  _cached_size_ = 0;
  eventid_ = 0u;
  huntinfo_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TFightSoulHuntSoulRsp::~TFightSoulHuntSoulRsp() {
  // @@protoc_insertion_point(destructor:pb.TFightSoulHuntSoulRsp)
  SharedDtor();
}

void TFightSoulHuntSoulRsp::SharedDtor() {
  if (this != default_instance_) {
    delete huntinfo_;
  }
}

void TFightSoulHuntSoulRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TFightSoulHuntSoulRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TFightSoulHuntSoulRsp_descriptor_;
}

const TFightSoulHuntSoulRsp& TFightSoulHuntSoulRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fFightSoul_2eproto();
  return *default_instance_;
}

TFightSoulHuntSoulRsp* TFightSoulHuntSoulRsp::default_instance_ = NULL;

TFightSoulHuntSoulRsp* TFightSoulHuntSoulRsp::New() const {
  return new TFightSoulHuntSoulRsp;
}

void TFightSoulHuntSoulRsp::Clear() {
  if (_has_bits_[0 / 32] & 12) {
    eventid_ = 0u;
    if (has_huntinfo()) {
      if (huntinfo_ != NULL) huntinfo_->::pb::TFightSoulHuntInfo::Clear();
    }
  }
  soularr_.Clear();
  extraarr_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TFightSoulHuntSoulRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TFightSoulHuntSoulRsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .pb.TCommonReward SoulArr = 1;
      case 1: {
        if (tag == 10) {
         parse_SoulArr:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_soularr()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_SoulArr;
        if (input->ExpectTag(18)) goto parse_ExtraArr;
        break;
      }

      // repeated .pb.TCommonReward ExtraArr = 2;
      case 2: {
        if (tag == 18) {
         parse_ExtraArr:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_extraarr()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_ExtraArr;
        if (input->ExpectTag(24)) goto parse_EventId;
        break;
      }

      // optional uint32 EventId = 3;
      case 3: {
        if (tag == 24) {
         parse_EventId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &eventid_)));
          set_has_eventid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_HuntInfo;
        break;
      }

      // optional .pb.TFightSoulHuntInfo HuntInfo = 4;
      case 4: {
        if (tag == 34) {
         parse_HuntInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_huntinfo()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TFightSoulHuntSoulRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TFightSoulHuntSoulRsp)
  return false;
#undef DO_
}

void TFightSoulHuntSoulRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TFightSoulHuntSoulRsp)
  // repeated .pb.TCommonReward SoulArr = 1;
  for (int i = 0; i < this->soularr_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->soularr(i), output);
  }

  // repeated .pb.TCommonReward ExtraArr = 2;
  for (int i = 0; i < this->extraarr_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->extraarr(i), output);
  }

  // optional uint32 EventId = 3;
  if (has_eventid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->eventid(), output);
  }

  // optional .pb.TFightSoulHuntInfo HuntInfo = 4;
  if (has_huntinfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->huntinfo(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TFightSoulHuntSoulRsp)
}

::google::protobuf::uint8* TFightSoulHuntSoulRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TFightSoulHuntSoulRsp)
  // repeated .pb.TCommonReward SoulArr = 1;
  for (int i = 0; i < this->soularr_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->soularr(i), target);
  }

  // repeated .pb.TCommonReward ExtraArr = 2;
  for (int i = 0; i < this->extraarr_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->extraarr(i), target);
  }

  // optional uint32 EventId = 3;
  if (has_eventid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->eventid(), target);
  }

  // optional .pb.TFightSoulHuntInfo HuntInfo = 4;
  if (has_huntinfo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->huntinfo(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TFightSoulHuntSoulRsp)
  return target;
}

int TFightSoulHuntSoulRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[2 / 32] & (0xffu << (2 % 32))) {
    // optional uint32 EventId = 3;
    if (has_eventid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->eventid());
    }

    // optional .pb.TFightSoulHuntInfo HuntInfo = 4;
    if (has_huntinfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->huntinfo());
    }

  }
  // repeated .pb.TCommonReward SoulArr = 1;
  total_size += 1 * this->soularr_size();
  for (int i = 0; i < this->soularr_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->soularr(i));
  }

  // repeated .pb.TCommonReward ExtraArr = 2;
  total_size += 1 * this->extraarr_size();
  for (int i = 0; i < this->extraarr_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->extraarr(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TFightSoulHuntSoulRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TFightSoulHuntSoulRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TFightSoulHuntSoulRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TFightSoulHuntSoulRsp::MergeFrom(const TFightSoulHuntSoulRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  soularr_.MergeFrom(from.soularr_);
  extraarr_.MergeFrom(from.extraarr_);
  if (from._has_bits_[2 / 32] & (0xffu << (2 % 32))) {
    if (from.has_eventid()) {
      set_eventid(from.eventid());
    }
    if (from.has_huntinfo()) {
      mutable_huntinfo()->::pb::TFightSoulHuntInfo::MergeFrom(from.huntinfo());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TFightSoulHuntSoulRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TFightSoulHuntSoulRsp::CopyFrom(const TFightSoulHuntSoulRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TFightSoulHuntSoulRsp::IsInitialized() const {

  return true;
}

void TFightSoulHuntSoulRsp::Swap(TFightSoulHuntSoulRsp* other) {
  if (other != this) {
    soularr_.Swap(&other->soularr_);
    extraarr_.Swap(&other->extraarr_);
    std::swap(eventid_, other->eventid_);
    std::swap(huntinfo_, other->huntinfo_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TFightSoulHuntSoulRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TFightSoulHuntSoulRsp_descriptor_;
  metadata.reflection = TFightSoulHuntSoulRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TFightSoulGiveUpBattleReq::kBattleEventIdFieldNumber;
#endif  // !_MSC_VER

TFightSoulGiveUpBattleReq::TFightSoulGiveUpBattleReq()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TFightSoulGiveUpBattleReq)
}

void TFightSoulGiveUpBattleReq::InitAsDefaultInstance() {
}

TFightSoulGiveUpBattleReq::TFightSoulGiveUpBattleReq(const TFightSoulGiveUpBattleReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TFightSoulGiveUpBattleReq)
}

void TFightSoulGiveUpBattleReq::SharedCtor() {
  _cached_size_ = 0;
  battleeventid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TFightSoulGiveUpBattleReq::~TFightSoulGiveUpBattleReq() {
  // @@protoc_insertion_point(destructor:pb.TFightSoulGiveUpBattleReq)
  SharedDtor();
}

void TFightSoulGiveUpBattleReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TFightSoulGiveUpBattleReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TFightSoulGiveUpBattleReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TFightSoulGiveUpBattleReq_descriptor_;
}

const TFightSoulGiveUpBattleReq& TFightSoulGiveUpBattleReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fFightSoul_2eproto();
  return *default_instance_;
}

TFightSoulGiveUpBattleReq* TFightSoulGiveUpBattleReq::default_instance_ = NULL;

TFightSoulGiveUpBattleReq* TFightSoulGiveUpBattleReq::New() const {
  return new TFightSoulGiveUpBattleReq;
}

void TFightSoulGiveUpBattleReq::Clear() {
  battleeventid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TFightSoulGiveUpBattleReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TFightSoulGiveUpBattleReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 BattleEventId = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &battleeventid_)));
          set_has_battleeventid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TFightSoulGiveUpBattleReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TFightSoulGiveUpBattleReq)
  return false;
#undef DO_
}

void TFightSoulGiveUpBattleReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TFightSoulGiveUpBattleReq)
  // optional uint32 BattleEventId = 1;
  if (has_battleeventid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->battleeventid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TFightSoulGiveUpBattleReq)
}

::google::protobuf::uint8* TFightSoulGiveUpBattleReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TFightSoulGiveUpBattleReq)
  // optional uint32 BattleEventId = 1;
  if (has_battleeventid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->battleeventid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TFightSoulGiveUpBattleReq)
  return target;
}

int TFightSoulGiveUpBattleReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 BattleEventId = 1;
    if (has_battleeventid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->battleeventid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TFightSoulGiveUpBattleReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TFightSoulGiveUpBattleReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TFightSoulGiveUpBattleReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TFightSoulGiveUpBattleReq::MergeFrom(const TFightSoulGiveUpBattleReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_battleeventid()) {
      set_battleeventid(from.battleeventid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TFightSoulGiveUpBattleReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TFightSoulGiveUpBattleReq::CopyFrom(const TFightSoulGiveUpBattleReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TFightSoulGiveUpBattleReq::IsInitialized() const {

  return true;
}

void TFightSoulGiveUpBattleReq::Swap(TFightSoulGiveUpBattleReq* other) {
  if (other != this) {
    std::swap(battleeventid_, other->battleeventid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TFightSoulGiveUpBattleReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TFightSoulGiveUpBattleReq_descriptor_;
  metadata.reflection = TFightSoulGiveUpBattleReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TFightSoulReportBattleReq::kBattleEventIdFieldNumber;
const int TFightSoulReportBattleReq::kBattleResultFieldNumber;
#endif  // !_MSC_VER

TFightSoulReportBattleReq::TFightSoulReportBattleReq()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TFightSoulReportBattleReq)
}

void TFightSoulReportBattleReq::InitAsDefaultInstance() {
  battleresult_ = const_cast< ::pb::TBattleResult*>(&::pb::TBattleResult::default_instance());
}

TFightSoulReportBattleReq::TFightSoulReportBattleReq(const TFightSoulReportBattleReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TFightSoulReportBattleReq)
}

void TFightSoulReportBattleReq::SharedCtor() {
  _cached_size_ = 0;
  battleeventid_ = 0u;
  battleresult_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TFightSoulReportBattleReq::~TFightSoulReportBattleReq() {
  // @@protoc_insertion_point(destructor:pb.TFightSoulReportBattleReq)
  SharedDtor();
}

void TFightSoulReportBattleReq::SharedDtor() {
  if (this != default_instance_) {
    delete battleresult_;
  }
}

void TFightSoulReportBattleReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TFightSoulReportBattleReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TFightSoulReportBattleReq_descriptor_;
}

const TFightSoulReportBattleReq& TFightSoulReportBattleReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fFightSoul_2eproto();
  return *default_instance_;
}

TFightSoulReportBattleReq* TFightSoulReportBattleReq::default_instance_ = NULL;

TFightSoulReportBattleReq* TFightSoulReportBattleReq::New() const {
  return new TFightSoulReportBattleReq;
}

void TFightSoulReportBattleReq::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    battleeventid_ = 0u;
    if (has_battleresult()) {
      if (battleresult_ != NULL) battleresult_->::pb::TBattleResult::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TFightSoulReportBattleReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TFightSoulReportBattleReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 BattleEventId = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &battleeventid_)));
          set_has_battleeventid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_BattleResult;
        break;
      }

      // optional .pb.TBattleResult BattleResult = 2;
      case 2: {
        if (tag == 18) {
         parse_BattleResult:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_battleresult()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TFightSoulReportBattleReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TFightSoulReportBattleReq)
  return false;
#undef DO_
}

void TFightSoulReportBattleReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TFightSoulReportBattleReq)
  // optional uint32 BattleEventId = 1;
  if (has_battleeventid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->battleeventid(), output);
  }

  // optional .pb.TBattleResult BattleResult = 2;
  if (has_battleresult()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->battleresult(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TFightSoulReportBattleReq)
}

::google::protobuf::uint8* TFightSoulReportBattleReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TFightSoulReportBattleReq)
  // optional uint32 BattleEventId = 1;
  if (has_battleeventid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->battleeventid(), target);
  }

  // optional .pb.TBattleResult BattleResult = 2;
  if (has_battleresult()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->battleresult(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TFightSoulReportBattleReq)
  return target;
}

int TFightSoulReportBattleReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 BattleEventId = 1;
    if (has_battleeventid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->battleeventid());
    }

    // optional .pb.TBattleResult BattleResult = 2;
    if (has_battleresult()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->battleresult());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TFightSoulReportBattleReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TFightSoulReportBattleReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TFightSoulReportBattleReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TFightSoulReportBattleReq::MergeFrom(const TFightSoulReportBattleReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_battleeventid()) {
      set_battleeventid(from.battleeventid());
    }
    if (from.has_battleresult()) {
      mutable_battleresult()->::pb::TBattleResult::MergeFrom(from.battleresult());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TFightSoulReportBattleReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TFightSoulReportBattleReq::CopyFrom(const TFightSoulReportBattleReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TFightSoulReportBattleReq::IsInitialized() const {

  if (has_battleresult()) {
    if (!this->battleresult().IsInitialized()) return false;
  }
  return true;
}

void TFightSoulReportBattleReq::Swap(TFightSoulReportBattleReq* other) {
  if (other != this) {
    std::swap(battleeventid_, other->battleeventid_);
    std::swap(battleresult_, other->battleresult_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TFightSoulReportBattleReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TFightSoulReportBattleReq_descriptor_;
  metadata.reflection = TFightSoulReportBattleReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TFightSoulReportBattleRsp::kIsPassFieldNumber;
const int TFightSoulReportBattleRsp::kRewardArrFieldNumber;
#endif  // !_MSC_VER

TFightSoulReportBattleRsp::TFightSoulReportBattleRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TFightSoulReportBattleRsp)
}

void TFightSoulReportBattleRsp::InitAsDefaultInstance() {
}

TFightSoulReportBattleRsp::TFightSoulReportBattleRsp(const TFightSoulReportBattleRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TFightSoulReportBattleRsp)
}

void TFightSoulReportBattleRsp::SharedCtor() {
  _cached_size_ = 0;
  ispass_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TFightSoulReportBattleRsp::~TFightSoulReportBattleRsp() {
  // @@protoc_insertion_point(destructor:pb.TFightSoulReportBattleRsp)
  SharedDtor();
}

void TFightSoulReportBattleRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TFightSoulReportBattleRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TFightSoulReportBattleRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TFightSoulReportBattleRsp_descriptor_;
}

const TFightSoulReportBattleRsp& TFightSoulReportBattleRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fFightSoul_2eproto();
  return *default_instance_;
}

TFightSoulReportBattleRsp* TFightSoulReportBattleRsp::default_instance_ = NULL;

TFightSoulReportBattleRsp* TFightSoulReportBattleRsp::New() const {
  return new TFightSoulReportBattleRsp;
}

void TFightSoulReportBattleRsp::Clear() {
  ispass_ = 0u;
  rewardarr_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TFightSoulReportBattleRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TFightSoulReportBattleRsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 IsPass = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ispass_)));
          set_has_ispass();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_RewardArr;
        break;
      }

      // repeated .pb.TCommonReward RewardArr = 2;
      case 2: {
        if (tag == 18) {
         parse_RewardArr:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_rewardarr()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_RewardArr;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TFightSoulReportBattleRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TFightSoulReportBattleRsp)
  return false;
#undef DO_
}

void TFightSoulReportBattleRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TFightSoulReportBattleRsp)
  // optional uint32 IsPass = 1;
  if (has_ispass()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->ispass(), output);
  }

  // repeated .pb.TCommonReward RewardArr = 2;
  for (int i = 0; i < this->rewardarr_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->rewardarr(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TFightSoulReportBattleRsp)
}

::google::protobuf::uint8* TFightSoulReportBattleRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TFightSoulReportBattleRsp)
  // optional uint32 IsPass = 1;
  if (has_ispass()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->ispass(), target);
  }

  // repeated .pb.TCommonReward RewardArr = 2;
  for (int i = 0; i < this->rewardarr_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->rewardarr(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TFightSoulReportBattleRsp)
  return target;
}

int TFightSoulReportBattleRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 IsPass = 1;
    if (has_ispass()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->ispass());
    }

  }
  // repeated .pb.TCommonReward RewardArr = 2;
  total_size += 1 * this->rewardarr_size();
  for (int i = 0; i < this->rewardarr_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->rewardarr(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TFightSoulReportBattleRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TFightSoulReportBattleRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TFightSoulReportBattleRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TFightSoulReportBattleRsp::MergeFrom(const TFightSoulReportBattleRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  rewardarr_.MergeFrom(from.rewardarr_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ispass()) {
      set_ispass(from.ispass());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TFightSoulReportBattleRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TFightSoulReportBattleRsp::CopyFrom(const TFightSoulReportBattleRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TFightSoulReportBattleRsp::IsInitialized() const {

  return true;
}

void TFightSoulReportBattleRsp::Swap(TFightSoulReportBattleRsp* other) {
  if (other != this) {
    std::swap(ispass_, other->ispass_);
    rewardarr_.Swap(&other->rewardarr_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TFightSoulReportBattleRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TFightSoulReportBattleRsp_descriptor_;
  metadata.reflection = TFightSoulReportBattleRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TFightSoulCombineRecord::kQualityFieldNumber;
const int TFightSoulCombineRecord::kFailNumFieldNumber;
#endif  // !_MSC_VER

TFightSoulCombineRecord::TFightSoulCombineRecord()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TFightSoulCombineRecord)
}

void TFightSoulCombineRecord::InitAsDefaultInstance() {
}

TFightSoulCombineRecord::TFightSoulCombineRecord(const TFightSoulCombineRecord& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TFightSoulCombineRecord)
}

void TFightSoulCombineRecord::SharedCtor() {
  _cached_size_ = 0;
  quality_ = 0u;
  failnum_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TFightSoulCombineRecord::~TFightSoulCombineRecord() {
  // @@protoc_insertion_point(destructor:pb.TFightSoulCombineRecord)
  SharedDtor();
}

void TFightSoulCombineRecord::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TFightSoulCombineRecord::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TFightSoulCombineRecord::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TFightSoulCombineRecord_descriptor_;
}

const TFightSoulCombineRecord& TFightSoulCombineRecord::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fFightSoul_2eproto();
  return *default_instance_;
}

TFightSoulCombineRecord* TFightSoulCombineRecord::default_instance_ = NULL;

TFightSoulCombineRecord* TFightSoulCombineRecord::New() const {
  return new TFightSoulCombineRecord;
}

void TFightSoulCombineRecord::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<TFightSoulCombineRecord*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(quality_, failnum_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TFightSoulCombineRecord::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TFightSoulCombineRecord)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 Quality = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &quality_)));
          set_has_quality();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_FailNum;
        break;
      }

      // optional uint32 FailNum = 2;
      case 2: {
        if (tag == 16) {
         parse_FailNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &failnum_)));
          set_has_failnum();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TFightSoulCombineRecord)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TFightSoulCombineRecord)
  return false;
#undef DO_
}

void TFightSoulCombineRecord::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TFightSoulCombineRecord)
  // optional uint32 Quality = 1;
  if (has_quality()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->quality(), output);
  }

  // optional uint32 FailNum = 2;
  if (has_failnum()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->failnum(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TFightSoulCombineRecord)
}

::google::protobuf::uint8* TFightSoulCombineRecord::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TFightSoulCombineRecord)
  // optional uint32 Quality = 1;
  if (has_quality()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->quality(), target);
  }

  // optional uint32 FailNum = 2;
  if (has_failnum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->failnum(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TFightSoulCombineRecord)
  return target;
}

int TFightSoulCombineRecord::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 Quality = 1;
    if (has_quality()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->quality());
    }

    // optional uint32 FailNum = 2;
    if (has_failnum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->failnum());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TFightSoulCombineRecord::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TFightSoulCombineRecord* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TFightSoulCombineRecord*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TFightSoulCombineRecord::MergeFrom(const TFightSoulCombineRecord& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_quality()) {
      set_quality(from.quality());
    }
    if (from.has_failnum()) {
      set_failnum(from.failnum());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TFightSoulCombineRecord::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TFightSoulCombineRecord::CopyFrom(const TFightSoulCombineRecord& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TFightSoulCombineRecord::IsInitialized() const {

  return true;
}

void TFightSoulCombineRecord::Swap(TFightSoulCombineRecord* other) {
  if (other != this) {
    std::swap(quality_, other->quality_);
    std::swap(failnum_, other->failnum_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TFightSoulCombineRecord::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TFightSoulCombineRecord_descriptor_;
  metadata.reflection = TFightSoulCombineRecord_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TFightSoulGetCombineRecordRsp::kRecordArrFieldNumber;
#endif  // !_MSC_VER

TFightSoulGetCombineRecordRsp::TFightSoulGetCombineRecordRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TFightSoulGetCombineRecordRsp)
}

void TFightSoulGetCombineRecordRsp::InitAsDefaultInstance() {
}

TFightSoulGetCombineRecordRsp::TFightSoulGetCombineRecordRsp(const TFightSoulGetCombineRecordRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TFightSoulGetCombineRecordRsp)
}

void TFightSoulGetCombineRecordRsp::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TFightSoulGetCombineRecordRsp::~TFightSoulGetCombineRecordRsp() {
  // @@protoc_insertion_point(destructor:pb.TFightSoulGetCombineRecordRsp)
  SharedDtor();
}

void TFightSoulGetCombineRecordRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TFightSoulGetCombineRecordRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TFightSoulGetCombineRecordRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TFightSoulGetCombineRecordRsp_descriptor_;
}

const TFightSoulGetCombineRecordRsp& TFightSoulGetCombineRecordRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fFightSoul_2eproto();
  return *default_instance_;
}

TFightSoulGetCombineRecordRsp* TFightSoulGetCombineRecordRsp::default_instance_ = NULL;

TFightSoulGetCombineRecordRsp* TFightSoulGetCombineRecordRsp::New() const {
  return new TFightSoulGetCombineRecordRsp;
}

void TFightSoulGetCombineRecordRsp::Clear() {
  recordarr_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TFightSoulGetCombineRecordRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TFightSoulGetCombineRecordRsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .pb.TFightSoulCombineRecord RecordArr = 1;
      case 1: {
        if (tag == 10) {
         parse_RecordArr:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_recordarr()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_RecordArr;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TFightSoulGetCombineRecordRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TFightSoulGetCombineRecordRsp)
  return false;
#undef DO_
}

void TFightSoulGetCombineRecordRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TFightSoulGetCombineRecordRsp)
  // repeated .pb.TFightSoulCombineRecord RecordArr = 1;
  for (int i = 0; i < this->recordarr_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->recordarr(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TFightSoulGetCombineRecordRsp)
}

::google::protobuf::uint8* TFightSoulGetCombineRecordRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TFightSoulGetCombineRecordRsp)
  // repeated .pb.TFightSoulCombineRecord RecordArr = 1;
  for (int i = 0; i < this->recordarr_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->recordarr(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TFightSoulGetCombineRecordRsp)
  return target;
}

int TFightSoulGetCombineRecordRsp::ByteSize() const {
  int total_size = 0;

  // repeated .pb.TFightSoulCombineRecord RecordArr = 1;
  total_size += 1 * this->recordarr_size();
  for (int i = 0; i < this->recordarr_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->recordarr(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TFightSoulGetCombineRecordRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TFightSoulGetCombineRecordRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TFightSoulGetCombineRecordRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TFightSoulGetCombineRecordRsp::MergeFrom(const TFightSoulGetCombineRecordRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  recordarr_.MergeFrom(from.recordarr_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TFightSoulGetCombineRecordRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TFightSoulGetCombineRecordRsp::CopyFrom(const TFightSoulGetCombineRecordRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TFightSoulGetCombineRecordRsp::IsInitialized() const {

  return true;
}

void TFightSoulGetCombineRecordRsp::Swap(TFightSoulGetCombineRecordRsp* other) {
  if (other != this) {
    recordarr_.Swap(&other->recordarr_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TFightSoulGetCombineRecordRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TFightSoulGetCombineRecordRsp_descriptor_;
  metadata.reflection = TFightSoulGetCombineRecordRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TFightSoulCombineSoulReq::kItemArrFieldNumber;
#endif  // !_MSC_VER

TFightSoulCombineSoulReq::TFightSoulCombineSoulReq()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TFightSoulCombineSoulReq)
}

void TFightSoulCombineSoulReq::InitAsDefaultInstance() {
}

TFightSoulCombineSoulReq::TFightSoulCombineSoulReq(const TFightSoulCombineSoulReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TFightSoulCombineSoulReq)
}

void TFightSoulCombineSoulReq::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TFightSoulCombineSoulReq::~TFightSoulCombineSoulReq() {
  // @@protoc_insertion_point(destructor:pb.TFightSoulCombineSoulReq)
  SharedDtor();
}

void TFightSoulCombineSoulReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TFightSoulCombineSoulReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TFightSoulCombineSoulReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TFightSoulCombineSoulReq_descriptor_;
}

const TFightSoulCombineSoulReq& TFightSoulCombineSoulReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fFightSoul_2eproto();
  return *default_instance_;
}

TFightSoulCombineSoulReq* TFightSoulCombineSoulReq::default_instance_ = NULL;

TFightSoulCombineSoulReq* TFightSoulCombineSoulReq::New() const {
  return new TFightSoulCombineSoulReq;
}

void TFightSoulCombineSoulReq::Clear() {
  itemarr_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TFightSoulCombineSoulReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TFightSoulCombineSoulReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .pb.TSimpleItem ItemArr = 1;
      case 1: {
        if (tag == 10) {
         parse_ItemArr:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_itemarr()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_ItemArr;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TFightSoulCombineSoulReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TFightSoulCombineSoulReq)
  return false;
#undef DO_
}

void TFightSoulCombineSoulReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TFightSoulCombineSoulReq)
  // repeated .pb.TSimpleItem ItemArr = 1;
  for (int i = 0; i < this->itemarr_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->itemarr(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TFightSoulCombineSoulReq)
}

::google::protobuf::uint8* TFightSoulCombineSoulReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TFightSoulCombineSoulReq)
  // repeated .pb.TSimpleItem ItemArr = 1;
  for (int i = 0; i < this->itemarr_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->itemarr(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TFightSoulCombineSoulReq)
  return target;
}

int TFightSoulCombineSoulReq::ByteSize() const {
  int total_size = 0;

  // repeated .pb.TSimpleItem ItemArr = 1;
  total_size += 1 * this->itemarr_size();
  for (int i = 0; i < this->itemarr_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->itemarr(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TFightSoulCombineSoulReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TFightSoulCombineSoulReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TFightSoulCombineSoulReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TFightSoulCombineSoulReq::MergeFrom(const TFightSoulCombineSoulReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  itemarr_.MergeFrom(from.itemarr_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TFightSoulCombineSoulReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TFightSoulCombineSoulReq::CopyFrom(const TFightSoulCombineSoulReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TFightSoulCombineSoulReq::IsInitialized() const {

  return true;
}

void TFightSoulCombineSoulReq::Swap(TFightSoulCombineSoulReq* other) {
  if (other != this) {
    itemarr_.Swap(&other->itemarr_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TFightSoulCombineSoulReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TFightSoulCombineSoulReq_descriptor_;
  metadata.reflection = TFightSoulCombineSoulReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TFightSoulCombineSoulRsp::kIsSuccessFieldNumber;
const int TFightSoulCombineSoulRsp::kSoulItemFieldNumber;
#endif  // !_MSC_VER

TFightSoulCombineSoulRsp::TFightSoulCombineSoulRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TFightSoulCombineSoulRsp)
}

void TFightSoulCombineSoulRsp::InitAsDefaultInstance() {
  soulitem_ = const_cast< ::pb::TSimpleItem*>(&::pb::TSimpleItem::default_instance());
}

TFightSoulCombineSoulRsp::TFightSoulCombineSoulRsp(const TFightSoulCombineSoulRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TFightSoulCombineSoulRsp)
}

void TFightSoulCombineSoulRsp::SharedCtor() {
  _cached_size_ = 0;
  issuccess_ = 0u;
  soulitem_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TFightSoulCombineSoulRsp::~TFightSoulCombineSoulRsp() {
  // @@protoc_insertion_point(destructor:pb.TFightSoulCombineSoulRsp)
  SharedDtor();
}

void TFightSoulCombineSoulRsp::SharedDtor() {
  if (this != default_instance_) {
    delete soulitem_;
  }
}

void TFightSoulCombineSoulRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TFightSoulCombineSoulRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TFightSoulCombineSoulRsp_descriptor_;
}

const TFightSoulCombineSoulRsp& TFightSoulCombineSoulRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fFightSoul_2eproto();
  return *default_instance_;
}

TFightSoulCombineSoulRsp* TFightSoulCombineSoulRsp::default_instance_ = NULL;

TFightSoulCombineSoulRsp* TFightSoulCombineSoulRsp::New() const {
  return new TFightSoulCombineSoulRsp;
}

void TFightSoulCombineSoulRsp::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    issuccess_ = 0u;
    if (has_soulitem()) {
      if (soulitem_ != NULL) soulitem_->::pb::TSimpleItem::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TFightSoulCombineSoulRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TFightSoulCombineSoulRsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 IsSuccess = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &issuccess_)));
          set_has_issuccess();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_SoulItem;
        break;
      }

      // optional .pb.TSimpleItem SoulItem = 2;
      case 2: {
        if (tag == 18) {
         parse_SoulItem:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_soulitem()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TFightSoulCombineSoulRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TFightSoulCombineSoulRsp)
  return false;
#undef DO_
}

void TFightSoulCombineSoulRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TFightSoulCombineSoulRsp)
  // optional uint32 IsSuccess = 1;
  if (has_issuccess()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->issuccess(), output);
  }

  // optional .pb.TSimpleItem SoulItem = 2;
  if (has_soulitem()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->soulitem(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TFightSoulCombineSoulRsp)
}

::google::protobuf::uint8* TFightSoulCombineSoulRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TFightSoulCombineSoulRsp)
  // optional uint32 IsSuccess = 1;
  if (has_issuccess()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->issuccess(), target);
  }

  // optional .pb.TSimpleItem SoulItem = 2;
  if (has_soulitem()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->soulitem(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TFightSoulCombineSoulRsp)
  return target;
}

int TFightSoulCombineSoulRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 IsSuccess = 1;
    if (has_issuccess()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->issuccess());
    }

    // optional .pb.TSimpleItem SoulItem = 2;
    if (has_soulitem()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->soulitem());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TFightSoulCombineSoulRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TFightSoulCombineSoulRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TFightSoulCombineSoulRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TFightSoulCombineSoulRsp::MergeFrom(const TFightSoulCombineSoulRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_issuccess()) {
      set_issuccess(from.issuccess());
    }
    if (from.has_soulitem()) {
      mutable_soulitem()->::pb::TSimpleItem::MergeFrom(from.soulitem());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TFightSoulCombineSoulRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TFightSoulCombineSoulRsp::CopyFrom(const TFightSoulCombineSoulRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TFightSoulCombineSoulRsp::IsInitialized() const {

  return true;
}

void TFightSoulCombineSoulRsp::Swap(TFightSoulCombineSoulRsp* other) {
  if (other != this) {
    std::swap(issuccess_, other->issuccess_);
    std::swap(soulitem_, other->soulitem_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TFightSoulCombineSoulRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TFightSoulCombineSoulRsp_descriptor_;
  metadata.reflection = TFightSoulCombineSoulRsp_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace pb

// @@protoc_insertion_point(global_scope)
