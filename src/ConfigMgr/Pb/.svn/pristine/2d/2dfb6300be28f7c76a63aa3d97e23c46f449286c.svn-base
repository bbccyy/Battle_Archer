// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: net/TitlePalace.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "net/TitlePalace.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace pb {

namespace {

const ::google::protobuf::Descriptor* TInTitlePalaceAchievementReward_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TInTitlePalaceAchievementReward_reflection_ = NULL;
const ::google::protobuf::Descriptor* TTitlePalaceUserInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TTitlePalaceUserInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* TTitlePalaceInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TTitlePalaceInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* TTitlePalaceGetInfoRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TTitlePalaceGetInfoRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* TTitlePalaceEntryPalaceReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TTitlePalaceEntryPalaceReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* TTitlePalaceEntryPalaceRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TTitlePalaceEntryPalaceRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* TTitlePalaceProstrateReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TTitlePalaceProstrateReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* TTitlePalaceProstrateRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TTitlePalaceProstrateRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* TTitlePalaceGetPalaceInfoReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TTitlePalaceGetPalaceInfoReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* TTitlePalaceGetPalaceInfoRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TTitlePalaceGetPalaceInfoRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* TTitlePalaceGetMineBuffReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TTitlePalaceGetMineBuffReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* TTitlePalaceGetMineBuffRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TTitlePalaceGetMineBuffRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* TInTitlePalaceHistoryTid_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TInTitlePalaceHistoryTid_reflection_ = NULL;
const ::google::protobuf::Descriptor* TInTitlePalaceGetAchievementInfoRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TInTitlePalaceGetAchievementInfoRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* TInTitlePalaceItemInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TInTitlePalaceItemInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* TInTitlePalaceGetItemInfoRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TInTitlePalaceGetItemInfoRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* TTitlePalaceReceiveRewardReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TTitlePalaceReceiveRewardReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* TTitlePalaceAchievementNotify_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TTitlePalaceAchievementNotify_reflection_ = NULL;
const ::google::protobuf::Descriptor* TTitlePalaceChangePalaceNotify_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TTitlePalaceChangePalaceNotify_reflection_ = NULL;
const ::google::protobuf::Descriptor* TTitlePalaceNotify_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TTitlePalaceNotify_reflection_ = NULL;
const ::google::protobuf::Descriptor* TTitlePalaceGetUserInfoRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TTitlePalaceGetUserInfoRsp_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_net_2fTitlePalace_2eproto() {
  protobuf_AddDesc_net_2fTitlePalace_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "net/TitlePalace.proto");
  GOOGLE_CHECK(file != NULL);
  TInTitlePalaceAchievementReward_descriptor_ = file->message_type(0);
  static const int TInTitlePalaceAchievementReward_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TInTitlePalaceAchievementReward, achievementid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TInTitlePalaceAchievementReward, rewardtime_),
  };
  TInTitlePalaceAchievementReward_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TInTitlePalaceAchievementReward_descriptor_,
      TInTitlePalaceAchievementReward::default_instance_,
      TInTitlePalaceAchievementReward_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TInTitlePalaceAchievementReward, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TInTitlePalaceAchievementReward, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TInTitlePalaceAchievementReward));
  TTitlePalaceUserInfo_descriptor_ = file->message_type(1);
  static const int TTitlePalaceUserInfo_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TTitlePalaceUserInfo, userinfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TTitlePalaceUserInfo, popularity_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TTitlePalaceUserInfo, entrytime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TTitlePalaceUserInfo, endentrytime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TTitlePalaceUserInfo, allyid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TTitlePalaceUserInfo, titleid_),
  };
  TTitlePalaceUserInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TTitlePalaceUserInfo_descriptor_,
      TTitlePalaceUserInfo::default_instance_,
      TTitlePalaceUserInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TTitlePalaceUserInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TTitlePalaceUserInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TTitlePalaceUserInfo));
  TTitlePalaceInfo_descriptor_ = file->message_type(2);
  static const int TTitlePalaceInfo_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TTitlePalaceInfo, palaceid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TTitlePalaceInfo, palaceuserinfoarr_),
  };
  TTitlePalaceInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TTitlePalaceInfo_descriptor_,
      TTitlePalaceInfo::default_instance_,
      TTitlePalaceInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TTitlePalaceInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TTitlePalaceInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TTitlePalaceInfo));
  TTitlePalaceGetInfoRsp_descriptor_ = file->message_type(3);
  static const int TTitlePalaceGetInfoRsp_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TTitlePalaceGetInfoRsp, popularity_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TTitlePalaceGetInfoRsp, prostratenum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TTitlePalaceGetInfoRsp, allyid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TTitlePalaceGetInfoRsp, changenum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TTitlePalaceGetInfoRsp, titlepalaceinfoarr_),
  };
  TTitlePalaceGetInfoRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TTitlePalaceGetInfoRsp_descriptor_,
      TTitlePalaceGetInfoRsp::default_instance_,
      TTitlePalaceGetInfoRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TTitlePalaceGetInfoRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TTitlePalaceGetInfoRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TTitlePalaceGetInfoRsp));
  TTitlePalaceEntryPalaceReq_descriptor_ = file->message_type(4);
  static const int TTitlePalaceEntryPalaceReq_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TTitlePalaceEntryPalaceReq, palaceid_),
  };
  TTitlePalaceEntryPalaceReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TTitlePalaceEntryPalaceReq_descriptor_,
      TTitlePalaceEntryPalaceReq::default_instance_,
      TTitlePalaceEntryPalaceReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TTitlePalaceEntryPalaceReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TTitlePalaceEntryPalaceReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TTitlePalaceEntryPalaceReq));
  TTitlePalaceEntryPalaceRsp_descriptor_ = file->message_type(5);
  static const int TTitlePalaceEntryPalaceRsp_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TTitlePalaceEntryPalaceRsp, entrytime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TTitlePalaceEntryPalaceRsp, endentrytime_),
  };
  TTitlePalaceEntryPalaceRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TTitlePalaceEntryPalaceRsp_descriptor_,
      TTitlePalaceEntryPalaceRsp::default_instance_,
      TTitlePalaceEntryPalaceRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TTitlePalaceEntryPalaceRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TTitlePalaceEntryPalaceRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TTitlePalaceEntryPalaceRsp));
  TTitlePalaceProstrateReq_descriptor_ = file->message_type(6);
  static const int TTitlePalaceProstrateReq_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TTitlePalaceProstrateReq, palaceid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TTitlePalaceProstrateReq, uid_),
  };
  TTitlePalaceProstrateReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TTitlePalaceProstrateReq_descriptor_,
      TTitlePalaceProstrateReq::default_instance_,
      TTitlePalaceProstrateReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TTitlePalaceProstrateReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TTitlePalaceProstrateReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TTitlePalaceProstrateReq));
  TTitlePalaceProstrateRsp_descriptor_ = file->message_type(7);
  static const int TTitlePalaceProstrateRsp_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TTitlePalaceProstrateRsp, rewardarr_),
  };
  TTitlePalaceProstrateRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TTitlePalaceProstrateRsp_descriptor_,
      TTitlePalaceProstrateRsp::default_instance_,
      TTitlePalaceProstrateRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TTitlePalaceProstrateRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TTitlePalaceProstrateRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TTitlePalaceProstrateRsp));
  TTitlePalaceGetPalaceInfoReq_descriptor_ = file->message_type(8);
  static const int TTitlePalaceGetPalaceInfoReq_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TTitlePalaceGetPalaceInfoReq, palaceid_),
  };
  TTitlePalaceGetPalaceInfoReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TTitlePalaceGetPalaceInfoReq_descriptor_,
      TTitlePalaceGetPalaceInfoReq::default_instance_,
      TTitlePalaceGetPalaceInfoReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TTitlePalaceGetPalaceInfoReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TTitlePalaceGetPalaceInfoReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TTitlePalaceGetPalaceInfoReq));
  TTitlePalaceGetPalaceInfoRsp_descriptor_ = file->message_type(9);
  static const int TTitlePalaceGetPalaceInfoRsp_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TTitlePalaceGetPalaceInfoRsp, titlepalaceinfo_),
  };
  TTitlePalaceGetPalaceInfoRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TTitlePalaceGetPalaceInfoRsp_descriptor_,
      TTitlePalaceGetPalaceInfoRsp::default_instance_,
      TTitlePalaceGetPalaceInfoRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TTitlePalaceGetPalaceInfoRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TTitlePalaceGetPalaceInfoRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TTitlePalaceGetPalaceInfoRsp));
  TTitlePalaceGetMineBuffReq_descriptor_ = file->message_type(10);
  static const int TTitlePalaceGetMineBuffReq_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TTitlePalaceGetMineBuffReq, uid_),
  };
  TTitlePalaceGetMineBuffReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TTitlePalaceGetMineBuffReq_descriptor_,
      TTitlePalaceGetMineBuffReq::default_instance_,
      TTitlePalaceGetMineBuffReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TTitlePalaceGetMineBuffReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TTitlePalaceGetMineBuffReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TTitlePalaceGetMineBuffReq));
  TTitlePalaceGetMineBuffRsp_descriptor_ = file->message_type(11);
  static const int TTitlePalaceGetMineBuffRsp_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TTitlePalaceGetMineBuffRsp, buffadd_),
  };
  TTitlePalaceGetMineBuffRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TTitlePalaceGetMineBuffRsp_descriptor_,
      TTitlePalaceGetMineBuffRsp::default_instance_,
      TTitlePalaceGetMineBuffRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TTitlePalaceGetMineBuffRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TTitlePalaceGetMineBuffRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TTitlePalaceGetMineBuffRsp));
  TInTitlePalaceHistoryTid_descriptor_ = file->message_type(12);
  static const int TInTitlePalaceHistoryTid_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TInTitlePalaceHistoryTid, tid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TInTitlePalaceHistoryTid, num_),
  };
  TInTitlePalaceHistoryTid_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TInTitlePalaceHistoryTid_descriptor_,
      TInTitlePalaceHistoryTid::default_instance_,
      TInTitlePalaceHistoryTid_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TInTitlePalaceHistoryTid, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TInTitlePalaceHistoryTid, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TInTitlePalaceHistoryTid));
  TInTitlePalaceGetAchievementInfoRsp_descriptor_ = file->message_type(13);
  static const int TInTitlePalaceGetAchievementInfoRsp_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TInTitlePalaceGetAchievementInfoRsp, achievementscore_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TInTitlePalaceGetAchievementInfoRsp, historytids_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TInTitlePalaceGetAchievementInfoRsp, rewardarr_),
  };
  TInTitlePalaceGetAchievementInfoRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TInTitlePalaceGetAchievementInfoRsp_descriptor_,
      TInTitlePalaceGetAchievementInfoRsp::default_instance_,
      TInTitlePalaceGetAchievementInfoRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TInTitlePalaceGetAchievementInfoRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TInTitlePalaceGetAchievementInfoRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TInTitlePalaceGetAchievementInfoRsp));
  TInTitlePalaceItemInfo_descriptor_ = file->message_type(14);
  static const int TInTitlePalaceItemInfo_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TInTitlePalaceItemInfo, palaceid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TInTitlePalaceItemInfo, tid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TInTitlePalaceItemInfo, endtime_),
  };
  TInTitlePalaceItemInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TInTitlePalaceItemInfo_descriptor_,
      TInTitlePalaceItemInfo::default_instance_,
      TInTitlePalaceItemInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TInTitlePalaceItemInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TInTitlePalaceItemInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TInTitlePalaceItemInfo));
  TInTitlePalaceGetItemInfoRsp_descriptor_ = file->message_type(15);
  static const int TInTitlePalaceGetItemInfoRsp_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TInTitlePalaceGetItemInfoRsp, itemarr_),
  };
  TInTitlePalaceGetItemInfoRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TInTitlePalaceGetItemInfoRsp_descriptor_,
      TInTitlePalaceGetItemInfoRsp::default_instance_,
      TInTitlePalaceGetItemInfoRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TInTitlePalaceGetItemInfoRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TInTitlePalaceGetItemInfoRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TInTitlePalaceGetItemInfoRsp));
  TTitlePalaceReceiveRewardReq_descriptor_ = file->message_type(16);
  static const int TTitlePalaceReceiveRewardReq_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TTitlePalaceReceiveRewardReq, achievementid_),
  };
  TTitlePalaceReceiveRewardReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TTitlePalaceReceiveRewardReq_descriptor_,
      TTitlePalaceReceiveRewardReq::default_instance_,
      TTitlePalaceReceiveRewardReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TTitlePalaceReceiveRewardReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TTitlePalaceReceiveRewardReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TTitlePalaceReceiveRewardReq));
  TTitlePalaceAchievementNotify_descriptor_ = file->message_type(17);
  static const int TTitlePalaceAchievementNotify_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TTitlePalaceAchievementNotify, achievementidarr_),
  };
  TTitlePalaceAchievementNotify_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TTitlePalaceAchievementNotify_descriptor_,
      TTitlePalaceAchievementNotify::default_instance_,
      TTitlePalaceAchievementNotify_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TTitlePalaceAchievementNotify, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TTitlePalaceAchievementNotify, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TTitlePalaceAchievementNotify));
  TTitlePalaceChangePalaceNotify_descriptor_ = file->message_type(18);
  static const int TTitlePalaceChangePalaceNotify_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TTitlePalaceChangePalaceNotify, uid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TTitlePalaceChangePalaceNotify, titleid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TTitlePalaceChangePalaceNotify, palaceid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TTitlePalaceChangePalaceNotify, entrytime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TTitlePalaceChangePalaceNotify, endtime_),
  };
  TTitlePalaceChangePalaceNotify_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TTitlePalaceChangePalaceNotify_descriptor_,
      TTitlePalaceChangePalaceNotify::default_instance_,
      TTitlePalaceChangePalaceNotify_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TTitlePalaceChangePalaceNotify, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TTitlePalaceChangePalaceNotify, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TTitlePalaceChangePalaceNotify));
  TTitlePalaceNotify_descriptor_ = file->message_type(19);
  static const int TTitlePalaceNotify_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TTitlePalaceNotify, palaceid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TTitlePalaceNotify, uid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TTitlePalaceNotify, popularity_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TTitlePalaceNotify, prostratenum_),
  };
  TTitlePalaceNotify_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TTitlePalaceNotify_descriptor_,
      TTitlePalaceNotify::default_instance_,
      TTitlePalaceNotify_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TTitlePalaceNotify, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TTitlePalaceNotify, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TTitlePalaceNotify));
  TTitlePalaceGetUserInfoRsp_descriptor_ = file->message_type(20);
  static const int TTitlePalaceGetUserInfoRsp_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TTitlePalaceGetUserInfoRsp, prostratenum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TTitlePalaceGetUserInfoRsp, popularity_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TTitlePalaceGetUserInfoRsp, palaceid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TTitlePalaceGetUserInfoRsp, entrytime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TTitlePalaceGetUserInfoRsp, endentrytime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TTitlePalaceGetUserInfoRsp, changenum_),
  };
  TTitlePalaceGetUserInfoRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TTitlePalaceGetUserInfoRsp_descriptor_,
      TTitlePalaceGetUserInfoRsp::default_instance_,
      TTitlePalaceGetUserInfoRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TTitlePalaceGetUserInfoRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TTitlePalaceGetUserInfoRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TTitlePalaceGetUserInfoRsp));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_net_2fTitlePalace_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TInTitlePalaceAchievementReward_descriptor_, &TInTitlePalaceAchievementReward::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TTitlePalaceUserInfo_descriptor_, &TTitlePalaceUserInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TTitlePalaceInfo_descriptor_, &TTitlePalaceInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TTitlePalaceGetInfoRsp_descriptor_, &TTitlePalaceGetInfoRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TTitlePalaceEntryPalaceReq_descriptor_, &TTitlePalaceEntryPalaceReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TTitlePalaceEntryPalaceRsp_descriptor_, &TTitlePalaceEntryPalaceRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TTitlePalaceProstrateReq_descriptor_, &TTitlePalaceProstrateReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TTitlePalaceProstrateRsp_descriptor_, &TTitlePalaceProstrateRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TTitlePalaceGetPalaceInfoReq_descriptor_, &TTitlePalaceGetPalaceInfoReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TTitlePalaceGetPalaceInfoRsp_descriptor_, &TTitlePalaceGetPalaceInfoRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TTitlePalaceGetMineBuffReq_descriptor_, &TTitlePalaceGetMineBuffReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TTitlePalaceGetMineBuffRsp_descriptor_, &TTitlePalaceGetMineBuffRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TInTitlePalaceHistoryTid_descriptor_, &TInTitlePalaceHistoryTid::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TInTitlePalaceGetAchievementInfoRsp_descriptor_, &TInTitlePalaceGetAchievementInfoRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TInTitlePalaceItemInfo_descriptor_, &TInTitlePalaceItemInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TInTitlePalaceGetItemInfoRsp_descriptor_, &TInTitlePalaceGetItemInfoRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TTitlePalaceReceiveRewardReq_descriptor_, &TTitlePalaceReceiveRewardReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TTitlePalaceAchievementNotify_descriptor_, &TTitlePalaceAchievementNotify::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TTitlePalaceChangePalaceNotify_descriptor_, &TTitlePalaceChangePalaceNotify::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TTitlePalaceNotify_descriptor_, &TTitlePalaceNotify::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TTitlePalaceGetUserInfoRsp_descriptor_, &TTitlePalaceGetUserInfoRsp::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_net_2fTitlePalace_2eproto() {
  delete TInTitlePalaceAchievementReward::default_instance_;
  delete TInTitlePalaceAchievementReward_reflection_;
  delete TTitlePalaceUserInfo::default_instance_;
  delete TTitlePalaceUserInfo_reflection_;
  delete TTitlePalaceInfo::default_instance_;
  delete TTitlePalaceInfo_reflection_;
  delete TTitlePalaceGetInfoRsp::default_instance_;
  delete TTitlePalaceGetInfoRsp_reflection_;
  delete TTitlePalaceEntryPalaceReq::default_instance_;
  delete TTitlePalaceEntryPalaceReq_reflection_;
  delete TTitlePalaceEntryPalaceRsp::default_instance_;
  delete TTitlePalaceEntryPalaceRsp_reflection_;
  delete TTitlePalaceProstrateReq::default_instance_;
  delete TTitlePalaceProstrateReq_reflection_;
  delete TTitlePalaceProstrateRsp::default_instance_;
  delete TTitlePalaceProstrateRsp_reflection_;
  delete TTitlePalaceGetPalaceInfoReq::default_instance_;
  delete TTitlePalaceGetPalaceInfoReq_reflection_;
  delete TTitlePalaceGetPalaceInfoRsp::default_instance_;
  delete TTitlePalaceGetPalaceInfoRsp_reflection_;
  delete TTitlePalaceGetMineBuffReq::default_instance_;
  delete TTitlePalaceGetMineBuffReq_reflection_;
  delete TTitlePalaceGetMineBuffRsp::default_instance_;
  delete TTitlePalaceGetMineBuffRsp_reflection_;
  delete TInTitlePalaceHistoryTid::default_instance_;
  delete TInTitlePalaceHistoryTid_reflection_;
  delete TInTitlePalaceGetAchievementInfoRsp::default_instance_;
  delete TInTitlePalaceGetAchievementInfoRsp_reflection_;
  delete TInTitlePalaceItemInfo::default_instance_;
  delete TInTitlePalaceItemInfo_reflection_;
  delete TInTitlePalaceGetItemInfoRsp::default_instance_;
  delete TInTitlePalaceGetItemInfoRsp_reflection_;
  delete TTitlePalaceReceiveRewardReq::default_instance_;
  delete TTitlePalaceReceiveRewardReq_reflection_;
  delete TTitlePalaceAchievementNotify::default_instance_;
  delete TTitlePalaceAchievementNotify_reflection_;
  delete TTitlePalaceChangePalaceNotify::default_instance_;
  delete TTitlePalaceChangePalaceNotify_reflection_;
  delete TTitlePalaceNotify::default_instance_;
  delete TTitlePalaceNotify_reflection_;
  delete TTitlePalaceGetUserInfoRsp::default_instance_;
  delete TTitlePalaceGetUserInfoRsp_reflection_;
}

void protobuf_AddDesc_net_2fTitlePalace_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::pb::protobuf_AddDesc_net_2fCommonReward_2eproto();
  ::pb::protobuf_AddDesc_net_2fUser_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\025net/TitlePalace.proto\022\002pb\032\026net/CommonR"
    "eward.proto\032\016net/User.proto\"L\n\037TInTitleP"
    "alaceAchievementReward\022\025\n\rAchievementId\030"
    "\001 \001(\r\022\022\n\nRewardTime\030\002 \001(\004\"\233\001\n\024TTitlePala"
    "ceUserInfo\022%\n\010UserInfo\030\001 \001(\0132\023.pb.TUserS"
    "impleInfo\022\022\n\nPopularity\030\002 \001(\004\022\021\n\tEntryTi"
    "me\030\003 \001(\004\022\024\n\014EndEntryTime\030\004 \001(\004\022\016\n\006AllyId"
    "\030\005 \001(\004\022\017\n\007TitleId\030\006 \001(\r\"Y\n\020TTitlePalaceI"
    "nfo\022\020\n\010PalaceId\030\001 \001(\004\0223\n\021PalaceUserInfoA"
    "rr\030\002 \003(\0132\030.pb.TTitlePalaceUserInfo\"\227\001\n\026T"
    "TitlePalaceGetInfoRsp\022\022\n\nPopularity\030\001 \001("
    "\004\022\024\n\014ProstrateNum\030\002 \001(\r\022\016\n\006AllyId\030\003 \001(\004\022"
    "\021\n\tChangeNum\030\004 \001(\r\0220\n\022TitlePalaceInfoArr"
    "\030\005 \003(\0132\024.pb.TTitlePalaceInfo\".\n\032TTitlePa"
    "laceEntryPalaceReq\022\020\n\010PalaceId\030\001 \001(\004\"E\n\032"
    "TTitlePalaceEntryPalaceRsp\022\021\n\tEntryTime\030"
    "\001 \001(\004\022\024\n\014EndEntryTime\030\002 \001(\004\"9\n\030TTitlePal"
    "aceProstrateReq\022\020\n\010PalaceId\030\001 \001(\004\022\013\n\003Uid"
    "\030\002 \001(\004\"@\n\030TTitlePalaceProstrateRsp\022$\n\tRe"
    "wardArr\030\001 \003(\0132\021.pb.TCommonReward\"0\n\034TTit"
    "lePalaceGetPalaceInfoReq\022\020\n\010PalaceId\030\001 \001"
    "(\004\"M\n\034TTitlePalaceGetPalaceInfoRsp\022-\n\017Ti"
    "tlePalaceInfo\030\001 \001(\0132\024.pb.TTitlePalaceInf"
    "o\")\n\032TTitlePalaceGetMineBuffReq\022\013\n\003Uid\030\001"
    " \001(\004\"-\n\032TTitlePalaceGetMineBuffRsp\022\017\n\007Bu"
    "ffAdd\030\001 \001(\r\"4\n\030TInTitlePalaceHistoryTid\022"
    "\013\n\003Tid\030\001 \001(\r\022\013\n\003Num\030\002 \001(\r\"\252\001\n#TInTitlePa"
    "laceGetAchievementInfoRsp\022\030\n\020Achievement"
    "Score\030\001 \001(\r\0221\n\013HistoryTids\030\002 \003(\0132\034.pb.TI"
    "nTitlePalaceHistoryTid\0226\n\tRewardArr\030\003 \003("
    "\0132#.pb.TInTitlePalaceAchievementReward\"H"
    "\n\026TInTitlePalaceItemInfo\022\020\n\010PalaceId\030\001 \001"
    "(\004\022\013\n\003Tid\030\002 \001(\004\022\017\n\007EndTime\030\003 \001(\004\"K\n\034TInT"
    "itlePalaceGetItemInfoRsp\022+\n\007ItemArr\030\001 \003("
    "\0132\032.pb.TInTitlePalaceItemInfo\"5\n\034TTitleP"
    "alaceReceiveRewardReq\022\025\n\rAchievementId\030\001"
    " \001(\r\"9\n\035TTitlePalaceAchievementNotify\022\030\n"
    "\020AchievementIdArr\030\001 \003(\r\"t\n\036TTitlePalaceC"
    "hangePalaceNotify\022\013\n\003Uid\030\001 \001(\004\022\017\n\007TitleI"
    "d\030\002 \001(\r\022\020\n\010PalaceId\030\003 \001(\004\022\021\n\tEntryTime\030\004"
    " \001(\004\022\017\n\007EndTime\030\005 \001(\004\"]\n\022TTitlePalaceNot"
    "ify\022\020\n\010PalaceId\030\001 \001(\004\022\013\n\003Uid\030\002 \001(\004\022\022\n\nPo"
    "pularity\030\003 \001(\r\022\024\n\014ProstrateNum\030\004 \001(\r\"\224\001\n"
    "\032TTitlePalaceGetUserInfoRsp\022\024\n\014Prostrate"
    "Num\030\001 \001(\r\022\022\n\nPopularity\030\002 \001(\004\022\020\n\010PalaceI"
    "d\030\003 \001(\004\022\021\n\tEntryTime\030\004 \001(\004\022\024\n\014EndEntryTi"
    "me\030\005 \001(\004\022\021\n\tChangeNum\030\006 \001(\r", 1867);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "net/TitlePalace.proto", &protobuf_RegisterTypes);
  TInTitlePalaceAchievementReward::default_instance_ = new TInTitlePalaceAchievementReward();
  TTitlePalaceUserInfo::default_instance_ = new TTitlePalaceUserInfo();
  TTitlePalaceInfo::default_instance_ = new TTitlePalaceInfo();
  TTitlePalaceGetInfoRsp::default_instance_ = new TTitlePalaceGetInfoRsp();
  TTitlePalaceEntryPalaceReq::default_instance_ = new TTitlePalaceEntryPalaceReq();
  TTitlePalaceEntryPalaceRsp::default_instance_ = new TTitlePalaceEntryPalaceRsp();
  TTitlePalaceProstrateReq::default_instance_ = new TTitlePalaceProstrateReq();
  TTitlePalaceProstrateRsp::default_instance_ = new TTitlePalaceProstrateRsp();
  TTitlePalaceGetPalaceInfoReq::default_instance_ = new TTitlePalaceGetPalaceInfoReq();
  TTitlePalaceGetPalaceInfoRsp::default_instance_ = new TTitlePalaceGetPalaceInfoRsp();
  TTitlePalaceGetMineBuffReq::default_instance_ = new TTitlePalaceGetMineBuffReq();
  TTitlePalaceGetMineBuffRsp::default_instance_ = new TTitlePalaceGetMineBuffRsp();
  TInTitlePalaceHistoryTid::default_instance_ = new TInTitlePalaceHistoryTid();
  TInTitlePalaceGetAchievementInfoRsp::default_instance_ = new TInTitlePalaceGetAchievementInfoRsp();
  TInTitlePalaceItemInfo::default_instance_ = new TInTitlePalaceItemInfo();
  TInTitlePalaceGetItemInfoRsp::default_instance_ = new TInTitlePalaceGetItemInfoRsp();
  TTitlePalaceReceiveRewardReq::default_instance_ = new TTitlePalaceReceiveRewardReq();
  TTitlePalaceAchievementNotify::default_instance_ = new TTitlePalaceAchievementNotify();
  TTitlePalaceChangePalaceNotify::default_instance_ = new TTitlePalaceChangePalaceNotify();
  TTitlePalaceNotify::default_instance_ = new TTitlePalaceNotify();
  TTitlePalaceGetUserInfoRsp::default_instance_ = new TTitlePalaceGetUserInfoRsp();
  TInTitlePalaceAchievementReward::default_instance_->InitAsDefaultInstance();
  TTitlePalaceUserInfo::default_instance_->InitAsDefaultInstance();
  TTitlePalaceInfo::default_instance_->InitAsDefaultInstance();
  TTitlePalaceGetInfoRsp::default_instance_->InitAsDefaultInstance();
  TTitlePalaceEntryPalaceReq::default_instance_->InitAsDefaultInstance();
  TTitlePalaceEntryPalaceRsp::default_instance_->InitAsDefaultInstance();
  TTitlePalaceProstrateReq::default_instance_->InitAsDefaultInstance();
  TTitlePalaceProstrateRsp::default_instance_->InitAsDefaultInstance();
  TTitlePalaceGetPalaceInfoReq::default_instance_->InitAsDefaultInstance();
  TTitlePalaceGetPalaceInfoRsp::default_instance_->InitAsDefaultInstance();
  TTitlePalaceGetMineBuffReq::default_instance_->InitAsDefaultInstance();
  TTitlePalaceGetMineBuffRsp::default_instance_->InitAsDefaultInstance();
  TInTitlePalaceHistoryTid::default_instance_->InitAsDefaultInstance();
  TInTitlePalaceGetAchievementInfoRsp::default_instance_->InitAsDefaultInstance();
  TInTitlePalaceItemInfo::default_instance_->InitAsDefaultInstance();
  TInTitlePalaceGetItemInfoRsp::default_instance_->InitAsDefaultInstance();
  TTitlePalaceReceiveRewardReq::default_instance_->InitAsDefaultInstance();
  TTitlePalaceAchievementNotify::default_instance_->InitAsDefaultInstance();
  TTitlePalaceChangePalaceNotify::default_instance_->InitAsDefaultInstance();
  TTitlePalaceNotify::default_instance_->InitAsDefaultInstance();
  TTitlePalaceGetUserInfoRsp::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_net_2fTitlePalace_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_net_2fTitlePalace_2eproto {
  StaticDescriptorInitializer_net_2fTitlePalace_2eproto() {
    protobuf_AddDesc_net_2fTitlePalace_2eproto();
  }
} static_descriptor_initializer_net_2fTitlePalace_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int TInTitlePalaceAchievementReward::kAchievementIdFieldNumber;
const int TInTitlePalaceAchievementReward::kRewardTimeFieldNumber;
#endif  // !_MSC_VER

TInTitlePalaceAchievementReward::TInTitlePalaceAchievementReward()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TInTitlePalaceAchievementReward)
}

void TInTitlePalaceAchievementReward::InitAsDefaultInstance() {
}

TInTitlePalaceAchievementReward::TInTitlePalaceAchievementReward(const TInTitlePalaceAchievementReward& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TInTitlePalaceAchievementReward)
}

void TInTitlePalaceAchievementReward::SharedCtor() {
  _cached_size_ = 0;
  achievementid_ = 0u;
  rewardtime_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TInTitlePalaceAchievementReward::~TInTitlePalaceAchievementReward() {
  // @@protoc_insertion_point(destructor:pb.TInTitlePalaceAchievementReward)
  SharedDtor();
}

void TInTitlePalaceAchievementReward::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TInTitlePalaceAchievementReward::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TInTitlePalaceAchievementReward::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TInTitlePalaceAchievementReward_descriptor_;
}

const TInTitlePalaceAchievementReward& TInTitlePalaceAchievementReward::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fTitlePalace_2eproto();
  return *default_instance_;
}

TInTitlePalaceAchievementReward* TInTitlePalaceAchievementReward::default_instance_ = NULL;

TInTitlePalaceAchievementReward* TInTitlePalaceAchievementReward::New() const {
  return new TInTitlePalaceAchievementReward;
}

void TInTitlePalaceAchievementReward::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<TInTitlePalaceAchievementReward*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(rewardtime_, achievementid_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TInTitlePalaceAchievementReward::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TInTitlePalaceAchievementReward)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 AchievementId = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &achievementid_)));
          set_has_achievementid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_RewardTime;
        break;
      }

      // optional uint64 RewardTime = 2;
      case 2: {
        if (tag == 16) {
         parse_RewardTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &rewardtime_)));
          set_has_rewardtime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TInTitlePalaceAchievementReward)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TInTitlePalaceAchievementReward)
  return false;
#undef DO_
}

void TInTitlePalaceAchievementReward::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TInTitlePalaceAchievementReward)
  // optional uint32 AchievementId = 1;
  if (has_achievementid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->achievementid(), output);
  }

  // optional uint64 RewardTime = 2;
  if (has_rewardtime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->rewardtime(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TInTitlePalaceAchievementReward)
}

::google::protobuf::uint8* TInTitlePalaceAchievementReward::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TInTitlePalaceAchievementReward)
  // optional uint32 AchievementId = 1;
  if (has_achievementid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->achievementid(), target);
  }

  // optional uint64 RewardTime = 2;
  if (has_rewardtime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->rewardtime(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TInTitlePalaceAchievementReward)
  return target;
}

int TInTitlePalaceAchievementReward::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 AchievementId = 1;
    if (has_achievementid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->achievementid());
    }

    // optional uint64 RewardTime = 2;
    if (has_rewardtime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->rewardtime());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TInTitlePalaceAchievementReward::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TInTitlePalaceAchievementReward* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TInTitlePalaceAchievementReward*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TInTitlePalaceAchievementReward::MergeFrom(const TInTitlePalaceAchievementReward& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_achievementid()) {
      set_achievementid(from.achievementid());
    }
    if (from.has_rewardtime()) {
      set_rewardtime(from.rewardtime());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TInTitlePalaceAchievementReward::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TInTitlePalaceAchievementReward::CopyFrom(const TInTitlePalaceAchievementReward& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TInTitlePalaceAchievementReward::IsInitialized() const {

  return true;
}

void TInTitlePalaceAchievementReward::Swap(TInTitlePalaceAchievementReward* other) {
  if (other != this) {
    std::swap(achievementid_, other->achievementid_);
    std::swap(rewardtime_, other->rewardtime_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TInTitlePalaceAchievementReward::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TInTitlePalaceAchievementReward_descriptor_;
  metadata.reflection = TInTitlePalaceAchievementReward_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TTitlePalaceUserInfo::kUserInfoFieldNumber;
const int TTitlePalaceUserInfo::kPopularityFieldNumber;
const int TTitlePalaceUserInfo::kEntryTimeFieldNumber;
const int TTitlePalaceUserInfo::kEndEntryTimeFieldNumber;
const int TTitlePalaceUserInfo::kAllyIdFieldNumber;
const int TTitlePalaceUserInfo::kTitleIdFieldNumber;
#endif  // !_MSC_VER

TTitlePalaceUserInfo::TTitlePalaceUserInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TTitlePalaceUserInfo)
}

void TTitlePalaceUserInfo::InitAsDefaultInstance() {
  userinfo_ = const_cast< ::pb::TUserSimpleInfo*>(&::pb::TUserSimpleInfo::default_instance());
}

TTitlePalaceUserInfo::TTitlePalaceUserInfo(const TTitlePalaceUserInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TTitlePalaceUserInfo)
}

void TTitlePalaceUserInfo::SharedCtor() {
  _cached_size_ = 0;
  userinfo_ = NULL;
  popularity_ = GOOGLE_ULONGLONG(0);
  entrytime_ = GOOGLE_ULONGLONG(0);
  endentrytime_ = GOOGLE_ULONGLONG(0);
  allyid_ = GOOGLE_ULONGLONG(0);
  titleid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TTitlePalaceUserInfo::~TTitlePalaceUserInfo() {
  // @@protoc_insertion_point(destructor:pb.TTitlePalaceUserInfo)
  SharedDtor();
}

void TTitlePalaceUserInfo::SharedDtor() {
  if (this != default_instance_) {
    delete userinfo_;
  }
}

void TTitlePalaceUserInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TTitlePalaceUserInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TTitlePalaceUserInfo_descriptor_;
}

const TTitlePalaceUserInfo& TTitlePalaceUserInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fTitlePalace_2eproto();
  return *default_instance_;
}

TTitlePalaceUserInfo* TTitlePalaceUserInfo::default_instance_ = NULL;

TTitlePalaceUserInfo* TTitlePalaceUserInfo::New() const {
  return new TTitlePalaceUserInfo;
}

void TTitlePalaceUserInfo::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<TTitlePalaceUserInfo*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 63) {
    ZR_(popularity_, titleid_);
    if (has_userinfo()) {
      if (userinfo_ != NULL) userinfo_->::pb::TUserSimpleInfo::Clear();
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TTitlePalaceUserInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TTitlePalaceUserInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .pb.TUserSimpleInfo UserInfo = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_userinfo()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_Popularity;
        break;
      }

      // optional uint64 Popularity = 2;
      case 2: {
        if (tag == 16) {
         parse_Popularity:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &popularity_)));
          set_has_popularity();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_EntryTime;
        break;
      }

      // optional uint64 EntryTime = 3;
      case 3: {
        if (tag == 24) {
         parse_EntryTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &entrytime_)));
          set_has_entrytime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_EndEntryTime;
        break;
      }

      // optional uint64 EndEntryTime = 4;
      case 4: {
        if (tag == 32) {
         parse_EndEntryTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &endentrytime_)));
          set_has_endentrytime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_AllyId;
        break;
      }

      // optional uint64 AllyId = 5;
      case 5: {
        if (tag == 40) {
         parse_AllyId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &allyid_)));
          set_has_allyid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_TitleId;
        break;
      }

      // optional uint32 TitleId = 6;
      case 6: {
        if (tag == 48) {
         parse_TitleId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &titleid_)));
          set_has_titleid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TTitlePalaceUserInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TTitlePalaceUserInfo)
  return false;
#undef DO_
}

void TTitlePalaceUserInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TTitlePalaceUserInfo)
  // optional .pb.TUserSimpleInfo UserInfo = 1;
  if (has_userinfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->userinfo(), output);
  }

  // optional uint64 Popularity = 2;
  if (has_popularity()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->popularity(), output);
  }

  // optional uint64 EntryTime = 3;
  if (has_entrytime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->entrytime(), output);
  }

  // optional uint64 EndEntryTime = 4;
  if (has_endentrytime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->endentrytime(), output);
  }

  // optional uint64 AllyId = 5;
  if (has_allyid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(5, this->allyid(), output);
  }

  // optional uint32 TitleId = 6;
  if (has_titleid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->titleid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TTitlePalaceUserInfo)
}

::google::protobuf::uint8* TTitlePalaceUserInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TTitlePalaceUserInfo)
  // optional .pb.TUserSimpleInfo UserInfo = 1;
  if (has_userinfo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->userinfo(), target);
  }

  // optional uint64 Popularity = 2;
  if (has_popularity()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->popularity(), target);
  }

  // optional uint64 EntryTime = 3;
  if (has_entrytime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->entrytime(), target);
  }

  // optional uint64 EndEntryTime = 4;
  if (has_endentrytime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->endentrytime(), target);
  }

  // optional uint64 AllyId = 5;
  if (has_allyid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(5, this->allyid(), target);
  }

  // optional uint32 TitleId = 6;
  if (has_titleid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->titleid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TTitlePalaceUserInfo)
  return target;
}

int TTitlePalaceUserInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .pb.TUserSimpleInfo UserInfo = 1;
    if (has_userinfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->userinfo());
    }

    // optional uint64 Popularity = 2;
    if (has_popularity()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->popularity());
    }

    // optional uint64 EntryTime = 3;
    if (has_entrytime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->entrytime());
    }

    // optional uint64 EndEntryTime = 4;
    if (has_endentrytime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->endentrytime());
    }

    // optional uint64 AllyId = 5;
    if (has_allyid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->allyid());
    }

    // optional uint32 TitleId = 6;
    if (has_titleid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->titleid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TTitlePalaceUserInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TTitlePalaceUserInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TTitlePalaceUserInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TTitlePalaceUserInfo::MergeFrom(const TTitlePalaceUserInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_userinfo()) {
      mutable_userinfo()->::pb::TUserSimpleInfo::MergeFrom(from.userinfo());
    }
    if (from.has_popularity()) {
      set_popularity(from.popularity());
    }
    if (from.has_entrytime()) {
      set_entrytime(from.entrytime());
    }
    if (from.has_endentrytime()) {
      set_endentrytime(from.endentrytime());
    }
    if (from.has_allyid()) {
      set_allyid(from.allyid());
    }
    if (from.has_titleid()) {
      set_titleid(from.titleid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TTitlePalaceUserInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TTitlePalaceUserInfo::CopyFrom(const TTitlePalaceUserInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TTitlePalaceUserInfo::IsInitialized() const {

  return true;
}

void TTitlePalaceUserInfo::Swap(TTitlePalaceUserInfo* other) {
  if (other != this) {
    std::swap(userinfo_, other->userinfo_);
    std::swap(popularity_, other->popularity_);
    std::swap(entrytime_, other->entrytime_);
    std::swap(endentrytime_, other->endentrytime_);
    std::swap(allyid_, other->allyid_);
    std::swap(titleid_, other->titleid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TTitlePalaceUserInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TTitlePalaceUserInfo_descriptor_;
  metadata.reflection = TTitlePalaceUserInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TTitlePalaceInfo::kPalaceIdFieldNumber;
const int TTitlePalaceInfo::kPalaceUserInfoArrFieldNumber;
#endif  // !_MSC_VER

TTitlePalaceInfo::TTitlePalaceInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TTitlePalaceInfo)
}

void TTitlePalaceInfo::InitAsDefaultInstance() {
}

TTitlePalaceInfo::TTitlePalaceInfo(const TTitlePalaceInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TTitlePalaceInfo)
}

void TTitlePalaceInfo::SharedCtor() {
  _cached_size_ = 0;
  palaceid_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TTitlePalaceInfo::~TTitlePalaceInfo() {
  // @@protoc_insertion_point(destructor:pb.TTitlePalaceInfo)
  SharedDtor();
}

void TTitlePalaceInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TTitlePalaceInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TTitlePalaceInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TTitlePalaceInfo_descriptor_;
}

const TTitlePalaceInfo& TTitlePalaceInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fTitlePalace_2eproto();
  return *default_instance_;
}

TTitlePalaceInfo* TTitlePalaceInfo::default_instance_ = NULL;

TTitlePalaceInfo* TTitlePalaceInfo::New() const {
  return new TTitlePalaceInfo;
}

void TTitlePalaceInfo::Clear() {
  palaceid_ = GOOGLE_ULONGLONG(0);
  palaceuserinfoarr_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TTitlePalaceInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TTitlePalaceInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 PalaceId = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &palaceid_)));
          set_has_palaceid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_PalaceUserInfoArr;
        break;
      }

      // repeated .pb.TTitlePalaceUserInfo PalaceUserInfoArr = 2;
      case 2: {
        if (tag == 18) {
         parse_PalaceUserInfoArr:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_palaceuserinfoarr()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_PalaceUserInfoArr;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TTitlePalaceInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TTitlePalaceInfo)
  return false;
#undef DO_
}

void TTitlePalaceInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TTitlePalaceInfo)
  // optional uint64 PalaceId = 1;
  if (has_palaceid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->palaceid(), output);
  }

  // repeated .pb.TTitlePalaceUserInfo PalaceUserInfoArr = 2;
  for (int i = 0; i < this->palaceuserinfoarr_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->palaceuserinfoarr(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TTitlePalaceInfo)
}

::google::protobuf::uint8* TTitlePalaceInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TTitlePalaceInfo)
  // optional uint64 PalaceId = 1;
  if (has_palaceid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->palaceid(), target);
  }

  // repeated .pb.TTitlePalaceUserInfo PalaceUserInfoArr = 2;
  for (int i = 0; i < this->palaceuserinfoarr_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->palaceuserinfoarr(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TTitlePalaceInfo)
  return target;
}

int TTitlePalaceInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 PalaceId = 1;
    if (has_palaceid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->palaceid());
    }

  }
  // repeated .pb.TTitlePalaceUserInfo PalaceUserInfoArr = 2;
  total_size += 1 * this->palaceuserinfoarr_size();
  for (int i = 0; i < this->palaceuserinfoarr_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->palaceuserinfoarr(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TTitlePalaceInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TTitlePalaceInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TTitlePalaceInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TTitlePalaceInfo::MergeFrom(const TTitlePalaceInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  palaceuserinfoarr_.MergeFrom(from.palaceuserinfoarr_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_palaceid()) {
      set_palaceid(from.palaceid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TTitlePalaceInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TTitlePalaceInfo::CopyFrom(const TTitlePalaceInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TTitlePalaceInfo::IsInitialized() const {

  return true;
}

void TTitlePalaceInfo::Swap(TTitlePalaceInfo* other) {
  if (other != this) {
    std::swap(palaceid_, other->palaceid_);
    palaceuserinfoarr_.Swap(&other->palaceuserinfoarr_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TTitlePalaceInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TTitlePalaceInfo_descriptor_;
  metadata.reflection = TTitlePalaceInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TTitlePalaceGetInfoRsp::kPopularityFieldNumber;
const int TTitlePalaceGetInfoRsp::kProstrateNumFieldNumber;
const int TTitlePalaceGetInfoRsp::kAllyIdFieldNumber;
const int TTitlePalaceGetInfoRsp::kChangeNumFieldNumber;
const int TTitlePalaceGetInfoRsp::kTitlePalaceInfoArrFieldNumber;
#endif  // !_MSC_VER

TTitlePalaceGetInfoRsp::TTitlePalaceGetInfoRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TTitlePalaceGetInfoRsp)
}

void TTitlePalaceGetInfoRsp::InitAsDefaultInstance() {
}

TTitlePalaceGetInfoRsp::TTitlePalaceGetInfoRsp(const TTitlePalaceGetInfoRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TTitlePalaceGetInfoRsp)
}

void TTitlePalaceGetInfoRsp::SharedCtor() {
  _cached_size_ = 0;
  popularity_ = GOOGLE_ULONGLONG(0);
  prostratenum_ = 0u;
  allyid_ = GOOGLE_ULONGLONG(0);
  changenum_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TTitlePalaceGetInfoRsp::~TTitlePalaceGetInfoRsp() {
  // @@protoc_insertion_point(destructor:pb.TTitlePalaceGetInfoRsp)
  SharedDtor();
}

void TTitlePalaceGetInfoRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TTitlePalaceGetInfoRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TTitlePalaceGetInfoRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TTitlePalaceGetInfoRsp_descriptor_;
}

const TTitlePalaceGetInfoRsp& TTitlePalaceGetInfoRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fTitlePalace_2eproto();
  return *default_instance_;
}

TTitlePalaceGetInfoRsp* TTitlePalaceGetInfoRsp::default_instance_ = NULL;

TTitlePalaceGetInfoRsp* TTitlePalaceGetInfoRsp::New() const {
  return new TTitlePalaceGetInfoRsp;
}

void TTitlePalaceGetInfoRsp::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<TTitlePalaceGetInfoRsp*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(popularity_, changenum_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  titlepalaceinfoarr_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TTitlePalaceGetInfoRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TTitlePalaceGetInfoRsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 Popularity = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &popularity_)));
          set_has_popularity();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_ProstrateNum;
        break;
      }

      // optional uint32 ProstrateNum = 2;
      case 2: {
        if (tag == 16) {
         parse_ProstrateNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &prostratenum_)));
          set_has_prostratenum();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_AllyId;
        break;
      }

      // optional uint64 AllyId = 3;
      case 3: {
        if (tag == 24) {
         parse_AllyId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &allyid_)));
          set_has_allyid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_ChangeNum;
        break;
      }

      // optional uint32 ChangeNum = 4;
      case 4: {
        if (tag == 32) {
         parse_ChangeNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &changenum_)));
          set_has_changenum();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_TitlePalaceInfoArr;
        break;
      }

      // repeated .pb.TTitlePalaceInfo TitlePalaceInfoArr = 5;
      case 5: {
        if (tag == 42) {
         parse_TitlePalaceInfoArr:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_titlepalaceinfoarr()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_TitlePalaceInfoArr;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TTitlePalaceGetInfoRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TTitlePalaceGetInfoRsp)
  return false;
#undef DO_
}

void TTitlePalaceGetInfoRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TTitlePalaceGetInfoRsp)
  // optional uint64 Popularity = 1;
  if (has_popularity()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->popularity(), output);
  }

  // optional uint32 ProstrateNum = 2;
  if (has_prostratenum()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->prostratenum(), output);
  }

  // optional uint64 AllyId = 3;
  if (has_allyid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->allyid(), output);
  }

  // optional uint32 ChangeNum = 4;
  if (has_changenum()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->changenum(), output);
  }

  // repeated .pb.TTitlePalaceInfo TitlePalaceInfoArr = 5;
  for (int i = 0; i < this->titlepalaceinfoarr_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->titlepalaceinfoarr(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TTitlePalaceGetInfoRsp)
}

::google::protobuf::uint8* TTitlePalaceGetInfoRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TTitlePalaceGetInfoRsp)
  // optional uint64 Popularity = 1;
  if (has_popularity()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->popularity(), target);
  }

  // optional uint32 ProstrateNum = 2;
  if (has_prostratenum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->prostratenum(), target);
  }

  // optional uint64 AllyId = 3;
  if (has_allyid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->allyid(), target);
  }

  // optional uint32 ChangeNum = 4;
  if (has_changenum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->changenum(), target);
  }

  // repeated .pb.TTitlePalaceInfo TitlePalaceInfoArr = 5;
  for (int i = 0; i < this->titlepalaceinfoarr_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->titlepalaceinfoarr(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TTitlePalaceGetInfoRsp)
  return target;
}

int TTitlePalaceGetInfoRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 Popularity = 1;
    if (has_popularity()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->popularity());
    }

    // optional uint32 ProstrateNum = 2;
    if (has_prostratenum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->prostratenum());
    }

    // optional uint64 AllyId = 3;
    if (has_allyid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->allyid());
    }

    // optional uint32 ChangeNum = 4;
    if (has_changenum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->changenum());
    }

  }
  // repeated .pb.TTitlePalaceInfo TitlePalaceInfoArr = 5;
  total_size += 1 * this->titlepalaceinfoarr_size();
  for (int i = 0; i < this->titlepalaceinfoarr_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->titlepalaceinfoarr(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TTitlePalaceGetInfoRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TTitlePalaceGetInfoRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TTitlePalaceGetInfoRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TTitlePalaceGetInfoRsp::MergeFrom(const TTitlePalaceGetInfoRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  titlepalaceinfoarr_.MergeFrom(from.titlepalaceinfoarr_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_popularity()) {
      set_popularity(from.popularity());
    }
    if (from.has_prostratenum()) {
      set_prostratenum(from.prostratenum());
    }
    if (from.has_allyid()) {
      set_allyid(from.allyid());
    }
    if (from.has_changenum()) {
      set_changenum(from.changenum());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TTitlePalaceGetInfoRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TTitlePalaceGetInfoRsp::CopyFrom(const TTitlePalaceGetInfoRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TTitlePalaceGetInfoRsp::IsInitialized() const {

  return true;
}

void TTitlePalaceGetInfoRsp::Swap(TTitlePalaceGetInfoRsp* other) {
  if (other != this) {
    std::swap(popularity_, other->popularity_);
    std::swap(prostratenum_, other->prostratenum_);
    std::swap(allyid_, other->allyid_);
    std::swap(changenum_, other->changenum_);
    titlepalaceinfoarr_.Swap(&other->titlepalaceinfoarr_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TTitlePalaceGetInfoRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TTitlePalaceGetInfoRsp_descriptor_;
  metadata.reflection = TTitlePalaceGetInfoRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TTitlePalaceEntryPalaceReq::kPalaceIdFieldNumber;
#endif  // !_MSC_VER

TTitlePalaceEntryPalaceReq::TTitlePalaceEntryPalaceReq()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TTitlePalaceEntryPalaceReq)
}

void TTitlePalaceEntryPalaceReq::InitAsDefaultInstance() {
}

TTitlePalaceEntryPalaceReq::TTitlePalaceEntryPalaceReq(const TTitlePalaceEntryPalaceReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TTitlePalaceEntryPalaceReq)
}

void TTitlePalaceEntryPalaceReq::SharedCtor() {
  _cached_size_ = 0;
  palaceid_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TTitlePalaceEntryPalaceReq::~TTitlePalaceEntryPalaceReq() {
  // @@protoc_insertion_point(destructor:pb.TTitlePalaceEntryPalaceReq)
  SharedDtor();
}

void TTitlePalaceEntryPalaceReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TTitlePalaceEntryPalaceReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TTitlePalaceEntryPalaceReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TTitlePalaceEntryPalaceReq_descriptor_;
}

const TTitlePalaceEntryPalaceReq& TTitlePalaceEntryPalaceReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fTitlePalace_2eproto();
  return *default_instance_;
}

TTitlePalaceEntryPalaceReq* TTitlePalaceEntryPalaceReq::default_instance_ = NULL;

TTitlePalaceEntryPalaceReq* TTitlePalaceEntryPalaceReq::New() const {
  return new TTitlePalaceEntryPalaceReq;
}

void TTitlePalaceEntryPalaceReq::Clear() {
  palaceid_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TTitlePalaceEntryPalaceReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TTitlePalaceEntryPalaceReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 PalaceId = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &palaceid_)));
          set_has_palaceid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TTitlePalaceEntryPalaceReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TTitlePalaceEntryPalaceReq)
  return false;
#undef DO_
}

void TTitlePalaceEntryPalaceReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TTitlePalaceEntryPalaceReq)
  // optional uint64 PalaceId = 1;
  if (has_palaceid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->palaceid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TTitlePalaceEntryPalaceReq)
}

::google::protobuf::uint8* TTitlePalaceEntryPalaceReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TTitlePalaceEntryPalaceReq)
  // optional uint64 PalaceId = 1;
  if (has_palaceid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->palaceid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TTitlePalaceEntryPalaceReq)
  return target;
}

int TTitlePalaceEntryPalaceReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 PalaceId = 1;
    if (has_palaceid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->palaceid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TTitlePalaceEntryPalaceReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TTitlePalaceEntryPalaceReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TTitlePalaceEntryPalaceReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TTitlePalaceEntryPalaceReq::MergeFrom(const TTitlePalaceEntryPalaceReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_palaceid()) {
      set_palaceid(from.palaceid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TTitlePalaceEntryPalaceReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TTitlePalaceEntryPalaceReq::CopyFrom(const TTitlePalaceEntryPalaceReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TTitlePalaceEntryPalaceReq::IsInitialized() const {

  return true;
}

void TTitlePalaceEntryPalaceReq::Swap(TTitlePalaceEntryPalaceReq* other) {
  if (other != this) {
    std::swap(palaceid_, other->palaceid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TTitlePalaceEntryPalaceReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TTitlePalaceEntryPalaceReq_descriptor_;
  metadata.reflection = TTitlePalaceEntryPalaceReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TTitlePalaceEntryPalaceRsp::kEntryTimeFieldNumber;
const int TTitlePalaceEntryPalaceRsp::kEndEntryTimeFieldNumber;
#endif  // !_MSC_VER

TTitlePalaceEntryPalaceRsp::TTitlePalaceEntryPalaceRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TTitlePalaceEntryPalaceRsp)
}

void TTitlePalaceEntryPalaceRsp::InitAsDefaultInstance() {
}

TTitlePalaceEntryPalaceRsp::TTitlePalaceEntryPalaceRsp(const TTitlePalaceEntryPalaceRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TTitlePalaceEntryPalaceRsp)
}

void TTitlePalaceEntryPalaceRsp::SharedCtor() {
  _cached_size_ = 0;
  entrytime_ = GOOGLE_ULONGLONG(0);
  endentrytime_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TTitlePalaceEntryPalaceRsp::~TTitlePalaceEntryPalaceRsp() {
  // @@protoc_insertion_point(destructor:pb.TTitlePalaceEntryPalaceRsp)
  SharedDtor();
}

void TTitlePalaceEntryPalaceRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TTitlePalaceEntryPalaceRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TTitlePalaceEntryPalaceRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TTitlePalaceEntryPalaceRsp_descriptor_;
}

const TTitlePalaceEntryPalaceRsp& TTitlePalaceEntryPalaceRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fTitlePalace_2eproto();
  return *default_instance_;
}

TTitlePalaceEntryPalaceRsp* TTitlePalaceEntryPalaceRsp::default_instance_ = NULL;

TTitlePalaceEntryPalaceRsp* TTitlePalaceEntryPalaceRsp::New() const {
  return new TTitlePalaceEntryPalaceRsp;
}

void TTitlePalaceEntryPalaceRsp::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<TTitlePalaceEntryPalaceRsp*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(entrytime_, endentrytime_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TTitlePalaceEntryPalaceRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TTitlePalaceEntryPalaceRsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 EntryTime = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &entrytime_)));
          set_has_entrytime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_EndEntryTime;
        break;
      }

      // optional uint64 EndEntryTime = 2;
      case 2: {
        if (tag == 16) {
         parse_EndEntryTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &endentrytime_)));
          set_has_endentrytime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TTitlePalaceEntryPalaceRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TTitlePalaceEntryPalaceRsp)
  return false;
#undef DO_
}

void TTitlePalaceEntryPalaceRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TTitlePalaceEntryPalaceRsp)
  // optional uint64 EntryTime = 1;
  if (has_entrytime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->entrytime(), output);
  }

  // optional uint64 EndEntryTime = 2;
  if (has_endentrytime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->endentrytime(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TTitlePalaceEntryPalaceRsp)
}

::google::protobuf::uint8* TTitlePalaceEntryPalaceRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TTitlePalaceEntryPalaceRsp)
  // optional uint64 EntryTime = 1;
  if (has_entrytime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->entrytime(), target);
  }

  // optional uint64 EndEntryTime = 2;
  if (has_endentrytime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->endentrytime(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TTitlePalaceEntryPalaceRsp)
  return target;
}

int TTitlePalaceEntryPalaceRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 EntryTime = 1;
    if (has_entrytime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->entrytime());
    }

    // optional uint64 EndEntryTime = 2;
    if (has_endentrytime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->endentrytime());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TTitlePalaceEntryPalaceRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TTitlePalaceEntryPalaceRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TTitlePalaceEntryPalaceRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TTitlePalaceEntryPalaceRsp::MergeFrom(const TTitlePalaceEntryPalaceRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_entrytime()) {
      set_entrytime(from.entrytime());
    }
    if (from.has_endentrytime()) {
      set_endentrytime(from.endentrytime());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TTitlePalaceEntryPalaceRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TTitlePalaceEntryPalaceRsp::CopyFrom(const TTitlePalaceEntryPalaceRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TTitlePalaceEntryPalaceRsp::IsInitialized() const {

  return true;
}

void TTitlePalaceEntryPalaceRsp::Swap(TTitlePalaceEntryPalaceRsp* other) {
  if (other != this) {
    std::swap(entrytime_, other->entrytime_);
    std::swap(endentrytime_, other->endentrytime_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TTitlePalaceEntryPalaceRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TTitlePalaceEntryPalaceRsp_descriptor_;
  metadata.reflection = TTitlePalaceEntryPalaceRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TTitlePalaceProstrateReq::kPalaceIdFieldNumber;
const int TTitlePalaceProstrateReq::kUidFieldNumber;
#endif  // !_MSC_VER

TTitlePalaceProstrateReq::TTitlePalaceProstrateReq()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TTitlePalaceProstrateReq)
}

void TTitlePalaceProstrateReq::InitAsDefaultInstance() {
}

TTitlePalaceProstrateReq::TTitlePalaceProstrateReq(const TTitlePalaceProstrateReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TTitlePalaceProstrateReq)
}

void TTitlePalaceProstrateReq::SharedCtor() {
  _cached_size_ = 0;
  palaceid_ = GOOGLE_ULONGLONG(0);
  uid_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TTitlePalaceProstrateReq::~TTitlePalaceProstrateReq() {
  // @@protoc_insertion_point(destructor:pb.TTitlePalaceProstrateReq)
  SharedDtor();
}

void TTitlePalaceProstrateReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TTitlePalaceProstrateReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TTitlePalaceProstrateReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TTitlePalaceProstrateReq_descriptor_;
}

const TTitlePalaceProstrateReq& TTitlePalaceProstrateReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fTitlePalace_2eproto();
  return *default_instance_;
}

TTitlePalaceProstrateReq* TTitlePalaceProstrateReq::default_instance_ = NULL;

TTitlePalaceProstrateReq* TTitlePalaceProstrateReq::New() const {
  return new TTitlePalaceProstrateReq;
}

void TTitlePalaceProstrateReq::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<TTitlePalaceProstrateReq*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(palaceid_, uid_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TTitlePalaceProstrateReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TTitlePalaceProstrateReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 PalaceId = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &palaceid_)));
          set_has_palaceid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_Uid;
        break;
      }

      // optional uint64 Uid = 2;
      case 2: {
        if (tag == 16) {
         parse_Uid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &uid_)));
          set_has_uid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TTitlePalaceProstrateReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TTitlePalaceProstrateReq)
  return false;
#undef DO_
}

void TTitlePalaceProstrateReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TTitlePalaceProstrateReq)
  // optional uint64 PalaceId = 1;
  if (has_palaceid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->palaceid(), output);
  }

  // optional uint64 Uid = 2;
  if (has_uid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->uid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TTitlePalaceProstrateReq)
}

::google::protobuf::uint8* TTitlePalaceProstrateReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TTitlePalaceProstrateReq)
  // optional uint64 PalaceId = 1;
  if (has_palaceid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->palaceid(), target);
  }

  // optional uint64 Uid = 2;
  if (has_uid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->uid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TTitlePalaceProstrateReq)
  return target;
}

int TTitlePalaceProstrateReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 PalaceId = 1;
    if (has_palaceid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->palaceid());
    }

    // optional uint64 Uid = 2;
    if (has_uid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->uid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TTitlePalaceProstrateReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TTitlePalaceProstrateReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TTitlePalaceProstrateReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TTitlePalaceProstrateReq::MergeFrom(const TTitlePalaceProstrateReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_palaceid()) {
      set_palaceid(from.palaceid());
    }
    if (from.has_uid()) {
      set_uid(from.uid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TTitlePalaceProstrateReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TTitlePalaceProstrateReq::CopyFrom(const TTitlePalaceProstrateReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TTitlePalaceProstrateReq::IsInitialized() const {

  return true;
}

void TTitlePalaceProstrateReq::Swap(TTitlePalaceProstrateReq* other) {
  if (other != this) {
    std::swap(palaceid_, other->palaceid_);
    std::swap(uid_, other->uid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TTitlePalaceProstrateReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TTitlePalaceProstrateReq_descriptor_;
  metadata.reflection = TTitlePalaceProstrateReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TTitlePalaceProstrateRsp::kRewardArrFieldNumber;
#endif  // !_MSC_VER

TTitlePalaceProstrateRsp::TTitlePalaceProstrateRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TTitlePalaceProstrateRsp)
}

void TTitlePalaceProstrateRsp::InitAsDefaultInstance() {
}

TTitlePalaceProstrateRsp::TTitlePalaceProstrateRsp(const TTitlePalaceProstrateRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TTitlePalaceProstrateRsp)
}

void TTitlePalaceProstrateRsp::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TTitlePalaceProstrateRsp::~TTitlePalaceProstrateRsp() {
  // @@protoc_insertion_point(destructor:pb.TTitlePalaceProstrateRsp)
  SharedDtor();
}

void TTitlePalaceProstrateRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TTitlePalaceProstrateRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TTitlePalaceProstrateRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TTitlePalaceProstrateRsp_descriptor_;
}

const TTitlePalaceProstrateRsp& TTitlePalaceProstrateRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fTitlePalace_2eproto();
  return *default_instance_;
}

TTitlePalaceProstrateRsp* TTitlePalaceProstrateRsp::default_instance_ = NULL;

TTitlePalaceProstrateRsp* TTitlePalaceProstrateRsp::New() const {
  return new TTitlePalaceProstrateRsp;
}

void TTitlePalaceProstrateRsp::Clear() {
  rewardarr_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TTitlePalaceProstrateRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TTitlePalaceProstrateRsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .pb.TCommonReward RewardArr = 1;
      case 1: {
        if (tag == 10) {
         parse_RewardArr:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_rewardarr()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_RewardArr;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TTitlePalaceProstrateRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TTitlePalaceProstrateRsp)
  return false;
#undef DO_
}

void TTitlePalaceProstrateRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TTitlePalaceProstrateRsp)
  // repeated .pb.TCommonReward RewardArr = 1;
  for (int i = 0; i < this->rewardarr_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->rewardarr(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TTitlePalaceProstrateRsp)
}

::google::protobuf::uint8* TTitlePalaceProstrateRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TTitlePalaceProstrateRsp)
  // repeated .pb.TCommonReward RewardArr = 1;
  for (int i = 0; i < this->rewardarr_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->rewardarr(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TTitlePalaceProstrateRsp)
  return target;
}

int TTitlePalaceProstrateRsp::ByteSize() const {
  int total_size = 0;

  // repeated .pb.TCommonReward RewardArr = 1;
  total_size += 1 * this->rewardarr_size();
  for (int i = 0; i < this->rewardarr_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->rewardarr(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TTitlePalaceProstrateRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TTitlePalaceProstrateRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TTitlePalaceProstrateRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TTitlePalaceProstrateRsp::MergeFrom(const TTitlePalaceProstrateRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  rewardarr_.MergeFrom(from.rewardarr_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TTitlePalaceProstrateRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TTitlePalaceProstrateRsp::CopyFrom(const TTitlePalaceProstrateRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TTitlePalaceProstrateRsp::IsInitialized() const {

  return true;
}

void TTitlePalaceProstrateRsp::Swap(TTitlePalaceProstrateRsp* other) {
  if (other != this) {
    rewardarr_.Swap(&other->rewardarr_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TTitlePalaceProstrateRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TTitlePalaceProstrateRsp_descriptor_;
  metadata.reflection = TTitlePalaceProstrateRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TTitlePalaceGetPalaceInfoReq::kPalaceIdFieldNumber;
#endif  // !_MSC_VER

TTitlePalaceGetPalaceInfoReq::TTitlePalaceGetPalaceInfoReq()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TTitlePalaceGetPalaceInfoReq)
}

void TTitlePalaceGetPalaceInfoReq::InitAsDefaultInstance() {
}

TTitlePalaceGetPalaceInfoReq::TTitlePalaceGetPalaceInfoReq(const TTitlePalaceGetPalaceInfoReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TTitlePalaceGetPalaceInfoReq)
}

void TTitlePalaceGetPalaceInfoReq::SharedCtor() {
  _cached_size_ = 0;
  palaceid_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TTitlePalaceGetPalaceInfoReq::~TTitlePalaceGetPalaceInfoReq() {
  // @@protoc_insertion_point(destructor:pb.TTitlePalaceGetPalaceInfoReq)
  SharedDtor();
}

void TTitlePalaceGetPalaceInfoReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TTitlePalaceGetPalaceInfoReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TTitlePalaceGetPalaceInfoReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TTitlePalaceGetPalaceInfoReq_descriptor_;
}

const TTitlePalaceGetPalaceInfoReq& TTitlePalaceGetPalaceInfoReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fTitlePalace_2eproto();
  return *default_instance_;
}

TTitlePalaceGetPalaceInfoReq* TTitlePalaceGetPalaceInfoReq::default_instance_ = NULL;

TTitlePalaceGetPalaceInfoReq* TTitlePalaceGetPalaceInfoReq::New() const {
  return new TTitlePalaceGetPalaceInfoReq;
}

void TTitlePalaceGetPalaceInfoReq::Clear() {
  palaceid_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TTitlePalaceGetPalaceInfoReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TTitlePalaceGetPalaceInfoReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 PalaceId = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &palaceid_)));
          set_has_palaceid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TTitlePalaceGetPalaceInfoReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TTitlePalaceGetPalaceInfoReq)
  return false;
#undef DO_
}

void TTitlePalaceGetPalaceInfoReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TTitlePalaceGetPalaceInfoReq)
  // optional uint64 PalaceId = 1;
  if (has_palaceid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->palaceid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TTitlePalaceGetPalaceInfoReq)
}

::google::protobuf::uint8* TTitlePalaceGetPalaceInfoReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TTitlePalaceGetPalaceInfoReq)
  // optional uint64 PalaceId = 1;
  if (has_palaceid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->palaceid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TTitlePalaceGetPalaceInfoReq)
  return target;
}

int TTitlePalaceGetPalaceInfoReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 PalaceId = 1;
    if (has_palaceid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->palaceid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TTitlePalaceGetPalaceInfoReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TTitlePalaceGetPalaceInfoReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TTitlePalaceGetPalaceInfoReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TTitlePalaceGetPalaceInfoReq::MergeFrom(const TTitlePalaceGetPalaceInfoReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_palaceid()) {
      set_palaceid(from.palaceid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TTitlePalaceGetPalaceInfoReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TTitlePalaceGetPalaceInfoReq::CopyFrom(const TTitlePalaceGetPalaceInfoReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TTitlePalaceGetPalaceInfoReq::IsInitialized() const {

  return true;
}

void TTitlePalaceGetPalaceInfoReq::Swap(TTitlePalaceGetPalaceInfoReq* other) {
  if (other != this) {
    std::swap(palaceid_, other->palaceid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TTitlePalaceGetPalaceInfoReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TTitlePalaceGetPalaceInfoReq_descriptor_;
  metadata.reflection = TTitlePalaceGetPalaceInfoReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TTitlePalaceGetPalaceInfoRsp::kTitlePalaceInfoFieldNumber;
#endif  // !_MSC_VER

TTitlePalaceGetPalaceInfoRsp::TTitlePalaceGetPalaceInfoRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TTitlePalaceGetPalaceInfoRsp)
}

void TTitlePalaceGetPalaceInfoRsp::InitAsDefaultInstance() {
  titlepalaceinfo_ = const_cast< ::pb::TTitlePalaceInfo*>(&::pb::TTitlePalaceInfo::default_instance());
}

TTitlePalaceGetPalaceInfoRsp::TTitlePalaceGetPalaceInfoRsp(const TTitlePalaceGetPalaceInfoRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TTitlePalaceGetPalaceInfoRsp)
}

void TTitlePalaceGetPalaceInfoRsp::SharedCtor() {
  _cached_size_ = 0;
  titlepalaceinfo_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TTitlePalaceGetPalaceInfoRsp::~TTitlePalaceGetPalaceInfoRsp() {
  // @@protoc_insertion_point(destructor:pb.TTitlePalaceGetPalaceInfoRsp)
  SharedDtor();
}

void TTitlePalaceGetPalaceInfoRsp::SharedDtor() {
  if (this != default_instance_) {
    delete titlepalaceinfo_;
  }
}

void TTitlePalaceGetPalaceInfoRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TTitlePalaceGetPalaceInfoRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TTitlePalaceGetPalaceInfoRsp_descriptor_;
}

const TTitlePalaceGetPalaceInfoRsp& TTitlePalaceGetPalaceInfoRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fTitlePalace_2eproto();
  return *default_instance_;
}

TTitlePalaceGetPalaceInfoRsp* TTitlePalaceGetPalaceInfoRsp::default_instance_ = NULL;

TTitlePalaceGetPalaceInfoRsp* TTitlePalaceGetPalaceInfoRsp::New() const {
  return new TTitlePalaceGetPalaceInfoRsp;
}

void TTitlePalaceGetPalaceInfoRsp::Clear() {
  if (has_titlepalaceinfo()) {
    if (titlepalaceinfo_ != NULL) titlepalaceinfo_->::pb::TTitlePalaceInfo::Clear();
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TTitlePalaceGetPalaceInfoRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TTitlePalaceGetPalaceInfoRsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .pb.TTitlePalaceInfo TitlePalaceInfo = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_titlepalaceinfo()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TTitlePalaceGetPalaceInfoRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TTitlePalaceGetPalaceInfoRsp)
  return false;
#undef DO_
}

void TTitlePalaceGetPalaceInfoRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TTitlePalaceGetPalaceInfoRsp)
  // optional .pb.TTitlePalaceInfo TitlePalaceInfo = 1;
  if (has_titlepalaceinfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->titlepalaceinfo(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TTitlePalaceGetPalaceInfoRsp)
}

::google::protobuf::uint8* TTitlePalaceGetPalaceInfoRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TTitlePalaceGetPalaceInfoRsp)
  // optional .pb.TTitlePalaceInfo TitlePalaceInfo = 1;
  if (has_titlepalaceinfo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->titlepalaceinfo(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TTitlePalaceGetPalaceInfoRsp)
  return target;
}

int TTitlePalaceGetPalaceInfoRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .pb.TTitlePalaceInfo TitlePalaceInfo = 1;
    if (has_titlepalaceinfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->titlepalaceinfo());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TTitlePalaceGetPalaceInfoRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TTitlePalaceGetPalaceInfoRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TTitlePalaceGetPalaceInfoRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TTitlePalaceGetPalaceInfoRsp::MergeFrom(const TTitlePalaceGetPalaceInfoRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_titlepalaceinfo()) {
      mutable_titlepalaceinfo()->::pb::TTitlePalaceInfo::MergeFrom(from.titlepalaceinfo());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TTitlePalaceGetPalaceInfoRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TTitlePalaceGetPalaceInfoRsp::CopyFrom(const TTitlePalaceGetPalaceInfoRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TTitlePalaceGetPalaceInfoRsp::IsInitialized() const {

  return true;
}

void TTitlePalaceGetPalaceInfoRsp::Swap(TTitlePalaceGetPalaceInfoRsp* other) {
  if (other != this) {
    std::swap(titlepalaceinfo_, other->titlepalaceinfo_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TTitlePalaceGetPalaceInfoRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TTitlePalaceGetPalaceInfoRsp_descriptor_;
  metadata.reflection = TTitlePalaceGetPalaceInfoRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TTitlePalaceGetMineBuffReq::kUidFieldNumber;
#endif  // !_MSC_VER

TTitlePalaceGetMineBuffReq::TTitlePalaceGetMineBuffReq()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TTitlePalaceGetMineBuffReq)
}

void TTitlePalaceGetMineBuffReq::InitAsDefaultInstance() {
}

TTitlePalaceGetMineBuffReq::TTitlePalaceGetMineBuffReq(const TTitlePalaceGetMineBuffReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TTitlePalaceGetMineBuffReq)
}

void TTitlePalaceGetMineBuffReq::SharedCtor() {
  _cached_size_ = 0;
  uid_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TTitlePalaceGetMineBuffReq::~TTitlePalaceGetMineBuffReq() {
  // @@protoc_insertion_point(destructor:pb.TTitlePalaceGetMineBuffReq)
  SharedDtor();
}

void TTitlePalaceGetMineBuffReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TTitlePalaceGetMineBuffReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TTitlePalaceGetMineBuffReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TTitlePalaceGetMineBuffReq_descriptor_;
}

const TTitlePalaceGetMineBuffReq& TTitlePalaceGetMineBuffReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fTitlePalace_2eproto();
  return *default_instance_;
}

TTitlePalaceGetMineBuffReq* TTitlePalaceGetMineBuffReq::default_instance_ = NULL;

TTitlePalaceGetMineBuffReq* TTitlePalaceGetMineBuffReq::New() const {
  return new TTitlePalaceGetMineBuffReq;
}

void TTitlePalaceGetMineBuffReq::Clear() {
  uid_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TTitlePalaceGetMineBuffReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TTitlePalaceGetMineBuffReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 Uid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &uid_)));
          set_has_uid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TTitlePalaceGetMineBuffReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TTitlePalaceGetMineBuffReq)
  return false;
#undef DO_
}

void TTitlePalaceGetMineBuffReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TTitlePalaceGetMineBuffReq)
  // optional uint64 Uid = 1;
  if (has_uid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->uid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TTitlePalaceGetMineBuffReq)
}

::google::protobuf::uint8* TTitlePalaceGetMineBuffReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TTitlePalaceGetMineBuffReq)
  // optional uint64 Uid = 1;
  if (has_uid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->uid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TTitlePalaceGetMineBuffReq)
  return target;
}

int TTitlePalaceGetMineBuffReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 Uid = 1;
    if (has_uid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->uid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TTitlePalaceGetMineBuffReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TTitlePalaceGetMineBuffReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TTitlePalaceGetMineBuffReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TTitlePalaceGetMineBuffReq::MergeFrom(const TTitlePalaceGetMineBuffReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_uid()) {
      set_uid(from.uid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TTitlePalaceGetMineBuffReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TTitlePalaceGetMineBuffReq::CopyFrom(const TTitlePalaceGetMineBuffReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TTitlePalaceGetMineBuffReq::IsInitialized() const {

  return true;
}

void TTitlePalaceGetMineBuffReq::Swap(TTitlePalaceGetMineBuffReq* other) {
  if (other != this) {
    std::swap(uid_, other->uid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TTitlePalaceGetMineBuffReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TTitlePalaceGetMineBuffReq_descriptor_;
  metadata.reflection = TTitlePalaceGetMineBuffReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TTitlePalaceGetMineBuffRsp::kBuffAddFieldNumber;
#endif  // !_MSC_VER

TTitlePalaceGetMineBuffRsp::TTitlePalaceGetMineBuffRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TTitlePalaceGetMineBuffRsp)
}

void TTitlePalaceGetMineBuffRsp::InitAsDefaultInstance() {
}

TTitlePalaceGetMineBuffRsp::TTitlePalaceGetMineBuffRsp(const TTitlePalaceGetMineBuffRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TTitlePalaceGetMineBuffRsp)
}

void TTitlePalaceGetMineBuffRsp::SharedCtor() {
  _cached_size_ = 0;
  buffadd_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TTitlePalaceGetMineBuffRsp::~TTitlePalaceGetMineBuffRsp() {
  // @@protoc_insertion_point(destructor:pb.TTitlePalaceGetMineBuffRsp)
  SharedDtor();
}

void TTitlePalaceGetMineBuffRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TTitlePalaceGetMineBuffRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TTitlePalaceGetMineBuffRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TTitlePalaceGetMineBuffRsp_descriptor_;
}

const TTitlePalaceGetMineBuffRsp& TTitlePalaceGetMineBuffRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fTitlePalace_2eproto();
  return *default_instance_;
}

TTitlePalaceGetMineBuffRsp* TTitlePalaceGetMineBuffRsp::default_instance_ = NULL;

TTitlePalaceGetMineBuffRsp* TTitlePalaceGetMineBuffRsp::New() const {
  return new TTitlePalaceGetMineBuffRsp;
}

void TTitlePalaceGetMineBuffRsp::Clear() {
  buffadd_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TTitlePalaceGetMineBuffRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TTitlePalaceGetMineBuffRsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 BuffAdd = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &buffadd_)));
          set_has_buffadd();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TTitlePalaceGetMineBuffRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TTitlePalaceGetMineBuffRsp)
  return false;
#undef DO_
}

void TTitlePalaceGetMineBuffRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TTitlePalaceGetMineBuffRsp)
  // optional uint32 BuffAdd = 1;
  if (has_buffadd()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->buffadd(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TTitlePalaceGetMineBuffRsp)
}

::google::protobuf::uint8* TTitlePalaceGetMineBuffRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TTitlePalaceGetMineBuffRsp)
  // optional uint32 BuffAdd = 1;
  if (has_buffadd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->buffadd(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TTitlePalaceGetMineBuffRsp)
  return target;
}

int TTitlePalaceGetMineBuffRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 BuffAdd = 1;
    if (has_buffadd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->buffadd());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TTitlePalaceGetMineBuffRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TTitlePalaceGetMineBuffRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TTitlePalaceGetMineBuffRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TTitlePalaceGetMineBuffRsp::MergeFrom(const TTitlePalaceGetMineBuffRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_buffadd()) {
      set_buffadd(from.buffadd());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TTitlePalaceGetMineBuffRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TTitlePalaceGetMineBuffRsp::CopyFrom(const TTitlePalaceGetMineBuffRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TTitlePalaceGetMineBuffRsp::IsInitialized() const {

  return true;
}

void TTitlePalaceGetMineBuffRsp::Swap(TTitlePalaceGetMineBuffRsp* other) {
  if (other != this) {
    std::swap(buffadd_, other->buffadd_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TTitlePalaceGetMineBuffRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TTitlePalaceGetMineBuffRsp_descriptor_;
  metadata.reflection = TTitlePalaceGetMineBuffRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TInTitlePalaceHistoryTid::kTidFieldNumber;
const int TInTitlePalaceHistoryTid::kNumFieldNumber;
#endif  // !_MSC_VER

TInTitlePalaceHistoryTid::TInTitlePalaceHistoryTid()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TInTitlePalaceHistoryTid)
}

void TInTitlePalaceHistoryTid::InitAsDefaultInstance() {
}

TInTitlePalaceHistoryTid::TInTitlePalaceHistoryTid(const TInTitlePalaceHistoryTid& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TInTitlePalaceHistoryTid)
}

void TInTitlePalaceHistoryTid::SharedCtor() {
  _cached_size_ = 0;
  tid_ = 0u;
  num_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TInTitlePalaceHistoryTid::~TInTitlePalaceHistoryTid() {
  // @@protoc_insertion_point(destructor:pb.TInTitlePalaceHistoryTid)
  SharedDtor();
}

void TInTitlePalaceHistoryTid::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TInTitlePalaceHistoryTid::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TInTitlePalaceHistoryTid::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TInTitlePalaceHistoryTid_descriptor_;
}

const TInTitlePalaceHistoryTid& TInTitlePalaceHistoryTid::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fTitlePalace_2eproto();
  return *default_instance_;
}

TInTitlePalaceHistoryTid* TInTitlePalaceHistoryTid::default_instance_ = NULL;

TInTitlePalaceHistoryTid* TInTitlePalaceHistoryTid::New() const {
  return new TInTitlePalaceHistoryTid;
}

void TInTitlePalaceHistoryTid::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<TInTitlePalaceHistoryTid*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(tid_, num_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TInTitlePalaceHistoryTid::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TInTitlePalaceHistoryTid)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 Tid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &tid_)));
          set_has_tid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_Num;
        break;
      }

      // optional uint32 Num = 2;
      case 2: {
        if (tag == 16) {
         parse_Num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &num_)));
          set_has_num();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TInTitlePalaceHistoryTid)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TInTitlePalaceHistoryTid)
  return false;
#undef DO_
}

void TInTitlePalaceHistoryTid::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TInTitlePalaceHistoryTid)
  // optional uint32 Tid = 1;
  if (has_tid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->tid(), output);
  }

  // optional uint32 Num = 2;
  if (has_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->num(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TInTitlePalaceHistoryTid)
}

::google::protobuf::uint8* TInTitlePalaceHistoryTid::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TInTitlePalaceHistoryTid)
  // optional uint32 Tid = 1;
  if (has_tid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->tid(), target);
  }

  // optional uint32 Num = 2;
  if (has_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->num(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TInTitlePalaceHistoryTid)
  return target;
}

int TInTitlePalaceHistoryTid::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 Tid = 1;
    if (has_tid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->tid());
    }

    // optional uint32 Num = 2;
    if (has_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->num());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TInTitlePalaceHistoryTid::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TInTitlePalaceHistoryTid* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TInTitlePalaceHistoryTid*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TInTitlePalaceHistoryTid::MergeFrom(const TInTitlePalaceHistoryTid& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_tid()) {
      set_tid(from.tid());
    }
    if (from.has_num()) {
      set_num(from.num());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TInTitlePalaceHistoryTid::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TInTitlePalaceHistoryTid::CopyFrom(const TInTitlePalaceHistoryTid& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TInTitlePalaceHistoryTid::IsInitialized() const {

  return true;
}

void TInTitlePalaceHistoryTid::Swap(TInTitlePalaceHistoryTid* other) {
  if (other != this) {
    std::swap(tid_, other->tid_);
    std::swap(num_, other->num_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TInTitlePalaceHistoryTid::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TInTitlePalaceHistoryTid_descriptor_;
  metadata.reflection = TInTitlePalaceHistoryTid_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TInTitlePalaceGetAchievementInfoRsp::kAchievementScoreFieldNumber;
const int TInTitlePalaceGetAchievementInfoRsp::kHistoryTidsFieldNumber;
const int TInTitlePalaceGetAchievementInfoRsp::kRewardArrFieldNumber;
#endif  // !_MSC_VER

TInTitlePalaceGetAchievementInfoRsp::TInTitlePalaceGetAchievementInfoRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TInTitlePalaceGetAchievementInfoRsp)
}

void TInTitlePalaceGetAchievementInfoRsp::InitAsDefaultInstance() {
}

TInTitlePalaceGetAchievementInfoRsp::TInTitlePalaceGetAchievementInfoRsp(const TInTitlePalaceGetAchievementInfoRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TInTitlePalaceGetAchievementInfoRsp)
}

void TInTitlePalaceGetAchievementInfoRsp::SharedCtor() {
  _cached_size_ = 0;
  achievementscore_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TInTitlePalaceGetAchievementInfoRsp::~TInTitlePalaceGetAchievementInfoRsp() {
  // @@protoc_insertion_point(destructor:pb.TInTitlePalaceGetAchievementInfoRsp)
  SharedDtor();
}

void TInTitlePalaceGetAchievementInfoRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TInTitlePalaceGetAchievementInfoRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TInTitlePalaceGetAchievementInfoRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TInTitlePalaceGetAchievementInfoRsp_descriptor_;
}

const TInTitlePalaceGetAchievementInfoRsp& TInTitlePalaceGetAchievementInfoRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fTitlePalace_2eproto();
  return *default_instance_;
}

TInTitlePalaceGetAchievementInfoRsp* TInTitlePalaceGetAchievementInfoRsp::default_instance_ = NULL;

TInTitlePalaceGetAchievementInfoRsp* TInTitlePalaceGetAchievementInfoRsp::New() const {
  return new TInTitlePalaceGetAchievementInfoRsp;
}

void TInTitlePalaceGetAchievementInfoRsp::Clear() {
  achievementscore_ = 0u;
  historytids_.Clear();
  rewardarr_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TInTitlePalaceGetAchievementInfoRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TInTitlePalaceGetAchievementInfoRsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 AchievementScore = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &achievementscore_)));
          set_has_achievementscore();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_HistoryTids;
        break;
      }

      // repeated .pb.TInTitlePalaceHistoryTid HistoryTids = 2;
      case 2: {
        if (tag == 18) {
         parse_HistoryTids:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_historytids()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_HistoryTids;
        if (input->ExpectTag(26)) goto parse_RewardArr;
        break;
      }

      // repeated .pb.TInTitlePalaceAchievementReward RewardArr = 3;
      case 3: {
        if (tag == 26) {
         parse_RewardArr:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_rewardarr()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_RewardArr;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TInTitlePalaceGetAchievementInfoRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TInTitlePalaceGetAchievementInfoRsp)
  return false;
#undef DO_
}

void TInTitlePalaceGetAchievementInfoRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TInTitlePalaceGetAchievementInfoRsp)
  // optional uint32 AchievementScore = 1;
  if (has_achievementscore()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->achievementscore(), output);
  }

  // repeated .pb.TInTitlePalaceHistoryTid HistoryTids = 2;
  for (int i = 0; i < this->historytids_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->historytids(i), output);
  }

  // repeated .pb.TInTitlePalaceAchievementReward RewardArr = 3;
  for (int i = 0; i < this->rewardarr_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->rewardarr(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TInTitlePalaceGetAchievementInfoRsp)
}

::google::protobuf::uint8* TInTitlePalaceGetAchievementInfoRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TInTitlePalaceGetAchievementInfoRsp)
  // optional uint32 AchievementScore = 1;
  if (has_achievementscore()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->achievementscore(), target);
  }

  // repeated .pb.TInTitlePalaceHistoryTid HistoryTids = 2;
  for (int i = 0; i < this->historytids_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->historytids(i), target);
  }

  // repeated .pb.TInTitlePalaceAchievementReward RewardArr = 3;
  for (int i = 0; i < this->rewardarr_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->rewardarr(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TInTitlePalaceGetAchievementInfoRsp)
  return target;
}

int TInTitlePalaceGetAchievementInfoRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 AchievementScore = 1;
    if (has_achievementscore()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->achievementscore());
    }

  }
  // repeated .pb.TInTitlePalaceHistoryTid HistoryTids = 2;
  total_size += 1 * this->historytids_size();
  for (int i = 0; i < this->historytids_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->historytids(i));
  }

  // repeated .pb.TInTitlePalaceAchievementReward RewardArr = 3;
  total_size += 1 * this->rewardarr_size();
  for (int i = 0; i < this->rewardarr_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->rewardarr(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TInTitlePalaceGetAchievementInfoRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TInTitlePalaceGetAchievementInfoRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TInTitlePalaceGetAchievementInfoRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TInTitlePalaceGetAchievementInfoRsp::MergeFrom(const TInTitlePalaceGetAchievementInfoRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  historytids_.MergeFrom(from.historytids_);
  rewardarr_.MergeFrom(from.rewardarr_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_achievementscore()) {
      set_achievementscore(from.achievementscore());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TInTitlePalaceGetAchievementInfoRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TInTitlePalaceGetAchievementInfoRsp::CopyFrom(const TInTitlePalaceGetAchievementInfoRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TInTitlePalaceGetAchievementInfoRsp::IsInitialized() const {

  return true;
}

void TInTitlePalaceGetAchievementInfoRsp::Swap(TInTitlePalaceGetAchievementInfoRsp* other) {
  if (other != this) {
    std::swap(achievementscore_, other->achievementscore_);
    historytids_.Swap(&other->historytids_);
    rewardarr_.Swap(&other->rewardarr_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TInTitlePalaceGetAchievementInfoRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TInTitlePalaceGetAchievementInfoRsp_descriptor_;
  metadata.reflection = TInTitlePalaceGetAchievementInfoRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TInTitlePalaceItemInfo::kPalaceIdFieldNumber;
const int TInTitlePalaceItemInfo::kTidFieldNumber;
const int TInTitlePalaceItemInfo::kEndTimeFieldNumber;
#endif  // !_MSC_VER

TInTitlePalaceItemInfo::TInTitlePalaceItemInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TInTitlePalaceItemInfo)
}

void TInTitlePalaceItemInfo::InitAsDefaultInstance() {
}

TInTitlePalaceItemInfo::TInTitlePalaceItemInfo(const TInTitlePalaceItemInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TInTitlePalaceItemInfo)
}

void TInTitlePalaceItemInfo::SharedCtor() {
  _cached_size_ = 0;
  palaceid_ = GOOGLE_ULONGLONG(0);
  tid_ = GOOGLE_ULONGLONG(0);
  endtime_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TInTitlePalaceItemInfo::~TInTitlePalaceItemInfo() {
  // @@protoc_insertion_point(destructor:pb.TInTitlePalaceItemInfo)
  SharedDtor();
}

void TInTitlePalaceItemInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TInTitlePalaceItemInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TInTitlePalaceItemInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TInTitlePalaceItemInfo_descriptor_;
}

const TInTitlePalaceItemInfo& TInTitlePalaceItemInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fTitlePalace_2eproto();
  return *default_instance_;
}

TInTitlePalaceItemInfo* TInTitlePalaceItemInfo::default_instance_ = NULL;

TInTitlePalaceItemInfo* TInTitlePalaceItemInfo::New() const {
  return new TInTitlePalaceItemInfo;
}

void TInTitlePalaceItemInfo::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<TInTitlePalaceItemInfo*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(palaceid_, endtime_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TInTitlePalaceItemInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TInTitlePalaceItemInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 PalaceId = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &palaceid_)));
          set_has_palaceid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_Tid;
        break;
      }

      // optional uint64 Tid = 2;
      case 2: {
        if (tag == 16) {
         parse_Tid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &tid_)));
          set_has_tid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_EndTime;
        break;
      }

      // optional uint64 EndTime = 3;
      case 3: {
        if (tag == 24) {
         parse_EndTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &endtime_)));
          set_has_endtime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TInTitlePalaceItemInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TInTitlePalaceItemInfo)
  return false;
#undef DO_
}

void TInTitlePalaceItemInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TInTitlePalaceItemInfo)
  // optional uint64 PalaceId = 1;
  if (has_palaceid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->palaceid(), output);
  }

  // optional uint64 Tid = 2;
  if (has_tid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->tid(), output);
  }

  // optional uint64 EndTime = 3;
  if (has_endtime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->endtime(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TInTitlePalaceItemInfo)
}

::google::protobuf::uint8* TInTitlePalaceItemInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TInTitlePalaceItemInfo)
  // optional uint64 PalaceId = 1;
  if (has_palaceid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->palaceid(), target);
  }

  // optional uint64 Tid = 2;
  if (has_tid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->tid(), target);
  }

  // optional uint64 EndTime = 3;
  if (has_endtime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->endtime(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TInTitlePalaceItemInfo)
  return target;
}

int TInTitlePalaceItemInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 PalaceId = 1;
    if (has_palaceid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->palaceid());
    }

    // optional uint64 Tid = 2;
    if (has_tid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->tid());
    }

    // optional uint64 EndTime = 3;
    if (has_endtime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->endtime());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TInTitlePalaceItemInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TInTitlePalaceItemInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TInTitlePalaceItemInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TInTitlePalaceItemInfo::MergeFrom(const TInTitlePalaceItemInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_palaceid()) {
      set_palaceid(from.palaceid());
    }
    if (from.has_tid()) {
      set_tid(from.tid());
    }
    if (from.has_endtime()) {
      set_endtime(from.endtime());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TInTitlePalaceItemInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TInTitlePalaceItemInfo::CopyFrom(const TInTitlePalaceItemInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TInTitlePalaceItemInfo::IsInitialized() const {

  return true;
}

void TInTitlePalaceItemInfo::Swap(TInTitlePalaceItemInfo* other) {
  if (other != this) {
    std::swap(palaceid_, other->palaceid_);
    std::swap(tid_, other->tid_);
    std::swap(endtime_, other->endtime_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TInTitlePalaceItemInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TInTitlePalaceItemInfo_descriptor_;
  metadata.reflection = TInTitlePalaceItemInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TInTitlePalaceGetItemInfoRsp::kItemArrFieldNumber;
#endif  // !_MSC_VER

TInTitlePalaceGetItemInfoRsp::TInTitlePalaceGetItemInfoRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TInTitlePalaceGetItemInfoRsp)
}

void TInTitlePalaceGetItemInfoRsp::InitAsDefaultInstance() {
}

TInTitlePalaceGetItemInfoRsp::TInTitlePalaceGetItemInfoRsp(const TInTitlePalaceGetItemInfoRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TInTitlePalaceGetItemInfoRsp)
}

void TInTitlePalaceGetItemInfoRsp::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TInTitlePalaceGetItemInfoRsp::~TInTitlePalaceGetItemInfoRsp() {
  // @@protoc_insertion_point(destructor:pb.TInTitlePalaceGetItemInfoRsp)
  SharedDtor();
}

void TInTitlePalaceGetItemInfoRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TInTitlePalaceGetItemInfoRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TInTitlePalaceGetItemInfoRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TInTitlePalaceGetItemInfoRsp_descriptor_;
}

const TInTitlePalaceGetItemInfoRsp& TInTitlePalaceGetItemInfoRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fTitlePalace_2eproto();
  return *default_instance_;
}

TInTitlePalaceGetItemInfoRsp* TInTitlePalaceGetItemInfoRsp::default_instance_ = NULL;

TInTitlePalaceGetItemInfoRsp* TInTitlePalaceGetItemInfoRsp::New() const {
  return new TInTitlePalaceGetItemInfoRsp;
}

void TInTitlePalaceGetItemInfoRsp::Clear() {
  itemarr_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TInTitlePalaceGetItemInfoRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TInTitlePalaceGetItemInfoRsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .pb.TInTitlePalaceItemInfo ItemArr = 1;
      case 1: {
        if (tag == 10) {
         parse_ItemArr:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_itemarr()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_ItemArr;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TInTitlePalaceGetItemInfoRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TInTitlePalaceGetItemInfoRsp)
  return false;
#undef DO_
}

void TInTitlePalaceGetItemInfoRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TInTitlePalaceGetItemInfoRsp)
  // repeated .pb.TInTitlePalaceItemInfo ItemArr = 1;
  for (int i = 0; i < this->itemarr_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->itemarr(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TInTitlePalaceGetItemInfoRsp)
}

::google::protobuf::uint8* TInTitlePalaceGetItemInfoRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TInTitlePalaceGetItemInfoRsp)
  // repeated .pb.TInTitlePalaceItemInfo ItemArr = 1;
  for (int i = 0; i < this->itemarr_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->itemarr(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TInTitlePalaceGetItemInfoRsp)
  return target;
}

int TInTitlePalaceGetItemInfoRsp::ByteSize() const {
  int total_size = 0;

  // repeated .pb.TInTitlePalaceItemInfo ItemArr = 1;
  total_size += 1 * this->itemarr_size();
  for (int i = 0; i < this->itemarr_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->itemarr(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TInTitlePalaceGetItemInfoRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TInTitlePalaceGetItemInfoRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TInTitlePalaceGetItemInfoRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TInTitlePalaceGetItemInfoRsp::MergeFrom(const TInTitlePalaceGetItemInfoRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  itemarr_.MergeFrom(from.itemarr_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TInTitlePalaceGetItemInfoRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TInTitlePalaceGetItemInfoRsp::CopyFrom(const TInTitlePalaceGetItemInfoRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TInTitlePalaceGetItemInfoRsp::IsInitialized() const {

  return true;
}

void TInTitlePalaceGetItemInfoRsp::Swap(TInTitlePalaceGetItemInfoRsp* other) {
  if (other != this) {
    itemarr_.Swap(&other->itemarr_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TInTitlePalaceGetItemInfoRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TInTitlePalaceGetItemInfoRsp_descriptor_;
  metadata.reflection = TInTitlePalaceGetItemInfoRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TTitlePalaceReceiveRewardReq::kAchievementIdFieldNumber;
#endif  // !_MSC_VER

TTitlePalaceReceiveRewardReq::TTitlePalaceReceiveRewardReq()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TTitlePalaceReceiveRewardReq)
}

void TTitlePalaceReceiveRewardReq::InitAsDefaultInstance() {
}

TTitlePalaceReceiveRewardReq::TTitlePalaceReceiveRewardReq(const TTitlePalaceReceiveRewardReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TTitlePalaceReceiveRewardReq)
}

void TTitlePalaceReceiveRewardReq::SharedCtor() {
  _cached_size_ = 0;
  achievementid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TTitlePalaceReceiveRewardReq::~TTitlePalaceReceiveRewardReq() {
  // @@protoc_insertion_point(destructor:pb.TTitlePalaceReceiveRewardReq)
  SharedDtor();
}

void TTitlePalaceReceiveRewardReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TTitlePalaceReceiveRewardReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TTitlePalaceReceiveRewardReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TTitlePalaceReceiveRewardReq_descriptor_;
}

const TTitlePalaceReceiveRewardReq& TTitlePalaceReceiveRewardReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fTitlePalace_2eproto();
  return *default_instance_;
}

TTitlePalaceReceiveRewardReq* TTitlePalaceReceiveRewardReq::default_instance_ = NULL;

TTitlePalaceReceiveRewardReq* TTitlePalaceReceiveRewardReq::New() const {
  return new TTitlePalaceReceiveRewardReq;
}

void TTitlePalaceReceiveRewardReq::Clear() {
  achievementid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TTitlePalaceReceiveRewardReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TTitlePalaceReceiveRewardReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 AchievementId = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &achievementid_)));
          set_has_achievementid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TTitlePalaceReceiveRewardReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TTitlePalaceReceiveRewardReq)
  return false;
#undef DO_
}

void TTitlePalaceReceiveRewardReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TTitlePalaceReceiveRewardReq)
  // optional uint32 AchievementId = 1;
  if (has_achievementid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->achievementid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TTitlePalaceReceiveRewardReq)
}

::google::protobuf::uint8* TTitlePalaceReceiveRewardReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TTitlePalaceReceiveRewardReq)
  // optional uint32 AchievementId = 1;
  if (has_achievementid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->achievementid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TTitlePalaceReceiveRewardReq)
  return target;
}

int TTitlePalaceReceiveRewardReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 AchievementId = 1;
    if (has_achievementid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->achievementid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TTitlePalaceReceiveRewardReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TTitlePalaceReceiveRewardReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TTitlePalaceReceiveRewardReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TTitlePalaceReceiveRewardReq::MergeFrom(const TTitlePalaceReceiveRewardReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_achievementid()) {
      set_achievementid(from.achievementid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TTitlePalaceReceiveRewardReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TTitlePalaceReceiveRewardReq::CopyFrom(const TTitlePalaceReceiveRewardReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TTitlePalaceReceiveRewardReq::IsInitialized() const {

  return true;
}

void TTitlePalaceReceiveRewardReq::Swap(TTitlePalaceReceiveRewardReq* other) {
  if (other != this) {
    std::swap(achievementid_, other->achievementid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TTitlePalaceReceiveRewardReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TTitlePalaceReceiveRewardReq_descriptor_;
  metadata.reflection = TTitlePalaceReceiveRewardReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TTitlePalaceAchievementNotify::kAchievementIdArrFieldNumber;
#endif  // !_MSC_VER

TTitlePalaceAchievementNotify::TTitlePalaceAchievementNotify()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TTitlePalaceAchievementNotify)
}

void TTitlePalaceAchievementNotify::InitAsDefaultInstance() {
}

TTitlePalaceAchievementNotify::TTitlePalaceAchievementNotify(const TTitlePalaceAchievementNotify& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TTitlePalaceAchievementNotify)
}

void TTitlePalaceAchievementNotify::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TTitlePalaceAchievementNotify::~TTitlePalaceAchievementNotify() {
  // @@protoc_insertion_point(destructor:pb.TTitlePalaceAchievementNotify)
  SharedDtor();
}

void TTitlePalaceAchievementNotify::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TTitlePalaceAchievementNotify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TTitlePalaceAchievementNotify::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TTitlePalaceAchievementNotify_descriptor_;
}

const TTitlePalaceAchievementNotify& TTitlePalaceAchievementNotify::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fTitlePalace_2eproto();
  return *default_instance_;
}

TTitlePalaceAchievementNotify* TTitlePalaceAchievementNotify::default_instance_ = NULL;

TTitlePalaceAchievementNotify* TTitlePalaceAchievementNotify::New() const {
  return new TTitlePalaceAchievementNotify;
}

void TTitlePalaceAchievementNotify::Clear() {
  achievementidarr_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TTitlePalaceAchievementNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TTitlePalaceAchievementNotify)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated uint32 AchievementIdArr = 1;
      case 1: {
        if (tag == 8) {
         parse_AchievementIdArr:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 8, input, this->mutable_achievementidarr())));
        } else if (tag == 10) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_achievementidarr())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(8)) goto parse_AchievementIdArr;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TTitlePalaceAchievementNotify)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TTitlePalaceAchievementNotify)
  return false;
#undef DO_
}

void TTitlePalaceAchievementNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TTitlePalaceAchievementNotify)
  // repeated uint32 AchievementIdArr = 1;
  for (int i = 0; i < this->achievementidarr_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      1, this->achievementidarr(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TTitlePalaceAchievementNotify)
}

::google::protobuf::uint8* TTitlePalaceAchievementNotify::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TTitlePalaceAchievementNotify)
  // repeated uint32 AchievementIdArr = 1;
  for (int i = 0; i < this->achievementidarr_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(1, this->achievementidarr(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TTitlePalaceAchievementNotify)
  return target;
}

int TTitlePalaceAchievementNotify::ByteSize() const {
  int total_size = 0;

  // repeated uint32 AchievementIdArr = 1;
  {
    int data_size = 0;
    for (int i = 0; i < this->achievementidarr_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->achievementidarr(i));
    }
    total_size += 1 * this->achievementidarr_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TTitlePalaceAchievementNotify::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TTitlePalaceAchievementNotify* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TTitlePalaceAchievementNotify*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TTitlePalaceAchievementNotify::MergeFrom(const TTitlePalaceAchievementNotify& from) {
  GOOGLE_CHECK_NE(&from, this);
  achievementidarr_.MergeFrom(from.achievementidarr_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TTitlePalaceAchievementNotify::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TTitlePalaceAchievementNotify::CopyFrom(const TTitlePalaceAchievementNotify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TTitlePalaceAchievementNotify::IsInitialized() const {

  return true;
}

void TTitlePalaceAchievementNotify::Swap(TTitlePalaceAchievementNotify* other) {
  if (other != this) {
    achievementidarr_.Swap(&other->achievementidarr_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TTitlePalaceAchievementNotify::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TTitlePalaceAchievementNotify_descriptor_;
  metadata.reflection = TTitlePalaceAchievementNotify_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TTitlePalaceChangePalaceNotify::kUidFieldNumber;
const int TTitlePalaceChangePalaceNotify::kTitleIdFieldNumber;
const int TTitlePalaceChangePalaceNotify::kPalaceIdFieldNumber;
const int TTitlePalaceChangePalaceNotify::kEntryTimeFieldNumber;
const int TTitlePalaceChangePalaceNotify::kEndTimeFieldNumber;
#endif  // !_MSC_VER

TTitlePalaceChangePalaceNotify::TTitlePalaceChangePalaceNotify()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TTitlePalaceChangePalaceNotify)
}

void TTitlePalaceChangePalaceNotify::InitAsDefaultInstance() {
}

TTitlePalaceChangePalaceNotify::TTitlePalaceChangePalaceNotify(const TTitlePalaceChangePalaceNotify& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TTitlePalaceChangePalaceNotify)
}

void TTitlePalaceChangePalaceNotify::SharedCtor() {
  _cached_size_ = 0;
  uid_ = GOOGLE_ULONGLONG(0);
  titleid_ = 0u;
  palaceid_ = GOOGLE_ULONGLONG(0);
  entrytime_ = GOOGLE_ULONGLONG(0);
  endtime_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TTitlePalaceChangePalaceNotify::~TTitlePalaceChangePalaceNotify() {
  // @@protoc_insertion_point(destructor:pb.TTitlePalaceChangePalaceNotify)
  SharedDtor();
}

void TTitlePalaceChangePalaceNotify::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TTitlePalaceChangePalaceNotify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TTitlePalaceChangePalaceNotify::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TTitlePalaceChangePalaceNotify_descriptor_;
}

const TTitlePalaceChangePalaceNotify& TTitlePalaceChangePalaceNotify::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fTitlePalace_2eproto();
  return *default_instance_;
}

TTitlePalaceChangePalaceNotify* TTitlePalaceChangePalaceNotify::default_instance_ = NULL;

TTitlePalaceChangePalaceNotify* TTitlePalaceChangePalaceNotify::New() const {
  return new TTitlePalaceChangePalaceNotify;
}

void TTitlePalaceChangePalaceNotify::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<TTitlePalaceChangePalaceNotify*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 31) {
    ZR_(uid_, titleid_);
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TTitlePalaceChangePalaceNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TTitlePalaceChangePalaceNotify)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 Uid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &uid_)));
          set_has_uid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_TitleId;
        break;
      }

      // optional uint32 TitleId = 2;
      case 2: {
        if (tag == 16) {
         parse_TitleId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &titleid_)));
          set_has_titleid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_PalaceId;
        break;
      }

      // optional uint64 PalaceId = 3;
      case 3: {
        if (tag == 24) {
         parse_PalaceId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &palaceid_)));
          set_has_palaceid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_EntryTime;
        break;
      }

      // optional uint64 EntryTime = 4;
      case 4: {
        if (tag == 32) {
         parse_EntryTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &entrytime_)));
          set_has_entrytime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_EndTime;
        break;
      }

      // optional uint64 EndTime = 5;
      case 5: {
        if (tag == 40) {
         parse_EndTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &endtime_)));
          set_has_endtime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TTitlePalaceChangePalaceNotify)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TTitlePalaceChangePalaceNotify)
  return false;
#undef DO_
}

void TTitlePalaceChangePalaceNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TTitlePalaceChangePalaceNotify)
  // optional uint64 Uid = 1;
  if (has_uid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->uid(), output);
  }

  // optional uint32 TitleId = 2;
  if (has_titleid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->titleid(), output);
  }

  // optional uint64 PalaceId = 3;
  if (has_palaceid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->palaceid(), output);
  }

  // optional uint64 EntryTime = 4;
  if (has_entrytime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->entrytime(), output);
  }

  // optional uint64 EndTime = 5;
  if (has_endtime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(5, this->endtime(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TTitlePalaceChangePalaceNotify)
}

::google::protobuf::uint8* TTitlePalaceChangePalaceNotify::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TTitlePalaceChangePalaceNotify)
  // optional uint64 Uid = 1;
  if (has_uid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->uid(), target);
  }

  // optional uint32 TitleId = 2;
  if (has_titleid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->titleid(), target);
  }

  // optional uint64 PalaceId = 3;
  if (has_palaceid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->palaceid(), target);
  }

  // optional uint64 EntryTime = 4;
  if (has_entrytime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->entrytime(), target);
  }

  // optional uint64 EndTime = 5;
  if (has_endtime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(5, this->endtime(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TTitlePalaceChangePalaceNotify)
  return target;
}

int TTitlePalaceChangePalaceNotify::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 Uid = 1;
    if (has_uid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->uid());
    }

    // optional uint32 TitleId = 2;
    if (has_titleid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->titleid());
    }

    // optional uint64 PalaceId = 3;
    if (has_palaceid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->palaceid());
    }

    // optional uint64 EntryTime = 4;
    if (has_entrytime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->entrytime());
    }

    // optional uint64 EndTime = 5;
    if (has_endtime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->endtime());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TTitlePalaceChangePalaceNotify::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TTitlePalaceChangePalaceNotify* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TTitlePalaceChangePalaceNotify*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TTitlePalaceChangePalaceNotify::MergeFrom(const TTitlePalaceChangePalaceNotify& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_uid()) {
      set_uid(from.uid());
    }
    if (from.has_titleid()) {
      set_titleid(from.titleid());
    }
    if (from.has_palaceid()) {
      set_palaceid(from.palaceid());
    }
    if (from.has_entrytime()) {
      set_entrytime(from.entrytime());
    }
    if (from.has_endtime()) {
      set_endtime(from.endtime());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TTitlePalaceChangePalaceNotify::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TTitlePalaceChangePalaceNotify::CopyFrom(const TTitlePalaceChangePalaceNotify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TTitlePalaceChangePalaceNotify::IsInitialized() const {

  return true;
}

void TTitlePalaceChangePalaceNotify::Swap(TTitlePalaceChangePalaceNotify* other) {
  if (other != this) {
    std::swap(uid_, other->uid_);
    std::swap(titleid_, other->titleid_);
    std::swap(palaceid_, other->palaceid_);
    std::swap(entrytime_, other->entrytime_);
    std::swap(endtime_, other->endtime_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TTitlePalaceChangePalaceNotify::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TTitlePalaceChangePalaceNotify_descriptor_;
  metadata.reflection = TTitlePalaceChangePalaceNotify_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TTitlePalaceNotify::kPalaceIdFieldNumber;
const int TTitlePalaceNotify::kUidFieldNumber;
const int TTitlePalaceNotify::kPopularityFieldNumber;
const int TTitlePalaceNotify::kProstrateNumFieldNumber;
#endif  // !_MSC_VER

TTitlePalaceNotify::TTitlePalaceNotify()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TTitlePalaceNotify)
}

void TTitlePalaceNotify::InitAsDefaultInstance() {
}

TTitlePalaceNotify::TTitlePalaceNotify(const TTitlePalaceNotify& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TTitlePalaceNotify)
}

void TTitlePalaceNotify::SharedCtor() {
  _cached_size_ = 0;
  palaceid_ = GOOGLE_ULONGLONG(0);
  uid_ = GOOGLE_ULONGLONG(0);
  popularity_ = 0u;
  prostratenum_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TTitlePalaceNotify::~TTitlePalaceNotify() {
  // @@protoc_insertion_point(destructor:pb.TTitlePalaceNotify)
  SharedDtor();
}

void TTitlePalaceNotify::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TTitlePalaceNotify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TTitlePalaceNotify::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TTitlePalaceNotify_descriptor_;
}

const TTitlePalaceNotify& TTitlePalaceNotify::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fTitlePalace_2eproto();
  return *default_instance_;
}

TTitlePalaceNotify* TTitlePalaceNotify::default_instance_ = NULL;

TTitlePalaceNotify* TTitlePalaceNotify::New() const {
  return new TTitlePalaceNotify;
}

void TTitlePalaceNotify::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<TTitlePalaceNotify*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(palaceid_, prostratenum_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TTitlePalaceNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TTitlePalaceNotify)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 PalaceId = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &palaceid_)));
          set_has_palaceid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_Uid;
        break;
      }

      // optional uint64 Uid = 2;
      case 2: {
        if (tag == 16) {
         parse_Uid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &uid_)));
          set_has_uid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_Popularity;
        break;
      }

      // optional uint32 Popularity = 3;
      case 3: {
        if (tag == 24) {
         parse_Popularity:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &popularity_)));
          set_has_popularity();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_ProstrateNum;
        break;
      }

      // optional uint32 ProstrateNum = 4;
      case 4: {
        if (tag == 32) {
         parse_ProstrateNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &prostratenum_)));
          set_has_prostratenum();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TTitlePalaceNotify)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TTitlePalaceNotify)
  return false;
#undef DO_
}

void TTitlePalaceNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TTitlePalaceNotify)
  // optional uint64 PalaceId = 1;
  if (has_palaceid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->palaceid(), output);
  }

  // optional uint64 Uid = 2;
  if (has_uid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->uid(), output);
  }

  // optional uint32 Popularity = 3;
  if (has_popularity()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->popularity(), output);
  }

  // optional uint32 ProstrateNum = 4;
  if (has_prostratenum()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->prostratenum(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TTitlePalaceNotify)
}

::google::protobuf::uint8* TTitlePalaceNotify::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TTitlePalaceNotify)
  // optional uint64 PalaceId = 1;
  if (has_palaceid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->palaceid(), target);
  }

  // optional uint64 Uid = 2;
  if (has_uid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->uid(), target);
  }

  // optional uint32 Popularity = 3;
  if (has_popularity()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->popularity(), target);
  }

  // optional uint32 ProstrateNum = 4;
  if (has_prostratenum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->prostratenum(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TTitlePalaceNotify)
  return target;
}

int TTitlePalaceNotify::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 PalaceId = 1;
    if (has_palaceid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->palaceid());
    }

    // optional uint64 Uid = 2;
    if (has_uid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->uid());
    }

    // optional uint32 Popularity = 3;
    if (has_popularity()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->popularity());
    }

    // optional uint32 ProstrateNum = 4;
    if (has_prostratenum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->prostratenum());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TTitlePalaceNotify::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TTitlePalaceNotify* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TTitlePalaceNotify*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TTitlePalaceNotify::MergeFrom(const TTitlePalaceNotify& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_palaceid()) {
      set_palaceid(from.palaceid());
    }
    if (from.has_uid()) {
      set_uid(from.uid());
    }
    if (from.has_popularity()) {
      set_popularity(from.popularity());
    }
    if (from.has_prostratenum()) {
      set_prostratenum(from.prostratenum());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TTitlePalaceNotify::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TTitlePalaceNotify::CopyFrom(const TTitlePalaceNotify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TTitlePalaceNotify::IsInitialized() const {

  return true;
}

void TTitlePalaceNotify::Swap(TTitlePalaceNotify* other) {
  if (other != this) {
    std::swap(palaceid_, other->palaceid_);
    std::swap(uid_, other->uid_);
    std::swap(popularity_, other->popularity_);
    std::swap(prostratenum_, other->prostratenum_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TTitlePalaceNotify::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TTitlePalaceNotify_descriptor_;
  metadata.reflection = TTitlePalaceNotify_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TTitlePalaceGetUserInfoRsp::kProstrateNumFieldNumber;
const int TTitlePalaceGetUserInfoRsp::kPopularityFieldNumber;
const int TTitlePalaceGetUserInfoRsp::kPalaceIdFieldNumber;
const int TTitlePalaceGetUserInfoRsp::kEntryTimeFieldNumber;
const int TTitlePalaceGetUserInfoRsp::kEndEntryTimeFieldNumber;
const int TTitlePalaceGetUserInfoRsp::kChangeNumFieldNumber;
#endif  // !_MSC_VER

TTitlePalaceGetUserInfoRsp::TTitlePalaceGetUserInfoRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TTitlePalaceGetUserInfoRsp)
}

void TTitlePalaceGetUserInfoRsp::InitAsDefaultInstance() {
}

TTitlePalaceGetUserInfoRsp::TTitlePalaceGetUserInfoRsp(const TTitlePalaceGetUserInfoRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TTitlePalaceGetUserInfoRsp)
}

void TTitlePalaceGetUserInfoRsp::SharedCtor() {
  _cached_size_ = 0;
  prostratenum_ = 0u;
  popularity_ = GOOGLE_ULONGLONG(0);
  palaceid_ = GOOGLE_ULONGLONG(0);
  entrytime_ = GOOGLE_ULONGLONG(0);
  endentrytime_ = GOOGLE_ULONGLONG(0);
  changenum_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TTitlePalaceGetUserInfoRsp::~TTitlePalaceGetUserInfoRsp() {
  // @@protoc_insertion_point(destructor:pb.TTitlePalaceGetUserInfoRsp)
  SharedDtor();
}

void TTitlePalaceGetUserInfoRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TTitlePalaceGetUserInfoRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TTitlePalaceGetUserInfoRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TTitlePalaceGetUserInfoRsp_descriptor_;
}

const TTitlePalaceGetUserInfoRsp& TTitlePalaceGetUserInfoRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fTitlePalace_2eproto();
  return *default_instance_;
}

TTitlePalaceGetUserInfoRsp* TTitlePalaceGetUserInfoRsp::default_instance_ = NULL;

TTitlePalaceGetUserInfoRsp* TTitlePalaceGetUserInfoRsp::New() const {
  return new TTitlePalaceGetUserInfoRsp;
}

void TTitlePalaceGetUserInfoRsp::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<TTitlePalaceGetUserInfoRsp*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 63) {
    ZR_(popularity_, endentrytime_);
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TTitlePalaceGetUserInfoRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TTitlePalaceGetUserInfoRsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 ProstrateNum = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &prostratenum_)));
          set_has_prostratenum();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_Popularity;
        break;
      }

      // optional uint64 Popularity = 2;
      case 2: {
        if (tag == 16) {
         parse_Popularity:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &popularity_)));
          set_has_popularity();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_PalaceId;
        break;
      }

      // optional uint64 PalaceId = 3;
      case 3: {
        if (tag == 24) {
         parse_PalaceId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &palaceid_)));
          set_has_palaceid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_EntryTime;
        break;
      }

      // optional uint64 EntryTime = 4;
      case 4: {
        if (tag == 32) {
         parse_EntryTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &entrytime_)));
          set_has_entrytime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_EndEntryTime;
        break;
      }

      // optional uint64 EndEntryTime = 5;
      case 5: {
        if (tag == 40) {
         parse_EndEntryTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &endentrytime_)));
          set_has_endentrytime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_ChangeNum;
        break;
      }

      // optional uint32 ChangeNum = 6;
      case 6: {
        if (tag == 48) {
         parse_ChangeNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &changenum_)));
          set_has_changenum();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TTitlePalaceGetUserInfoRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TTitlePalaceGetUserInfoRsp)
  return false;
#undef DO_
}

void TTitlePalaceGetUserInfoRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TTitlePalaceGetUserInfoRsp)
  // optional uint32 ProstrateNum = 1;
  if (has_prostratenum()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->prostratenum(), output);
  }

  // optional uint64 Popularity = 2;
  if (has_popularity()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->popularity(), output);
  }

  // optional uint64 PalaceId = 3;
  if (has_palaceid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->palaceid(), output);
  }

  // optional uint64 EntryTime = 4;
  if (has_entrytime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->entrytime(), output);
  }

  // optional uint64 EndEntryTime = 5;
  if (has_endentrytime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(5, this->endentrytime(), output);
  }

  // optional uint32 ChangeNum = 6;
  if (has_changenum()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->changenum(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TTitlePalaceGetUserInfoRsp)
}

::google::protobuf::uint8* TTitlePalaceGetUserInfoRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TTitlePalaceGetUserInfoRsp)
  // optional uint32 ProstrateNum = 1;
  if (has_prostratenum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->prostratenum(), target);
  }

  // optional uint64 Popularity = 2;
  if (has_popularity()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->popularity(), target);
  }

  // optional uint64 PalaceId = 3;
  if (has_palaceid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->palaceid(), target);
  }

  // optional uint64 EntryTime = 4;
  if (has_entrytime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->entrytime(), target);
  }

  // optional uint64 EndEntryTime = 5;
  if (has_endentrytime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(5, this->endentrytime(), target);
  }

  // optional uint32 ChangeNum = 6;
  if (has_changenum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->changenum(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TTitlePalaceGetUserInfoRsp)
  return target;
}

int TTitlePalaceGetUserInfoRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 ProstrateNum = 1;
    if (has_prostratenum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->prostratenum());
    }

    // optional uint64 Popularity = 2;
    if (has_popularity()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->popularity());
    }

    // optional uint64 PalaceId = 3;
    if (has_palaceid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->palaceid());
    }

    // optional uint64 EntryTime = 4;
    if (has_entrytime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->entrytime());
    }

    // optional uint64 EndEntryTime = 5;
    if (has_endentrytime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->endentrytime());
    }

    // optional uint32 ChangeNum = 6;
    if (has_changenum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->changenum());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TTitlePalaceGetUserInfoRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TTitlePalaceGetUserInfoRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TTitlePalaceGetUserInfoRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TTitlePalaceGetUserInfoRsp::MergeFrom(const TTitlePalaceGetUserInfoRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_prostratenum()) {
      set_prostratenum(from.prostratenum());
    }
    if (from.has_popularity()) {
      set_popularity(from.popularity());
    }
    if (from.has_palaceid()) {
      set_palaceid(from.palaceid());
    }
    if (from.has_entrytime()) {
      set_entrytime(from.entrytime());
    }
    if (from.has_endentrytime()) {
      set_endentrytime(from.endentrytime());
    }
    if (from.has_changenum()) {
      set_changenum(from.changenum());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TTitlePalaceGetUserInfoRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TTitlePalaceGetUserInfoRsp::CopyFrom(const TTitlePalaceGetUserInfoRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TTitlePalaceGetUserInfoRsp::IsInitialized() const {

  return true;
}

void TTitlePalaceGetUserInfoRsp::Swap(TTitlePalaceGetUserInfoRsp* other) {
  if (other != this) {
    std::swap(prostratenum_, other->prostratenum_);
    std::swap(popularity_, other->popularity_);
    std::swap(palaceid_, other->palaceid_);
    std::swap(entrytime_, other->entrytime_);
    std::swap(endentrytime_, other->endentrytime_);
    std::swap(changenum_, other->changenum_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TTitlePalaceGetUserInfoRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TTitlePalaceGetUserInfoRsp_descriptor_;
  metadata.reflection = TTitlePalaceGetUserInfoRsp_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace pb

// @@protoc_insertion_point(global_scope)
