// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: net/BeastIllustration.proto

#ifndef PROTOBUF_net_2fBeastIllustration_2eproto__INCLUDED
#define PROTOBUF_net_2fBeastIllustration_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace pb {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_net_2fBeastIllustration_2eproto();
void protobuf_AssignDesc_net_2fBeastIllustration_2eproto();
void protobuf_ShutdownFile_net_2fBeastIllustration_2eproto();

class TBeastIllustrationInfo;
class TBeastIllustrationGetInfoRsp;
class TBeastIllustrationActiveReq;
class TBeastIllustrationActiveRsp;
class TBeastIllustrationBreakThroughReq;

// ===================================================================

/*FOR2LUA
<Record>
	<name>TBeastIllustrationInfo</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/BeastIllustration.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TBeastIllustrationInfo : public ::google::protobuf::Message {
 public:
  TBeastIllustrationInfo();
  virtual ~TBeastIllustrationInfo();

  TBeastIllustrationInfo(const TBeastIllustrationInfo& from);

  inline TBeastIllustrationInfo& operator=(const TBeastIllustrationInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TBeastIllustrationInfo& default_instance();

  void Swap(TBeastIllustrationInfo* other);

  // implements Message ----------------------------------------------

  TBeastIllustrationInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TBeastIllustrationInfo& from);
  void MergeFrom(const TBeastIllustrationInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 IllustrationId = 1;
  inline bool has_illustrationid() const;
  inline void clear_illustrationid();
  static const int kIllustrationIdFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TBeastIllustrationInfo</name>
  	<Function>
  		<name>illustrationid</name>
  		<replaceName>IllustrationId</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_illustrationid</name>
  		<replaceName>IllustrationId</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_illustrationid</name>
  		<replaceName>IllustrationId</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 illustrationid() const;
  inline void set_illustrationid(::google::protobuf::uint32 value);

  // optional bool IsPurpleGoldBreak = 2;
  inline bool has_ispurplegoldbreak() const;
  inline void clear_ispurplegoldbreak();
  static const int kIsPurpleGoldBreakFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TBeastIllustrationInfo</name>
  	<Function>
  		<name>ispurplegoldbreak</name>
  		<replaceName>IsPurpleGoldBreak</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_ispurplegoldbreak</name>
  		<replaceName>IsPurpleGoldBreak</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_ispurplegoldbreak</name>
  		<replaceName>IsPurpleGoldBreak</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline bool ispurplegoldbreak() const;
  inline void set_ispurplegoldbreak(bool value);

  // @@protoc_insertion_point(class_scope:pb.TBeastIllustrationInfo)
 private:
  inline void set_has_illustrationid();
  inline void clear_has_illustrationid();
  inline void set_has_ispurplegoldbreak();
  inline void clear_has_ispurplegoldbreak();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 illustrationid_;
  bool ispurplegoldbreak_;
  friend void  protobuf_AddDesc_net_2fBeastIllustration_2eproto();
  friend void protobuf_AssignDesc_net_2fBeastIllustration_2eproto();
  friend void protobuf_ShutdownFile_net_2fBeastIllustration_2eproto();

  void InitAsDefaultInstance();
  static TBeastIllustrationInfo* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TBeastIllustrationGetInfoRsp</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/BeastIllustration.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TBeastIllustrationGetInfoRsp : public ::google::protobuf::Message {
 public:
  TBeastIllustrationGetInfoRsp();
  virtual ~TBeastIllustrationGetInfoRsp();

  TBeastIllustrationGetInfoRsp(const TBeastIllustrationGetInfoRsp& from);

  inline TBeastIllustrationGetInfoRsp& operator=(const TBeastIllustrationGetInfoRsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TBeastIllustrationGetInfoRsp& default_instance();

  void Swap(TBeastIllustrationGetInfoRsp* other);

  // implements Message ----------------------------------------------

  TBeastIllustrationGetInfoRsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TBeastIllustrationGetInfoRsp& from);
  void MergeFrom(const TBeastIllustrationGetInfoRsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .pb.TBeastIllustrationInfo IllustrationArr = 1;
  inline int illustrationarr_size() const;
  inline void clear_illustrationarr();
  static const int kIllustrationArrFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TBeastIllustrationGetInfoRsp</name>
  	<Function>
  		<name>illustrationarr</name>
  		<replaceName>IllustrationArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_illustrationarr</name>
  		<replaceName>IllustrationArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_illustrationarr</name>
  		<replaceName>IllustrationArr</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_illustrationarr</name>
  		<replaceName>IllustrationArr</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>illustrationarr_size</name>
  		<replaceName>IllustrationArr</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TBeastIllustrationInfo& illustrationarr(int index) const;
  inline ::pb::TBeastIllustrationInfo* mutable_illustrationarr(int index);
  inline ::pb::TBeastIllustrationInfo* add_illustrationarr();
  inline const ::google::protobuf::RepeatedPtrField< ::pb::TBeastIllustrationInfo >&
      illustrationarr() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb::TBeastIllustrationInfo >*
      mutable_illustrationarr();

  // @@protoc_insertion_point(class_scope:pb.TBeastIllustrationGetInfoRsp)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::pb::TBeastIllustrationInfo > illustrationarr_;
  friend void  protobuf_AddDesc_net_2fBeastIllustration_2eproto();
  friend void protobuf_AssignDesc_net_2fBeastIllustration_2eproto();
  friend void protobuf_ShutdownFile_net_2fBeastIllustration_2eproto();

  void InitAsDefaultInstance();
  static TBeastIllustrationGetInfoRsp* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TBeastIllustrationActiveReq</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/BeastIllustration.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TBeastIllustrationActiveReq : public ::google::protobuf::Message {
 public:
  TBeastIllustrationActiveReq();
  virtual ~TBeastIllustrationActiveReq();

  TBeastIllustrationActiveReq(const TBeastIllustrationActiveReq& from);

  inline TBeastIllustrationActiveReq& operator=(const TBeastIllustrationActiveReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TBeastIllustrationActiveReq& default_instance();

  void Swap(TBeastIllustrationActiveReq* other);

  // implements Message ----------------------------------------------

  TBeastIllustrationActiveReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TBeastIllustrationActiveReq& from);
  void MergeFrom(const TBeastIllustrationActiveReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 IllustrationId = 1;
  inline bool has_illustrationid() const;
  inline void clear_illustrationid();
  static const int kIllustrationIdFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TBeastIllustrationActiveReq</name>
  	<Function>
  		<name>illustrationid</name>
  		<replaceName>IllustrationId</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_illustrationid</name>
  		<replaceName>IllustrationId</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_illustrationid</name>
  		<replaceName>IllustrationId</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 illustrationid() const;
  inline void set_illustrationid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:pb.TBeastIllustrationActiveReq)
 private:
  inline void set_has_illustrationid();
  inline void clear_has_illustrationid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 illustrationid_;
  friend void  protobuf_AddDesc_net_2fBeastIllustration_2eproto();
  friend void protobuf_AssignDesc_net_2fBeastIllustration_2eproto();
  friend void protobuf_ShutdownFile_net_2fBeastIllustration_2eproto();

  void InitAsDefaultInstance();
  static TBeastIllustrationActiveReq* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TBeastIllustrationActiveRsp</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/BeastIllustration.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TBeastIllustrationActiveRsp : public ::google::protobuf::Message {
 public:
  TBeastIllustrationActiveRsp();
  virtual ~TBeastIllustrationActiveRsp();

  TBeastIllustrationActiveRsp(const TBeastIllustrationActiveRsp& from);

  inline TBeastIllustrationActiveRsp& operator=(const TBeastIllustrationActiveRsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TBeastIllustrationActiveRsp& default_instance();

  void Swap(TBeastIllustrationActiveRsp* other);

  // implements Message ----------------------------------------------

  TBeastIllustrationActiveRsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TBeastIllustrationActiveRsp& from);
  void MergeFrom(const TBeastIllustrationActiveRsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .pb.TBeastIllustrationInfo IllustrationInfo = 1;
  inline bool has_illustrationinfo() const;
  inline void clear_illustrationinfo();
  static const int kIllustrationInfoFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TBeastIllustrationActiveRsp</name>
  	<Function>
  		<name>illustrationinfo</name>
  		<replaceName>IllustrationInfo</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_illustrationinfo</name>
  		<replaceName>IllustrationInfo</replaceName>
  		<handler>descripter = pb_set_message_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_allocated_illustrationinfo</name>
  		<replaceName>IllustrationInfo</replaceName>
  		<handler>descripter = pb_set_message_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_illustrationinfo</name>
  		<replaceName>IllustrationInfo</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TBeastIllustrationInfo& illustrationinfo() const;
  inline ::pb::TBeastIllustrationInfo* mutable_illustrationinfo();
  inline ::pb::TBeastIllustrationInfo* release_illustrationinfo();
  inline void set_allocated_illustrationinfo(::pb::TBeastIllustrationInfo* illustrationinfo);

  // @@protoc_insertion_point(class_scope:pb.TBeastIllustrationActiveRsp)
 private:
  inline void set_has_illustrationinfo();
  inline void clear_has_illustrationinfo();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::pb::TBeastIllustrationInfo* illustrationinfo_;
  friend void  protobuf_AddDesc_net_2fBeastIllustration_2eproto();
  friend void protobuf_AssignDesc_net_2fBeastIllustration_2eproto();
  friend void protobuf_ShutdownFile_net_2fBeastIllustration_2eproto();

  void InitAsDefaultInstance();
  static TBeastIllustrationActiveRsp* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TBeastIllustrationBreakThroughReq</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/BeastIllustration.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TBeastIllustrationBreakThroughReq : public ::google::protobuf::Message {
 public:
  TBeastIllustrationBreakThroughReq();
  virtual ~TBeastIllustrationBreakThroughReq();

  TBeastIllustrationBreakThroughReq(const TBeastIllustrationBreakThroughReq& from);

  inline TBeastIllustrationBreakThroughReq& operator=(const TBeastIllustrationBreakThroughReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TBeastIllustrationBreakThroughReq& default_instance();

  void Swap(TBeastIllustrationBreakThroughReq* other);

  // implements Message ----------------------------------------------

  TBeastIllustrationBreakThroughReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TBeastIllustrationBreakThroughReq& from);
  void MergeFrom(const TBeastIllustrationBreakThroughReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 IllustrationId = 1;
  inline bool has_illustrationid() const;
  inline void clear_illustrationid();
  static const int kIllustrationIdFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TBeastIllustrationBreakThroughReq</name>
  	<Function>
  		<name>illustrationid</name>
  		<replaceName>IllustrationId</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_illustrationid</name>
  		<replaceName>IllustrationId</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_illustrationid</name>
  		<replaceName>IllustrationId</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 illustrationid() const;
  inline void set_illustrationid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:pb.TBeastIllustrationBreakThroughReq)
 private:
  inline void set_has_illustrationid();
  inline void clear_has_illustrationid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 illustrationid_;
  friend void  protobuf_AddDesc_net_2fBeastIllustration_2eproto();
  friend void protobuf_AssignDesc_net_2fBeastIllustration_2eproto();
  friend void protobuf_ShutdownFile_net_2fBeastIllustration_2eproto();

  void InitAsDefaultInstance();
  static TBeastIllustrationBreakThroughReq* default_instance_;
};
// ===================================================================


// ===================================================================

// TBeastIllustrationInfo

// optional uint32 IllustrationId = 1;
inline bool TBeastIllustrationInfo::has_illustrationid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TBeastIllustrationInfo::set_has_illustrationid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TBeastIllustrationInfo::clear_has_illustrationid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TBeastIllustrationInfo::clear_illustrationid() {
  illustrationid_ = 0u;
  clear_has_illustrationid();
}
inline ::google::protobuf::uint32 TBeastIllustrationInfo::illustrationid() const {
  // @@protoc_insertion_point(field_get:pb.TBeastIllustrationInfo.IllustrationId)
  return illustrationid_;
}
inline void TBeastIllustrationInfo::set_illustrationid(::google::protobuf::uint32 value) {
  set_has_illustrationid();
  illustrationid_ = value;
  // @@protoc_insertion_point(field_set:pb.TBeastIllustrationInfo.IllustrationId)
}

// optional bool IsPurpleGoldBreak = 2;
inline bool TBeastIllustrationInfo::has_ispurplegoldbreak() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TBeastIllustrationInfo::set_has_ispurplegoldbreak() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TBeastIllustrationInfo::clear_has_ispurplegoldbreak() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TBeastIllustrationInfo::clear_ispurplegoldbreak() {
  ispurplegoldbreak_ = false;
  clear_has_ispurplegoldbreak();
}
inline bool TBeastIllustrationInfo::ispurplegoldbreak() const {
  // @@protoc_insertion_point(field_get:pb.TBeastIllustrationInfo.IsPurpleGoldBreak)
  return ispurplegoldbreak_;
}
inline void TBeastIllustrationInfo::set_ispurplegoldbreak(bool value) {
  set_has_ispurplegoldbreak();
  ispurplegoldbreak_ = value;
  // @@protoc_insertion_point(field_set:pb.TBeastIllustrationInfo.IsPurpleGoldBreak)
}

// -------------------------------------------------------------------

// TBeastIllustrationGetInfoRsp

// repeated .pb.TBeastIllustrationInfo IllustrationArr = 1;
inline int TBeastIllustrationGetInfoRsp::illustrationarr_size() const {
  return illustrationarr_.size();
}
inline void TBeastIllustrationGetInfoRsp::clear_illustrationarr() {
  illustrationarr_.Clear();
}
inline const ::pb::TBeastIllustrationInfo& TBeastIllustrationGetInfoRsp::illustrationarr(int index) const {
  // @@protoc_insertion_point(field_get:pb.TBeastIllustrationGetInfoRsp.IllustrationArr)
  return illustrationarr_.Get(index);
}
inline ::pb::TBeastIllustrationInfo* TBeastIllustrationGetInfoRsp::mutable_illustrationarr(int index) {
  // @@protoc_insertion_point(field_mutable:pb.TBeastIllustrationGetInfoRsp.IllustrationArr)
  return illustrationarr_.Mutable(index);
}
inline ::pb::TBeastIllustrationInfo* TBeastIllustrationGetInfoRsp::add_illustrationarr() {
  // @@protoc_insertion_point(field_add:pb.TBeastIllustrationGetInfoRsp.IllustrationArr)
  return illustrationarr_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::TBeastIllustrationInfo >&
TBeastIllustrationGetInfoRsp::illustrationarr() const {
  // @@protoc_insertion_point(field_list:pb.TBeastIllustrationGetInfoRsp.IllustrationArr)
  return illustrationarr_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb::TBeastIllustrationInfo >*
TBeastIllustrationGetInfoRsp::mutable_illustrationarr() {
  // @@protoc_insertion_point(field_mutable_list:pb.TBeastIllustrationGetInfoRsp.IllustrationArr)
  return &illustrationarr_;
}

// -------------------------------------------------------------------

// TBeastIllustrationActiveReq

// optional uint32 IllustrationId = 1;
inline bool TBeastIllustrationActiveReq::has_illustrationid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TBeastIllustrationActiveReq::set_has_illustrationid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TBeastIllustrationActiveReq::clear_has_illustrationid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TBeastIllustrationActiveReq::clear_illustrationid() {
  illustrationid_ = 0u;
  clear_has_illustrationid();
}
inline ::google::protobuf::uint32 TBeastIllustrationActiveReq::illustrationid() const {
  // @@protoc_insertion_point(field_get:pb.TBeastIllustrationActiveReq.IllustrationId)
  return illustrationid_;
}
inline void TBeastIllustrationActiveReq::set_illustrationid(::google::protobuf::uint32 value) {
  set_has_illustrationid();
  illustrationid_ = value;
  // @@protoc_insertion_point(field_set:pb.TBeastIllustrationActiveReq.IllustrationId)
}

// -------------------------------------------------------------------

// TBeastIllustrationActiveRsp

// optional .pb.TBeastIllustrationInfo IllustrationInfo = 1;
inline bool TBeastIllustrationActiveRsp::has_illustrationinfo() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TBeastIllustrationActiveRsp::set_has_illustrationinfo() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TBeastIllustrationActiveRsp::clear_has_illustrationinfo() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TBeastIllustrationActiveRsp::clear_illustrationinfo() {
  if (illustrationinfo_ != NULL) illustrationinfo_->::pb::TBeastIllustrationInfo::Clear();
  clear_has_illustrationinfo();
}
inline const ::pb::TBeastIllustrationInfo& TBeastIllustrationActiveRsp::illustrationinfo() const {
  // @@protoc_insertion_point(field_get:pb.TBeastIllustrationActiveRsp.IllustrationInfo)
  return illustrationinfo_ != NULL ? *illustrationinfo_ : *default_instance_->illustrationinfo_;
}
inline ::pb::TBeastIllustrationInfo* TBeastIllustrationActiveRsp::mutable_illustrationinfo() {
  set_has_illustrationinfo();
  if (illustrationinfo_ == NULL) illustrationinfo_ = new ::pb::TBeastIllustrationInfo;
  // @@protoc_insertion_point(field_mutable:pb.TBeastIllustrationActiveRsp.IllustrationInfo)
  return illustrationinfo_;
}
inline ::pb::TBeastIllustrationInfo* TBeastIllustrationActiveRsp::release_illustrationinfo() {
  clear_has_illustrationinfo();
  ::pb::TBeastIllustrationInfo* temp = illustrationinfo_;
  illustrationinfo_ = NULL;
  return temp;
}
inline void TBeastIllustrationActiveRsp::set_allocated_illustrationinfo(::pb::TBeastIllustrationInfo* illustrationinfo) {
  delete illustrationinfo_;
  illustrationinfo_ = illustrationinfo;
  if (illustrationinfo) {
    set_has_illustrationinfo();
  } else {
    clear_has_illustrationinfo();
  }
  // @@protoc_insertion_point(field_set_allocated:pb.TBeastIllustrationActiveRsp.IllustrationInfo)
}

// -------------------------------------------------------------------

// TBeastIllustrationBreakThroughReq

// optional uint32 IllustrationId = 1;
inline bool TBeastIllustrationBreakThroughReq::has_illustrationid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TBeastIllustrationBreakThroughReq::set_has_illustrationid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TBeastIllustrationBreakThroughReq::clear_has_illustrationid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TBeastIllustrationBreakThroughReq::clear_illustrationid() {
  illustrationid_ = 0u;
  clear_has_illustrationid();
}
inline ::google::protobuf::uint32 TBeastIllustrationBreakThroughReq::illustrationid() const {
  // @@protoc_insertion_point(field_get:pb.TBeastIllustrationBreakThroughReq.IllustrationId)
  return illustrationid_;
}
inline void TBeastIllustrationBreakThroughReq::set_illustrationid(::google::protobuf::uint32 value) {
  set_has_illustrationid();
  illustrationid_ = value;
  // @@protoc_insertion_point(field_set:pb.TBeastIllustrationBreakThroughReq.IllustrationId)
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace pb

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_net_2fBeastIllustration_2eproto__INCLUDED
