// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: net/SlgCity.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "net/SlgCity.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace pb {

namespace {

const ::google::protobuf::Descriptor* TSlgCityBuildingData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TSlgCityBuildingData_reflection_ = NULL;
const ::google::protobuf::Descriptor* TSlgCityBuildingAppointData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TSlgCityBuildingAppointData_reflection_ = NULL;
const ::google::protobuf::Descriptor* TSlgCityBuildingQueueData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TSlgCityBuildingQueueData_reflection_ = NULL;
const ::google::protobuf::Descriptor* TSlgCityTimeLimitedPropData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TSlgCityTimeLimitedPropData_reflection_ = NULL;
const ::google::protobuf::Descriptor* TSlgCityFreeWarData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TSlgCityFreeWarData_reflection_ = NULL;
const ::google::protobuf::Descriptor* TSlgCityWallDurableData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TSlgCityWallDurableData_reflection_ = NULL;
const ::google::protobuf::Descriptor* TSlgCityGetCityInfoRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TSlgCityGetCityInfoRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* TSlgCityCityInfoNotify_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TSlgCityCityInfoNotify_reflection_ = NULL;
const ::google::protobuf::Descriptor* TSlgCityLevelUpReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TSlgCityLevelUpReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* TSlgCityReduceBuildQueueCDByItemReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TSlgCityReduceBuildQueueCDByItemReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* TSlgCityReduceBuildQueueAllCDByItemReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TSlgCityReduceBuildQueueAllCDByItemReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* TSlgCityReduceBuildQueueCDByGoldReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TSlgCityReduceBuildQueueCDByGoldReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* TSlgCityReduceBuildQueueAllCDByGoldReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TSlgCityReduceBuildQueueAllCDByGoldReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* TSlgCityReduceBuildQueueCDByGuildHelpReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TSlgCityReduceBuildQueueCDByGuildHelpReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* TSlgCityReduceBuildQueueCDFreepReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TSlgCityReduceBuildQueueCDFreepReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* TSlgCityUnlockBuildingReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TSlgCityUnlockBuildingReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* TSlgCityBuildBuildingReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TSlgCityBuildBuildingReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* TSlgCityFreeWarReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TSlgCityFreeWarReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* TSlgCityAppointHeroReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TSlgCityAppointHeroReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* TSlgCityRelieveAppointHeroReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TSlgCityRelieveAppointHeroReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* TSlgCityUseTimeLimitedPropReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TSlgCityUseTimeLimitedPropReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* TSlgCityActiveHeroPropertyReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TSlgCityActiveHeroPropertyReq_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_net_2fSlgCity_2eproto() {
  protobuf_AddDesc_net_2fSlgCity_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "net/SlgCity.proto");
  GOOGLE_CHECK(file != NULL);
  TSlgCityBuildingData_descriptor_ = file->message_type(0);
  static const int TSlgCityBuildingData_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TSlgCityBuildingData, foundationid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TSlgCityBuildingData, level_),
  };
  TSlgCityBuildingData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TSlgCityBuildingData_descriptor_,
      TSlgCityBuildingData::default_instance_,
      TSlgCityBuildingData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TSlgCityBuildingData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TSlgCityBuildingData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TSlgCityBuildingData));
  TSlgCityBuildingAppointData_descriptor_ = file->message_type(1);
  static const int TSlgCityBuildingAppointData_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TSlgCityBuildingAppointData, buildingtid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TSlgCityBuildingAppointData, htid_),
  };
  TSlgCityBuildingAppointData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TSlgCityBuildingAppointData_descriptor_,
      TSlgCityBuildingAppointData::default_instance_,
      TSlgCityBuildingAppointData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TSlgCityBuildingAppointData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TSlgCityBuildingAppointData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TSlgCityBuildingAppointData));
  TSlgCityBuildingQueueData_descriptor_ = file->message_type(2);
  static const int TSlgCityBuildingQueueData_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TSlgCityBuildingQueueData, queueid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TSlgCityBuildingQueueData, endcdtime_),
  };
  TSlgCityBuildingQueueData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TSlgCityBuildingQueueData_descriptor_,
      TSlgCityBuildingQueueData::default_instance_,
      TSlgCityBuildingQueueData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TSlgCityBuildingQueueData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TSlgCityBuildingQueueData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TSlgCityBuildingQueueData));
  TSlgCityTimeLimitedPropData_descriptor_ = file->message_type(3);
  static const int TSlgCityTimeLimitedPropData_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TSlgCityTimeLimitedPropData, proptid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TSlgCityTimeLimitedPropData, endtime_),
  };
  TSlgCityTimeLimitedPropData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TSlgCityTimeLimitedPropData_descriptor_,
      TSlgCityTimeLimitedPropData::default_instance_,
      TSlgCityTimeLimitedPropData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TSlgCityTimeLimitedPropData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TSlgCityTimeLimitedPropData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TSlgCityTimeLimitedPropData));
  TSlgCityFreeWarData_descriptor_ = file->message_type(4);
  static const int TSlgCityFreeWarData_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TSlgCityFreeWarData, starttime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TSlgCityFreeWarData, endtime_),
  };
  TSlgCityFreeWarData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TSlgCityFreeWarData_descriptor_,
      TSlgCityFreeWarData::default_instance_,
      TSlgCityFreeWarData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TSlgCityFreeWarData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TSlgCityFreeWarData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TSlgCityFreeWarData));
  TSlgCityWallDurableData_descriptor_ = file->message_type(5);
  static const int TSlgCityWallDurableData_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TSlgCityWallDurableData, curdurability_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TSlgCityWallDurableData, updatetime_),
  };
  TSlgCityWallDurableData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TSlgCityWallDurableData_descriptor_,
      TSlgCityWallDurableData::default_instance_,
      TSlgCityWallDurableData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TSlgCityWallDurableData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TSlgCityWallDurableData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TSlgCityWallDurableData));
  TSlgCityGetCityInfoRsp_descriptor_ = file->message_type(6);
  static const int TSlgCityGetCityInfoRsp_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TSlgCityGetCityInfoRsp, buildingarr_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TSlgCityGetCityInfoRsp, appointarr_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TSlgCityGetCityInfoRsp, queuearr_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TSlgCityGetCityInfoRsp, freewarinfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TSlgCityGetCityInfoRsp, walldurable_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TSlgCityGetCityInfoRsp, timelimitedproparr_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TSlgCityGetCityInfoRsp, activebuindingtidarr_),
  };
  TSlgCityGetCityInfoRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TSlgCityGetCityInfoRsp_descriptor_,
      TSlgCityGetCityInfoRsp::default_instance_,
      TSlgCityGetCityInfoRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TSlgCityGetCityInfoRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TSlgCityGetCityInfoRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TSlgCityGetCityInfoRsp));
  TSlgCityCityInfoNotify_descriptor_ = file->message_type(7);
  static const int TSlgCityCityInfoNotify_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TSlgCityCityInfoNotify, buildingarr_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TSlgCityCityInfoNotify, appointarr_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TSlgCityCityInfoNotify, queuearr_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TSlgCityCityInfoNotify, freewarinfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TSlgCityCityInfoNotify, walldurable_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TSlgCityCityInfoNotify, timelimitedproparr_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TSlgCityCityInfoNotify, activebuindingtidarr_),
  };
  TSlgCityCityInfoNotify_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TSlgCityCityInfoNotify_descriptor_,
      TSlgCityCityInfoNotify::default_instance_,
      TSlgCityCityInfoNotify_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TSlgCityCityInfoNotify, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TSlgCityCityInfoNotify, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TSlgCityCityInfoNotify));
  TSlgCityLevelUpReq_descriptor_ = file->message_type(8);
  static const int TSlgCityLevelUpReq_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TSlgCityLevelUpReq, foundationid_),
  };
  TSlgCityLevelUpReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TSlgCityLevelUpReq_descriptor_,
      TSlgCityLevelUpReq::default_instance_,
      TSlgCityLevelUpReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TSlgCityLevelUpReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TSlgCityLevelUpReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TSlgCityLevelUpReq));
  TSlgCityReduceBuildQueueCDByItemReq_descriptor_ = file->message_type(9);
  static const int TSlgCityReduceBuildQueueCDByItemReq_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TSlgCityReduceBuildQueueCDByItemReq, buildingqueueid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TSlgCityReduceBuildQueueCDByItemReq, itemarr_),
  };
  TSlgCityReduceBuildQueueCDByItemReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TSlgCityReduceBuildQueueCDByItemReq_descriptor_,
      TSlgCityReduceBuildQueueCDByItemReq::default_instance_,
      TSlgCityReduceBuildQueueCDByItemReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TSlgCityReduceBuildQueueCDByItemReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TSlgCityReduceBuildQueueCDByItemReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TSlgCityReduceBuildQueueCDByItemReq));
  TSlgCityReduceBuildQueueAllCDByItemReq_descriptor_ = file->message_type(10);
  static const int TSlgCityReduceBuildQueueAllCDByItemReq_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TSlgCityReduceBuildQueueAllCDByItemReq, buildingqueueid_),
  };
  TSlgCityReduceBuildQueueAllCDByItemReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TSlgCityReduceBuildQueueAllCDByItemReq_descriptor_,
      TSlgCityReduceBuildQueueAllCDByItemReq::default_instance_,
      TSlgCityReduceBuildQueueAllCDByItemReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TSlgCityReduceBuildQueueAllCDByItemReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TSlgCityReduceBuildQueueAllCDByItemReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TSlgCityReduceBuildQueueAllCDByItemReq));
  TSlgCityReduceBuildQueueCDByGoldReq_descriptor_ = file->message_type(11);
  static const int TSlgCityReduceBuildQueueCDByGoldReq_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TSlgCityReduceBuildQueueCDByGoldReq, buildingqueueid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TSlgCityReduceBuildQueueCDByGoldReq, goldnum_),
  };
  TSlgCityReduceBuildQueueCDByGoldReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TSlgCityReduceBuildQueueCDByGoldReq_descriptor_,
      TSlgCityReduceBuildQueueCDByGoldReq::default_instance_,
      TSlgCityReduceBuildQueueCDByGoldReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TSlgCityReduceBuildQueueCDByGoldReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TSlgCityReduceBuildQueueCDByGoldReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TSlgCityReduceBuildQueueCDByGoldReq));
  TSlgCityReduceBuildQueueAllCDByGoldReq_descriptor_ = file->message_type(12);
  static const int TSlgCityReduceBuildQueueAllCDByGoldReq_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TSlgCityReduceBuildQueueAllCDByGoldReq, buildingqueueid_),
  };
  TSlgCityReduceBuildQueueAllCDByGoldReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TSlgCityReduceBuildQueueAllCDByGoldReq_descriptor_,
      TSlgCityReduceBuildQueueAllCDByGoldReq::default_instance_,
      TSlgCityReduceBuildQueueAllCDByGoldReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TSlgCityReduceBuildQueueAllCDByGoldReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TSlgCityReduceBuildQueueAllCDByGoldReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TSlgCityReduceBuildQueueAllCDByGoldReq));
  TSlgCityReduceBuildQueueCDByGuildHelpReq_descriptor_ = file->message_type(13);
  static const int TSlgCityReduceBuildQueueCDByGuildHelpReq_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TSlgCityReduceBuildQueueCDByGuildHelpReq, buildingqueueid_),
  };
  TSlgCityReduceBuildQueueCDByGuildHelpReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TSlgCityReduceBuildQueueCDByGuildHelpReq_descriptor_,
      TSlgCityReduceBuildQueueCDByGuildHelpReq::default_instance_,
      TSlgCityReduceBuildQueueCDByGuildHelpReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TSlgCityReduceBuildQueueCDByGuildHelpReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TSlgCityReduceBuildQueueCDByGuildHelpReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TSlgCityReduceBuildQueueCDByGuildHelpReq));
  TSlgCityReduceBuildQueueCDFreepReq_descriptor_ = file->message_type(14);
  static const int TSlgCityReduceBuildQueueCDFreepReq_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TSlgCityReduceBuildQueueCDFreepReq, buildingqueueid_),
  };
  TSlgCityReduceBuildQueueCDFreepReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TSlgCityReduceBuildQueueCDFreepReq_descriptor_,
      TSlgCityReduceBuildQueueCDFreepReq::default_instance_,
      TSlgCityReduceBuildQueueCDFreepReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TSlgCityReduceBuildQueueCDFreepReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TSlgCityReduceBuildQueueCDFreepReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TSlgCityReduceBuildQueueCDFreepReq));
  TSlgCityUnlockBuildingReq_descriptor_ = file->message_type(15);
  static const int TSlgCityUnlockBuildingReq_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TSlgCityUnlockBuildingReq, foundationid_),
  };
  TSlgCityUnlockBuildingReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TSlgCityUnlockBuildingReq_descriptor_,
      TSlgCityUnlockBuildingReq::default_instance_,
      TSlgCityUnlockBuildingReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TSlgCityUnlockBuildingReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TSlgCityUnlockBuildingReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TSlgCityUnlockBuildingReq));
  TSlgCityBuildBuildingReq_descriptor_ = file->message_type(16);
  static const int TSlgCityBuildBuildingReq_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TSlgCityBuildBuildingReq, foundationid_),
  };
  TSlgCityBuildBuildingReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TSlgCityBuildBuildingReq_descriptor_,
      TSlgCityBuildBuildingReq::default_instance_,
      TSlgCityBuildBuildingReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TSlgCityBuildBuildingReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TSlgCityBuildBuildingReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TSlgCityBuildBuildingReq));
  TSlgCityFreeWarReq_descriptor_ = file->message_type(17);
  static const int TSlgCityFreeWarReq_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TSlgCityFreeWarReq, proptid_),
  };
  TSlgCityFreeWarReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TSlgCityFreeWarReq_descriptor_,
      TSlgCityFreeWarReq::default_instance_,
      TSlgCityFreeWarReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TSlgCityFreeWarReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TSlgCityFreeWarReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TSlgCityFreeWarReq));
  TSlgCityAppointHeroReq_descriptor_ = file->message_type(18);
  static const int TSlgCityAppointHeroReq_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TSlgCityAppointHeroReq, buildingtid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TSlgCityAppointHeroReq, herotid_),
  };
  TSlgCityAppointHeroReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TSlgCityAppointHeroReq_descriptor_,
      TSlgCityAppointHeroReq::default_instance_,
      TSlgCityAppointHeroReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TSlgCityAppointHeroReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TSlgCityAppointHeroReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TSlgCityAppointHeroReq));
  TSlgCityRelieveAppointHeroReq_descriptor_ = file->message_type(19);
  static const int TSlgCityRelieveAppointHeroReq_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TSlgCityRelieveAppointHeroReq, buildingtid_),
  };
  TSlgCityRelieveAppointHeroReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TSlgCityRelieveAppointHeroReq_descriptor_,
      TSlgCityRelieveAppointHeroReq::default_instance_,
      TSlgCityRelieveAppointHeroReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TSlgCityRelieveAppointHeroReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TSlgCityRelieveAppointHeroReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TSlgCityRelieveAppointHeroReq));
  TSlgCityUseTimeLimitedPropReq_descriptor_ = file->message_type(20);
  static const int TSlgCityUseTimeLimitedPropReq_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TSlgCityUseTimeLimitedPropReq, proptid_),
  };
  TSlgCityUseTimeLimitedPropReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TSlgCityUseTimeLimitedPropReq_descriptor_,
      TSlgCityUseTimeLimitedPropReq::default_instance_,
      TSlgCityUseTimeLimitedPropReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TSlgCityUseTimeLimitedPropReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TSlgCityUseTimeLimitedPropReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TSlgCityUseTimeLimitedPropReq));
  TSlgCityActiveHeroPropertyReq_descriptor_ = file->message_type(21);
  static const int TSlgCityActiveHeroPropertyReq_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TSlgCityActiveHeroPropertyReq, buildingtid_),
  };
  TSlgCityActiveHeroPropertyReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TSlgCityActiveHeroPropertyReq_descriptor_,
      TSlgCityActiveHeroPropertyReq::default_instance_,
      TSlgCityActiveHeroPropertyReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TSlgCityActiveHeroPropertyReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TSlgCityActiveHeroPropertyReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TSlgCityActiveHeroPropertyReq));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_net_2fSlgCity_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TSlgCityBuildingData_descriptor_, &TSlgCityBuildingData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TSlgCityBuildingAppointData_descriptor_, &TSlgCityBuildingAppointData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TSlgCityBuildingQueueData_descriptor_, &TSlgCityBuildingQueueData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TSlgCityTimeLimitedPropData_descriptor_, &TSlgCityTimeLimitedPropData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TSlgCityFreeWarData_descriptor_, &TSlgCityFreeWarData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TSlgCityWallDurableData_descriptor_, &TSlgCityWallDurableData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TSlgCityGetCityInfoRsp_descriptor_, &TSlgCityGetCityInfoRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TSlgCityCityInfoNotify_descriptor_, &TSlgCityCityInfoNotify::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TSlgCityLevelUpReq_descriptor_, &TSlgCityLevelUpReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TSlgCityReduceBuildQueueCDByItemReq_descriptor_, &TSlgCityReduceBuildQueueCDByItemReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TSlgCityReduceBuildQueueAllCDByItemReq_descriptor_, &TSlgCityReduceBuildQueueAllCDByItemReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TSlgCityReduceBuildQueueCDByGoldReq_descriptor_, &TSlgCityReduceBuildQueueCDByGoldReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TSlgCityReduceBuildQueueAllCDByGoldReq_descriptor_, &TSlgCityReduceBuildQueueAllCDByGoldReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TSlgCityReduceBuildQueueCDByGuildHelpReq_descriptor_, &TSlgCityReduceBuildQueueCDByGuildHelpReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TSlgCityReduceBuildQueueCDFreepReq_descriptor_, &TSlgCityReduceBuildQueueCDFreepReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TSlgCityUnlockBuildingReq_descriptor_, &TSlgCityUnlockBuildingReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TSlgCityBuildBuildingReq_descriptor_, &TSlgCityBuildBuildingReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TSlgCityFreeWarReq_descriptor_, &TSlgCityFreeWarReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TSlgCityAppointHeroReq_descriptor_, &TSlgCityAppointHeroReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TSlgCityRelieveAppointHeroReq_descriptor_, &TSlgCityRelieveAppointHeroReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TSlgCityUseTimeLimitedPropReq_descriptor_, &TSlgCityUseTimeLimitedPropReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TSlgCityActiveHeroPropertyReq_descriptor_, &TSlgCityActiveHeroPropertyReq::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_net_2fSlgCity_2eproto() {
  delete TSlgCityBuildingData::default_instance_;
  delete TSlgCityBuildingData_reflection_;
  delete TSlgCityBuildingAppointData::default_instance_;
  delete TSlgCityBuildingAppointData_reflection_;
  delete TSlgCityBuildingQueueData::default_instance_;
  delete TSlgCityBuildingQueueData_reflection_;
  delete TSlgCityTimeLimitedPropData::default_instance_;
  delete TSlgCityTimeLimitedPropData_reflection_;
  delete TSlgCityFreeWarData::default_instance_;
  delete TSlgCityFreeWarData_reflection_;
  delete TSlgCityWallDurableData::default_instance_;
  delete TSlgCityWallDurableData_reflection_;
  delete TSlgCityGetCityInfoRsp::default_instance_;
  delete TSlgCityGetCityInfoRsp_reflection_;
  delete TSlgCityCityInfoNotify::default_instance_;
  delete TSlgCityCityInfoNotify_reflection_;
  delete TSlgCityLevelUpReq::default_instance_;
  delete TSlgCityLevelUpReq_reflection_;
  delete TSlgCityReduceBuildQueueCDByItemReq::default_instance_;
  delete TSlgCityReduceBuildQueueCDByItemReq_reflection_;
  delete TSlgCityReduceBuildQueueAllCDByItemReq::default_instance_;
  delete TSlgCityReduceBuildQueueAllCDByItemReq_reflection_;
  delete TSlgCityReduceBuildQueueCDByGoldReq::default_instance_;
  delete TSlgCityReduceBuildQueueCDByGoldReq_reflection_;
  delete TSlgCityReduceBuildQueueAllCDByGoldReq::default_instance_;
  delete TSlgCityReduceBuildQueueAllCDByGoldReq_reflection_;
  delete TSlgCityReduceBuildQueueCDByGuildHelpReq::default_instance_;
  delete TSlgCityReduceBuildQueueCDByGuildHelpReq_reflection_;
  delete TSlgCityReduceBuildQueueCDFreepReq::default_instance_;
  delete TSlgCityReduceBuildQueueCDFreepReq_reflection_;
  delete TSlgCityUnlockBuildingReq::default_instance_;
  delete TSlgCityUnlockBuildingReq_reflection_;
  delete TSlgCityBuildBuildingReq::default_instance_;
  delete TSlgCityBuildBuildingReq_reflection_;
  delete TSlgCityFreeWarReq::default_instance_;
  delete TSlgCityFreeWarReq_reflection_;
  delete TSlgCityAppointHeroReq::default_instance_;
  delete TSlgCityAppointHeroReq_reflection_;
  delete TSlgCityRelieveAppointHeroReq::default_instance_;
  delete TSlgCityRelieveAppointHeroReq_reflection_;
  delete TSlgCityUseTimeLimitedPropReq::default_instance_;
  delete TSlgCityUseTimeLimitedPropReq_reflection_;
  delete TSlgCityActiveHeroPropertyReq::default_instance_;
  delete TSlgCityActiveHeroPropertyReq_reflection_;
}

void protobuf_AddDesc_net_2fSlgCity_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::pb::protobuf_AddDesc_net_2fCommonReward_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\021net/SlgCity.proto\022\002pb\032\026net/CommonRewar"
    "d.proto\";\n\024TSlgCityBuildingData\022\024\n\014Found"
    "ationId\030\001 \001(\r\022\r\n\005Level\030\002 \001(\r\"@\n\033TSlgCity"
    "BuildingAppointData\022\023\n\013BuildingTid\030\001 \001(\r"
    "\022\014\n\004Htid\030\002 \001(\r\"\?\n\031TSlgCityBuildingQueueD"
    "ata\022\017\n\007QueueId\030\001 \001(\r\022\021\n\tEndCDTime\030\002 \001(\003\""
    "\?\n\033TSlgCityTimeLimitedPropData\022\017\n\007PropTi"
    "d\030\001 \001(\r\022\017\n\007EndTime\030\002 \001(\003\"9\n\023TSlgCityFree"
    "WarData\022\021\n\tStartTime\030\001 \001(\003\022\017\n\007EndTime\030\002 "
    "\001(\003\"D\n\027TSlgCityWallDurableData\022\025\n\rCurDur"
    "ability\030\001 \001(\r\022\022\n\nUpdateTime\030\002 \001(\003\"\350\002\n\026TS"
    "lgCityGetCityInfoRsp\022-\n\013BuildingArr\030\001 \003("
    "\0132\030.pb.TSlgCityBuildingData\0223\n\nAppointAr"
    "r\030\002 \003(\0132\037.pb.TSlgCityBuildingAppointData"
    "\022/\n\010QueueArr\030\003 \003(\0132\035.pb.TSlgCityBuilding"
    "QueueData\022,\n\013FreeWarInfo\030\004 \001(\0132\027.pb.TSlg"
    "CityFreeWarData\0220\n\013WallDurable\030\005 \001(\0132\033.p"
    "b.TSlgCityWallDurableData\022;\n\022TimeLimited"
    "PropArr\030\006 \003(\0132\037.pb.TSlgCityTimeLimitedPr"
    "opData\022\034\n\024ActiveBuindingtidArr\030\007 \003(\r\"\350\002\n"
    "\026TSlgCityCityInfoNotify\022-\n\013BuildingArr\030\001"
    " \003(\0132\030.pb.TSlgCityBuildingData\0223\n\nAppoin"
    "tArr\030\002 \003(\0132\037.pb.TSlgCityBuildingAppointD"
    "ata\022/\n\010QueueArr\030\003 \003(\0132\035.pb.TSlgCityBuild"
    "ingQueueData\022,\n\013FreeWarInfo\030\004 \001(\0132\027.pb.T"
    "SlgCityFreeWarData\0220\n\013WallDurable\030\005 \001(\0132"
    "\033.pb.TSlgCityWallDurableData\022;\n\022TimeLimi"
    "tedPropArr\030\006 \003(\0132\037.pb.TSlgCityTimeLimite"
    "dPropData\022\034\n\024ActiveBuindingtidArr\030\007 \003(\r\""
    "*\n\022TSlgCityLevelUpReq\022\024\n\014FoundationId\030\001 "
    "\001(\r\"b\n#TSlgCityReduceBuildQueueCDByItemR"
    "eq\022\027\n\017BuildingQueueId\030\001 \001(\r\022\"\n\007ItemArr\030\002"
    " \003(\0132\021.pb.TCommonReward\"A\n&TSlgCityReduc"
    "eBuildQueueAllCDByItemReq\022\027\n\017BuildingQue"
    "ueId\030\001 \001(\r\"O\n#TSlgCityReduceBuildQueueCD"
    "ByGoldReq\022\027\n\017BuildingQueueId\030\001 \001(\r\022\017\n\007Go"
    "ldNum\030\002 \001(\r\"A\n&TSlgCityReduceBuildQueueA"
    "llCDByGoldReq\022\027\n\017BuildingQueueId\030\001 \001(\r\"C"
    "\n(TSlgCityReduceBuildQueueCDByGuildHelpR"
    "eq\022\027\n\017BuildingQueueId\030\001 \001(\r\"=\n\"TSlgCityR"
    "educeBuildQueueCDFreepReq\022\027\n\017BuildingQue"
    "ueId\030\001 \001(\r\"1\n\031TSlgCityUnlockBuildingReq\022"
    "\024\n\014FoundationId\030\001 \001(\r\"0\n\030TSlgCityBuildBu"
    "ildingReq\022\024\n\014FoundationId\030\001 \001(\r\"%\n\022TSlgC"
    "ityFreeWarReq\022\017\n\007PropTid\030\001 \001(\r\">\n\026TSlgCi"
    "tyAppointHeroReq\022\023\n\013BuildingTid\030\001 \001(\r\022\017\n"
    "\007HeroTid\030\002 \001(\r\"4\n\035TSlgCityRelieveAppoint"
    "HeroReq\022\023\n\013BuildingTid\030\001 \001(\r\"0\n\035TSlgCity"
    "UseTimeLimitedPropReq\022\017\n\007PropTid\030\001 \001(\r\"4"
    "\n\035TSlgCityActiveHeroPropertyReq\022\023\n\013Build"
    "ingTid\030\001 \001(\r", 2012);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "net/SlgCity.proto", &protobuf_RegisterTypes);
  TSlgCityBuildingData::default_instance_ = new TSlgCityBuildingData();
  TSlgCityBuildingAppointData::default_instance_ = new TSlgCityBuildingAppointData();
  TSlgCityBuildingQueueData::default_instance_ = new TSlgCityBuildingQueueData();
  TSlgCityTimeLimitedPropData::default_instance_ = new TSlgCityTimeLimitedPropData();
  TSlgCityFreeWarData::default_instance_ = new TSlgCityFreeWarData();
  TSlgCityWallDurableData::default_instance_ = new TSlgCityWallDurableData();
  TSlgCityGetCityInfoRsp::default_instance_ = new TSlgCityGetCityInfoRsp();
  TSlgCityCityInfoNotify::default_instance_ = new TSlgCityCityInfoNotify();
  TSlgCityLevelUpReq::default_instance_ = new TSlgCityLevelUpReq();
  TSlgCityReduceBuildQueueCDByItemReq::default_instance_ = new TSlgCityReduceBuildQueueCDByItemReq();
  TSlgCityReduceBuildQueueAllCDByItemReq::default_instance_ = new TSlgCityReduceBuildQueueAllCDByItemReq();
  TSlgCityReduceBuildQueueCDByGoldReq::default_instance_ = new TSlgCityReduceBuildQueueCDByGoldReq();
  TSlgCityReduceBuildQueueAllCDByGoldReq::default_instance_ = new TSlgCityReduceBuildQueueAllCDByGoldReq();
  TSlgCityReduceBuildQueueCDByGuildHelpReq::default_instance_ = new TSlgCityReduceBuildQueueCDByGuildHelpReq();
  TSlgCityReduceBuildQueueCDFreepReq::default_instance_ = new TSlgCityReduceBuildQueueCDFreepReq();
  TSlgCityUnlockBuildingReq::default_instance_ = new TSlgCityUnlockBuildingReq();
  TSlgCityBuildBuildingReq::default_instance_ = new TSlgCityBuildBuildingReq();
  TSlgCityFreeWarReq::default_instance_ = new TSlgCityFreeWarReq();
  TSlgCityAppointHeroReq::default_instance_ = new TSlgCityAppointHeroReq();
  TSlgCityRelieveAppointHeroReq::default_instance_ = new TSlgCityRelieveAppointHeroReq();
  TSlgCityUseTimeLimitedPropReq::default_instance_ = new TSlgCityUseTimeLimitedPropReq();
  TSlgCityActiveHeroPropertyReq::default_instance_ = new TSlgCityActiveHeroPropertyReq();
  TSlgCityBuildingData::default_instance_->InitAsDefaultInstance();
  TSlgCityBuildingAppointData::default_instance_->InitAsDefaultInstance();
  TSlgCityBuildingQueueData::default_instance_->InitAsDefaultInstance();
  TSlgCityTimeLimitedPropData::default_instance_->InitAsDefaultInstance();
  TSlgCityFreeWarData::default_instance_->InitAsDefaultInstance();
  TSlgCityWallDurableData::default_instance_->InitAsDefaultInstance();
  TSlgCityGetCityInfoRsp::default_instance_->InitAsDefaultInstance();
  TSlgCityCityInfoNotify::default_instance_->InitAsDefaultInstance();
  TSlgCityLevelUpReq::default_instance_->InitAsDefaultInstance();
  TSlgCityReduceBuildQueueCDByItemReq::default_instance_->InitAsDefaultInstance();
  TSlgCityReduceBuildQueueAllCDByItemReq::default_instance_->InitAsDefaultInstance();
  TSlgCityReduceBuildQueueCDByGoldReq::default_instance_->InitAsDefaultInstance();
  TSlgCityReduceBuildQueueAllCDByGoldReq::default_instance_->InitAsDefaultInstance();
  TSlgCityReduceBuildQueueCDByGuildHelpReq::default_instance_->InitAsDefaultInstance();
  TSlgCityReduceBuildQueueCDFreepReq::default_instance_->InitAsDefaultInstance();
  TSlgCityUnlockBuildingReq::default_instance_->InitAsDefaultInstance();
  TSlgCityBuildBuildingReq::default_instance_->InitAsDefaultInstance();
  TSlgCityFreeWarReq::default_instance_->InitAsDefaultInstance();
  TSlgCityAppointHeroReq::default_instance_->InitAsDefaultInstance();
  TSlgCityRelieveAppointHeroReq::default_instance_->InitAsDefaultInstance();
  TSlgCityUseTimeLimitedPropReq::default_instance_->InitAsDefaultInstance();
  TSlgCityActiveHeroPropertyReq::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_net_2fSlgCity_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_net_2fSlgCity_2eproto {
  StaticDescriptorInitializer_net_2fSlgCity_2eproto() {
    protobuf_AddDesc_net_2fSlgCity_2eproto();
  }
} static_descriptor_initializer_net_2fSlgCity_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int TSlgCityBuildingData::kFoundationIdFieldNumber;
const int TSlgCityBuildingData::kLevelFieldNumber;
#endif  // !_MSC_VER

TSlgCityBuildingData::TSlgCityBuildingData()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TSlgCityBuildingData)
}

void TSlgCityBuildingData::InitAsDefaultInstance() {
}

TSlgCityBuildingData::TSlgCityBuildingData(const TSlgCityBuildingData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TSlgCityBuildingData)
}

void TSlgCityBuildingData::SharedCtor() {
  _cached_size_ = 0;
  foundationid_ = 0u;
  level_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TSlgCityBuildingData::~TSlgCityBuildingData() {
  // @@protoc_insertion_point(destructor:pb.TSlgCityBuildingData)
  SharedDtor();
}

void TSlgCityBuildingData::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TSlgCityBuildingData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TSlgCityBuildingData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TSlgCityBuildingData_descriptor_;
}

const TSlgCityBuildingData& TSlgCityBuildingData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fSlgCity_2eproto();
  return *default_instance_;
}

TSlgCityBuildingData* TSlgCityBuildingData::default_instance_ = NULL;

TSlgCityBuildingData* TSlgCityBuildingData::New() const {
  return new TSlgCityBuildingData;
}

void TSlgCityBuildingData::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<TSlgCityBuildingData*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(foundationid_, level_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TSlgCityBuildingData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TSlgCityBuildingData)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 FoundationId = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &foundationid_)));
          set_has_foundationid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_Level;
        break;
      }

      // optional uint32 Level = 2;
      case 2: {
        if (tag == 16) {
         parse_Level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &level_)));
          set_has_level();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TSlgCityBuildingData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TSlgCityBuildingData)
  return false;
#undef DO_
}

void TSlgCityBuildingData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TSlgCityBuildingData)
  // optional uint32 FoundationId = 1;
  if (has_foundationid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->foundationid(), output);
  }

  // optional uint32 Level = 2;
  if (has_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->level(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TSlgCityBuildingData)
}

::google::protobuf::uint8* TSlgCityBuildingData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TSlgCityBuildingData)
  // optional uint32 FoundationId = 1;
  if (has_foundationid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->foundationid(), target);
  }

  // optional uint32 Level = 2;
  if (has_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->level(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TSlgCityBuildingData)
  return target;
}

int TSlgCityBuildingData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 FoundationId = 1;
    if (has_foundationid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->foundationid());
    }

    // optional uint32 Level = 2;
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->level());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TSlgCityBuildingData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TSlgCityBuildingData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TSlgCityBuildingData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TSlgCityBuildingData::MergeFrom(const TSlgCityBuildingData& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_foundationid()) {
      set_foundationid(from.foundationid());
    }
    if (from.has_level()) {
      set_level(from.level());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TSlgCityBuildingData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TSlgCityBuildingData::CopyFrom(const TSlgCityBuildingData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TSlgCityBuildingData::IsInitialized() const {

  return true;
}

void TSlgCityBuildingData::Swap(TSlgCityBuildingData* other) {
  if (other != this) {
    std::swap(foundationid_, other->foundationid_);
    std::swap(level_, other->level_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TSlgCityBuildingData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TSlgCityBuildingData_descriptor_;
  metadata.reflection = TSlgCityBuildingData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TSlgCityBuildingAppointData::kBuildingTidFieldNumber;
const int TSlgCityBuildingAppointData::kHtidFieldNumber;
#endif  // !_MSC_VER

TSlgCityBuildingAppointData::TSlgCityBuildingAppointData()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TSlgCityBuildingAppointData)
}

void TSlgCityBuildingAppointData::InitAsDefaultInstance() {
}

TSlgCityBuildingAppointData::TSlgCityBuildingAppointData(const TSlgCityBuildingAppointData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TSlgCityBuildingAppointData)
}

void TSlgCityBuildingAppointData::SharedCtor() {
  _cached_size_ = 0;
  buildingtid_ = 0u;
  htid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TSlgCityBuildingAppointData::~TSlgCityBuildingAppointData() {
  // @@protoc_insertion_point(destructor:pb.TSlgCityBuildingAppointData)
  SharedDtor();
}

void TSlgCityBuildingAppointData::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TSlgCityBuildingAppointData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TSlgCityBuildingAppointData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TSlgCityBuildingAppointData_descriptor_;
}

const TSlgCityBuildingAppointData& TSlgCityBuildingAppointData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fSlgCity_2eproto();
  return *default_instance_;
}

TSlgCityBuildingAppointData* TSlgCityBuildingAppointData::default_instance_ = NULL;

TSlgCityBuildingAppointData* TSlgCityBuildingAppointData::New() const {
  return new TSlgCityBuildingAppointData;
}

void TSlgCityBuildingAppointData::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<TSlgCityBuildingAppointData*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(buildingtid_, htid_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TSlgCityBuildingAppointData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TSlgCityBuildingAppointData)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 BuildingTid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &buildingtid_)));
          set_has_buildingtid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_Htid;
        break;
      }

      // optional uint32 Htid = 2;
      case 2: {
        if (tag == 16) {
         parse_Htid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &htid_)));
          set_has_htid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TSlgCityBuildingAppointData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TSlgCityBuildingAppointData)
  return false;
#undef DO_
}

void TSlgCityBuildingAppointData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TSlgCityBuildingAppointData)
  // optional uint32 BuildingTid = 1;
  if (has_buildingtid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->buildingtid(), output);
  }

  // optional uint32 Htid = 2;
  if (has_htid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->htid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TSlgCityBuildingAppointData)
}

::google::protobuf::uint8* TSlgCityBuildingAppointData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TSlgCityBuildingAppointData)
  // optional uint32 BuildingTid = 1;
  if (has_buildingtid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->buildingtid(), target);
  }

  // optional uint32 Htid = 2;
  if (has_htid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->htid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TSlgCityBuildingAppointData)
  return target;
}

int TSlgCityBuildingAppointData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 BuildingTid = 1;
    if (has_buildingtid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->buildingtid());
    }

    // optional uint32 Htid = 2;
    if (has_htid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->htid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TSlgCityBuildingAppointData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TSlgCityBuildingAppointData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TSlgCityBuildingAppointData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TSlgCityBuildingAppointData::MergeFrom(const TSlgCityBuildingAppointData& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_buildingtid()) {
      set_buildingtid(from.buildingtid());
    }
    if (from.has_htid()) {
      set_htid(from.htid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TSlgCityBuildingAppointData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TSlgCityBuildingAppointData::CopyFrom(const TSlgCityBuildingAppointData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TSlgCityBuildingAppointData::IsInitialized() const {

  return true;
}

void TSlgCityBuildingAppointData::Swap(TSlgCityBuildingAppointData* other) {
  if (other != this) {
    std::swap(buildingtid_, other->buildingtid_);
    std::swap(htid_, other->htid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TSlgCityBuildingAppointData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TSlgCityBuildingAppointData_descriptor_;
  metadata.reflection = TSlgCityBuildingAppointData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TSlgCityBuildingQueueData::kQueueIdFieldNumber;
const int TSlgCityBuildingQueueData::kEndCDTimeFieldNumber;
#endif  // !_MSC_VER

TSlgCityBuildingQueueData::TSlgCityBuildingQueueData()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TSlgCityBuildingQueueData)
}

void TSlgCityBuildingQueueData::InitAsDefaultInstance() {
}

TSlgCityBuildingQueueData::TSlgCityBuildingQueueData(const TSlgCityBuildingQueueData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TSlgCityBuildingQueueData)
}

void TSlgCityBuildingQueueData::SharedCtor() {
  _cached_size_ = 0;
  queueid_ = 0u;
  endcdtime_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TSlgCityBuildingQueueData::~TSlgCityBuildingQueueData() {
  // @@protoc_insertion_point(destructor:pb.TSlgCityBuildingQueueData)
  SharedDtor();
}

void TSlgCityBuildingQueueData::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TSlgCityBuildingQueueData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TSlgCityBuildingQueueData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TSlgCityBuildingQueueData_descriptor_;
}

const TSlgCityBuildingQueueData& TSlgCityBuildingQueueData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fSlgCity_2eproto();
  return *default_instance_;
}

TSlgCityBuildingQueueData* TSlgCityBuildingQueueData::default_instance_ = NULL;

TSlgCityBuildingQueueData* TSlgCityBuildingQueueData::New() const {
  return new TSlgCityBuildingQueueData;
}

void TSlgCityBuildingQueueData::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<TSlgCityBuildingQueueData*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(endcdtime_, queueid_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TSlgCityBuildingQueueData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TSlgCityBuildingQueueData)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 QueueId = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &queueid_)));
          set_has_queueid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_EndCDTime;
        break;
      }

      // optional int64 EndCDTime = 2;
      case 2: {
        if (tag == 16) {
         parse_EndCDTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &endcdtime_)));
          set_has_endcdtime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TSlgCityBuildingQueueData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TSlgCityBuildingQueueData)
  return false;
#undef DO_
}

void TSlgCityBuildingQueueData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TSlgCityBuildingQueueData)
  // optional uint32 QueueId = 1;
  if (has_queueid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->queueid(), output);
  }

  // optional int64 EndCDTime = 2;
  if (has_endcdtime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->endcdtime(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TSlgCityBuildingQueueData)
}

::google::protobuf::uint8* TSlgCityBuildingQueueData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TSlgCityBuildingQueueData)
  // optional uint32 QueueId = 1;
  if (has_queueid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->queueid(), target);
  }

  // optional int64 EndCDTime = 2;
  if (has_endcdtime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->endcdtime(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TSlgCityBuildingQueueData)
  return target;
}

int TSlgCityBuildingQueueData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 QueueId = 1;
    if (has_queueid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->queueid());
    }

    // optional int64 EndCDTime = 2;
    if (has_endcdtime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->endcdtime());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TSlgCityBuildingQueueData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TSlgCityBuildingQueueData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TSlgCityBuildingQueueData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TSlgCityBuildingQueueData::MergeFrom(const TSlgCityBuildingQueueData& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_queueid()) {
      set_queueid(from.queueid());
    }
    if (from.has_endcdtime()) {
      set_endcdtime(from.endcdtime());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TSlgCityBuildingQueueData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TSlgCityBuildingQueueData::CopyFrom(const TSlgCityBuildingQueueData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TSlgCityBuildingQueueData::IsInitialized() const {

  return true;
}

void TSlgCityBuildingQueueData::Swap(TSlgCityBuildingQueueData* other) {
  if (other != this) {
    std::swap(queueid_, other->queueid_);
    std::swap(endcdtime_, other->endcdtime_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TSlgCityBuildingQueueData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TSlgCityBuildingQueueData_descriptor_;
  metadata.reflection = TSlgCityBuildingQueueData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TSlgCityTimeLimitedPropData::kPropTidFieldNumber;
const int TSlgCityTimeLimitedPropData::kEndTimeFieldNumber;
#endif  // !_MSC_VER

TSlgCityTimeLimitedPropData::TSlgCityTimeLimitedPropData()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TSlgCityTimeLimitedPropData)
}

void TSlgCityTimeLimitedPropData::InitAsDefaultInstance() {
}

TSlgCityTimeLimitedPropData::TSlgCityTimeLimitedPropData(const TSlgCityTimeLimitedPropData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TSlgCityTimeLimitedPropData)
}

void TSlgCityTimeLimitedPropData::SharedCtor() {
  _cached_size_ = 0;
  proptid_ = 0u;
  endtime_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TSlgCityTimeLimitedPropData::~TSlgCityTimeLimitedPropData() {
  // @@protoc_insertion_point(destructor:pb.TSlgCityTimeLimitedPropData)
  SharedDtor();
}

void TSlgCityTimeLimitedPropData::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TSlgCityTimeLimitedPropData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TSlgCityTimeLimitedPropData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TSlgCityTimeLimitedPropData_descriptor_;
}

const TSlgCityTimeLimitedPropData& TSlgCityTimeLimitedPropData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fSlgCity_2eproto();
  return *default_instance_;
}

TSlgCityTimeLimitedPropData* TSlgCityTimeLimitedPropData::default_instance_ = NULL;

TSlgCityTimeLimitedPropData* TSlgCityTimeLimitedPropData::New() const {
  return new TSlgCityTimeLimitedPropData;
}

void TSlgCityTimeLimitedPropData::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<TSlgCityTimeLimitedPropData*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(endtime_, proptid_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TSlgCityTimeLimitedPropData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TSlgCityTimeLimitedPropData)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 PropTid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &proptid_)));
          set_has_proptid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_EndTime;
        break;
      }

      // optional int64 EndTime = 2;
      case 2: {
        if (tag == 16) {
         parse_EndTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &endtime_)));
          set_has_endtime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TSlgCityTimeLimitedPropData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TSlgCityTimeLimitedPropData)
  return false;
#undef DO_
}

void TSlgCityTimeLimitedPropData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TSlgCityTimeLimitedPropData)
  // optional uint32 PropTid = 1;
  if (has_proptid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->proptid(), output);
  }

  // optional int64 EndTime = 2;
  if (has_endtime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->endtime(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TSlgCityTimeLimitedPropData)
}

::google::protobuf::uint8* TSlgCityTimeLimitedPropData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TSlgCityTimeLimitedPropData)
  // optional uint32 PropTid = 1;
  if (has_proptid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->proptid(), target);
  }

  // optional int64 EndTime = 2;
  if (has_endtime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->endtime(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TSlgCityTimeLimitedPropData)
  return target;
}

int TSlgCityTimeLimitedPropData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 PropTid = 1;
    if (has_proptid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->proptid());
    }

    // optional int64 EndTime = 2;
    if (has_endtime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->endtime());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TSlgCityTimeLimitedPropData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TSlgCityTimeLimitedPropData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TSlgCityTimeLimitedPropData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TSlgCityTimeLimitedPropData::MergeFrom(const TSlgCityTimeLimitedPropData& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_proptid()) {
      set_proptid(from.proptid());
    }
    if (from.has_endtime()) {
      set_endtime(from.endtime());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TSlgCityTimeLimitedPropData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TSlgCityTimeLimitedPropData::CopyFrom(const TSlgCityTimeLimitedPropData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TSlgCityTimeLimitedPropData::IsInitialized() const {

  return true;
}

void TSlgCityTimeLimitedPropData::Swap(TSlgCityTimeLimitedPropData* other) {
  if (other != this) {
    std::swap(proptid_, other->proptid_);
    std::swap(endtime_, other->endtime_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TSlgCityTimeLimitedPropData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TSlgCityTimeLimitedPropData_descriptor_;
  metadata.reflection = TSlgCityTimeLimitedPropData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TSlgCityFreeWarData::kStartTimeFieldNumber;
const int TSlgCityFreeWarData::kEndTimeFieldNumber;
#endif  // !_MSC_VER

TSlgCityFreeWarData::TSlgCityFreeWarData()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TSlgCityFreeWarData)
}

void TSlgCityFreeWarData::InitAsDefaultInstance() {
}

TSlgCityFreeWarData::TSlgCityFreeWarData(const TSlgCityFreeWarData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TSlgCityFreeWarData)
}

void TSlgCityFreeWarData::SharedCtor() {
  _cached_size_ = 0;
  starttime_ = GOOGLE_LONGLONG(0);
  endtime_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TSlgCityFreeWarData::~TSlgCityFreeWarData() {
  // @@protoc_insertion_point(destructor:pb.TSlgCityFreeWarData)
  SharedDtor();
}

void TSlgCityFreeWarData::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TSlgCityFreeWarData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TSlgCityFreeWarData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TSlgCityFreeWarData_descriptor_;
}

const TSlgCityFreeWarData& TSlgCityFreeWarData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fSlgCity_2eproto();
  return *default_instance_;
}

TSlgCityFreeWarData* TSlgCityFreeWarData::default_instance_ = NULL;

TSlgCityFreeWarData* TSlgCityFreeWarData::New() const {
  return new TSlgCityFreeWarData;
}

void TSlgCityFreeWarData::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<TSlgCityFreeWarData*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(starttime_, endtime_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TSlgCityFreeWarData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TSlgCityFreeWarData)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 StartTime = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &starttime_)));
          set_has_starttime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_EndTime;
        break;
      }

      // optional int64 EndTime = 2;
      case 2: {
        if (tag == 16) {
         parse_EndTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &endtime_)));
          set_has_endtime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TSlgCityFreeWarData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TSlgCityFreeWarData)
  return false;
#undef DO_
}

void TSlgCityFreeWarData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TSlgCityFreeWarData)
  // optional int64 StartTime = 1;
  if (has_starttime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->starttime(), output);
  }

  // optional int64 EndTime = 2;
  if (has_endtime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->endtime(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TSlgCityFreeWarData)
}

::google::protobuf::uint8* TSlgCityFreeWarData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TSlgCityFreeWarData)
  // optional int64 StartTime = 1;
  if (has_starttime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->starttime(), target);
  }

  // optional int64 EndTime = 2;
  if (has_endtime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->endtime(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TSlgCityFreeWarData)
  return target;
}

int TSlgCityFreeWarData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int64 StartTime = 1;
    if (has_starttime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->starttime());
    }

    // optional int64 EndTime = 2;
    if (has_endtime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->endtime());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TSlgCityFreeWarData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TSlgCityFreeWarData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TSlgCityFreeWarData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TSlgCityFreeWarData::MergeFrom(const TSlgCityFreeWarData& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_starttime()) {
      set_starttime(from.starttime());
    }
    if (from.has_endtime()) {
      set_endtime(from.endtime());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TSlgCityFreeWarData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TSlgCityFreeWarData::CopyFrom(const TSlgCityFreeWarData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TSlgCityFreeWarData::IsInitialized() const {

  return true;
}

void TSlgCityFreeWarData::Swap(TSlgCityFreeWarData* other) {
  if (other != this) {
    std::swap(starttime_, other->starttime_);
    std::swap(endtime_, other->endtime_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TSlgCityFreeWarData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TSlgCityFreeWarData_descriptor_;
  metadata.reflection = TSlgCityFreeWarData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TSlgCityWallDurableData::kCurDurabilityFieldNumber;
const int TSlgCityWallDurableData::kUpdateTimeFieldNumber;
#endif  // !_MSC_VER

TSlgCityWallDurableData::TSlgCityWallDurableData()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TSlgCityWallDurableData)
}

void TSlgCityWallDurableData::InitAsDefaultInstance() {
}

TSlgCityWallDurableData::TSlgCityWallDurableData(const TSlgCityWallDurableData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TSlgCityWallDurableData)
}

void TSlgCityWallDurableData::SharedCtor() {
  _cached_size_ = 0;
  curdurability_ = 0u;
  updatetime_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TSlgCityWallDurableData::~TSlgCityWallDurableData() {
  // @@protoc_insertion_point(destructor:pb.TSlgCityWallDurableData)
  SharedDtor();
}

void TSlgCityWallDurableData::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TSlgCityWallDurableData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TSlgCityWallDurableData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TSlgCityWallDurableData_descriptor_;
}

const TSlgCityWallDurableData& TSlgCityWallDurableData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fSlgCity_2eproto();
  return *default_instance_;
}

TSlgCityWallDurableData* TSlgCityWallDurableData::default_instance_ = NULL;

TSlgCityWallDurableData* TSlgCityWallDurableData::New() const {
  return new TSlgCityWallDurableData;
}

void TSlgCityWallDurableData::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<TSlgCityWallDurableData*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(updatetime_, curdurability_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TSlgCityWallDurableData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TSlgCityWallDurableData)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 CurDurability = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &curdurability_)));
          set_has_curdurability();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_UpdateTime;
        break;
      }

      // optional int64 UpdateTime = 2;
      case 2: {
        if (tag == 16) {
         parse_UpdateTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &updatetime_)));
          set_has_updatetime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TSlgCityWallDurableData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TSlgCityWallDurableData)
  return false;
#undef DO_
}

void TSlgCityWallDurableData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TSlgCityWallDurableData)
  // optional uint32 CurDurability = 1;
  if (has_curdurability()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->curdurability(), output);
  }

  // optional int64 UpdateTime = 2;
  if (has_updatetime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->updatetime(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TSlgCityWallDurableData)
}

::google::protobuf::uint8* TSlgCityWallDurableData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TSlgCityWallDurableData)
  // optional uint32 CurDurability = 1;
  if (has_curdurability()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->curdurability(), target);
  }

  // optional int64 UpdateTime = 2;
  if (has_updatetime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->updatetime(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TSlgCityWallDurableData)
  return target;
}

int TSlgCityWallDurableData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 CurDurability = 1;
    if (has_curdurability()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->curdurability());
    }

    // optional int64 UpdateTime = 2;
    if (has_updatetime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->updatetime());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TSlgCityWallDurableData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TSlgCityWallDurableData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TSlgCityWallDurableData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TSlgCityWallDurableData::MergeFrom(const TSlgCityWallDurableData& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_curdurability()) {
      set_curdurability(from.curdurability());
    }
    if (from.has_updatetime()) {
      set_updatetime(from.updatetime());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TSlgCityWallDurableData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TSlgCityWallDurableData::CopyFrom(const TSlgCityWallDurableData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TSlgCityWallDurableData::IsInitialized() const {

  return true;
}

void TSlgCityWallDurableData::Swap(TSlgCityWallDurableData* other) {
  if (other != this) {
    std::swap(curdurability_, other->curdurability_);
    std::swap(updatetime_, other->updatetime_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TSlgCityWallDurableData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TSlgCityWallDurableData_descriptor_;
  metadata.reflection = TSlgCityWallDurableData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TSlgCityGetCityInfoRsp::kBuildingArrFieldNumber;
const int TSlgCityGetCityInfoRsp::kAppointArrFieldNumber;
const int TSlgCityGetCityInfoRsp::kQueueArrFieldNumber;
const int TSlgCityGetCityInfoRsp::kFreeWarInfoFieldNumber;
const int TSlgCityGetCityInfoRsp::kWallDurableFieldNumber;
const int TSlgCityGetCityInfoRsp::kTimeLimitedPropArrFieldNumber;
const int TSlgCityGetCityInfoRsp::kActiveBuindingtidArrFieldNumber;
#endif  // !_MSC_VER

TSlgCityGetCityInfoRsp::TSlgCityGetCityInfoRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TSlgCityGetCityInfoRsp)
}

void TSlgCityGetCityInfoRsp::InitAsDefaultInstance() {
  freewarinfo_ = const_cast< ::pb::TSlgCityFreeWarData*>(&::pb::TSlgCityFreeWarData::default_instance());
  walldurable_ = const_cast< ::pb::TSlgCityWallDurableData*>(&::pb::TSlgCityWallDurableData::default_instance());
}

TSlgCityGetCityInfoRsp::TSlgCityGetCityInfoRsp(const TSlgCityGetCityInfoRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TSlgCityGetCityInfoRsp)
}

void TSlgCityGetCityInfoRsp::SharedCtor() {
  _cached_size_ = 0;
  freewarinfo_ = NULL;
  walldurable_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TSlgCityGetCityInfoRsp::~TSlgCityGetCityInfoRsp() {
  // @@protoc_insertion_point(destructor:pb.TSlgCityGetCityInfoRsp)
  SharedDtor();
}

void TSlgCityGetCityInfoRsp::SharedDtor() {
  if (this != default_instance_) {
    delete freewarinfo_;
    delete walldurable_;
  }
}

void TSlgCityGetCityInfoRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TSlgCityGetCityInfoRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TSlgCityGetCityInfoRsp_descriptor_;
}

const TSlgCityGetCityInfoRsp& TSlgCityGetCityInfoRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fSlgCity_2eproto();
  return *default_instance_;
}

TSlgCityGetCityInfoRsp* TSlgCityGetCityInfoRsp::default_instance_ = NULL;

TSlgCityGetCityInfoRsp* TSlgCityGetCityInfoRsp::New() const {
  return new TSlgCityGetCityInfoRsp;
}

void TSlgCityGetCityInfoRsp::Clear() {
  if (_has_bits_[0 / 32] & 24) {
    if (has_freewarinfo()) {
      if (freewarinfo_ != NULL) freewarinfo_->::pb::TSlgCityFreeWarData::Clear();
    }
    if (has_walldurable()) {
      if (walldurable_ != NULL) walldurable_->::pb::TSlgCityWallDurableData::Clear();
    }
  }
  buildingarr_.Clear();
  appointarr_.Clear();
  queuearr_.Clear();
  timelimitedproparr_.Clear();
  activebuindingtidarr_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TSlgCityGetCityInfoRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TSlgCityGetCityInfoRsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .pb.TSlgCityBuildingData BuildingArr = 1;
      case 1: {
        if (tag == 10) {
         parse_BuildingArr:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_buildingarr()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_BuildingArr;
        if (input->ExpectTag(18)) goto parse_AppointArr;
        break;
      }

      // repeated .pb.TSlgCityBuildingAppointData AppointArr = 2;
      case 2: {
        if (tag == 18) {
         parse_AppointArr:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_appointarr()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_AppointArr;
        if (input->ExpectTag(26)) goto parse_QueueArr;
        break;
      }

      // repeated .pb.TSlgCityBuildingQueueData QueueArr = 3;
      case 3: {
        if (tag == 26) {
         parse_QueueArr:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_queuearr()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_QueueArr;
        if (input->ExpectTag(34)) goto parse_FreeWarInfo;
        break;
      }

      // optional .pb.TSlgCityFreeWarData FreeWarInfo = 4;
      case 4: {
        if (tag == 34) {
         parse_FreeWarInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_freewarinfo()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_WallDurable;
        break;
      }

      // optional .pb.TSlgCityWallDurableData WallDurable = 5;
      case 5: {
        if (tag == 42) {
         parse_WallDurable:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_walldurable()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_TimeLimitedPropArr;
        break;
      }

      // repeated .pb.TSlgCityTimeLimitedPropData TimeLimitedPropArr = 6;
      case 6: {
        if (tag == 50) {
         parse_TimeLimitedPropArr:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_timelimitedproparr()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_TimeLimitedPropArr;
        if (input->ExpectTag(56)) goto parse_ActiveBuindingtidArr;
        break;
      }

      // repeated uint32 ActiveBuindingtidArr = 7;
      case 7: {
        if (tag == 56) {
         parse_ActiveBuindingtidArr:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 56, input, this->mutable_activebuindingtidarr())));
        } else if (tag == 58) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_activebuindingtidarr())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_ActiveBuindingtidArr;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TSlgCityGetCityInfoRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TSlgCityGetCityInfoRsp)
  return false;
#undef DO_
}

void TSlgCityGetCityInfoRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TSlgCityGetCityInfoRsp)
  // repeated .pb.TSlgCityBuildingData BuildingArr = 1;
  for (int i = 0; i < this->buildingarr_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->buildingarr(i), output);
  }

  // repeated .pb.TSlgCityBuildingAppointData AppointArr = 2;
  for (int i = 0; i < this->appointarr_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->appointarr(i), output);
  }

  // repeated .pb.TSlgCityBuildingQueueData QueueArr = 3;
  for (int i = 0; i < this->queuearr_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->queuearr(i), output);
  }

  // optional .pb.TSlgCityFreeWarData FreeWarInfo = 4;
  if (has_freewarinfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->freewarinfo(), output);
  }

  // optional .pb.TSlgCityWallDurableData WallDurable = 5;
  if (has_walldurable()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->walldurable(), output);
  }

  // repeated .pb.TSlgCityTimeLimitedPropData TimeLimitedPropArr = 6;
  for (int i = 0; i < this->timelimitedproparr_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->timelimitedproparr(i), output);
  }

  // repeated uint32 ActiveBuindingtidArr = 7;
  for (int i = 0; i < this->activebuindingtidarr_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      7, this->activebuindingtidarr(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TSlgCityGetCityInfoRsp)
}

::google::protobuf::uint8* TSlgCityGetCityInfoRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TSlgCityGetCityInfoRsp)
  // repeated .pb.TSlgCityBuildingData BuildingArr = 1;
  for (int i = 0; i < this->buildingarr_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->buildingarr(i), target);
  }

  // repeated .pb.TSlgCityBuildingAppointData AppointArr = 2;
  for (int i = 0; i < this->appointarr_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->appointarr(i), target);
  }

  // repeated .pb.TSlgCityBuildingQueueData QueueArr = 3;
  for (int i = 0; i < this->queuearr_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->queuearr(i), target);
  }

  // optional .pb.TSlgCityFreeWarData FreeWarInfo = 4;
  if (has_freewarinfo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->freewarinfo(), target);
  }

  // optional .pb.TSlgCityWallDurableData WallDurable = 5;
  if (has_walldurable()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->walldurable(), target);
  }

  // repeated .pb.TSlgCityTimeLimitedPropData TimeLimitedPropArr = 6;
  for (int i = 0; i < this->timelimitedproparr_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->timelimitedproparr(i), target);
  }

  // repeated uint32 ActiveBuindingtidArr = 7;
  for (int i = 0; i < this->activebuindingtidarr_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(7, this->activebuindingtidarr(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TSlgCityGetCityInfoRsp)
  return target;
}

int TSlgCityGetCityInfoRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[3 / 32] & (0xffu << (3 % 32))) {
    // optional .pb.TSlgCityFreeWarData FreeWarInfo = 4;
    if (has_freewarinfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->freewarinfo());
    }

    // optional .pb.TSlgCityWallDurableData WallDurable = 5;
    if (has_walldurable()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->walldurable());
    }

  }
  // repeated .pb.TSlgCityBuildingData BuildingArr = 1;
  total_size += 1 * this->buildingarr_size();
  for (int i = 0; i < this->buildingarr_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->buildingarr(i));
  }

  // repeated .pb.TSlgCityBuildingAppointData AppointArr = 2;
  total_size += 1 * this->appointarr_size();
  for (int i = 0; i < this->appointarr_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->appointarr(i));
  }

  // repeated .pb.TSlgCityBuildingQueueData QueueArr = 3;
  total_size += 1 * this->queuearr_size();
  for (int i = 0; i < this->queuearr_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->queuearr(i));
  }

  // repeated .pb.TSlgCityTimeLimitedPropData TimeLimitedPropArr = 6;
  total_size += 1 * this->timelimitedproparr_size();
  for (int i = 0; i < this->timelimitedproparr_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->timelimitedproparr(i));
  }

  // repeated uint32 ActiveBuindingtidArr = 7;
  {
    int data_size = 0;
    for (int i = 0; i < this->activebuindingtidarr_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->activebuindingtidarr(i));
    }
    total_size += 1 * this->activebuindingtidarr_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TSlgCityGetCityInfoRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TSlgCityGetCityInfoRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TSlgCityGetCityInfoRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TSlgCityGetCityInfoRsp::MergeFrom(const TSlgCityGetCityInfoRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  buildingarr_.MergeFrom(from.buildingarr_);
  appointarr_.MergeFrom(from.appointarr_);
  queuearr_.MergeFrom(from.queuearr_);
  timelimitedproparr_.MergeFrom(from.timelimitedproparr_);
  activebuindingtidarr_.MergeFrom(from.activebuindingtidarr_);
  if (from._has_bits_[3 / 32] & (0xffu << (3 % 32))) {
    if (from.has_freewarinfo()) {
      mutable_freewarinfo()->::pb::TSlgCityFreeWarData::MergeFrom(from.freewarinfo());
    }
    if (from.has_walldurable()) {
      mutable_walldurable()->::pb::TSlgCityWallDurableData::MergeFrom(from.walldurable());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TSlgCityGetCityInfoRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TSlgCityGetCityInfoRsp::CopyFrom(const TSlgCityGetCityInfoRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TSlgCityGetCityInfoRsp::IsInitialized() const {

  return true;
}

void TSlgCityGetCityInfoRsp::Swap(TSlgCityGetCityInfoRsp* other) {
  if (other != this) {
    buildingarr_.Swap(&other->buildingarr_);
    appointarr_.Swap(&other->appointarr_);
    queuearr_.Swap(&other->queuearr_);
    std::swap(freewarinfo_, other->freewarinfo_);
    std::swap(walldurable_, other->walldurable_);
    timelimitedproparr_.Swap(&other->timelimitedproparr_);
    activebuindingtidarr_.Swap(&other->activebuindingtidarr_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TSlgCityGetCityInfoRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TSlgCityGetCityInfoRsp_descriptor_;
  metadata.reflection = TSlgCityGetCityInfoRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TSlgCityCityInfoNotify::kBuildingArrFieldNumber;
const int TSlgCityCityInfoNotify::kAppointArrFieldNumber;
const int TSlgCityCityInfoNotify::kQueueArrFieldNumber;
const int TSlgCityCityInfoNotify::kFreeWarInfoFieldNumber;
const int TSlgCityCityInfoNotify::kWallDurableFieldNumber;
const int TSlgCityCityInfoNotify::kTimeLimitedPropArrFieldNumber;
const int TSlgCityCityInfoNotify::kActiveBuindingtidArrFieldNumber;
#endif  // !_MSC_VER

TSlgCityCityInfoNotify::TSlgCityCityInfoNotify()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TSlgCityCityInfoNotify)
}

void TSlgCityCityInfoNotify::InitAsDefaultInstance() {
  freewarinfo_ = const_cast< ::pb::TSlgCityFreeWarData*>(&::pb::TSlgCityFreeWarData::default_instance());
  walldurable_ = const_cast< ::pb::TSlgCityWallDurableData*>(&::pb::TSlgCityWallDurableData::default_instance());
}

TSlgCityCityInfoNotify::TSlgCityCityInfoNotify(const TSlgCityCityInfoNotify& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TSlgCityCityInfoNotify)
}

void TSlgCityCityInfoNotify::SharedCtor() {
  _cached_size_ = 0;
  freewarinfo_ = NULL;
  walldurable_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TSlgCityCityInfoNotify::~TSlgCityCityInfoNotify() {
  // @@protoc_insertion_point(destructor:pb.TSlgCityCityInfoNotify)
  SharedDtor();
}

void TSlgCityCityInfoNotify::SharedDtor() {
  if (this != default_instance_) {
    delete freewarinfo_;
    delete walldurable_;
  }
}

void TSlgCityCityInfoNotify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TSlgCityCityInfoNotify::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TSlgCityCityInfoNotify_descriptor_;
}

const TSlgCityCityInfoNotify& TSlgCityCityInfoNotify::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fSlgCity_2eproto();
  return *default_instance_;
}

TSlgCityCityInfoNotify* TSlgCityCityInfoNotify::default_instance_ = NULL;

TSlgCityCityInfoNotify* TSlgCityCityInfoNotify::New() const {
  return new TSlgCityCityInfoNotify;
}

void TSlgCityCityInfoNotify::Clear() {
  if (_has_bits_[0 / 32] & 24) {
    if (has_freewarinfo()) {
      if (freewarinfo_ != NULL) freewarinfo_->::pb::TSlgCityFreeWarData::Clear();
    }
    if (has_walldurable()) {
      if (walldurable_ != NULL) walldurable_->::pb::TSlgCityWallDurableData::Clear();
    }
  }
  buildingarr_.Clear();
  appointarr_.Clear();
  queuearr_.Clear();
  timelimitedproparr_.Clear();
  activebuindingtidarr_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TSlgCityCityInfoNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TSlgCityCityInfoNotify)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .pb.TSlgCityBuildingData BuildingArr = 1;
      case 1: {
        if (tag == 10) {
         parse_BuildingArr:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_buildingarr()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_BuildingArr;
        if (input->ExpectTag(18)) goto parse_AppointArr;
        break;
      }

      // repeated .pb.TSlgCityBuildingAppointData AppointArr = 2;
      case 2: {
        if (tag == 18) {
         parse_AppointArr:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_appointarr()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_AppointArr;
        if (input->ExpectTag(26)) goto parse_QueueArr;
        break;
      }

      // repeated .pb.TSlgCityBuildingQueueData QueueArr = 3;
      case 3: {
        if (tag == 26) {
         parse_QueueArr:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_queuearr()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_QueueArr;
        if (input->ExpectTag(34)) goto parse_FreeWarInfo;
        break;
      }

      // optional .pb.TSlgCityFreeWarData FreeWarInfo = 4;
      case 4: {
        if (tag == 34) {
         parse_FreeWarInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_freewarinfo()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_WallDurable;
        break;
      }

      // optional .pb.TSlgCityWallDurableData WallDurable = 5;
      case 5: {
        if (tag == 42) {
         parse_WallDurable:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_walldurable()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_TimeLimitedPropArr;
        break;
      }

      // repeated .pb.TSlgCityTimeLimitedPropData TimeLimitedPropArr = 6;
      case 6: {
        if (tag == 50) {
         parse_TimeLimitedPropArr:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_timelimitedproparr()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_TimeLimitedPropArr;
        if (input->ExpectTag(56)) goto parse_ActiveBuindingtidArr;
        break;
      }

      // repeated uint32 ActiveBuindingtidArr = 7;
      case 7: {
        if (tag == 56) {
         parse_ActiveBuindingtidArr:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 56, input, this->mutable_activebuindingtidarr())));
        } else if (tag == 58) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_activebuindingtidarr())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_ActiveBuindingtidArr;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TSlgCityCityInfoNotify)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TSlgCityCityInfoNotify)
  return false;
#undef DO_
}

void TSlgCityCityInfoNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TSlgCityCityInfoNotify)
  // repeated .pb.TSlgCityBuildingData BuildingArr = 1;
  for (int i = 0; i < this->buildingarr_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->buildingarr(i), output);
  }

  // repeated .pb.TSlgCityBuildingAppointData AppointArr = 2;
  for (int i = 0; i < this->appointarr_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->appointarr(i), output);
  }

  // repeated .pb.TSlgCityBuildingQueueData QueueArr = 3;
  for (int i = 0; i < this->queuearr_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->queuearr(i), output);
  }

  // optional .pb.TSlgCityFreeWarData FreeWarInfo = 4;
  if (has_freewarinfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->freewarinfo(), output);
  }

  // optional .pb.TSlgCityWallDurableData WallDurable = 5;
  if (has_walldurable()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->walldurable(), output);
  }

  // repeated .pb.TSlgCityTimeLimitedPropData TimeLimitedPropArr = 6;
  for (int i = 0; i < this->timelimitedproparr_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->timelimitedproparr(i), output);
  }

  // repeated uint32 ActiveBuindingtidArr = 7;
  for (int i = 0; i < this->activebuindingtidarr_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      7, this->activebuindingtidarr(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TSlgCityCityInfoNotify)
}

::google::protobuf::uint8* TSlgCityCityInfoNotify::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TSlgCityCityInfoNotify)
  // repeated .pb.TSlgCityBuildingData BuildingArr = 1;
  for (int i = 0; i < this->buildingarr_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->buildingarr(i), target);
  }

  // repeated .pb.TSlgCityBuildingAppointData AppointArr = 2;
  for (int i = 0; i < this->appointarr_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->appointarr(i), target);
  }

  // repeated .pb.TSlgCityBuildingQueueData QueueArr = 3;
  for (int i = 0; i < this->queuearr_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->queuearr(i), target);
  }

  // optional .pb.TSlgCityFreeWarData FreeWarInfo = 4;
  if (has_freewarinfo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->freewarinfo(), target);
  }

  // optional .pb.TSlgCityWallDurableData WallDurable = 5;
  if (has_walldurable()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->walldurable(), target);
  }

  // repeated .pb.TSlgCityTimeLimitedPropData TimeLimitedPropArr = 6;
  for (int i = 0; i < this->timelimitedproparr_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->timelimitedproparr(i), target);
  }

  // repeated uint32 ActiveBuindingtidArr = 7;
  for (int i = 0; i < this->activebuindingtidarr_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(7, this->activebuindingtidarr(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TSlgCityCityInfoNotify)
  return target;
}

int TSlgCityCityInfoNotify::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[3 / 32] & (0xffu << (3 % 32))) {
    // optional .pb.TSlgCityFreeWarData FreeWarInfo = 4;
    if (has_freewarinfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->freewarinfo());
    }

    // optional .pb.TSlgCityWallDurableData WallDurable = 5;
    if (has_walldurable()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->walldurable());
    }

  }
  // repeated .pb.TSlgCityBuildingData BuildingArr = 1;
  total_size += 1 * this->buildingarr_size();
  for (int i = 0; i < this->buildingarr_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->buildingarr(i));
  }

  // repeated .pb.TSlgCityBuildingAppointData AppointArr = 2;
  total_size += 1 * this->appointarr_size();
  for (int i = 0; i < this->appointarr_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->appointarr(i));
  }

  // repeated .pb.TSlgCityBuildingQueueData QueueArr = 3;
  total_size += 1 * this->queuearr_size();
  for (int i = 0; i < this->queuearr_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->queuearr(i));
  }

  // repeated .pb.TSlgCityTimeLimitedPropData TimeLimitedPropArr = 6;
  total_size += 1 * this->timelimitedproparr_size();
  for (int i = 0; i < this->timelimitedproparr_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->timelimitedproparr(i));
  }

  // repeated uint32 ActiveBuindingtidArr = 7;
  {
    int data_size = 0;
    for (int i = 0; i < this->activebuindingtidarr_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->activebuindingtidarr(i));
    }
    total_size += 1 * this->activebuindingtidarr_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TSlgCityCityInfoNotify::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TSlgCityCityInfoNotify* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TSlgCityCityInfoNotify*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TSlgCityCityInfoNotify::MergeFrom(const TSlgCityCityInfoNotify& from) {
  GOOGLE_CHECK_NE(&from, this);
  buildingarr_.MergeFrom(from.buildingarr_);
  appointarr_.MergeFrom(from.appointarr_);
  queuearr_.MergeFrom(from.queuearr_);
  timelimitedproparr_.MergeFrom(from.timelimitedproparr_);
  activebuindingtidarr_.MergeFrom(from.activebuindingtidarr_);
  if (from._has_bits_[3 / 32] & (0xffu << (3 % 32))) {
    if (from.has_freewarinfo()) {
      mutable_freewarinfo()->::pb::TSlgCityFreeWarData::MergeFrom(from.freewarinfo());
    }
    if (from.has_walldurable()) {
      mutable_walldurable()->::pb::TSlgCityWallDurableData::MergeFrom(from.walldurable());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TSlgCityCityInfoNotify::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TSlgCityCityInfoNotify::CopyFrom(const TSlgCityCityInfoNotify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TSlgCityCityInfoNotify::IsInitialized() const {

  return true;
}

void TSlgCityCityInfoNotify::Swap(TSlgCityCityInfoNotify* other) {
  if (other != this) {
    buildingarr_.Swap(&other->buildingarr_);
    appointarr_.Swap(&other->appointarr_);
    queuearr_.Swap(&other->queuearr_);
    std::swap(freewarinfo_, other->freewarinfo_);
    std::swap(walldurable_, other->walldurable_);
    timelimitedproparr_.Swap(&other->timelimitedproparr_);
    activebuindingtidarr_.Swap(&other->activebuindingtidarr_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TSlgCityCityInfoNotify::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TSlgCityCityInfoNotify_descriptor_;
  metadata.reflection = TSlgCityCityInfoNotify_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TSlgCityLevelUpReq::kFoundationIdFieldNumber;
#endif  // !_MSC_VER

TSlgCityLevelUpReq::TSlgCityLevelUpReq()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TSlgCityLevelUpReq)
}

void TSlgCityLevelUpReq::InitAsDefaultInstance() {
}

TSlgCityLevelUpReq::TSlgCityLevelUpReq(const TSlgCityLevelUpReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TSlgCityLevelUpReq)
}

void TSlgCityLevelUpReq::SharedCtor() {
  _cached_size_ = 0;
  foundationid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TSlgCityLevelUpReq::~TSlgCityLevelUpReq() {
  // @@protoc_insertion_point(destructor:pb.TSlgCityLevelUpReq)
  SharedDtor();
}

void TSlgCityLevelUpReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TSlgCityLevelUpReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TSlgCityLevelUpReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TSlgCityLevelUpReq_descriptor_;
}

const TSlgCityLevelUpReq& TSlgCityLevelUpReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fSlgCity_2eproto();
  return *default_instance_;
}

TSlgCityLevelUpReq* TSlgCityLevelUpReq::default_instance_ = NULL;

TSlgCityLevelUpReq* TSlgCityLevelUpReq::New() const {
  return new TSlgCityLevelUpReq;
}

void TSlgCityLevelUpReq::Clear() {
  foundationid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TSlgCityLevelUpReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TSlgCityLevelUpReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 FoundationId = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &foundationid_)));
          set_has_foundationid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TSlgCityLevelUpReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TSlgCityLevelUpReq)
  return false;
#undef DO_
}

void TSlgCityLevelUpReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TSlgCityLevelUpReq)
  // optional uint32 FoundationId = 1;
  if (has_foundationid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->foundationid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TSlgCityLevelUpReq)
}

::google::protobuf::uint8* TSlgCityLevelUpReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TSlgCityLevelUpReq)
  // optional uint32 FoundationId = 1;
  if (has_foundationid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->foundationid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TSlgCityLevelUpReq)
  return target;
}

int TSlgCityLevelUpReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 FoundationId = 1;
    if (has_foundationid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->foundationid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TSlgCityLevelUpReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TSlgCityLevelUpReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TSlgCityLevelUpReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TSlgCityLevelUpReq::MergeFrom(const TSlgCityLevelUpReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_foundationid()) {
      set_foundationid(from.foundationid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TSlgCityLevelUpReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TSlgCityLevelUpReq::CopyFrom(const TSlgCityLevelUpReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TSlgCityLevelUpReq::IsInitialized() const {

  return true;
}

void TSlgCityLevelUpReq::Swap(TSlgCityLevelUpReq* other) {
  if (other != this) {
    std::swap(foundationid_, other->foundationid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TSlgCityLevelUpReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TSlgCityLevelUpReq_descriptor_;
  metadata.reflection = TSlgCityLevelUpReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TSlgCityReduceBuildQueueCDByItemReq::kBuildingQueueIdFieldNumber;
const int TSlgCityReduceBuildQueueCDByItemReq::kItemArrFieldNumber;
#endif  // !_MSC_VER

TSlgCityReduceBuildQueueCDByItemReq::TSlgCityReduceBuildQueueCDByItemReq()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TSlgCityReduceBuildQueueCDByItemReq)
}

void TSlgCityReduceBuildQueueCDByItemReq::InitAsDefaultInstance() {
}

TSlgCityReduceBuildQueueCDByItemReq::TSlgCityReduceBuildQueueCDByItemReq(const TSlgCityReduceBuildQueueCDByItemReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TSlgCityReduceBuildQueueCDByItemReq)
}

void TSlgCityReduceBuildQueueCDByItemReq::SharedCtor() {
  _cached_size_ = 0;
  buildingqueueid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TSlgCityReduceBuildQueueCDByItemReq::~TSlgCityReduceBuildQueueCDByItemReq() {
  // @@protoc_insertion_point(destructor:pb.TSlgCityReduceBuildQueueCDByItemReq)
  SharedDtor();
}

void TSlgCityReduceBuildQueueCDByItemReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TSlgCityReduceBuildQueueCDByItemReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TSlgCityReduceBuildQueueCDByItemReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TSlgCityReduceBuildQueueCDByItemReq_descriptor_;
}

const TSlgCityReduceBuildQueueCDByItemReq& TSlgCityReduceBuildQueueCDByItemReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fSlgCity_2eproto();
  return *default_instance_;
}

TSlgCityReduceBuildQueueCDByItemReq* TSlgCityReduceBuildQueueCDByItemReq::default_instance_ = NULL;

TSlgCityReduceBuildQueueCDByItemReq* TSlgCityReduceBuildQueueCDByItemReq::New() const {
  return new TSlgCityReduceBuildQueueCDByItemReq;
}

void TSlgCityReduceBuildQueueCDByItemReq::Clear() {
  buildingqueueid_ = 0u;
  itemarr_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TSlgCityReduceBuildQueueCDByItemReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TSlgCityReduceBuildQueueCDByItemReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 BuildingQueueId = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &buildingqueueid_)));
          set_has_buildingqueueid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_ItemArr;
        break;
      }

      // repeated .pb.TCommonReward ItemArr = 2;
      case 2: {
        if (tag == 18) {
         parse_ItemArr:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_itemarr()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_ItemArr;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TSlgCityReduceBuildQueueCDByItemReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TSlgCityReduceBuildQueueCDByItemReq)
  return false;
#undef DO_
}

void TSlgCityReduceBuildQueueCDByItemReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TSlgCityReduceBuildQueueCDByItemReq)
  // optional uint32 BuildingQueueId = 1;
  if (has_buildingqueueid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->buildingqueueid(), output);
  }

  // repeated .pb.TCommonReward ItemArr = 2;
  for (int i = 0; i < this->itemarr_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->itemarr(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TSlgCityReduceBuildQueueCDByItemReq)
}

::google::protobuf::uint8* TSlgCityReduceBuildQueueCDByItemReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TSlgCityReduceBuildQueueCDByItemReq)
  // optional uint32 BuildingQueueId = 1;
  if (has_buildingqueueid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->buildingqueueid(), target);
  }

  // repeated .pb.TCommonReward ItemArr = 2;
  for (int i = 0; i < this->itemarr_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->itemarr(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TSlgCityReduceBuildQueueCDByItemReq)
  return target;
}

int TSlgCityReduceBuildQueueCDByItemReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 BuildingQueueId = 1;
    if (has_buildingqueueid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->buildingqueueid());
    }

  }
  // repeated .pb.TCommonReward ItemArr = 2;
  total_size += 1 * this->itemarr_size();
  for (int i = 0; i < this->itemarr_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->itemarr(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TSlgCityReduceBuildQueueCDByItemReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TSlgCityReduceBuildQueueCDByItemReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TSlgCityReduceBuildQueueCDByItemReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TSlgCityReduceBuildQueueCDByItemReq::MergeFrom(const TSlgCityReduceBuildQueueCDByItemReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  itemarr_.MergeFrom(from.itemarr_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_buildingqueueid()) {
      set_buildingqueueid(from.buildingqueueid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TSlgCityReduceBuildQueueCDByItemReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TSlgCityReduceBuildQueueCDByItemReq::CopyFrom(const TSlgCityReduceBuildQueueCDByItemReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TSlgCityReduceBuildQueueCDByItemReq::IsInitialized() const {

  return true;
}

void TSlgCityReduceBuildQueueCDByItemReq::Swap(TSlgCityReduceBuildQueueCDByItemReq* other) {
  if (other != this) {
    std::swap(buildingqueueid_, other->buildingqueueid_);
    itemarr_.Swap(&other->itemarr_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TSlgCityReduceBuildQueueCDByItemReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TSlgCityReduceBuildQueueCDByItemReq_descriptor_;
  metadata.reflection = TSlgCityReduceBuildQueueCDByItemReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TSlgCityReduceBuildQueueAllCDByItemReq::kBuildingQueueIdFieldNumber;
#endif  // !_MSC_VER

TSlgCityReduceBuildQueueAllCDByItemReq::TSlgCityReduceBuildQueueAllCDByItemReq()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TSlgCityReduceBuildQueueAllCDByItemReq)
}

void TSlgCityReduceBuildQueueAllCDByItemReq::InitAsDefaultInstance() {
}

TSlgCityReduceBuildQueueAllCDByItemReq::TSlgCityReduceBuildQueueAllCDByItemReq(const TSlgCityReduceBuildQueueAllCDByItemReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TSlgCityReduceBuildQueueAllCDByItemReq)
}

void TSlgCityReduceBuildQueueAllCDByItemReq::SharedCtor() {
  _cached_size_ = 0;
  buildingqueueid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TSlgCityReduceBuildQueueAllCDByItemReq::~TSlgCityReduceBuildQueueAllCDByItemReq() {
  // @@protoc_insertion_point(destructor:pb.TSlgCityReduceBuildQueueAllCDByItemReq)
  SharedDtor();
}

void TSlgCityReduceBuildQueueAllCDByItemReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TSlgCityReduceBuildQueueAllCDByItemReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TSlgCityReduceBuildQueueAllCDByItemReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TSlgCityReduceBuildQueueAllCDByItemReq_descriptor_;
}

const TSlgCityReduceBuildQueueAllCDByItemReq& TSlgCityReduceBuildQueueAllCDByItemReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fSlgCity_2eproto();
  return *default_instance_;
}

TSlgCityReduceBuildQueueAllCDByItemReq* TSlgCityReduceBuildQueueAllCDByItemReq::default_instance_ = NULL;

TSlgCityReduceBuildQueueAllCDByItemReq* TSlgCityReduceBuildQueueAllCDByItemReq::New() const {
  return new TSlgCityReduceBuildQueueAllCDByItemReq;
}

void TSlgCityReduceBuildQueueAllCDByItemReq::Clear() {
  buildingqueueid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TSlgCityReduceBuildQueueAllCDByItemReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TSlgCityReduceBuildQueueAllCDByItemReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 BuildingQueueId = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &buildingqueueid_)));
          set_has_buildingqueueid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TSlgCityReduceBuildQueueAllCDByItemReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TSlgCityReduceBuildQueueAllCDByItemReq)
  return false;
#undef DO_
}

void TSlgCityReduceBuildQueueAllCDByItemReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TSlgCityReduceBuildQueueAllCDByItemReq)
  // optional uint32 BuildingQueueId = 1;
  if (has_buildingqueueid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->buildingqueueid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TSlgCityReduceBuildQueueAllCDByItemReq)
}

::google::protobuf::uint8* TSlgCityReduceBuildQueueAllCDByItemReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TSlgCityReduceBuildQueueAllCDByItemReq)
  // optional uint32 BuildingQueueId = 1;
  if (has_buildingqueueid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->buildingqueueid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TSlgCityReduceBuildQueueAllCDByItemReq)
  return target;
}

int TSlgCityReduceBuildQueueAllCDByItemReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 BuildingQueueId = 1;
    if (has_buildingqueueid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->buildingqueueid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TSlgCityReduceBuildQueueAllCDByItemReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TSlgCityReduceBuildQueueAllCDByItemReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TSlgCityReduceBuildQueueAllCDByItemReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TSlgCityReduceBuildQueueAllCDByItemReq::MergeFrom(const TSlgCityReduceBuildQueueAllCDByItemReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_buildingqueueid()) {
      set_buildingqueueid(from.buildingqueueid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TSlgCityReduceBuildQueueAllCDByItemReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TSlgCityReduceBuildQueueAllCDByItemReq::CopyFrom(const TSlgCityReduceBuildQueueAllCDByItemReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TSlgCityReduceBuildQueueAllCDByItemReq::IsInitialized() const {

  return true;
}

void TSlgCityReduceBuildQueueAllCDByItemReq::Swap(TSlgCityReduceBuildQueueAllCDByItemReq* other) {
  if (other != this) {
    std::swap(buildingqueueid_, other->buildingqueueid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TSlgCityReduceBuildQueueAllCDByItemReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TSlgCityReduceBuildQueueAllCDByItemReq_descriptor_;
  metadata.reflection = TSlgCityReduceBuildQueueAllCDByItemReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TSlgCityReduceBuildQueueCDByGoldReq::kBuildingQueueIdFieldNumber;
const int TSlgCityReduceBuildQueueCDByGoldReq::kGoldNumFieldNumber;
#endif  // !_MSC_VER

TSlgCityReduceBuildQueueCDByGoldReq::TSlgCityReduceBuildQueueCDByGoldReq()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TSlgCityReduceBuildQueueCDByGoldReq)
}

void TSlgCityReduceBuildQueueCDByGoldReq::InitAsDefaultInstance() {
}

TSlgCityReduceBuildQueueCDByGoldReq::TSlgCityReduceBuildQueueCDByGoldReq(const TSlgCityReduceBuildQueueCDByGoldReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TSlgCityReduceBuildQueueCDByGoldReq)
}

void TSlgCityReduceBuildQueueCDByGoldReq::SharedCtor() {
  _cached_size_ = 0;
  buildingqueueid_ = 0u;
  goldnum_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TSlgCityReduceBuildQueueCDByGoldReq::~TSlgCityReduceBuildQueueCDByGoldReq() {
  // @@protoc_insertion_point(destructor:pb.TSlgCityReduceBuildQueueCDByGoldReq)
  SharedDtor();
}

void TSlgCityReduceBuildQueueCDByGoldReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TSlgCityReduceBuildQueueCDByGoldReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TSlgCityReduceBuildQueueCDByGoldReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TSlgCityReduceBuildQueueCDByGoldReq_descriptor_;
}

const TSlgCityReduceBuildQueueCDByGoldReq& TSlgCityReduceBuildQueueCDByGoldReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fSlgCity_2eproto();
  return *default_instance_;
}

TSlgCityReduceBuildQueueCDByGoldReq* TSlgCityReduceBuildQueueCDByGoldReq::default_instance_ = NULL;

TSlgCityReduceBuildQueueCDByGoldReq* TSlgCityReduceBuildQueueCDByGoldReq::New() const {
  return new TSlgCityReduceBuildQueueCDByGoldReq;
}

void TSlgCityReduceBuildQueueCDByGoldReq::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<TSlgCityReduceBuildQueueCDByGoldReq*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(buildingqueueid_, goldnum_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TSlgCityReduceBuildQueueCDByGoldReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TSlgCityReduceBuildQueueCDByGoldReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 BuildingQueueId = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &buildingqueueid_)));
          set_has_buildingqueueid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_GoldNum;
        break;
      }

      // optional uint32 GoldNum = 2;
      case 2: {
        if (tag == 16) {
         parse_GoldNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &goldnum_)));
          set_has_goldnum();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TSlgCityReduceBuildQueueCDByGoldReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TSlgCityReduceBuildQueueCDByGoldReq)
  return false;
#undef DO_
}

void TSlgCityReduceBuildQueueCDByGoldReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TSlgCityReduceBuildQueueCDByGoldReq)
  // optional uint32 BuildingQueueId = 1;
  if (has_buildingqueueid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->buildingqueueid(), output);
  }

  // optional uint32 GoldNum = 2;
  if (has_goldnum()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->goldnum(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TSlgCityReduceBuildQueueCDByGoldReq)
}

::google::protobuf::uint8* TSlgCityReduceBuildQueueCDByGoldReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TSlgCityReduceBuildQueueCDByGoldReq)
  // optional uint32 BuildingQueueId = 1;
  if (has_buildingqueueid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->buildingqueueid(), target);
  }

  // optional uint32 GoldNum = 2;
  if (has_goldnum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->goldnum(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TSlgCityReduceBuildQueueCDByGoldReq)
  return target;
}

int TSlgCityReduceBuildQueueCDByGoldReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 BuildingQueueId = 1;
    if (has_buildingqueueid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->buildingqueueid());
    }

    // optional uint32 GoldNum = 2;
    if (has_goldnum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->goldnum());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TSlgCityReduceBuildQueueCDByGoldReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TSlgCityReduceBuildQueueCDByGoldReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TSlgCityReduceBuildQueueCDByGoldReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TSlgCityReduceBuildQueueCDByGoldReq::MergeFrom(const TSlgCityReduceBuildQueueCDByGoldReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_buildingqueueid()) {
      set_buildingqueueid(from.buildingqueueid());
    }
    if (from.has_goldnum()) {
      set_goldnum(from.goldnum());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TSlgCityReduceBuildQueueCDByGoldReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TSlgCityReduceBuildQueueCDByGoldReq::CopyFrom(const TSlgCityReduceBuildQueueCDByGoldReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TSlgCityReduceBuildQueueCDByGoldReq::IsInitialized() const {

  return true;
}

void TSlgCityReduceBuildQueueCDByGoldReq::Swap(TSlgCityReduceBuildQueueCDByGoldReq* other) {
  if (other != this) {
    std::swap(buildingqueueid_, other->buildingqueueid_);
    std::swap(goldnum_, other->goldnum_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TSlgCityReduceBuildQueueCDByGoldReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TSlgCityReduceBuildQueueCDByGoldReq_descriptor_;
  metadata.reflection = TSlgCityReduceBuildQueueCDByGoldReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TSlgCityReduceBuildQueueAllCDByGoldReq::kBuildingQueueIdFieldNumber;
#endif  // !_MSC_VER

TSlgCityReduceBuildQueueAllCDByGoldReq::TSlgCityReduceBuildQueueAllCDByGoldReq()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TSlgCityReduceBuildQueueAllCDByGoldReq)
}

void TSlgCityReduceBuildQueueAllCDByGoldReq::InitAsDefaultInstance() {
}

TSlgCityReduceBuildQueueAllCDByGoldReq::TSlgCityReduceBuildQueueAllCDByGoldReq(const TSlgCityReduceBuildQueueAllCDByGoldReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TSlgCityReduceBuildQueueAllCDByGoldReq)
}

void TSlgCityReduceBuildQueueAllCDByGoldReq::SharedCtor() {
  _cached_size_ = 0;
  buildingqueueid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TSlgCityReduceBuildQueueAllCDByGoldReq::~TSlgCityReduceBuildQueueAllCDByGoldReq() {
  // @@protoc_insertion_point(destructor:pb.TSlgCityReduceBuildQueueAllCDByGoldReq)
  SharedDtor();
}

void TSlgCityReduceBuildQueueAllCDByGoldReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TSlgCityReduceBuildQueueAllCDByGoldReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TSlgCityReduceBuildQueueAllCDByGoldReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TSlgCityReduceBuildQueueAllCDByGoldReq_descriptor_;
}

const TSlgCityReduceBuildQueueAllCDByGoldReq& TSlgCityReduceBuildQueueAllCDByGoldReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fSlgCity_2eproto();
  return *default_instance_;
}

TSlgCityReduceBuildQueueAllCDByGoldReq* TSlgCityReduceBuildQueueAllCDByGoldReq::default_instance_ = NULL;

TSlgCityReduceBuildQueueAllCDByGoldReq* TSlgCityReduceBuildQueueAllCDByGoldReq::New() const {
  return new TSlgCityReduceBuildQueueAllCDByGoldReq;
}

void TSlgCityReduceBuildQueueAllCDByGoldReq::Clear() {
  buildingqueueid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TSlgCityReduceBuildQueueAllCDByGoldReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TSlgCityReduceBuildQueueAllCDByGoldReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 BuildingQueueId = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &buildingqueueid_)));
          set_has_buildingqueueid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TSlgCityReduceBuildQueueAllCDByGoldReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TSlgCityReduceBuildQueueAllCDByGoldReq)
  return false;
#undef DO_
}

void TSlgCityReduceBuildQueueAllCDByGoldReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TSlgCityReduceBuildQueueAllCDByGoldReq)
  // optional uint32 BuildingQueueId = 1;
  if (has_buildingqueueid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->buildingqueueid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TSlgCityReduceBuildQueueAllCDByGoldReq)
}

::google::protobuf::uint8* TSlgCityReduceBuildQueueAllCDByGoldReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TSlgCityReduceBuildQueueAllCDByGoldReq)
  // optional uint32 BuildingQueueId = 1;
  if (has_buildingqueueid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->buildingqueueid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TSlgCityReduceBuildQueueAllCDByGoldReq)
  return target;
}

int TSlgCityReduceBuildQueueAllCDByGoldReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 BuildingQueueId = 1;
    if (has_buildingqueueid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->buildingqueueid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TSlgCityReduceBuildQueueAllCDByGoldReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TSlgCityReduceBuildQueueAllCDByGoldReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TSlgCityReduceBuildQueueAllCDByGoldReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TSlgCityReduceBuildQueueAllCDByGoldReq::MergeFrom(const TSlgCityReduceBuildQueueAllCDByGoldReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_buildingqueueid()) {
      set_buildingqueueid(from.buildingqueueid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TSlgCityReduceBuildQueueAllCDByGoldReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TSlgCityReduceBuildQueueAllCDByGoldReq::CopyFrom(const TSlgCityReduceBuildQueueAllCDByGoldReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TSlgCityReduceBuildQueueAllCDByGoldReq::IsInitialized() const {

  return true;
}

void TSlgCityReduceBuildQueueAllCDByGoldReq::Swap(TSlgCityReduceBuildQueueAllCDByGoldReq* other) {
  if (other != this) {
    std::swap(buildingqueueid_, other->buildingqueueid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TSlgCityReduceBuildQueueAllCDByGoldReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TSlgCityReduceBuildQueueAllCDByGoldReq_descriptor_;
  metadata.reflection = TSlgCityReduceBuildQueueAllCDByGoldReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TSlgCityReduceBuildQueueCDByGuildHelpReq::kBuildingQueueIdFieldNumber;
#endif  // !_MSC_VER

TSlgCityReduceBuildQueueCDByGuildHelpReq::TSlgCityReduceBuildQueueCDByGuildHelpReq()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TSlgCityReduceBuildQueueCDByGuildHelpReq)
}

void TSlgCityReduceBuildQueueCDByGuildHelpReq::InitAsDefaultInstance() {
}

TSlgCityReduceBuildQueueCDByGuildHelpReq::TSlgCityReduceBuildQueueCDByGuildHelpReq(const TSlgCityReduceBuildQueueCDByGuildHelpReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TSlgCityReduceBuildQueueCDByGuildHelpReq)
}

void TSlgCityReduceBuildQueueCDByGuildHelpReq::SharedCtor() {
  _cached_size_ = 0;
  buildingqueueid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TSlgCityReduceBuildQueueCDByGuildHelpReq::~TSlgCityReduceBuildQueueCDByGuildHelpReq() {
  // @@protoc_insertion_point(destructor:pb.TSlgCityReduceBuildQueueCDByGuildHelpReq)
  SharedDtor();
}

void TSlgCityReduceBuildQueueCDByGuildHelpReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TSlgCityReduceBuildQueueCDByGuildHelpReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TSlgCityReduceBuildQueueCDByGuildHelpReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TSlgCityReduceBuildQueueCDByGuildHelpReq_descriptor_;
}

const TSlgCityReduceBuildQueueCDByGuildHelpReq& TSlgCityReduceBuildQueueCDByGuildHelpReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fSlgCity_2eproto();
  return *default_instance_;
}

TSlgCityReduceBuildQueueCDByGuildHelpReq* TSlgCityReduceBuildQueueCDByGuildHelpReq::default_instance_ = NULL;

TSlgCityReduceBuildQueueCDByGuildHelpReq* TSlgCityReduceBuildQueueCDByGuildHelpReq::New() const {
  return new TSlgCityReduceBuildQueueCDByGuildHelpReq;
}

void TSlgCityReduceBuildQueueCDByGuildHelpReq::Clear() {
  buildingqueueid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TSlgCityReduceBuildQueueCDByGuildHelpReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TSlgCityReduceBuildQueueCDByGuildHelpReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 BuildingQueueId = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &buildingqueueid_)));
          set_has_buildingqueueid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TSlgCityReduceBuildQueueCDByGuildHelpReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TSlgCityReduceBuildQueueCDByGuildHelpReq)
  return false;
#undef DO_
}

void TSlgCityReduceBuildQueueCDByGuildHelpReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TSlgCityReduceBuildQueueCDByGuildHelpReq)
  // optional uint32 BuildingQueueId = 1;
  if (has_buildingqueueid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->buildingqueueid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TSlgCityReduceBuildQueueCDByGuildHelpReq)
}

::google::protobuf::uint8* TSlgCityReduceBuildQueueCDByGuildHelpReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TSlgCityReduceBuildQueueCDByGuildHelpReq)
  // optional uint32 BuildingQueueId = 1;
  if (has_buildingqueueid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->buildingqueueid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TSlgCityReduceBuildQueueCDByGuildHelpReq)
  return target;
}

int TSlgCityReduceBuildQueueCDByGuildHelpReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 BuildingQueueId = 1;
    if (has_buildingqueueid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->buildingqueueid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TSlgCityReduceBuildQueueCDByGuildHelpReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TSlgCityReduceBuildQueueCDByGuildHelpReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TSlgCityReduceBuildQueueCDByGuildHelpReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TSlgCityReduceBuildQueueCDByGuildHelpReq::MergeFrom(const TSlgCityReduceBuildQueueCDByGuildHelpReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_buildingqueueid()) {
      set_buildingqueueid(from.buildingqueueid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TSlgCityReduceBuildQueueCDByGuildHelpReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TSlgCityReduceBuildQueueCDByGuildHelpReq::CopyFrom(const TSlgCityReduceBuildQueueCDByGuildHelpReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TSlgCityReduceBuildQueueCDByGuildHelpReq::IsInitialized() const {

  return true;
}

void TSlgCityReduceBuildQueueCDByGuildHelpReq::Swap(TSlgCityReduceBuildQueueCDByGuildHelpReq* other) {
  if (other != this) {
    std::swap(buildingqueueid_, other->buildingqueueid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TSlgCityReduceBuildQueueCDByGuildHelpReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TSlgCityReduceBuildQueueCDByGuildHelpReq_descriptor_;
  metadata.reflection = TSlgCityReduceBuildQueueCDByGuildHelpReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TSlgCityReduceBuildQueueCDFreepReq::kBuildingQueueIdFieldNumber;
#endif  // !_MSC_VER

TSlgCityReduceBuildQueueCDFreepReq::TSlgCityReduceBuildQueueCDFreepReq()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TSlgCityReduceBuildQueueCDFreepReq)
}

void TSlgCityReduceBuildQueueCDFreepReq::InitAsDefaultInstance() {
}

TSlgCityReduceBuildQueueCDFreepReq::TSlgCityReduceBuildQueueCDFreepReq(const TSlgCityReduceBuildQueueCDFreepReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TSlgCityReduceBuildQueueCDFreepReq)
}

void TSlgCityReduceBuildQueueCDFreepReq::SharedCtor() {
  _cached_size_ = 0;
  buildingqueueid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TSlgCityReduceBuildQueueCDFreepReq::~TSlgCityReduceBuildQueueCDFreepReq() {
  // @@protoc_insertion_point(destructor:pb.TSlgCityReduceBuildQueueCDFreepReq)
  SharedDtor();
}

void TSlgCityReduceBuildQueueCDFreepReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TSlgCityReduceBuildQueueCDFreepReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TSlgCityReduceBuildQueueCDFreepReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TSlgCityReduceBuildQueueCDFreepReq_descriptor_;
}

const TSlgCityReduceBuildQueueCDFreepReq& TSlgCityReduceBuildQueueCDFreepReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fSlgCity_2eproto();
  return *default_instance_;
}

TSlgCityReduceBuildQueueCDFreepReq* TSlgCityReduceBuildQueueCDFreepReq::default_instance_ = NULL;

TSlgCityReduceBuildQueueCDFreepReq* TSlgCityReduceBuildQueueCDFreepReq::New() const {
  return new TSlgCityReduceBuildQueueCDFreepReq;
}

void TSlgCityReduceBuildQueueCDFreepReq::Clear() {
  buildingqueueid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TSlgCityReduceBuildQueueCDFreepReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TSlgCityReduceBuildQueueCDFreepReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 BuildingQueueId = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &buildingqueueid_)));
          set_has_buildingqueueid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TSlgCityReduceBuildQueueCDFreepReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TSlgCityReduceBuildQueueCDFreepReq)
  return false;
#undef DO_
}

void TSlgCityReduceBuildQueueCDFreepReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TSlgCityReduceBuildQueueCDFreepReq)
  // optional uint32 BuildingQueueId = 1;
  if (has_buildingqueueid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->buildingqueueid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TSlgCityReduceBuildQueueCDFreepReq)
}

::google::protobuf::uint8* TSlgCityReduceBuildQueueCDFreepReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TSlgCityReduceBuildQueueCDFreepReq)
  // optional uint32 BuildingQueueId = 1;
  if (has_buildingqueueid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->buildingqueueid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TSlgCityReduceBuildQueueCDFreepReq)
  return target;
}

int TSlgCityReduceBuildQueueCDFreepReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 BuildingQueueId = 1;
    if (has_buildingqueueid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->buildingqueueid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TSlgCityReduceBuildQueueCDFreepReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TSlgCityReduceBuildQueueCDFreepReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TSlgCityReduceBuildQueueCDFreepReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TSlgCityReduceBuildQueueCDFreepReq::MergeFrom(const TSlgCityReduceBuildQueueCDFreepReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_buildingqueueid()) {
      set_buildingqueueid(from.buildingqueueid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TSlgCityReduceBuildQueueCDFreepReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TSlgCityReduceBuildQueueCDFreepReq::CopyFrom(const TSlgCityReduceBuildQueueCDFreepReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TSlgCityReduceBuildQueueCDFreepReq::IsInitialized() const {

  return true;
}

void TSlgCityReduceBuildQueueCDFreepReq::Swap(TSlgCityReduceBuildQueueCDFreepReq* other) {
  if (other != this) {
    std::swap(buildingqueueid_, other->buildingqueueid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TSlgCityReduceBuildQueueCDFreepReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TSlgCityReduceBuildQueueCDFreepReq_descriptor_;
  metadata.reflection = TSlgCityReduceBuildQueueCDFreepReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TSlgCityUnlockBuildingReq::kFoundationIdFieldNumber;
#endif  // !_MSC_VER

TSlgCityUnlockBuildingReq::TSlgCityUnlockBuildingReq()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TSlgCityUnlockBuildingReq)
}

void TSlgCityUnlockBuildingReq::InitAsDefaultInstance() {
}

TSlgCityUnlockBuildingReq::TSlgCityUnlockBuildingReq(const TSlgCityUnlockBuildingReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TSlgCityUnlockBuildingReq)
}

void TSlgCityUnlockBuildingReq::SharedCtor() {
  _cached_size_ = 0;
  foundationid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TSlgCityUnlockBuildingReq::~TSlgCityUnlockBuildingReq() {
  // @@protoc_insertion_point(destructor:pb.TSlgCityUnlockBuildingReq)
  SharedDtor();
}

void TSlgCityUnlockBuildingReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TSlgCityUnlockBuildingReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TSlgCityUnlockBuildingReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TSlgCityUnlockBuildingReq_descriptor_;
}

const TSlgCityUnlockBuildingReq& TSlgCityUnlockBuildingReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fSlgCity_2eproto();
  return *default_instance_;
}

TSlgCityUnlockBuildingReq* TSlgCityUnlockBuildingReq::default_instance_ = NULL;

TSlgCityUnlockBuildingReq* TSlgCityUnlockBuildingReq::New() const {
  return new TSlgCityUnlockBuildingReq;
}

void TSlgCityUnlockBuildingReq::Clear() {
  foundationid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TSlgCityUnlockBuildingReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TSlgCityUnlockBuildingReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 FoundationId = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &foundationid_)));
          set_has_foundationid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TSlgCityUnlockBuildingReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TSlgCityUnlockBuildingReq)
  return false;
#undef DO_
}

void TSlgCityUnlockBuildingReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TSlgCityUnlockBuildingReq)
  // optional uint32 FoundationId = 1;
  if (has_foundationid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->foundationid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TSlgCityUnlockBuildingReq)
}

::google::protobuf::uint8* TSlgCityUnlockBuildingReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TSlgCityUnlockBuildingReq)
  // optional uint32 FoundationId = 1;
  if (has_foundationid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->foundationid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TSlgCityUnlockBuildingReq)
  return target;
}

int TSlgCityUnlockBuildingReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 FoundationId = 1;
    if (has_foundationid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->foundationid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TSlgCityUnlockBuildingReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TSlgCityUnlockBuildingReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TSlgCityUnlockBuildingReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TSlgCityUnlockBuildingReq::MergeFrom(const TSlgCityUnlockBuildingReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_foundationid()) {
      set_foundationid(from.foundationid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TSlgCityUnlockBuildingReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TSlgCityUnlockBuildingReq::CopyFrom(const TSlgCityUnlockBuildingReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TSlgCityUnlockBuildingReq::IsInitialized() const {

  return true;
}

void TSlgCityUnlockBuildingReq::Swap(TSlgCityUnlockBuildingReq* other) {
  if (other != this) {
    std::swap(foundationid_, other->foundationid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TSlgCityUnlockBuildingReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TSlgCityUnlockBuildingReq_descriptor_;
  metadata.reflection = TSlgCityUnlockBuildingReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TSlgCityBuildBuildingReq::kFoundationIdFieldNumber;
#endif  // !_MSC_VER

TSlgCityBuildBuildingReq::TSlgCityBuildBuildingReq()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TSlgCityBuildBuildingReq)
}

void TSlgCityBuildBuildingReq::InitAsDefaultInstance() {
}

TSlgCityBuildBuildingReq::TSlgCityBuildBuildingReq(const TSlgCityBuildBuildingReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TSlgCityBuildBuildingReq)
}

void TSlgCityBuildBuildingReq::SharedCtor() {
  _cached_size_ = 0;
  foundationid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TSlgCityBuildBuildingReq::~TSlgCityBuildBuildingReq() {
  // @@protoc_insertion_point(destructor:pb.TSlgCityBuildBuildingReq)
  SharedDtor();
}

void TSlgCityBuildBuildingReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TSlgCityBuildBuildingReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TSlgCityBuildBuildingReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TSlgCityBuildBuildingReq_descriptor_;
}

const TSlgCityBuildBuildingReq& TSlgCityBuildBuildingReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fSlgCity_2eproto();
  return *default_instance_;
}

TSlgCityBuildBuildingReq* TSlgCityBuildBuildingReq::default_instance_ = NULL;

TSlgCityBuildBuildingReq* TSlgCityBuildBuildingReq::New() const {
  return new TSlgCityBuildBuildingReq;
}

void TSlgCityBuildBuildingReq::Clear() {
  foundationid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TSlgCityBuildBuildingReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TSlgCityBuildBuildingReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 FoundationId = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &foundationid_)));
          set_has_foundationid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TSlgCityBuildBuildingReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TSlgCityBuildBuildingReq)
  return false;
#undef DO_
}

void TSlgCityBuildBuildingReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TSlgCityBuildBuildingReq)
  // optional uint32 FoundationId = 1;
  if (has_foundationid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->foundationid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TSlgCityBuildBuildingReq)
}

::google::protobuf::uint8* TSlgCityBuildBuildingReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TSlgCityBuildBuildingReq)
  // optional uint32 FoundationId = 1;
  if (has_foundationid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->foundationid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TSlgCityBuildBuildingReq)
  return target;
}

int TSlgCityBuildBuildingReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 FoundationId = 1;
    if (has_foundationid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->foundationid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TSlgCityBuildBuildingReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TSlgCityBuildBuildingReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TSlgCityBuildBuildingReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TSlgCityBuildBuildingReq::MergeFrom(const TSlgCityBuildBuildingReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_foundationid()) {
      set_foundationid(from.foundationid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TSlgCityBuildBuildingReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TSlgCityBuildBuildingReq::CopyFrom(const TSlgCityBuildBuildingReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TSlgCityBuildBuildingReq::IsInitialized() const {

  return true;
}

void TSlgCityBuildBuildingReq::Swap(TSlgCityBuildBuildingReq* other) {
  if (other != this) {
    std::swap(foundationid_, other->foundationid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TSlgCityBuildBuildingReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TSlgCityBuildBuildingReq_descriptor_;
  metadata.reflection = TSlgCityBuildBuildingReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TSlgCityFreeWarReq::kPropTidFieldNumber;
#endif  // !_MSC_VER

TSlgCityFreeWarReq::TSlgCityFreeWarReq()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TSlgCityFreeWarReq)
}

void TSlgCityFreeWarReq::InitAsDefaultInstance() {
}

TSlgCityFreeWarReq::TSlgCityFreeWarReq(const TSlgCityFreeWarReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TSlgCityFreeWarReq)
}

void TSlgCityFreeWarReq::SharedCtor() {
  _cached_size_ = 0;
  proptid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TSlgCityFreeWarReq::~TSlgCityFreeWarReq() {
  // @@protoc_insertion_point(destructor:pb.TSlgCityFreeWarReq)
  SharedDtor();
}

void TSlgCityFreeWarReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TSlgCityFreeWarReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TSlgCityFreeWarReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TSlgCityFreeWarReq_descriptor_;
}

const TSlgCityFreeWarReq& TSlgCityFreeWarReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fSlgCity_2eproto();
  return *default_instance_;
}

TSlgCityFreeWarReq* TSlgCityFreeWarReq::default_instance_ = NULL;

TSlgCityFreeWarReq* TSlgCityFreeWarReq::New() const {
  return new TSlgCityFreeWarReq;
}

void TSlgCityFreeWarReq::Clear() {
  proptid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TSlgCityFreeWarReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TSlgCityFreeWarReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 PropTid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &proptid_)));
          set_has_proptid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TSlgCityFreeWarReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TSlgCityFreeWarReq)
  return false;
#undef DO_
}

void TSlgCityFreeWarReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TSlgCityFreeWarReq)
  // optional uint32 PropTid = 1;
  if (has_proptid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->proptid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TSlgCityFreeWarReq)
}

::google::protobuf::uint8* TSlgCityFreeWarReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TSlgCityFreeWarReq)
  // optional uint32 PropTid = 1;
  if (has_proptid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->proptid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TSlgCityFreeWarReq)
  return target;
}

int TSlgCityFreeWarReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 PropTid = 1;
    if (has_proptid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->proptid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TSlgCityFreeWarReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TSlgCityFreeWarReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TSlgCityFreeWarReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TSlgCityFreeWarReq::MergeFrom(const TSlgCityFreeWarReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_proptid()) {
      set_proptid(from.proptid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TSlgCityFreeWarReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TSlgCityFreeWarReq::CopyFrom(const TSlgCityFreeWarReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TSlgCityFreeWarReq::IsInitialized() const {

  return true;
}

void TSlgCityFreeWarReq::Swap(TSlgCityFreeWarReq* other) {
  if (other != this) {
    std::swap(proptid_, other->proptid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TSlgCityFreeWarReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TSlgCityFreeWarReq_descriptor_;
  metadata.reflection = TSlgCityFreeWarReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TSlgCityAppointHeroReq::kBuildingTidFieldNumber;
const int TSlgCityAppointHeroReq::kHeroTidFieldNumber;
#endif  // !_MSC_VER

TSlgCityAppointHeroReq::TSlgCityAppointHeroReq()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TSlgCityAppointHeroReq)
}

void TSlgCityAppointHeroReq::InitAsDefaultInstance() {
}

TSlgCityAppointHeroReq::TSlgCityAppointHeroReq(const TSlgCityAppointHeroReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TSlgCityAppointHeroReq)
}

void TSlgCityAppointHeroReq::SharedCtor() {
  _cached_size_ = 0;
  buildingtid_ = 0u;
  herotid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TSlgCityAppointHeroReq::~TSlgCityAppointHeroReq() {
  // @@protoc_insertion_point(destructor:pb.TSlgCityAppointHeroReq)
  SharedDtor();
}

void TSlgCityAppointHeroReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TSlgCityAppointHeroReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TSlgCityAppointHeroReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TSlgCityAppointHeroReq_descriptor_;
}

const TSlgCityAppointHeroReq& TSlgCityAppointHeroReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fSlgCity_2eproto();
  return *default_instance_;
}

TSlgCityAppointHeroReq* TSlgCityAppointHeroReq::default_instance_ = NULL;

TSlgCityAppointHeroReq* TSlgCityAppointHeroReq::New() const {
  return new TSlgCityAppointHeroReq;
}

void TSlgCityAppointHeroReq::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<TSlgCityAppointHeroReq*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(buildingtid_, herotid_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TSlgCityAppointHeroReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TSlgCityAppointHeroReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 BuildingTid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &buildingtid_)));
          set_has_buildingtid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_HeroTid;
        break;
      }

      // optional uint32 HeroTid = 2;
      case 2: {
        if (tag == 16) {
         parse_HeroTid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &herotid_)));
          set_has_herotid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TSlgCityAppointHeroReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TSlgCityAppointHeroReq)
  return false;
#undef DO_
}

void TSlgCityAppointHeroReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TSlgCityAppointHeroReq)
  // optional uint32 BuildingTid = 1;
  if (has_buildingtid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->buildingtid(), output);
  }

  // optional uint32 HeroTid = 2;
  if (has_herotid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->herotid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TSlgCityAppointHeroReq)
}

::google::protobuf::uint8* TSlgCityAppointHeroReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TSlgCityAppointHeroReq)
  // optional uint32 BuildingTid = 1;
  if (has_buildingtid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->buildingtid(), target);
  }

  // optional uint32 HeroTid = 2;
  if (has_herotid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->herotid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TSlgCityAppointHeroReq)
  return target;
}

int TSlgCityAppointHeroReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 BuildingTid = 1;
    if (has_buildingtid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->buildingtid());
    }

    // optional uint32 HeroTid = 2;
    if (has_herotid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->herotid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TSlgCityAppointHeroReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TSlgCityAppointHeroReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TSlgCityAppointHeroReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TSlgCityAppointHeroReq::MergeFrom(const TSlgCityAppointHeroReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_buildingtid()) {
      set_buildingtid(from.buildingtid());
    }
    if (from.has_herotid()) {
      set_herotid(from.herotid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TSlgCityAppointHeroReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TSlgCityAppointHeroReq::CopyFrom(const TSlgCityAppointHeroReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TSlgCityAppointHeroReq::IsInitialized() const {

  return true;
}

void TSlgCityAppointHeroReq::Swap(TSlgCityAppointHeroReq* other) {
  if (other != this) {
    std::swap(buildingtid_, other->buildingtid_);
    std::swap(herotid_, other->herotid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TSlgCityAppointHeroReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TSlgCityAppointHeroReq_descriptor_;
  metadata.reflection = TSlgCityAppointHeroReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TSlgCityRelieveAppointHeroReq::kBuildingTidFieldNumber;
#endif  // !_MSC_VER

TSlgCityRelieveAppointHeroReq::TSlgCityRelieveAppointHeroReq()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TSlgCityRelieveAppointHeroReq)
}

void TSlgCityRelieveAppointHeroReq::InitAsDefaultInstance() {
}

TSlgCityRelieveAppointHeroReq::TSlgCityRelieveAppointHeroReq(const TSlgCityRelieveAppointHeroReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TSlgCityRelieveAppointHeroReq)
}

void TSlgCityRelieveAppointHeroReq::SharedCtor() {
  _cached_size_ = 0;
  buildingtid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TSlgCityRelieveAppointHeroReq::~TSlgCityRelieveAppointHeroReq() {
  // @@protoc_insertion_point(destructor:pb.TSlgCityRelieveAppointHeroReq)
  SharedDtor();
}

void TSlgCityRelieveAppointHeroReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TSlgCityRelieveAppointHeroReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TSlgCityRelieveAppointHeroReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TSlgCityRelieveAppointHeroReq_descriptor_;
}

const TSlgCityRelieveAppointHeroReq& TSlgCityRelieveAppointHeroReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fSlgCity_2eproto();
  return *default_instance_;
}

TSlgCityRelieveAppointHeroReq* TSlgCityRelieveAppointHeroReq::default_instance_ = NULL;

TSlgCityRelieveAppointHeroReq* TSlgCityRelieveAppointHeroReq::New() const {
  return new TSlgCityRelieveAppointHeroReq;
}

void TSlgCityRelieveAppointHeroReq::Clear() {
  buildingtid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TSlgCityRelieveAppointHeroReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TSlgCityRelieveAppointHeroReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 BuildingTid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &buildingtid_)));
          set_has_buildingtid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TSlgCityRelieveAppointHeroReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TSlgCityRelieveAppointHeroReq)
  return false;
#undef DO_
}

void TSlgCityRelieveAppointHeroReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TSlgCityRelieveAppointHeroReq)
  // optional uint32 BuildingTid = 1;
  if (has_buildingtid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->buildingtid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TSlgCityRelieveAppointHeroReq)
}

::google::protobuf::uint8* TSlgCityRelieveAppointHeroReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TSlgCityRelieveAppointHeroReq)
  // optional uint32 BuildingTid = 1;
  if (has_buildingtid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->buildingtid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TSlgCityRelieveAppointHeroReq)
  return target;
}

int TSlgCityRelieveAppointHeroReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 BuildingTid = 1;
    if (has_buildingtid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->buildingtid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TSlgCityRelieveAppointHeroReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TSlgCityRelieveAppointHeroReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TSlgCityRelieveAppointHeroReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TSlgCityRelieveAppointHeroReq::MergeFrom(const TSlgCityRelieveAppointHeroReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_buildingtid()) {
      set_buildingtid(from.buildingtid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TSlgCityRelieveAppointHeroReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TSlgCityRelieveAppointHeroReq::CopyFrom(const TSlgCityRelieveAppointHeroReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TSlgCityRelieveAppointHeroReq::IsInitialized() const {

  return true;
}

void TSlgCityRelieveAppointHeroReq::Swap(TSlgCityRelieveAppointHeroReq* other) {
  if (other != this) {
    std::swap(buildingtid_, other->buildingtid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TSlgCityRelieveAppointHeroReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TSlgCityRelieveAppointHeroReq_descriptor_;
  metadata.reflection = TSlgCityRelieveAppointHeroReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TSlgCityUseTimeLimitedPropReq::kPropTidFieldNumber;
#endif  // !_MSC_VER

TSlgCityUseTimeLimitedPropReq::TSlgCityUseTimeLimitedPropReq()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TSlgCityUseTimeLimitedPropReq)
}

void TSlgCityUseTimeLimitedPropReq::InitAsDefaultInstance() {
}

TSlgCityUseTimeLimitedPropReq::TSlgCityUseTimeLimitedPropReq(const TSlgCityUseTimeLimitedPropReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TSlgCityUseTimeLimitedPropReq)
}

void TSlgCityUseTimeLimitedPropReq::SharedCtor() {
  _cached_size_ = 0;
  proptid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TSlgCityUseTimeLimitedPropReq::~TSlgCityUseTimeLimitedPropReq() {
  // @@protoc_insertion_point(destructor:pb.TSlgCityUseTimeLimitedPropReq)
  SharedDtor();
}

void TSlgCityUseTimeLimitedPropReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TSlgCityUseTimeLimitedPropReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TSlgCityUseTimeLimitedPropReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TSlgCityUseTimeLimitedPropReq_descriptor_;
}

const TSlgCityUseTimeLimitedPropReq& TSlgCityUseTimeLimitedPropReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fSlgCity_2eproto();
  return *default_instance_;
}

TSlgCityUseTimeLimitedPropReq* TSlgCityUseTimeLimitedPropReq::default_instance_ = NULL;

TSlgCityUseTimeLimitedPropReq* TSlgCityUseTimeLimitedPropReq::New() const {
  return new TSlgCityUseTimeLimitedPropReq;
}

void TSlgCityUseTimeLimitedPropReq::Clear() {
  proptid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TSlgCityUseTimeLimitedPropReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TSlgCityUseTimeLimitedPropReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 PropTid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &proptid_)));
          set_has_proptid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TSlgCityUseTimeLimitedPropReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TSlgCityUseTimeLimitedPropReq)
  return false;
#undef DO_
}

void TSlgCityUseTimeLimitedPropReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TSlgCityUseTimeLimitedPropReq)
  // optional uint32 PropTid = 1;
  if (has_proptid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->proptid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TSlgCityUseTimeLimitedPropReq)
}

::google::protobuf::uint8* TSlgCityUseTimeLimitedPropReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TSlgCityUseTimeLimitedPropReq)
  // optional uint32 PropTid = 1;
  if (has_proptid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->proptid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TSlgCityUseTimeLimitedPropReq)
  return target;
}

int TSlgCityUseTimeLimitedPropReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 PropTid = 1;
    if (has_proptid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->proptid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TSlgCityUseTimeLimitedPropReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TSlgCityUseTimeLimitedPropReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TSlgCityUseTimeLimitedPropReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TSlgCityUseTimeLimitedPropReq::MergeFrom(const TSlgCityUseTimeLimitedPropReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_proptid()) {
      set_proptid(from.proptid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TSlgCityUseTimeLimitedPropReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TSlgCityUseTimeLimitedPropReq::CopyFrom(const TSlgCityUseTimeLimitedPropReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TSlgCityUseTimeLimitedPropReq::IsInitialized() const {

  return true;
}

void TSlgCityUseTimeLimitedPropReq::Swap(TSlgCityUseTimeLimitedPropReq* other) {
  if (other != this) {
    std::swap(proptid_, other->proptid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TSlgCityUseTimeLimitedPropReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TSlgCityUseTimeLimitedPropReq_descriptor_;
  metadata.reflection = TSlgCityUseTimeLimitedPropReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TSlgCityActiveHeroPropertyReq::kBuildingTidFieldNumber;
#endif  // !_MSC_VER

TSlgCityActiveHeroPropertyReq::TSlgCityActiveHeroPropertyReq()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TSlgCityActiveHeroPropertyReq)
}

void TSlgCityActiveHeroPropertyReq::InitAsDefaultInstance() {
}

TSlgCityActiveHeroPropertyReq::TSlgCityActiveHeroPropertyReq(const TSlgCityActiveHeroPropertyReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TSlgCityActiveHeroPropertyReq)
}

void TSlgCityActiveHeroPropertyReq::SharedCtor() {
  _cached_size_ = 0;
  buildingtid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TSlgCityActiveHeroPropertyReq::~TSlgCityActiveHeroPropertyReq() {
  // @@protoc_insertion_point(destructor:pb.TSlgCityActiveHeroPropertyReq)
  SharedDtor();
}

void TSlgCityActiveHeroPropertyReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TSlgCityActiveHeroPropertyReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TSlgCityActiveHeroPropertyReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TSlgCityActiveHeroPropertyReq_descriptor_;
}

const TSlgCityActiveHeroPropertyReq& TSlgCityActiveHeroPropertyReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fSlgCity_2eproto();
  return *default_instance_;
}

TSlgCityActiveHeroPropertyReq* TSlgCityActiveHeroPropertyReq::default_instance_ = NULL;

TSlgCityActiveHeroPropertyReq* TSlgCityActiveHeroPropertyReq::New() const {
  return new TSlgCityActiveHeroPropertyReq;
}

void TSlgCityActiveHeroPropertyReq::Clear() {
  buildingtid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TSlgCityActiveHeroPropertyReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TSlgCityActiveHeroPropertyReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 BuildingTid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &buildingtid_)));
          set_has_buildingtid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TSlgCityActiveHeroPropertyReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TSlgCityActiveHeroPropertyReq)
  return false;
#undef DO_
}

void TSlgCityActiveHeroPropertyReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TSlgCityActiveHeroPropertyReq)
  // optional uint32 BuildingTid = 1;
  if (has_buildingtid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->buildingtid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TSlgCityActiveHeroPropertyReq)
}

::google::protobuf::uint8* TSlgCityActiveHeroPropertyReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TSlgCityActiveHeroPropertyReq)
  // optional uint32 BuildingTid = 1;
  if (has_buildingtid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->buildingtid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TSlgCityActiveHeroPropertyReq)
  return target;
}

int TSlgCityActiveHeroPropertyReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 BuildingTid = 1;
    if (has_buildingtid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->buildingtid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TSlgCityActiveHeroPropertyReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TSlgCityActiveHeroPropertyReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TSlgCityActiveHeroPropertyReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TSlgCityActiveHeroPropertyReq::MergeFrom(const TSlgCityActiveHeroPropertyReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_buildingtid()) {
      set_buildingtid(from.buildingtid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TSlgCityActiveHeroPropertyReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TSlgCityActiveHeroPropertyReq::CopyFrom(const TSlgCityActiveHeroPropertyReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TSlgCityActiveHeroPropertyReq::IsInitialized() const {

  return true;
}

void TSlgCityActiveHeroPropertyReq::Swap(TSlgCityActiveHeroPropertyReq* other) {
  if (other != this) {
    std::swap(buildingtid_, other->buildingtid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TSlgCityActiveHeroPropertyReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TSlgCityActiveHeroPropertyReq_descriptor_;
  metadata.reflection = TSlgCityActiveHeroPropertyReq_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace pb

// @@protoc_insertion_point(global_scope)
