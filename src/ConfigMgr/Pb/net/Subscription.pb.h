// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: net/Subscription.proto

#ifndef PROTOBUF_net_2fSubscription_2eproto__INCLUDED
#define PROTOBUF_net_2fSubscription_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
#include "net/CommonReward.pb.h"
// @@protoc_insertion_point(includes)

namespace pb {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_net_2fSubscription_2eproto();
void protobuf_AssignDesc_net_2fSubscription_2eproto();
void protobuf_ShutdownFile_net_2fSubscription_2eproto();

class TSubscriptionGetSubscriptionInfoRsp;
class TSubscriptionReceiveRewardRsp;
class TSubscriptionPush;

// ===================================================================

/*FOR2LUA
<Record>
	<name>TSubscriptionGetSubscriptionInfoRsp</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/Subscription.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TSubscriptionGetSubscriptionInfoRsp : public ::google::protobuf::Message {
 public:
  TSubscriptionGetSubscriptionInfoRsp();
  virtual ~TSubscriptionGetSubscriptionInfoRsp();

  TSubscriptionGetSubscriptionInfoRsp(const TSubscriptionGetSubscriptionInfoRsp& from);

  inline TSubscriptionGetSubscriptionInfoRsp& operator=(const TSubscriptionGetSubscriptionInfoRsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TSubscriptionGetSubscriptionInfoRsp& default_instance();

  void Swap(TSubscriptionGetSubscriptionInfoRsp* other);

  // implements Message ----------------------------------------------

  TSubscriptionGetSubscriptionInfoRsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TSubscriptionGetSubscriptionInfoRsp& from);
  void MergeFrom(const TSubscriptionGetSubscriptionInfoRsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint64 PayTime = 1;
  inline bool has_paytime() const;
  inline void clear_paytime();
  static const int kPayTimeFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TSubscriptionGetSubscriptionInfoRsp</name>
  	<Function>
  		<name>paytime</name>
  		<replaceName>PayTime</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_paytime</name>
  		<replaceName>PayTime</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_paytime</name>
  		<replaceName>PayTime</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint64 paytime() const;
  inline void set_paytime(::google::protobuf::uint64 value);

  // optional uint64 RewardTime = 2;
  inline bool has_rewardtime() const;
  inline void clear_rewardtime();
  static const int kRewardTimeFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TSubscriptionGetSubscriptionInfoRsp</name>
  	<Function>
  		<name>rewardtime</name>
  		<replaceName>RewardTime</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_rewardtime</name>
  		<replaceName>RewardTime</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_rewardtime</name>
  		<replaceName>RewardTime</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint64 rewardtime() const;
  inline void set_rewardtime(::google::protobuf::uint64 value);

  // optional uint64 EndTime = 3;
  inline bool has_endtime() const;
  inline void clear_endtime();
  static const int kEndTimeFieldNumber = 3;
  /*FOR2LUA
  <Record>
  	<name>TSubscriptionGetSubscriptionInfoRsp</name>
  	<Function>
  		<name>endtime</name>
  		<replaceName>EndTime</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_endtime</name>
  		<replaceName>EndTime</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_endtime</name>
  		<replaceName>EndTime</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint64 endtime() const;
  inline void set_endtime(::google::protobuf::uint64 value);

  // optional uint32 SubscriptId = 4;
  inline bool has_subscriptid() const;
  inline void clear_subscriptid();
  static const int kSubscriptIdFieldNumber = 4;
  /*FOR2LUA
  <Record>
  	<name>TSubscriptionGetSubscriptionInfoRsp</name>
  	<Function>
  		<name>subscriptid</name>
  		<replaceName>SubscriptId</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_subscriptid</name>
  		<replaceName>SubscriptId</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_subscriptid</name>
  		<replaceName>SubscriptId</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 subscriptid() const;
  inline void set_subscriptid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:pb.TSubscriptionGetSubscriptionInfoRsp)
 private:
  inline void set_has_paytime();
  inline void clear_has_paytime();
  inline void set_has_rewardtime();
  inline void clear_has_rewardtime();
  inline void set_has_endtime();
  inline void clear_has_endtime();
  inline void set_has_subscriptid();
  inline void clear_has_subscriptid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint64 paytime_;
  ::google::protobuf::uint64 rewardtime_;
  ::google::protobuf::uint64 endtime_;
  ::google::protobuf::uint32 subscriptid_;
  friend void  protobuf_AddDesc_net_2fSubscription_2eproto();
  friend void protobuf_AssignDesc_net_2fSubscription_2eproto();
  friend void protobuf_ShutdownFile_net_2fSubscription_2eproto();

  void InitAsDefaultInstance();
  static TSubscriptionGetSubscriptionInfoRsp* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TSubscriptionReceiveRewardRsp</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/Subscription.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TSubscriptionReceiveRewardRsp : public ::google::protobuf::Message {
 public:
  TSubscriptionReceiveRewardRsp();
  virtual ~TSubscriptionReceiveRewardRsp();

  TSubscriptionReceiveRewardRsp(const TSubscriptionReceiveRewardRsp& from);

  inline TSubscriptionReceiveRewardRsp& operator=(const TSubscriptionReceiveRewardRsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TSubscriptionReceiveRewardRsp& default_instance();

  void Swap(TSubscriptionReceiveRewardRsp* other);

  // implements Message ----------------------------------------------

  TSubscriptionReceiveRewardRsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TSubscriptionReceiveRewardRsp& from);
  void MergeFrom(const TSubscriptionReceiveRewardRsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .pb.TCommonReward RewardArr = 1;
  inline int rewardarr_size() const;
  inline void clear_rewardarr();
  static const int kRewardArrFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TSubscriptionReceiveRewardRsp</name>
  	<Function>
  		<name>rewardarr</name>
  		<replaceName>RewardArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_rewardarr</name>
  		<replaceName>RewardArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_rewardarr</name>
  		<replaceName>RewardArr</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_rewardarr</name>
  		<replaceName>RewardArr</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>rewardarr_size</name>
  		<replaceName>RewardArr</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TCommonReward& rewardarr(int index) const;
  inline ::pb::TCommonReward* mutable_rewardarr(int index);
  inline ::pb::TCommonReward* add_rewardarr();
  inline const ::google::protobuf::RepeatedPtrField< ::pb::TCommonReward >&
      rewardarr() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb::TCommonReward >*
      mutable_rewardarr();

  // @@protoc_insertion_point(class_scope:pb.TSubscriptionReceiveRewardRsp)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::pb::TCommonReward > rewardarr_;
  friend void  protobuf_AddDesc_net_2fSubscription_2eproto();
  friend void protobuf_AssignDesc_net_2fSubscription_2eproto();
  friend void protobuf_ShutdownFile_net_2fSubscription_2eproto();

  void InitAsDefaultInstance();
  static TSubscriptionReceiveRewardRsp* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TSubscriptionPush</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/Subscription.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TSubscriptionPush : public ::google::protobuf::Message {
 public:
  TSubscriptionPush();
  virtual ~TSubscriptionPush();

  TSubscriptionPush(const TSubscriptionPush& from);

  inline TSubscriptionPush& operator=(const TSubscriptionPush& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TSubscriptionPush& default_instance();

  void Swap(TSubscriptionPush* other);

  // implements Message ----------------------------------------------

  TSubscriptionPush* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TSubscriptionPush& from);
  void MergeFrom(const TSubscriptionPush& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint64 PayTime = 1;
  inline bool has_paytime() const;
  inline void clear_paytime();
  static const int kPayTimeFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TSubscriptionPush</name>
  	<Function>
  		<name>paytime</name>
  		<replaceName>PayTime</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_paytime</name>
  		<replaceName>PayTime</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_paytime</name>
  		<replaceName>PayTime</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint64 paytime() const;
  inline void set_paytime(::google::protobuf::uint64 value);

  // optional uint64 EndTime = 3;
  inline bool has_endtime() const;
  inline void clear_endtime();
  static const int kEndTimeFieldNumber = 3;
  /*FOR2LUA
  <Record>
  	<name>TSubscriptionPush</name>
  	<Function>
  		<name>endtime</name>
  		<replaceName>EndTime</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_endtime</name>
  		<replaceName>EndTime</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_endtime</name>
  		<replaceName>EndTime</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint64 endtime() const;
  inline void set_endtime(::google::protobuf::uint64 value);

  // optional uint32 SubscriptId = 4;
  inline bool has_subscriptid() const;
  inline void clear_subscriptid();
  static const int kSubscriptIdFieldNumber = 4;
  /*FOR2LUA
  <Record>
  	<name>TSubscriptionPush</name>
  	<Function>
  		<name>subscriptid</name>
  		<replaceName>SubscriptId</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_subscriptid</name>
  		<replaceName>SubscriptId</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_subscriptid</name>
  		<replaceName>SubscriptId</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 subscriptid() const;
  inline void set_subscriptid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:pb.TSubscriptionPush)
 private:
  inline void set_has_paytime();
  inline void clear_has_paytime();
  inline void set_has_endtime();
  inline void clear_has_endtime();
  inline void set_has_subscriptid();
  inline void clear_has_subscriptid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint64 paytime_;
  ::google::protobuf::uint64 endtime_;
  ::google::protobuf::uint32 subscriptid_;
  friend void  protobuf_AddDesc_net_2fSubscription_2eproto();
  friend void protobuf_AssignDesc_net_2fSubscription_2eproto();
  friend void protobuf_ShutdownFile_net_2fSubscription_2eproto();

  void InitAsDefaultInstance();
  static TSubscriptionPush* default_instance_;
};
// ===================================================================


// ===================================================================

// TSubscriptionGetSubscriptionInfoRsp

// optional uint64 PayTime = 1;
inline bool TSubscriptionGetSubscriptionInfoRsp::has_paytime() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TSubscriptionGetSubscriptionInfoRsp::set_has_paytime() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TSubscriptionGetSubscriptionInfoRsp::clear_has_paytime() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TSubscriptionGetSubscriptionInfoRsp::clear_paytime() {
  paytime_ = GOOGLE_ULONGLONG(0);
  clear_has_paytime();
}
inline ::google::protobuf::uint64 TSubscriptionGetSubscriptionInfoRsp::paytime() const {
  // @@protoc_insertion_point(field_get:pb.TSubscriptionGetSubscriptionInfoRsp.PayTime)
  return paytime_;
}
inline void TSubscriptionGetSubscriptionInfoRsp::set_paytime(::google::protobuf::uint64 value) {
  set_has_paytime();
  paytime_ = value;
  // @@protoc_insertion_point(field_set:pb.TSubscriptionGetSubscriptionInfoRsp.PayTime)
}

// optional uint64 RewardTime = 2;
inline bool TSubscriptionGetSubscriptionInfoRsp::has_rewardtime() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TSubscriptionGetSubscriptionInfoRsp::set_has_rewardtime() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TSubscriptionGetSubscriptionInfoRsp::clear_has_rewardtime() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TSubscriptionGetSubscriptionInfoRsp::clear_rewardtime() {
  rewardtime_ = GOOGLE_ULONGLONG(0);
  clear_has_rewardtime();
}
inline ::google::protobuf::uint64 TSubscriptionGetSubscriptionInfoRsp::rewardtime() const {
  // @@protoc_insertion_point(field_get:pb.TSubscriptionGetSubscriptionInfoRsp.RewardTime)
  return rewardtime_;
}
inline void TSubscriptionGetSubscriptionInfoRsp::set_rewardtime(::google::protobuf::uint64 value) {
  set_has_rewardtime();
  rewardtime_ = value;
  // @@protoc_insertion_point(field_set:pb.TSubscriptionGetSubscriptionInfoRsp.RewardTime)
}

// optional uint64 EndTime = 3;
inline bool TSubscriptionGetSubscriptionInfoRsp::has_endtime() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void TSubscriptionGetSubscriptionInfoRsp::set_has_endtime() {
  _has_bits_[0] |= 0x00000004u;
}
inline void TSubscriptionGetSubscriptionInfoRsp::clear_has_endtime() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void TSubscriptionGetSubscriptionInfoRsp::clear_endtime() {
  endtime_ = GOOGLE_ULONGLONG(0);
  clear_has_endtime();
}
inline ::google::protobuf::uint64 TSubscriptionGetSubscriptionInfoRsp::endtime() const {
  // @@protoc_insertion_point(field_get:pb.TSubscriptionGetSubscriptionInfoRsp.EndTime)
  return endtime_;
}
inline void TSubscriptionGetSubscriptionInfoRsp::set_endtime(::google::protobuf::uint64 value) {
  set_has_endtime();
  endtime_ = value;
  // @@protoc_insertion_point(field_set:pb.TSubscriptionGetSubscriptionInfoRsp.EndTime)
}

// optional uint32 SubscriptId = 4;
inline bool TSubscriptionGetSubscriptionInfoRsp::has_subscriptid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void TSubscriptionGetSubscriptionInfoRsp::set_has_subscriptid() {
  _has_bits_[0] |= 0x00000008u;
}
inline void TSubscriptionGetSubscriptionInfoRsp::clear_has_subscriptid() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void TSubscriptionGetSubscriptionInfoRsp::clear_subscriptid() {
  subscriptid_ = 0u;
  clear_has_subscriptid();
}
inline ::google::protobuf::uint32 TSubscriptionGetSubscriptionInfoRsp::subscriptid() const {
  // @@protoc_insertion_point(field_get:pb.TSubscriptionGetSubscriptionInfoRsp.SubscriptId)
  return subscriptid_;
}
inline void TSubscriptionGetSubscriptionInfoRsp::set_subscriptid(::google::protobuf::uint32 value) {
  set_has_subscriptid();
  subscriptid_ = value;
  // @@protoc_insertion_point(field_set:pb.TSubscriptionGetSubscriptionInfoRsp.SubscriptId)
}

// -------------------------------------------------------------------

// TSubscriptionReceiveRewardRsp

// repeated .pb.TCommonReward RewardArr = 1;
inline int TSubscriptionReceiveRewardRsp::rewardarr_size() const {
  return rewardarr_.size();
}
inline void TSubscriptionReceiveRewardRsp::clear_rewardarr() {
  rewardarr_.Clear();
}
inline const ::pb::TCommonReward& TSubscriptionReceiveRewardRsp::rewardarr(int index) const {
  // @@protoc_insertion_point(field_get:pb.TSubscriptionReceiveRewardRsp.RewardArr)
  return rewardarr_.Get(index);
}
inline ::pb::TCommonReward* TSubscriptionReceiveRewardRsp::mutable_rewardarr(int index) {
  // @@protoc_insertion_point(field_mutable:pb.TSubscriptionReceiveRewardRsp.RewardArr)
  return rewardarr_.Mutable(index);
}
inline ::pb::TCommonReward* TSubscriptionReceiveRewardRsp::add_rewardarr() {
  // @@protoc_insertion_point(field_add:pb.TSubscriptionReceiveRewardRsp.RewardArr)
  return rewardarr_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::TCommonReward >&
TSubscriptionReceiveRewardRsp::rewardarr() const {
  // @@protoc_insertion_point(field_list:pb.TSubscriptionReceiveRewardRsp.RewardArr)
  return rewardarr_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb::TCommonReward >*
TSubscriptionReceiveRewardRsp::mutable_rewardarr() {
  // @@protoc_insertion_point(field_mutable_list:pb.TSubscriptionReceiveRewardRsp.RewardArr)
  return &rewardarr_;
}

// -------------------------------------------------------------------

// TSubscriptionPush

// optional uint64 PayTime = 1;
inline bool TSubscriptionPush::has_paytime() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TSubscriptionPush::set_has_paytime() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TSubscriptionPush::clear_has_paytime() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TSubscriptionPush::clear_paytime() {
  paytime_ = GOOGLE_ULONGLONG(0);
  clear_has_paytime();
}
inline ::google::protobuf::uint64 TSubscriptionPush::paytime() const {
  // @@protoc_insertion_point(field_get:pb.TSubscriptionPush.PayTime)
  return paytime_;
}
inline void TSubscriptionPush::set_paytime(::google::protobuf::uint64 value) {
  set_has_paytime();
  paytime_ = value;
  // @@protoc_insertion_point(field_set:pb.TSubscriptionPush.PayTime)
}

// optional uint64 EndTime = 3;
inline bool TSubscriptionPush::has_endtime() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TSubscriptionPush::set_has_endtime() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TSubscriptionPush::clear_has_endtime() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TSubscriptionPush::clear_endtime() {
  endtime_ = GOOGLE_ULONGLONG(0);
  clear_has_endtime();
}
inline ::google::protobuf::uint64 TSubscriptionPush::endtime() const {
  // @@protoc_insertion_point(field_get:pb.TSubscriptionPush.EndTime)
  return endtime_;
}
inline void TSubscriptionPush::set_endtime(::google::protobuf::uint64 value) {
  set_has_endtime();
  endtime_ = value;
  // @@protoc_insertion_point(field_set:pb.TSubscriptionPush.EndTime)
}

// optional uint32 SubscriptId = 4;
inline bool TSubscriptionPush::has_subscriptid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void TSubscriptionPush::set_has_subscriptid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void TSubscriptionPush::clear_has_subscriptid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void TSubscriptionPush::clear_subscriptid() {
  subscriptid_ = 0u;
  clear_has_subscriptid();
}
inline ::google::protobuf::uint32 TSubscriptionPush::subscriptid() const {
  // @@protoc_insertion_point(field_get:pb.TSubscriptionPush.SubscriptId)
  return subscriptid_;
}
inline void TSubscriptionPush::set_subscriptid(::google::protobuf::uint32 value) {
  set_has_subscriptid();
  subscriptid_ = value;
  // @@protoc_insertion_point(field_set:pb.TSubscriptionPush.SubscriptId)
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace pb

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_net_2fSubscription_2eproto__INCLUDED
