// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: module/NationalWarMapSE.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "module/NationalWarMapSE.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace pb {

namespace {

const ::google::protobuf::Descriptor* NationalWarMapSE_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NationalWarMapSE_reflection_ = NULL;
const ::google::protobuf::Descriptor* CircleDataSE_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CircleDataSE_reflection_ = NULL;
const ::google::protobuf::Descriptor* LayerDataSE_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LayerDataSE_reflection_ = NULL;
const ::google::protobuf::Descriptor* GridDataSE_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GridDataSE_reflection_ = NULL;
const ::google::protobuf::Descriptor* OrnamentGroupDataSE_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  OrnamentGroupDataSE_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_module_2fNationalWarMapSE_2eproto() {
  protobuf_AddDesc_module_2fNationalWarMapSE_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "module/NationalWarMapSE.proto");
  GOOGLE_CHECK(file != NULL);
  NationalWarMapSE_descriptor_ = file->message_type(0);
  static const int NationalWarMapSE_offsets_[9] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NationalWarMapSE, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NationalWarMapSE, mapname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NationalWarMapSE, mapwidth_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NationalWarMapSE, mapheight_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NationalWarMapSE, terrainlayerdata_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NationalWarMapSE, borderlayerdata_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NationalWarMapSE, ornamentgroupdataarr_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NationalWarMapSE, circledataarr_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NationalWarMapSE, circleornamentgroupdataarr_),
  };
  NationalWarMapSE_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      NationalWarMapSE_descriptor_,
      NationalWarMapSE::default_instance_,
      NationalWarMapSE_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NationalWarMapSE, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NationalWarMapSE, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(NationalWarMapSE));
  CircleDataSE_descriptor_ = file->message_type(1);
  static const int CircleDataSE_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CircleDataSE, grididx_),
  };
  CircleDataSE_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CircleDataSE_descriptor_,
      CircleDataSE::default_instance_,
      CircleDataSE_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CircleDataSE, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CircleDataSE, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CircleDataSE));
  LayerDataSE_descriptor_ = file->message_type(2);
  static const int LayerDataSE_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LayerDataSE, griddataarr_),
  };
  LayerDataSE_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      LayerDataSE_descriptor_,
      LayerDataSE::default_instance_,
      LayerDataSE_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LayerDataSE, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LayerDataSE, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(LayerDataSE));
  GridDataSE_descriptor_ = file->message_type(3);
  static const int GridDataSE_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GridDataSE, grididx_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GridDataSE, resid_),
  };
  GridDataSE_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GridDataSE_descriptor_,
      GridDataSE::default_instance_,
      GridDataSE_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GridDataSE, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GridDataSE, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GridDataSE));
  OrnamentGroupDataSE_descriptor_ = file->message_type(4);
  static const int OrnamentGroupDataSE_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OrnamentGroupDataSE, ornamentgroupname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OrnamentGroupDataSE, grididxarr_),
  };
  OrnamentGroupDataSE_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      OrnamentGroupDataSE_descriptor_,
      OrnamentGroupDataSE::default_instance_,
      OrnamentGroupDataSE_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OrnamentGroupDataSE, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OrnamentGroupDataSE, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(OrnamentGroupDataSE));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_module_2fNationalWarMapSE_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    NationalWarMapSE_descriptor_, &NationalWarMapSE::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CircleDataSE_descriptor_, &CircleDataSE::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    LayerDataSE_descriptor_, &LayerDataSE::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GridDataSE_descriptor_, &GridDataSE::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    OrnamentGroupDataSE_descriptor_, &OrnamentGroupDataSE::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_module_2fNationalWarMapSE_2eproto() {
  delete NationalWarMapSE::default_instance_;
  delete NationalWarMapSE_reflection_;
  delete CircleDataSE::default_instance_;
  delete CircleDataSE_reflection_;
  delete LayerDataSE::default_instance_;
  delete LayerDataSE_reflection_;
  delete GridDataSE::default_instance_;
  delete GridDataSE_reflection_;
  delete OrnamentGroupDataSE::default_instance_;
  delete OrnamentGroupDataSE_reflection_;
}

void protobuf_AddDesc_module_2fNationalWarMapSE_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\035module/NationalWarMapSE.proto\022\002pb\"\306\002\n\020"
    "NationalWarMapSE\022\n\n\002Id\030\001 \002(\005\022\017\n\007MapName\030"
    "\002 \002(\t\022\020\n\010MapWidth\030\003 \001(\005\022\021\n\tMapHeight\030\004 \001"
    "(\005\022)\n\020TerrainLayerData\030\005 \001(\0132\017.pb.LayerD"
    "ataSE\022(\n\017BorderLayerData\030\006 \001(\0132\017.pb.Laye"
    "rDataSE\0225\n\024OrnamentGroupDataArr\030\007 \003(\0132\027."
    "pb.OrnamentGroupDataSE\022\'\n\rCircleDataArr\030"
    "\010 \003(\0132\020.pb.CircleDataSE\022;\n\032CircleOrnamen"
    "tGroupDataArr\030\t \003(\0132\027.pb.OrnamentGroupDa"
    "taSE\"\037\n\014CircleDataSE\022\017\n\007GridIdx\030\001 \001(\005\"2\n"
    "\013LayerDataSE\022#\n\013GridDataArr\030\001 \003(\0132\016.pb.G"
    "ridDataSE\",\n\nGridDataSE\022\017\n\007GridIdx\030\001 \001(\005"
    "\022\r\n\005ResId\030\002 \001(\r\"D\n\023OrnamentGroupDataSE\022\031"
    "\n\021OrnamentGroupName\030\001 \001(\t\022\022\n\nGridIdxArr\030"
    "\002 \003(\005", 565);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "module/NationalWarMapSE.proto", &protobuf_RegisterTypes);
  NationalWarMapSE::default_instance_ = new NationalWarMapSE();
  CircleDataSE::default_instance_ = new CircleDataSE();
  LayerDataSE::default_instance_ = new LayerDataSE();
  GridDataSE::default_instance_ = new GridDataSE();
  OrnamentGroupDataSE::default_instance_ = new OrnamentGroupDataSE();
  NationalWarMapSE::default_instance_->InitAsDefaultInstance();
  CircleDataSE::default_instance_->InitAsDefaultInstance();
  LayerDataSE::default_instance_->InitAsDefaultInstance();
  GridDataSE::default_instance_->InitAsDefaultInstance();
  OrnamentGroupDataSE::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_module_2fNationalWarMapSE_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_module_2fNationalWarMapSE_2eproto {
  StaticDescriptorInitializer_module_2fNationalWarMapSE_2eproto() {
    protobuf_AddDesc_module_2fNationalWarMapSE_2eproto();
  }
} static_descriptor_initializer_module_2fNationalWarMapSE_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int NationalWarMapSE::kIdFieldNumber;
const int NationalWarMapSE::kMapNameFieldNumber;
const int NationalWarMapSE::kMapWidthFieldNumber;
const int NationalWarMapSE::kMapHeightFieldNumber;
const int NationalWarMapSE::kTerrainLayerDataFieldNumber;
const int NationalWarMapSE::kBorderLayerDataFieldNumber;
const int NationalWarMapSE::kOrnamentGroupDataArrFieldNumber;
const int NationalWarMapSE::kCircleDataArrFieldNumber;
const int NationalWarMapSE::kCircleOrnamentGroupDataArrFieldNumber;
#endif  // !_MSC_VER

NationalWarMapSE::NationalWarMapSE()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.NationalWarMapSE)
}

void NationalWarMapSE::InitAsDefaultInstance() {
  terrainlayerdata_ = const_cast< ::pb::LayerDataSE*>(&::pb::LayerDataSE::default_instance());
  borderlayerdata_ = const_cast< ::pb::LayerDataSE*>(&::pb::LayerDataSE::default_instance());
}

NationalWarMapSE::NationalWarMapSE(const NationalWarMapSE& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.NationalWarMapSE)
}

void NationalWarMapSE::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  id_ = 0;
  mapname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  mapwidth_ = 0;
  mapheight_ = 0;
  terrainlayerdata_ = NULL;
  borderlayerdata_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NationalWarMapSE::~NationalWarMapSE() {
  // @@protoc_insertion_point(destructor:pb.NationalWarMapSE)
  SharedDtor();
}

void NationalWarMapSE::SharedDtor() {
  if (mapname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete mapname_;
  }
  if (this != default_instance_) {
    delete terrainlayerdata_;
    delete borderlayerdata_;
  }
}

void NationalWarMapSE::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NationalWarMapSE::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NationalWarMapSE_descriptor_;
}

const NationalWarMapSE& NationalWarMapSE::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_module_2fNationalWarMapSE_2eproto();
  return *default_instance_;
}

NationalWarMapSE* NationalWarMapSE::default_instance_ = NULL;

NationalWarMapSE* NationalWarMapSE::New() const {
  return new NationalWarMapSE;
}

void NationalWarMapSE::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<NationalWarMapSE*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 63) {
    ZR_(id_, mapwidth_);
    if (has_mapname()) {
      if (mapname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        mapname_->clear();
      }
    }
    mapheight_ = 0;
    if (has_terrainlayerdata()) {
      if (terrainlayerdata_ != NULL) terrainlayerdata_->::pb::LayerDataSE::Clear();
    }
    if (has_borderlayerdata()) {
      if (borderlayerdata_ != NULL) borderlayerdata_->::pb::LayerDataSE::Clear();
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ornamentgroupdataarr_.Clear();
  circledataarr_.Clear();
  circleornamentgroupdataarr_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool NationalWarMapSE::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.NationalWarMapSE)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 Id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_MapName;
        break;
      }

      // required string MapName = 2;
      case 2: {
        if (tag == 18) {
         parse_MapName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_mapname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->mapname().data(), this->mapname().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "mapname");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_MapWidth;
        break;
      }

      // optional int32 MapWidth = 3;
      case 3: {
        if (tag == 24) {
         parse_MapWidth:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &mapwidth_)));
          set_has_mapwidth();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_MapHeight;
        break;
      }

      // optional int32 MapHeight = 4;
      case 4: {
        if (tag == 32) {
         parse_MapHeight:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &mapheight_)));
          set_has_mapheight();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_TerrainLayerData;
        break;
      }

      // optional .pb.LayerDataSE TerrainLayerData = 5;
      case 5: {
        if (tag == 42) {
         parse_TerrainLayerData:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_terrainlayerdata()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_BorderLayerData;
        break;
      }

      // optional .pb.LayerDataSE BorderLayerData = 6;
      case 6: {
        if (tag == 50) {
         parse_BorderLayerData:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_borderlayerdata()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_OrnamentGroupDataArr;
        break;
      }

      // repeated .pb.OrnamentGroupDataSE OrnamentGroupDataArr = 7;
      case 7: {
        if (tag == 58) {
         parse_OrnamentGroupDataArr:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_ornamentgroupdataarr()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_OrnamentGroupDataArr;
        if (input->ExpectTag(66)) goto parse_CircleDataArr;
        break;
      }

      // repeated .pb.CircleDataSE CircleDataArr = 8;
      case 8: {
        if (tag == 66) {
         parse_CircleDataArr:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_circledataarr()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_CircleDataArr;
        if (input->ExpectTag(74)) goto parse_CircleOrnamentGroupDataArr;
        break;
      }

      // repeated .pb.OrnamentGroupDataSE CircleOrnamentGroupDataArr = 9;
      case 9: {
        if (tag == 74) {
         parse_CircleOrnamentGroupDataArr:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_circleornamentgroupdataarr()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(74)) goto parse_CircleOrnamentGroupDataArr;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.NationalWarMapSE)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.NationalWarMapSE)
  return false;
#undef DO_
}

void NationalWarMapSE::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.NationalWarMapSE)
  // required int32 Id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // required string MapName = 2;
  if (has_mapname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->mapname().data(), this->mapname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "mapname");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->mapname(), output);
  }

  // optional int32 MapWidth = 3;
  if (has_mapwidth()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->mapwidth(), output);
  }

  // optional int32 MapHeight = 4;
  if (has_mapheight()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->mapheight(), output);
  }

  // optional .pb.LayerDataSE TerrainLayerData = 5;
  if (has_terrainlayerdata()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->terrainlayerdata(), output);
  }

  // optional .pb.LayerDataSE BorderLayerData = 6;
  if (has_borderlayerdata()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->borderlayerdata(), output);
  }

  // repeated .pb.OrnamentGroupDataSE OrnamentGroupDataArr = 7;
  for (int i = 0; i < this->ornamentgroupdataarr_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->ornamentgroupdataarr(i), output);
  }

  // repeated .pb.CircleDataSE CircleDataArr = 8;
  for (int i = 0; i < this->circledataarr_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, this->circledataarr(i), output);
  }

  // repeated .pb.OrnamentGroupDataSE CircleOrnamentGroupDataArr = 9;
  for (int i = 0; i < this->circleornamentgroupdataarr_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, this->circleornamentgroupdataarr(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.NationalWarMapSE)
}

::google::protobuf::uint8* NationalWarMapSE::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.NationalWarMapSE)
  // required int32 Id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // required string MapName = 2;
  if (has_mapname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->mapname().data(), this->mapname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "mapname");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->mapname(), target);
  }

  // optional int32 MapWidth = 3;
  if (has_mapwidth()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->mapwidth(), target);
  }

  // optional int32 MapHeight = 4;
  if (has_mapheight()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->mapheight(), target);
  }

  // optional .pb.LayerDataSE TerrainLayerData = 5;
  if (has_terrainlayerdata()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->terrainlayerdata(), target);
  }

  // optional .pb.LayerDataSE BorderLayerData = 6;
  if (has_borderlayerdata()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->borderlayerdata(), target);
  }

  // repeated .pb.OrnamentGroupDataSE OrnamentGroupDataArr = 7;
  for (int i = 0; i < this->ornamentgroupdataarr_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->ornamentgroupdataarr(i), target);
  }

  // repeated .pb.CircleDataSE CircleDataArr = 8;
  for (int i = 0; i < this->circledataarr_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        8, this->circledataarr(i), target);
  }

  // repeated .pb.OrnamentGroupDataSE CircleOrnamentGroupDataArr = 9;
  for (int i = 0; i < this->circleornamentgroupdataarr_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        9, this->circleornamentgroupdataarr(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.NationalWarMapSE)
  return target;
}

int NationalWarMapSE::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 Id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

    // required string MapName = 2;
    if (has_mapname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->mapname());
    }

    // optional int32 MapWidth = 3;
    if (has_mapwidth()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->mapwidth());
    }

    // optional int32 MapHeight = 4;
    if (has_mapheight()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->mapheight());
    }

    // optional .pb.LayerDataSE TerrainLayerData = 5;
    if (has_terrainlayerdata()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->terrainlayerdata());
    }

    // optional .pb.LayerDataSE BorderLayerData = 6;
    if (has_borderlayerdata()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->borderlayerdata());
    }

  }
  // repeated .pb.OrnamentGroupDataSE OrnamentGroupDataArr = 7;
  total_size += 1 * this->ornamentgroupdataarr_size();
  for (int i = 0; i < this->ornamentgroupdataarr_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->ornamentgroupdataarr(i));
  }

  // repeated .pb.CircleDataSE CircleDataArr = 8;
  total_size += 1 * this->circledataarr_size();
  for (int i = 0; i < this->circledataarr_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->circledataarr(i));
  }

  // repeated .pb.OrnamentGroupDataSE CircleOrnamentGroupDataArr = 9;
  total_size += 1 * this->circleornamentgroupdataarr_size();
  for (int i = 0; i < this->circleornamentgroupdataarr_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->circleornamentgroupdataarr(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NationalWarMapSE::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const NationalWarMapSE* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const NationalWarMapSE*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void NationalWarMapSE::MergeFrom(const NationalWarMapSE& from) {
  GOOGLE_CHECK_NE(&from, this);
  ornamentgroupdataarr_.MergeFrom(from.ornamentgroupdataarr_);
  circledataarr_.MergeFrom(from.circledataarr_);
  circleornamentgroupdataarr_.MergeFrom(from.circleornamentgroupdataarr_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_mapname()) {
      set_mapname(from.mapname());
    }
    if (from.has_mapwidth()) {
      set_mapwidth(from.mapwidth());
    }
    if (from.has_mapheight()) {
      set_mapheight(from.mapheight());
    }
    if (from.has_terrainlayerdata()) {
      mutable_terrainlayerdata()->::pb::LayerDataSE::MergeFrom(from.terrainlayerdata());
    }
    if (from.has_borderlayerdata()) {
      mutable_borderlayerdata()->::pb::LayerDataSE::MergeFrom(from.borderlayerdata());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void NationalWarMapSE::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NationalWarMapSE::CopyFrom(const NationalWarMapSE& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NationalWarMapSE::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void NationalWarMapSE::Swap(NationalWarMapSE* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(mapname_, other->mapname_);
    std::swap(mapwidth_, other->mapwidth_);
    std::swap(mapheight_, other->mapheight_);
    std::swap(terrainlayerdata_, other->terrainlayerdata_);
    std::swap(borderlayerdata_, other->borderlayerdata_);
    ornamentgroupdataarr_.Swap(&other->ornamentgroupdataarr_);
    circledataarr_.Swap(&other->circledataarr_);
    circleornamentgroupdataarr_.Swap(&other->circleornamentgroupdataarr_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata NationalWarMapSE::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NationalWarMapSE_descriptor_;
  metadata.reflection = NationalWarMapSE_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CircleDataSE::kGridIdxFieldNumber;
#endif  // !_MSC_VER

CircleDataSE::CircleDataSE()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.CircleDataSE)
}

void CircleDataSE::InitAsDefaultInstance() {
}

CircleDataSE::CircleDataSE(const CircleDataSE& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.CircleDataSE)
}

void CircleDataSE::SharedCtor() {
  _cached_size_ = 0;
  grididx_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CircleDataSE::~CircleDataSE() {
  // @@protoc_insertion_point(destructor:pb.CircleDataSE)
  SharedDtor();
}

void CircleDataSE::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CircleDataSE::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CircleDataSE::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CircleDataSE_descriptor_;
}

const CircleDataSE& CircleDataSE::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_module_2fNationalWarMapSE_2eproto();
  return *default_instance_;
}

CircleDataSE* CircleDataSE::default_instance_ = NULL;

CircleDataSE* CircleDataSE::New() const {
  return new CircleDataSE;
}

void CircleDataSE::Clear() {
  grididx_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CircleDataSE::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.CircleDataSE)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 GridIdx = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &grididx_)));
          set_has_grididx();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.CircleDataSE)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.CircleDataSE)
  return false;
#undef DO_
}

void CircleDataSE::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.CircleDataSE)
  // optional int32 GridIdx = 1;
  if (has_grididx()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->grididx(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.CircleDataSE)
}

::google::protobuf::uint8* CircleDataSE::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.CircleDataSE)
  // optional int32 GridIdx = 1;
  if (has_grididx()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->grididx(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.CircleDataSE)
  return target;
}

int CircleDataSE::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 GridIdx = 1;
    if (has_grididx()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->grididx());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CircleDataSE::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CircleDataSE* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CircleDataSE*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CircleDataSE::MergeFrom(const CircleDataSE& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_grididx()) {
      set_grididx(from.grididx());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CircleDataSE::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CircleDataSE::CopyFrom(const CircleDataSE& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CircleDataSE::IsInitialized() const {

  return true;
}

void CircleDataSE::Swap(CircleDataSE* other) {
  if (other != this) {
    std::swap(grididx_, other->grididx_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CircleDataSE::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CircleDataSE_descriptor_;
  metadata.reflection = CircleDataSE_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int LayerDataSE::kGridDataArrFieldNumber;
#endif  // !_MSC_VER

LayerDataSE::LayerDataSE()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.LayerDataSE)
}

void LayerDataSE::InitAsDefaultInstance() {
}

LayerDataSE::LayerDataSE(const LayerDataSE& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.LayerDataSE)
}

void LayerDataSE::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LayerDataSE::~LayerDataSE() {
  // @@protoc_insertion_point(destructor:pb.LayerDataSE)
  SharedDtor();
}

void LayerDataSE::SharedDtor() {
  if (this != default_instance_) {
  }
}

void LayerDataSE::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LayerDataSE::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LayerDataSE_descriptor_;
}

const LayerDataSE& LayerDataSE::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_module_2fNationalWarMapSE_2eproto();
  return *default_instance_;
}

LayerDataSE* LayerDataSE::default_instance_ = NULL;

LayerDataSE* LayerDataSE::New() const {
  return new LayerDataSE;
}

void LayerDataSE::Clear() {
  griddataarr_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool LayerDataSE::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.LayerDataSE)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .pb.GridDataSE GridDataArr = 1;
      case 1: {
        if (tag == 10) {
         parse_GridDataArr:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_griddataarr()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_GridDataArr;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.LayerDataSE)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.LayerDataSE)
  return false;
#undef DO_
}

void LayerDataSE::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.LayerDataSE)
  // repeated .pb.GridDataSE GridDataArr = 1;
  for (int i = 0; i < this->griddataarr_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->griddataarr(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.LayerDataSE)
}

::google::protobuf::uint8* LayerDataSE::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.LayerDataSE)
  // repeated .pb.GridDataSE GridDataArr = 1;
  for (int i = 0; i < this->griddataarr_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->griddataarr(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.LayerDataSE)
  return target;
}

int LayerDataSE::ByteSize() const {
  int total_size = 0;

  // repeated .pb.GridDataSE GridDataArr = 1;
  total_size += 1 * this->griddataarr_size();
  for (int i = 0; i < this->griddataarr_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->griddataarr(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LayerDataSE::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const LayerDataSE* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const LayerDataSE*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void LayerDataSE::MergeFrom(const LayerDataSE& from) {
  GOOGLE_CHECK_NE(&from, this);
  griddataarr_.MergeFrom(from.griddataarr_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void LayerDataSE::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LayerDataSE::CopyFrom(const LayerDataSE& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LayerDataSE::IsInitialized() const {

  return true;
}

void LayerDataSE::Swap(LayerDataSE* other) {
  if (other != this) {
    griddataarr_.Swap(&other->griddataarr_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata LayerDataSE::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LayerDataSE_descriptor_;
  metadata.reflection = LayerDataSE_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GridDataSE::kGridIdxFieldNumber;
const int GridDataSE::kResIdFieldNumber;
#endif  // !_MSC_VER

GridDataSE::GridDataSE()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.GridDataSE)
}

void GridDataSE::InitAsDefaultInstance() {
}

GridDataSE::GridDataSE(const GridDataSE& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.GridDataSE)
}

void GridDataSE::SharedCtor() {
  _cached_size_ = 0;
  grididx_ = 0;
  resid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GridDataSE::~GridDataSE() {
  // @@protoc_insertion_point(destructor:pb.GridDataSE)
  SharedDtor();
}

void GridDataSE::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GridDataSE::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GridDataSE::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GridDataSE_descriptor_;
}

const GridDataSE& GridDataSE::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_module_2fNationalWarMapSE_2eproto();
  return *default_instance_;
}

GridDataSE* GridDataSE::default_instance_ = NULL;

GridDataSE* GridDataSE::New() const {
  return new GridDataSE;
}

void GridDataSE::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<GridDataSE*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(grididx_, resid_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GridDataSE::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.GridDataSE)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 GridIdx = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &grididx_)));
          set_has_grididx();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_ResId;
        break;
      }

      // optional uint32 ResId = 2;
      case 2: {
        if (tag == 16) {
         parse_ResId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &resid_)));
          set_has_resid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.GridDataSE)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.GridDataSE)
  return false;
#undef DO_
}

void GridDataSE::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.GridDataSE)
  // optional int32 GridIdx = 1;
  if (has_grididx()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->grididx(), output);
  }

  // optional uint32 ResId = 2;
  if (has_resid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->resid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.GridDataSE)
}

::google::protobuf::uint8* GridDataSE::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.GridDataSE)
  // optional int32 GridIdx = 1;
  if (has_grididx()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->grididx(), target);
  }

  // optional uint32 ResId = 2;
  if (has_resid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->resid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.GridDataSE)
  return target;
}

int GridDataSE::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 GridIdx = 1;
    if (has_grididx()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->grididx());
    }

    // optional uint32 ResId = 2;
    if (has_resid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->resid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GridDataSE::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GridDataSE* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GridDataSE*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GridDataSE::MergeFrom(const GridDataSE& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_grididx()) {
      set_grididx(from.grididx());
    }
    if (from.has_resid()) {
      set_resid(from.resid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GridDataSE::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GridDataSE::CopyFrom(const GridDataSE& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GridDataSE::IsInitialized() const {

  return true;
}

void GridDataSE::Swap(GridDataSE* other) {
  if (other != this) {
    std::swap(grididx_, other->grididx_);
    std::swap(resid_, other->resid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GridDataSE::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GridDataSE_descriptor_;
  metadata.reflection = GridDataSE_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int OrnamentGroupDataSE::kOrnamentGroupNameFieldNumber;
const int OrnamentGroupDataSE::kGridIdxArrFieldNumber;
#endif  // !_MSC_VER

OrnamentGroupDataSE::OrnamentGroupDataSE()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.OrnamentGroupDataSE)
}

void OrnamentGroupDataSE::InitAsDefaultInstance() {
}

OrnamentGroupDataSE::OrnamentGroupDataSE(const OrnamentGroupDataSE& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.OrnamentGroupDataSE)
}

void OrnamentGroupDataSE::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  ornamentgroupname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

OrnamentGroupDataSE::~OrnamentGroupDataSE() {
  // @@protoc_insertion_point(destructor:pb.OrnamentGroupDataSE)
  SharedDtor();
}

void OrnamentGroupDataSE::SharedDtor() {
  if (ornamentgroupname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete ornamentgroupname_;
  }
  if (this != default_instance_) {
  }
}

void OrnamentGroupDataSE::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* OrnamentGroupDataSE::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return OrnamentGroupDataSE_descriptor_;
}

const OrnamentGroupDataSE& OrnamentGroupDataSE::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_module_2fNationalWarMapSE_2eproto();
  return *default_instance_;
}

OrnamentGroupDataSE* OrnamentGroupDataSE::default_instance_ = NULL;

OrnamentGroupDataSE* OrnamentGroupDataSE::New() const {
  return new OrnamentGroupDataSE;
}

void OrnamentGroupDataSE::Clear() {
  if (has_ornamentgroupname()) {
    if (ornamentgroupname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
      ornamentgroupname_->clear();
    }
  }
  grididxarr_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool OrnamentGroupDataSE::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.OrnamentGroupDataSE)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string OrnamentGroupName = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ornamentgroupname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->ornamentgroupname().data(), this->ornamentgroupname().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ornamentgroupname");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_GridIdxArr;
        break;
      }

      // repeated int32 GridIdxArr = 2;
      case 2: {
        if (tag == 16) {
         parse_GridIdxArr:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 16, input, this->mutable_grididxarr())));
        } else if (tag == 18) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_grididxarr())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_GridIdxArr;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.OrnamentGroupDataSE)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.OrnamentGroupDataSE)
  return false;
#undef DO_
}

void OrnamentGroupDataSE::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.OrnamentGroupDataSE)
  // optional string OrnamentGroupName = 1;
  if (has_ornamentgroupname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->ornamentgroupname().data(), this->ornamentgroupname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ornamentgroupname");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->ornamentgroupname(), output);
  }

  // repeated int32 GridIdxArr = 2;
  for (int i = 0; i < this->grididxarr_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      2, this->grididxarr(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.OrnamentGroupDataSE)
}

::google::protobuf::uint8* OrnamentGroupDataSE::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.OrnamentGroupDataSE)
  // optional string OrnamentGroupName = 1;
  if (has_ornamentgroupname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->ornamentgroupname().data(), this->ornamentgroupname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ornamentgroupname");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->ornamentgroupname(), target);
  }

  // repeated int32 GridIdxArr = 2;
  for (int i = 0; i < this->grididxarr_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(2, this->grididxarr(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.OrnamentGroupDataSE)
  return target;
}

int OrnamentGroupDataSE::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string OrnamentGroupName = 1;
    if (has_ornamentgroupname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->ornamentgroupname());
    }

  }
  // repeated int32 GridIdxArr = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->grididxarr_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->grididxarr(i));
    }
    total_size += 1 * this->grididxarr_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void OrnamentGroupDataSE::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const OrnamentGroupDataSE* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const OrnamentGroupDataSE*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void OrnamentGroupDataSE::MergeFrom(const OrnamentGroupDataSE& from) {
  GOOGLE_CHECK_NE(&from, this);
  grididxarr_.MergeFrom(from.grididxarr_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ornamentgroupname()) {
      set_ornamentgroupname(from.ornamentgroupname());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void OrnamentGroupDataSE::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OrnamentGroupDataSE::CopyFrom(const OrnamentGroupDataSE& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OrnamentGroupDataSE::IsInitialized() const {

  return true;
}

void OrnamentGroupDataSE::Swap(OrnamentGroupDataSE* other) {
  if (other != this) {
    std::swap(ornamentgroupname_, other->ornamentgroupname_);
    grididxarr_.Swap(&other->grididxarr_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata OrnamentGroupDataSE::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = OrnamentGroupDataSE_descriptor_;
  metadata.reflection = OrnamentGroupDataSE_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace pb

// @@protoc_insertion_point(global_scope)
