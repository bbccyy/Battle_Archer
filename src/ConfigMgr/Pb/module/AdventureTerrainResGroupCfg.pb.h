// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: module/AdventureTerrainResGroupCfg.proto

#ifndef PROTOBUF_module_2fAdventureTerrainResGroupCfg_2eproto__INCLUDED
#define PROTOBUF_module_2fAdventureTerrainResGroupCfg_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace pb {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_module_2fAdventureTerrainResGroupCfg_2eproto();
void protobuf_AssignDesc_module_2fAdventureTerrainResGroupCfg_2eproto();
void protobuf_ShutdownFile_module_2fAdventureTerrainResGroupCfg_2eproto();

class TerrainResConf;
class TerrainResGroupConf;
class AdventureTerrainResGroupCfg;

// ===================================================================

/*FOR2LUA
<Record>
	<name>TerrainResConf</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>module/AdventureTerrainResGroupCfg.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TerrainResConf : public ::google::protobuf::Message {
 public:
  TerrainResConf();
  virtual ~TerrainResConf();

  TerrainResConf(const TerrainResConf& from);

  inline TerrainResConf& operator=(const TerrainResConf& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TerrainResConf& default_instance();

  void Swap(TerrainResConf* other);

  // implements Message ----------------------------------------------

  TerrainResConf* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TerrainResConf& from);
  void MergeFrom(const TerrainResConf& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 ResId = 1;
  inline bool has_resid() const;
  inline void clear_resid();
  static const int kResIdFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TerrainResConf</name>
  	<Function>
  		<name>resid</name>
  		<replaceName>ResId</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_resid</name>
  		<replaceName>ResId</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_resid</name>
  		<replaceName>ResId</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 resid() const;
  inline void set_resid(::google::protobuf::uint32 value);

  // optional int32 Weight = 2;
  inline bool has_weight() const;
  inline void clear_weight();
  static const int kWeightFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TerrainResConf</name>
  	<Function>
  		<name>weight</name>
  		<replaceName>Weight</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_weight</name>
  		<replaceName>Weight</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_weight</name>
  		<replaceName>Weight</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::int32 weight() const;
  inline void set_weight(::google::protobuf::int32 value);

  // optional string Path = 3;
  inline bool has_path() const;
  inline void clear_path();
  static const int kPathFieldNumber = 3;
  /*FOR2LUA
  <Record>
  	<name>TerrainResConf</name>
  	<Function>
  		<name>path</name>
  		<replaceName>Path</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_path</name>
  		<replaceName>Path</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_path</name>
  		<replaceName>Path</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::std::string& path() const;
  inline void set_path(const ::std::string& value);
  inline void set_path(const char* value);
  inline void set_path(const char* value, size_t size);
  inline ::std::string* mutable_path();
  inline ::std::string* release_path();
  inline void set_allocated_path(::std::string* path);

  // @@protoc_insertion_point(class_scope:pb.TerrainResConf)
 private:
  inline void set_has_resid();
  inline void clear_has_resid();
  inline void set_has_weight();
  inline void clear_has_weight();
  inline void set_has_path();
  inline void clear_has_path();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 resid_;
  ::google::protobuf::int32 weight_;
  ::std::string* path_;
  friend void  protobuf_AddDesc_module_2fAdventureTerrainResGroupCfg_2eproto();
  friend void protobuf_AssignDesc_module_2fAdventureTerrainResGroupCfg_2eproto();
  friend void protobuf_ShutdownFile_module_2fAdventureTerrainResGroupCfg_2eproto();

  void InitAsDefaultInstance();
  static TerrainResConf* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TerrainResGroupConf</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>module/AdventureTerrainResGroupCfg.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TerrainResGroupConf : public ::google::protobuf::Message {
 public:
  TerrainResGroupConf();
  virtual ~TerrainResGroupConf();

  TerrainResGroupConf(const TerrainResGroupConf& from);

  inline TerrainResGroupConf& operator=(const TerrainResGroupConf& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TerrainResGroupConf& default_instance();

  void Swap(TerrainResGroupConf* other);

  // implements Message ----------------------------------------------

  TerrainResGroupConf* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TerrainResGroupConf& from);
  void MergeFrom(const TerrainResGroupConf& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 TerrainId = 1;
  inline bool has_terrainid() const;
  inline void clear_terrainid();
  static const int kTerrainIdFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TerrainResGroupConf</name>
  	<Function>
  		<name>terrainid</name>
  		<replaceName>TerrainId</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_terrainid</name>
  		<replaceName>TerrainId</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_terrainid</name>
  		<replaceName>TerrainId</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 terrainid() const;
  inline void set_terrainid(::google::protobuf::uint32 value);

  // optional string ResGroupName = 2;
  inline bool has_resgroupname() const;
  inline void clear_resgroupname();
  static const int kResGroupNameFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TerrainResGroupConf</name>
  	<Function>
  		<name>resgroupname</name>
  		<replaceName>ResGroupName</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_resgroupname</name>
  		<replaceName>ResGroupName</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_resgroupname</name>
  		<replaceName>ResGroupName</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::std::string& resgroupname() const;
  inline void set_resgroupname(const ::std::string& value);
  inline void set_resgroupname(const char* value);
  inline void set_resgroupname(const char* value, size_t size);
  inline ::std::string* mutable_resgroupname();
  inline ::std::string* release_resgroupname();
  inline void set_allocated_resgroupname(::std::string* resgroupname);

  // optional bool IsObstacle = 3;
  inline bool has_isobstacle() const;
  inline void clear_isobstacle();
  static const int kIsObstacleFieldNumber = 3;
  /*FOR2LUA
  <Record>
  	<name>TerrainResGroupConf</name>
  	<Function>
  		<name>isobstacle</name>
  		<replaceName>IsObstacle</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_isobstacle</name>
  		<replaceName>IsObstacle</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_isobstacle</name>
  		<replaceName>IsObstacle</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline bool isobstacle() const;
  inline void set_isobstacle(bool value);

  // repeated .pb.TerrainResConf TerrainResArr = 4;
  inline int terrainresarr_size() const;
  inline void clear_terrainresarr();
  static const int kTerrainResArrFieldNumber = 4;
  /*FOR2LUA
  <Record>
  	<name>TerrainResGroupConf</name>
  	<Function>
  		<name>terrainresarr</name>
  		<replaceName>TerrainResArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_terrainresarr</name>
  		<replaceName>TerrainResArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_terrainresarr</name>
  		<replaceName>TerrainResArr</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_terrainresarr</name>
  		<replaceName>TerrainResArr</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>terrainresarr_size</name>
  		<replaceName>TerrainResArr</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TerrainResConf& terrainresarr(int index) const;
  inline ::pb::TerrainResConf* mutable_terrainresarr(int index);
  inline ::pb::TerrainResConf* add_terrainresarr();
  inline const ::google::protobuf::RepeatedPtrField< ::pb::TerrainResConf >&
      terrainresarr() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb::TerrainResConf >*
      mutable_terrainresarr();

  // @@protoc_insertion_point(class_scope:pb.TerrainResGroupConf)
 private:
  inline void set_has_terrainid();
  inline void clear_has_terrainid();
  inline void set_has_resgroupname();
  inline void clear_has_resgroupname();
  inline void set_has_isobstacle();
  inline void clear_has_isobstacle();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* resgroupname_;
  ::google::protobuf::uint32 terrainid_;
  bool isobstacle_;
  ::google::protobuf::RepeatedPtrField< ::pb::TerrainResConf > terrainresarr_;
  friend void  protobuf_AddDesc_module_2fAdventureTerrainResGroupCfg_2eproto();
  friend void protobuf_AssignDesc_module_2fAdventureTerrainResGroupCfg_2eproto();
  friend void protobuf_ShutdownFile_module_2fAdventureTerrainResGroupCfg_2eproto();

  void InitAsDefaultInstance();
  static TerrainResGroupConf* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>AdventureTerrainResGroupCfg</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>module/AdventureTerrainResGroupCfg.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class AdventureTerrainResGroupCfg : public ::google::protobuf::Message {
 public:
  AdventureTerrainResGroupCfg();
  virtual ~AdventureTerrainResGroupCfg();

  AdventureTerrainResGroupCfg(const AdventureTerrainResGroupCfg& from);

  inline AdventureTerrainResGroupCfg& operator=(const AdventureTerrainResGroupCfg& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const AdventureTerrainResGroupCfg& default_instance();

  void Swap(AdventureTerrainResGroupCfg* other);

  // implements Message ----------------------------------------------

  AdventureTerrainResGroupCfg* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const AdventureTerrainResGroupCfg& from);
  void MergeFrom(const AdventureTerrainResGroupCfg& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 Id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>AdventureTerrainResGroupCfg</name>
  	<Function>
  		<name>id</name>
  		<replaceName>Id</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_id</name>
  		<replaceName>Id</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_id</name>
  		<replaceName>Id</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::int32 id() const;
  inline void set_id(::google::protobuf::int32 value);

  // repeated .pb.TerrainResGroupConf TerrainResGroupArr = 2;
  inline int terrainresgrouparr_size() const;
  inline void clear_terrainresgrouparr();
  static const int kTerrainResGroupArrFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>AdventureTerrainResGroupCfg</name>
  	<Function>
  		<name>terrainresgrouparr</name>
  		<replaceName>TerrainResGroupArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_terrainresgrouparr</name>
  		<replaceName>TerrainResGroupArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_terrainresgrouparr</name>
  		<replaceName>TerrainResGroupArr</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_terrainresgrouparr</name>
  		<replaceName>TerrainResGroupArr</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>terrainresgrouparr_size</name>
  		<replaceName>TerrainResGroupArr</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TerrainResGroupConf& terrainresgrouparr(int index) const;
  inline ::pb::TerrainResGroupConf* mutable_terrainresgrouparr(int index);
  inline ::pb::TerrainResGroupConf* add_terrainresgrouparr();
  inline const ::google::protobuf::RepeatedPtrField< ::pb::TerrainResGroupConf >&
      terrainresgrouparr() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb::TerrainResGroupConf >*
      mutable_terrainresgrouparr();

  // @@protoc_insertion_point(class_scope:pb.AdventureTerrainResGroupCfg)
 private:
  inline void set_has_id();
  inline void clear_has_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::pb::TerrainResGroupConf > terrainresgrouparr_;
  ::google::protobuf::int32 id_;
  friend void  protobuf_AddDesc_module_2fAdventureTerrainResGroupCfg_2eproto();
  friend void protobuf_AssignDesc_module_2fAdventureTerrainResGroupCfg_2eproto();
  friend void protobuf_ShutdownFile_module_2fAdventureTerrainResGroupCfg_2eproto();

  void InitAsDefaultInstance();
  static AdventureTerrainResGroupCfg* default_instance_;
};
// ===================================================================


// ===================================================================

// TerrainResConf

// optional uint32 ResId = 1;
inline bool TerrainResConf::has_resid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TerrainResConf::set_has_resid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TerrainResConf::clear_has_resid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TerrainResConf::clear_resid() {
  resid_ = 0u;
  clear_has_resid();
}
inline ::google::protobuf::uint32 TerrainResConf::resid() const {
  // @@protoc_insertion_point(field_get:pb.TerrainResConf.ResId)
  return resid_;
}
inline void TerrainResConf::set_resid(::google::protobuf::uint32 value) {
  set_has_resid();
  resid_ = value;
  // @@protoc_insertion_point(field_set:pb.TerrainResConf.ResId)
}

// optional int32 Weight = 2;
inline bool TerrainResConf::has_weight() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TerrainResConf::set_has_weight() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TerrainResConf::clear_has_weight() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TerrainResConf::clear_weight() {
  weight_ = 0;
  clear_has_weight();
}
inline ::google::protobuf::int32 TerrainResConf::weight() const {
  // @@protoc_insertion_point(field_get:pb.TerrainResConf.Weight)
  return weight_;
}
inline void TerrainResConf::set_weight(::google::protobuf::int32 value) {
  set_has_weight();
  weight_ = value;
  // @@protoc_insertion_point(field_set:pb.TerrainResConf.Weight)
}

// optional string Path = 3;
inline bool TerrainResConf::has_path() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void TerrainResConf::set_has_path() {
  _has_bits_[0] |= 0x00000004u;
}
inline void TerrainResConf::clear_has_path() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void TerrainResConf::clear_path() {
  if (path_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    path_->clear();
  }
  clear_has_path();
}
inline const ::std::string& TerrainResConf::path() const {
  // @@protoc_insertion_point(field_get:pb.TerrainResConf.Path)
  return *path_;
}
inline void TerrainResConf::set_path(const ::std::string& value) {
  set_has_path();
  if (path_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    path_ = new ::std::string;
  }
  path_->assign(value);
  // @@protoc_insertion_point(field_set:pb.TerrainResConf.Path)
}
inline void TerrainResConf::set_path(const char* value) {
  set_has_path();
  if (path_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    path_ = new ::std::string;
  }
  path_->assign(value);
  // @@protoc_insertion_point(field_set_char:pb.TerrainResConf.Path)
}
inline void TerrainResConf::set_path(const char* value, size_t size) {
  set_has_path();
  if (path_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    path_ = new ::std::string;
  }
  path_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:pb.TerrainResConf.Path)
}
inline ::std::string* TerrainResConf::mutable_path() {
  set_has_path();
  if (path_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    path_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:pb.TerrainResConf.Path)
  return path_;
}
inline ::std::string* TerrainResConf::release_path() {
  clear_has_path();
  if (path_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = path_;
    path_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void TerrainResConf::set_allocated_path(::std::string* path) {
  if (path_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete path_;
  }
  if (path) {
    set_has_path();
    path_ = path;
  } else {
    clear_has_path();
    path_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:pb.TerrainResConf.Path)
}

// -------------------------------------------------------------------

// TerrainResGroupConf

// optional uint32 TerrainId = 1;
inline bool TerrainResGroupConf::has_terrainid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TerrainResGroupConf::set_has_terrainid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TerrainResGroupConf::clear_has_terrainid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TerrainResGroupConf::clear_terrainid() {
  terrainid_ = 0u;
  clear_has_terrainid();
}
inline ::google::protobuf::uint32 TerrainResGroupConf::terrainid() const {
  // @@protoc_insertion_point(field_get:pb.TerrainResGroupConf.TerrainId)
  return terrainid_;
}
inline void TerrainResGroupConf::set_terrainid(::google::protobuf::uint32 value) {
  set_has_terrainid();
  terrainid_ = value;
  // @@protoc_insertion_point(field_set:pb.TerrainResGroupConf.TerrainId)
}

// optional string ResGroupName = 2;
inline bool TerrainResGroupConf::has_resgroupname() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TerrainResGroupConf::set_has_resgroupname() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TerrainResGroupConf::clear_has_resgroupname() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TerrainResGroupConf::clear_resgroupname() {
  if (resgroupname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    resgroupname_->clear();
  }
  clear_has_resgroupname();
}
inline const ::std::string& TerrainResGroupConf::resgroupname() const {
  // @@protoc_insertion_point(field_get:pb.TerrainResGroupConf.ResGroupName)
  return *resgroupname_;
}
inline void TerrainResGroupConf::set_resgroupname(const ::std::string& value) {
  set_has_resgroupname();
  if (resgroupname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    resgroupname_ = new ::std::string;
  }
  resgroupname_->assign(value);
  // @@protoc_insertion_point(field_set:pb.TerrainResGroupConf.ResGroupName)
}
inline void TerrainResGroupConf::set_resgroupname(const char* value) {
  set_has_resgroupname();
  if (resgroupname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    resgroupname_ = new ::std::string;
  }
  resgroupname_->assign(value);
  // @@protoc_insertion_point(field_set_char:pb.TerrainResGroupConf.ResGroupName)
}
inline void TerrainResGroupConf::set_resgroupname(const char* value, size_t size) {
  set_has_resgroupname();
  if (resgroupname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    resgroupname_ = new ::std::string;
  }
  resgroupname_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:pb.TerrainResGroupConf.ResGroupName)
}
inline ::std::string* TerrainResGroupConf::mutable_resgroupname() {
  set_has_resgroupname();
  if (resgroupname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    resgroupname_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:pb.TerrainResGroupConf.ResGroupName)
  return resgroupname_;
}
inline ::std::string* TerrainResGroupConf::release_resgroupname() {
  clear_has_resgroupname();
  if (resgroupname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = resgroupname_;
    resgroupname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void TerrainResGroupConf::set_allocated_resgroupname(::std::string* resgroupname) {
  if (resgroupname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete resgroupname_;
  }
  if (resgroupname) {
    set_has_resgroupname();
    resgroupname_ = resgroupname;
  } else {
    clear_has_resgroupname();
    resgroupname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:pb.TerrainResGroupConf.ResGroupName)
}

// optional bool IsObstacle = 3;
inline bool TerrainResGroupConf::has_isobstacle() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void TerrainResGroupConf::set_has_isobstacle() {
  _has_bits_[0] |= 0x00000004u;
}
inline void TerrainResGroupConf::clear_has_isobstacle() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void TerrainResGroupConf::clear_isobstacle() {
  isobstacle_ = false;
  clear_has_isobstacle();
}
inline bool TerrainResGroupConf::isobstacle() const {
  // @@protoc_insertion_point(field_get:pb.TerrainResGroupConf.IsObstacle)
  return isobstacle_;
}
inline void TerrainResGroupConf::set_isobstacle(bool value) {
  set_has_isobstacle();
  isobstacle_ = value;
  // @@protoc_insertion_point(field_set:pb.TerrainResGroupConf.IsObstacle)
}

// repeated .pb.TerrainResConf TerrainResArr = 4;
inline int TerrainResGroupConf::terrainresarr_size() const {
  return terrainresarr_.size();
}
inline void TerrainResGroupConf::clear_terrainresarr() {
  terrainresarr_.Clear();
}
inline const ::pb::TerrainResConf& TerrainResGroupConf::terrainresarr(int index) const {
  // @@protoc_insertion_point(field_get:pb.TerrainResGroupConf.TerrainResArr)
  return terrainresarr_.Get(index);
}
inline ::pb::TerrainResConf* TerrainResGroupConf::mutable_terrainresarr(int index) {
  // @@protoc_insertion_point(field_mutable:pb.TerrainResGroupConf.TerrainResArr)
  return terrainresarr_.Mutable(index);
}
inline ::pb::TerrainResConf* TerrainResGroupConf::add_terrainresarr() {
  // @@protoc_insertion_point(field_add:pb.TerrainResGroupConf.TerrainResArr)
  return terrainresarr_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::TerrainResConf >&
TerrainResGroupConf::terrainresarr() const {
  // @@protoc_insertion_point(field_list:pb.TerrainResGroupConf.TerrainResArr)
  return terrainresarr_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb::TerrainResConf >*
TerrainResGroupConf::mutable_terrainresarr() {
  // @@protoc_insertion_point(field_mutable_list:pb.TerrainResGroupConf.TerrainResArr)
  return &terrainresarr_;
}

// -------------------------------------------------------------------

// AdventureTerrainResGroupCfg

// optional int32 Id = 1;
inline bool AdventureTerrainResGroupCfg::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void AdventureTerrainResGroupCfg::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void AdventureTerrainResGroupCfg::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void AdventureTerrainResGroupCfg::clear_id() {
  id_ = 0;
  clear_has_id();
}
inline ::google::protobuf::int32 AdventureTerrainResGroupCfg::id() const {
  // @@protoc_insertion_point(field_get:pb.AdventureTerrainResGroupCfg.Id)
  return id_;
}
inline void AdventureTerrainResGroupCfg::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:pb.AdventureTerrainResGroupCfg.Id)
}

// repeated .pb.TerrainResGroupConf TerrainResGroupArr = 2;
inline int AdventureTerrainResGroupCfg::terrainresgrouparr_size() const {
  return terrainresgrouparr_.size();
}
inline void AdventureTerrainResGroupCfg::clear_terrainresgrouparr() {
  terrainresgrouparr_.Clear();
}
inline const ::pb::TerrainResGroupConf& AdventureTerrainResGroupCfg::terrainresgrouparr(int index) const {
  // @@protoc_insertion_point(field_get:pb.AdventureTerrainResGroupCfg.TerrainResGroupArr)
  return terrainresgrouparr_.Get(index);
}
inline ::pb::TerrainResGroupConf* AdventureTerrainResGroupCfg::mutable_terrainresgrouparr(int index) {
  // @@protoc_insertion_point(field_mutable:pb.AdventureTerrainResGroupCfg.TerrainResGroupArr)
  return terrainresgrouparr_.Mutable(index);
}
inline ::pb::TerrainResGroupConf* AdventureTerrainResGroupCfg::add_terrainresgrouparr() {
  // @@protoc_insertion_point(field_add:pb.AdventureTerrainResGroupCfg.TerrainResGroupArr)
  return terrainresgrouparr_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::TerrainResGroupConf >&
AdventureTerrainResGroupCfg::terrainresgrouparr() const {
  // @@protoc_insertion_point(field_list:pb.AdventureTerrainResGroupCfg.TerrainResGroupArr)
  return terrainresgrouparr_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb::TerrainResGroupConf >*
AdventureTerrainResGroupCfg::mutable_terrainresgrouparr() {
  // @@protoc_insertion_point(field_mutable_list:pb.AdventureTerrainResGroupCfg.TerrainResGroupArr)
  return &terrainresgrouparr_;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace pb

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_module_2fAdventureTerrainResGroupCfg_2eproto__INCLUDED
