// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: net/ActSoulChainActivity.proto

#ifndef PROTOBUF_net_2fActSoulChainActivity_2eproto__INCLUDED
#define PROTOBUF_net_2fActSoulChainActivity_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
#include "net/CommonReward.pb.h"
#include "net/Battle.pb.h"
#include "net/User.pb.h"
// @@protoc_insertion_point(includes)

namespace pb {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_net_2fActSoulChainActivity_2eproto();
void protobuf_AssignDesc_net_2fActSoulChainActivity_2eproto();
void protobuf_ShutdownFile_net_2fActSoulChainActivity_2eproto();

class TActSoulChainActivityBattleArmyInfo;
class TActSoulChainActivityStrongHoldInfo;
class TActSoulChainActivityChapterInfo;
class TActSoulChainActivityHidPosInfo;
class TActSoulChainActivityGetInfoRsp;
class TActSoulChainActivityStrongHoldInfoReq;
class TActSoulChainActivityStrongHoldInfoRsp;
class TActSoulChainActivityGetBattleArgsReq;
class TActSoulChainActivityGetBattleArgsRsp;
class TActSoulChainActivityReportBattleReq;
class TActSoulChainActivityReportBattleRsp;
class TActSoulChainActivitySetAtkFormationReq;
class TActSoulChainActivityGetAtkFormationRsp;

// ===================================================================

/*FOR2LUA
<Record>
	<name>TActSoulChainActivityBattleArmyInfo</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/ActSoulChainActivity.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TActSoulChainActivityBattleArmyInfo : public ::google::protobuf::Message {
 public:
  TActSoulChainActivityBattleArmyInfo();
  virtual ~TActSoulChainActivityBattleArmyInfo();

  TActSoulChainActivityBattleArmyInfo(const TActSoulChainActivityBattleArmyInfo& from);

  inline TActSoulChainActivityBattleArmyInfo& operator=(const TActSoulChainActivityBattleArmyInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TActSoulChainActivityBattleArmyInfo& default_instance();

  void Swap(TActSoulChainActivityBattleArmyInfo* other);

  // implements Message ----------------------------------------------

  TActSoulChainActivityBattleArmyInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TActSoulChainActivityBattleArmyInfo& from);
  void MergeFrom(const TActSoulChainActivityBattleArmyInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .pb.TArmyInfo ArmyArr = 1;
  inline int armyarr_size() const;
  inline void clear_armyarr();
  static const int kArmyArrFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TActSoulChainActivityBattleArmyInfo</name>
  	<Function>
  		<name>armyarr</name>
  		<replaceName>ArmyArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_armyarr</name>
  		<replaceName>ArmyArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_armyarr</name>
  		<replaceName>ArmyArr</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_armyarr</name>
  		<replaceName>ArmyArr</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>armyarr_size</name>
  		<replaceName>ArmyArr</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TArmyInfo& armyarr(int index) const;
  inline ::pb::TArmyInfo* mutable_armyarr(int index);
  inline ::pb::TArmyInfo* add_armyarr();
  inline const ::google::protobuf::RepeatedPtrField< ::pb::TArmyInfo >&
      armyarr() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb::TArmyInfo >*
      mutable_armyarr();

  // optional uint64 FightForce = 2;
  inline bool has_fightforce() const;
  inline void clear_fightforce();
  static const int kFightForceFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TActSoulChainActivityBattleArmyInfo</name>
  	<Function>
  		<name>fightforce</name>
  		<replaceName>FightForce</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_fightforce</name>
  		<replaceName>FightForce</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_fightforce</name>
  		<replaceName>FightForce</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint64 fightforce() const;
  inline void set_fightforce(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:pb.TActSoulChainActivityBattleArmyInfo)
 private:
  inline void set_has_fightforce();
  inline void clear_has_fightforce();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::pb::TArmyInfo > armyarr_;
  ::google::protobuf::uint64 fightforce_;
  friend void  protobuf_AddDesc_net_2fActSoulChainActivity_2eproto();
  friend void protobuf_AssignDesc_net_2fActSoulChainActivity_2eproto();
  friend void protobuf_ShutdownFile_net_2fActSoulChainActivity_2eproto();

  void InitAsDefaultInstance();
  static TActSoulChainActivityBattleArmyInfo* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TActSoulChainActivityStrongHoldInfo</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/ActSoulChainActivity.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TActSoulChainActivityStrongHoldInfo : public ::google::protobuf::Message {
 public:
  TActSoulChainActivityStrongHoldInfo();
  virtual ~TActSoulChainActivityStrongHoldInfo();

  TActSoulChainActivityStrongHoldInfo(const TActSoulChainActivityStrongHoldInfo& from);

  inline TActSoulChainActivityStrongHoldInfo& operator=(const TActSoulChainActivityStrongHoldInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TActSoulChainActivityStrongHoldInfo& default_instance();

  void Swap(TActSoulChainActivityStrongHoldInfo* other);

  // implements Message ----------------------------------------------

  TActSoulChainActivityStrongHoldInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TActSoulChainActivityStrongHoldInfo& from);
  void MergeFrom(const TActSoulChainActivityStrongHoldInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 stronghold = 1;
  inline bool has_stronghold() const;
  inline void clear_stronghold();
  static const int kStrongholdFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TActSoulChainActivityStrongHoldInfo</name>
  	<Function>
  		<name>stronghold</name>
  		<replaceName>stronghold</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_stronghold</name>
  		<replaceName>stronghold</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_stronghold</name>
  		<replaceName>stronghold</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 stronghold() const;
  inline void set_stronghold(::google::protobuf::uint32 value);

  // repeated .pb.TActSoulChainActivityBattleArmyInfo BattleArmyArr = 2;
  inline int battlearmyarr_size() const;
  inline void clear_battlearmyarr();
  static const int kBattleArmyArrFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TActSoulChainActivityStrongHoldInfo</name>
  	<Function>
  		<name>battlearmyarr</name>
  		<replaceName>BattleArmyArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_battlearmyarr</name>
  		<replaceName>BattleArmyArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_battlearmyarr</name>
  		<replaceName>BattleArmyArr</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_battlearmyarr</name>
  		<replaceName>BattleArmyArr</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>battlearmyarr_size</name>
  		<replaceName>BattleArmyArr</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TActSoulChainActivityBattleArmyInfo& battlearmyarr(int index) const;
  inline ::pb::TActSoulChainActivityBattleArmyInfo* mutable_battlearmyarr(int index);
  inline ::pb::TActSoulChainActivityBattleArmyInfo* add_battlearmyarr();
  inline const ::google::protobuf::RepeatedPtrField< ::pb::TActSoulChainActivityBattleArmyInfo >&
      battlearmyarr() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb::TActSoulChainActivityBattleArmyInfo >*
      mutable_battlearmyarr();

  // optional bool IsPass = 3;
  inline bool has_ispass() const;
  inline void clear_ispass();
  static const int kIsPassFieldNumber = 3;
  /*FOR2LUA
  <Record>
  	<name>TActSoulChainActivityStrongHoldInfo</name>
  	<Function>
  		<name>ispass</name>
  		<replaceName>IsPass</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_ispass</name>
  		<replaceName>IsPass</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_ispass</name>
  		<replaceName>IsPass</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline bool ispass() const;
  inline void set_ispass(bool value);

  // @@protoc_insertion_point(class_scope:pb.TActSoulChainActivityStrongHoldInfo)
 private:
  inline void set_has_stronghold();
  inline void clear_has_stronghold();
  inline void set_has_ispass();
  inline void clear_has_ispass();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::pb::TActSoulChainActivityBattleArmyInfo > battlearmyarr_;
  ::google::protobuf::uint32 stronghold_;
  bool ispass_;
  friend void  protobuf_AddDesc_net_2fActSoulChainActivity_2eproto();
  friend void protobuf_AssignDesc_net_2fActSoulChainActivity_2eproto();
  friend void protobuf_ShutdownFile_net_2fActSoulChainActivity_2eproto();

  void InitAsDefaultInstance();
  static TActSoulChainActivityStrongHoldInfo* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TActSoulChainActivityChapterInfo</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/ActSoulChainActivity.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TActSoulChainActivityChapterInfo : public ::google::protobuf::Message {
 public:
  TActSoulChainActivityChapterInfo();
  virtual ~TActSoulChainActivityChapterInfo();

  TActSoulChainActivityChapterInfo(const TActSoulChainActivityChapterInfo& from);

  inline TActSoulChainActivityChapterInfo& operator=(const TActSoulChainActivityChapterInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TActSoulChainActivityChapterInfo& default_instance();

  void Swap(TActSoulChainActivityChapterInfo* other);

  // implements Message ----------------------------------------------

  TActSoulChainActivityChapterInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TActSoulChainActivityChapterInfo& from);
  void MergeFrom(const TActSoulChainActivityChapterInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 ChapterId = 1;
  inline bool has_chapterid() const;
  inline void clear_chapterid();
  static const int kChapterIdFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TActSoulChainActivityChapterInfo</name>
  	<Function>
  		<name>chapterid</name>
  		<replaceName>ChapterId</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_chapterid</name>
  		<replaceName>ChapterId</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_chapterid</name>
  		<replaceName>ChapterId</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 chapterid() const;
  inline void set_chapterid(::google::protobuf::uint32 value);

  // optional bool IsPass = 2;
  inline bool has_ispass() const;
  inline void clear_ispass();
  static const int kIsPassFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TActSoulChainActivityChapterInfo</name>
  	<Function>
  		<name>ispass</name>
  		<replaceName>IsPass</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_ispass</name>
  		<replaceName>IsPass</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_ispass</name>
  		<replaceName>IsPass</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline bool ispass() const;
  inline void set_ispass(bool value);

  // @@protoc_insertion_point(class_scope:pb.TActSoulChainActivityChapterInfo)
 private:
  inline void set_has_chapterid();
  inline void clear_has_chapterid();
  inline void set_has_ispass();
  inline void clear_has_ispass();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 chapterid_;
  bool ispass_;
  friend void  protobuf_AddDesc_net_2fActSoulChainActivity_2eproto();
  friend void protobuf_AssignDesc_net_2fActSoulChainActivity_2eproto();
  friend void protobuf_ShutdownFile_net_2fActSoulChainActivity_2eproto();

  void InitAsDefaultInstance();
  static TActSoulChainActivityChapterInfo* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TActSoulChainActivityHidPosInfo</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/ActSoulChainActivity.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TActSoulChainActivityHidPosInfo : public ::google::protobuf::Message {
 public:
  TActSoulChainActivityHidPosInfo();
  virtual ~TActSoulChainActivityHidPosInfo();

  TActSoulChainActivityHidPosInfo(const TActSoulChainActivityHidPosInfo& from);

  inline TActSoulChainActivityHidPosInfo& operator=(const TActSoulChainActivityHidPosInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TActSoulChainActivityHidPosInfo& default_instance();

  void Swap(TActSoulChainActivityHidPosInfo* other);

  // implements Message ----------------------------------------------

  TActSoulChainActivityHidPosInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TActSoulChainActivityHidPosInfo& from);
  void MergeFrom(const TActSoulChainActivityHidPosInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 Hid = 1;
  inline bool has_hid() const;
  inline void clear_hid();
  static const int kHidFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TActSoulChainActivityHidPosInfo</name>
  	<Function>
  		<name>hid</name>
  		<replaceName>Hid</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_hid</name>
  		<replaceName>Hid</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_hid</name>
  		<replaceName>Hid</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 hid() const;
  inline void set_hid(::google::protobuf::uint32 value);

  // optional uint32 Pos = 2;
  inline bool has_pos() const;
  inline void clear_pos();
  static const int kPosFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TActSoulChainActivityHidPosInfo</name>
  	<Function>
  		<name>pos</name>
  		<replaceName>Pos</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_pos</name>
  		<replaceName>Pos</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_pos</name>
  		<replaceName>Pos</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 pos() const;
  inline void set_pos(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:pb.TActSoulChainActivityHidPosInfo)
 private:
  inline void set_has_hid();
  inline void clear_has_hid();
  inline void set_has_pos();
  inline void clear_has_pos();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 hid_;
  ::google::protobuf::uint32 pos_;
  friend void  protobuf_AddDesc_net_2fActSoulChainActivity_2eproto();
  friend void protobuf_AssignDesc_net_2fActSoulChainActivity_2eproto();
  friend void protobuf_ShutdownFile_net_2fActSoulChainActivity_2eproto();

  void InitAsDefaultInstance();
  static TActSoulChainActivityHidPosInfo* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TActSoulChainActivityGetInfoRsp</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/ActSoulChainActivity.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TActSoulChainActivityGetInfoRsp : public ::google::protobuf::Message {
 public:
  TActSoulChainActivityGetInfoRsp();
  virtual ~TActSoulChainActivityGetInfoRsp();

  TActSoulChainActivityGetInfoRsp(const TActSoulChainActivityGetInfoRsp& from);

  inline TActSoulChainActivityGetInfoRsp& operator=(const TActSoulChainActivityGetInfoRsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TActSoulChainActivityGetInfoRsp& default_instance();

  void Swap(TActSoulChainActivityGetInfoRsp* other);

  // implements Message ----------------------------------------------

  TActSoulChainActivityGetInfoRsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TActSoulChainActivityGetInfoRsp& from);
  void MergeFrom(const TActSoulChainActivityGetInfoRsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .pb.TActSoulChainActivityChapterInfo ChapterInfoArray = 1;
  inline int chapterinfoarray_size() const;
  inline void clear_chapterinfoarray();
  static const int kChapterInfoArrayFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TActSoulChainActivityGetInfoRsp</name>
  	<Function>
  		<name>chapterinfoarray</name>
  		<replaceName>ChapterInfoArray</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_chapterinfoarray</name>
  		<replaceName>ChapterInfoArray</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_chapterinfoarray</name>
  		<replaceName>ChapterInfoArray</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_chapterinfoarray</name>
  		<replaceName>ChapterInfoArray</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>chapterinfoarray_size</name>
  		<replaceName>ChapterInfoArray</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TActSoulChainActivityChapterInfo& chapterinfoarray(int index) const;
  inline ::pb::TActSoulChainActivityChapterInfo* mutable_chapterinfoarray(int index);
  inline ::pb::TActSoulChainActivityChapterInfo* add_chapterinfoarray();
  inline const ::google::protobuf::RepeatedPtrField< ::pb::TActSoulChainActivityChapterInfo >&
      chapterinfoarray() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb::TActSoulChainActivityChapterInfo >*
      mutable_chapterinfoarray();

  // optional bool IsPlayAnimation = 2;
  inline bool has_isplayanimation() const;
  inline void clear_isplayanimation();
  static const int kIsPlayAnimationFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TActSoulChainActivityGetInfoRsp</name>
  	<Function>
  		<name>isplayanimation</name>
  		<replaceName>IsPlayAnimation</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_isplayanimation</name>
  		<replaceName>IsPlayAnimation</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_isplayanimation</name>
  		<replaceName>IsPlayAnimation</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline bool isplayanimation() const;
  inline void set_isplayanimation(bool value);

  // @@protoc_insertion_point(class_scope:pb.TActSoulChainActivityGetInfoRsp)
 private:
  inline void set_has_isplayanimation();
  inline void clear_has_isplayanimation();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::pb::TActSoulChainActivityChapterInfo > chapterinfoarray_;
  bool isplayanimation_;
  friend void  protobuf_AddDesc_net_2fActSoulChainActivity_2eproto();
  friend void protobuf_AssignDesc_net_2fActSoulChainActivity_2eproto();
  friend void protobuf_ShutdownFile_net_2fActSoulChainActivity_2eproto();

  void InitAsDefaultInstance();
  static TActSoulChainActivityGetInfoRsp* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TActSoulChainActivityStrongHoldInfoReq</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/ActSoulChainActivity.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TActSoulChainActivityStrongHoldInfoReq : public ::google::protobuf::Message {
 public:
  TActSoulChainActivityStrongHoldInfoReq();
  virtual ~TActSoulChainActivityStrongHoldInfoReq();

  TActSoulChainActivityStrongHoldInfoReq(const TActSoulChainActivityStrongHoldInfoReq& from);

  inline TActSoulChainActivityStrongHoldInfoReq& operator=(const TActSoulChainActivityStrongHoldInfoReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TActSoulChainActivityStrongHoldInfoReq& default_instance();

  void Swap(TActSoulChainActivityStrongHoldInfoReq* other);

  // implements Message ----------------------------------------------

  TActSoulChainActivityStrongHoldInfoReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TActSoulChainActivityStrongHoldInfoReq& from);
  void MergeFrom(const TActSoulChainActivityStrongHoldInfoReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 ChapterId = 1;
  inline bool has_chapterid() const;
  inline void clear_chapterid();
  static const int kChapterIdFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TActSoulChainActivityStrongHoldInfoReq</name>
  	<Function>
  		<name>chapterid</name>
  		<replaceName>ChapterId</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_chapterid</name>
  		<replaceName>ChapterId</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_chapterid</name>
  		<replaceName>ChapterId</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 chapterid() const;
  inline void set_chapterid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:pb.TActSoulChainActivityStrongHoldInfoReq)
 private:
  inline void set_has_chapterid();
  inline void clear_has_chapterid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 chapterid_;
  friend void  protobuf_AddDesc_net_2fActSoulChainActivity_2eproto();
  friend void protobuf_AssignDesc_net_2fActSoulChainActivity_2eproto();
  friend void protobuf_ShutdownFile_net_2fActSoulChainActivity_2eproto();

  void InitAsDefaultInstance();
  static TActSoulChainActivityStrongHoldInfoReq* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TActSoulChainActivityStrongHoldInfoRsp</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/ActSoulChainActivity.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TActSoulChainActivityStrongHoldInfoRsp : public ::google::protobuf::Message {
 public:
  TActSoulChainActivityStrongHoldInfoRsp();
  virtual ~TActSoulChainActivityStrongHoldInfoRsp();

  TActSoulChainActivityStrongHoldInfoRsp(const TActSoulChainActivityStrongHoldInfoRsp& from);

  inline TActSoulChainActivityStrongHoldInfoRsp& operator=(const TActSoulChainActivityStrongHoldInfoRsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TActSoulChainActivityStrongHoldInfoRsp& default_instance();

  void Swap(TActSoulChainActivityStrongHoldInfoRsp* other);

  // implements Message ----------------------------------------------

  TActSoulChainActivityStrongHoldInfoRsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TActSoulChainActivityStrongHoldInfoRsp& from);
  void MergeFrom(const TActSoulChainActivityStrongHoldInfoRsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .pb.TActSoulChainActivityStrongHoldInfo StrongHoldInfoArray = 1;
  inline int strongholdinfoarray_size() const;
  inline void clear_strongholdinfoarray();
  static const int kStrongHoldInfoArrayFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TActSoulChainActivityStrongHoldInfoRsp</name>
  	<Function>
  		<name>strongholdinfoarray</name>
  		<replaceName>StrongHoldInfoArray</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_strongholdinfoarray</name>
  		<replaceName>StrongHoldInfoArray</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_strongholdinfoarray</name>
  		<replaceName>StrongHoldInfoArray</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_strongholdinfoarray</name>
  		<replaceName>StrongHoldInfoArray</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>strongholdinfoarray_size</name>
  		<replaceName>StrongHoldInfoArray</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TActSoulChainActivityStrongHoldInfo& strongholdinfoarray(int index) const;
  inline ::pb::TActSoulChainActivityStrongHoldInfo* mutable_strongholdinfoarray(int index);
  inline ::pb::TActSoulChainActivityStrongHoldInfo* add_strongholdinfoarray();
  inline const ::google::protobuf::RepeatedPtrField< ::pb::TActSoulChainActivityStrongHoldInfo >&
      strongholdinfoarray() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb::TActSoulChainActivityStrongHoldInfo >*
      mutable_strongholdinfoarray();

  // @@protoc_insertion_point(class_scope:pb.TActSoulChainActivityStrongHoldInfoRsp)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::pb::TActSoulChainActivityStrongHoldInfo > strongholdinfoarray_;
  friend void  protobuf_AddDesc_net_2fActSoulChainActivity_2eproto();
  friend void protobuf_AssignDesc_net_2fActSoulChainActivity_2eproto();
  friend void protobuf_ShutdownFile_net_2fActSoulChainActivity_2eproto();

  void InitAsDefaultInstance();
  static TActSoulChainActivityStrongHoldInfoRsp* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TActSoulChainActivityGetBattleArgsReq</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/ActSoulChainActivity.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TActSoulChainActivityGetBattleArgsReq : public ::google::protobuf::Message {
 public:
  TActSoulChainActivityGetBattleArgsReq();
  virtual ~TActSoulChainActivityGetBattleArgsReq();

  TActSoulChainActivityGetBattleArgsReq(const TActSoulChainActivityGetBattleArgsReq& from);

  inline TActSoulChainActivityGetBattleArgsReq& operator=(const TActSoulChainActivityGetBattleArgsReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TActSoulChainActivityGetBattleArgsReq& default_instance();

  void Swap(TActSoulChainActivityGetBattleArgsReq* other);

  // implements Message ----------------------------------------------

  TActSoulChainActivityGetBattleArgsReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TActSoulChainActivityGetBattleArgsReq& from);
  void MergeFrom(const TActSoulChainActivityGetBattleArgsReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 ChapterId = 1;
  inline bool has_chapterid() const;
  inline void clear_chapterid();
  static const int kChapterIdFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TActSoulChainActivityGetBattleArgsReq</name>
  	<Function>
  		<name>chapterid</name>
  		<replaceName>ChapterId</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_chapterid</name>
  		<replaceName>ChapterId</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_chapterid</name>
  		<replaceName>ChapterId</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 chapterid() const;
  inline void set_chapterid(::google::protobuf::uint32 value);

  // optional uint32 stronghold = 2;
  inline bool has_stronghold() const;
  inline void clear_stronghold();
  static const int kStrongholdFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TActSoulChainActivityGetBattleArgsReq</name>
  	<Function>
  		<name>stronghold</name>
  		<replaceName>stronghold</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_stronghold</name>
  		<replaceName>stronghold</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_stronghold</name>
  		<replaceName>stronghold</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 stronghold() const;
  inline void set_stronghold(::google::protobuf::uint32 value);

  // optional .pb.TBattleCheckParam BattleCheckParam = 3;
  inline bool has_battlecheckparam() const;
  inline void clear_battlecheckparam();
  static const int kBattleCheckParamFieldNumber = 3;
  /*FOR2LUA
  <Record>
  	<name>TActSoulChainActivityGetBattleArgsReq</name>
  	<Function>
  		<name>battlecheckparam</name>
  		<replaceName>BattleCheckParam</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_battlecheckparam</name>
  		<replaceName>BattleCheckParam</replaceName>
  		<handler>descripter = pb_set_message_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_allocated_battlecheckparam</name>
  		<replaceName>BattleCheckParam</replaceName>
  		<handler>descripter = pb_set_message_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_battlecheckparam</name>
  		<replaceName>BattleCheckParam</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TBattleCheckParam& battlecheckparam() const;
  inline ::pb::TBattleCheckParam* mutable_battlecheckparam();
  inline ::pb::TBattleCheckParam* release_battlecheckparam();
  inline void set_allocated_battlecheckparam(::pb::TBattleCheckParam* battlecheckparam);

  // @@protoc_insertion_point(class_scope:pb.TActSoulChainActivityGetBattleArgsReq)
 private:
  inline void set_has_chapterid();
  inline void clear_has_chapterid();
  inline void set_has_stronghold();
  inline void clear_has_stronghold();
  inline void set_has_battlecheckparam();
  inline void clear_has_battlecheckparam();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 chapterid_;
  ::google::protobuf::uint32 stronghold_;
  ::pb::TBattleCheckParam* battlecheckparam_;
  friend void  protobuf_AddDesc_net_2fActSoulChainActivity_2eproto();
  friend void protobuf_AssignDesc_net_2fActSoulChainActivity_2eproto();
  friend void protobuf_ShutdownFile_net_2fActSoulChainActivity_2eproto();

  void InitAsDefaultInstance();
  static TActSoulChainActivityGetBattleArgsReq* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TActSoulChainActivityGetBattleArgsRsp</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/ActSoulChainActivity.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TActSoulChainActivityGetBattleArgsRsp : public ::google::protobuf::Message {
 public:
  TActSoulChainActivityGetBattleArgsRsp();
  virtual ~TActSoulChainActivityGetBattleArgsRsp();

  TActSoulChainActivityGetBattleArgsRsp(const TActSoulChainActivityGetBattleArgsRsp& from);

  inline TActSoulChainActivityGetBattleArgsRsp& operator=(const TActSoulChainActivityGetBattleArgsRsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TActSoulChainActivityGetBattleArgsRsp& default_instance();

  void Swap(TActSoulChainActivityGetBattleArgsRsp* other);

  // implements Message ----------------------------------------------

  TActSoulChainActivityGetBattleArgsRsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TActSoulChainActivityGetBattleArgsRsp& from);
  void MergeFrom(const TActSoulChainActivityGetBattleArgsRsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .pb.TCommonReward DropArray = 1;
  inline int droparray_size() const;
  inline void clear_droparray();
  static const int kDropArrayFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TActSoulChainActivityGetBattleArgsRsp</name>
  	<Function>
  		<name>droparray</name>
  		<replaceName>DropArray</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_droparray</name>
  		<replaceName>DropArray</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_droparray</name>
  		<replaceName>DropArray</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_droparray</name>
  		<replaceName>DropArray</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>droparray_size</name>
  		<replaceName>DropArray</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TCommonReward& droparray(int index) const;
  inline ::pb::TCommonReward* mutable_droparray(int index);
  inline ::pb::TCommonReward* add_droparray();
  inline const ::google::protobuf::RepeatedPtrField< ::pb::TCommonReward >&
      droparray() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb::TCommonReward >*
      mutable_droparray();

  // optional .pb.TBattleArgs BattleArgs = 2;
  inline bool has_battleargs() const;
  inline void clear_battleargs();
  static const int kBattleArgsFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TActSoulChainActivityGetBattleArgsRsp</name>
  	<Function>
  		<name>battleargs</name>
  		<replaceName>BattleArgs</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_battleargs</name>
  		<replaceName>BattleArgs</replaceName>
  		<handler>descripter = pb_set_message_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_allocated_battleargs</name>
  		<replaceName>BattleArgs</replaceName>
  		<handler>descripter = pb_set_message_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_battleargs</name>
  		<replaceName>BattleArgs</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TBattleArgs& battleargs() const;
  inline ::pb::TBattleArgs* mutable_battleargs();
  inline ::pb::TBattleArgs* release_battleargs();
  inline void set_allocated_battleargs(::pb::TBattleArgs* battleargs);

  // @@protoc_insertion_point(class_scope:pb.TActSoulChainActivityGetBattleArgsRsp)
 private:
  inline void set_has_battleargs();
  inline void clear_has_battleargs();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::pb::TCommonReward > droparray_;
  ::pb::TBattleArgs* battleargs_;
  friend void  protobuf_AddDesc_net_2fActSoulChainActivity_2eproto();
  friend void protobuf_AssignDesc_net_2fActSoulChainActivity_2eproto();
  friend void protobuf_ShutdownFile_net_2fActSoulChainActivity_2eproto();

  void InitAsDefaultInstance();
  static TActSoulChainActivityGetBattleArgsRsp* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TActSoulChainActivityReportBattleReq</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/ActSoulChainActivity.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TActSoulChainActivityReportBattleReq : public ::google::protobuf::Message {
 public:
  TActSoulChainActivityReportBattleReq();
  virtual ~TActSoulChainActivityReportBattleReq();

  TActSoulChainActivityReportBattleReq(const TActSoulChainActivityReportBattleReq& from);

  inline TActSoulChainActivityReportBattleReq& operator=(const TActSoulChainActivityReportBattleReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TActSoulChainActivityReportBattleReq& default_instance();

  void Swap(TActSoulChainActivityReportBattleReq* other);

  // implements Message ----------------------------------------------

  TActSoulChainActivityReportBattleReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TActSoulChainActivityReportBattleReq& from);
  void MergeFrom(const TActSoulChainActivityReportBattleReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 ChapterId = 1;
  inline bool has_chapterid() const;
  inline void clear_chapterid();
  static const int kChapterIdFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TActSoulChainActivityReportBattleReq</name>
  	<Function>
  		<name>chapterid</name>
  		<replaceName>ChapterId</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_chapterid</name>
  		<replaceName>ChapterId</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_chapterid</name>
  		<replaceName>ChapterId</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 chapterid() const;
  inline void set_chapterid(::google::protobuf::uint32 value);

  // optional uint32 stronghold = 2;
  inline bool has_stronghold() const;
  inline void clear_stronghold();
  static const int kStrongholdFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TActSoulChainActivityReportBattleReq</name>
  	<Function>
  		<name>stronghold</name>
  		<replaceName>stronghold</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_stronghold</name>
  		<replaceName>stronghold</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_stronghold</name>
  		<replaceName>stronghold</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 stronghold() const;
  inline void set_stronghold(::google::protobuf::uint32 value);

  // optional bytes BattleResultBytes = 3;
  inline bool has_battleresultbytes() const;
  inline void clear_battleresultbytes();
  static const int kBattleResultBytesFieldNumber = 3;
  /*FOR2LUA
  <Record>
  	<name>TActSoulChainActivityReportBattleReq</name>
  	<Function>
  		<name>battleresultbytes</name>
  		<replaceName>BattleResultBytes</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_battleresultbytes</name>
  		<replaceName>BattleResultBytes</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_battleresultbytes</name>
  		<replaceName>BattleResultBytes</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::std::string& battleresultbytes() const;
  inline void set_battleresultbytes(const ::std::string& value);
  inline void set_battleresultbytes(const char* value);
  inline void set_battleresultbytes(const void* value, size_t size);
  inline ::std::string* mutable_battleresultbytes();
  inline ::std::string* release_battleresultbytes();
  inline void set_allocated_battleresultbytes(::std::string* battleresultbytes);

  // @@protoc_insertion_point(class_scope:pb.TActSoulChainActivityReportBattleReq)
 private:
  inline void set_has_chapterid();
  inline void clear_has_chapterid();
  inline void set_has_stronghold();
  inline void clear_has_stronghold();
  inline void set_has_battleresultbytes();
  inline void clear_has_battleresultbytes();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 chapterid_;
  ::google::protobuf::uint32 stronghold_;
  ::std::string* battleresultbytes_;
  friend void  protobuf_AddDesc_net_2fActSoulChainActivity_2eproto();
  friend void protobuf_AssignDesc_net_2fActSoulChainActivity_2eproto();
  friend void protobuf_ShutdownFile_net_2fActSoulChainActivity_2eproto();

  void InitAsDefaultInstance();
  static TActSoulChainActivityReportBattleReq* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TActSoulChainActivityReportBattleRsp</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/ActSoulChainActivity.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TActSoulChainActivityReportBattleRsp : public ::google::protobuf::Message {
 public:
  TActSoulChainActivityReportBattleRsp();
  virtual ~TActSoulChainActivityReportBattleRsp();

  TActSoulChainActivityReportBattleRsp(const TActSoulChainActivityReportBattleRsp& from);

  inline TActSoulChainActivityReportBattleRsp& operator=(const TActSoulChainActivityReportBattleRsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TActSoulChainActivityReportBattleRsp& default_instance();

  void Swap(TActSoulChainActivityReportBattleRsp* other);

  // implements Message ----------------------------------------------

  TActSoulChainActivityReportBattleRsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TActSoulChainActivityReportBattleRsp& from);
  void MergeFrom(const TActSoulChainActivityReportBattleRsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .pb.TCommonReward DropArray = 1;
  inline int droparray_size() const;
  inline void clear_droparray();
  static const int kDropArrayFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TActSoulChainActivityReportBattleRsp</name>
  	<Function>
  		<name>droparray</name>
  		<replaceName>DropArray</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_droparray</name>
  		<replaceName>DropArray</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_droparray</name>
  		<replaceName>DropArray</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_droparray</name>
  		<replaceName>DropArray</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>droparray_size</name>
  		<replaceName>DropArray</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TCommonReward& droparray(int index) const;
  inline ::pb::TCommonReward* mutable_droparray(int index);
  inline ::pb::TCommonReward* add_droparray();
  inline const ::google::protobuf::RepeatedPtrField< ::pb::TCommonReward >&
      droparray() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb::TCommonReward >*
      mutable_droparray();

  // @@protoc_insertion_point(class_scope:pb.TActSoulChainActivityReportBattleRsp)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::pb::TCommonReward > droparray_;
  friend void  protobuf_AddDesc_net_2fActSoulChainActivity_2eproto();
  friend void protobuf_AssignDesc_net_2fActSoulChainActivity_2eproto();
  friend void protobuf_ShutdownFile_net_2fActSoulChainActivity_2eproto();

  void InitAsDefaultInstance();
  static TActSoulChainActivityReportBattleRsp* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TActSoulChainActivitySetAtkFormationReq</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/ActSoulChainActivity.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TActSoulChainActivitySetAtkFormationReq : public ::google::protobuf::Message {
 public:
  TActSoulChainActivitySetAtkFormationReq();
  virtual ~TActSoulChainActivitySetAtkFormationReq();

  TActSoulChainActivitySetAtkFormationReq(const TActSoulChainActivitySetAtkFormationReq& from);

  inline TActSoulChainActivitySetAtkFormationReq& operator=(const TActSoulChainActivitySetAtkFormationReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TActSoulChainActivitySetAtkFormationReq& default_instance();

  void Swap(TActSoulChainActivitySetAtkFormationReq* other);

  // implements Message ----------------------------------------------

  TActSoulChainActivitySetAtkFormationReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TActSoulChainActivitySetAtkFormationReq& from);
  void MergeFrom(const TActSoulChainActivitySetAtkFormationReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .pb.TActSoulChainActivityHidPosInfo HidPosArr = 1;
  inline int hidposarr_size() const;
  inline void clear_hidposarr();
  static const int kHidPosArrFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TActSoulChainActivitySetAtkFormationReq</name>
  	<Function>
  		<name>hidposarr</name>
  		<replaceName>HidPosArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_hidposarr</name>
  		<replaceName>HidPosArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_hidposarr</name>
  		<replaceName>HidPosArr</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_hidposarr</name>
  		<replaceName>HidPosArr</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>hidposarr_size</name>
  		<replaceName>HidPosArr</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TActSoulChainActivityHidPosInfo& hidposarr(int index) const;
  inline ::pb::TActSoulChainActivityHidPosInfo* mutable_hidposarr(int index);
  inline ::pb::TActSoulChainActivityHidPosInfo* add_hidposarr();
  inline const ::google::protobuf::RepeatedPtrField< ::pb::TActSoulChainActivityHidPosInfo >&
      hidposarr() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb::TActSoulChainActivityHidPosInfo >*
      mutable_hidposarr();

  // @@protoc_insertion_point(class_scope:pb.TActSoulChainActivitySetAtkFormationReq)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::pb::TActSoulChainActivityHidPosInfo > hidposarr_;
  friend void  protobuf_AddDesc_net_2fActSoulChainActivity_2eproto();
  friend void protobuf_AssignDesc_net_2fActSoulChainActivity_2eproto();
  friend void protobuf_ShutdownFile_net_2fActSoulChainActivity_2eproto();

  void InitAsDefaultInstance();
  static TActSoulChainActivitySetAtkFormationReq* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TActSoulChainActivityGetAtkFormationRsp</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/ActSoulChainActivity.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TActSoulChainActivityGetAtkFormationRsp : public ::google::protobuf::Message {
 public:
  TActSoulChainActivityGetAtkFormationRsp();
  virtual ~TActSoulChainActivityGetAtkFormationRsp();

  TActSoulChainActivityGetAtkFormationRsp(const TActSoulChainActivityGetAtkFormationRsp& from);

  inline TActSoulChainActivityGetAtkFormationRsp& operator=(const TActSoulChainActivityGetAtkFormationRsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TActSoulChainActivityGetAtkFormationRsp& default_instance();

  void Swap(TActSoulChainActivityGetAtkFormationRsp* other);

  // implements Message ----------------------------------------------

  TActSoulChainActivityGetAtkFormationRsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TActSoulChainActivityGetAtkFormationRsp& from);
  void MergeFrom(const TActSoulChainActivityGetAtkFormationRsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .pb.TActSoulChainActivityHidPosInfo HidPosArr = 1;
  inline int hidposarr_size() const;
  inline void clear_hidposarr();
  static const int kHidPosArrFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TActSoulChainActivityGetAtkFormationRsp</name>
  	<Function>
  		<name>hidposarr</name>
  		<replaceName>HidPosArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_hidposarr</name>
  		<replaceName>HidPosArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_hidposarr</name>
  		<replaceName>HidPosArr</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_hidposarr</name>
  		<replaceName>HidPosArr</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>hidposarr_size</name>
  		<replaceName>HidPosArr</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TActSoulChainActivityHidPosInfo& hidposarr(int index) const;
  inline ::pb::TActSoulChainActivityHidPosInfo* mutable_hidposarr(int index);
  inline ::pb::TActSoulChainActivityHidPosInfo* add_hidposarr();
  inline const ::google::protobuf::RepeatedPtrField< ::pb::TActSoulChainActivityHidPosInfo >&
      hidposarr() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb::TActSoulChainActivityHidPosInfo >*
      mutable_hidposarr();

  // @@protoc_insertion_point(class_scope:pb.TActSoulChainActivityGetAtkFormationRsp)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::pb::TActSoulChainActivityHidPosInfo > hidposarr_;
  friend void  protobuf_AddDesc_net_2fActSoulChainActivity_2eproto();
  friend void protobuf_AssignDesc_net_2fActSoulChainActivity_2eproto();
  friend void protobuf_ShutdownFile_net_2fActSoulChainActivity_2eproto();

  void InitAsDefaultInstance();
  static TActSoulChainActivityGetAtkFormationRsp* default_instance_;
};
// ===================================================================


// ===================================================================

// TActSoulChainActivityBattleArmyInfo

// repeated .pb.TArmyInfo ArmyArr = 1;
inline int TActSoulChainActivityBattleArmyInfo::armyarr_size() const {
  return armyarr_.size();
}
inline void TActSoulChainActivityBattleArmyInfo::clear_armyarr() {
  armyarr_.Clear();
}
inline const ::pb::TArmyInfo& TActSoulChainActivityBattleArmyInfo::armyarr(int index) const {
  // @@protoc_insertion_point(field_get:pb.TActSoulChainActivityBattleArmyInfo.ArmyArr)
  return armyarr_.Get(index);
}
inline ::pb::TArmyInfo* TActSoulChainActivityBattleArmyInfo::mutable_armyarr(int index) {
  // @@protoc_insertion_point(field_mutable:pb.TActSoulChainActivityBattleArmyInfo.ArmyArr)
  return armyarr_.Mutable(index);
}
inline ::pb::TArmyInfo* TActSoulChainActivityBattleArmyInfo::add_armyarr() {
  // @@protoc_insertion_point(field_add:pb.TActSoulChainActivityBattleArmyInfo.ArmyArr)
  return armyarr_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::TArmyInfo >&
TActSoulChainActivityBattleArmyInfo::armyarr() const {
  // @@protoc_insertion_point(field_list:pb.TActSoulChainActivityBattleArmyInfo.ArmyArr)
  return armyarr_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb::TArmyInfo >*
TActSoulChainActivityBattleArmyInfo::mutable_armyarr() {
  // @@protoc_insertion_point(field_mutable_list:pb.TActSoulChainActivityBattleArmyInfo.ArmyArr)
  return &armyarr_;
}

// optional uint64 FightForce = 2;
inline bool TActSoulChainActivityBattleArmyInfo::has_fightforce() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TActSoulChainActivityBattleArmyInfo::set_has_fightforce() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TActSoulChainActivityBattleArmyInfo::clear_has_fightforce() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TActSoulChainActivityBattleArmyInfo::clear_fightforce() {
  fightforce_ = GOOGLE_ULONGLONG(0);
  clear_has_fightforce();
}
inline ::google::protobuf::uint64 TActSoulChainActivityBattleArmyInfo::fightforce() const {
  // @@protoc_insertion_point(field_get:pb.TActSoulChainActivityBattleArmyInfo.FightForce)
  return fightforce_;
}
inline void TActSoulChainActivityBattleArmyInfo::set_fightforce(::google::protobuf::uint64 value) {
  set_has_fightforce();
  fightforce_ = value;
  // @@protoc_insertion_point(field_set:pb.TActSoulChainActivityBattleArmyInfo.FightForce)
}

// -------------------------------------------------------------------

// TActSoulChainActivityStrongHoldInfo

// optional uint32 stronghold = 1;
inline bool TActSoulChainActivityStrongHoldInfo::has_stronghold() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TActSoulChainActivityStrongHoldInfo::set_has_stronghold() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TActSoulChainActivityStrongHoldInfo::clear_has_stronghold() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TActSoulChainActivityStrongHoldInfo::clear_stronghold() {
  stronghold_ = 0u;
  clear_has_stronghold();
}
inline ::google::protobuf::uint32 TActSoulChainActivityStrongHoldInfo::stronghold() const {
  // @@protoc_insertion_point(field_get:pb.TActSoulChainActivityStrongHoldInfo.stronghold)
  return stronghold_;
}
inline void TActSoulChainActivityStrongHoldInfo::set_stronghold(::google::protobuf::uint32 value) {
  set_has_stronghold();
  stronghold_ = value;
  // @@protoc_insertion_point(field_set:pb.TActSoulChainActivityStrongHoldInfo.stronghold)
}

// repeated .pb.TActSoulChainActivityBattleArmyInfo BattleArmyArr = 2;
inline int TActSoulChainActivityStrongHoldInfo::battlearmyarr_size() const {
  return battlearmyarr_.size();
}
inline void TActSoulChainActivityStrongHoldInfo::clear_battlearmyarr() {
  battlearmyarr_.Clear();
}
inline const ::pb::TActSoulChainActivityBattleArmyInfo& TActSoulChainActivityStrongHoldInfo::battlearmyarr(int index) const {
  // @@protoc_insertion_point(field_get:pb.TActSoulChainActivityStrongHoldInfo.BattleArmyArr)
  return battlearmyarr_.Get(index);
}
inline ::pb::TActSoulChainActivityBattleArmyInfo* TActSoulChainActivityStrongHoldInfo::mutable_battlearmyarr(int index) {
  // @@protoc_insertion_point(field_mutable:pb.TActSoulChainActivityStrongHoldInfo.BattleArmyArr)
  return battlearmyarr_.Mutable(index);
}
inline ::pb::TActSoulChainActivityBattleArmyInfo* TActSoulChainActivityStrongHoldInfo::add_battlearmyarr() {
  // @@protoc_insertion_point(field_add:pb.TActSoulChainActivityStrongHoldInfo.BattleArmyArr)
  return battlearmyarr_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::TActSoulChainActivityBattleArmyInfo >&
TActSoulChainActivityStrongHoldInfo::battlearmyarr() const {
  // @@protoc_insertion_point(field_list:pb.TActSoulChainActivityStrongHoldInfo.BattleArmyArr)
  return battlearmyarr_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb::TActSoulChainActivityBattleArmyInfo >*
TActSoulChainActivityStrongHoldInfo::mutable_battlearmyarr() {
  // @@protoc_insertion_point(field_mutable_list:pb.TActSoulChainActivityStrongHoldInfo.BattleArmyArr)
  return &battlearmyarr_;
}

// optional bool IsPass = 3;
inline bool TActSoulChainActivityStrongHoldInfo::has_ispass() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void TActSoulChainActivityStrongHoldInfo::set_has_ispass() {
  _has_bits_[0] |= 0x00000004u;
}
inline void TActSoulChainActivityStrongHoldInfo::clear_has_ispass() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void TActSoulChainActivityStrongHoldInfo::clear_ispass() {
  ispass_ = false;
  clear_has_ispass();
}
inline bool TActSoulChainActivityStrongHoldInfo::ispass() const {
  // @@protoc_insertion_point(field_get:pb.TActSoulChainActivityStrongHoldInfo.IsPass)
  return ispass_;
}
inline void TActSoulChainActivityStrongHoldInfo::set_ispass(bool value) {
  set_has_ispass();
  ispass_ = value;
  // @@protoc_insertion_point(field_set:pb.TActSoulChainActivityStrongHoldInfo.IsPass)
}

// -------------------------------------------------------------------

// TActSoulChainActivityChapterInfo

// optional uint32 ChapterId = 1;
inline bool TActSoulChainActivityChapterInfo::has_chapterid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TActSoulChainActivityChapterInfo::set_has_chapterid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TActSoulChainActivityChapterInfo::clear_has_chapterid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TActSoulChainActivityChapterInfo::clear_chapterid() {
  chapterid_ = 0u;
  clear_has_chapterid();
}
inline ::google::protobuf::uint32 TActSoulChainActivityChapterInfo::chapterid() const {
  // @@protoc_insertion_point(field_get:pb.TActSoulChainActivityChapterInfo.ChapterId)
  return chapterid_;
}
inline void TActSoulChainActivityChapterInfo::set_chapterid(::google::protobuf::uint32 value) {
  set_has_chapterid();
  chapterid_ = value;
  // @@protoc_insertion_point(field_set:pb.TActSoulChainActivityChapterInfo.ChapterId)
}

// optional bool IsPass = 2;
inline bool TActSoulChainActivityChapterInfo::has_ispass() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TActSoulChainActivityChapterInfo::set_has_ispass() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TActSoulChainActivityChapterInfo::clear_has_ispass() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TActSoulChainActivityChapterInfo::clear_ispass() {
  ispass_ = false;
  clear_has_ispass();
}
inline bool TActSoulChainActivityChapterInfo::ispass() const {
  // @@protoc_insertion_point(field_get:pb.TActSoulChainActivityChapterInfo.IsPass)
  return ispass_;
}
inline void TActSoulChainActivityChapterInfo::set_ispass(bool value) {
  set_has_ispass();
  ispass_ = value;
  // @@protoc_insertion_point(field_set:pb.TActSoulChainActivityChapterInfo.IsPass)
}

// -------------------------------------------------------------------

// TActSoulChainActivityHidPosInfo

// optional uint32 Hid = 1;
inline bool TActSoulChainActivityHidPosInfo::has_hid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TActSoulChainActivityHidPosInfo::set_has_hid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TActSoulChainActivityHidPosInfo::clear_has_hid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TActSoulChainActivityHidPosInfo::clear_hid() {
  hid_ = 0u;
  clear_has_hid();
}
inline ::google::protobuf::uint32 TActSoulChainActivityHidPosInfo::hid() const {
  // @@protoc_insertion_point(field_get:pb.TActSoulChainActivityHidPosInfo.Hid)
  return hid_;
}
inline void TActSoulChainActivityHidPosInfo::set_hid(::google::protobuf::uint32 value) {
  set_has_hid();
  hid_ = value;
  // @@protoc_insertion_point(field_set:pb.TActSoulChainActivityHidPosInfo.Hid)
}

// optional uint32 Pos = 2;
inline bool TActSoulChainActivityHidPosInfo::has_pos() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TActSoulChainActivityHidPosInfo::set_has_pos() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TActSoulChainActivityHidPosInfo::clear_has_pos() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TActSoulChainActivityHidPosInfo::clear_pos() {
  pos_ = 0u;
  clear_has_pos();
}
inline ::google::protobuf::uint32 TActSoulChainActivityHidPosInfo::pos() const {
  // @@protoc_insertion_point(field_get:pb.TActSoulChainActivityHidPosInfo.Pos)
  return pos_;
}
inline void TActSoulChainActivityHidPosInfo::set_pos(::google::protobuf::uint32 value) {
  set_has_pos();
  pos_ = value;
  // @@protoc_insertion_point(field_set:pb.TActSoulChainActivityHidPosInfo.Pos)
}

// -------------------------------------------------------------------

// TActSoulChainActivityGetInfoRsp

// repeated .pb.TActSoulChainActivityChapterInfo ChapterInfoArray = 1;
inline int TActSoulChainActivityGetInfoRsp::chapterinfoarray_size() const {
  return chapterinfoarray_.size();
}
inline void TActSoulChainActivityGetInfoRsp::clear_chapterinfoarray() {
  chapterinfoarray_.Clear();
}
inline const ::pb::TActSoulChainActivityChapterInfo& TActSoulChainActivityGetInfoRsp::chapterinfoarray(int index) const {
  // @@protoc_insertion_point(field_get:pb.TActSoulChainActivityGetInfoRsp.ChapterInfoArray)
  return chapterinfoarray_.Get(index);
}
inline ::pb::TActSoulChainActivityChapterInfo* TActSoulChainActivityGetInfoRsp::mutable_chapterinfoarray(int index) {
  // @@protoc_insertion_point(field_mutable:pb.TActSoulChainActivityGetInfoRsp.ChapterInfoArray)
  return chapterinfoarray_.Mutable(index);
}
inline ::pb::TActSoulChainActivityChapterInfo* TActSoulChainActivityGetInfoRsp::add_chapterinfoarray() {
  // @@protoc_insertion_point(field_add:pb.TActSoulChainActivityGetInfoRsp.ChapterInfoArray)
  return chapterinfoarray_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::TActSoulChainActivityChapterInfo >&
TActSoulChainActivityGetInfoRsp::chapterinfoarray() const {
  // @@protoc_insertion_point(field_list:pb.TActSoulChainActivityGetInfoRsp.ChapterInfoArray)
  return chapterinfoarray_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb::TActSoulChainActivityChapterInfo >*
TActSoulChainActivityGetInfoRsp::mutable_chapterinfoarray() {
  // @@protoc_insertion_point(field_mutable_list:pb.TActSoulChainActivityGetInfoRsp.ChapterInfoArray)
  return &chapterinfoarray_;
}

// optional bool IsPlayAnimation = 2;
inline bool TActSoulChainActivityGetInfoRsp::has_isplayanimation() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TActSoulChainActivityGetInfoRsp::set_has_isplayanimation() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TActSoulChainActivityGetInfoRsp::clear_has_isplayanimation() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TActSoulChainActivityGetInfoRsp::clear_isplayanimation() {
  isplayanimation_ = false;
  clear_has_isplayanimation();
}
inline bool TActSoulChainActivityGetInfoRsp::isplayanimation() const {
  // @@protoc_insertion_point(field_get:pb.TActSoulChainActivityGetInfoRsp.IsPlayAnimation)
  return isplayanimation_;
}
inline void TActSoulChainActivityGetInfoRsp::set_isplayanimation(bool value) {
  set_has_isplayanimation();
  isplayanimation_ = value;
  // @@protoc_insertion_point(field_set:pb.TActSoulChainActivityGetInfoRsp.IsPlayAnimation)
}

// -------------------------------------------------------------------

// TActSoulChainActivityStrongHoldInfoReq

// optional uint32 ChapterId = 1;
inline bool TActSoulChainActivityStrongHoldInfoReq::has_chapterid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TActSoulChainActivityStrongHoldInfoReq::set_has_chapterid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TActSoulChainActivityStrongHoldInfoReq::clear_has_chapterid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TActSoulChainActivityStrongHoldInfoReq::clear_chapterid() {
  chapterid_ = 0u;
  clear_has_chapterid();
}
inline ::google::protobuf::uint32 TActSoulChainActivityStrongHoldInfoReq::chapterid() const {
  // @@protoc_insertion_point(field_get:pb.TActSoulChainActivityStrongHoldInfoReq.ChapterId)
  return chapterid_;
}
inline void TActSoulChainActivityStrongHoldInfoReq::set_chapterid(::google::protobuf::uint32 value) {
  set_has_chapterid();
  chapterid_ = value;
  // @@protoc_insertion_point(field_set:pb.TActSoulChainActivityStrongHoldInfoReq.ChapterId)
}

// -------------------------------------------------------------------

// TActSoulChainActivityStrongHoldInfoRsp

// repeated .pb.TActSoulChainActivityStrongHoldInfo StrongHoldInfoArray = 1;
inline int TActSoulChainActivityStrongHoldInfoRsp::strongholdinfoarray_size() const {
  return strongholdinfoarray_.size();
}
inline void TActSoulChainActivityStrongHoldInfoRsp::clear_strongholdinfoarray() {
  strongholdinfoarray_.Clear();
}
inline const ::pb::TActSoulChainActivityStrongHoldInfo& TActSoulChainActivityStrongHoldInfoRsp::strongholdinfoarray(int index) const {
  // @@protoc_insertion_point(field_get:pb.TActSoulChainActivityStrongHoldInfoRsp.StrongHoldInfoArray)
  return strongholdinfoarray_.Get(index);
}
inline ::pb::TActSoulChainActivityStrongHoldInfo* TActSoulChainActivityStrongHoldInfoRsp::mutable_strongholdinfoarray(int index) {
  // @@protoc_insertion_point(field_mutable:pb.TActSoulChainActivityStrongHoldInfoRsp.StrongHoldInfoArray)
  return strongholdinfoarray_.Mutable(index);
}
inline ::pb::TActSoulChainActivityStrongHoldInfo* TActSoulChainActivityStrongHoldInfoRsp::add_strongholdinfoarray() {
  // @@protoc_insertion_point(field_add:pb.TActSoulChainActivityStrongHoldInfoRsp.StrongHoldInfoArray)
  return strongholdinfoarray_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::TActSoulChainActivityStrongHoldInfo >&
TActSoulChainActivityStrongHoldInfoRsp::strongholdinfoarray() const {
  // @@protoc_insertion_point(field_list:pb.TActSoulChainActivityStrongHoldInfoRsp.StrongHoldInfoArray)
  return strongholdinfoarray_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb::TActSoulChainActivityStrongHoldInfo >*
TActSoulChainActivityStrongHoldInfoRsp::mutable_strongholdinfoarray() {
  // @@protoc_insertion_point(field_mutable_list:pb.TActSoulChainActivityStrongHoldInfoRsp.StrongHoldInfoArray)
  return &strongholdinfoarray_;
}

// -------------------------------------------------------------------

// TActSoulChainActivityGetBattleArgsReq

// optional uint32 ChapterId = 1;
inline bool TActSoulChainActivityGetBattleArgsReq::has_chapterid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TActSoulChainActivityGetBattleArgsReq::set_has_chapterid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TActSoulChainActivityGetBattleArgsReq::clear_has_chapterid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TActSoulChainActivityGetBattleArgsReq::clear_chapterid() {
  chapterid_ = 0u;
  clear_has_chapterid();
}
inline ::google::protobuf::uint32 TActSoulChainActivityGetBattleArgsReq::chapterid() const {
  // @@protoc_insertion_point(field_get:pb.TActSoulChainActivityGetBattleArgsReq.ChapterId)
  return chapterid_;
}
inline void TActSoulChainActivityGetBattleArgsReq::set_chapterid(::google::protobuf::uint32 value) {
  set_has_chapterid();
  chapterid_ = value;
  // @@protoc_insertion_point(field_set:pb.TActSoulChainActivityGetBattleArgsReq.ChapterId)
}

// optional uint32 stronghold = 2;
inline bool TActSoulChainActivityGetBattleArgsReq::has_stronghold() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TActSoulChainActivityGetBattleArgsReq::set_has_stronghold() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TActSoulChainActivityGetBattleArgsReq::clear_has_stronghold() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TActSoulChainActivityGetBattleArgsReq::clear_stronghold() {
  stronghold_ = 0u;
  clear_has_stronghold();
}
inline ::google::protobuf::uint32 TActSoulChainActivityGetBattleArgsReq::stronghold() const {
  // @@protoc_insertion_point(field_get:pb.TActSoulChainActivityGetBattleArgsReq.stronghold)
  return stronghold_;
}
inline void TActSoulChainActivityGetBattleArgsReq::set_stronghold(::google::protobuf::uint32 value) {
  set_has_stronghold();
  stronghold_ = value;
  // @@protoc_insertion_point(field_set:pb.TActSoulChainActivityGetBattleArgsReq.stronghold)
}

// optional .pb.TBattleCheckParam BattleCheckParam = 3;
inline bool TActSoulChainActivityGetBattleArgsReq::has_battlecheckparam() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void TActSoulChainActivityGetBattleArgsReq::set_has_battlecheckparam() {
  _has_bits_[0] |= 0x00000004u;
}
inline void TActSoulChainActivityGetBattleArgsReq::clear_has_battlecheckparam() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void TActSoulChainActivityGetBattleArgsReq::clear_battlecheckparam() {
  if (battlecheckparam_ != NULL) battlecheckparam_->::pb::TBattleCheckParam::Clear();
  clear_has_battlecheckparam();
}
inline const ::pb::TBattleCheckParam& TActSoulChainActivityGetBattleArgsReq::battlecheckparam() const {
  // @@protoc_insertion_point(field_get:pb.TActSoulChainActivityGetBattleArgsReq.BattleCheckParam)
  return battlecheckparam_ != NULL ? *battlecheckparam_ : *default_instance_->battlecheckparam_;
}
inline ::pb::TBattleCheckParam* TActSoulChainActivityGetBattleArgsReq::mutable_battlecheckparam() {
  set_has_battlecheckparam();
  if (battlecheckparam_ == NULL) battlecheckparam_ = new ::pb::TBattleCheckParam;
  // @@protoc_insertion_point(field_mutable:pb.TActSoulChainActivityGetBattleArgsReq.BattleCheckParam)
  return battlecheckparam_;
}
inline ::pb::TBattleCheckParam* TActSoulChainActivityGetBattleArgsReq::release_battlecheckparam() {
  clear_has_battlecheckparam();
  ::pb::TBattleCheckParam* temp = battlecheckparam_;
  battlecheckparam_ = NULL;
  return temp;
}
inline void TActSoulChainActivityGetBattleArgsReq::set_allocated_battlecheckparam(::pb::TBattleCheckParam* battlecheckparam) {
  delete battlecheckparam_;
  battlecheckparam_ = battlecheckparam;
  if (battlecheckparam) {
    set_has_battlecheckparam();
  } else {
    clear_has_battlecheckparam();
  }
  // @@protoc_insertion_point(field_set_allocated:pb.TActSoulChainActivityGetBattleArgsReq.BattleCheckParam)
}

// -------------------------------------------------------------------

// TActSoulChainActivityGetBattleArgsRsp

// repeated .pb.TCommonReward DropArray = 1;
inline int TActSoulChainActivityGetBattleArgsRsp::droparray_size() const {
  return droparray_.size();
}
inline void TActSoulChainActivityGetBattleArgsRsp::clear_droparray() {
  droparray_.Clear();
}
inline const ::pb::TCommonReward& TActSoulChainActivityGetBattleArgsRsp::droparray(int index) const {
  // @@protoc_insertion_point(field_get:pb.TActSoulChainActivityGetBattleArgsRsp.DropArray)
  return droparray_.Get(index);
}
inline ::pb::TCommonReward* TActSoulChainActivityGetBattleArgsRsp::mutable_droparray(int index) {
  // @@protoc_insertion_point(field_mutable:pb.TActSoulChainActivityGetBattleArgsRsp.DropArray)
  return droparray_.Mutable(index);
}
inline ::pb::TCommonReward* TActSoulChainActivityGetBattleArgsRsp::add_droparray() {
  // @@protoc_insertion_point(field_add:pb.TActSoulChainActivityGetBattleArgsRsp.DropArray)
  return droparray_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::TCommonReward >&
TActSoulChainActivityGetBattleArgsRsp::droparray() const {
  // @@protoc_insertion_point(field_list:pb.TActSoulChainActivityGetBattleArgsRsp.DropArray)
  return droparray_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb::TCommonReward >*
TActSoulChainActivityGetBattleArgsRsp::mutable_droparray() {
  // @@protoc_insertion_point(field_mutable_list:pb.TActSoulChainActivityGetBattleArgsRsp.DropArray)
  return &droparray_;
}

// optional .pb.TBattleArgs BattleArgs = 2;
inline bool TActSoulChainActivityGetBattleArgsRsp::has_battleargs() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TActSoulChainActivityGetBattleArgsRsp::set_has_battleargs() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TActSoulChainActivityGetBattleArgsRsp::clear_has_battleargs() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TActSoulChainActivityGetBattleArgsRsp::clear_battleargs() {
  if (battleargs_ != NULL) battleargs_->::pb::TBattleArgs::Clear();
  clear_has_battleargs();
}
inline const ::pb::TBattleArgs& TActSoulChainActivityGetBattleArgsRsp::battleargs() const {
  // @@protoc_insertion_point(field_get:pb.TActSoulChainActivityGetBattleArgsRsp.BattleArgs)
  return battleargs_ != NULL ? *battleargs_ : *default_instance_->battleargs_;
}
inline ::pb::TBattleArgs* TActSoulChainActivityGetBattleArgsRsp::mutable_battleargs() {
  set_has_battleargs();
  if (battleargs_ == NULL) battleargs_ = new ::pb::TBattleArgs;
  // @@protoc_insertion_point(field_mutable:pb.TActSoulChainActivityGetBattleArgsRsp.BattleArgs)
  return battleargs_;
}
inline ::pb::TBattleArgs* TActSoulChainActivityGetBattleArgsRsp::release_battleargs() {
  clear_has_battleargs();
  ::pb::TBattleArgs* temp = battleargs_;
  battleargs_ = NULL;
  return temp;
}
inline void TActSoulChainActivityGetBattleArgsRsp::set_allocated_battleargs(::pb::TBattleArgs* battleargs) {
  delete battleargs_;
  battleargs_ = battleargs;
  if (battleargs) {
    set_has_battleargs();
  } else {
    clear_has_battleargs();
  }
  // @@protoc_insertion_point(field_set_allocated:pb.TActSoulChainActivityGetBattleArgsRsp.BattleArgs)
}

// -------------------------------------------------------------------

// TActSoulChainActivityReportBattleReq

// optional uint32 ChapterId = 1;
inline bool TActSoulChainActivityReportBattleReq::has_chapterid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TActSoulChainActivityReportBattleReq::set_has_chapterid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TActSoulChainActivityReportBattleReq::clear_has_chapterid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TActSoulChainActivityReportBattleReq::clear_chapterid() {
  chapterid_ = 0u;
  clear_has_chapterid();
}
inline ::google::protobuf::uint32 TActSoulChainActivityReportBattleReq::chapterid() const {
  // @@protoc_insertion_point(field_get:pb.TActSoulChainActivityReportBattleReq.ChapterId)
  return chapterid_;
}
inline void TActSoulChainActivityReportBattleReq::set_chapterid(::google::protobuf::uint32 value) {
  set_has_chapterid();
  chapterid_ = value;
  // @@protoc_insertion_point(field_set:pb.TActSoulChainActivityReportBattleReq.ChapterId)
}

// optional uint32 stronghold = 2;
inline bool TActSoulChainActivityReportBattleReq::has_stronghold() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TActSoulChainActivityReportBattleReq::set_has_stronghold() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TActSoulChainActivityReportBattleReq::clear_has_stronghold() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TActSoulChainActivityReportBattleReq::clear_stronghold() {
  stronghold_ = 0u;
  clear_has_stronghold();
}
inline ::google::protobuf::uint32 TActSoulChainActivityReportBattleReq::stronghold() const {
  // @@protoc_insertion_point(field_get:pb.TActSoulChainActivityReportBattleReq.stronghold)
  return stronghold_;
}
inline void TActSoulChainActivityReportBattleReq::set_stronghold(::google::protobuf::uint32 value) {
  set_has_stronghold();
  stronghold_ = value;
  // @@protoc_insertion_point(field_set:pb.TActSoulChainActivityReportBattleReq.stronghold)
}

// optional bytes BattleResultBytes = 3;
inline bool TActSoulChainActivityReportBattleReq::has_battleresultbytes() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void TActSoulChainActivityReportBattleReq::set_has_battleresultbytes() {
  _has_bits_[0] |= 0x00000004u;
}
inline void TActSoulChainActivityReportBattleReq::clear_has_battleresultbytes() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void TActSoulChainActivityReportBattleReq::clear_battleresultbytes() {
  if (battleresultbytes_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    battleresultbytes_->clear();
  }
  clear_has_battleresultbytes();
}
inline const ::std::string& TActSoulChainActivityReportBattleReq::battleresultbytes() const {
  // @@protoc_insertion_point(field_get:pb.TActSoulChainActivityReportBattleReq.BattleResultBytes)
  return *battleresultbytes_;
}
inline void TActSoulChainActivityReportBattleReq::set_battleresultbytes(const ::std::string& value) {
  set_has_battleresultbytes();
  if (battleresultbytes_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    battleresultbytes_ = new ::std::string;
  }
  battleresultbytes_->assign(value);
  // @@protoc_insertion_point(field_set:pb.TActSoulChainActivityReportBattleReq.BattleResultBytes)
}
inline void TActSoulChainActivityReportBattleReq::set_battleresultbytes(const char* value) {
  set_has_battleresultbytes();
  if (battleresultbytes_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    battleresultbytes_ = new ::std::string;
  }
  battleresultbytes_->assign(value);
  // @@protoc_insertion_point(field_set_char:pb.TActSoulChainActivityReportBattleReq.BattleResultBytes)
}
inline void TActSoulChainActivityReportBattleReq::set_battleresultbytes(const void* value, size_t size) {
  set_has_battleresultbytes();
  if (battleresultbytes_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    battleresultbytes_ = new ::std::string;
  }
  battleresultbytes_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:pb.TActSoulChainActivityReportBattleReq.BattleResultBytes)
}
inline ::std::string* TActSoulChainActivityReportBattleReq::mutable_battleresultbytes() {
  set_has_battleresultbytes();
  if (battleresultbytes_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    battleresultbytes_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:pb.TActSoulChainActivityReportBattleReq.BattleResultBytes)
  return battleresultbytes_;
}
inline ::std::string* TActSoulChainActivityReportBattleReq::release_battleresultbytes() {
  clear_has_battleresultbytes();
  if (battleresultbytes_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = battleresultbytes_;
    battleresultbytes_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void TActSoulChainActivityReportBattleReq::set_allocated_battleresultbytes(::std::string* battleresultbytes) {
  if (battleresultbytes_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete battleresultbytes_;
  }
  if (battleresultbytes) {
    set_has_battleresultbytes();
    battleresultbytes_ = battleresultbytes;
  } else {
    clear_has_battleresultbytes();
    battleresultbytes_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:pb.TActSoulChainActivityReportBattleReq.BattleResultBytes)
}

// -------------------------------------------------------------------

// TActSoulChainActivityReportBattleRsp

// repeated .pb.TCommonReward DropArray = 1;
inline int TActSoulChainActivityReportBattleRsp::droparray_size() const {
  return droparray_.size();
}
inline void TActSoulChainActivityReportBattleRsp::clear_droparray() {
  droparray_.Clear();
}
inline const ::pb::TCommonReward& TActSoulChainActivityReportBattleRsp::droparray(int index) const {
  // @@protoc_insertion_point(field_get:pb.TActSoulChainActivityReportBattleRsp.DropArray)
  return droparray_.Get(index);
}
inline ::pb::TCommonReward* TActSoulChainActivityReportBattleRsp::mutable_droparray(int index) {
  // @@protoc_insertion_point(field_mutable:pb.TActSoulChainActivityReportBattleRsp.DropArray)
  return droparray_.Mutable(index);
}
inline ::pb::TCommonReward* TActSoulChainActivityReportBattleRsp::add_droparray() {
  // @@protoc_insertion_point(field_add:pb.TActSoulChainActivityReportBattleRsp.DropArray)
  return droparray_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::TCommonReward >&
TActSoulChainActivityReportBattleRsp::droparray() const {
  // @@protoc_insertion_point(field_list:pb.TActSoulChainActivityReportBattleRsp.DropArray)
  return droparray_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb::TCommonReward >*
TActSoulChainActivityReportBattleRsp::mutable_droparray() {
  // @@protoc_insertion_point(field_mutable_list:pb.TActSoulChainActivityReportBattleRsp.DropArray)
  return &droparray_;
}

// -------------------------------------------------------------------

// TActSoulChainActivitySetAtkFormationReq

// repeated .pb.TActSoulChainActivityHidPosInfo HidPosArr = 1;
inline int TActSoulChainActivitySetAtkFormationReq::hidposarr_size() const {
  return hidposarr_.size();
}
inline void TActSoulChainActivitySetAtkFormationReq::clear_hidposarr() {
  hidposarr_.Clear();
}
inline const ::pb::TActSoulChainActivityHidPosInfo& TActSoulChainActivitySetAtkFormationReq::hidposarr(int index) const {
  // @@protoc_insertion_point(field_get:pb.TActSoulChainActivitySetAtkFormationReq.HidPosArr)
  return hidposarr_.Get(index);
}
inline ::pb::TActSoulChainActivityHidPosInfo* TActSoulChainActivitySetAtkFormationReq::mutable_hidposarr(int index) {
  // @@protoc_insertion_point(field_mutable:pb.TActSoulChainActivitySetAtkFormationReq.HidPosArr)
  return hidposarr_.Mutable(index);
}
inline ::pb::TActSoulChainActivityHidPosInfo* TActSoulChainActivitySetAtkFormationReq::add_hidposarr() {
  // @@protoc_insertion_point(field_add:pb.TActSoulChainActivitySetAtkFormationReq.HidPosArr)
  return hidposarr_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::TActSoulChainActivityHidPosInfo >&
TActSoulChainActivitySetAtkFormationReq::hidposarr() const {
  // @@protoc_insertion_point(field_list:pb.TActSoulChainActivitySetAtkFormationReq.HidPosArr)
  return hidposarr_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb::TActSoulChainActivityHidPosInfo >*
TActSoulChainActivitySetAtkFormationReq::mutable_hidposarr() {
  // @@protoc_insertion_point(field_mutable_list:pb.TActSoulChainActivitySetAtkFormationReq.HidPosArr)
  return &hidposarr_;
}

// -------------------------------------------------------------------

// TActSoulChainActivityGetAtkFormationRsp

// repeated .pb.TActSoulChainActivityHidPosInfo HidPosArr = 1;
inline int TActSoulChainActivityGetAtkFormationRsp::hidposarr_size() const {
  return hidposarr_.size();
}
inline void TActSoulChainActivityGetAtkFormationRsp::clear_hidposarr() {
  hidposarr_.Clear();
}
inline const ::pb::TActSoulChainActivityHidPosInfo& TActSoulChainActivityGetAtkFormationRsp::hidposarr(int index) const {
  // @@protoc_insertion_point(field_get:pb.TActSoulChainActivityGetAtkFormationRsp.HidPosArr)
  return hidposarr_.Get(index);
}
inline ::pb::TActSoulChainActivityHidPosInfo* TActSoulChainActivityGetAtkFormationRsp::mutable_hidposarr(int index) {
  // @@protoc_insertion_point(field_mutable:pb.TActSoulChainActivityGetAtkFormationRsp.HidPosArr)
  return hidposarr_.Mutable(index);
}
inline ::pb::TActSoulChainActivityHidPosInfo* TActSoulChainActivityGetAtkFormationRsp::add_hidposarr() {
  // @@protoc_insertion_point(field_add:pb.TActSoulChainActivityGetAtkFormationRsp.HidPosArr)
  return hidposarr_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::TActSoulChainActivityHidPosInfo >&
TActSoulChainActivityGetAtkFormationRsp::hidposarr() const {
  // @@protoc_insertion_point(field_list:pb.TActSoulChainActivityGetAtkFormationRsp.HidPosArr)
  return hidposarr_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb::TActSoulChainActivityHidPosInfo >*
TActSoulChainActivityGetAtkFormationRsp::mutable_hidposarr() {
  // @@protoc_insertion_point(field_mutable_list:pb.TActSoulChainActivityGetAtkFormationRsp.HidPosArr)
  return &hidposarr_;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace pb

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_net_2fActSoulChainActivity_2eproto__INCLUDED
