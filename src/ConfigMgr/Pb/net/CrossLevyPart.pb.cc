// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: net/CrossLevyPart.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "net/CrossLevyPart.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace pb {

namespace {

const ::google::protobuf::Descriptor* TCrossLevyScoreRankListInTopRank_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TCrossLevyScoreRankListInTopRank_reflection_ = NULL;
const ::google::protobuf::Descriptor* TCrossLevyAtkNumRankListInTopRank_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TCrossLevyAtkNumRankListInTopRank_reflection_ = NULL;
const ::google::protobuf::Descriptor* TCrossLevyBossGuildDamageList_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TCrossLevyBossGuildDamageList_reflection_ = NULL;
const ::google::protobuf::Descriptor* TCrossLevyGetBossGuildDamageListReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TCrossLevyGetBossGuildDamageListReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* TCrossLevyGetBossGuildDamageListRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TCrossLevyGetBossGuildDamageListRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* TcrossLevyScoreRankList_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TcrossLevyScoreRankList_reflection_ = NULL;
const ::google::protobuf::Descriptor* TCrossLevyGetScoreRankListRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TCrossLevyGetScoreRankListRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* TcrossLevyAtkNumRankList_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TcrossLevyAtkNumRankList_reflection_ = NULL;
const ::google::protobuf::Descriptor* TCrossLevyGetAtkNumRankListRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TCrossLevyGetAtkNumRankListRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* TCrossLevyPlunderPreviewReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TCrossLevyPlunderPreviewReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* TCrossLevyPlunderPreviewRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TCrossLevyPlunderPreviewRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* TCrossLevyExpelPreviewReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TCrossLevyExpelPreviewReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* TCrossLevyExpelPreviewRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TCrossLevyExpelPreviewRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* TCrossLevyAttackMonsterReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TCrossLevyAttackMonsterReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* TCrossLevyAttackMonsterRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TCrossLevyAttackMonsterRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* TCrossLevyFastMoveReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TCrossLevyFastMoveReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* TCrossLevyFastMoveRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TCrossLevyFastMoveRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* TCrossLevyReceiveAllSettleRewardRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TCrossLevyReceiveAllSettleRewardRsp_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_net_2fCrossLevyPart_2eproto() {
  protobuf_AddDesc_net_2fCrossLevyPart_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "net/CrossLevyPart.proto");
  GOOGLE_CHECK(file != NULL);
  TCrossLevyScoreRankListInTopRank_descriptor_ = file->message_type(0);
  static const int TCrossLevyScoreRankListInTopRank_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCrossLevyScoreRankListInTopRank, uid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCrossLevyScoreRankListInTopRank, serverid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCrossLevyScoreRankListInTopRank, score_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCrossLevyScoreRankListInTopRank, scoretime_),
  };
  TCrossLevyScoreRankListInTopRank_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TCrossLevyScoreRankListInTopRank_descriptor_,
      TCrossLevyScoreRankListInTopRank::default_instance_,
      TCrossLevyScoreRankListInTopRank_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCrossLevyScoreRankListInTopRank, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCrossLevyScoreRankListInTopRank, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TCrossLevyScoreRankListInTopRank));
  TCrossLevyAtkNumRankListInTopRank_descriptor_ = file->message_type(1);
  static const int TCrossLevyAtkNumRankListInTopRank_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCrossLevyAtkNumRankListInTopRank, uid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCrossLevyAtkNumRankListInTopRank, serverid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCrossLevyAtkNumRankListInTopRank, atknum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCrossLevyAtkNumRankListInTopRank, atknumtime_),
  };
  TCrossLevyAtkNumRankListInTopRank_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TCrossLevyAtkNumRankListInTopRank_descriptor_,
      TCrossLevyAtkNumRankListInTopRank::default_instance_,
      TCrossLevyAtkNumRankListInTopRank_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCrossLevyAtkNumRankListInTopRank, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCrossLevyAtkNumRankListInTopRank, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TCrossLevyAtkNumRankListInTopRank));
  TCrossLevyBossGuildDamageList_descriptor_ = file->message_type(2);
  static const int TCrossLevyBossGuildDamageList_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCrossLevyBossGuildDamageList, guildid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCrossLevyBossGuildDamageList, guildname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCrossLevyBossGuildDamageList, bannername_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCrossLevyBossGuildDamageList, bannerbase_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCrossLevyBossGuildDamageList, fightforce_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCrossLevyBossGuildDamageList, damage_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCrossLevyBossGuildDamageList, rank_),
  };
  TCrossLevyBossGuildDamageList_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TCrossLevyBossGuildDamageList_descriptor_,
      TCrossLevyBossGuildDamageList::default_instance_,
      TCrossLevyBossGuildDamageList_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCrossLevyBossGuildDamageList, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCrossLevyBossGuildDamageList, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TCrossLevyBossGuildDamageList));
  TCrossLevyGetBossGuildDamageListReq_descriptor_ = file->message_type(3);
  static const int TCrossLevyGetBossGuildDamageListReq_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCrossLevyGetBossGuildDamageListReq, bossid_),
  };
  TCrossLevyGetBossGuildDamageListReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TCrossLevyGetBossGuildDamageListReq_descriptor_,
      TCrossLevyGetBossGuildDamageListReq::default_instance_,
      TCrossLevyGetBossGuildDamageListReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCrossLevyGetBossGuildDamageListReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCrossLevyGetBossGuildDamageListReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TCrossLevyGetBossGuildDamageListReq));
  TCrossLevyGetBossGuildDamageListRsp_descriptor_ = file->message_type(4);
  static const int TCrossLevyGetBossGuildDamageListRsp_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCrossLevyGetBossGuildDamageListRsp, selfguildinfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCrossLevyGetBossGuildDamageListRsp, guildlistarr_),
  };
  TCrossLevyGetBossGuildDamageListRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TCrossLevyGetBossGuildDamageListRsp_descriptor_,
      TCrossLevyGetBossGuildDamageListRsp::default_instance_,
      TCrossLevyGetBossGuildDamageListRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCrossLevyGetBossGuildDamageListRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCrossLevyGetBossGuildDamageListRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TCrossLevyGetBossGuildDamageListRsp));
  TcrossLevyScoreRankList_descriptor_ = file->message_type(5);
  static const int TcrossLevyScoreRankList_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TcrossLevyScoreRankList, rank_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TcrossLevyScoreRankList, score_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TcrossLevyScoreRankList, userinfo_),
  };
  TcrossLevyScoreRankList_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TcrossLevyScoreRankList_descriptor_,
      TcrossLevyScoreRankList::default_instance_,
      TcrossLevyScoreRankList_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TcrossLevyScoreRankList, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TcrossLevyScoreRankList, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TcrossLevyScoreRankList));
  TCrossLevyGetScoreRankListRsp_descriptor_ = file->message_type(6);
  static const int TCrossLevyGetScoreRankListRsp_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCrossLevyGetScoreRankListRsp, selfinfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCrossLevyGetScoreRankListRsp, ranklistarr_),
  };
  TCrossLevyGetScoreRankListRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TCrossLevyGetScoreRankListRsp_descriptor_,
      TCrossLevyGetScoreRankListRsp::default_instance_,
      TCrossLevyGetScoreRankListRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCrossLevyGetScoreRankListRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCrossLevyGetScoreRankListRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TCrossLevyGetScoreRankListRsp));
  TcrossLevyAtkNumRankList_descriptor_ = file->message_type(7);
  static const int TcrossLevyAtkNumRankList_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TcrossLevyAtkNumRankList, rank_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TcrossLevyAtkNumRankList, atknum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TcrossLevyAtkNumRankList, userinfo_),
  };
  TcrossLevyAtkNumRankList_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TcrossLevyAtkNumRankList_descriptor_,
      TcrossLevyAtkNumRankList::default_instance_,
      TcrossLevyAtkNumRankList_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TcrossLevyAtkNumRankList, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TcrossLevyAtkNumRankList, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TcrossLevyAtkNumRankList));
  TCrossLevyGetAtkNumRankListRsp_descriptor_ = file->message_type(8);
  static const int TCrossLevyGetAtkNumRankListRsp_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCrossLevyGetAtkNumRankListRsp, selfinfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCrossLevyGetAtkNumRankListRsp, ranklistarr_),
  };
  TCrossLevyGetAtkNumRankListRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TCrossLevyGetAtkNumRankListRsp_descriptor_,
      TCrossLevyGetAtkNumRankListRsp::default_instance_,
      TCrossLevyGetAtkNumRankListRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCrossLevyGetAtkNumRankListRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCrossLevyGetAtkNumRankListRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TCrossLevyGetAtkNumRankListRsp));
  TCrossLevyPlunderPreviewReq_descriptor_ = file->message_type(9);
  static const int TCrossLevyPlunderPreviewReq_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCrossLevyPlunderPreviewReq, cityid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCrossLevyPlunderPreviewReq, campid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCrossLevyPlunderPreviewReq, enemyuid_),
  };
  TCrossLevyPlunderPreviewReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TCrossLevyPlunderPreviewReq_descriptor_,
      TCrossLevyPlunderPreviewReq::default_instance_,
      TCrossLevyPlunderPreviewReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCrossLevyPlunderPreviewReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCrossLevyPlunderPreviewReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TCrossLevyPlunderPreviewReq));
  TCrossLevyPlunderPreviewRsp_descriptor_ = file->message_type(10);
  static const int TCrossLevyPlunderPreviewRsp_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCrossLevyPlunderPreviewRsp, rewardarr_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCrossLevyPlunderPreviewRsp, rewardscore_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCrossLevyPlunderPreviewRsp, ratio_),
  };
  TCrossLevyPlunderPreviewRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TCrossLevyPlunderPreviewRsp_descriptor_,
      TCrossLevyPlunderPreviewRsp::default_instance_,
      TCrossLevyPlunderPreviewRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCrossLevyPlunderPreviewRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCrossLevyPlunderPreviewRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TCrossLevyPlunderPreviewRsp));
  TCrossLevyExpelPreviewReq_descriptor_ = file->message_type(11);
  static const int TCrossLevyExpelPreviewReq_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCrossLevyExpelPreviewReq, cityid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCrossLevyExpelPreviewReq, campid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCrossLevyExpelPreviewReq, enemyuid_),
  };
  TCrossLevyExpelPreviewReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TCrossLevyExpelPreviewReq_descriptor_,
      TCrossLevyExpelPreviewReq::default_instance_,
      TCrossLevyExpelPreviewReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCrossLevyExpelPreviewReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCrossLevyExpelPreviewReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TCrossLevyExpelPreviewReq));
  TCrossLevyExpelPreviewRsp_descriptor_ = file->message_type(12);
  static const int TCrossLevyExpelPreviewRsp_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCrossLevyExpelPreviewRsp, rewardarr_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCrossLevyExpelPreviewRsp, rewardscore_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCrossLevyExpelPreviewRsp, ratio_),
  };
  TCrossLevyExpelPreviewRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TCrossLevyExpelPreviewRsp_descriptor_,
      TCrossLevyExpelPreviewRsp::default_instance_,
      TCrossLevyExpelPreviewRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCrossLevyExpelPreviewRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCrossLevyExpelPreviewRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TCrossLevyExpelPreviewRsp));
  TCrossLevyAttackMonsterReq_descriptor_ = file->message_type(13);
  static const int TCrossLevyAttackMonsterReq_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCrossLevyAttackMonsterReq, monsterid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCrossLevyAttackMonsterReq, monsterrfrtime_),
  };
  TCrossLevyAttackMonsterReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TCrossLevyAttackMonsterReq_descriptor_,
      TCrossLevyAttackMonsterReq::default_instance_,
      TCrossLevyAttackMonsterReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCrossLevyAttackMonsterReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCrossLevyAttackMonsterReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TCrossLevyAttackMonsterReq));
  TCrossLevyAttackMonsterRsp_descriptor_ = file->message_type(14);
  static const int TCrossLevyAttackMonsterRsp_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCrossLevyAttackMonsterRsp, rewardscore_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCrossLevyAttackMonsterRsp, monsterbattleresultarr_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCrossLevyAttackMonsterRsp, monsterarmyhpinfoarr_),
  };
  TCrossLevyAttackMonsterRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TCrossLevyAttackMonsterRsp_descriptor_,
      TCrossLevyAttackMonsterRsp::default_instance_,
      TCrossLevyAttackMonsterRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCrossLevyAttackMonsterRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCrossLevyAttackMonsterRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TCrossLevyAttackMonsterRsp));
  TCrossLevyFastMoveReq_descriptor_ = file->message_type(15);
  static const int TCrossLevyFastMoveReq_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCrossLevyFastMoveReq, cityid_),
  };
  TCrossLevyFastMoveReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TCrossLevyFastMoveReq_descriptor_,
      TCrossLevyFastMoveReq::default_instance_,
      TCrossLevyFastMoveReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCrossLevyFastMoveReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCrossLevyFastMoveReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TCrossLevyFastMoveReq));
  TCrossLevyFastMoveRsp_descriptor_ = file->message_type(16);
  static const int TCrossLevyFastMoveRsp_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCrossLevyFastMoveRsp, campid_),
  };
  TCrossLevyFastMoveRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TCrossLevyFastMoveRsp_descriptor_,
      TCrossLevyFastMoveRsp::default_instance_,
      TCrossLevyFastMoveRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCrossLevyFastMoveRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCrossLevyFastMoveRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TCrossLevyFastMoveRsp));
  TCrossLevyReceiveAllSettleRewardRsp_descriptor_ = file->message_type(17);
  static const int TCrossLevyReceiveAllSettleRewardRsp_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCrossLevyReceiveAllSettleRewardRsp, rewardarr_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCrossLevyReceiveAllSettleRewardRsp, settlescore_),
  };
  TCrossLevyReceiveAllSettleRewardRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TCrossLevyReceiveAllSettleRewardRsp_descriptor_,
      TCrossLevyReceiveAllSettleRewardRsp::default_instance_,
      TCrossLevyReceiveAllSettleRewardRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCrossLevyReceiveAllSettleRewardRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCrossLevyReceiveAllSettleRewardRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TCrossLevyReceiveAllSettleRewardRsp));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_net_2fCrossLevyPart_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TCrossLevyScoreRankListInTopRank_descriptor_, &TCrossLevyScoreRankListInTopRank::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TCrossLevyAtkNumRankListInTopRank_descriptor_, &TCrossLevyAtkNumRankListInTopRank::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TCrossLevyBossGuildDamageList_descriptor_, &TCrossLevyBossGuildDamageList::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TCrossLevyGetBossGuildDamageListReq_descriptor_, &TCrossLevyGetBossGuildDamageListReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TCrossLevyGetBossGuildDamageListRsp_descriptor_, &TCrossLevyGetBossGuildDamageListRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TcrossLevyScoreRankList_descriptor_, &TcrossLevyScoreRankList::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TCrossLevyGetScoreRankListRsp_descriptor_, &TCrossLevyGetScoreRankListRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TcrossLevyAtkNumRankList_descriptor_, &TcrossLevyAtkNumRankList::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TCrossLevyGetAtkNumRankListRsp_descriptor_, &TCrossLevyGetAtkNumRankListRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TCrossLevyPlunderPreviewReq_descriptor_, &TCrossLevyPlunderPreviewReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TCrossLevyPlunderPreviewRsp_descriptor_, &TCrossLevyPlunderPreviewRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TCrossLevyExpelPreviewReq_descriptor_, &TCrossLevyExpelPreviewReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TCrossLevyExpelPreviewRsp_descriptor_, &TCrossLevyExpelPreviewRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TCrossLevyAttackMonsterReq_descriptor_, &TCrossLevyAttackMonsterReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TCrossLevyAttackMonsterRsp_descriptor_, &TCrossLevyAttackMonsterRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TCrossLevyFastMoveReq_descriptor_, &TCrossLevyFastMoveReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TCrossLevyFastMoveRsp_descriptor_, &TCrossLevyFastMoveRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TCrossLevyReceiveAllSettleRewardRsp_descriptor_, &TCrossLevyReceiveAllSettleRewardRsp::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_net_2fCrossLevyPart_2eproto() {
  delete TCrossLevyScoreRankListInTopRank::default_instance_;
  delete TCrossLevyScoreRankListInTopRank_reflection_;
  delete TCrossLevyAtkNumRankListInTopRank::default_instance_;
  delete TCrossLevyAtkNumRankListInTopRank_reflection_;
  delete TCrossLevyBossGuildDamageList::default_instance_;
  delete TCrossLevyBossGuildDamageList_reflection_;
  delete TCrossLevyGetBossGuildDamageListReq::default_instance_;
  delete TCrossLevyGetBossGuildDamageListReq_reflection_;
  delete TCrossLevyGetBossGuildDamageListRsp::default_instance_;
  delete TCrossLevyGetBossGuildDamageListRsp_reflection_;
  delete TcrossLevyScoreRankList::default_instance_;
  delete TcrossLevyScoreRankList_reflection_;
  delete TCrossLevyGetScoreRankListRsp::default_instance_;
  delete TCrossLevyGetScoreRankListRsp_reflection_;
  delete TcrossLevyAtkNumRankList::default_instance_;
  delete TcrossLevyAtkNumRankList_reflection_;
  delete TCrossLevyGetAtkNumRankListRsp::default_instance_;
  delete TCrossLevyGetAtkNumRankListRsp_reflection_;
  delete TCrossLevyPlunderPreviewReq::default_instance_;
  delete TCrossLevyPlunderPreviewReq_reflection_;
  delete TCrossLevyPlunderPreviewRsp::default_instance_;
  delete TCrossLevyPlunderPreviewRsp_reflection_;
  delete TCrossLevyExpelPreviewReq::default_instance_;
  delete TCrossLevyExpelPreviewReq_reflection_;
  delete TCrossLevyExpelPreviewRsp::default_instance_;
  delete TCrossLevyExpelPreviewRsp_reflection_;
  delete TCrossLevyAttackMonsterReq::default_instance_;
  delete TCrossLevyAttackMonsterReq_reflection_;
  delete TCrossLevyAttackMonsterRsp::default_instance_;
  delete TCrossLevyAttackMonsterRsp_reflection_;
  delete TCrossLevyFastMoveReq::default_instance_;
  delete TCrossLevyFastMoveReq_reflection_;
  delete TCrossLevyFastMoveRsp::default_instance_;
  delete TCrossLevyFastMoveRsp_reflection_;
  delete TCrossLevyReceiveAllSettleRewardRsp::default_instance_;
  delete TCrossLevyReceiveAllSettleRewardRsp_reflection_;
}

void protobuf_AddDesc_net_2fCrossLevyPart_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::pb::protobuf_AddDesc_net_2fUser_2eproto();
  ::pb::protobuf_AddDesc_net_2fCommonReward_2eproto();
  ::pb::protobuf_AddDesc_net_2fCrossLevy_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\027net/CrossLevyPart.proto\022\002pb\032\016net/User."
    "proto\032\026net/CommonReward.proto\032\023net/Cross"
    "Levy.proto\"c\n TCrossLevyScoreRankListInT"
    "opRank\022\013\n\003Uid\030\001 \001(\004\022\020\n\010ServerId\030\002 \001(\t\022\r\n"
    "\005Score\030\003 \001(\r\022\021\n\tScoreTime\030\004 \001(\004\"f\n!TCros"
    "sLevyAtkNumRankListInTopRank\022\013\n\003Uid\030\001 \001("
    "\004\022\020\n\010ServerId\030\002 \001(\t\022\016\n\006AtkNum\030\003 \001(\r\022\022\n\nA"
    "tkNumTime\030\004 \001(\004\"\235\001\n\035TCrossLevyBossGuildD"
    "amageList\022\017\n\007GuildId\030\001 \001(\004\022\021\n\tGuildName\030"
    "\002 \001(\t\022\022\n\nBannerName\030\003 \001(\t\022\022\n\nBannerBase\030"
    "\004 \001(\r\022\022\n\nFightForce\030\005 \001(\004\022\016\n\006Damage\030\006 \001("
    "\004\022\014\n\004Rank\030\007 \001(\r\"5\n#TCrossLevyGetBossGuil"
    "dDamageListReq\022\016\n\006BossId\030\001 \001(\r\"\230\001\n#TCros"
    "sLevyGetBossGuildDamageListRsp\0228\n\rSelfGu"
    "ildInfo\030\001 \001(\0132!.pb.TCrossLevyBossGuildDa"
    "mageList\0227\n\014GuildListArr\030\002 \003(\0132!.pb.TCro"
    "ssLevyBossGuildDamageList\"]\n\027TcrossLevyS"
    "coreRankList\022\014\n\004Rank\030\001 \001(\r\022\r\n\005Score\030\002 \001("
    "\r\022%\n\010UserInfo\030\003 \001(\0132\023.pb.TUserSimpleInfo"
    "\"\200\001\n\035TCrossLevyGetScoreRankListRsp\022-\n\010Se"
    "lfInfo\030\001 \001(\0132\033.pb.TcrossLevyScoreRankLis"
    "t\0220\n\013RankListArr\030\002 \003(\0132\033.pb.TcrossLevySc"
    "oreRankList\"_\n\030TcrossLevyAtkNumRankList\022"
    "\014\n\004Rank\030\001 \001(\r\022\016\n\006AtkNum\030\002 \001(\r\022%\n\010UserInf"
    "o\030\003 \001(\0132\023.pb.TUserSimpleInfo\"\203\001\n\036TCrossL"
    "evyGetAtkNumRankListRsp\022.\n\010SelfInfo\030\001 \001("
    "\0132\034.pb.TcrossLevyAtkNumRankList\0221\n\013RankL"
    "istArr\030\002 \003(\0132\034.pb.TcrossLevyAtkNumRankLi"
    "st\"O\n\033TCrossLevyPlunderPreviewReq\022\016\n\006Cit"
    "yId\030\001 \001(\r\022\016\n\006CampId\030\002 \001(\r\022\020\n\010EnemyUid\030\003 "
    "\001(\004\"g\n\033TCrossLevyPlunderPreviewRsp\022$\n\tRe"
    "wardArr\030\001 \003(\0132\021.pb.TCommonReward\022\023\n\013Rewa"
    "rdScore\030\002 \001(\r\022\r\n\005Ratio\030\003 \001(\r\"M\n\031TCrossLe"
    "vyExpelPreviewReq\022\016\n\006CityId\030\001 \001(\r\022\016\n\006Cam"
    "pId\030\002 \001(\r\022\020\n\010EnemyUid\030\003 \001(\004\"e\n\031TCrossLev"
    "yExpelPreviewRsp\022$\n\tRewardArr\030\001 \003(\0132\021.pb"
    ".TCommonReward\022\023\n\013RewardScore\030\002 \001(\r\022\r\n\005R"
    "atio\030\003 \001(\r\"G\n\032TCrossLevyAttackMonsterReq"
    "\022\021\n\tMonsterId\030\001 \001(\r\022\026\n\016MonsterRfrTime\030\002 "
    "\001(\004\"\220\001\n\032TCrossLevyAttackMonsterRsp\022\023\n\013Re"
    "wardScore\030\001 \001(\r\022\036\n\026MonsterBattleResultAr"
    "r\030\002 \003(\014\022=\n\024MonsterArmyHpInfoArr\030\003 \003(\0132\037."
    "pb.TCrossLevyMonsterArmyHpInfo\"\'\n\025TCross"
    "LevyFastMoveReq\022\016\n\006CityId\030\001 \001(\r\"\'\n\025TCros"
    "sLevyFastMoveRsp\022\016\n\006CampId\030\001 \001(\r\"`\n#TCro"
    "ssLevyReceiveAllSettleRewardRsp\022$\n\tRewar"
    "dArr\030\001 \003(\0132\021.pb.TCommonReward\022\023\n\013SettleS"
    "core\030\002 \001(\r", 1890);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "net/CrossLevyPart.proto", &protobuf_RegisterTypes);
  TCrossLevyScoreRankListInTopRank::default_instance_ = new TCrossLevyScoreRankListInTopRank();
  TCrossLevyAtkNumRankListInTopRank::default_instance_ = new TCrossLevyAtkNumRankListInTopRank();
  TCrossLevyBossGuildDamageList::default_instance_ = new TCrossLevyBossGuildDamageList();
  TCrossLevyGetBossGuildDamageListReq::default_instance_ = new TCrossLevyGetBossGuildDamageListReq();
  TCrossLevyGetBossGuildDamageListRsp::default_instance_ = new TCrossLevyGetBossGuildDamageListRsp();
  TcrossLevyScoreRankList::default_instance_ = new TcrossLevyScoreRankList();
  TCrossLevyGetScoreRankListRsp::default_instance_ = new TCrossLevyGetScoreRankListRsp();
  TcrossLevyAtkNumRankList::default_instance_ = new TcrossLevyAtkNumRankList();
  TCrossLevyGetAtkNumRankListRsp::default_instance_ = new TCrossLevyGetAtkNumRankListRsp();
  TCrossLevyPlunderPreviewReq::default_instance_ = new TCrossLevyPlunderPreviewReq();
  TCrossLevyPlunderPreviewRsp::default_instance_ = new TCrossLevyPlunderPreviewRsp();
  TCrossLevyExpelPreviewReq::default_instance_ = new TCrossLevyExpelPreviewReq();
  TCrossLevyExpelPreviewRsp::default_instance_ = new TCrossLevyExpelPreviewRsp();
  TCrossLevyAttackMonsterReq::default_instance_ = new TCrossLevyAttackMonsterReq();
  TCrossLevyAttackMonsterRsp::default_instance_ = new TCrossLevyAttackMonsterRsp();
  TCrossLevyFastMoveReq::default_instance_ = new TCrossLevyFastMoveReq();
  TCrossLevyFastMoveRsp::default_instance_ = new TCrossLevyFastMoveRsp();
  TCrossLevyReceiveAllSettleRewardRsp::default_instance_ = new TCrossLevyReceiveAllSettleRewardRsp();
  TCrossLevyScoreRankListInTopRank::default_instance_->InitAsDefaultInstance();
  TCrossLevyAtkNumRankListInTopRank::default_instance_->InitAsDefaultInstance();
  TCrossLevyBossGuildDamageList::default_instance_->InitAsDefaultInstance();
  TCrossLevyGetBossGuildDamageListReq::default_instance_->InitAsDefaultInstance();
  TCrossLevyGetBossGuildDamageListRsp::default_instance_->InitAsDefaultInstance();
  TcrossLevyScoreRankList::default_instance_->InitAsDefaultInstance();
  TCrossLevyGetScoreRankListRsp::default_instance_->InitAsDefaultInstance();
  TcrossLevyAtkNumRankList::default_instance_->InitAsDefaultInstance();
  TCrossLevyGetAtkNumRankListRsp::default_instance_->InitAsDefaultInstance();
  TCrossLevyPlunderPreviewReq::default_instance_->InitAsDefaultInstance();
  TCrossLevyPlunderPreviewRsp::default_instance_->InitAsDefaultInstance();
  TCrossLevyExpelPreviewReq::default_instance_->InitAsDefaultInstance();
  TCrossLevyExpelPreviewRsp::default_instance_->InitAsDefaultInstance();
  TCrossLevyAttackMonsterReq::default_instance_->InitAsDefaultInstance();
  TCrossLevyAttackMonsterRsp::default_instance_->InitAsDefaultInstance();
  TCrossLevyFastMoveReq::default_instance_->InitAsDefaultInstance();
  TCrossLevyFastMoveRsp::default_instance_->InitAsDefaultInstance();
  TCrossLevyReceiveAllSettleRewardRsp::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_net_2fCrossLevyPart_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_net_2fCrossLevyPart_2eproto {
  StaticDescriptorInitializer_net_2fCrossLevyPart_2eproto() {
    protobuf_AddDesc_net_2fCrossLevyPart_2eproto();
  }
} static_descriptor_initializer_net_2fCrossLevyPart_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int TCrossLevyScoreRankListInTopRank::kUidFieldNumber;
const int TCrossLevyScoreRankListInTopRank::kServerIdFieldNumber;
const int TCrossLevyScoreRankListInTopRank::kScoreFieldNumber;
const int TCrossLevyScoreRankListInTopRank::kScoreTimeFieldNumber;
#endif  // !_MSC_VER

TCrossLevyScoreRankListInTopRank::TCrossLevyScoreRankListInTopRank()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TCrossLevyScoreRankListInTopRank)
}

void TCrossLevyScoreRankListInTopRank::InitAsDefaultInstance() {
}

TCrossLevyScoreRankListInTopRank::TCrossLevyScoreRankListInTopRank(const TCrossLevyScoreRankListInTopRank& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TCrossLevyScoreRankListInTopRank)
}

void TCrossLevyScoreRankListInTopRank::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  uid_ = GOOGLE_ULONGLONG(0);
  serverid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  score_ = 0u;
  scoretime_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TCrossLevyScoreRankListInTopRank::~TCrossLevyScoreRankListInTopRank() {
  // @@protoc_insertion_point(destructor:pb.TCrossLevyScoreRankListInTopRank)
  SharedDtor();
}

void TCrossLevyScoreRankListInTopRank::SharedDtor() {
  if (serverid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete serverid_;
  }
  if (this != default_instance_) {
  }
}

void TCrossLevyScoreRankListInTopRank::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TCrossLevyScoreRankListInTopRank::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TCrossLevyScoreRankListInTopRank_descriptor_;
}

const TCrossLevyScoreRankListInTopRank& TCrossLevyScoreRankListInTopRank::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fCrossLevyPart_2eproto();
  return *default_instance_;
}

TCrossLevyScoreRankListInTopRank* TCrossLevyScoreRankListInTopRank::default_instance_ = NULL;

TCrossLevyScoreRankListInTopRank* TCrossLevyScoreRankListInTopRank::New() const {
  return new TCrossLevyScoreRankListInTopRank;
}

void TCrossLevyScoreRankListInTopRank::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<TCrossLevyScoreRankListInTopRank*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 15) {
    ZR_(scoretime_, score_);
    uid_ = GOOGLE_ULONGLONG(0);
    if (has_serverid()) {
      if (serverid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        serverid_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TCrossLevyScoreRankListInTopRank::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TCrossLevyScoreRankListInTopRank)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 Uid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &uid_)));
          set_has_uid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_ServerId;
        break;
      }

      // optional string ServerId = 2;
      case 2: {
        if (tag == 18) {
         parse_ServerId:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_serverid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->serverid().data(), this->serverid().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "serverid");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_Score;
        break;
      }

      // optional uint32 Score = 3;
      case 3: {
        if (tag == 24) {
         parse_Score:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &score_)));
          set_has_score();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_ScoreTime;
        break;
      }

      // optional uint64 ScoreTime = 4;
      case 4: {
        if (tag == 32) {
         parse_ScoreTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &scoretime_)));
          set_has_scoretime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TCrossLevyScoreRankListInTopRank)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TCrossLevyScoreRankListInTopRank)
  return false;
#undef DO_
}

void TCrossLevyScoreRankListInTopRank::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TCrossLevyScoreRankListInTopRank)
  // optional uint64 Uid = 1;
  if (has_uid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->uid(), output);
  }

  // optional string ServerId = 2;
  if (has_serverid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->serverid().data(), this->serverid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "serverid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->serverid(), output);
  }

  // optional uint32 Score = 3;
  if (has_score()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->score(), output);
  }

  // optional uint64 ScoreTime = 4;
  if (has_scoretime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->scoretime(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TCrossLevyScoreRankListInTopRank)
}

::google::protobuf::uint8* TCrossLevyScoreRankListInTopRank::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TCrossLevyScoreRankListInTopRank)
  // optional uint64 Uid = 1;
  if (has_uid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->uid(), target);
  }

  // optional string ServerId = 2;
  if (has_serverid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->serverid().data(), this->serverid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "serverid");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->serverid(), target);
  }

  // optional uint32 Score = 3;
  if (has_score()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->score(), target);
  }

  // optional uint64 ScoreTime = 4;
  if (has_scoretime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->scoretime(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TCrossLevyScoreRankListInTopRank)
  return target;
}

int TCrossLevyScoreRankListInTopRank::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 Uid = 1;
    if (has_uid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->uid());
    }

    // optional string ServerId = 2;
    if (has_serverid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->serverid());
    }

    // optional uint32 Score = 3;
    if (has_score()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->score());
    }

    // optional uint64 ScoreTime = 4;
    if (has_scoretime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->scoretime());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TCrossLevyScoreRankListInTopRank::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TCrossLevyScoreRankListInTopRank* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TCrossLevyScoreRankListInTopRank*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TCrossLevyScoreRankListInTopRank::MergeFrom(const TCrossLevyScoreRankListInTopRank& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_uid()) {
      set_uid(from.uid());
    }
    if (from.has_serverid()) {
      set_serverid(from.serverid());
    }
    if (from.has_score()) {
      set_score(from.score());
    }
    if (from.has_scoretime()) {
      set_scoretime(from.scoretime());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TCrossLevyScoreRankListInTopRank::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TCrossLevyScoreRankListInTopRank::CopyFrom(const TCrossLevyScoreRankListInTopRank& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TCrossLevyScoreRankListInTopRank::IsInitialized() const {

  return true;
}

void TCrossLevyScoreRankListInTopRank::Swap(TCrossLevyScoreRankListInTopRank* other) {
  if (other != this) {
    std::swap(uid_, other->uid_);
    std::swap(serverid_, other->serverid_);
    std::swap(score_, other->score_);
    std::swap(scoretime_, other->scoretime_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TCrossLevyScoreRankListInTopRank::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TCrossLevyScoreRankListInTopRank_descriptor_;
  metadata.reflection = TCrossLevyScoreRankListInTopRank_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TCrossLevyAtkNumRankListInTopRank::kUidFieldNumber;
const int TCrossLevyAtkNumRankListInTopRank::kServerIdFieldNumber;
const int TCrossLevyAtkNumRankListInTopRank::kAtkNumFieldNumber;
const int TCrossLevyAtkNumRankListInTopRank::kAtkNumTimeFieldNumber;
#endif  // !_MSC_VER

TCrossLevyAtkNumRankListInTopRank::TCrossLevyAtkNumRankListInTopRank()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TCrossLevyAtkNumRankListInTopRank)
}

void TCrossLevyAtkNumRankListInTopRank::InitAsDefaultInstance() {
}

TCrossLevyAtkNumRankListInTopRank::TCrossLevyAtkNumRankListInTopRank(const TCrossLevyAtkNumRankListInTopRank& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TCrossLevyAtkNumRankListInTopRank)
}

void TCrossLevyAtkNumRankListInTopRank::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  uid_ = GOOGLE_ULONGLONG(0);
  serverid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  atknum_ = 0u;
  atknumtime_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TCrossLevyAtkNumRankListInTopRank::~TCrossLevyAtkNumRankListInTopRank() {
  // @@protoc_insertion_point(destructor:pb.TCrossLevyAtkNumRankListInTopRank)
  SharedDtor();
}

void TCrossLevyAtkNumRankListInTopRank::SharedDtor() {
  if (serverid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete serverid_;
  }
  if (this != default_instance_) {
  }
}

void TCrossLevyAtkNumRankListInTopRank::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TCrossLevyAtkNumRankListInTopRank::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TCrossLevyAtkNumRankListInTopRank_descriptor_;
}

const TCrossLevyAtkNumRankListInTopRank& TCrossLevyAtkNumRankListInTopRank::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fCrossLevyPart_2eproto();
  return *default_instance_;
}

TCrossLevyAtkNumRankListInTopRank* TCrossLevyAtkNumRankListInTopRank::default_instance_ = NULL;

TCrossLevyAtkNumRankListInTopRank* TCrossLevyAtkNumRankListInTopRank::New() const {
  return new TCrossLevyAtkNumRankListInTopRank;
}

void TCrossLevyAtkNumRankListInTopRank::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<TCrossLevyAtkNumRankListInTopRank*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 15) {
    ZR_(atknumtime_, atknum_);
    uid_ = GOOGLE_ULONGLONG(0);
    if (has_serverid()) {
      if (serverid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        serverid_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TCrossLevyAtkNumRankListInTopRank::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TCrossLevyAtkNumRankListInTopRank)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 Uid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &uid_)));
          set_has_uid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_ServerId;
        break;
      }

      // optional string ServerId = 2;
      case 2: {
        if (tag == 18) {
         parse_ServerId:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_serverid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->serverid().data(), this->serverid().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "serverid");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_AtkNum;
        break;
      }

      // optional uint32 AtkNum = 3;
      case 3: {
        if (tag == 24) {
         parse_AtkNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &atknum_)));
          set_has_atknum();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_AtkNumTime;
        break;
      }

      // optional uint64 AtkNumTime = 4;
      case 4: {
        if (tag == 32) {
         parse_AtkNumTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &atknumtime_)));
          set_has_atknumtime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TCrossLevyAtkNumRankListInTopRank)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TCrossLevyAtkNumRankListInTopRank)
  return false;
#undef DO_
}

void TCrossLevyAtkNumRankListInTopRank::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TCrossLevyAtkNumRankListInTopRank)
  // optional uint64 Uid = 1;
  if (has_uid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->uid(), output);
  }

  // optional string ServerId = 2;
  if (has_serverid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->serverid().data(), this->serverid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "serverid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->serverid(), output);
  }

  // optional uint32 AtkNum = 3;
  if (has_atknum()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->atknum(), output);
  }

  // optional uint64 AtkNumTime = 4;
  if (has_atknumtime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->atknumtime(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TCrossLevyAtkNumRankListInTopRank)
}

::google::protobuf::uint8* TCrossLevyAtkNumRankListInTopRank::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TCrossLevyAtkNumRankListInTopRank)
  // optional uint64 Uid = 1;
  if (has_uid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->uid(), target);
  }

  // optional string ServerId = 2;
  if (has_serverid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->serverid().data(), this->serverid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "serverid");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->serverid(), target);
  }

  // optional uint32 AtkNum = 3;
  if (has_atknum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->atknum(), target);
  }

  // optional uint64 AtkNumTime = 4;
  if (has_atknumtime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->atknumtime(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TCrossLevyAtkNumRankListInTopRank)
  return target;
}

int TCrossLevyAtkNumRankListInTopRank::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 Uid = 1;
    if (has_uid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->uid());
    }

    // optional string ServerId = 2;
    if (has_serverid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->serverid());
    }

    // optional uint32 AtkNum = 3;
    if (has_atknum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->atknum());
    }

    // optional uint64 AtkNumTime = 4;
    if (has_atknumtime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->atknumtime());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TCrossLevyAtkNumRankListInTopRank::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TCrossLevyAtkNumRankListInTopRank* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TCrossLevyAtkNumRankListInTopRank*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TCrossLevyAtkNumRankListInTopRank::MergeFrom(const TCrossLevyAtkNumRankListInTopRank& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_uid()) {
      set_uid(from.uid());
    }
    if (from.has_serverid()) {
      set_serverid(from.serverid());
    }
    if (from.has_atknum()) {
      set_atknum(from.atknum());
    }
    if (from.has_atknumtime()) {
      set_atknumtime(from.atknumtime());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TCrossLevyAtkNumRankListInTopRank::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TCrossLevyAtkNumRankListInTopRank::CopyFrom(const TCrossLevyAtkNumRankListInTopRank& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TCrossLevyAtkNumRankListInTopRank::IsInitialized() const {

  return true;
}

void TCrossLevyAtkNumRankListInTopRank::Swap(TCrossLevyAtkNumRankListInTopRank* other) {
  if (other != this) {
    std::swap(uid_, other->uid_);
    std::swap(serverid_, other->serverid_);
    std::swap(atknum_, other->atknum_);
    std::swap(atknumtime_, other->atknumtime_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TCrossLevyAtkNumRankListInTopRank::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TCrossLevyAtkNumRankListInTopRank_descriptor_;
  metadata.reflection = TCrossLevyAtkNumRankListInTopRank_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TCrossLevyBossGuildDamageList::kGuildIdFieldNumber;
const int TCrossLevyBossGuildDamageList::kGuildNameFieldNumber;
const int TCrossLevyBossGuildDamageList::kBannerNameFieldNumber;
const int TCrossLevyBossGuildDamageList::kBannerBaseFieldNumber;
const int TCrossLevyBossGuildDamageList::kFightForceFieldNumber;
const int TCrossLevyBossGuildDamageList::kDamageFieldNumber;
const int TCrossLevyBossGuildDamageList::kRankFieldNumber;
#endif  // !_MSC_VER

TCrossLevyBossGuildDamageList::TCrossLevyBossGuildDamageList()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TCrossLevyBossGuildDamageList)
}

void TCrossLevyBossGuildDamageList::InitAsDefaultInstance() {
}

TCrossLevyBossGuildDamageList::TCrossLevyBossGuildDamageList(const TCrossLevyBossGuildDamageList& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TCrossLevyBossGuildDamageList)
}

void TCrossLevyBossGuildDamageList::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  guildid_ = GOOGLE_ULONGLONG(0);
  guildname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  bannername_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  bannerbase_ = 0u;
  fightforce_ = GOOGLE_ULONGLONG(0);
  damage_ = GOOGLE_ULONGLONG(0);
  rank_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TCrossLevyBossGuildDamageList::~TCrossLevyBossGuildDamageList() {
  // @@protoc_insertion_point(destructor:pb.TCrossLevyBossGuildDamageList)
  SharedDtor();
}

void TCrossLevyBossGuildDamageList::SharedDtor() {
  if (guildname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete guildname_;
  }
  if (bannername_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete bannername_;
  }
  if (this != default_instance_) {
  }
}

void TCrossLevyBossGuildDamageList::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TCrossLevyBossGuildDamageList::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TCrossLevyBossGuildDamageList_descriptor_;
}

const TCrossLevyBossGuildDamageList& TCrossLevyBossGuildDamageList::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fCrossLevyPart_2eproto();
  return *default_instance_;
}

TCrossLevyBossGuildDamageList* TCrossLevyBossGuildDamageList::default_instance_ = NULL;

TCrossLevyBossGuildDamageList* TCrossLevyBossGuildDamageList::New() const {
  return new TCrossLevyBossGuildDamageList;
}

void TCrossLevyBossGuildDamageList::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<TCrossLevyBossGuildDamageList*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 127) {
    ZR_(fightforce_, damage_);
    guildid_ = GOOGLE_ULONGLONG(0);
    if (has_guildname()) {
      if (guildname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        guildname_->clear();
      }
    }
    if (has_bannername()) {
      if (bannername_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        bannername_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TCrossLevyBossGuildDamageList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TCrossLevyBossGuildDamageList)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 GuildId = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &guildid_)));
          set_has_guildid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_GuildName;
        break;
      }

      // optional string GuildName = 2;
      case 2: {
        if (tag == 18) {
         parse_GuildName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_guildname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->guildname().data(), this->guildname().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "guildname");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_BannerName;
        break;
      }

      // optional string BannerName = 3;
      case 3: {
        if (tag == 26) {
         parse_BannerName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_bannername()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->bannername().data(), this->bannername().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "bannername");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_BannerBase;
        break;
      }

      // optional uint32 BannerBase = 4;
      case 4: {
        if (tag == 32) {
         parse_BannerBase:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &bannerbase_)));
          set_has_bannerbase();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_FightForce;
        break;
      }

      // optional uint64 FightForce = 5;
      case 5: {
        if (tag == 40) {
         parse_FightForce:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &fightforce_)));
          set_has_fightforce();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_Damage;
        break;
      }

      // optional uint64 Damage = 6;
      case 6: {
        if (tag == 48) {
         parse_Damage:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &damage_)));
          set_has_damage();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_Rank;
        break;
      }

      // optional uint32 Rank = 7;
      case 7: {
        if (tag == 56) {
         parse_Rank:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &rank_)));
          set_has_rank();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TCrossLevyBossGuildDamageList)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TCrossLevyBossGuildDamageList)
  return false;
#undef DO_
}

void TCrossLevyBossGuildDamageList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TCrossLevyBossGuildDamageList)
  // optional uint64 GuildId = 1;
  if (has_guildid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->guildid(), output);
  }

  // optional string GuildName = 2;
  if (has_guildname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->guildname().data(), this->guildname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "guildname");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->guildname(), output);
  }

  // optional string BannerName = 3;
  if (has_bannername()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->bannername().data(), this->bannername().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "bannername");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->bannername(), output);
  }

  // optional uint32 BannerBase = 4;
  if (has_bannerbase()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->bannerbase(), output);
  }

  // optional uint64 FightForce = 5;
  if (has_fightforce()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(5, this->fightforce(), output);
  }

  // optional uint64 Damage = 6;
  if (has_damage()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(6, this->damage(), output);
  }

  // optional uint32 Rank = 7;
  if (has_rank()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->rank(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TCrossLevyBossGuildDamageList)
}

::google::protobuf::uint8* TCrossLevyBossGuildDamageList::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TCrossLevyBossGuildDamageList)
  // optional uint64 GuildId = 1;
  if (has_guildid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->guildid(), target);
  }

  // optional string GuildName = 2;
  if (has_guildname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->guildname().data(), this->guildname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "guildname");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->guildname(), target);
  }

  // optional string BannerName = 3;
  if (has_bannername()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->bannername().data(), this->bannername().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "bannername");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->bannername(), target);
  }

  // optional uint32 BannerBase = 4;
  if (has_bannerbase()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->bannerbase(), target);
  }

  // optional uint64 FightForce = 5;
  if (has_fightforce()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(5, this->fightforce(), target);
  }

  // optional uint64 Damage = 6;
  if (has_damage()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(6, this->damage(), target);
  }

  // optional uint32 Rank = 7;
  if (has_rank()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->rank(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TCrossLevyBossGuildDamageList)
  return target;
}

int TCrossLevyBossGuildDamageList::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 GuildId = 1;
    if (has_guildid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->guildid());
    }

    // optional string GuildName = 2;
    if (has_guildname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->guildname());
    }

    // optional string BannerName = 3;
    if (has_bannername()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->bannername());
    }

    // optional uint32 BannerBase = 4;
    if (has_bannerbase()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->bannerbase());
    }

    // optional uint64 FightForce = 5;
    if (has_fightforce()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->fightforce());
    }

    // optional uint64 Damage = 6;
    if (has_damage()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->damage());
    }

    // optional uint32 Rank = 7;
    if (has_rank()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->rank());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TCrossLevyBossGuildDamageList::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TCrossLevyBossGuildDamageList* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TCrossLevyBossGuildDamageList*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TCrossLevyBossGuildDamageList::MergeFrom(const TCrossLevyBossGuildDamageList& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_guildid()) {
      set_guildid(from.guildid());
    }
    if (from.has_guildname()) {
      set_guildname(from.guildname());
    }
    if (from.has_bannername()) {
      set_bannername(from.bannername());
    }
    if (from.has_bannerbase()) {
      set_bannerbase(from.bannerbase());
    }
    if (from.has_fightforce()) {
      set_fightforce(from.fightforce());
    }
    if (from.has_damage()) {
      set_damage(from.damage());
    }
    if (from.has_rank()) {
      set_rank(from.rank());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TCrossLevyBossGuildDamageList::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TCrossLevyBossGuildDamageList::CopyFrom(const TCrossLevyBossGuildDamageList& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TCrossLevyBossGuildDamageList::IsInitialized() const {

  return true;
}

void TCrossLevyBossGuildDamageList::Swap(TCrossLevyBossGuildDamageList* other) {
  if (other != this) {
    std::swap(guildid_, other->guildid_);
    std::swap(guildname_, other->guildname_);
    std::swap(bannername_, other->bannername_);
    std::swap(bannerbase_, other->bannerbase_);
    std::swap(fightforce_, other->fightforce_);
    std::swap(damage_, other->damage_);
    std::swap(rank_, other->rank_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TCrossLevyBossGuildDamageList::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TCrossLevyBossGuildDamageList_descriptor_;
  metadata.reflection = TCrossLevyBossGuildDamageList_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TCrossLevyGetBossGuildDamageListReq::kBossIdFieldNumber;
#endif  // !_MSC_VER

TCrossLevyGetBossGuildDamageListReq::TCrossLevyGetBossGuildDamageListReq()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TCrossLevyGetBossGuildDamageListReq)
}

void TCrossLevyGetBossGuildDamageListReq::InitAsDefaultInstance() {
}

TCrossLevyGetBossGuildDamageListReq::TCrossLevyGetBossGuildDamageListReq(const TCrossLevyGetBossGuildDamageListReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TCrossLevyGetBossGuildDamageListReq)
}

void TCrossLevyGetBossGuildDamageListReq::SharedCtor() {
  _cached_size_ = 0;
  bossid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TCrossLevyGetBossGuildDamageListReq::~TCrossLevyGetBossGuildDamageListReq() {
  // @@protoc_insertion_point(destructor:pb.TCrossLevyGetBossGuildDamageListReq)
  SharedDtor();
}

void TCrossLevyGetBossGuildDamageListReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TCrossLevyGetBossGuildDamageListReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TCrossLevyGetBossGuildDamageListReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TCrossLevyGetBossGuildDamageListReq_descriptor_;
}

const TCrossLevyGetBossGuildDamageListReq& TCrossLevyGetBossGuildDamageListReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fCrossLevyPart_2eproto();
  return *default_instance_;
}

TCrossLevyGetBossGuildDamageListReq* TCrossLevyGetBossGuildDamageListReq::default_instance_ = NULL;

TCrossLevyGetBossGuildDamageListReq* TCrossLevyGetBossGuildDamageListReq::New() const {
  return new TCrossLevyGetBossGuildDamageListReq;
}

void TCrossLevyGetBossGuildDamageListReq::Clear() {
  bossid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TCrossLevyGetBossGuildDamageListReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TCrossLevyGetBossGuildDamageListReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 BossId = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &bossid_)));
          set_has_bossid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TCrossLevyGetBossGuildDamageListReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TCrossLevyGetBossGuildDamageListReq)
  return false;
#undef DO_
}

void TCrossLevyGetBossGuildDamageListReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TCrossLevyGetBossGuildDamageListReq)
  // optional uint32 BossId = 1;
  if (has_bossid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->bossid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TCrossLevyGetBossGuildDamageListReq)
}

::google::protobuf::uint8* TCrossLevyGetBossGuildDamageListReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TCrossLevyGetBossGuildDamageListReq)
  // optional uint32 BossId = 1;
  if (has_bossid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->bossid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TCrossLevyGetBossGuildDamageListReq)
  return target;
}

int TCrossLevyGetBossGuildDamageListReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 BossId = 1;
    if (has_bossid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->bossid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TCrossLevyGetBossGuildDamageListReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TCrossLevyGetBossGuildDamageListReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TCrossLevyGetBossGuildDamageListReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TCrossLevyGetBossGuildDamageListReq::MergeFrom(const TCrossLevyGetBossGuildDamageListReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_bossid()) {
      set_bossid(from.bossid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TCrossLevyGetBossGuildDamageListReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TCrossLevyGetBossGuildDamageListReq::CopyFrom(const TCrossLevyGetBossGuildDamageListReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TCrossLevyGetBossGuildDamageListReq::IsInitialized() const {

  return true;
}

void TCrossLevyGetBossGuildDamageListReq::Swap(TCrossLevyGetBossGuildDamageListReq* other) {
  if (other != this) {
    std::swap(bossid_, other->bossid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TCrossLevyGetBossGuildDamageListReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TCrossLevyGetBossGuildDamageListReq_descriptor_;
  metadata.reflection = TCrossLevyGetBossGuildDamageListReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TCrossLevyGetBossGuildDamageListRsp::kSelfGuildInfoFieldNumber;
const int TCrossLevyGetBossGuildDamageListRsp::kGuildListArrFieldNumber;
#endif  // !_MSC_VER

TCrossLevyGetBossGuildDamageListRsp::TCrossLevyGetBossGuildDamageListRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TCrossLevyGetBossGuildDamageListRsp)
}

void TCrossLevyGetBossGuildDamageListRsp::InitAsDefaultInstance() {
  selfguildinfo_ = const_cast< ::pb::TCrossLevyBossGuildDamageList*>(&::pb::TCrossLevyBossGuildDamageList::default_instance());
}

TCrossLevyGetBossGuildDamageListRsp::TCrossLevyGetBossGuildDamageListRsp(const TCrossLevyGetBossGuildDamageListRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TCrossLevyGetBossGuildDamageListRsp)
}

void TCrossLevyGetBossGuildDamageListRsp::SharedCtor() {
  _cached_size_ = 0;
  selfguildinfo_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TCrossLevyGetBossGuildDamageListRsp::~TCrossLevyGetBossGuildDamageListRsp() {
  // @@protoc_insertion_point(destructor:pb.TCrossLevyGetBossGuildDamageListRsp)
  SharedDtor();
}

void TCrossLevyGetBossGuildDamageListRsp::SharedDtor() {
  if (this != default_instance_) {
    delete selfguildinfo_;
  }
}

void TCrossLevyGetBossGuildDamageListRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TCrossLevyGetBossGuildDamageListRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TCrossLevyGetBossGuildDamageListRsp_descriptor_;
}

const TCrossLevyGetBossGuildDamageListRsp& TCrossLevyGetBossGuildDamageListRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fCrossLevyPart_2eproto();
  return *default_instance_;
}

TCrossLevyGetBossGuildDamageListRsp* TCrossLevyGetBossGuildDamageListRsp::default_instance_ = NULL;

TCrossLevyGetBossGuildDamageListRsp* TCrossLevyGetBossGuildDamageListRsp::New() const {
  return new TCrossLevyGetBossGuildDamageListRsp;
}

void TCrossLevyGetBossGuildDamageListRsp::Clear() {
  if (has_selfguildinfo()) {
    if (selfguildinfo_ != NULL) selfguildinfo_->::pb::TCrossLevyBossGuildDamageList::Clear();
  }
  guildlistarr_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TCrossLevyGetBossGuildDamageListRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TCrossLevyGetBossGuildDamageListRsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .pb.TCrossLevyBossGuildDamageList SelfGuildInfo = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_selfguildinfo()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_GuildListArr;
        break;
      }

      // repeated .pb.TCrossLevyBossGuildDamageList GuildListArr = 2;
      case 2: {
        if (tag == 18) {
         parse_GuildListArr:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_guildlistarr()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_GuildListArr;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TCrossLevyGetBossGuildDamageListRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TCrossLevyGetBossGuildDamageListRsp)
  return false;
#undef DO_
}

void TCrossLevyGetBossGuildDamageListRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TCrossLevyGetBossGuildDamageListRsp)
  // optional .pb.TCrossLevyBossGuildDamageList SelfGuildInfo = 1;
  if (has_selfguildinfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->selfguildinfo(), output);
  }

  // repeated .pb.TCrossLevyBossGuildDamageList GuildListArr = 2;
  for (int i = 0; i < this->guildlistarr_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->guildlistarr(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TCrossLevyGetBossGuildDamageListRsp)
}

::google::protobuf::uint8* TCrossLevyGetBossGuildDamageListRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TCrossLevyGetBossGuildDamageListRsp)
  // optional .pb.TCrossLevyBossGuildDamageList SelfGuildInfo = 1;
  if (has_selfguildinfo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->selfguildinfo(), target);
  }

  // repeated .pb.TCrossLevyBossGuildDamageList GuildListArr = 2;
  for (int i = 0; i < this->guildlistarr_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->guildlistarr(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TCrossLevyGetBossGuildDamageListRsp)
  return target;
}

int TCrossLevyGetBossGuildDamageListRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .pb.TCrossLevyBossGuildDamageList SelfGuildInfo = 1;
    if (has_selfguildinfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->selfguildinfo());
    }

  }
  // repeated .pb.TCrossLevyBossGuildDamageList GuildListArr = 2;
  total_size += 1 * this->guildlistarr_size();
  for (int i = 0; i < this->guildlistarr_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->guildlistarr(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TCrossLevyGetBossGuildDamageListRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TCrossLevyGetBossGuildDamageListRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TCrossLevyGetBossGuildDamageListRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TCrossLevyGetBossGuildDamageListRsp::MergeFrom(const TCrossLevyGetBossGuildDamageListRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  guildlistarr_.MergeFrom(from.guildlistarr_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_selfguildinfo()) {
      mutable_selfguildinfo()->::pb::TCrossLevyBossGuildDamageList::MergeFrom(from.selfguildinfo());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TCrossLevyGetBossGuildDamageListRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TCrossLevyGetBossGuildDamageListRsp::CopyFrom(const TCrossLevyGetBossGuildDamageListRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TCrossLevyGetBossGuildDamageListRsp::IsInitialized() const {

  return true;
}

void TCrossLevyGetBossGuildDamageListRsp::Swap(TCrossLevyGetBossGuildDamageListRsp* other) {
  if (other != this) {
    std::swap(selfguildinfo_, other->selfguildinfo_);
    guildlistarr_.Swap(&other->guildlistarr_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TCrossLevyGetBossGuildDamageListRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TCrossLevyGetBossGuildDamageListRsp_descriptor_;
  metadata.reflection = TCrossLevyGetBossGuildDamageListRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TcrossLevyScoreRankList::kRankFieldNumber;
const int TcrossLevyScoreRankList::kScoreFieldNumber;
const int TcrossLevyScoreRankList::kUserInfoFieldNumber;
#endif  // !_MSC_VER

TcrossLevyScoreRankList::TcrossLevyScoreRankList()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TcrossLevyScoreRankList)
}

void TcrossLevyScoreRankList::InitAsDefaultInstance() {
  userinfo_ = const_cast< ::pb::TUserSimpleInfo*>(&::pb::TUserSimpleInfo::default_instance());
}

TcrossLevyScoreRankList::TcrossLevyScoreRankList(const TcrossLevyScoreRankList& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TcrossLevyScoreRankList)
}

void TcrossLevyScoreRankList::SharedCtor() {
  _cached_size_ = 0;
  rank_ = 0u;
  score_ = 0u;
  userinfo_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TcrossLevyScoreRankList::~TcrossLevyScoreRankList() {
  // @@protoc_insertion_point(destructor:pb.TcrossLevyScoreRankList)
  SharedDtor();
}

void TcrossLevyScoreRankList::SharedDtor() {
  if (this != default_instance_) {
    delete userinfo_;
  }
}

void TcrossLevyScoreRankList::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TcrossLevyScoreRankList::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TcrossLevyScoreRankList_descriptor_;
}

const TcrossLevyScoreRankList& TcrossLevyScoreRankList::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fCrossLevyPart_2eproto();
  return *default_instance_;
}

TcrossLevyScoreRankList* TcrossLevyScoreRankList::default_instance_ = NULL;

TcrossLevyScoreRankList* TcrossLevyScoreRankList::New() const {
  return new TcrossLevyScoreRankList;
}

void TcrossLevyScoreRankList::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<TcrossLevyScoreRankList*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 7) {
    ZR_(rank_, score_);
    if (has_userinfo()) {
      if (userinfo_ != NULL) userinfo_->::pb::TUserSimpleInfo::Clear();
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TcrossLevyScoreRankList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TcrossLevyScoreRankList)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 Rank = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &rank_)));
          set_has_rank();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_Score;
        break;
      }

      // optional uint32 Score = 2;
      case 2: {
        if (tag == 16) {
         parse_Score:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &score_)));
          set_has_score();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_UserInfo;
        break;
      }

      // optional .pb.TUserSimpleInfo UserInfo = 3;
      case 3: {
        if (tag == 26) {
         parse_UserInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_userinfo()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TcrossLevyScoreRankList)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TcrossLevyScoreRankList)
  return false;
#undef DO_
}

void TcrossLevyScoreRankList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TcrossLevyScoreRankList)
  // optional uint32 Rank = 1;
  if (has_rank()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->rank(), output);
  }

  // optional uint32 Score = 2;
  if (has_score()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->score(), output);
  }

  // optional .pb.TUserSimpleInfo UserInfo = 3;
  if (has_userinfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->userinfo(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TcrossLevyScoreRankList)
}

::google::protobuf::uint8* TcrossLevyScoreRankList::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TcrossLevyScoreRankList)
  // optional uint32 Rank = 1;
  if (has_rank()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->rank(), target);
  }

  // optional uint32 Score = 2;
  if (has_score()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->score(), target);
  }

  // optional .pb.TUserSimpleInfo UserInfo = 3;
  if (has_userinfo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->userinfo(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TcrossLevyScoreRankList)
  return target;
}

int TcrossLevyScoreRankList::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 Rank = 1;
    if (has_rank()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->rank());
    }

    // optional uint32 Score = 2;
    if (has_score()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->score());
    }

    // optional .pb.TUserSimpleInfo UserInfo = 3;
    if (has_userinfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->userinfo());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TcrossLevyScoreRankList::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TcrossLevyScoreRankList* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TcrossLevyScoreRankList*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TcrossLevyScoreRankList::MergeFrom(const TcrossLevyScoreRankList& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_rank()) {
      set_rank(from.rank());
    }
    if (from.has_score()) {
      set_score(from.score());
    }
    if (from.has_userinfo()) {
      mutable_userinfo()->::pb::TUserSimpleInfo::MergeFrom(from.userinfo());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TcrossLevyScoreRankList::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TcrossLevyScoreRankList::CopyFrom(const TcrossLevyScoreRankList& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TcrossLevyScoreRankList::IsInitialized() const {

  return true;
}

void TcrossLevyScoreRankList::Swap(TcrossLevyScoreRankList* other) {
  if (other != this) {
    std::swap(rank_, other->rank_);
    std::swap(score_, other->score_);
    std::swap(userinfo_, other->userinfo_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TcrossLevyScoreRankList::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TcrossLevyScoreRankList_descriptor_;
  metadata.reflection = TcrossLevyScoreRankList_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TCrossLevyGetScoreRankListRsp::kSelfInfoFieldNumber;
const int TCrossLevyGetScoreRankListRsp::kRankListArrFieldNumber;
#endif  // !_MSC_VER

TCrossLevyGetScoreRankListRsp::TCrossLevyGetScoreRankListRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TCrossLevyGetScoreRankListRsp)
}

void TCrossLevyGetScoreRankListRsp::InitAsDefaultInstance() {
  selfinfo_ = const_cast< ::pb::TcrossLevyScoreRankList*>(&::pb::TcrossLevyScoreRankList::default_instance());
}

TCrossLevyGetScoreRankListRsp::TCrossLevyGetScoreRankListRsp(const TCrossLevyGetScoreRankListRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TCrossLevyGetScoreRankListRsp)
}

void TCrossLevyGetScoreRankListRsp::SharedCtor() {
  _cached_size_ = 0;
  selfinfo_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TCrossLevyGetScoreRankListRsp::~TCrossLevyGetScoreRankListRsp() {
  // @@protoc_insertion_point(destructor:pb.TCrossLevyGetScoreRankListRsp)
  SharedDtor();
}

void TCrossLevyGetScoreRankListRsp::SharedDtor() {
  if (this != default_instance_) {
    delete selfinfo_;
  }
}

void TCrossLevyGetScoreRankListRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TCrossLevyGetScoreRankListRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TCrossLevyGetScoreRankListRsp_descriptor_;
}

const TCrossLevyGetScoreRankListRsp& TCrossLevyGetScoreRankListRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fCrossLevyPart_2eproto();
  return *default_instance_;
}

TCrossLevyGetScoreRankListRsp* TCrossLevyGetScoreRankListRsp::default_instance_ = NULL;

TCrossLevyGetScoreRankListRsp* TCrossLevyGetScoreRankListRsp::New() const {
  return new TCrossLevyGetScoreRankListRsp;
}

void TCrossLevyGetScoreRankListRsp::Clear() {
  if (has_selfinfo()) {
    if (selfinfo_ != NULL) selfinfo_->::pb::TcrossLevyScoreRankList::Clear();
  }
  ranklistarr_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TCrossLevyGetScoreRankListRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TCrossLevyGetScoreRankListRsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .pb.TcrossLevyScoreRankList SelfInfo = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_selfinfo()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_RankListArr;
        break;
      }

      // repeated .pb.TcrossLevyScoreRankList RankListArr = 2;
      case 2: {
        if (tag == 18) {
         parse_RankListArr:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_ranklistarr()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_RankListArr;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TCrossLevyGetScoreRankListRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TCrossLevyGetScoreRankListRsp)
  return false;
#undef DO_
}

void TCrossLevyGetScoreRankListRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TCrossLevyGetScoreRankListRsp)
  // optional .pb.TcrossLevyScoreRankList SelfInfo = 1;
  if (has_selfinfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->selfinfo(), output);
  }

  // repeated .pb.TcrossLevyScoreRankList RankListArr = 2;
  for (int i = 0; i < this->ranklistarr_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->ranklistarr(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TCrossLevyGetScoreRankListRsp)
}

::google::protobuf::uint8* TCrossLevyGetScoreRankListRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TCrossLevyGetScoreRankListRsp)
  // optional .pb.TcrossLevyScoreRankList SelfInfo = 1;
  if (has_selfinfo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->selfinfo(), target);
  }

  // repeated .pb.TcrossLevyScoreRankList RankListArr = 2;
  for (int i = 0; i < this->ranklistarr_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->ranklistarr(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TCrossLevyGetScoreRankListRsp)
  return target;
}

int TCrossLevyGetScoreRankListRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .pb.TcrossLevyScoreRankList SelfInfo = 1;
    if (has_selfinfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->selfinfo());
    }

  }
  // repeated .pb.TcrossLevyScoreRankList RankListArr = 2;
  total_size += 1 * this->ranklistarr_size();
  for (int i = 0; i < this->ranklistarr_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->ranklistarr(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TCrossLevyGetScoreRankListRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TCrossLevyGetScoreRankListRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TCrossLevyGetScoreRankListRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TCrossLevyGetScoreRankListRsp::MergeFrom(const TCrossLevyGetScoreRankListRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  ranklistarr_.MergeFrom(from.ranklistarr_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_selfinfo()) {
      mutable_selfinfo()->::pb::TcrossLevyScoreRankList::MergeFrom(from.selfinfo());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TCrossLevyGetScoreRankListRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TCrossLevyGetScoreRankListRsp::CopyFrom(const TCrossLevyGetScoreRankListRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TCrossLevyGetScoreRankListRsp::IsInitialized() const {

  return true;
}

void TCrossLevyGetScoreRankListRsp::Swap(TCrossLevyGetScoreRankListRsp* other) {
  if (other != this) {
    std::swap(selfinfo_, other->selfinfo_);
    ranklistarr_.Swap(&other->ranklistarr_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TCrossLevyGetScoreRankListRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TCrossLevyGetScoreRankListRsp_descriptor_;
  metadata.reflection = TCrossLevyGetScoreRankListRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TcrossLevyAtkNumRankList::kRankFieldNumber;
const int TcrossLevyAtkNumRankList::kAtkNumFieldNumber;
const int TcrossLevyAtkNumRankList::kUserInfoFieldNumber;
#endif  // !_MSC_VER

TcrossLevyAtkNumRankList::TcrossLevyAtkNumRankList()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TcrossLevyAtkNumRankList)
}

void TcrossLevyAtkNumRankList::InitAsDefaultInstance() {
  userinfo_ = const_cast< ::pb::TUserSimpleInfo*>(&::pb::TUserSimpleInfo::default_instance());
}

TcrossLevyAtkNumRankList::TcrossLevyAtkNumRankList(const TcrossLevyAtkNumRankList& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TcrossLevyAtkNumRankList)
}

void TcrossLevyAtkNumRankList::SharedCtor() {
  _cached_size_ = 0;
  rank_ = 0u;
  atknum_ = 0u;
  userinfo_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TcrossLevyAtkNumRankList::~TcrossLevyAtkNumRankList() {
  // @@protoc_insertion_point(destructor:pb.TcrossLevyAtkNumRankList)
  SharedDtor();
}

void TcrossLevyAtkNumRankList::SharedDtor() {
  if (this != default_instance_) {
    delete userinfo_;
  }
}

void TcrossLevyAtkNumRankList::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TcrossLevyAtkNumRankList::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TcrossLevyAtkNumRankList_descriptor_;
}

const TcrossLevyAtkNumRankList& TcrossLevyAtkNumRankList::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fCrossLevyPart_2eproto();
  return *default_instance_;
}

TcrossLevyAtkNumRankList* TcrossLevyAtkNumRankList::default_instance_ = NULL;

TcrossLevyAtkNumRankList* TcrossLevyAtkNumRankList::New() const {
  return new TcrossLevyAtkNumRankList;
}

void TcrossLevyAtkNumRankList::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<TcrossLevyAtkNumRankList*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 7) {
    ZR_(rank_, atknum_);
    if (has_userinfo()) {
      if (userinfo_ != NULL) userinfo_->::pb::TUserSimpleInfo::Clear();
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TcrossLevyAtkNumRankList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TcrossLevyAtkNumRankList)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 Rank = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &rank_)));
          set_has_rank();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_AtkNum;
        break;
      }

      // optional uint32 AtkNum = 2;
      case 2: {
        if (tag == 16) {
         parse_AtkNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &atknum_)));
          set_has_atknum();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_UserInfo;
        break;
      }

      // optional .pb.TUserSimpleInfo UserInfo = 3;
      case 3: {
        if (tag == 26) {
         parse_UserInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_userinfo()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TcrossLevyAtkNumRankList)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TcrossLevyAtkNumRankList)
  return false;
#undef DO_
}

void TcrossLevyAtkNumRankList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TcrossLevyAtkNumRankList)
  // optional uint32 Rank = 1;
  if (has_rank()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->rank(), output);
  }

  // optional uint32 AtkNum = 2;
  if (has_atknum()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->atknum(), output);
  }

  // optional .pb.TUserSimpleInfo UserInfo = 3;
  if (has_userinfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->userinfo(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TcrossLevyAtkNumRankList)
}

::google::protobuf::uint8* TcrossLevyAtkNumRankList::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TcrossLevyAtkNumRankList)
  // optional uint32 Rank = 1;
  if (has_rank()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->rank(), target);
  }

  // optional uint32 AtkNum = 2;
  if (has_atknum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->atknum(), target);
  }

  // optional .pb.TUserSimpleInfo UserInfo = 3;
  if (has_userinfo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->userinfo(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TcrossLevyAtkNumRankList)
  return target;
}

int TcrossLevyAtkNumRankList::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 Rank = 1;
    if (has_rank()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->rank());
    }

    // optional uint32 AtkNum = 2;
    if (has_atknum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->atknum());
    }

    // optional .pb.TUserSimpleInfo UserInfo = 3;
    if (has_userinfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->userinfo());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TcrossLevyAtkNumRankList::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TcrossLevyAtkNumRankList* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TcrossLevyAtkNumRankList*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TcrossLevyAtkNumRankList::MergeFrom(const TcrossLevyAtkNumRankList& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_rank()) {
      set_rank(from.rank());
    }
    if (from.has_atknum()) {
      set_atknum(from.atknum());
    }
    if (from.has_userinfo()) {
      mutable_userinfo()->::pb::TUserSimpleInfo::MergeFrom(from.userinfo());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TcrossLevyAtkNumRankList::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TcrossLevyAtkNumRankList::CopyFrom(const TcrossLevyAtkNumRankList& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TcrossLevyAtkNumRankList::IsInitialized() const {

  return true;
}

void TcrossLevyAtkNumRankList::Swap(TcrossLevyAtkNumRankList* other) {
  if (other != this) {
    std::swap(rank_, other->rank_);
    std::swap(atknum_, other->atknum_);
    std::swap(userinfo_, other->userinfo_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TcrossLevyAtkNumRankList::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TcrossLevyAtkNumRankList_descriptor_;
  metadata.reflection = TcrossLevyAtkNumRankList_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TCrossLevyGetAtkNumRankListRsp::kSelfInfoFieldNumber;
const int TCrossLevyGetAtkNumRankListRsp::kRankListArrFieldNumber;
#endif  // !_MSC_VER

TCrossLevyGetAtkNumRankListRsp::TCrossLevyGetAtkNumRankListRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TCrossLevyGetAtkNumRankListRsp)
}

void TCrossLevyGetAtkNumRankListRsp::InitAsDefaultInstance() {
  selfinfo_ = const_cast< ::pb::TcrossLevyAtkNumRankList*>(&::pb::TcrossLevyAtkNumRankList::default_instance());
}

TCrossLevyGetAtkNumRankListRsp::TCrossLevyGetAtkNumRankListRsp(const TCrossLevyGetAtkNumRankListRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TCrossLevyGetAtkNumRankListRsp)
}

void TCrossLevyGetAtkNumRankListRsp::SharedCtor() {
  _cached_size_ = 0;
  selfinfo_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TCrossLevyGetAtkNumRankListRsp::~TCrossLevyGetAtkNumRankListRsp() {
  // @@protoc_insertion_point(destructor:pb.TCrossLevyGetAtkNumRankListRsp)
  SharedDtor();
}

void TCrossLevyGetAtkNumRankListRsp::SharedDtor() {
  if (this != default_instance_) {
    delete selfinfo_;
  }
}

void TCrossLevyGetAtkNumRankListRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TCrossLevyGetAtkNumRankListRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TCrossLevyGetAtkNumRankListRsp_descriptor_;
}

const TCrossLevyGetAtkNumRankListRsp& TCrossLevyGetAtkNumRankListRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fCrossLevyPart_2eproto();
  return *default_instance_;
}

TCrossLevyGetAtkNumRankListRsp* TCrossLevyGetAtkNumRankListRsp::default_instance_ = NULL;

TCrossLevyGetAtkNumRankListRsp* TCrossLevyGetAtkNumRankListRsp::New() const {
  return new TCrossLevyGetAtkNumRankListRsp;
}

void TCrossLevyGetAtkNumRankListRsp::Clear() {
  if (has_selfinfo()) {
    if (selfinfo_ != NULL) selfinfo_->::pb::TcrossLevyAtkNumRankList::Clear();
  }
  ranklistarr_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TCrossLevyGetAtkNumRankListRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TCrossLevyGetAtkNumRankListRsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .pb.TcrossLevyAtkNumRankList SelfInfo = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_selfinfo()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_RankListArr;
        break;
      }

      // repeated .pb.TcrossLevyAtkNumRankList RankListArr = 2;
      case 2: {
        if (tag == 18) {
         parse_RankListArr:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_ranklistarr()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_RankListArr;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TCrossLevyGetAtkNumRankListRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TCrossLevyGetAtkNumRankListRsp)
  return false;
#undef DO_
}

void TCrossLevyGetAtkNumRankListRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TCrossLevyGetAtkNumRankListRsp)
  // optional .pb.TcrossLevyAtkNumRankList SelfInfo = 1;
  if (has_selfinfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->selfinfo(), output);
  }

  // repeated .pb.TcrossLevyAtkNumRankList RankListArr = 2;
  for (int i = 0; i < this->ranklistarr_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->ranklistarr(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TCrossLevyGetAtkNumRankListRsp)
}

::google::protobuf::uint8* TCrossLevyGetAtkNumRankListRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TCrossLevyGetAtkNumRankListRsp)
  // optional .pb.TcrossLevyAtkNumRankList SelfInfo = 1;
  if (has_selfinfo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->selfinfo(), target);
  }

  // repeated .pb.TcrossLevyAtkNumRankList RankListArr = 2;
  for (int i = 0; i < this->ranklistarr_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->ranklistarr(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TCrossLevyGetAtkNumRankListRsp)
  return target;
}

int TCrossLevyGetAtkNumRankListRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .pb.TcrossLevyAtkNumRankList SelfInfo = 1;
    if (has_selfinfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->selfinfo());
    }

  }
  // repeated .pb.TcrossLevyAtkNumRankList RankListArr = 2;
  total_size += 1 * this->ranklistarr_size();
  for (int i = 0; i < this->ranklistarr_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->ranklistarr(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TCrossLevyGetAtkNumRankListRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TCrossLevyGetAtkNumRankListRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TCrossLevyGetAtkNumRankListRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TCrossLevyGetAtkNumRankListRsp::MergeFrom(const TCrossLevyGetAtkNumRankListRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  ranklistarr_.MergeFrom(from.ranklistarr_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_selfinfo()) {
      mutable_selfinfo()->::pb::TcrossLevyAtkNumRankList::MergeFrom(from.selfinfo());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TCrossLevyGetAtkNumRankListRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TCrossLevyGetAtkNumRankListRsp::CopyFrom(const TCrossLevyGetAtkNumRankListRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TCrossLevyGetAtkNumRankListRsp::IsInitialized() const {

  return true;
}

void TCrossLevyGetAtkNumRankListRsp::Swap(TCrossLevyGetAtkNumRankListRsp* other) {
  if (other != this) {
    std::swap(selfinfo_, other->selfinfo_);
    ranklistarr_.Swap(&other->ranklistarr_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TCrossLevyGetAtkNumRankListRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TCrossLevyGetAtkNumRankListRsp_descriptor_;
  metadata.reflection = TCrossLevyGetAtkNumRankListRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TCrossLevyPlunderPreviewReq::kCityIdFieldNumber;
const int TCrossLevyPlunderPreviewReq::kCampIdFieldNumber;
const int TCrossLevyPlunderPreviewReq::kEnemyUidFieldNumber;
#endif  // !_MSC_VER

TCrossLevyPlunderPreviewReq::TCrossLevyPlunderPreviewReq()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TCrossLevyPlunderPreviewReq)
}

void TCrossLevyPlunderPreviewReq::InitAsDefaultInstance() {
}

TCrossLevyPlunderPreviewReq::TCrossLevyPlunderPreviewReq(const TCrossLevyPlunderPreviewReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TCrossLevyPlunderPreviewReq)
}

void TCrossLevyPlunderPreviewReq::SharedCtor() {
  _cached_size_ = 0;
  cityid_ = 0u;
  campid_ = 0u;
  enemyuid_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TCrossLevyPlunderPreviewReq::~TCrossLevyPlunderPreviewReq() {
  // @@protoc_insertion_point(destructor:pb.TCrossLevyPlunderPreviewReq)
  SharedDtor();
}

void TCrossLevyPlunderPreviewReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TCrossLevyPlunderPreviewReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TCrossLevyPlunderPreviewReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TCrossLevyPlunderPreviewReq_descriptor_;
}

const TCrossLevyPlunderPreviewReq& TCrossLevyPlunderPreviewReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fCrossLevyPart_2eproto();
  return *default_instance_;
}

TCrossLevyPlunderPreviewReq* TCrossLevyPlunderPreviewReq::default_instance_ = NULL;

TCrossLevyPlunderPreviewReq* TCrossLevyPlunderPreviewReq::New() const {
  return new TCrossLevyPlunderPreviewReq;
}

void TCrossLevyPlunderPreviewReq::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<TCrossLevyPlunderPreviewReq*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(cityid_, enemyuid_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TCrossLevyPlunderPreviewReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TCrossLevyPlunderPreviewReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 CityId = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &cityid_)));
          set_has_cityid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_CampId;
        break;
      }

      // optional uint32 CampId = 2;
      case 2: {
        if (tag == 16) {
         parse_CampId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &campid_)));
          set_has_campid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_EnemyUid;
        break;
      }

      // optional uint64 EnemyUid = 3;
      case 3: {
        if (tag == 24) {
         parse_EnemyUid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &enemyuid_)));
          set_has_enemyuid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TCrossLevyPlunderPreviewReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TCrossLevyPlunderPreviewReq)
  return false;
#undef DO_
}

void TCrossLevyPlunderPreviewReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TCrossLevyPlunderPreviewReq)
  // optional uint32 CityId = 1;
  if (has_cityid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->cityid(), output);
  }

  // optional uint32 CampId = 2;
  if (has_campid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->campid(), output);
  }

  // optional uint64 EnemyUid = 3;
  if (has_enemyuid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->enemyuid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TCrossLevyPlunderPreviewReq)
}

::google::protobuf::uint8* TCrossLevyPlunderPreviewReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TCrossLevyPlunderPreviewReq)
  // optional uint32 CityId = 1;
  if (has_cityid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->cityid(), target);
  }

  // optional uint32 CampId = 2;
  if (has_campid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->campid(), target);
  }

  // optional uint64 EnemyUid = 3;
  if (has_enemyuid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->enemyuid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TCrossLevyPlunderPreviewReq)
  return target;
}

int TCrossLevyPlunderPreviewReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 CityId = 1;
    if (has_cityid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->cityid());
    }

    // optional uint32 CampId = 2;
    if (has_campid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->campid());
    }

    // optional uint64 EnemyUid = 3;
    if (has_enemyuid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->enemyuid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TCrossLevyPlunderPreviewReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TCrossLevyPlunderPreviewReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TCrossLevyPlunderPreviewReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TCrossLevyPlunderPreviewReq::MergeFrom(const TCrossLevyPlunderPreviewReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cityid()) {
      set_cityid(from.cityid());
    }
    if (from.has_campid()) {
      set_campid(from.campid());
    }
    if (from.has_enemyuid()) {
      set_enemyuid(from.enemyuid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TCrossLevyPlunderPreviewReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TCrossLevyPlunderPreviewReq::CopyFrom(const TCrossLevyPlunderPreviewReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TCrossLevyPlunderPreviewReq::IsInitialized() const {

  return true;
}

void TCrossLevyPlunderPreviewReq::Swap(TCrossLevyPlunderPreviewReq* other) {
  if (other != this) {
    std::swap(cityid_, other->cityid_);
    std::swap(campid_, other->campid_);
    std::swap(enemyuid_, other->enemyuid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TCrossLevyPlunderPreviewReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TCrossLevyPlunderPreviewReq_descriptor_;
  metadata.reflection = TCrossLevyPlunderPreviewReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TCrossLevyPlunderPreviewRsp::kRewardArrFieldNumber;
const int TCrossLevyPlunderPreviewRsp::kRewardScoreFieldNumber;
const int TCrossLevyPlunderPreviewRsp::kRatioFieldNumber;
#endif  // !_MSC_VER

TCrossLevyPlunderPreviewRsp::TCrossLevyPlunderPreviewRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TCrossLevyPlunderPreviewRsp)
}

void TCrossLevyPlunderPreviewRsp::InitAsDefaultInstance() {
}

TCrossLevyPlunderPreviewRsp::TCrossLevyPlunderPreviewRsp(const TCrossLevyPlunderPreviewRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TCrossLevyPlunderPreviewRsp)
}

void TCrossLevyPlunderPreviewRsp::SharedCtor() {
  _cached_size_ = 0;
  rewardscore_ = 0u;
  ratio_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TCrossLevyPlunderPreviewRsp::~TCrossLevyPlunderPreviewRsp() {
  // @@protoc_insertion_point(destructor:pb.TCrossLevyPlunderPreviewRsp)
  SharedDtor();
}

void TCrossLevyPlunderPreviewRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TCrossLevyPlunderPreviewRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TCrossLevyPlunderPreviewRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TCrossLevyPlunderPreviewRsp_descriptor_;
}

const TCrossLevyPlunderPreviewRsp& TCrossLevyPlunderPreviewRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fCrossLevyPart_2eproto();
  return *default_instance_;
}

TCrossLevyPlunderPreviewRsp* TCrossLevyPlunderPreviewRsp::default_instance_ = NULL;

TCrossLevyPlunderPreviewRsp* TCrossLevyPlunderPreviewRsp::New() const {
  return new TCrossLevyPlunderPreviewRsp;
}

void TCrossLevyPlunderPreviewRsp::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<TCrossLevyPlunderPreviewRsp*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(rewardscore_, ratio_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  rewardarr_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TCrossLevyPlunderPreviewRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TCrossLevyPlunderPreviewRsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .pb.TCommonReward RewardArr = 1;
      case 1: {
        if (tag == 10) {
         parse_RewardArr:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_rewardarr()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_RewardArr;
        if (input->ExpectTag(16)) goto parse_RewardScore;
        break;
      }

      // optional uint32 RewardScore = 2;
      case 2: {
        if (tag == 16) {
         parse_RewardScore:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &rewardscore_)));
          set_has_rewardscore();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_Ratio;
        break;
      }

      // optional uint32 Ratio = 3;
      case 3: {
        if (tag == 24) {
         parse_Ratio:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ratio_)));
          set_has_ratio();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TCrossLevyPlunderPreviewRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TCrossLevyPlunderPreviewRsp)
  return false;
#undef DO_
}

void TCrossLevyPlunderPreviewRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TCrossLevyPlunderPreviewRsp)
  // repeated .pb.TCommonReward RewardArr = 1;
  for (int i = 0; i < this->rewardarr_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->rewardarr(i), output);
  }

  // optional uint32 RewardScore = 2;
  if (has_rewardscore()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->rewardscore(), output);
  }

  // optional uint32 Ratio = 3;
  if (has_ratio()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->ratio(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TCrossLevyPlunderPreviewRsp)
}

::google::protobuf::uint8* TCrossLevyPlunderPreviewRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TCrossLevyPlunderPreviewRsp)
  // repeated .pb.TCommonReward RewardArr = 1;
  for (int i = 0; i < this->rewardarr_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->rewardarr(i), target);
  }

  // optional uint32 RewardScore = 2;
  if (has_rewardscore()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->rewardscore(), target);
  }

  // optional uint32 Ratio = 3;
  if (has_ratio()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->ratio(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TCrossLevyPlunderPreviewRsp)
  return target;
}

int TCrossLevyPlunderPreviewRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // optional uint32 RewardScore = 2;
    if (has_rewardscore()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->rewardscore());
    }

    // optional uint32 Ratio = 3;
    if (has_ratio()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->ratio());
    }

  }
  // repeated .pb.TCommonReward RewardArr = 1;
  total_size += 1 * this->rewardarr_size();
  for (int i = 0; i < this->rewardarr_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->rewardarr(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TCrossLevyPlunderPreviewRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TCrossLevyPlunderPreviewRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TCrossLevyPlunderPreviewRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TCrossLevyPlunderPreviewRsp::MergeFrom(const TCrossLevyPlunderPreviewRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  rewardarr_.MergeFrom(from.rewardarr_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_rewardscore()) {
      set_rewardscore(from.rewardscore());
    }
    if (from.has_ratio()) {
      set_ratio(from.ratio());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TCrossLevyPlunderPreviewRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TCrossLevyPlunderPreviewRsp::CopyFrom(const TCrossLevyPlunderPreviewRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TCrossLevyPlunderPreviewRsp::IsInitialized() const {

  return true;
}

void TCrossLevyPlunderPreviewRsp::Swap(TCrossLevyPlunderPreviewRsp* other) {
  if (other != this) {
    rewardarr_.Swap(&other->rewardarr_);
    std::swap(rewardscore_, other->rewardscore_);
    std::swap(ratio_, other->ratio_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TCrossLevyPlunderPreviewRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TCrossLevyPlunderPreviewRsp_descriptor_;
  metadata.reflection = TCrossLevyPlunderPreviewRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TCrossLevyExpelPreviewReq::kCityIdFieldNumber;
const int TCrossLevyExpelPreviewReq::kCampIdFieldNumber;
const int TCrossLevyExpelPreviewReq::kEnemyUidFieldNumber;
#endif  // !_MSC_VER

TCrossLevyExpelPreviewReq::TCrossLevyExpelPreviewReq()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TCrossLevyExpelPreviewReq)
}

void TCrossLevyExpelPreviewReq::InitAsDefaultInstance() {
}

TCrossLevyExpelPreviewReq::TCrossLevyExpelPreviewReq(const TCrossLevyExpelPreviewReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TCrossLevyExpelPreviewReq)
}

void TCrossLevyExpelPreviewReq::SharedCtor() {
  _cached_size_ = 0;
  cityid_ = 0u;
  campid_ = 0u;
  enemyuid_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TCrossLevyExpelPreviewReq::~TCrossLevyExpelPreviewReq() {
  // @@protoc_insertion_point(destructor:pb.TCrossLevyExpelPreviewReq)
  SharedDtor();
}

void TCrossLevyExpelPreviewReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TCrossLevyExpelPreviewReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TCrossLevyExpelPreviewReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TCrossLevyExpelPreviewReq_descriptor_;
}

const TCrossLevyExpelPreviewReq& TCrossLevyExpelPreviewReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fCrossLevyPart_2eproto();
  return *default_instance_;
}

TCrossLevyExpelPreviewReq* TCrossLevyExpelPreviewReq::default_instance_ = NULL;

TCrossLevyExpelPreviewReq* TCrossLevyExpelPreviewReq::New() const {
  return new TCrossLevyExpelPreviewReq;
}

void TCrossLevyExpelPreviewReq::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<TCrossLevyExpelPreviewReq*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(cityid_, enemyuid_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TCrossLevyExpelPreviewReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TCrossLevyExpelPreviewReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 CityId = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &cityid_)));
          set_has_cityid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_CampId;
        break;
      }

      // optional uint32 CampId = 2;
      case 2: {
        if (tag == 16) {
         parse_CampId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &campid_)));
          set_has_campid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_EnemyUid;
        break;
      }

      // optional uint64 EnemyUid = 3;
      case 3: {
        if (tag == 24) {
         parse_EnemyUid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &enemyuid_)));
          set_has_enemyuid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TCrossLevyExpelPreviewReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TCrossLevyExpelPreviewReq)
  return false;
#undef DO_
}

void TCrossLevyExpelPreviewReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TCrossLevyExpelPreviewReq)
  // optional uint32 CityId = 1;
  if (has_cityid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->cityid(), output);
  }

  // optional uint32 CampId = 2;
  if (has_campid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->campid(), output);
  }

  // optional uint64 EnemyUid = 3;
  if (has_enemyuid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->enemyuid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TCrossLevyExpelPreviewReq)
}

::google::protobuf::uint8* TCrossLevyExpelPreviewReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TCrossLevyExpelPreviewReq)
  // optional uint32 CityId = 1;
  if (has_cityid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->cityid(), target);
  }

  // optional uint32 CampId = 2;
  if (has_campid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->campid(), target);
  }

  // optional uint64 EnemyUid = 3;
  if (has_enemyuid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->enemyuid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TCrossLevyExpelPreviewReq)
  return target;
}

int TCrossLevyExpelPreviewReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 CityId = 1;
    if (has_cityid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->cityid());
    }

    // optional uint32 CampId = 2;
    if (has_campid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->campid());
    }

    // optional uint64 EnemyUid = 3;
    if (has_enemyuid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->enemyuid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TCrossLevyExpelPreviewReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TCrossLevyExpelPreviewReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TCrossLevyExpelPreviewReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TCrossLevyExpelPreviewReq::MergeFrom(const TCrossLevyExpelPreviewReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cityid()) {
      set_cityid(from.cityid());
    }
    if (from.has_campid()) {
      set_campid(from.campid());
    }
    if (from.has_enemyuid()) {
      set_enemyuid(from.enemyuid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TCrossLevyExpelPreviewReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TCrossLevyExpelPreviewReq::CopyFrom(const TCrossLevyExpelPreviewReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TCrossLevyExpelPreviewReq::IsInitialized() const {

  return true;
}

void TCrossLevyExpelPreviewReq::Swap(TCrossLevyExpelPreviewReq* other) {
  if (other != this) {
    std::swap(cityid_, other->cityid_);
    std::swap(campid_, other->campid_);
    std::swap(enemyuid_, other->enemyuid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TCrossLevyExpelPreviewReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TCrossLevyExpelPreviewReq_descriptor_;
  metadata.reflection = TCrossLevyExpelPreviewReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TCrossLevyExpelPreviewRsp::kRewardArrFieldNumber;
const int TCrossLevyExpelPreviewRsp::kRewardScoreFieldNumber;
const int TCrossLevyExpelPreviewRsp::kRatioFieldNumber;
#endif  // !_MSC_VER

TCrossLevyExpelPreviewRsp::TCrossLevyExpelPreviewRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TCrossLevyExpelPreviewRsp)
}

void TCrossLevyExpelPreviewRsp::InitAsDefaultInstance() {
}

TCrossLevyExpelPreviewRsp::TCrossLevyExpelPreviewRsp(const TCrossLevyExpelPreviewRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TCrossLevyExpelPreviewRsp)
}

void TCrossLevyExpelPreviewRsp::SharedCtor() {
  _cached_size_ = 0;
  rewardscore_ = 0u;
  ratio_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TCrossLevyExpelPreviewRsp::~TCrossLevyExpelPreviewRsp() {
  // @@protoc_insertion_point(destructor:pb.TCrossLevyExpelPreviewRsp)
  SharedDtor();
}

void TCrossLevyExpelPreviewRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TCrossLevyExpelPreviewRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TCrossLevyExpelPreviewRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TCrossLevyExpelPreviewRsp_descriptor_;
}

const TCrossLevyExpelPreviewRsp& TCrossLevyExpelPreviewRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fCrossLevyPart_2eproto();
  return *default_instance_;
}

TCrossLevyExpelPreviewRsp* TCrossLevyExpelPreviewRsp::default_instance_ = NULL;

TCrossLevyExpelPreviewRsp* TCrossLevyExpelPreviewRsp::New() const {
  return new TCrossLevyExpelPreviewRsp;
}

void TCrossLevyExpelPreviewRsp::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<TCrossLevyExpelPreviewRsp*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(rewardscore_, ratio_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  rewardarr_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TCrossLevyExpelPreviewRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TCrossLevyExpelPreviewRsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .pb.TCommonReward RewardArr = 1;
      case 1: {
        if (tag == 10) {
         parse_RewardArr:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_rewardarr()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_RewardArr;
        if (input->ExpectTag(16)) goto parse_RewardScore;
        break;
      }

      // optional uint32 RewardScore = 2;
      case 2: {
        if (tag == 16) {
         parse_RewardScore:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &rewardscore_)));
          set_has_rewardscore();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_Ratio;
        break;
      }

      // optional uint32 Ratio = 3;
      case 3: {
        if (tag == 24) {
         parse_Ratio:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ratio_)));
          set_has_ratio();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TCrossLevyExpelPreviewRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TCrossLevyExpelPreviewRsp)
  return false;
#undef DO_
}

void TCrossLevyExpelPreviewRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TCrossLevyExpelPreviewRsp)
  // repeated .pb.TCommonReward RewardArr = 1;
  for (int i = 0; i < this->rewardarr_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->rewardarr(i), output);
  }

  // optional uint32 RewardScore = 2;
  if (has_rewardscore()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->rewardscore(), output);
  }

  // optional uint32 Ratio = 3;
  if (has_ratio()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->ratio(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TCrossLevyExpelPreviewRsp)
}

::google::protobuf::uint8* TCrossLevyExpelPreviewRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TCrossLevyExpelPreviewRsp)
  // repeated .pb.TCommonReward RewardArr = 1;
  for (int i = 0; i < this->rewardarr_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->rewardarr(i), target);
  }

  // optional uint32 RewardScore = 2;
  if (has_rewardscore()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->rewardscore(), target);
  }

  // optional uint32 Ratio = 3;
  if (has_ratio()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->ratio(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TCrossLevyExpelPreviewRsp)
  return target;
}

int TCrossLevyExpelPreviewRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // optional uint32 RewardScore = 2;
    if (has_rewardscore()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->rewardscore());
    }

    // optional uint32 Ratio = 3;
    if (has_ratio()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->ratio());
    }

  }
  // repeated .pb.TCommonReward RewardArr = 1;
  total_size += 1 * this->rewardarr_size();
  for (int i = 0; i < this->rewardarr_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->rewardarr(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TCrossLevyExpelPreviewRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TCrossLevyExpelPreviewRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TCrossLevyExpelPreviewRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TCrossLevyExpelPreviewRsp::MergeFrom(const TCrossLevyExpelPreviewRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  rewardarr_.MergeFrom(from.rewardarr_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_rewardscore()) {
      set_rewardscore(from.rewardscore());
    }
    if (from.has_ratio()) {
      set_ratio(from.ratio());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TCrossLevyExpelPreviewRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TCrossLevyExpelPreviewRsp::CopyFrom(const TCrossLevyExpelPreviewRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TCrossLevyExpelPreviewRsp::IsInitialized() const {

  return true;
}

void TCrossLevyExpelPreviewRsp::Swap(TCrossLevyExpelPreviewRsp* other) {
  if (other != this) {
    rewardarr_.Swap(&other->rewardarr_);
    std::swap(rewardscore_, other->rewardscore_);
    std::swap(ratio_, other->ratio_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TCrossLevyExpelPreviewRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TCrossLevyExpelPreviewRsp_descriptor_;
  metadata.reflection = TCrossLevyExpelPreviewRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TCrossLevyAttackMonsterReq::kMonsterIdFieldNumber;
const int TCrossLevyAttackMonsterReq::kMonsterRfrTimeFieldNumber;
#endif  // !_MSC_VER

TCrossLevyAttackMonsterReq::TCrossLevyAttackMonsterReq()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TCrossLevyAttackMonsterReq)
}

void TCrossLevyAttackMonsterReq::InitAsDefaultInstance() {
}

TCrossLevyAttackMonsterReq::TCrossLevyAttackMonsterReq(const TCrossLevyAttackMonsterReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TCrossLevyAttackMonsterReq)
}

void TCrossLevyAttackMonsterReq::SharedCtor() {
  _cached_size_ = 0;
  monsterid_ = 0u;
  monsterrfrtime_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TCrossLevyAttackMonsterReq::~TCrossLevyAttackMonsterReq() {
  // @@protoc_insertion_point(destructor:pb.TCrossLevyAttackMonsterReq)
  SharedDtor();
}

void TCrossLevyAttackMonsterReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TCrossLevyAttackMonsterReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TCrossLevyAttackMonsterReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TCrossLevyAttackMonsterReq_descriptor_;
}

const TCrossLevyAttackMonsterReq& TCrossLevyAttackMonsterReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fCrossLevyPart_2eproto();
  return *default_instance_;
}

TCrossLevyAttackMonsterReq* TCrossLevyAttackMonsterReq::default_instance_ = NULL;

TCrossLevyAttackMonsterReq* TCrossLevyAttackMonsterReq::New() const {
  return new TCrossLevyAttackMonsterReq;
}

void TCrossLevyAttackMonsterReq::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<TCrossLevyAttackMonsterReq*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(monsterrfrtime_, monsterid_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TCrossLevyAttackMonsterReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TCrossLevyAttackMonsterReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 MonsterId = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &monsterid_)));
          set_has_monsterid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_MonsterRfrTime;
        break;
      }

      // optional uint64 MonsterRfrTime = 2;
      case 2: {
        if (tag == 16) {
         parse_MonsterRfrTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &monsterrfrtime_)));
          set_has_monsterrfrtime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TCrossLevyAttackMonsterReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TCrossLevyAttackMonsterReq)
  return false;
#undef DO_
}

void TCrossLevyAttackMonsterReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TCrossLevyAttackMonsterReq)
  // optional uint32 MonsterId = 1;
  if (has_monsterid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->monsterid(), output);
  }

  // optional uint64 MonsterRfrTime = 2;
  if (has_monsterrfrtime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->monsterrfrtime(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TCrossLevyAttackMonsterReq)
}

::google::protobuf::uint8* TCrossLevyAttackMonsterReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TCrossLevyAttackMonsterReq)
  // optional uint32 MonsterId = 1;
  if (has_monsterid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->monsterid(), target);
  }

  // optional uint64 MonsterRfrTime = 2;
  if (has_monsterrfrtime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->monsterrfrtime(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TCrossLevyAttackMonsterReq)
  return target;
}

int TCrossLevyAttackMonsterReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 MonsterId = 1;
    if (has_monsterid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->monsterid());
    }

    // optional uint64 MonsterRfrTime = 2;
    if (has_monsterrfrtime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->monsterrfrtime());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TCrossLevyAttackMonsterReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TCrossLevyAttackMonsterReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TCrossLevyAttackMonsterReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TCrossLevyAttackMonsterReq::MergeFrom(const TCrossLevyAttackMonsterReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_monsterid()) {
      set_monsterid(from.monsterid());
    }
    if (from.has_monsterrfrtime()) {
      set_monsterrfrtime(from.monsterrfrtime());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TCrossLevyAttackMonsterReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TCrossLevyAttackMonsterReq::CopyFrom(const TCrossLevyAttackMonsterReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TCrossLevyAttackMonsterReq::IsInitialized() const {

  return true;
}

void TCrossLevyAttackMonsterReq::Swap(TCrossLevyAttackMonsterReq* other) {
  if (other != this) {
    std::swap(monsterid_, other->monsterid_);
    std::swap(monsterrfrtime_, other->monsterrfrtime_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TCrossLevyAttackMonsterReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TCrossLevyAttackMonsterReq_descriptor_;
  metadata.reflection = TCrossLevyAttackMonsterReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TCrossLevyAttackMonsterRsp::kRewardScoreFieldNumber;
const int TCrossLevyAttackMonsterRsp::kMonsterBattleResultArrFieldNumber;
const int TCrossLevyAttackMonsterRsp::kMonsterArmyHpInfoArrFieldNumber;
#endif  // !_MSC_VER

TCrossLevyAttackMonsterRsp::TCrossLevyAttackMonsterRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TCrossLevyAttackMonsterRsp)
}

void TCrossLevyAttackMonsterRsp::InitAsDefaultInstance() {
}

TCrossLevyAttackMonsterRsp::TCrossLevyAttackMonsterRsp(const TCrossLevyAttackMonsterRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TCrossLevyAttackMonsterRsp)
}

void TCrossLevyAttackMonsterRsp::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  rewardscore_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TCrossLevyAttackMonsterRsp::~TCrossLevyAttackMonsterRsp() {
  // @@protoc_insertion_point(destructor:pb.TCrossLevyAttackMonsterRsp)
  SharedDtor();
}

void TCrossLevyAttackMonsterRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TCrossLevyAttackMonsterRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TCrossLevyAttackMonsterRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TCrossLevyAttackMonsterRsp_descriptor_;
}

const TCrossLevyAttackMonsterRsp& TCrossLevyAttackMonsterRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fCrossLevyPart_2eproto();
  return *default_instance_;
}

TCrossLevyAttackMonsterRsp* TCrossLevyAttackMonsterRsp::default_instance_ = NULL;

TCrossLevyAttackMonsterRsp* TCrossLevyAttackMonsterRsp::New() const {
  return new TCrossLevyAttackMonsterRsp;
}

void TCrossLevyAttackMonsterRsp::Clear() {
  rewardscore_ = 0u;
  monsterbattleresultarr_.Clear();
  monsterarmyhpinfoarr_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TCrossLevyAttackMonsterRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TCrossLevyAttackMonsterRsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 RewardScore = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &rewardscore_)));
          set_has_rewardscore();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_MonsterBattleResultArr;
        break;
      }

      // repeated bytes MonsterBattleResultArr = 2;
      case 2: {
        if (tag == 18) {
         parse_MonsterBattleResultArr:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->add_monsterbattleresultarr()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_MonsterBattleResultArr;
        if (input->ExpectTag(26)) goto parse_MonsterArmyHpInfoArr;
        break;
      }

      // repeated .pb.TCrossLevyMonsterArmyHpInfo MonsterArmyHpInfoArr = 3;
      case 3: {
        if (tag == 26) {
         parse_MonsterArmyHpInfoArr:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_monsterarmyhpinfoarr()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_MonsterArmyHpInfoArr;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TCrossLevyAttackMonsterRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TCrossLevyAttackMonsterRsp)
  return false;
#undef DO_
}

void TCrossLevyAttackMonsterRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TCrossLevyAttackMonsterRsp)
  // optional uint32 RewardScore = 1;
  if (has_rewardscore()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->rewardscore(), output);
  }

  // repeated bytes MonsterBattleResultArr = 2;
  for (int i = 0; i < this->monsterbattleresultarr_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      2, this->monsterbattleresultarr(i), output);
  }

  // repeated .pb.TCrossLevyMonsterArmyHpInfo MonsterArmyHpInfoArr = 3;
  for (int i = 0; i < this->monsterarmyhpinfoarr_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->monsterarmyhpinfoarr(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TCrossLevyAttackMonsterRsp)
}

::google::protobuf::uint8* TCrossLevyAttackMonsterRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TCrossLevyAttackMonsterRsp)
  // optional uint32 RewardScore = 1;
  if (has_rewardscore()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->rewardscore(), target);
  }

  // repeated bytes MonsterBattleResultArr = 2;
  for (int i = 0; i < this->monsterbattleresultarr_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteBytesToArray(2, this->monsterbattleresultarr(i), target);
  }

  // repeated .pb.TCrossLevyMonsterArmyHpInfo MonsterArmyHpInfoArr = 3;
  for (int i = 0; i < this->monsterarmyhpinfoarr_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->monsterarmyhpinfoarr(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TCrossLevyAttackMonsterRsp)
  return target;
}

int TCrossLevyAttackMonsterRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 RewardScore = 1;
    if (has_rewardscore()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->rewardscore());
    }

  }
  // repeated bytes MonsterBattleResultArr = 2;
  total_size += 1 * this->monsterbattleresultarr_size();
  for (int i = 0; i < this->monsterbattleresultarr_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::BytesSize(
      this->monsterbattleresultarr(i));
  }

  // repeated .pb.TCrossLevyMonsterArmyHpInfo MonsterArmyHpInfoArr = 3;
  total_size += 1 * this->monsterarmyhpinfoarr_size();
  for (int i = 0; i < this->monsterarmyhpinfoarr_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->monsterarmyhpinfoarr(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TCrossLevyAttackMonsterRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TCrossLevyAttackMonsterRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TCrossLevyAttackMonsterRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TCrossLevyAttackMonsterRsp::MergeFrom(const TCrossLevyAttackMonsterRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  monsterbattleresultarr_.MergeFrom(from.monsterbattleresultarr_);
  monsterarmyhpinfoarr_.MergeFrom(from.monsterarmyhpinfoarr_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_rewardscore()) {
      set_rewardscore(from.rewardscore());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TCrossLevyAttackMonsterRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TCrossLevyAttackMonsterRsp::CopyFrom(const TCrossLevyAttackMonsterRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TCrossLevyAttackMonsterRsp::IsInitialized() const {

  return true;
}

void TCrossLevyAttackMonsterRsp::Swap(TCrossLevyAttackMonsterRsp* other) {
  if (other != this) {
    std::swap(rewardscore_, other->rewardscore_);
    monsterbattleresultarr_.Swap(&other->monsterbattleresultarr_);
    monsterarmyhpinfoarr_.Swap(&other->monsterarmyhpinfoarr_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TCrossLevyAttackMonsterRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TCrossLevyAttackMonsterRsp_descriptor_;
  metadata.reflection = TCrossLevyAttackMonsterRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TCrossLevyFastMoveReq::kCityIdFieldNumber;
#endif  // !_MSC_VER

TCrossLevyFastMoveReq::TCrossLevyFastMoveReq()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TCrossLevyFastMoveReq)
}

void TCrossLevyFastMoveReq::InitAsDefaultInstance() {
}

TCrossLevyFastMoveReq::TCrossLevyFastMoveReq(const TCrossLevyFastMoveReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TCrossLevyFastMoveReq)
}

void TCrossLevyFastMoveReq::SharedCtor() {
  _cached_size_ = 0;
  cityid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TCrossLevyFastMoveReq::~TCrossLevyFastMoveReq() {
  // @@protoc_insertion_point(destructor:pb.TCrossLevyFastMoveReq)
  SharedDtor();
}

void TCrossLevyFastMoveReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TCrossLevyFastMoveReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TCrossLevyFastMoveReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TCrossLevyFastMoveReq_descriptor_;
}

const TCrossLevyFastMoveReq& TCrossLevyFastMoveReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fCrossLevyPart_2eproto();
  return *default_instance_;
}

TCrossLevyFastMoveReq* TCrossLevyFastMoveReq::default_instance_ = NULL;

TCrossLevyFastMoveReq* TCrossLevyFastMoveReq::New() const {
  return new TCrossLevyFastMoveReq;
}

void TCrossLevyFastMoveReq::Clear() {
  cityid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TCrossLevyFastMoveReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TCrossLevyFastMoveReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 CityId = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &cityid_)));
          set_has_cityid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TCrossLevyFastMoveReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TCrossLevyFastMoveReq)
  return false;
#undef DO_
}

void TCrossLevyFastMoveReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TCrossLevyFastMoveReq)
  // optional uint32 CityId = 1;
  if (has_cityid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->cityid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TCrossLevyFastMoveReq)
}

::google::protobuf::uint8* TCrossLevyFastMoveReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TCrossLevyFastMoveReq)
  // optional uint32 CityId = 1;
  if (has_cityid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->cityid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TCrossLevyFastMoveReq)
  return target;
}

int TCrossLevyFastMoveReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 CityId = 1;
    if (has_cityid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->cityid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TCrossLevyFastMoveReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TCrossLevyFastMoveReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TCrossLevyFastMoveReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TCrossLevyFastMoveReq::MergeFrom(const TCrossLevyFastMoveReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cityid()) {
      set_cityid(from.cityid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TCrossLevyFastMoveReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TCrossLevyFastMoveReq::CopyFrom(const TCrossLevyFastMoveReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TCrossLevyFastMoveReq::IsInitialized() const {

  return true;
}

void TCrossLevyFastMoveReq::Swap(TCrossLevyFastMoveReq* other) {
  if (other != this) {
    std::swap(cityid_, other->cityid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TCrossLevyFastMoveReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TCrossLevyFastMoveReq_descriptor_;
  metadata.reflection = TCrossLevyFastMoveReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TCrossLevyFastMoveRsp::kCampIdFieldNumber;
#endif  // !_MSC_VER

TCrossLevyFastMoveRsp::TCrossLevyFastMoveRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TCrossLevyFastMoveRsp)
}

void TCrossLevyFastMoveRsp::InitAsDefaultInstance() {
}

TCrossLevyFastMoveRsp::TCrossLevyFastMoveRsp(const TCrossLevyFastMoveRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TCrossLevyFastMoveRsp)
}

void TCrossLevyFastMoveRsp::SharedCtor() {
  _cached_size_ = 0;
  campid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TCrossLevyFastMoveRsp::~TCrossLevyFastMoveRsp() {
  // @@protoc_insertion_point(destructor:pb.TCrossLevyFastMoveRsp)
  SharedDtor();
}

void TCrossLevyFastMoveRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TCrossLevyFastMoveRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TCrossLevyFastMoveRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TCrossLevyFastMoveRsp_descriptor_;
}

const TCrossLevyFastMoveRsp& TCrossLevyFastMoveRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fCrossLevyPart_2eproto();
  return *default_instance_;
}

TCrossLevyFastMoveRsp* TCrossLevyFastMoveRsp::default_instance_ = NULL;

TCrossLevyFastMoveRsp* TCrossLevyFastMoveRsp::New() const {
  return new TCrossLevyFastMoveRsp;
}

void TCrossLevyFastMoveRsp::Clear() {
  campid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TCrossLevyFastMoveRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TCrossLevyFastMoveRsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 CampId = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &campid_)));
          set_has_campid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TCrossLevyFastMoveRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TCrossLevyFastMoveRsp)
  return false;
#undef DO_
}

void TCrossLevyFastMoveRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TCrossLevyFastMoveRsp)
  // optional uint32 CampId = 1;
  if (has_campid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->campid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TCrossLevyFastMoveRsp)
}

::google::protobuf::uint8* TCrossLevyFastMoveRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TCrossLevyFastMoveRsp)
  // optional uint32 CampId = 1;
  if (has_campid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->campid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TCrossLevyFastMoveRsp)
  return target;
}

int TCrossLevyFastMoveRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 CampId = 1;
    if (has_campid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->campid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TCrossLevyFastMoveRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TCrossLevyFastMoveRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TCrossLevyFastMoveRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TCrossLevyFastMoveRsp::MergeFrom(const TCrossLevyFastMoveRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_campid()) {
      set_campid(from.campid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TCrossLevyFastMoveRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TCrossLevyFastMoveRsp::CopyFrom(const TCrossLevyFastMoveRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TCrossLevyFastMoveRsp::IsInitialized() const {

  return true;
}

void TCrossLevyFastMoveRsp::Swap(TCrossLevyFastMoveRsp* other) {
  if (other != this) {
    std::swap(campid_, other->campid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TCrossLevyFastMoveRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TCrossLevyFastMoveRsp_descriptor_;
  metadata.reflection = TCrossLevyFastMoveRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TCrossLevyReceiveAllSettleRewardRsp::kRewardArrFieldNumber;
const int TCrossLevyReceiveAllSettleRewardRsp::kSettleScoreFieldNumber;
#endif  // !_MSC_VER

TCrossLevyReceiveAllSettleRewardRsp::TCrossLevyReceiveAllSettleRewardRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TCrossLevyReceiveAllSettleRewardRsp)
}

void TCrossLevyReceiveAllSettleRewardRsp::InitAsDefaultInstance() {
}

TCrossLevyReceiveAllSettleRewardRsp::TCrossLevyReceiveAllSettleRewardRsp(const TCrossLevyReceiveAllSettleRewardRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TCrossLevyReceiveAllSettleRewardRsp)
}

void TCrossLevyReceiveAllSettleRewardRsp::SharedCtor() {
  _cached_size_ = 0;
  settlescore_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TCrossLevyReceiveAllSettleRewardRsp::~TCrossLevyReceiveAllSettleRewardRsp() {
  // @@protoc_insertion_point(destructor:pb.TCrossLevyReceiveAllSettleRewardRsp)
  SharedDtor();
}

void TCrossLevyReceiveAllSettleRewardRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TCrossLevyReceiveAllSettleRewardRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TCrossLevyReceiveAllSettleRewardRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TCrossLevyReceiveAllSettleRewardRsp_descriptor_;
}

const TCrossLevyReceiveAllSettleRewardRsp& TCrossLevyReceiveAllSettleRewardRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fCrossLevyPart_2eproto();
  return *default_instance_;
}

TCrossLevyReceiveAllSettleRewardRsp* TCrossLevyReceiveAllSettleRewardRsp::default_instance_ = NULL;

TCrossLevyReceiveAllSettleRewardRsp* TCrossLevyReceiveAllSettleRewardRsp::New() const {
  return new TCrossLevyReceiveAllSettleRewardRsp;
}

void TCrossLevyReceiveAllSettleRewardRsp::Clear() {
  settlescore_ = 0u;
  rewardarr_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TCrossLevyReceiveAllSettleRewardRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TCrossLevyReceiveAllSettleRewardRsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .pb.TCommonReward RewardArr = 1;
      case 1: {
        if (tag == 10) {
         parse_RewardArr:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_rewardarr()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_RewardArr;
        if (input->ExpectTag(16)) goto parse_SettleScore;
        break;
      }

      // optional uint32 SettleScore = 2;
      case 2: {
        if (tag == 16) {
         parse_SettleScore:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &settlescore_)));
          set_has_settlescore();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TCrossLevyReceiveAllSettleRewardRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TCrossLevyReceiveAllSettleRewardRsp)
  return false;
#undef DO_
}

void TCrossLevyReceiveAllSettleRewardRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TCrossLevyReceiveAllSettleRewardRsp)
  // repeated .pb.TCommonReward RewardArr = 1;
  for (int i = 0; i < this->rewardarr_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->rewardarr(i), output);
  }

  // optional uint32 SettleScore = 2;
  if (has_settlescore()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->settlescore(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TCrossLevyReceiveAllSettleRewardRsp)
}

::google::protobuf::uint8* TCrossLevyReceiveAllSettleRewardRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TCrossLevyReceiveAllSettleRewardRsp)
  // repeated .pb.TCommonReward RewardArr = 1;
  for (int i = 0; i < this->rewardarr_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->rewardarr(i), target);
  }

  // optional uint32 SettleScore = 2;
  if (has_settlescore()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->settlescore(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TCrossLevyReceiveAllSettleRewardRsp)
  return target;
}

int TCrossLevyReceiveAllSettleRewardRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // optional uint32 SettleScore = 2;
    if (has_settlescore()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->settlescore());
    }

  }
  // repeated .pb.TCommonReward RewardArr = 1;
  total_size += 1 * this->rewardarr_size();
  for (int i = 0; i < this->rewardarr_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->rewardarr(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TCrossLevyReceiveAllSettleRewardRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TCrossLevyReceiveAllSettleRewardRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TCrossLevyReceiveAllSettleRewardRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TCrossLevyReceiveAllSettleRewardRsp::MergeFrom(const TCrossLevyReceiveAllSettleRewardRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  rewardarr_.MergeFrom(from.rewardarr_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_settlescore()) {
      set_settlescore(from.settlescore());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TCrossLevyReceiveAllSettleRewardRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TCrossLevyReceiveAllSettleRewardRsp::CopyFrom(const TCrossLevyReceiveAllSettleRewardRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TCrossLevyReceiveAllSettleRewardRsp::IsInitialized() const {

  return true;
}

void TCrossLevyReceiveAllSettleRewardRsp::Swap(TCrossLevyReceiveAllSettleRewardRsp* other) {
  if (other != this) {
    rewardarr_.Swap(&other->rewardarr_);
    std::swap(settlescore_, other->settlescore_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TCrossLevyReceiveAllSettleRewardRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TCrossLevyReceiveAllSettleRewardRsp_descriptor_;
  metadata.reflection = TCrossLevyReceiveAllSettleRewardRsp_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace pb

// @@protoc_insertion_point(global_scope)
