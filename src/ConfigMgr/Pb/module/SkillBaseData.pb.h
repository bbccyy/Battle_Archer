// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: module/SkillBaseData.proto

#ifndef PROTOBUF_module_2fSkillBaseData_2eproto__INCLUDED
#define PROTOBUF_module_2fSkillBaseData_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace pb {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_module_2fSkillBaseData_2eproto();
void protobuf_AssignDesc_module_2fSkillBaseData_2eproto();
void protobuf_ShutdownFile_module_2fSkillBaseData_2eproto();

class SkillBaseData;
class SkillSpecialData;
class SkillTargetPriority;
class HitEffectData;
class SkillCastType;

// ===================================================================

/*FOR2LUA
<Record>
	<name>SkillBaseData</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>module/SkillBaseData.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class SkillBaseData : public ::google::protobuf::Message {
 public:
  SkillBaseData();
  virtual ~SkillBaseData();

  SkillBaseData(const SkillBaseData& from);

  inline SkillBaseData& operator=(const SkillBaseData& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SkillBaseData& default_instance();

  void Swap(SkillBaseData* other);

  // implements Message ----------------------------------------------

  SkillBaseData* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SkillBaseData& from);
  void MergeFrom(const SkillBaseData& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string Name = 1;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>SkillBaseData</name>
  	<Function>
  		<name>name</name>
  		<replaceName>Name</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_name</name>
  		<replaceName>Name</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_name</name>
  		<replaceName>Name</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // optional int32 ChainSkillMark = 2;
  inline bool has_chainskillmark() const;
  inline void clear_chainskillmark();
  static const int kChainSkillMarkFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>SkillBaseData</name>
  	<Function>
  		<name>chainskillmark</name>
  		<replaceName>ChainSkillMark</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_chainskillmark</name>
  		<replaceName>ChainSkillMark</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_chainskillmark</name>
  		<replaceName>ChainSkillMark</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::int32 chainskillmark() const;
  inline void set_chainskillmark(::google::protobuf::int32 value);

  // optional int32 MainType = 3;
  inline bool has_maintype() const;
  inline void clear_maintype();
  static const int kMainTypeFieldNumber = 3;
  /*FOR2LUA
  <Record>
  	<name>SkillBaseData</name>
  	<Function>
  		<name>maintype</name>
  		<replaceName>MainType</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_maintype</name>
  		<replaceName>MainType</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_maintype</name>
  		<replaceName>MainType</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::int32 maintype() const;
  inline void set_maintype(::google::protobuf::int32 value);

  // optional int32 SubType = 4;
  inline bool has_subtype() const;
  inline void clear_subtype();
  static const int kSubTypeFieldNumber = 4;
  /*FOR2LUA
  <Record>
  	<name>SkillBaseData</name>
  	<Function>
  		<name>subtype</name>
  		<replaceName>SubType</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_subtype</name>
  		<replaceName>SubType</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_subtype</name>
  		<replaceName>SubType</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::int32 subtype() const;
  inline void set_subtype(::google::protobuf::int32 value);

  // optional int32 NormalAttackCount = 5;
  inline bool has_normalattackcount() const;
  inline void clear_normalattackcount();
  static const int kNormalAttackCountFieldNumber = 5;
  /*FOR2LUA
  <Record>
  	<name>SkillBaseData</name>
  	<Function>
  		<name>normalattackcount</name>
  		<replaceName>NormalAttackCount</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_normalattackcount</name>
  		<replaceName>NormalAttackCount</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_normalattackcount</name>
  		<replaceName>NormalAttackCount</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::int32 normalattackcount() const;
  inline void set_normalattackcount(::google::protobuf::int32 value);

  // optional int32 RefTargetType = 6;
  inline bool has_reftargettype() const;
  inline void clear_reftargettype();
  static const int kRefTargetTypeFieldNumber = 6;
  /*FOR2LUA
  <Record>
  	<name>SkillBaseData</name>
  	<Function>
  		<name>reftargettype</name>
  		<replaceName>RefTargetType</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_reftargettype</name>
  		<replaceName>RefTargetType</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_reftargettype</name>
  		<replaceName>RefTargetType</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::int32 reftargettype() const;
  inline void set_reftargettype(::google::protobuf::int32 value);

  // optional int32 SpeBuffID = 7;
  inline bool has_spebuffid() const;
  inline void clear_spebuffid();
  static const int kSpeBuffIDFieldNumber = 7;
  /*FOR2LUA
  <Record>
  	<name>SkillBaseData</name>
  	<Function>
  		<name>spebuffid</name>
  		<replaceName>SpeBuffID</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_spebuffid</name>
  		<replaceName>SpeBuffID</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_spebuffid</name>
  		<replaceName>SpeBuffID</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::int32 spebuffid() const;
  inline void set_spebuffid(::google::protobuf::int32 value);

  // optional int32 RefTargetNum = 8;
  inline bool has_reftargetnum() const;
  inline void clear_reftargetnum();
  static const int kRefTargetNumFieldNumber = 8;
  /*FOR2LUA
  <Record>
  	<name>SkillBaseData</name>
  	<Function>
  		<name>reftargetnum</name>
  		<replaceName>RefTargetNum</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_reftargetnum</name>
  		<replaceName>RefTargetNum</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_reftargetnum</name>
  		<replaceName>RefTargetNum</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::int32 reftargetnum() const;
  inline void set_reftargetnum(::google::protobuf::int32 value);

  // optional bool IsRealTarget = 9;
  inline bool has_isrealtarget() const;
  inline void clear_isrealtarget();
  static const int kIsRealTargetFieldNumber = 9;
  /*FOR2LUA
  <Record>
  	<name>SkillBaseData</name>
  	<Function>
  		<name>isrealtarget</name>
  		<replaceName>IsRealTarget</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_isrealtarget</name>
  		<replaceName>IsRealTarget</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_isrealtarget</name>
  		<replaceName>IsRealTarget</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline bool isrealtarget() const;
  inline void set_isrealtarget(bool value);

  // optional string SkillAnim = 10;
  inline bool has_skillanim() const;
  inline void clear_skillanim();
  static const int kSkillAnimFieldNumber = 10;
  /*FOR2LUA
  <Record>
  	<name>SkillBaseData</name>
  	<Function>
  		<name>skillanim</name>
  		<replaceName>SkillAnim</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_skillanim</name>
  		<replaceName>SkillAnim</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_skillanim</name>
  		<replaceName>SkillAnim</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::std::string& skillanim() const;
  inline void set_skillanim(const ::std::string& value);
  inline void set_skillanim(const char* value);
  inline void set_skillanim(const char* value, size_t size);
  inline ::std::string* mutable_skillanim();
  inline ::std::string* release_skillanim();
  inline void set_allocated_skillanim(::std::string* skillanim);

  // optional bool IsPlayHitAnim = 11;
  inline bool has_isplayhitanim() const;
  inline void clear_isplayhitanim();
  static const int kIsPlayHitAnimFieldNumber = 11;
  /*FOR2LUA
  <Record>
  	<name>SkillBaseData</name>
  	<Function>
  		<name>isplayhitanim</name>
  		<replaceName>IsPlayHitAnim</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_isplayhitanim</name>
  		<replaceName>IsPlayHitAnim</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_isplayhitanim</name>
  		<replaceName>IsPlayHitAnim</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline bool isplayhitanim() const;
  inline void set_isplayhitanim(bool value);

  // optional int32 CastRange = 12;
  inline bool has_castrange() const;
  inline void clear_castrange();
  static const int kCastRangeFieldNumber = 12;
  /*FOR2LUA
  <Record>
  	<name>SkillBaseData</name>
  	<Function>
  		<name>castrange</name>
  		<replaceName>CastRange</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_castrange</name>
  		<replaceName>CastRange</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_castrange</name>
  		<replaceName>CastRange</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::int32 castrange() const;
  inline void set_castrange(::google::protobuf::int32 value);

  // optional int32 needFaceToWhenCast = 13;
  inline bool has_needfacetowhencast() const;
  inline void clear_needfacetowhencast();
  static const int kNeedFaceToWhenCastFieldNumber = 13;
  /*FOR2LUA
  <Record>
  	<name>SkillBaseData</name>
  	<Function>
  		<name>needfacetowhencast</name>
  		<replaceName>needFaceToWhenCast</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_needfacetowhencast</name>
  		<replaceName>needFaceToWhenCast</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_needfacetowhencast</name>
  		<replaceName>needFaceToWhenCast</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::int32 needfacetowhencast() const;
  inline void set_needfacetowhencast(::google::protobuf::int32 value);

  // optional bool IsRecoverFromPause = 19;
  inline bool has_isrecoverfrompause() const;
  inline void clear_isrecoverfrompause();
  static const int kIsRecoverFromPauseFieldNumber = 19;
  /*FOR2LUA
  <Record>
  	<name>SkillBaseData</name>
  	<Function>
  		<name>isrecoverfrompause</name>
  		<replaceName>IsRecoverFromPause</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_isrecoverfrompause</name>
  		<replaceName>IsRecoverFromPause</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_isrecoverfrompause</name>
  		<replaceName>IsRecoverFromPause</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline bool isrecoverfrompause() const;
  inline void set_isrecoverfrompause(bool value);

  // optional bool IsFaceTargetDuringCast = 22;
  inline bool has_isfacetargetduringcast() const;
  inline void clear_isfacetargetduringcast();
  static const int kIsFaceTargetDuringCastFieldNumber = 22;
  /*FOR2LUA
  <Record>
  	<name>SkillBaseData</name>
  	<Function>
  		<name>isfacetargetduringcast</name>
  		<replaceName>IsFaceTargetDuringCast</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_isfacetargetduringcast</name>
  		<replaceName>IsFaceTargetDuringCast</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_isfacetargetduringcast</name>
  		<replaceName>IsFaceTargetDuringCast</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline bool isfacetargetduringcast() const;
  inline void set_isfacetargetduringcast(bool value);

  // optional int32 MaxCastCountInOneScene = 23;
  inline bool has_maxcastcountinonescene() const;
  inline void clear_maxcastcountinonescene();
  static const int kMaxCastCountInOneSceneFieldNumber = 23;
  /*FOR2LUA
  <Record>
  	<name>SkillBaseData</name>
  	<Function>
  		<name>maxcastcountinonescene</name>
  		<replaceName>MaxCastCountInOneScene</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_maxcastcountinonescene</name>
  		<replaceName>MaxCastCountInOneScene</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_maxcastcountinonescene</name>
  		<replaceName>MaxCastCountInOneScene</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::int32 maxcastcountinonescene() const;
  inline void set_maxcastcountinonescene(::google::protobuf::int32 value);

  // optional int32 MaxCastCountInOneBattle = 24;
  inline bool has_maxcastcountinonebattle() const;
  inline void clear_maxcastcountinonebattle();
  static const int kMaxCastCountInOneBattleFieldNumber = 24;
  /*FOR2LUA
  <Record>
  	<name>SkillBaseData</name>
  	<Function>
  		<name>maxcastcountinonebattle</name>
  		<replaceName>MaxCastCountInOneBattle</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_maxcastcountinonebattle</name>
  		<replaceName>MaxCastCountInOneBattle</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_maxcastcountinonebattle</name>
  		<replaceName>MaxCastCountInOneBattle</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::int32 maxcastcountinonebattle() const;
  inline void set_maxcastcountinonebattle(::google::protobuf::int32 value);

  // optional bool IsLasting = 26;
  inline bool has_islasting() const;
  inline void clear_islasting();
  static const int kIsLastingFieldNumber = 26;
  /*FOR2LUA
  <Record>
  	<name>SkillBaseData</name>
  	<Function>
  		<name>islasting</name>
  		<replaceName>IsLasting</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_islasting</name>
  		<replaceName>IsLasting</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_islasting</name>
  		<replaceName>IsLasting</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline bool islasting() const;
  inline void set_islasting(bool value);

  // optional int32 CoolingTime = 27;
  inline bool has_coolingtime() const;
  inline void clear_coolingtime();
  static const int kCoolingTimeFieldNumber = 27;
  /*FOR2LUA
  <Record>
  	<name>SkillBaseData</name>
  	<Function>
  		<name>coolingtime</name>
  		<replaceName>CoolingTime</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_coolingtime</name>
  		<replaceName>CoolingTime</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_coolingtime</name>
  		<replaceName>CoolingTime</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::int32 coolingtime() const;
  inline void set_coolingtime(::google::protobuf::int32 value);

  // optional int32 IntervalTime = 28;
  inline bool has_intervaltime() const;
  inline void clear_intervaltime();
  static const int kIntervalTimeFieldNumber = 28;
  /*FOR2LUA
  <Record>
  	<name>SkillBaseData</name>
  	<Function>
  		<name>intervaltime</name>
  		<replaceName>IntervalTime</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_intervaltime</name>
  		<replaceName>IntervalTime</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_intervaltime</name>
  		<replaceName>IntervalTime</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::int32 intervaltime() const;
  inline void set_intervaltime(::google::protobuf::int32 value);

  // optional int32 NormalAttackChance = 29;
  inline bool has_normalattackchance() const;
  inline void clear_normalattackchance();
  static const int kNormalAttackChanceFieldNumber = 29;
  /*FOR2LUA
  <Record>
  	<name>SkillBaseData</name>
  	<Function>
  		<name>normalattackchance</name>
  		<replaceName>NormalAttackChance</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_normalattackchance</name>
  		<replaceName>NormalAttackChance</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_normalattackchance</name>
  		<replaceName>NormalAttackChance</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::int32 normalattackchance() const;
  inline void set_normalattackchance(::google::protobuf::int32 value);

  // optional int32 TriggerBuffID = 30;
  inline bool has_triggerbuffid() const;
  inline void clear_triggerbuffid();
  static const int kTriggerBuffIDFieldNumber = 30;
  /*FOR2LUA
  <Record>
  	<name>SkillBaseData</name>
  	<Function>
  		<name>triggerbuffid</name>
  		<replaceName>TriggerBuffID</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_triggerbuffid</name>
  		<replaceName>TriggerBuffID</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_triggerbuffid</name>
  		<replaceName>TriggerBuffID</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::int32 triggerbuffid() const;
  inline void set_triggerbuffid(::google::protobuf::int32 value);

  // optional int32 TriggerBuffLayer = 31;
  inline bool has_triggerbufflayer() const;
  inline void clear_triggerbufflayer();
  static const int kTriggerBuffLayerFieldNumber = 31;
  /*FOR2LUA
  <Record>
  	<name>SkillBaseData</name>
  	<Function>
  		<name>triggerbufflayer</name>
  		<replaceName>TriggerBuffLayer</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_triggerbufflayer</name>
  		<replaceName>TriggerBuffLayer</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_triggerbufflayer</name>
  		<replaceName>TriggerBuffLayer</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::int32 triggerbufflayer() const;
  inline void set_triggerbufflayer(::google::protobuf::int32 value);

  // optional string IconPath = 32;
  inline bool has_iconpath() const;
  inline void clear_iconpath();
  static const int kIconPathFieldNumber = 32;
  /*FOR2LUA
  <Record>
  	<name>SkillBaseData</name>
  	<Function>
  		<name>iconpath</name>
  		<replaceName>IconPath</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_iconpath</name>
  		<replaceName>IconPath</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_iconpath</name>
  		<replaceName>IconPath</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::std::string& iconpath() const;
  inline void set_iconpath(const ::std::string& value);
  inline void set_iconpath(const char* value);
  inline void set_iconpath(const char* value, size_t size);
  inline ::std::string* mutable_iconpath();
  inline ::std::string* release_iconpath();
  inline void set_allocated_iconpath(::std::string* iconpath);

  // optional int32 FrontDistance = 36;
  inline bool has_frontdistance() const;
  inline void clear_frontdistance();
  static const int kFrontDistanceFieldNumber = 36;
  /*FOR2LUA
  <Record>
  	<name>SkillBaseData</name>
  	<Function>
  		<name>frontdistance</name>
  		<replaceName>FrontDistance</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_frontdistance</name>
  		<replaceName>FrontDistance</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_frontdistance</name>
  		<replaceName>FrontDistance</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::int32 frontdistance() const;
  inline void set_frontdistance(::google::protobuf::int32 value);

  // repeated float ScenePos = 37;
  inline int scenepos_size() const;
  inline void clear_scenepos();
  static const int kScenePosFieldNumber = 37;
  /*FOR2LUA
  <Record>
  	<name>SkillBaseData</name>
  	<Function>
  		<name>scenepos</name>
  		<replaceName>ScenePos</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_scenepos</name>
  		<replaceName>ScenePos</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_scenepos</name>
  		<replaceName>ScenePos</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_scenepos</name>
  		<replaceName>ScenePos</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>scenepos_size</name>
  		<replaceName>ScenePos</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline float scenepos(int index) const;
  inline void set_scenepos(int index, float value);
  inline void add_scenepos(float value);
  inline const ::google::protobuf::RepeatedField< float >&
      scenepos() const;
  inline ::google::protobuf::RepeatedField< float >*
      mutable_scenepos();

  // optional int32 SkillTunnel = 38;
  inline bool has_skilltunnel() const;
  inline void clear_skilltunnel();
  static const int kSkillTunnelFieldNumber = 38;
  /*FOR2LUA
  <Record>
  	<name>SkillBaseData</name>
  	<Function>
  		<name>skilltunnel</name>
  		<replaceName>SkillTunnel</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_skilltunnel</name>
  		<replaceName>SkillTunnel</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_skilltunnel</name>
  		<replaceName>SkillTunnel</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::int32 skilltunnel() const;
  inline void set_skilltunnel(::google::protobuf::int32 value);

  // optional string SkillLastEffect = 39;
  inline bool has_skilllasteffect() const;
  inline void clear_skilllasteffect();
  static const int kSkillLastEffectFieldNumber = 39;
  /*FOR2LUA
  <Record>
  	<name>SkillBaseData</name>
  	<Function>
  		<name>skilllasteffect</name>
  		<replaceName>SkillLastEffect</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_skilllasteffect</name>
  		<replaceName>SkillLastEffect</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_skilllasteffect</name>
  		<replaceName>SkillLastEffect</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::std::string& skilllasteffect() const;
  inline void set_skilllasteffect(const ::std::string& value);
  inline void set_skilllasteffect(const char* value);
  inline void set_skilllasteffect(const char* value, size_t size);
  inline ::std::string* mutable_skilllasteffect();
  inline ::std::string* release_skilllasteffect();
  inline void set_allocated_skilllasteffect(::std::string* skilllasteffect);

  // optional int32 SkillShowTime = 40;
  inline bool has_skillshowtime() const;
  inline void clear_skillshowtime();
  static const int kSkillShowTimeFieldNumber = 40;
  /*FOR2LUA
  <Record>
  	<name>SkillBaseData</name>
  	<Function>
  		<name>skillshowtime</name>
  		<replaceName>SkillShowTime</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_skillshowtime</name>
  		<replaceName>SkillShowTime</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_skillshowtime</name>
  		<replaceName>SkillShowTime</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::int32 skillshowtime() const;
  inline void set_skillshowtime(::google::protobuf::int32 value);

  // repeated int32 TriggerSkillArr = 41;
  inline int triggerskillarr_size() const;
  inline void clear_triggerskillarr();
  static const int kTriggerSkillArrFieldNumber = 41;
  /*FOR2LUA
  <Record>
  	<name>SkillBaseData</name>
  	<Function>
  		<name>triggerskillarr</name>
  		<replaceName>TriggerSkillArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_triggerskillarr</name>
  		<replaceName>TriggerSkillArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_triggerskillarr</name>
  		<replaceName>TriggerSkillArr</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_triggerskillarr</name>
  		<replaceName>TriggerSkillArr</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>triggerskillarr_size</name>
  		<replaceName>TriggerSkillArr</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::int32 triggerskillarr(int index) const;
  inline void set_triggerskillarr(int index, ::google::protobuf::int32 value);
  inline void add_triggerskillarr(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      triggerskillarr() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_triggerskillarr();

  // optional bool RefTargetIncludeSelf = 42;
  inline bool has_reftargetincludeself() const;
  inline void clear_reftargetincludeself();
  static const int kRefTargetIncludeSelfFieldNumber = 42;
  /*FOR2LUA
  <Record>
  	<name>SkillBaseData</name>
  	<Function>
  		<name>reftargetincludeself</name>
  		<replaceName>RefTargetIncludeSelf</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_reftargetincludeself</name>
  		<replaceName>RefTargetIncludeSelf</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_reftargetincludeself</name>
  		<replaceName>RefTargetIncludeSelf</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline bool reftargetincludeself() const;
  inline void set_reftargetincludeself(bool value);

  // optional int32 TriggerSkillChance = 43;
  inline bool has_triggerskillchance() const;
  inline void clear_triggerskillchance();
  static const int kTriggerSkillChanceFieldNumber = 43;
  /*FOR2LUA
  <Record>
  	<name>SkillBaseData</name>
  	<Function>
  		<name>triggerskillchance</name>
  		<replaceName>TriggerSkillChance</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_triggerskillchance</name>
  		<replaceName>TriggerSkillChance</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_triggerskillchance</name>
  		<replaceName>TriggerSkillChance</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::int32 triggerskillchance() const;
  inline void set_triggerskillchance(::google::protobuf::int32 value);

  // optional bool PartofRageSkill = 45;
  inline bool has_partofrageskill() const;
  inline void clear_partofrageskill();
  static const int kPartofRageSkillFieldNumber = 45;
  /*FOR2LUA
  <Record>
  	<name>SkillBaseData</name>
  	<Function>
  		<name>partofrageskill</name>
  		<replaceName>PartofRageSkill</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_partofrageskill</name>
  		<replaceName>PartofRageSkill</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_partofrageskill</name>
  		<replaceName>PartofRageSkill</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline bool partofrageskill() const;
  inline void set_partofrageskill(bool value);

  // optional int32 SkillActionLastTime = 46;
  inline bool has_skillactionlasttime() const;
  inline void clear_skillactionlasttime();
  static const int kSkillActionLastTimeFieldNumber = 46;
  /*FOR2LUA
  <Record>
  	<name>SkillBaseData</name>
  	<Function>
  		<name>skillactionlasttime</name>
  		<replaceName>SkillActionLastTime</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_skillactionlasttime</name>
  		<replaceName>SkillActionLastTime</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_skillactionlasttime</name>
  		<replaceName>SkillActionLastTime</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::int32 skillactionlasttime() const;
  inline void set_skillactionlasttime(::google::protobuf::int32 value);

  // optional string MusouTimeLine = 47;
  inline bool has_musoutimeline() const;
  inline void clear_musoutimeline();
  static const int kMusouTimeLineFieldNumber = 47;
  /*FOR2LUA
  <Record>
  	<name>SkillBaseData</name>
  	<Function>
  		<name>musoutimeline</name>
  		<replaceName>MusouTimeLine</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_musoutimeline</name>
  		<replaceName>MusouTimeLine</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_musoutimeline</name>
  		<replaceName>MusouTimeLine</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::std::string& musoutimeline() const;
  inline void set_musoutimeline(const ::std::string& value);
  inline void set_musoutimeline(const char* value);
  inline void set_musoutimeline(const char* value, size_t size);
  inline ::std::string* mutable_musoutimeline();
  inline ::std::string* release_musoutimeline();
  inline void set_allocated_musoutimeline(::std::string* musoutimeline);

  // optional int32 SkillPriority = 48;
  inline bool has_skillpriority() const;
  inline void clear_skillpriority();
  static const int kSkillPriorityFieldNumber = 48;
  /*FOR2LUA
  <Record>
  	<name>SkillBaseData</name>
  	<Function>
  		<name>skillpriority</name>
  		<replaceName>SkillPriority</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_skillpriority</name>
  		<replaceName>SkillPriority</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_skillpriority</name>
  		<replaceName>SkillPriority</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::int32 skillpriority() const;
  inline void set_skillpriority(::google::protobuf::int32 value);

  // optional string RageSkillSpine = 49;
  inline bool has_rageskillspine() const;
  inline void clear_rageskillspine();
  static const int kRageSkillSpineFieldNumber = 49;
  /*FOR2LUA
  <Record>
  	<name>SkillBaseData</name>
  	<Function>
  		<name>rageskillspine</name>
  		<replaceName>RageSkillSpine</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_rageskillspine</name>
  		<replaceName>RageSkillSpine</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_rageskillspine</name>
  		<replaceName>RageSkillSpine</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::std::string& rageskillspine() const;
  inline void set_rageskillspine(const ::std::string& value);
  inline void set_rageskillspine(const char* value);
  inline void set_rageskillspine(const char* value, size_t size);
  inline ::std::string* mutable_rageskillspine();
  inline ::std::string* release_rageskillspine();
  inline void set_allocated_rageskillspine(::std::string* rageskillspine);

  // optional string RageSkillEffect = 50;
  inline bool has_rageskilleffect() const;
  inline void clear_rageskilleffect();
  static const int kRageSkillEffectFieldNumber = 50;
  /*FOR2LUA
  <Record>
  	<name>SkillBaseData</name>
  	<Function>
  		<name>rageskilleffect</name>
  		<replaceName>RageSkillEffect</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_rageskilleffect</name>
  		<replaceName>RageSkillEffect</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_rageskilleffect</name>
  		<replaceName>RageSkillEffect</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::std::string& rageskilleffect() const;
  inline void set_rageskilleffect(const ::std::string& value);
  inline void set_rageskilleffect(const char* value);
  inline void set_rageskilleffect(const char* value, size_t size);
  inline ::std::string* mutable_rageskilleffect();
  inline ::std::string* release_rageskilleffect();
  inline void set_allocated_rageskilleffect(::std::string* rageskilleffect);

  // optional string RageSkillAudio = 51;
  inline bool has_rageskillaudio() const;
  inline void clear_rageskillaudio();
  static const int kRageSkillAudioFieldNumber = 51;
  /*FOR2LUA
  <Record>
  	<name>SkillBaseData</name>
  	<Function>
  		<name>rageskillaudio</name>
  		<replaceName>RageSkillAudio</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_rageskillaudio</name>
  		<replaceName>RageSkillAudio</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_rageskillaudio</name>
  		<replaceName>RageSkillAudio</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::std::string& rageskillaudio() const;
  inline void set_rageskillaudio(const ::std::string& value);
  inline void set_rageskillaudio(const char* value);
  inline void set_rageskillaudio(const char* value, size_t size);
  inline ::std::string* mutable_rageskillaudio();
  inline ::std::string* release_rageskillaudio();
  inline void set_allocated_rageskillaudio(::std::string* rageskillaudio);

  // optional string DeathAnim = 52;
  inline bool has_deathanim() const;
  inline void clear_deathanim();
  static const int kDeathAnimFieldNumber = 52;
  /*FOR2LUA
  <Record>
  	<name>SkillBaseData</name>
  	<Function>
  		<name>deathanim</name>
  		<replaceName>DeathAnim</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_deathanim</name>
  		<replaceName>DeathAnim</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_deathanim</name>
  		<replaceName>DeathAnim</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::std::string& deathanim() const;
  inline void set_deathanim(const ::std::string& value);
  inline void set_deathanim(const char* value);
  inline void set_deathanim(const char* value, size_t size);
  inline ::std::string* mutable_deathanim();
  inline ::std::string* release_deathanim();
  inline void set_allocated_deathanim(::std::string* deathanim);

  // optional .pb.SkillSpecialData SkillSpecialData = 53;
  inline bool has_skillspecialdata() const;
  inline void clear_skillspecialdata();
  static const int kSkillSpecialDataFieldNumber = 53;
  /*FOR2LUA
  <Record>
  	<name>SkillBaseData</name>
  	<Function>
  		<name>skillspecialdata</name>
  		<replaceName>SkillSpecialData</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_skillspecialdata</name>
  		<replaceName>SkillSpecialData</replaceName>
  		<handler>descripter = pb_set_message_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_allocated_skillspecialdata</name>
  		<replaceName>SkillSpecialData</replaceName>
  		<handler>descripter = pb_set_message_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_skillspecialdata</name>
  		<replaceName>SkillSpecialData</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::SkillSpecialData& skillspecialdata() const;
  inline ::pb::SkillSpecialData* mutable_skillspecialdata();
  inline ::pb::SkillSpecialData* release_skillspecialdata();
  inline void set_allocated_skillspecialdata(::pb::SkillSpecialData* skillspecialdata);

  // optional bool ShowRageSkillDamage = 54;
  inline bool has_showrageskilldamage() const;
  inline void clear_showrageskilldamage();
  static const int kShowRageSkillDamageFieldNumber = 54;
  /*FOR2LUA
  <Record>
  	<name>SkillBaseData</name>
  	<Function>
  		<name>showrageskilldamage</name>
  		<replaceName>ShowRageSkillDamage</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_showrageskilldamage</name>
  		<replaceName>ShowRageSkillDamage</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_showrageskilldamage</name>
  		<replaceName>ShowRageSkillDamage</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline bool showrageskilldamage() const;
  inline void set_showrageskilldamage(bool value);

  // repeated int32 SkillReplace = 55;
  inline int skillreplace_size() const;
  inline void clear_skillreplace();
  static const int kSkillReplaceFieldNumber = 55;
  /*FOR2LUA
  <Record>
  	<name>SkillBaseData</name>
  	<Function>
  		<name>skillreplace</name>
  		<replaceName>SkillReplace</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_skillreplace</name>
  		<replaceName>SkillReplace</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_skillreplace</name>
  		<replaceName>SkillReplace</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_skillreplace</name>
  		<replaceName>SkillReplace</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>skillreplace_size</name>
  		<replaceName>SkillReplace</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::int32 skillreplace(int index) const;
  inline void set_skillreplace(int index, ::google::protobuf::int32 value);
  inline void add_skillreplace(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      skillreplace() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_skillreplace();

  // optional int32 RageBonusAfterKill = 56;
  inline bool has_ragebonusafterkill() const;
  inline void clear_ragebonusafterkill();
  static const int kRageBonusAfterKillFieldNumber = 56;
  /*FOR2LUA
  <Record>
  	<name>SkillBaseData</name>
  	<Function>
  		<name>ragebonusafterkill</name>
  		<replaceName>RageBonusAfterKill</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_ragebonusafterkill</name>
  		<replaceName>RageBonusAfterKill</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_ragebonusafterkill</name>
  		<replaceName>RageBonusAfterKill</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::int32 ragebonusafterkill() const;
  inline void set_ragebonusafterkill(::google::protobuf::int32 value);

  // optional .pb.SkillCastType SkillCastType = 57;
  inline bool has_skillcasttype() const;
  inline void clear_skillcasttype();
  static const int kSkillCastTypeFieldNumber = 57;
  /*FOR2LUA
  <Record>
  	<name>SkillBaseData</name>
  	<Function>
  		<name>skillcasttype</name>
  		<replaceName>SkillCastType</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_skillcasttype</name>
  		<replaceName>SkillCastType</replaceName>
  		<handler>descripter = pb_set_message_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_allocated_skillcasttype</name>
  		<replaceName>SkillCastType</replaceName>
  		<handler>descripter = pb_set_message_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_skillcasttype</name>
  		<replaceName>SkillCastType</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::SkillCastType& skillcasttype() const;
  inline ::pb::SkillCastType* mutable_skillcasttype();
  inline ::pb::SkillCastType* release_skillcasttype();
  inline void set_allocated_skillcasttype(::pb::SkillCastType* skillcasttype);

  // repeated string MusouCameraLookatInfo = 58;
  inline int musoucameralookatinfo_size() const;
  inline void clear_musoucameralookatinfo();
  static const int kMusouCameraLookatInfoFieldNumber = 58;
  /*FOR2LUA
  <Record>
  	<name>SkillBaseData</name>
  	<Function>
  		<name>musoucameralookatinfo</name>
  		<replaceName>MusouCameraLookatInfo</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_musoucameralookatinfo</name>
  		<replaceName>MusouCameraLookatInfo</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_musoucameralookatinfo</name>
  		<replaceName>MusouCameraLookatInfo</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_musoucameralookatinfo</name>
  		<replaceName>MusouCameraLookatInfo</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>musoucameralookatinfo_size</name>
  		<replaceName>MusouCameraLookatInfo</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::std::string& musoucameralookatinfo(int index) const;
  inline ::std::string* mutable_musoucameralookatinfo(int index);
  inline void set_musoucameralookatinfo(int index, const ::std::string& value);
  inline void set_musoucameralookatinfo(int index, const char* value);
  inline void set_musoucameralookatinfo(int index, const char* value, size_t size);
  inline ::std::string* add_musoucameralookatinfo();
  inline void add_musoucameralookatinfo(const ::std::string& value);
  inline void add_musoucameralookatinfo(const char* value);
  inline void add_musoucameralookatinfo(const char* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& musoucameralookatinfo() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_musoucameralookatinfo();

  // optional .pb.SkillTargetPriority RefPriority = 59;
  inline bool has_refpriority() const;
  inline void clear_refpriority();
  static const int kRefPriorityFieldNumber = 59;
  /*FOR2LUA
  <Record>
  	<name>SkillBaseData</name>
  	<Function>
  		<name>refpriority</name>
  		<replaceName>RefPriority</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_refpriority</name>
  		<replaceName>RefPriority</replaceName>
  		<handler>descripter = pb_set_message_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_allocated_refpriority</name>
  		<replaceName>RefPriority</replaceName>
  		<handler>descripter = pb_set_message_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_refpriority</name>
  		<replaceName>RefPriority</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::SkillTargetPriority& refpriority() const;
  inline ::pb::SkillTargetPriority* mutable_refpriority();
  inline ::pb::SkillTargetPriority* release_refpriority();
  inline void set_allocated_refpriority(::pb::SkillTargetPriority* refpriority);

  // optional int32 SpeBuffIDBack = 60;
  inline bool has_spebuffidback() const;
  inline void clear_spebuffidback();
  static const int kSpeBuffIDBackFieldNumber = 60;
  /*FOR2LUA
  <Record>
  	<name>SkillBaseData</name>
  	<Function>
  		<name>spebuffidback</name>
  		<replaceName>SpeBuffIDBack</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_spebuffidback</name>
  		<replaceName>SpeBuffIDBack</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_spebuffidback</name>
  		<replaceName>SpeBuffIDBack</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::int32 spebuffidback() const;
  inline void set_spebuffidback(::google::protobuf::int32 value);

  // optional bool AutoRageSkill = 61;
  inline bool has_autorageskill() const;
  inline void clear_autorageskill();
  static const int kAutoRageSkillFieldNumber = 61;
  /*FOR2LUA
  <Record>
  	<name>SkillBaseData</name>
  	<Function>
  		<name>autorageskill</name>
  		<replaceName>AutoRageSkill</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_autorageskill</name>
  		<replaceName>AutoRageSkill</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_autorageskill</name>
  		<replaceName>AutoRageSkill</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline bool autorageskill() const;
  inline void set_autorageskill(bool value);

  // optional bool SubRageSmoothly = 62;
  inline bool has_subragesmoothly() const;
  inline void clear_subragesmoothly();
  static const int kSubRageSmoothlyFieldNumber = 62;
  /*FOR2LUA
  <Record>
  	<name>SkillBaseData</name>
  	<Function>
  		<name>subragesmoothly</name>
  		<replaceName>SubRageSmoothly</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_subragesmoothly</name>
  		<replaceName>SubRageSmoothly</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_subragesmoothly</name>
  		<replaceName>SubRageSmoothly</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline bool subragesmoothly() const;
  inline void set_subragesmoothly(bool value);

  // optional int32 SubRageDuration = 63;
  inline bool has_subrageduration() const;
  inline void clear_subrageduration();
  static const int kSubRageDurationFieldNumber = 63;
  /*FOR2LUA
  <Record>
  	<name>SkillBaseData</name>
  	<Function>
  		<name>subrageduration</name>
  		<replaceName>SubRageDuration</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_subrageduration</name>
  		<replaceName>SubRageDuration</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_subrageduration</name>
  		<replaceName>SubRageDuration</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::int32 subrageduration() const;
  inline void set_subrageduration(::google::protobuf::int32 value);

  // optional bool LastEffForwardSelf = 64;
  inline bool has_lasteffforwardself() const;
  inline void clear_lasteffforwardself();
  static const int kLastEffForwardSelfFieldNumber = 64;
  /*FOR2LUA
  <Record>
  	<name>SkillBaseData</name>
  	<Function>
  		<name>lasteffforwardself</name>
  		<replaceName>LastEffForwardSelf</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_lasteffforwardself</name>
  		<replaceName>LastEffForwardSelf</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_lasteffforwardself</name>
  		<replaceName>LastEffForwardSelf</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline bool lasteffforwardself() const;
  inline void set_lasteffforwardself(bool value);

  // optional int32 LocalizeSkillId = 65;
  inline bool has_localizeskillid() const;
  inline void clear_localizeskillid();
  static const int kLocalizeSkillIdFieldNumber = 65;
  /*FOR2LUA
  <Record>
  	<name>SkillBaseData</name>
  	<Function>
  		<name>localizeskillid</name>
  		<replaceName>LocalizeSkillId</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_localizeskillid</name>
  		<replaceName>LocalizeSkillId</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_localizeskillid</name>
  		<replaceName>LocalizeSkillId</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::int32 localizeskillid() const;
  inline void set_localizeskillid(::google::protobuf::int32 value);

  // repeated int32 ScenePosIndex = 66;
  inline int sceneposindex_size() const;
  inline void clear_sceneposindex();
  static const int kScenePosIndexFieldNumber = 66;
  /*FOR2LUA
  <Record>
  	<name>SkillBaseData</name>
  	<Function>
  		<name>sceneposindex</name>
  		<replaceName>ScenePosIndex</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_sceneposindex</name>
  		<replaceName>ScenePosIndex</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_sceneposindex</name>
  		<replaceName>ScenePosIndex</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_sceneposindex</name>
  		<replaceName>ScenePosIndex</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>sceneposindex_size</name>
  		<replaceName>ScenePosIndex</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::int32 sceneposindex(int index) const;
  inline void set_sceneposindex(int index, ::google::protobuf::int32 value);
  inline void add_sceneposindex(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      sceneposindex() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_sceneposindex();

  // optional int32 DamageSpecialType = 67;
  inline bool has_damagespecialtype() const;
  inline void clear_damagespecialtype();
  static const int kDamageSpecialTypeFieldNumber = 67;
  /*FOR2LUA
  <Record>
  	<name>SkillBaseData</name>
  	<Function>
  		<name>damagespecialtype</name>
  		<replaceName>DamageSpecialType</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_damagespecialtype</name>
  		<replaceName>DamageSpecialType</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_damagespecialtype</name>
  		<replaceName>DamageSpecialType</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::int32 damagespecialtype() const;
  inline void set_damagespecialtype(::google::protobuf::int32 value);

  // optional bool IsSemiAutoRageSkill = 68;
  inline bool has_issemiautorageskill() const;
  inline void clear_issemiautorageskill();
  static const int kIsSemiAutoRageSkillFieldNumber = 68;
  /*FOR2LUA
  <Record>
  	<name>SkillBaseData</name>
  	<Function>
  		<name>issemiautorageskill</name>
  		<replaceName>IsSemiAutoRageSkill</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_issemiautorageskill</name>
  		<replaceName>IsSemiAutoRageSkill</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_issemiautorageskill</name>
  		<replaceName>IsSemiAutoRageSkill</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline bool issemiautorageskill() const;
  inline void set_issemiautorageskill(bool value);

  // optional int32 SemiAutoSkillTimeToLive = 69;
  inline bool has_semiautoskilltimetolive() const;
  inline void clear_semiautoskilltimetolive();
  static const int kSemiAutoSkillTimeToLiveFieldNumber = 69;
  /*FOR2LUA
  <Record>
  	<name>SkillBaseData</name>
  	<Function>
  		<name>semiautoskilltimetolive</name>
  		<replaceName>SemiAutoSkillTimeToLive</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_semiautoskilltimetolive</name>
  		<replaceName>SemiAutoSkillTimeToLive</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_semiautoskilltimetolive</name>
  		<replaceName>SemiAutoSkillTimeToLive</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::int32 semiautoskilltimetolive() const;
  inline void set_semiautoskilltimetolive(::google::protobuf::int32 value);

  // optional int32 SemiAutoSkillInterval = 70;
  inline bool has_semiautoskillinterval() const;
  inline void clear_semiautoskillinterval();
  static const int kSemiAutoSkillIntervalFieldNumber = 70;
  /*FOR2LUA
  <Record>
  	<name>SkillBaseData</name>
  	<Function>
  		<name>semiautoskillinterval</name>
  		<replaceName>SemiAutoSkillInterval</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_semiautoskillinterval</name>
  		<replaceName>SemiAutoSkillInterval</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_semiautoskillinterval</name>
  		<replaceName>SemiAutoSkillInterval</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::int32 semiautoskillinterval() const;
  inline void set_semiautoskillinterval(::google::protobuf::int32 value);

  // repeated int32 SemiAutoSkillChain = 71;
  inline int semiautoskillchain_size() const;
  inline void clear_semiautoskillchain();
  static const int kSemiAutoSkillChainFieldNumber = 71;
  /*FOR2LUA
  <Record>
  	<name>SkillBaseData</name>
  	<Function>
  		<name>semiautoskillchain</name>
  		<replaceName>SemiAutoSkillChain</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_semiautoskillchain</name>
  		<replaceName>SemiAutoSkillChain</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_semiautoskillchain</name>
  		<replaceName>SemiAutoSkillChain</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_semiautoskillchain</name>
  		<replaceName>SemiAutoSkillChain</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>semiautoskillchain_size</name>
  		<replaceName>SemiAutoSkillChain</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::int32 semiautoskillchain(int index) const;
  inline void set_semiautoskillchain(int index, ::google::protobuf::int32 value);
  inline void add_semiautoskillchain(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      semiautoskillchain() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_semiautoskillchain();

  // optional bool IsBlockPriority = 72;
  inline bool has_isblockpriority() const;
  inline void clear_isblockpriority();
  static const int kIsBlockPriorityFieldNumber = 72;
  /*FOR2LUA
  <Record>
  	<name>SkillBaseData</name>
  	<Function>
  		<name>isblockpriority</name>
  		<replaceName>IsBlockPriority</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_isblockpriority</name>
  		<replaceName>IsBlockPriority</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_isblockpriority</name>
  		<replaceName>IsBlockPriority</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline bool isblockpriority() const;
  inline void set_isblockpriority(bool value);

  // optional bool IgnoreInterruptEffect = 73;
  inline bool has_ignoreinterrupteffect() const;
  inline void clear_ignoreinterrupteffect();
  static const int kIgnoreInterruptEffectFieldNumber = 73;
  /*FOR2LUA
  <Record>
  	<name>SkillBaseData</name>
  	<Function>
  		<name>ignoreinterrupteffect</name>
  		<replaceName>IgnoreInterruptEffect</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_ignoreinterrupteffect</name>
  		<replaceName>IgnoreInterruptEffect</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_ignoreinterrupteffect</name>
  		<replaceName>IgnoreInterruptEffect</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline bool ignoreinterrupteffect() const;
  inline void set_ignoreinterrupteffect(bool value);

  // repeated int32 SkillEnergyLevel = 74;
  inline int skillenergylevel_size() const;
  inline void clear_skillenergylevel();
  static const int kSkillEnergyLevelFieldNumber = 74;
  /*FOR2LUA
  <Record>
  	<name>SkillBaseData</name>
  	<Function>
  		<name>skillenergylevel</name>
  		<replaceName>SkillEnergyLevel</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_skillenergylevel</name>
  		<replaceName>SkillEnergyLevel</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_skillenergylevel</name>
  		<replaceName>SkillEnergyLevel</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_skillenergylevel</name>
  		<replaceName>SkillEnergyLevel</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>skillenergylevel_size</name>
  		<replaceName>SkillEnergyLevel</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::int32 skillenergylevel(int index) const;
  inline void set_skillenergylevel(int index, ::google::protobuf::int32 value);
  inline void add_skillenergylevel(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      skillenergylevel() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_skillenergylevel();

  // optional int32 PerfectInterruptDuration = 75;
  inline bool has_perfectinterruptduration() const;
  inline void clear_perfectinterruptduration();
  static const int kPerfectInterruptDurationFieldNumber = 75;
  /*FOR2LUA
  <Record>
  	<name>SkillBaseData</name>
  	<Function>
  		<name>perfectinterruptduration</name>
  		<replaceName>PerfectInterruptDuration</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_perfectinterruptduration</name>
  		<replaceName>PerfectInterruptDuration</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_perfectinterruptduration</name>
  		<replaceName>PerfectInterruptDuration</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::int32 perfectinterruptduration() const;
  inline void set_perfectinterruptduration(::google::protobuf::int32 value);

  // optional int32 SkillEndTime = 76;
  inline bool has_skillendtime() const;
  inline void clear_skillendtime();
  static const int kSkillEndTimeFieldNumber = 76;
  /*FOR2LUA
  <Record>
  	<name>SkillBaseData</name>
  	<Function>
  		<name>skillendtime</name>
  		<replaceName>SkillEndTime</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_skillendtime</name>
  		<replaceName>SkillEndTime</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_skillendtime</name>
  		<replaceName>SkillEndTime</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::int32 skillendtime() const;
  inline void set_skillendtime(::google::protobuf::int32 value);

  // optional bool Lockon = 77;
  inline bool has_lockon() const;
  inline void clear_lockon();
  static const int kLockonFieldNumber = 77;
  /*FOR2LUA
  <Record>
  	<name>SkillBaseData</name>
  	<Function>
  		<name>lockon</name>
  		<replaceName>Lockon</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_lockon</name>
  		<replaceName>Lockon</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_lockon</name>
  		<replaceName>Lockon</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline bool lockon() const;
  inline void set_lockon(bool value);

  // optional bool IsNeedHighligh = 78;
  inline bool has_isneedhighligh() const;
  inline void clear_isneedhighligh();
  static const int kIsNeedHighlighFieldNumber = 78;
  /*FOR2LUA
  <Record>
  	<name>SkillBaseData</name>
  	<Function>
  		<name>isneedhighligh</name>
  		<replaceName>IsNeedHighligh</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_isneedhighligh</name>
  		<replaceName>IsNeedHighligh</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_isneedhighligh</name>
  		<replaceName>IsNeedHighligh</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline bool isneedhighligh() const;
  inline void set_isneedhighligh(bool value);

  // optional int32 KeepDyingDuration = 79;
  inline bool has_keepdyingduration() const;
  inline void clear_keepdyingduration();
  static const int kKeepDyingDurationFieldNumber = 79;
  /*FOR2LUA
  <Record>
  	<name>SkillBaseData</name>
  	<Function>
  		<name>keepdyingduration</name>
  		<replaceName>KeepDyingDuration</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_keepdyingduration</name>
  		<replaceName>KeepDyingDuration</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_keepdyingduration</name>
  		<replaceName>KeepDyingDuration</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::int32 keepdyingduration() const;
  inline void set_keepdyingduration(::google::protobuf::int32 value);

  // optional bool InterruptBossSkill = 80;
  inline bool has_interruptbossskill() const;
  inline void clear_interruptbossskill();
  static const int kInterruptBossSkillFieldNumber = 80;
  /*FOR2LUA
  <Record>
  	<name>SkillBaseData</name>
  	<Function>
  		<name>interruptbossskill</name>
  		<replaceName>InterruptBossSkill</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_interruptbossskill</name>
  		<replaceName>InterruptBossSkill</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_interruptbossskill</name>
  		<replaceName>InterruptBossSkill</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline bool interruptbossskill() const;
  inline void set_interruptbossskill(bool value);

  // optional bool SkipIdleOnEnd = 81;
  inline bool has_skipidleonend() const;
  inline void clear_skipidleonend();
  static const int kSkipIdleOnEndFieldNumber = 81;
  /*FOR2LUA
  <Record>
  	<name>SkillBaseData</name>
  	<Function>
  		<name>skipidleonend</name>
  		<replaceName>SkipIdleOnEnd</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_skipidleonend</name>
  		<replaceName>SkipIdleOnEnd</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_skipidleonend</name>
  		<replaceName>SkipIdleOnEnd</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline bool skipidleonend() const;
  inline void set_skipidleonend(bool value);

  // optional bool RageSkillInterruptable = 82;
  inline bool has_rageskillinterruptable() const;
  inline void clear_rageskillinterruptable();
  static const int kRageSkillInterruptableFieldNumber = 82;
  /*FOR2LUA
  <Record>
  	<name>SkillBaseData</name>
  	<Function>
  		<name>rageskillinterruptable</name>
  		<replaceName>RageSkillInterruptable</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_rageskillinterruptable</name>
  		<replaceName>RageSkillInterruptable</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_rageskillinterruptable</name>
  		<replaceName>RageSkillInterruptable</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline bool rageskillinterruptable() const;
  inline void set_rageskillinterruptable(bool value);

  // repeated int32 ArmySkillInfo = 83;
  inline int armyskillinfo_size() const;
  inline void clear_armyskillinfo();
  static const int kArmySkillInfoFieldNumber = 83;
  /*FOR2LUA
  <Record>
  	<name>SkillBaseData</name>
  	<Function>
  		<name>armyskillinfo</name>
  		<replaceName>ArmySkillInfo</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_armyskillinfo</name>
  		<replaceName>ArmySkillInfo</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_armyskillinfo</name>
  		<replaceName>ArmySkillInfo</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_armyskillinfo</name>
  		<replaceName>ArmySkillInfo</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>armyskillinfo_size</name>
  		<replaceName>ArmySkillInfo</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::int32 armyskillinfo(int index) const;
  inline void set_armyskillinfo(int index, ::google::protobuf::int32 value);
  inline void add_armyskillinfo(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      armyskillinfo() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_armyskillinfo();

  // optional bool IgnoreNoSkill = 84;
  inline bool has_ignorenoskill() const;
  inline void clear_ignorenoskill();
  static const int kIgnoreNoSkillFieldNumber = 84;
  /*FOR2LUA
  <Record>
  	<name>SkillBaseData</name>
  	<Function>
  		<name>ignorenoskill</name>
  		<replaceName>IgnoreNoSkill</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_ignorenoskill</name>
  		<replaceName>IgnoreNoSkill</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_ignorenoskill</name>
  		<replaceName>IgnoreNoSkill</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline bool ignorenoskill() const;
  inline void set_ignorenoskill(bool value);

  // optional int32 RefTargetSummonType = 85;
  inline bool has_reftargetsummontype() const;
  inline void clear_reftargetsummontype();
  static const int kRefTargetSummonTypeFieldNumber = 85;
  /*FOR2LUA
  <Record>
  	<name>SkillBaseData</name>
  	<Function>
  		<name>reftargetsummontype</name>
  		<replaceName>RefTargetSummonType</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_reftargetsummontype</name>
  		<replaceName>RefTargetSummonType</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_reftargetsummontype</name>
  		<replaceName>RefTargetSummonType</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::int32 reftargetsummontype() const;
  inline void set_reftargetsummontype(::google::protobuf::int32 value);

  // optional int32 LevelCoolingTimeGrowth = 86;
  inline bool has_levelcoolingtimegrowth() const;
  inline void clear_levelcoolingtimegrowth();
  static const int kLevelCoolingTimeGrowthFieldNumber = 86;
  /*FOR2LUA
  <Record>
  	<name>SkillBaseData</name>
  	<Function>
  		<name>levelcoolingtimegrowth</name>
  		<replaceName>LevelCoolingTimeGrowth</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_levelcoolingtimegrowth</name>
  		<replaceName>LevelCoolingTimeGrowth</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_levelcoolingtimegrowth</name>
  		<replaceName>LevelCoolingTimeGrowth</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::int32 levelcoolingtimegrowth() const;
  inline void set_levelcoolingtimegrowth(::google::protobuf::int32 value);

  // repeated int32 TargetProfessions = 87;
  inline int targetprofessions_size() const;
  inline void clear_targetprofessions();
  static const int kTargetProfessionsFieldNumber = 87;
  /*FOR2LUA
  <Record>
  	<name>SkillBaseData</name>
  	<Function>
  		<name>targetprofessions</name>
  		<replaceName>TargetProfessions</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_targetprofessions</name>
  		<replaceName>TargetProfessions</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_targetprofessions</name>
  		<replaceName>TargetProfessions</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_targetprofessions</name>
  		<replaceName>TargetProfessions</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>targetprofessions_size</name>
  		<replaceName>TargetProfessions</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::int32 targetprofessions(int index) const;
  inline void set_targetprofessions(int index, ::google::protobuf::int32 value);
  inline void add_targetprofessions(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      targetprofessions() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_targetprofessions();

  // optional int32 ArcherParam1 = 88;
  inline bool has_archerparam1() const;
  inline void clear_archerparam1();
  static const int kArcherParam1FieldNumber = 88;
  /*FOR2LUA
  <Record>
  	<name>SkillBaseData</name>
  	<Function>
  		<name>archerparam1</name>
  		<replaceName>ArcherParam1</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_archerparam1</name>
  		<replaceName>ArcherParam1</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_archerparam1</name>
  		<replaceName>ArcherParam1</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::int32 archerparam1() const;
  inline void set_archerparam1(::google::protobuf::int32 value);

  // optional int32 ArcherParam2 = 89;
  inline bool has_archerparam2() const;
  inline void clear_archerparam2();
  static const int kArcherParam2FieldNumber = 89;
  /*FOR2LUA
  <Record>
  	<name>SkillBaseData</name>
  	<Function>
  		<name>archerparam2</name>
  		<replaceName>ArcherParam2</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_archerparam2</name>
  		<replaceName>ArcherParam2</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_archerparam2</name>
  		<replaceName>ArcherParam2</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::int32 archerparam2() const;
  inline void set_archerparam2(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:pb.SkillBaseData)
 private:
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_chainskillmark();
  inline void clear_has_chainskillmark();
  inline void set_has_maintype();
  inline void clear_has_maintype();
  inline void set_has_subtype();
  inline void clear_has_subtype();
  inline void set_has_normalattackcount();
  inline void clear_has_normalattackcount();
  inline void set_has_reftargettype();
  inline void clear_has_reftargettype();
  inline void set_has_spebuffid();
  inline void clear_has_spebuffid();
  inline void set_has_reftargetnum();
  inline void clear_has_reftargetnum();
  inline void set_has_isrealtarget();
  inline void clear_has_isrealtarget();
  inline void set_has_skillanim();
  inline void clear_has_skillanim();
  inline void set_has_isplayhitanim();
  inline void clear_has_isplayhitanim();
  inline void set_has_castrange();
  inline void clear_has_castrange();
  inline void set_has_needfacetowhencast();
  inline void clear_has_needfacetowhencast();
  inline void set_has_isrecoverfrompause();
  inline void clear_has_isrecoverfrompause();
  inline void set_has_isfacetargetduringcast();
  inline void clear_has_isfacetargetduringcast();
  inline void set_has_maxcastcountinonescene();
  inline void clear_has_maxcastcountinonescene();
  inline void set_has_maxcastcountinonebattle();
  inline void clear_has_maxcastcountinonebattle();
  inline void set_has_islasting();
  inline void clear_has_islasting();
  inline void set_has_coolingtime();
  inline void clear_has_coolingtime();
  inline void set_has_intervaltime();
  inline void clear_has_intervaltime();
  inline void set_has_normalattackchance();
  inline void clear_has_normalattackchance();
  inline void set_has_triggerbuffid();
  inline void clear_has_triggerbuffid();
  inline void set_has_triggerbufflayer();
  inline void clear_has_triggerbufflayer();
  inline void set_has_iconpath();
  inline void clear_has_iconpath();
  inline void set_has_frontdistance();
  inline void clear_has_frontdistance();
  inline void set_has_skilltunnel();
  inline void clear_has_skilltunnel();
  inline void set_has_skilllasteffect();
  inline void clear_has_skilllasteffect();
  inline void set_has_skillshowtime();
  inline void clear_has_skillshowtime();
  inline void set_has_reftargetincludeself();
  inline void clear_has_reftargetincludeself();
  inline void set_has_triggerskillchance();
  inline void clear_has_triggerskillchance();
  inline void set_has_partofrageskill();
  inline void clear_has_partofrageskill();
  inline void set_has_skillactionlasttime();
  inline void clear_has_skillactionlasttime();
  inline void set_has_musoutimeline();
  inline void clear_has_musoutimeline();
  inline void set_has_skillpriority();
  inline void clear_has_skillpriority();
  inline void set_has_rageskillspine();
  inline void clear_has_rageskillspine();
  inline void set_has_rageskilleffect();
  inline void clear_has_rageskilleffect();
  inline void set_has_rageskillaudio();
  inline void clear_has_rageskillaudio();
  inline void set_has_deathanim();
  inline void clear_has_deathanim();
  inline void set_has_skillspecialdata();
  inline void clear_has_skillspecialdata();
  inline void set_has_showrageskilldamage();
  inline void clear_has_showrageskilldamage();
  inline void set_has_ragebonusafterkill();
  inline void clear_has_ragebonusafterkill();
  inline void set_has_skillcasttype();
  inline void clear_has_skillcasttype();
  inline void set_has_refpriority();
  inline void clear_has_refpriority();
  inline void set_has_spebuffidback();
  inline void clear_has_spebuffidback();
  inline void set_has_autorageskill();
  inline void clear_has_autorageskill();
  inline void set_has_subragesmoothly();
  inline void clear_has_subragesmoothly();
  inline void set_has_subrageduration();
  inline void clear_has_subrageduration();
  inline void set_has_lasteffforwardself();
  inline void clear_has_lasteffforwardself();
  inline void set_has_localizeskillid();
  inline void clear_has_localizeskillid();
  inline void set_has_damagespecialtype();
  inline void clear_has_damagespecialtype();
  inline void set_has_issemiautorageskill();
  inline void clear_has_issemiautorageskill();
  inline void set_has_semiautoskilltimetolive();
  inline void clear_has_semiautoskilltimetolive();
  inline void set_has_semiautoskillinterval();
  inline void clear_has_semiautoskillinterval();
  inline void set_has_isblockpriority();
  inline void clear_has_isblockpriority();
  inline void set_has_ignoreinterrupteffect();
  inline void clear_has_ignoreinterrupteffect();
  inline void set_has_perfectinterruptduration();
  inline void clear_has_perfectinterruptduration();
  inline void set_has_skillendtime();
  inline void clear_has_skillendtime();
  inline void set_has_lockon();
  inline void clear_has_lockon();
  inline void set_has_isneedhighligh();
  inline void clear_has_isneedhighligh();
  inline void set_has_keepdyingduration();
  inline void clear_has_keepdyingduration();
  inline void set_has_interruptbossskill();
  inline void clear_has_interruptbossskill();
  inline void set_has_skipidleonend();
  inline void clear_has_skipidleonend();
  inline void set_has_rageskillinterruptable();
  inline void clear_has_rageskillinterruptable();
  inline void set_has_ignorenoskill();
  inline void clear_has_ignorenoskill();
  inline void set_has_reftargetsummontype();
  inline void clear_has_reftargetsummontype();
  inline void set_has_levelcoolingtimegrowth();
  inline void clear_has_levelcoolingtimegrowth();
  inline void set_has_archerparam1();
  inline void clear_has_archerparam1();
  inline void set_has_archerparam2();
  inline void clear_has_archerparam2();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[3];
  mutable int _cached_size_;
  ::std::string* name_;
  ::google::protobuf::int32 chainskillmark_;
  ::google::protobuf::int32 maintype_;
  ::google::protobuf::int32 subtype_;
  ::google::protobuf::int32 normalattackcount_;
  ::google::protobuf::int32 reftargettype_;
  ::google::protobuf::int32 spebuffid_;
  ::std::string* skillanim_;
  ::google::protobuf::int32 reftargetnum_;
  ::google::protobuf::int32 castrange_;
  bool isrealtarget_;
  bool isplayhitanim_;
  bool isrecoverfrompause_;
  bool isfacetargetduringcast_;
  ::google::protobuf::int32 needfacetowhencast_;
  ::google::protobuf::int32 maxcastcountinonescene_;
  ::google::protobuf::int32 maxcastcountinonebattle_;
  ::google::protobuf::int32 coolingtime_;
  ::google::protobuf::int32 intervaltime_;
  ::google::protobuf::int32 normalattackchance_;
  ::google::protobuf::int32 triggerbuffid_;
  ::std::string* iconpath_;
  ::google::protobuf::int32 triggerbufflayer_;
  ::google::protobuf::int32 frontdistance_;
  ::google::protobuf::RepeatedField< float > scenepos_;
  ::std::string* skilllasteffect_;
  ::google::protobuf::int32 skilltunnel_;
  ::google::protobuf::int32 skillshowtime_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > triggerskillarr_;
  bool islasting_;
  bool reftargetincludeself_;
  bool partofrageskill_;
  bool showrageskilldamage_;
  ::google::protobuf::int32 triggerskillchance_;
  ::std::string* musoutimeline_;
  ::google::protobuf::int32 skillactionlasttime_;
  ::google::protobuf::int32 skillpriority_;
  ::std::string* rageskillspine_;
  ::std::string* rageskilleffect_;
  ::std::string* rageskillaudio_;
  ::std::string* deathanim_;
  ::pb::SkillSpecialData* skillspecialdata_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > skillreplace_;
  ::pb::SkillCastType* skillcasttype_;
  ::google::protobuf::RepeatedPtrField< ::std::string> musoucameralookatinfo_;
  ::google::protobuf::int32 ragebonusafterkill_;
  ::google::protobuf::int32 spebuffidback_;
  ::pb::SkillTargetPriority* refpriority_;
  ::google::protobuf::int32 subrageduration_;
  bool autorageskill_;
  bool subragesmoothly_;
  bool lasteffforwardself_;
  bool issemiautorageskill_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > sceneposindex_;
  ::google::protobuf::int32 localizeskillid_;
  ::google::protobuf::int32 damagespecialtype_;
  ::google::protobuf::int32 semiautoskilltimetolive_;
  ::google::protobuf::int32 semiautoskillinterval_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > semiautoskillchain_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > skillenergylevel_;
  ::google::protobuf::int32 perfectinterruptduration_;
  bool isblockpriority_;
  bool ignoreinterrupteffect_;
  bool lockon_;
  bool isneedhighligh_;
  ::google::protobuf::int32 skillendtime_;
  ::google::protobuf::int32 keepdyingduration_;
  bool interruptbossskill_;
  bool skipidleonend_;
  bool rageskillinterruptable_;
  bool ignorenoskill_;
  ::google::protobuf::int32 reftargetsummontype_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > armyskillinfo_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > targetprofessions_;
  ::google::protobuf::int32 levelcoolingtimegrowth_;
  ::google::protobuf::int32 archerparam1_;
  ::google::protobuf::int32 archerparam2_;
  friend void  protobuf_AddDesc_module_2fSkillBaseData_2eproto();
  friend void protobuf_AssignDesc_module_2fSkillBaseData_2eproto();
  friend void protobuf_ShutdownFile_module_2fSkillBaseData_2eproto();

  void InitAsDefaultInstance();
  static SkillBaseData* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>SkillSpecialData</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>module/SkillBaseData.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class SkillSpecialData : public ::google::protobuf::Message {
 public:
  SkillSpecialData();
  virtual ~SkillSpecialData();

  SkillSpecialData(const SkillSpecialData& from);

  inline SkillSpecialData& operator=(const SkillSpecialData& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SkillSpecialData& default_instance();

  void Swap(SkillSpecialData* other);

  // implements Message ----------------------------------------------

  SkillSpecialData* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SkillSpecialData& from);
  void MergeFrom(const SkillSpecialData& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated int32 RageSkillCameraUp = 1;
  inline int rageskillcameraup_size() const;
  inline void clear_rageskillcameraup();
  static const int kRageSkillCameraUpFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>SkillSpecialData</name>
  	<Function>
  		<name>rageskillcameraup</name>
  		<replaceName>RageSkillCameraUp</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_rageskillcameraup</name>
  		<replaceName>RageSkillCameraUp</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_rageskillcameraup</name>
  		<replaceName>RageSkillCameraUp</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_rageskillcameraup</name>
  		<replaceName>RageSkillCameraUp</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>rageskillcameraup_size</name>
  		<replaceName>RageSkillCameraUp</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::int32 rageskillcameraup(int index) const;
  inline void set_rageskillcameraup(int index, ::google::protobuf::int32 value);
  inline void add_rageskillcameraup(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      rageskillcameraup() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_rageskillcameraup();

  // repeated int32 RageSkillCameraUpSpeedTime = 2;
  inline int rageskillcameraupspeedtime_size() const;
  inline void clear_rageskillcameraupspeedtime();
  static const int kRageSkillCameraUpSpeedTimeFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>SkillSpecialData</name>
  	<Function>
  		<name>rageskillcameraupspeedtime</name>
  		<replaceName>RageSkillCameraUpSpeedTime</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_rageskillcameraupspeedtime</name>
  		<replaceName>RageSkillCameraUpSpeedTime</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_rageskillcameraupspeedtime</name>
  		<replaceName>RageSkillCameraUpSpeedTime</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_rageskillcameraupspeedtime</name>
  		<replaceName>RageSkillCameraUpSpeedTime</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>rageskillcameraupspeedtime_size</name>
  		<replaceName>RageSkillCameraUpSpeedTime</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::int32 rageskillcameraupspeedtime(int index) const;
  inline void set_rageskillcameraupspeedtime(int index, ::google::protobuf::int32 value);
  inline void add_rageskillcameraupspeedtime(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      rageskillcameraupspeedtime() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_rageskillcameraupspeedtime();

  // repeated int32 RageSkillCameraDown = 3;
  inline int rageskillcameradown_size() const;
  inline void clear_rageskillcameradown();
  static const int kRageSkillCameraDownFieldNumber = 3;
  /*FOR2LUA
  <Record>
  	<name>SkillSpecialData</name>
  	<Function>
  		<name>rageskillcameradown</name>
  		<replaceName>RageSkillCameraDown</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_rageskillcameradown</name>
  		<replaceName>RageSkillCameraDown</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_rageskillcameradown</name>
  		<replaceName>RageSkillCameraDown</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_rageskillcameradown</name>
  		<replaceName>RageSkillCameraDown</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>rageskillcameradown_size</name>
  		<replaceName>RageSkillCameraDown</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::int32 rageskillcameradown(int index) const;
  inline void set_rageskillcameradown(int index, ::google::protobuf::int32 value);
  inline void add_rageskillcameradown(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      rageskillcameradown() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_rageskillcameradown();

  // repeated int32 RageSkillCameraDownSpeedTime = 4;
  inline int rageskillcameradownspeedtime_size() const;
  inline void clear_rageskillcameradownspeedtime();
  static const int kRageSkillCameraDownSpeedTimeFieldNumber = 4;
  /*FOR2LUA
  <Record>
  	<name>SkillSpecialData</name>
  	<Function>
  		<name>rageskillcameradownspeedtime</name>
  		<replaceName>RageSkillCameraDownSpeedTime</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_rageskillcameradownspeedtime</name>
  		<replaceName>RageSkillCameraDownSpeedTime</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_rageskillcameradownspeedtime</name>
  		<replaceName>RageSkillCameraDownSpeedTime</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_rageskillcameradownspeedtime</name>
  		<replaceName>RageSkillCameraDownSpeedTime</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>rageskillcameradownspeedtime_size</name>
  		<replaceName>RageSkillCameraDownSpeedTime</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::int32 rageskillcameradownspeedtime(int index) const;
  inline void set_rageskillcameradownspeedtime(int index, ::google::protobuf::int32 value);
  inline void add_rageskillcameradownspeedtime(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      rageskillcameradownspeedtime() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_rageskillcameradownspeedtime();

  // repeated int32 RageSkillCameraRecoverSpeedTime = 5;
  inline int rageskillcamerarecoverspeedtime_size() const;
  inline void clear_rageskillcamerarecoverspeedtime();
  static const int kRageSkillCameraRecoverSpeedTimeFieldNumber = 5;
  /*FOR2LUA
  <Record>
  	<name>SkillSpecialData</name>
  	<Function>
  		<name>rageskillcamerarecoverspeedtime</name>
  		<replaceName>RageSkillCameraRecoverSpeedTime</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_rageskillcamerarecoverspeedtime</name>
  		<replaceName>RageSkillCameraRecoverSpeedTime</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_rageskillcamerarecoverspeedtime</name>
  		<replaceName>RageSkillCameraRecoverSpeedTime</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_rageskillcamerarecoverspeedtime</name>
  		<replaceName>RageSkillCameraRecoverSpeedTime</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>rageskillcamerarecoverspeedtime_size</name>
  		<replaceName>RageSkillCameraRecoverSpeedTime</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::int32 rageskillcamerarecoverspeedtime(int index) const;
  inline void set_rageskillcamerarecoverspeedtime(int index, ::google::protobuf::int32 value);
  inline void add_rageskillcamerarecoverspeedtime(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      rageskillcamerarecoverspeedtime() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_rageskillcamerarecoverspeedtime();

  // optional string RageSkillSpine = 6;
  inline bool has_rageskillspine() const;
  inline void clear_rageskillspine();
  static const int kRageSkillSpineFieldNumber = 6;
  /*FOR2LUA
  <Record>
  	<name>SkillSpecialData</name>
  	<Function>
  		<name>rageskillspine</name>
  		<replaceName>RageSkillSpine</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_rageskillspine</name>
  		<replaceName>RageSkillSpine</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_rageskillspine</name>
  		<replaceName>RageSkillSpine</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::std::string& rageskillspine() const;
  inline void set_rageskillspine(const ::std::string& value);
  inline void set_rageskillspine(const char* value);
  inline void set_rageskillspine(const char* value, size_t size);
  inline ::std::string* mutable_rageskillspine();
  inline ::std::string* release_rageskillspine();
  inline void set_allocated_rageskillspine(::std::string* rageskillspine);

  // optional string RageSkillEffect = 7;
  inline bool has_rageskilleffect() const;
  inline void clear_rageskilleffect();
  static const int kRageSkillEffectFieldNumber = 7;
  /*FOR2LUA
  <Record>
  	<name>SkillSpecialData</name>
  	<Function>
  		<name>rageskilleffect</name>
  		<replaceName>RageSkillEffect</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_rageskilleffect</name>
  		<replaceName>RageSkillEffect</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_rageskilleffect</name>
  		<replaceName>RageSkillEffect</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::std::string& rageskilleffect() const;
  inline void set_rageskilleffect(const ::std::string& value);
  inline void set_rageskilleffect(const char* value);
  inline void set_rageskilleffect(const char* value, size_t size);
  inline ::std::string* mutable_rageskilleffect();
  inline ::std::string* release_rageskilleffect();
  inline void set_allocated_rageskilleffect(::std::string* rageskilleffect);

  // optional string RageSkillAudio = 8;
  inline bool has_rageskillaudio() const;
  inline void clear_rageskillaudio();
  static const int kRageSkillAudioFieldNumber = 8;
  /*FOR2LUA
  <Record>
  	<name>SkillSpecialData</name>
  	<Function>
  		<name>rageskillaudio</name>
  		<replaceName>RageSkillAudio</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_rageskillaudio</name>
  		<replaceName>RageSkillAudio</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_rageskillaudio</name>
  		<replaceName>RageSkillAudio</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::std::string& rageskillaudio() const;
  inline void set_rageskillaudio(const ::std::string& value);
  inline void set_rageskillaudio(const char* value);
  inline void set_rageskillaudio(const char* value, size_t size);
  inline ::std::string* mutable_rageskillaudio();
  inline ::std::string* release_rageskillaudio();
  inline void set_allocated_rageskillaudio(::std::string* rageskillaudio);

  // repeated float RageSkillSpineAdjust = 9;
  inline int rageskillspineadjust_size() const;
  inline void clear_rageskillspineadjust();
  static const int kRageSkillSpineAdjustFieldNumber = 9;
  /*FOR2LUA
  <Record>
  	<name>SkillSpecialData</name>
  	<Function>
  		<name>rageskillspineadjust</name>
  		<replaceName>RageSkillSpineAdjust</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_rageskillspineadjust</name>
  		<replaceName>RageSkillSpineAdjust</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_rageskillspineadjust</name>
  		<replaceName>RageSkillSpineAdjust</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_rageskillspineadjust</name>
  		<replaceName>RageSkillSpineAdjust</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>rageskillspineadjust_size</name>
  		<replaceName>RageSkillSpineAdjust</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline float rageskillspineadjust(int index) const;
  inline void set_rageskillspineadjust(int index, float value);
  inline void add_rageskillspineadjust(float value);
  inline const ::google::protobuf::RepeatedField< float >&
      rageskillspineadjust() const;
  inline ::google::protobuf::RepeatedField< float >*
      mutable_rageskillspineadjust();

  // optional bool ShowSkillLabel = 10;
  inline bool has_showskilllabel() const;
  inline void clear_showskilllabel();
  static const int kShowSkillLabelFieldNumber = 10;
  /*FOR2LUA
  <Record>
  	<name>SkillSpecialData</name>
  	<Function>
  		<name>showskilllabel</name>
  		<replaceName>ShowSkillLabel</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_showskilllabel</name>
  		<replaceName>ShowSkillLabel</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_showskilllabel</name>
  		<replaceName>ShowSkillLabel</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline bool showskilllabel() const;
  inline void set_showskilllabel(bool value);

  // optional string SkillLabelSlot = 11;
  inline bool has_skilllabelslot() const;
  inline void clear_skilllabelslot();
  static const int kSkillLabelSlotFieldNumber = 11;
  /*FOR2LUA
  <Record>
  	<name>SkillSpecialData</name>
  	<Function>
  		<name>skilllabelslot</name>
  		<replaceName>SkillLabelSlot</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_skilllabelslot</name>
  		<replaceName>SkillLabelSlot</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_skilllabelslot</name>
  		<replaceName>SkillLabelSlot</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::std::string& skilllabelslot() const;
  inline void set_skilllabelslot(const ::std::string& value);
  inline void set_skilllabelslot(const char* value);
  inline void set_skilllabelslot(const char* value, size_t size);
  inline ::std::string* mutable_skilllabelslot();
  inline ::std::string* release_skilllabelslot();
  inline void set_allocated_skilllabelslot(::std::string* skilllabelslot);

  // optional int32 SkillLabelId = 12;
  inline bool has_skilllabelid() const;
  inline void clear_skilllabelid();
  static const int kSkillLabelIdFieldNumber = 12;
  /*FOR2LUA
  <Record>
  	<name>SkillSpecialData</name>
  	<Function>
  		<name>skilllabelid</name>
  		<replaceName>SkillLabelId</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_skilllabelid</name>
  		<replaceName>SkillLabelId</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_skilllabelid</name>
  		<replaceName>SkillLabelId</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::int32 skilllabelid() const;
  inline void set_skilllabelid(::google::protobuf::int32 value);

  // optional string SkillLabelAudio = 13;
  inline bool has_skilllabelaudio() const;
  inline void clear_skilllabelaudio();
  static const int kSkillLabelAudioFieldNumber = 13;
  /*FOR2LUA
  <Record>
  	<name>SkillSpecialData</name>
  	<Function>
  		<name>skilllabelaudio</name>
  		<replaceName>SkillLabelAudio</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_skilllabelaudio</name>
  		<replaceName>SkillLabelAudio</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_skilllabelaudio</name>
  		<replaceName>SkillLabelAudio</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::std::string& skilllabelaudio() const;
  inline void set_skilllabelaudio(const ::std::string& value);
  inline void set_skilllabelaudio(const char* value);
  inline void set_skilllabelaudio(const char* value, size_t size);
  inline ::std::string* mutable_skilllabelaudio();
  inline ::std::string* release_skilllabelaudio();
  inline void set_allocated_skilllabelaudio(::std::string* skilllabelaudio);

  // repeated int32 NonRageSkillCameraUpParam = 14;
  inline int nonrageskillcameraupparam_size() const;
  inline void clear_nonrageskillcameraupparam();
  static const int kNonRageSkillCameraUpParamFieldNumber = 14;
  /*FOR2LUA
  <Record>
  	<name>SkillSpecialData</name>
  	<Function>
  		<name>nonrageskillcameraupparam</name>
  		<replaceName>NonRageSkillCameraUpParam</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_nonrageskillcameraupparam</name>
  		<replaceName>NonRageSkillCameraUpParam</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_nonrageskillcameraupparam</name>
  		<replaceName>NonRageSkillCameraUpParam</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_nonrageskillcameraupparam</name>
  		<replaceName>NonRageSkillCameraUpParam</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>nonrageskillcameraupparam_size</name>
  		<replaceName>NonRageSkillCameraUpParam</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::int32 nonrageskillcameraupparam(int index) const;
  inline void set_nonrageskillcameraupparam(int index, ::google::protobuf::int32 value);
  inline void add_nonrageskillcameraupparam(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      nonrageskillcameraupparam() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_nonrageskillcameraupparam();

  // repeated int32 NonRageSkillCameraRecoverParam = 15;
  inline int nonrageskillcamerarecoverparam_size() const;
  inline void clear_nonrageskillcamerarecoverparam();
  static const int kNonRageSkillCameraRecoverParamFieldNumber = 15;
  /*FOR2LUA
  <Record>
  	<name>SkillSpecialData</name>
  	<Function>
  		<name>nonrageskillcamerarecoverparam</name>
  		<replaceName>NonRageSkillCameraRecoverParam</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_nonrageskillcamerarecoverparam</name>
  		<replaceName>NonRageSkillCameraRecoverParam</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_nonrageskillcamerarecoverparam</name>
  		<replaceName>NonRageSkillCameraRecoverParam</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_nonrageskillcamerarecoverparam</name>
  		<replaceName>NonRageSkillCameraRecoverParam</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>nonrageskillcamerarecoverparam_size</name>
  		<replaceName>NonRageSkillCameraRecoverParam</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::int32 nonrageskillcamerarecoverparam(int index) const;
  inline void set_nonrageskillcamerarecoverparam(int index, ::google::protobuf::int32 value);
  inline void add_nonrageskillcamerarecoverparam(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      nonrageskillcamerarecoverparam() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_nonrageskillcamerarecoverparam();

  // optional bool EnemyRageHeaderShow = 16;
  inline bool has_enemyrageheadershow() const;
  inline void clear_enemyrageheadershow();
  static const int kEnemyRageHeaderShowFieldNumber = 16;
  /*FOR2LUA
  <Record>
  	<name>SkillSpecialData</name>
  	<Function>
  		<name>enemyrageheadershow</name>
  		<replaceName>EnemyRageHeaderShow</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_enemyrageheadershow</name>
  		<replaceName>EnemyRageHeaderShow</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_enemyrageheadershow</name>
  		<replaceName>EnemyRageHeaderShow</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline bool enemyrageheadershow() const;
  inline void set_enemyrageheadershow(bool value);

  // repeated float EnemyRageSkillSpineAdjust = 17;
  inline int enemyrageskillspineadjust_size() const;
  inline void clear_enemyrageskillspineadjust();
  static const int kEnemyRageSkillSpineAdjustFieldNumber = 17;
  /*FOR2LUA
  <Record>
  	<name>SkillSpecialData</name>
  	<Function>
  		<name>enemyrageskillspineadjust</name>
  		<replaceName>EnemyRageSkillSpineAdjust</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_enemyrageskillspineadjust</name>
  		<replaceName>EnemyRageSkillSpineAdjust</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_enemyrageskillspineadjust</name>
  		<replaceName>EnemyRageSkillSpineAdjust</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_enemyrageskillspineadjust</name>
  		<replaceName>EnemyRageSkillSpineAdjust</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>enemyrageskillspineadjust_size</name>
  		<replaceName>EnemyRageSkillSpineAdjust</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline float enemyrageskillspineadjust(int index) const;
  inline void set_enemyrageskillspineadjust(int index, float value);
  inline void add_enemyrageskillspineadjust(float value);
  inline const ::google::protobuf::RepeatedField< float >&
      enemyrageskillspineadjust() const;
  inline ::google::protobuf::RepeatedField< float >*
      mutable_enemyrageskillspineadjust();

  // optional bool HideUnparallelIcon = 18;
  inline bool has_hideunparallelicon() const;
  inline void clear_hideunparallelicon();
  static const int kHideUnparallelIconFieldNumber = 18;
  /*FOR2LUA
  <Record>
  	<name>SkillSpecialData</name>
  	<Function>
  		<name>hideunparallelicon</name>
  		<replaceName>HideUnparallelIcon</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_hideunparallelicon</name>
  		<replaceName>HideUnparallelIcon</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_hideunparallelicon</name>
  		<replaceName>HideUnparallelIcon</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline bool hideunparallelicon() const;
  inline void set_hideunparallelicon(bool value);

  // optional string SuperAngerIconPath1 = 19;
  inline bool has_superangericonpath1() const;
  inline void clear_superangericonpath1();
  static const int kSuperAngerIconPath1FieldNumber = 19;
  /*FOR2LUA
  <Record>
  	<name>SkillSpecialData</name>
  	<Function>
  		<name>superangericonpath1</name>
  		<replaceName>SuperAngerIconPath1</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_superangericonpath1</name>
  		<replaceName>SuperAngerIconPath1</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_superangericonpath1</name>
  		<replaceName>SuperAngerIconPath1</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::std::string& superangericonpath1() const;
  inline void set_superangericonpath1(const ::std::string& value);
  inline void set_superangericonpath1(const char* value);
  inline void set_superangericonpath1(const char* value, size_t size);
  inline ::std::string* mutable_superangericonpath1();
  inline ::std::string* release_superangericonpath1();
  inline void set_allocated_superangericonpath1(::std::string* superangericonpath1);

  // optional string SuperAngerIconPath2 = 20;
  inline bool has_superangericonpath2() const;
  inline void clear_superangericonpath2();
  static const int kSuperAngerIconPath2FieldNumber = 20;
  /*FOR2LUA
  <Record>
  	<name>SkillSpecialData</name>
  	<Function>
  		<name>superangericonpath2</name>
  		<replaceName>SuperAngerIconPath2</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_superangericonpath2</name>
  		<replaceName>SuperAngerIconPath2</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_superangericonpath2</name>
  		<replaceName>SuperAngerIconPath2</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::std::string& superangericonpath2() const;
  inline void set_superangericonpath2(const ::std::string& value);
  inline void set_superangericonpath2(const char* value);
  inline void set_superangericonpath2(const char* value, size_t size);
  inline ::std::string* mutable_superangericonpath2();
  inline ::std::string* release_superangericonpath2();
  inline void set_allocated_superangericonpath2(::std::string* superangericonpath2);

  // optional string SuperAngerIconPath3 = 21;
  inline bool has_superangericonpath3() const;
  inline void clear_superangericonpath3();
  static const int kSuperAngerIconPath3FieldNumber = 21;
  /*FOR2LUA
  <Record>
  	<name>SkillSpecialData</name>
  	<Function>
  		<name>superangericonpath3</name>
  		<replaceName>SuperAngerIconPath3</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_superangericonpath3</name>
  		<replaceName>SuperAngerIconPath3</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_superangericonpath3</name>
  		<replaceName>SuperAngerIconPath3</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::std::string& superangericonpath3() const;
  inline void set_superangericonpath3(const ::std::string& value);
  inline void set_superangericonpath3(const char* value);
  inline void set_superangericonpath3(const char* value, size_t size);
  inline ::std::string* mutable_superangericonpath3();
  inline ::std::string* release_superangericonpath3();
  inline void set_allocated_superangericonpath3(::std::string* superangericonpath3);

  // optional string SuperAngerSkillNamePath = 22;
  inline bool has_superangerskillnamepath() const;
  inline void clear_superangerskillnamepath();
  static const int kSuperAngerSkillNamePathFieldNumber = 22;
  /*FOR2LUA
  <Record>
  	<name>SkillSpecialData</name>
  	<Function>
  		<name>superangerskillnamepath</name>
  		<replaceName>SuperAngerSkillNamePath</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_superangerskillnamepath</name>
  		<replaceName>SuperAngerSkillNamePath</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_superangerskillnamepath</name>
  		<replaceName>SuperAngerSkillNamePath</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::std::string& superangerskillnamepath() const;
  inline void set_superangerskillnamepath(const ::std::string& value);
  inline void set_superangerskillnamepath(const char* value);
  inline void set_superangerskillnamepath(const char* value, size_t size);
  inline ::std::string* mutable_superangerskillnamepath();
  inline ::std::string* release_superangerskillnamepath();
  inline void set_allocated_superangerskillnamepath(::std::string* superangerskillnamepath);

  // optional string SuperAngerAudio = 23;
  inline bool has_superangeraudio() const;
  inline void clear_superangeraudio();
  static const int kSuperAngerAudioFieldNumber = 23;
  /*FOR2LUA
  <Record>
  	<name>SkillSpecialData</name>
  	<Function>
  		<name>superangeraudio</name>
  		<replaceName>SuperAngerAudio</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_superangeraudio</name>
  		<replaceName>SuperAngerAudio</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_superangeraudio</name>
  		<replaceName>SuperAngerAudio</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::std::string& superangeraudio() const;
  inline void set_superangeraudio(const ::std::string& value);
  inline void set_superangeraudio(const char* value);
  inline void set_superangeraudio(const char* value, size_t size);
  inline ::std::string* mutable_superangeraudio();
  inline ::std::string* release_superangeraudio();
  inline void set_allocated_superangeraudio(::std::string* superangeraudio);

  // optional int32 SuperAngerHeroArr = 24;
  inline bool has_superangerheroarr() const;
  inline void clear_superangerheroarr();
  static const int kSuperAngerHeroArrFieldNumber = 24;
  /*FOR2LUA
  <Record>
  	<name>SkillSpecialData</name>
  	<Function>
  		<name>superangerheroarr</name>
  		<replaceName>SuperAngerHeroArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_superangerheroarr</name>
  		<replaceName>SuperAngerHeroArr</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_superangerheroarr</name>
  		<replaceName>SuperAngerHeroArr</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::int32 superangerheroarr() const;
  inline void set_superangerheroarr(::google::protobuf::int32 value);

  // optional int32 GroundMeshDuration = 25;
  inline bool has_groundmeshduration() const;
  inline void clear_groundmeshduration();
  static const int kGroundMeshDurationFieldNumber = 25;
  /*FOR2LUA
  <Record>
  	<name>SkillSpecialData</name>
  	<Function>
  		<name>groundmeshduration</name>
  		<replaceName>GroundMeshDuration</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_groundmeshduration</name>
  		<replaceName>GroundMeshDuration</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_groundmeshduration</name>
  		<replaceName>GroundMeshDuration</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::int32 groundmeshduration() const;
  inline void set_groundmeshduration(::google::protobuf::int32 value);

  // optional bool NeedShowGroundMesh = 26;
  inline bool has_needshowgroundmesh() const;
  inline void clear_needshowgroundmesh();
  static const int kNeedShowGroundMeshFieldNumber = 26;
  /*FOR2LUA
  <Record>
  	<name>SkillSpecialData</name>
  	<Function>
  		<name>needshowgroundmesh</name>
  		<replaceName>NeedShowGroundMesh</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_needshowgroundmesh</name>
  		<replaceName>NeedShowGroundMesh</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_needshowgroundmesh</name>
  		<replaceName>NeedShowGroundMesh</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline bool needshowgroundmesh() const;
  inline void set_needshowgroundmesh(bool value);

  // optional int32 SlowStartTime = 28;
  inline bool has_slowstarttime() const;
  inline void clear_slowstarttime();
  static const int kSlowStartTimeFieldNumber = 28;
  /*FOR2LUA
  <Record>
  	<name>SkillSpecialData</name>
  	<Function>
  		<name>slowstarttime</name>
  		<replaceName>SlowStartTime</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_slowstarttime</name>
  		<replaceName>SlowStartTime</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_slowstarttime</name>
  		<replaceName>SlowStartTime</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::int32 slowstarttime() const;
  inline void set_slowstarttime(::google::protobuf::int32 value);

  // optional int32 SlowDuration = 29;
  inline bool has_slowduration() const;
  inline void clear_slowduration();
  static const int kSlowDurationFieldNumber = 29;
  /*FOR2LUA
  <Record>
  	<name>SkillSpecialData</name>
  	<Function>
  		<name>slowduration</name>
  		<replaceName>SlowDuration</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_slowduration</name>
  		<replaceName>SlowDuration</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_slowduration</name>
  		<replaceName>SlowDuration</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::int32 slowduration() const;
  inline void set_slowduration(::google::protobuf::int32 value);

  // optional int32 SlowBuffId = 30;
  inline bool has_slowbuffid() const;
  inline void clear_slowbuffid();
  static const int kSlowBuffIdFieldNumber = 30;
  /*FOR2LUA
  <Record>
  	<name>SkillSpecialData</name>
  	<Function>
  		<name>slowbuffid</name>
  		<replaceName>SlowBuffId</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_slowbuffid</name>
  		<replaceName>SlowBuffId</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_slowbuffid</name>
  		<replaceName>SlowBuffId</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::int32 slowbuffid() const;
  inline void set_slowbuffid(::google::protobuf::int32 value);

  // optional string GroundMeshAssetPath = 31;
  inline bool has_groundmeshassetpath() const;
  inline void clear_groundmeshassetpath();
  static const int kGroundMeshAssetPathFieldNumber = 31;
  /*FOR2LUA
  <Record>
  	<name>SkillSpecialData</name>
  	<Function>
  		<name>groundmeshassetpath</name>
  		<replaceName>GroundMeshAssetPath</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_groundmeshassetpath</name>
  		<replaceName>GroundMeshAssetPath</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_groundmeshassetpath</name>
  		<replaceName>GroundMeshAssetPath</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::std::string& groundmeshassetpath() const;
  inline void set_groundmeshassetpath(const ::std::string& value);
  inline void set_groundmeshassetpath(const char* value);
  inline void set_groundmeshassetpath(const char* value, size_t size);
  inline ::std::string* mutable_groundmeshassetpath();
  inline ::std::string* release_groundmeshassetpath();
  inline void set_allocated_groundmeshassetpath(::std::string* groundmeshassetpath);

  // optional int32 SlowEndTime = 32;
  inline bool has_slowendtime() const;
  inline void clear_slowendtime();
  static const int kSlowEndTimeFieldNumber = 32;
  /*FOR2LUA
  <Record>
  	<name>SkillSpecialData</name>
  	<Function>
  		<name>slowendtime</name>
  		<replaceName>SlowEndTime</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_slowendtime</name>
  		<replaceName>SlowEndTime</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_slowendtime</name>
  		<replaceName>SlowEndTime</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::int32 slowendtime() const;
  inline void set_slowendtime(::google::protobuf::int32 value);

  // repeated string GroundAudioEvents = 33;
  inline int groundaudioevents_size() const;
  inline void clear_groundaudioevents();
  static const int kGroundAudioEventsFieldNumber = 33;
  /*FOR2LUA
  <Record>
  	<name>SkillSpecialData</name>
  	<Function>
  		<name>groundaudioevents</name>
  		<replaceName>GroundAudioEvents</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_groundaudioevents</name>
  		<replaceName>GroundAudioEvents</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_groundaudioevents</name>
  		<replaceName>GroundAudioEvents</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_groundaudioevents</name>
  		<replaceName>GroundAudioEvents</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>groundaudioevents_size</name>
  		<replaceName>GroundAudioEvents</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::std::string& groundaudioevents(int index) const;
  inline ::std::string* mutable_groundaudioevents(int index);
  inline void set_groundaudioevents(int index, const ::std::string& value);
  inline void set_groundaudioevents(int index, const char* value);
  inline void set_groundaudioevents(int index, const char* value, size_t size);
  inline ::std::string* add_groundaudioevents();
  inline void add_groundaudioevents(const ::std::string& value);
  inline void add_groundaudioevents(const char* value);
  inline void add_groundaudioevents(const char* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& groundaudioevents() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_groundaudioevents();

  // optional string EffectOnDisappear = 34;
  inline bool has_effectondisappear() const;
  inline void clear_effectondisappear();
  static const int kEffectOnDisappearFieldNumber = 34;
  /*FOR2LUA
  <Record>
  	<name>SkillSpecialData</name>
  	<Function>
  		<name>effectondisappear</name>
  		<replaceName>EffectOnDisappear</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_effectondisappear</name>
  		<replaceName>EffectOnDisappear</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_effectondisappear</name>
  		<replaceName>EffectOnDisappear</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::std::string& effectondisappear() const;
  inline void set_effectondisappear(const ::std::string& value);
  inline void set_effectondisappear(const char* value);
  inline void set_effectondisappear(const char* value, size_t size);
  inline ::std::string* mutable_effectondisappear();
  inline ::std::string* release_effectondisappear();
  inline void set_allocated_effectondisappear(::std::string* effectondisappear);

  // optional bool ActiveTextShift = 35;
  inline bool has_activetextshift() const;
  inline void clear_activetextshift();
  static const int kActiveTextShiftFieldNumber = 35;
  /*FOR2LUA
  <Record>
  	<name>SkillSpecialData</name>
  	<Function>
  		<name>activetextshift</name>
  		<replaceName>ActiveTextShift</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_activetextshift</name>
  		<replaceName>ActiveTextShift</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_activetextshift</name>
  		<replaceName>ActiveTextShift</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline bool activetextshift() const;
  inline void set_activetextshift(bool value);

  // repeated int32 TextShiftSkillArr = 36;
  inline int textshiftskillarr_size() const;
  inline void clear_textshiftskillarr();
  static const int kTextShiftSkillArrFieldNumber = 36;
  /*FOR2LUA
  <Record>
  	<name>SkillSpecialData</name>
  	<Function>
  		<name>textshiftskillarr</name>
  		<replaceName>TextShiftSkillArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_textshiftskillarr</name>
  		<replaceName>TextShiftSkillArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_textshiftskillarr</name>
  		<replaceName>TextShiftSkillArr</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_textshiftskillarr</name>
  		<replaceName>TextShiftSkillArr</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>textshiftskillarr_size</name>
  		<replaceName>TextShiftSkillArr</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::int32 textshiftskillarr(int index) const;
  inline void set_textshiftskillarr(int index, ::google::protobuf::int32 value);
  inline void add_textshiftskillarr(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      textshiftskillarr() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_textshiftskillarr();

  // optional bool ActiveHideWhenBorn = 37;
  inline bool has_activehidewhenborn() const;
  inline void clear_activehidewhenborn();
  static const int kActiveHideWhenBornFieldNumber = 37;
  /*FOR2LUA
  <Record>
  	<name>SkillSpecialData</name>
  	<Function>
  		<name>activehidewhenborn</name>
  		<replaceName>ActiveHideWhenBorn</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_activehidewhenborn</name>
  		<replaceName>ActiveHideWhenBorn</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_activehidewhenborn</name>
  		<replaceName>ActiveHideWhenBorn</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline bool activehidewhenborn() const;
  inline void set_activehidewhenborn(bool value);

  // optional string AwakenDataPath1 = 38;
  inline bool has_awakendatapath1() const;
  inline void clear_awakendatapath1();
  static const int kAwakenDataPath1FieldNumber = 38;
  /*FOR2LUA
  <Record>
  	<name>SkillSpecialData</name>
  	<Function>
  		<name>awakendatapath1</name>
  		<replaceName>AwakenDataPath1</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_awakendatapath1</name>
  		<replaceName>AwakenDataPath1</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_awakendatapath1</name>
  		<replaceName>AwakenDataPath1</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::std::string& awakendatapath1() const;
  inline void set_awakendatapath1(const ::std::string& value);
  inline void set_awakendatapath1(const char* value);
  inline void set_awakendatapath1(const char* value, size_t size);
  inline ::std::string* mutable_awakendatapath1();
  inline ::std::string* release_awakendatapath1();
  inline void set_allocated_awakendatapath1(::std::string* awakendatapath1);

  // optional string BJRageSkillSpine = 39;
  inline bool has_bjrageskillspine() const;
  inline void clear_bjrageskillspine();
  static const int kBJRageSkillSpineFieldNumber = 39;
  /*FOR2LUA
  <Record>
  	<name>SkillSpecialData</name>
  	<Function>
  		<name>bjrageskillspine</name>
  		<replaceName>BJRageSkillSpine</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_bjrageskillspine</name>
  		<replaceName>BJRageSkillSpine</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_bjrageskillspine</name>
  		<replaceName>BJRageSkillSpine</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::std::string& bjrageskillspine() const;
  inline void set_bjrageskillspine(const ::std::string& value);
  inline void set_bjrageskillspine(const char* value);
  inline void set_bjrageskillspine(const char* value, size_t size);
  inline ::std::string* mutable_bjrageskillspine();
  inline ::std::string* release_bjrageskillspine();
  inline void set_allocated_bjrageskillspine(::std::string* bjrageskillspine);

  // repeated float BJRageSkillSpineAdjust = 40;
  inline int bjrageskillspineadjust_size() const;
  inline void clear_bjrageskillspineadjust();
  static const int kBJRageSkillSpineAdjustFieldNumber = 40;
  /*FOR2LUA
  <Record>
  	<name>SkillSpecialData</name>
  	<Function>
  		<name>bjrageskillspineadjust</name>
  		<replaceName>BJRageSkillSpineAdjust</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_bjrageskillspineadjust</name>
  		<replaceName>BJRageSkillSpineAdjust</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_bjrageskillspineadjust</name>
  		<replaceName>BJRageSkillSpineAdjust</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_bjrageskillspineadjust</name>
  		<replaceName>BJRageSkillSpineAdjust</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>bjrageskillspineadjust_size</name>
  		<replaceName>BJRageSkillSpineAdjust</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline float bjrageskillspineadjust(int index) const;
  inline void set_bjrageskillspineadjust(int index, float value);
  inline void add_bjrageskillspineadjust(float value);
  inline const ::google::protobuf::RepeatedField< float >&
      bjrageskillspineadjust() const;
  inline ::google::protobuf::RepeatedField< float >*
      mutable_bjrageskillspineadjust();

  // repeated float BJEnemyRageSkillSpineAdjust = 41;
  inline int bjenemyrageskillspineadjust_size() const;
  inline void clear_bjenemyrageskillspineadjust();
  static const int kBJEnemyRageSkillSpineAdjustFieldNumber = 41;
  /*FOR2LUA
  <Record>
  	<name>SkillSpecialData</name>
  	<Function>
  		<name>bjenemyrageskillspineadjust</name>
  		<replaceName>BJEnemyRageSkillSpineAdjust</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_bjenemyrageskillspineadjust</name>
  		<replaceName>BJEnemyRageSkillSpineAdjust</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_bjenemyrageskillspineadjust</name>
  		<replaceName>BJEnemyRageSkillSpineAdjust</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_bjenemyrageskillspineadjust</name>
  		<replaceName>BJEnemyRageSkillSpineAdjust</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>bjenemyrageskillspineadjust_size</name>
  		<replaceName>BJEnemyRageSkillSpineAdjust</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline float bjenemyrageskillspineadjust(int index) const;
  inline void set_bjenemyrageskillspineadjust(int index, float value);
  inline void add_bjenemyrageskillspineadjust(float value);
  inline const ::google::protobuf::RepeatedField< float >&
      bjenemyrageskillspineadjust() const;
  inline ::google::protobuf::RepeatedField< float >*
      mutable_bjenemyrageskillspineadjust();

  // @@protoc_insertion_point(class_scope:pb.SkillSpecialData)
 private:
  inline void set_has_rageskillspine();
  inline void clear_has_rageskillspine();
  inline void set_has_rageskilleffect();
  inline void clear_has_rageskilleffect();
  inline void set_has_rageskillaudio();
  inline void clear_has_rageskillaudio();
  inline void set_has_showskilllabel();
  inline void clear_has_showskilllabel();
  inline void set_has_skilllabelslot();
  inline void clear_has_skilllabelslot();
  inline void set_has_skilllabelid();
  inline void clear_has_skilllabelid();
  inline void set_has_skilllabelaudio();
  inline void clear_has_skilllabelaudio();
  inline void set_has_enemyrageheadershow();
  inline void clear_has_enemyrageheadershow();
  inline void set_has_hideunparallelicon();
  inline void clear_has_hideunparallelicon();
  inline void set_has_superangericonpath1();
  inline void clear_has_superangericonpath1();
  inline void set_has_superangericonpath2();
  inline void clear_has_superangericonpath2();
  inline void set_has_superangericonpath3();
  inline void clear_has_superangericonpath3();
  inline void set_has_superangerskillnamepath();
  inline void clear_has_superangerskillnamepath();
  inline void set_has_superangeraudio();
  inline void clear_has_superangeraudio();
  inline void set_has_superangerheroarr();
  inline void clear_has_superangerheroarr();
  inline void set_has_groundmeshduration();
  inline void clear_has_groundmeshduration();
  inline void set_has_needshowgroundmesh();
  inline void clear_has_needshowgroundmesh();
  inline void set_has_slowstarttime();
  inline void clear_has_slowstarttime();
  inline void set_has_slowduration();
  inline void clear_has_slowduration();
  inline void set_has_slowbuffid();
  inline void clear_has_slowbuffid();
  inline void set_has_groundmeshassetpath();
  inline void clear_has_groundmeshassetpath();
  inline void set_has_slowendtime();
  inline void clear_has_slowendtime();
  inline void set_has_effectondisappear();
  inline void clear_has_effectondisappear();
  inline void set_has_activetextshift();
  inline void clear_has_activetextshift();
  inline void set_has_activehidewhenborn();
  inline void clear_has_activehidewhenborn();
  inline void set_has_awakendatapath1();
  inline void clear_has_awakendatapath1();
  inline void set_has_bjrageskillspine();
  inline void clear_has_bjrageskillspine();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[2];
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > rageskillcameraup_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > rageskillcameraupspeedtime_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > rageskillcameradown_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > rageskillcameradownspeedtime_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > rageskillcamerarecoverspeedtime_;
  ::std::string* rageskillspine_;
  ::std::string* rageskilleffect_;
  ::std::string* rageskillaudio_;
  ::google::protobuf::RepeatedField< float > rageskillspineadjust_;
  ::std::string* skilllabelslot_;
  ::std::string* skilllabelaudio_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > nonrageskillcameraupparam_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > nonrageskillcamerarecoverparam_;
  ::google::protobuf::int32 skilllabelid_;
  bool showskilllabel_;
  bool enemyrageheadershow_;
  bool hideunparallelicon_;
  bool needshowgroundmesh_;
  ::google::protobuf::RepeatedField< float > enemyrageskillspineadjust_;
  ::std::string* superangericonpath1_;
  ::std::string* superangericonpath2_;
  ::std::string* superangericonpath3_;
  ::std::string* superangerskillnamepath_;
  ::std::string* superangeraudio_;
  ::google::protobuf::int32 superangerheroarr_;
  ::google::protobuf::int32 groundmeshduration_;
  ::google::protobuf::int32 slowstarttime_;
  ::google::protobuf::int32 slowduration_;
  ::std::string* groundmeshassetpath_;
  ::google::protobuf::int32 slowbuffid_;
  ::google::protobuf::int32 slowendtime_;
  ::google::protobuf::RepeatedPtrField< ::std::string> groundaudioevents_;
  ::std::string* effectondisappear_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > textshiftskillarr_;
  ::std::string* awakendatapath1_;
  ::std::string* bjrageskillspine_;
  ::google::protobuf::RepeatedField< float > bjrageskillspineadjust_;
  ::google::protobuf::RepeatedField< float > bjenemyrageskillspineadjust_;
  bool activetextshift_;
  bool activehidewhenborn_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_module_2fSkillBaseData_2eproto();
  friend void protobuf_AssignDesc_module_2fSkillBaseData_2eproto();
  friend void protobuf_ShutdownFile_module_2fSkillBaseData_2eproto();

  void InitAsDefaultInstance();
  static SkillSpecialData* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>SkillTargetPriority</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>module/SkillBaseData.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class SkillTargetPriority : public ::google::protobuf::Message {
 public:
  SkillTargetPriority();
  virtual ~SkillTargetPriority();

  SkillTargetPriority(const SkillTargetPriority& from);

  inline SkillTargetPriority& operator=(const SkillTargetPriority& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SkillTargetPriority& default_instance();

  void Swap(SkillTargetPriority* other);

  // implements Message ----------------------------------------------

  SkillTargetPriority* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SkillTargetPriority& from);
  void MergeFrom(const SkillTargetPriority& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 Front = 1;
  inline bool has_front() const;
  inline void clear_front();
  static const int kFrontFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>SkillTargetPriority</name>
  	<Function>
  		<name>front</name>
  		<replaceName>Front</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_front</name>
  		<replaceName>Front</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_front</name>
  		<replaceName>Front</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::int32 front() const;
  inline void set_front(::google::protobuf::int32 value);

  // optional int32 Middle = 2;
  inline bool has_middle() const;
  inline void clear_middle();
  static const int kMiddleFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>SkillTargetPriority</name>
  	<Function>
  		<name>middle</name>
  		<replaceName>Middle</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_middle</name>
  		<replaceName>Middle</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_middle</name>
  		<replaceName>Middle</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::int32 middle() const;
  inline void set_middle(::google::protobuf::int32 value);

  // optional int32 Back = 3;
  inline bool has_back() const;
  inline void clear_back();
  static const int kBackFieldNumber = 3;
  /*FOR2LUA
  <Record>
  	<name>SkillTargetPriority</name>
  	<Function>
  		<name>back</name>
  		<replaceName>Back</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_back</name>
  		<replaceName>Back</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_back</name>
  		<replaceName>Back</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::int32 back() const;
  inline void set_back(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:pb.SkillTargetPriority)
 private:
  inline void set_has_front();
  inline void clear_has_front();
  inline void set_has_middle();
  inline void clear_has_middle();
  inline void set_has_back();
  inline void clear_has_back();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int32 front_;
  ::google::protobuf::int32 middle_;
  ::google::protobuf::int32 back_;
  friend void  protobuf_AddDesc_module_2fSkillBaseData_2eproto();
  friend void protobuf_AssignDesc_module_2fSkillBaseData_2eproto();
  friend void protobuf_ShutdownFile_module_2fSkillBaseData_2eproto();

  void InitAsDefaultInstance();
  static SkillTargetPriority* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>HitEffectData</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>module/SkillBaseData.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class HitEffectData : public ::google::protobuf::Message {
 public:
  HitEffectData();
  virtual ~HitEffectData();

  HitEffectData(const HitEffectData& from);

  inline HitEffectData& operator=(const HitEffectData& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const HitEffectData& default_instance();

  void Swap(HitEffectData* other);

  // implements Message ----------------------------------------------

  HitEffectData* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const HitEffectData& from);
  void MergeFrom(const HitEffectData& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 EffectParent = 1;
  inline bool has_effectparent() const;
  inline void clear_effectparent();
  static const int kEffectParentFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>HitEffectData</name>
  	<Function>
  		<name>effectparent</name>
  		<replaceName>EffectParent</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_effectparent</name>
  		<replaceName>EffectParent</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_effectparent</name>
  		<replaceName>EffectParent</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::int32 effectparent() const;
  inline void set_effectparent(::google::protobuf::int32 value);

  // optional string HitEffect = 2;
  inline bool has_hiteffect() const;
  inline void clear_hiteffect();
  static const int kHitEffectFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>HitEffectData</name>
  	<Function>
  		<name>hiteffect</name>
  		<replaceName>HitEffect</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_hiteffect</name>
  		<replaceName>HitEffect</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_hiteffect</name>
  		<replaceName>HitEffect</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::std::string& hiteffect() const;
  inline void set_hiteffect(const ::std::string& value);
  inline void set_hiteffect(const char* value);
  inline void set_hiteffect(const char* value, size_t size);
  inline ::std::string* mutable_hiteffect();
  inline ::std::string* release_hiteffect();
  inline void set_allocated_hiteffect(::std::string* hiteffect);

  // optional string HitSound = 3;
  inline bool has_hitsound() const;
  inline void clear_hitsound();
  static const int kHitSoundFieldNumber = 3;
  /*FOR2LUA
  <Record>
  	<name>HitEffectData</name>
  	<Function>
  		<name>hitsound</name>
  		<replaceName>HitSound</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_hitsound</name>
  		<replaceName>HitSound</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_hitsound</name>
  		<replaceName>HitSound</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::std::string& hitsound() const;
  inline void set_hitsound(const ::std::string& value);
  inline void set_hitsound(const char* value);
  inline void set_hitsound(const char* value, size_t size);
  inline ::std::string* mutable_hitsound();
  inline ::std::string* release_hitsound();
  inline void set_allocated_hitsound(::std::string* hitsound);

  // optional bool HitEffectFollow = 4;
  inline bool has_hiteffectfollow() const;
  inline void clear_hiteffectfollow();
  static const int kHitEffectFollowFieldNumber = 4;
  /*FOR2LUA
  <Record>
  	<name>HitEffectData</name>
  	<Function>
  		<name>hiteffectfollow</name>
  		<replaceName>HitEffectFollow</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_hiteffectfollow</name>
  		<replaceName>HitEffectFollow</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_hiteffectfollow</name>
  		<replaceName>HitEffectFollow</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline bool hiteffectfollow() const;
  inline void set_hiteffectfollow(bool value);

  // optional bool HitEffectFlip = 5;
  inline bool has_hiteffectflip() const;
  inline void clear_hiteffectflip();
  static const int kHitEffectFlipFieldNumber = 5;
  /*FOR2LUA
  <Record>
  	<name>HitEffectData</name>
  	<Function>
  		<name>hiteffectflip</name>
  		<replaceName>HitEffectFlip</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_hiteffectflip</name>
  		<replaceName>HitEffectFlip</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_hiteffectflip</name>
  		<replaceName>HitEffectFlip</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline bool hiteffectflip() const;
  inline void set_hiteffectflip(bool value);

  // optional bool HitEffectRotateRandom = 6;
  inline bool has_hiteffectrotaterandom() const;
  inline void clear_hiteffectrotaterandom();
  static const int kHitEffectRotateRandomFieldNumber = 6;
  /*FOR2LUA
  <Record>
  	<name>HitEffectData</name>
  	<Function>
  		<name>hiteffectrotaterandom</name>
  		<replaceName>HitEffectRotateRandom</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_hiteffectrotaterandom</name>
  		<replaceName>HitEffectRotateRandom</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_hiteffectrotaterandom</name>
  		<replaceName>HitEffectRotateRandom</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline bool hiteffectrotaterandom() const;
  inline void set_hiteffectrotaterandom(bool value);

  // repeated int32 HitEffectRotateRangeX = 7;
  inline int hiteffectrotaterangex_size() const;
  inline void clear_hiteffectrotaterangex();
  static const int kHitEffectRotateRangeXFieldNumber = 7;
  /*FOR2LUA
  <Record>
  	<name>HitEffectData</name>
  	<Function>
  		<name>hiteffectrotaterangex</name>
  		<replaceName>HitEffectRotateRangeX</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_hiteffectrotaterangex</name>
  		<replaceName>HitEffectRotateRangeX</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_hiteffectrotaterangex</name>
  		<replaceName>HitEffectRotateRangeX</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_hiteffectrotaterangex</name>
  		<replaceName>HitEffectRotateRangeX</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>hiteffectrotaterangex_size</name>
  		<replaceName>HitEffectRotateRangeX</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::int32 hiteffectrotaterangex(int index) const;
  inline void set_hiteffectrotaterangex(int index, ::google::protobuf::int32 value);
  inline void add_hiteffectrotaterangex(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      hiteffectrotaterangex() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_hiteffectrotaterangex();

  // repeated int32 HitEffectRotateRangeY = 8;
  inline int hiteffectrotaterangey_size() const;
  inline void clear_hiteffectrotaterangey();
  static const int kHitEffectRotateRangeYFieldNumber = 8;
  /*FOR2LUA
  <Record>
  	<name>HitEffectData</name>
  	<Function>
  		<name>hiteffectrotaterangey</name>
  		<replaceName>HitEffectRotateRangeY</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_hiteffectrotaterangey</name>
  		<replaceName>HitEffectRotateRangeY</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_hiteffectrotaterangey</name>
  		<replaceName>HitEffectRotateRangeY</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_hiteffectrotaterangey</name>
  		<replaceName>HitEffectRotateRangeY</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>hiteffectrotaterangey_size</name>
  		<replaceName>HitEffectRotateRangeY</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::int32 hiteffectrotaterangey(int index) const;
  inline void set_hiteffectrotaterangey(int index, ::google::protobuf::int32 value);
  inline void add_hiteffectrotaterangey(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      hiteffectrotaterangey() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_hiteffectrotaterangey();

  // optional bool HitEffectScale = 9;
  inline bool has_hiteffectscale() const;
  inline void clear_hiteffectscale();
  static const int kHitEffectScaleFieldNumber = 9;
  /*FOR2LUA
  <Record>
  	<name>HitEffectData</name>
  	<Function>
  		<name>hiteffectscale</name>
  		<replaceName>HitEffectScale</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_hiteffectscale</name>
  		<replaceName>HitEffectScale</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_hiteffectscale</name>
  		<replaceName>HitEffectScale</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline bool hiteffectscale() const;
  inline void set_hiteffectscale(bool value);

  // repeated int32 HitEffectScaleRange = 10;
  inline int hiteffectscalerange_size() const;
  inline void clear_hiteffectscalerange();
  static const int kHitEffectScaleRangeFieldNumber = 10;
  /*FOR2LUA
  <Record>
  	<name>HitEffectData</name>
  	<Function>
  		<name>hiteffectscalerange</name>
  		<replaceName>HitEffectScaleRange</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_hiteffectscalerange</name>
  		<replaceName>HitEffectScaleRange</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_hiteffectscalerange</name>
  		<replaceName>HitEffectScaleRange</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_hiteffectscalerange</name>
  		<replaceName>HitEffectScaleRange</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>hiteffectscalerange_size</name>
  		<replaceName>HitEffectScaleRange</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::int32 hiteffectscalerange(int index) const;
  inline void set_hiteffectscalerange(int index, ::google::protobuf::int32 value);
  inline void add_hiteffectscalerange(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      hiteffectscalerange() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_hiteffectscalerange();

  // @@protoc_insertion_point(class_scope:pb.HitEffectData)
 private:
  inline void set_has_effectparent();
  inline void clear_has_effectparent();
  inline void set_has_hiteffect();
  inline void clear_has_hiteffect();
  inline void set_has_hitsound();
  inline void clear_has_hitsound();
  inline void set_has_hiteffectfollow();
  inline void clear_has_hiteffectfollow();
  inline void set_has_hiteffectflip();
  inline void clear_has_hiteffectflip();
  inline void set_has_hiteffectrotaterandom();
  inline void clear_has_hiteffectrotaterandom();
  inline void set_has_hiteffectscale();
  inline void clear_has_hiteffectscale();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* hiteffect_;
  ::std::string* hitsound_;
  ::google::protobuf::int32 effectparent_;
  bool hiteffectfollow_;
  bool hiteffectflip_;
  bool hiteffectrotaterandom_;
  bool hiteffectscale_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > hiteffectrotaterangex_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > hiteffectrotaterangey_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > hiteffectscalerange_;
  friend void  protobuf_AddDesc_module_2fSkillBaseData_2eproto();
  friend void protobuf_AssignDesc_module_2fSkillBaseData_2eproto();
  friend void protobuf_ShutdownFile_module_2fSkillBaseData_2eproto();

  void InitAsDefaultInstance();
  static HitEffectData* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>SkillCastType</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>module/SkillBaseData.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class SkillCastType : public ::google::protobuf::Message {
 public:
  SkillCastType();
  virtual ~SkillCastType();

  SkillCastType(const SkillCastType& from);

  inline SkillCastType& operator=(const SkillCastType& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SkillCastType& default_instance();

  void Swap(SkillCastType* other);

  // implements Message ----------------------------------------------

  SkillCastType* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SkillCastType& from);
  void MergeFrom(const SkillCastType& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 CastType = 1;
  inline bool has_casttype() const;
  inline void clear_casttype();
  static const int kCastTypeFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>SkillCastType</name>
  	<Function>
  		<name>casttype</name>
  		<replaceName>CastType</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_casttype</name>
  		<replaceName>CastType</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_casttype</name>
  		<replaceName>CastType</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::int32 casttype() const;
  inline void set_casttype(::google::protobuf::int32 value);

  // optional int32 EventMajor = 2;
  inline bool has_eventmajor() const;
  inline void clear_eventmajor();
  static const int kEventMajorFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>SkillCastType</name>
  	<Function>
  		<name>eventmajor</name>
  		<replaceName>EventMajor</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_eventmajor</name>
  		<replaceName>EventMajor</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_eventmajor</name>
  		<replaceName>EventMajor</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::int32 eventmajor() const;
  inline void set_eventmajor(::google::protobuf::int32 value);

  // optional int32 EventRelation = 3;
  inline bool has_eventrelation() const;
  inline void clear_eventrelation();
  static const int kEventRelationFieldNumber = 3;
  /*FOR2LUA
  <Record>
  	<name>SkillCastType</name>
  	<Function>
  		<name>eventrelation</name>
  		<replaceName>EventRelation</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_eventrelation</name>
  		<replaceName>EventRelation</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_eventrelation</name>
  		<replaceName>EventRelation</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::int32 eventrelation() const;
  inline void set_eventrelation(::google::protobuf::int32 value);

  // optional int32 EventSub = 4;
  inline bool has_eventsub() const;
  inline void clear_eventsub();
  static const int kEventSubFieldNumber = 4;
  /*FOR2LUA
  <Record>
  	<name>SkillCastType</name>
  	<Function>
  		<name>eventsub</name>
  		<replaceName>EventSub</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_eventsub</name>
  		<replaceName>EventSub</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_eventsub</name>
  		<replaceName>EventSub</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::int32 eventsub() const;
  inline void set_eventsub(::google::protobuf::int32 value);

  // optional int32 TriggerBuffID = 5;
  inline bool has_triggerbuffid() const;
  inline void clear_triggerbuffid();
  static const int kTriggerBuffIDFieldNumber = 5;
  /*FOR2LUA
  <Record>
  	<name>SkillCastType</name>
  	<Function>
  		<name>triggerbuffid</name>
  		<replaceName>TriggerBuffID</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_triggerbuffid</name>
  		<replaceName>TriggerBuffID</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_triggerbuffid</name>
  		<replaceName>TriggerBuffID</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::int32 triggerbuffid() const;
  inline void set_triggerbuffid(::google::protobuf::int32 value);

  // optional int32 TriggerBuffLayer = 6;
  inline bool has_triggerbufflayer() const;
  inline void clear_triggerbufflayer();
  static const int kTriggerBuffLayerFieldNumber = 6;
  /*FOR2LUA
  <Record>
  	<name>SkillCastType</name>
  	<Function>
  		<name>triggerbufflayer</name>
  		<replaceName>TriggerBuffLayer</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_triggerbufflayer</name>
  		<replaceName>TriggerBuffLayer</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_triggerbufflayer</name>
  		<replaceName>TriggerBuffLayer</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::int32 triggerbufflayer() const;
  inline void set_triggerbufflayer(::google::protobuf::int32 value);

  // repeated int32 TriggerSkillArr = 7;
  inline int triggerskillarr_size() const;
  inline void clear_triggerskillarr();
  static const int kTriggerSkillArrFieldNumber = 7;
  /*FOR2LUA
  <Record>
  	<name>SkillCastType</name>
  	<Function>
  		<name>triggerskillarr</name>
  		<replaceName>TriggerSkillArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_triggerskillarr</name>
  		<replaceName>TriggerSkillArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_triggerskillarr</name>
  		<replaceName>TriggerSkillArr</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_triggerskillarr</name>
  		<replaceName>TriggerSkillArr</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>triggerskillarr_size</name>
  		<replaceName>TriggerSkillArr</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::int32 triggerskillarr(int index) const;
  inline void set_triggerskillarr(int index, ::google::protobuf::int32 value);
  inline void add_triggerskillarr(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      triggerskillarr() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_triggerskillarr();

  // optional int32 TriggerChance = 8;
  inline bool has_triggerchance() const;
  inline void clear_triggerchance();
  static const int kTriggerChanceFieldNumber = 8;
  /*FOR2LUA
  <Record>
  	<name>SkillCastType</name>
  	<Function>
  		<name>triggerchance</name>
  		<replaceName>TriggerChance</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_triggerchance</name>
  		<replaceName>TriggerChance</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_triggerchance</name>
  		<replaceName>TriggerChance</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::int32 triggerchance() const;
  inline void set_triggerchance(::google::protobuf::int32 value);

  // repeated int32 EventSubSkillArr = 9;
  inline int eventsubskillarr_size() const;
  inline void clear_eventsubskillarr();
  static const int kEventSubSkillArrFieldNumber = 9;
  /*FOR2LUA
  <Record>
  	<name>SkillCastType</name>
  	<Function>
  		<name>eventsubskillarr</name>
  		<replaceName>EventSubSkillArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_eventsubskillarr</name>
  		<replaceName>EventSubSkillArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_eventsubskillarr</name>
  		<replaceName>EventSubSkillArr</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_eventsubskillarr</name>
  		<replaceName>EventSubSkillArr</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>eventsubskillarr_size</name>
  		<replaceName>EventSubSkillArr</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::int32 eventsubskillarr(int index) const;
  inline void set_eventsubskillarr(int index, ::google::protobuf::int32 value);
  inline void add_eventsubskillarr(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      eventsubskillarr() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_eventsubskillarr();

  // optional bool NeedInterrupt = 10;
  inline bool has_needinterrupt() const;
  inline void clear_needinterrupt();
  static const int kNeedInterruptFieldNumber = 10;
  /*FOR2LUA
  <Record>
  	<name>SkillCastType</name>
  	<Function>
  		<name>needinterrupt</name>
  		<replaceName>NeedInterrupt</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_needinterrupt</name>
  		<replaceName>NeedInterrupt</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_needinterrupt</name>
  		<replaceName>NeedInterrupt</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline bool needinterrupt() const;
  inline void set_needinterrupt(bool value);

  // optional int32 RecordBuffId = 11;
  inline bool has_recordbuffid() const;
  inline void clear_recordbuffid();
  static const int kRecordBuffIdFieldNumber = 11;
  /*FOR2LUA
  <Record>
  	<name>SkillCastType</name>
  	<Function>
  		<name>recordbuffid</name>
  		<replaceName>RecordBuffId</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_recordbuffid</name>
  		<replaceName>RecordBuffId</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_recordbuffid</name>
  		<replaceName>RecordBuffId</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::int32 recordbuffid() const;
  inline void set_recordbuffid(::google::protobuf::int32 value);

  // optional int32 RecordThreshold = 12;
  inline bool has_recordthreshold() const;
  inline void clear_recordthreshold();
  static const int kRecordThresholdFieldNumber = 12;
  /*FOR2LUA
  <Record>
  	<name>SkillCastType</name>
  	<Function>
  		<name>recordthreshold</name>
  		<replaceName>RecordThreshold</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_recordthreshold</name>
  		<replaceName>RecordThreshold</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_recordthreshold</name>
  		<replaceName>RecordThreshold</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::int32 recordthreshold() const;
  inline void set_recordthreshold(::google::protobuf::int32 value);

  // repeated int32 EventBuffSubArr = 13;
  inline int eventbuffsubarr_size() const;
  inline void clear_eventbuffsubarr();
  static const int kEventBuffSubArrFieldNumber = 13;
  /*FOR2LUA
  <Record>
  	<name>SkillCastType</name>
  	<Function>
  		<name>eventbuffsubarr</name>
  		<replaceName>EventBuffSubArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_eventbuffsubarr</name>
  		<replaceName>EventBuffSubArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_eventbuffsubarr</name>
  		<replaceName>EventBuffSubArr</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_eventbuffsubarr</name>
  		<replaceName>EventBuffSubArr</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>eventbuffsubarr_size</name>
  		<replaceName>EventBuffSubArr</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::int32 eventbuffsubarr(int index) const;
  inline void set_eventbuffsubarr(int index, ::google::protobuf::int32 value);
  inline void add_eventbuffsubarr(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      eventbuffsubarr() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_eventbuffsubarr();

  // optional int32 TriggerChanceCoef = 14;
  inline bool has_triggerchancecoef() const;
  inline void clear_triggerchancecoef();
  static const int kTriggerChanceCoefFieldNumber = 14;
  /*FOR2LUA
  <Record>
  	<name>SkillCastType</name>
  	<Function>
  		<name>triggerchancecoef</name>
  		<replaceName>TriggerChanceCoef</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_triggerchancecoef</name>
  		<replaceName>TriggerChanceCoef</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_triggerchancecoef</name>
  		<replaceName>TriggerChanceCoef</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::int32 triggerchancecoef() const;
  inline void set_triggerchancecoef(::google::protobuf::int32 value);

  // optional int32 Param1 = 15;
  inline bool has_param1() const;
  inline void clear_param1();
  static const int kParam1FieldNumber = 15;
  /*FOR2LUA
  <Record>
  	<name>SkillCastType</name>
  	<Function>
  		<name>param1</name>
  		<replaceName>Param1</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_param1</name>
  		<replaceName>Param1</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_param1</name>
  		<replaceName>Param1</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::int32 param1() const;
  inline void set_param1(::google::protobuf::int32 value);

  // optional int32 Param2 = 16;
  inline bool has_param2() const;
  inline void clear_param2();
  static const int kParam2FieldNumber = 16;
  /*FOR2LUA
  <Record>
  	<name>SkillCastType</name>
  	<Function>
  		<name>param2</name>
  		<replaceName>Param2</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_param2</name>
  		<replaceName>Param2</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_param2</name>
  		<replaceName>Param2</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::int32 param2() const;
  inline void set_param2(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:pb.SkillCastType)
 private:
  inline void set_has_casttype();
  inline void clear_has_casttype();
  inline void set_has_eventmajor();
  inline void clear_has_eventmajor();
  inline void set_has_eventrelation();
  inline void clear_has_eventrelation();
  inline void set_has_eventsub();
  inline void clear_has_eventsub();
  inline void set_has_triggerbuffid();
  inline void clear_has_triggerbuffid();
  inline void set_has_triggerbufflayer();
  inline void clear_has_triggerbufflayer();
  inline void set_has_triggerchance();
  inline void clear_has_triggerchance();
  inline void set_has_needinterrupt();
  inline void clear_has_needinterrupt();
  inline void set_has_recordbuffid();
  inline void clear_has_recordbuffid();
  inline void set_has_recordthreshold();
  inline void clear_has_recordthreshold();
  inline void set_has_triggerchancecoef();
  inline void clear_has_triggerchancecoef();
  inline void set_has_param1();
  inline void clear_has_param1();
  inline void set_has_param2();
  inline void clear_has_param2();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int32 casttype_;
  ::google::protobuf::int32 eventmajor_;
  ::google::protobuf::int32 eventrelation_;
  ::google::protobuf::int32 eventsub_;
  ::google::protobuf::int32 triggerbuffid_;
  ::google::protobuf::int32 triggerbufflayer_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > triggerskillarr_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > eventsubskillarr_;
  ::google::protobuf::int32 triggerchance_;
  bool needinterrupt_;
  ::google::protobuf::int32 recordbuffid_;
  ::google::protobuf::int32 recordthreshold_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > eventbuffsubarr_;
  ::google::protobuf::int32 triggerchancecoef_;
  ::google::protobuf::int32 param1_;
  ::google::protobuf::int32 param2_;
  friend void  protobuf_AddDesc_module_2fSkillBaseData_2eproto();
  friend void protobuf_AssignDesc_module_2fSkillBaseData_2eproto();
  friend void protobuf_ShutdownFile_module_2fSkillBaseData_2eproto();

  void InitAsDefaultInstance();
  static SkillCastType* default_instance_;
};
// ===================================================================


// ===================================================================

// SkillBaseData

// optional string Name = 1;
inline bool SkillBaseData::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SkillBaseData::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SkillBaseData::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SkillBaseData::clear_name() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& SkillBaseData::name() const {
  // @@protoc_insertion_point(field_get:pb.SkillBaseData.Name)
  return *name_;
}
inline void SkillBaseData::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(value);
  // @@protoc_insertion_point(field_set:pb.SkillBaseData.Name)
}
inline void SkillBaseData::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(value);
  // @@protoc_insertion_point(field_set_char:pb.SkillBaseData.Name)
}
inline void SkillBaseData::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:pb.SkillBaseData.Name)
}
inline ::std::string* SkillBaseData::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:pb.SkillBaseData.Name)
  return name_;
}
inline ::std::string* SkillBaseData::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void SkillBaseData::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:pb.SkillBaseData.Name)
}

// optional int32 ChainSkillMark = 2;
inline bool SkillBaseData::has_chainskillmark() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SkillBaseData::set_has_chainskillmark() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SkillBaseData::clear_has_chainskillmark() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SkillBaseData::clear_chainskillmark() {
  chainskillmark_ = 0;
  clear_has_chainskillmark();
}
inline ::google::protobuf::int32 SkillBaseData::chainskillmark() const {
  // @@protoc_insertion_point(field_get:pb.SkillBaseData.ChainSkillMark)
  return chainskillmark_;
}
inline void SkillBaseData::set_chainskillmark(::google::protobuf::int32 value) {
  set_has_chainskillmark();
  chainskillmark_ = value;
  // @@protoc_insertion_point(field_set:pb.SkillBaseData.ChainSkillMark)
}

// optional int32 MainType = 3;
inline bool SkillBaseData::has_maintype() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void SkillBaseData::set_has_maintype() {
  _has_bits_[0] |= 0x00000004u;
}
inline void SkillBaseData::clear_has_maintype() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void SkillBaseData::clear_maintype() {
  maintype_ = 0;
  clear_has_maintype();
}
inline ::google::protobuf::int32 SkillBaseData::maintype() const {
  // @@protoc_insertion_point(field_get:pb.SkillBaseData.MainType)
  return maintype_;
}
inline void SkillBaseData::set_maintype(::google::protobuf::int32 value) {
  set_has_maintype();
  maintype_ = value;
  // @@protoc_insertion_point(field_set:pb.SkillBaseData.MainType)
}

// optional int32 SubType = 4;
inline bool SkillBaseData::has_subtype() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void SkillBaseData::set_has_subtype() {
  _has_bits_[0] |= 0x00000008u;
}
inline void SkillBaseData::clear_has_subtype() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void SkillBaseData::clear_subtype() {
  subtype_ = 0;
  clear_has_subtype();
}
inline ::google::protobuf::int32 SkillBaseData::subtype() const {
  // @@protoc_insertion_point(field_get:pb.SkillBaseData.SubType)
  return subtype_;
}
inline void SkillBaseData::set_subtype(::google::protobuf::int32 value) {
  set_has_subtype();
  subtype_ = value;
  // @@protoc_insertion_point(field_set:pb.SkillBaseData.SubType)
}

// optional int32 NormalAttackCount = 5;
inline bool SkillBaseData::has_normalattackcount() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void SkillBaseData::set_has_normalattackcount() {
  _has_bits_[0] |= 0x00000010u;
}
inline void SkillBaseData::clear_has_normalattackcount() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void SkillBaseData::clear_normalattackcount() {
  normalattackcount_ = 0;
  clear_has_normalattackcount();
}
inline ::google::protobuf::int32 SkillBaseData::normalattackcount() const {
  // @@protoc_insertion_point(field_get:pb.SkillBaseData.NormalAttackCount)
  return normalattackcount_;
}
inline void SkillBaseData::set_normalattackcount(::google::protobuf::int32 value) {
  set_has_normalattackcount();
  normalattackcount_ = value;
  // @@protoc_insertion_point(field_set:pb.SkillBaseData.NormalAttackCount)
}

// optional int32 RefTargetType = 6;
inline bool SkillBaseData::has_reftargettype() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void SkillBaseData::set_has_reftargettype() {
  _has_bits_[0] |= 0x00000020u;
}
inline void SkillBaseData::clear_has_reftargettype() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void SkillBaseData::clear_reftargettype() {
  reftargettype_ = 0;
  clear_has_reftargettype();
}
inline ::google::protobuf::int32 SkillBaseData::reftargettype() const {
  // @@protoc_insertion_point(field_get:pb.SkillBaseData.RefTargetType)
  return reftargettype_;
}
inline void SkillBaseData::set_reftargettype(::google::protobuf::int32 value) {
  set_has_reftargettype();
  reftargettype_ = value;
  // @@protoc_insertion_point(field_set:pb.SkillBaseData.RefTargetType)
}

// optional int32 SpeBuffID = 7;
inline bool SkillBaseData::has_spebuffid() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void SkillBaseData::set_has_spebuffid() {
  _has_bits_[0] |= 0x00000040u;
}
inline void SkillBaseData::clear_has_spebuffid() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void SkillBaseData::clear_spebuffid() {
  spebuffid_ = 0;
  clear_has_spebuffid();
}
inline ::google::protobuf::int32 SkillBaseData::spebuffid() const {
  // @@protoc_insertion_point(field_get:pb.SkillBaseData.SpeBuffID)
  return spebuffid_;
}
inline void SkillBaseData::set_spebuffid(::google::protobuf::int32 value) {
  set_has_spebuffid();
  spebuffid_ = value;
  // @@protoc_insertion_point(field_set:pb.SkillBaseData.SpeBuffID)
}

// optional int32 RefTargetNum = 8;
inline bool SkillBaseData::has_reftargetnum() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void SkillBaseData::set_has_reftargetnum() {
  _has_bits_[0] |= 0x00000080u;
}
inline void SkillBaseData::clear_has_reftargetnum() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void SkillBaseData::clear_reftargetnum() {
  reftargetnum_ = 0;
  clear_has_reftargetnum();
}
inline ::google::protobuf::int32 SkillBaseData::reftargetnum() const {
  // @@protoc_insertion_point(field_get:pb.SkillBaseData.RefTargetNum)
  return reftargetnum_;
}
inline void SkillBaseData::set_reftargetnum(::google::protobuf::int32 value) {
  set_has_reftargetnum();
  reftargetnum_ = value;
  // @@protoc_insertion_point(field_set:pb.SkillBaseData.RefTargetNum)
}

// optional bool IsRealTarget = 9;
inline bool SkillBaseData::has_isrealtarget() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void SkillBaseData::set_has_isrealtarget() {
  _has_bits_[0] |= 0x00000100u;
}
inline void SkillBaseData::clear_has_isrealtarget() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void SkillBaseData::clear_isrealtarget() {
  isrealtarget_ = false;
  clear_has_isrealtarget();
}
inline bool SkillBaseData::isrealtarget() const {
  // @@protoc_insertion_point(field_get:pb.SkillBaseData.IsRealTarget)
  return isrealtarget_;
}
inline void SkillBaseData::set_isrealtarget(bool value) {
  set_has_isrealtarget();
  isrealtarget_ = value;
  // @@protoc_insertion_point(field_set:pb.SkillBaseData.IsRealTarget)
}

// optional string SkillAnim = 10;
inline bool SkillBaseData::has_skillanim() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void SkillBaseData::set_has_skillanim() {
  _has_bits_[0] |= 0x00000200u;
}
inline void SkillBaseData::clear_has_skillanim() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void SkillBaseData::clear_skillanim() {
  if (skillanim_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    skillanim_->clear();
  }
  clear_has_skillanim();
}
inline const ::std::string& SkillBaseData::skillanim() const {
  // @@protoc_insertion_point(field_get:pb.SkillBaseData.SkillAnim)
  return *skillanim_;
}
inline void SkillBaseData::set_skillanim(const ::std::string& value) {
  set_has_skillanim();
  if (skillanim_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    skillanim_ = new ::std::string;
  }
  skillanim_->assign(value);
  // @@protoc_insertion_point(field_set:pb.SkillBaseData.SkillAnim)
}
inline void SkillBaseData::set_skillanim(const char* value) {
  set_has_skillanim();
  if (skillanim_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    skillanim_ = new ::std::string;
  }
  skillanim_->assign(value);
  // @@protoc_insertion_point(field_set_char:pb.SkillBaseData.SkillAnim)
}
inline void SkillBaseData::set_skillanim(const char* value, size_t size) {
  set_has_skillanim();
  if (skillanim_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    skillanim_ = new ::std::string;
  }
  skillanim_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:pb.SkillBaseData.SkillAnim)
}
inline ::std::string* SkillBaseData::mutable_skillanim() {
  set_has_skillanim();
  if (skillanim_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    skillanim_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:pb.SkillBaseData.SkillAnim)
  return skillanim_;
}
inline ::std::string* SkillBaseData::release_skillanim() {
  clear_has_skillanim();
  if (skillanim_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = skillanim_;
    skillanim_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void SkillBaseData::set_allocated_skillanim(::std::string* skillanim) {
  if (skillanim_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete skillanim_;
  }
  if (skillanim) {
    set_has_skillanim();
    skillanim_ = skillanim;
  } else {
    clear_has_skillanim();
    skillanim_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:pb.SkillBaseData.SkillAnim)
}

// optional bool IsPlayHitAnim = 11;
inline bool SkillBaseData::has_isplayhitanim() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void SkillBaseData::set_has_isplayhitanim() {
  _has_bits_[0] |= 0x00000400u;
}
inline void SkillBaseData::clear_has_isplayhitanim() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void SkillBaseData::clear_isplayhitanim() {
  isplayhitanim_ = false;
  clear_has_isplayhitanim();
}
inline bool SkillBaseData::isplayhitanim() const {
  // @@protoc_insertion_point(field_get:pb.SkillBaseData.IsPlayHitAnim)
  return isplayhitanim_;
}
inline void SkillBaseData::set_isplayhitanim(bool value) {
  set_has_isplayhitanim();
  isplayhitanim_ = value;
  // @@protoc_insertion_point(field_set:pb.SkillBaseData.IsPlayHitAnim)
}

// optional int32 CastRange = 12;
inline bool SkillBaseData::has_castrange() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void SkillBaseData::set_has_castrange() {
  _has_bits_[0] |= 0x00000800u;
}
inline void SkillBaseData::clear_has_castrange() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void SkillBaseData::clear_castrange() {
  castrange_ = 0;
  clear_has_castrange();
}
inline ::google::protobuf::int32 SkillBaseData::castrange() const {
  // @@protoc_insertion_point(field_get:pb.SkillBaseData.CastRange)
  return castrange_;
}
inline void SkillBaseData::set_castrange(::google::protobuf::int32 value) {
  set_has_castrange();
  castrange_ = value;
  // @@protoc_insertion_point(field_set:pb.SkillBaseData.CastRange)
}

// optional int32 needFaceToWhenCast = 13;
inline bool SkillBaseData::has_needfacetowhencast() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void SkillBaseData::set_has_needfacetowhencast() {
  _has_bits_[0] |= 0x00001000u;
}
inline void SkillBaseData::clear_has_needfacetowhencast() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void SkillBaseData::clear_needfacetowhencast() {
  needfacetowhencast_ = 0;
  clear_has_needfacetowhencast();
}
inline ::google::protobuf::int32 SkillBaseData::needfacetowhencast() const {
  // @@protoc_insertion_point(field_get:pb.SkillBaseData.needFaceToWhenCast)
  return needfacetowhencast_;
}
inline void SkillBaseData::set_needfacetowhencast(::google::protobuf::int32 value) {
  set_has_needfacetowhencast();
  needfacetowhencast_ = value;
  // @@protoc_insertion_point(field_set:pb.SkillBaseData.needFaceToWhenCast)
}

// optional bool IsRecoverFromPause = 19;
inline bool SkillBaseData::has_isrecoverfrompause() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void SkillBaseData::set_has_isrecoverfrompause() {
  _has_bits_[0] |= 0x00002000u;
}
inline void SkillBaseData::clear_has_isrecoverfrompause() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void SkillBaseData::clear_isrecoverfrompause() {
  isrecoverfrompause_ = false;
  clear_has_isrecoverfrompause();
}
inline bool SkillBaseData::isrecoverfrompause() const {
  // @@protoc_insertion_point(field_get:pb.SkillBaseData.IsRecoverFromPause)
  return isrecoverfrompause_;
}
inline void SkillBaseData::set_isrecoverfrompause(bool value) {
  set_has_isrecoverfrompause();
  isrecoverfrompause_ = value;
  // @@protoc_insertion_point(field_set:pb.SkillBaseData.IsRecoverFromPause)
}

// optional bool IsFaceTargetDuringCast = 22;
inline bool SkillBaseData::has_isfacetargetduringcast() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void SkillBaseData::set_has_isfacetargetduringcast() {
  _has_bits_[0] |= 0x00004000u;
}
inline void SkillBaseData::clear_has_isfacetargetduringcast() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void SkillBaseData::clear_isfacetargetduringcast() {
  isfacetargetduringcast_ = false;
  clear_has_isfacetargetduringcast();
}
inline bool SkillBaseData::isfacetargetduringcast() const {
  // @@protoc_insertion_point(field_get:pb.SkillBaseData.IsFaceTargetDuringCast)
  return isfacetargetduringcast_;
}
inline void SkillBaseData::set_isfacetargetduringcast(bool value) {
  set_has_isfacetargetduringcast();
  isfacetargetduringcast_ = value;
  // @@protoc_insertion_point(field_set:pb.SkillBaseData.IsFaceTargetDuringCast)
}

// optional int32 MaxCastCountInOneScene = 23;
inline bool SkillBaseData::has_maxcastcountinonescene() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void SkillBaseData::set_has_maxcastcountinonescene() {
  _has_bits_[0] |= 0x00008000u;
}
inline void SkillBaseData::clear_has_maxcastcountinonescene() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void SkillBaseData::clear_maxcastcountinonescene() {
  maxcastcountinonescene_ = 0;
  clear_has_maxcastcountinonescene();
}
inline ::google::protobuf::int32 SkillBaseData::maxcastcountinonescene() const {
  // @@protoc_insertion_point(field_get:pb.SkillBaseData.MaxCastCountInOneScene)
  return maxcastcountinonescene_;
}
inline void SkillBaseData::set_maxcastcountinonescene(::google::protobuf::int32 value) {
  set_has_maxcastcountinonescene();
  maxcastcountinonescene_ = value;
  // @@protoc_insertion_point(field_set:pb.SkillBaseData.MaxCastCountInOneScene)
}

// optional int32 MaxCastCountInOneBattle = 24;
inline bool SkillBaseData::has_maxcastcountinonebattle() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void SkillBaseData::set_has_maxcastcountinonebattle() {
  _has_bits_[0] |= 0x00010000u;
}
inline void SkillBaseData::clear_has_maxcastcountinonebattle() {
  _has_bits_[0] &= ~0x00010000u;
}
inline void SkillBaseData::clear_maxcastcountinonebattle() {
  maxcastcountinonebattle_ = 0;
  clear_has_maxcastcountinonebattle();
}
inline ::google::protobuf::int32 SkillBaseData::maxcastcountinonebattle() const {
  // @@protoc_insertion_point(field_get:pb.SkillBaseData.MaxCastCountInOneBattle)
  return maxcastcountinonebattle_;
}
inline void SkillBaseData::set_maxcastcountinonebattle(::google::protobuf::int32 value) {
  set_has_maxcastcountinonebattle();
  maxcastcountinonebattle_ = value;
  // @@protoc_insertion_point(field_set:pb.SkillBaseData.MaxCastCountInOneBattle)
}

// optional bool IsLasting = 26;
inline bool SkillBaseData::has_islasting() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
inline void SkillBaseData::set_has_islasting() {
  _has_bits_[0] |= 0x00020000u;
}
inline void SkillBaseData::clear_has_islasting() {
  _has_bits_[0] &= ~0x00020000u;
}
inline void SkillBaseData::clear_islasting() {
  islasting_ = false;
  clear_has_islasting();
}
inline bool SkillBaseData::islasting() const {
  // @@protoc_insertion_point(field_get:pb.SkillBaseData.IsLasting)
  return islasting_;
}
inline void SkillBaseData::set_islasting(bool value) {
  set_has_islasting();
  islasting_ = value;
  // @@protoc_insertion_point(field_set:pb.SkillBaseData.IsLasting)
}

// optional int32 CoolingTime = 27;
inline bool SkillBaseData::has_coolingtime() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
inline void SkillBaseData::set_has_coolingtime() {
  _has_bits_[0] |= 0x00040000u;
}
inline void SkillBaseData::clear_has_coolingtime() {
  _has_bits_[0] &= ~0x00040000u;
}
inline void SkillBaseData::clear_coolingtime() {
  coolingtime_ = 0;
  clear_has_coolingtime();
}
inline ::google::protobuf::int32 SkillBaseData::coolingtime() const {
  // @@protoc_insertion_point(field_get:pb.SkillBaseData.CoolingTime)
  return coolingtime_;
}
inline void SkillBaseData::set_coolingtime(::google::protobuf::int32 value) {
  set_has_coolingtime();
  coolingtime_ = value;
  // @@protoc_insertion_point(field_set:pb.SkillBaseData.CoolingTime)
}

// optional int32 IntervalTime = 28;
inline bool SkillBaseData::has_intervaltime() const {
  return (_has_bits_[0] & 0x00080000u) != 0;
}
inline void SkillBaseData::set_has_intervaltime() {
  _has_bits_[0] |= 0x00080000u;
}
inline void SkillBaseData::clear_has_intervaltime() {
  _has_bits_[0] &= ~0x00080000u;
}
inline void SkillBaseData::clear_intervaltime() {
  intervaltime_ = 0;
  clear_has_intervaltime();
}
inline ::google::protobuf::int32 SkillBaseData::intervaltime() const {
  // @@protoc_insertion_point(field_get:pb.SkillBaseData.IntervalTime)
  return intervaltime_;
}
inline void SkillBaseData::set_intervaltime(::google::protobuf::int32 value) {
  set_has_intervaltime();
  intervaltime_ = value;
  // @@protoc_insertion_point(field_set:pb.SkillBaseData.IntervalTime)
}

// optional int32 NormalAttackChance = 29;
inline bool SkillBaseData::has_normalattackchance() const {
  return (_has_bits_[0] & 0x00100000u) != 0;
}
inline void SkillBaseData::set_has_normalattackchance() {
  _has_bits_[0] |= 0x00100000u;
}
inline void SkillBaseData::clear_has_normalattackchance() {
  _has_bits_[0] &= ~0x00100000u;
}
inline void SkillBaseData::clear_normalattackchance() {
  normalattackchance_ = 0;
  clear_has_normalattackchance();
}
inline ::google::protobuf::int32 SkillBaseData::normalattackchance() const {
  // @@protoc_insertion_point(field_get:pb.SkillBaseData.NormalAttackChance)
  return normalattackchance_;
}
inline void SkillBaseData::set_normalattackchance(::google::protobuf::int32 value) {
  set_has_normalattackchance();
  normalattackchance_ = value;
  // @@protoc_insertion_point(field_set:pb.SkillBaseData.NormalAttackChance)
}

// optional int32 TriggerBuffID = 30;
inline bool SkillBaseData::has_triggerbuffid() const {
  return (_has_bits_[0] & 0x00200000u) != 0;
}
inline void SkillBaseData::set_has_triggerbuffid() {
  _has_bits_[0] |= 0x00200000u;
}
inline void SkillBaseData::clear_has_triggerbuffid() {
  _has_bits_[0] &= ~0x00200000u;
}
inline void SkillBaseData::clear_triggerbuffid() {
  triggerbuffid_ = 0;
  clear_has_triggerbuffid();
}
inline ::google::protobuf::int32 SkillBaseData::triggerbuffid() const {
  // @@protoc_insertion_point(field_get:pb.SkillBaseData.TriggerBuffID)
  return triggerbuffid_;
}
inline void SkillBaseData::set_triggerbuffid(::google::protobuf::int32 value) {
  set_has_triggerbuffid();
  triggerbuffid_ = value;
  // @@protoc_insertion_point(field_set:pb.SkillBaseData.TriggerBuffID)
}

// optional int32 TriggerBuffLayer = 31;
inline bool SkillBaseData::has_triggerbufflayer() const {
  return (_has_bits_[0] & 0x00400000u) != 0;
}
inline void SkillBaseData::set_has_triggerbufflayer() {
  _has_bits_[0] |= 0x00400000u;
}
inline void SkillBaseData::clear_has_triggerbufflayer() {
  _has_bits_[0] &= ~0x00400000u;
}
inline void SkillBaseData::clear_triggerbufflayer() {
  triggerbufflayer_ = 0;
  clear_has_triggerbufflayer();
}
inline ::google::protobuf::int32 SkillBaseData::triggerbufflayer() const {
  // @@protoc_insertion_point(field_get:pb.SkillBaseData.TriggerBuffLayer)
  return triggerbufflayer_;
}
inline void SkillBaseData::set_triggerbufflayer(::google::protobuf::int32 value) {
  set_has_triggerbufflayer();
  triggerbufflayer_ = value;
  // @@protoc_insertion_point(field_set:pb.SkillBaseData.TriggerBuffLayer)
}

// optional string IconPath = 32;
inline bool SkillBaseData::has_iconpath() const {
  return (_has_bits_[0] & 0x00800000u) != 0;
}
inline void SkillBaseData::set_has_iconpath() {
  _has_bits_[0] |= 0x00800000u;
}
inline void SkillBaseData::clear_has_iconpath() {
  _has_bits_[0] &= ~0x00800000u;
}
inline void SkillBaseData::clear_iconpath() {
  if (iconpath_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    iconpath_->clear();
  }
  clear_has_iconpath();
}
inline const ::std::string& SkillBaseData::iconpath() const {
  // @@protoc_insertion_point(field_get:pb.SkillBaseData.IconPath)
  return *iconpath_;
}
inline void SkillBaseData::set_iconpath(const ::std::string& value) {
  set_has_iconpath();
  if (iconpath_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    iconpath_ = new ::std::string;
  }
  iconpath_->assign(value);
  // @@protoc_insertion_point(field_set:pb.SkillBaseData.IconPath)
}
inline void SkillBaseData::set_iconpath(const char* value) {
  set_has_iconpath();
  if (iconpath_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    iconpath_ = new ::std::string;
  }
  iconpath_->assign(value);
  // @@protoc_insertion_point(field_set_char:pb.SkillBaseData.IconPath)
}
inline void SkillBaseData::set_iconpath(const char* value, size_t size) {
  set_has_iconpath();
  if (iconpath_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    iconpath_ = new ::std::string;
  }
  iconpath_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:pb.SkillBaseData.IconPath)
}
inline ::std::string* SkillBaseData::mutable_iconpath() {
  set_has_iconpath();
  if (iconpath_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    iconpath_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:pb.SkillBaseData.IconPath)
  return iconpath_;
}
inline ::std::string* SkillBaseData::release_iconpath() {
  clear_has_iconpath();
  if (iconpath_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = iconpath_;
    iconpath_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void SkillBaseData::set_allocated_iconpath(::std::string* iconpath) {
  if (iconpath_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete iconpath_;
  }
  if (iconpath) {
    set_has_iconpath();
    iconpath_ = iconpath;
  } else {
    clear_has_iconpath();
    iconpath_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:pb.SkillBaseData.IconPath)
}

// optional int32 FrontDistance = 36;
inline bool SkillBaseData::has_frontdistance() const {
  return (_has_bits_[0] & 0x01000000u) != 0;
}
inline void SkillBaseData::set_has_frontdistance() {
  _has_bits_[0] |= 0x01000000u;
}
inline void SkillBaseData::clear_has_frontdistance() {
  _has_bits_[0] &= ~0x01000000u;
}
inline void SkillBaseData::clear_frontdistance() {
  frontdistance_ = 0;
  clear_has_frontdistance();
}
inline ::google::protobuf::int32 SkillBaseData::frontdistance() const {
  // @@protoc_insertion_point(field_get:pb.SkillBaseData.FrontDistance)
  return frontdistance_;
}
inline void SkillBaseData::set_frontdistance(::google::protobuf::int32 value) {
  set_has_frontdistance();
  frontdistance_ = value;
  // @@protoc_insertion_point(field_set:pb.SkillBaseData.FrontDistance)
}

// repeated float ScenePos = 37;
inline int SkillBaseData::scenepos_size() const {
  return scenepos_.size();
}
inline void SkillBaseData::clear_scenepos() {
  scenepos_.Clear();
}
inline float SkillBaseData::scenepos(int index) const {
  // @@protoc_insertion_point(field_get:pb.SkillBaseData.ScenePos)
  return scenepos_.Get(index);
}
inline void SkillBaseData::set_scenepos(int index, float value) {
  scenepos_.Set(index, value);
  // @@protoc_insertion_point(field_set:pb.SkillBaseData.ScenePos)
}
inline void SkillBaseData::add_scenepos(float value) {
  scenepos_.Add(value);
  // @@protoc_insertion_point(field_add:pb.SkillBaseData.ScenePos)
}
inline const ::google::protobuf::RepeatedField< float >&
SkillBaseData::scenepos() const {
  // @@protoc_insertion_point(field_list:pb.SkillBaseData.ScenePos)
  return scenepos_;
}
inline ::google::protobuf::RepeatedField< float >*
SkillBaseData::mutable_scenepos() {
  // @@protoc_insertion_point(field_mutable_list:pb.SkillBaseData.ScenePos)
  return &scenepos_;
}

// optional int32 SkillTunnel = 38;
inline bool SkillBaseData::has_skilltunnel() const {
  return (_has_bits_[0] & 0x04000000u) != 0;
}
inline void SkillBaseData::set_has_skilltunnel() {
  _has_bits_[0] |= 0x04000000u;
}
inline void SkillBaseData::clear_has_skilltunnel() {
  _has_bits_[0] &= ~0x04000000u;
}
inline void SkillBaseData::clear_skilltunnel() {
  skilltunnel_ = 0;
  clear_has_skilltunnel();
}
inline ::google::protobuf::int32 SkillBaseData::skilltunnel() const {
  // @@protoc_insertion_point(field_get:pb.SkillBaseData.SkillTunnel)
  return skilltunnel_;
}
inline void SkillBaseData::set_skilltunnel(::google::protobuf::int32 value) {
  set_has_skilltunnel();
  skilltunnel_ = value;
  // @@protoc_insertion_point(field_set:pb.SkillBaseData.SkillTunnel)
}

// optional string SkillLastEffect = 39;
inline bool SkillBaseData::has_skilllasteffect() const {
  return (_has_bits_[0] & 0x08000000u) != 0;
}
inline void SkillBaseData::set_has_skilllasteffect() {
  _has_bits_[0] |= 0x08000000u;
}
inline void SkillBaseData::clear_has_skilllasteffect() {
  _has_bits_[0] &= ~0x08000000u;
}
inline void SkillBaseData::clear_skilllasteffect() {
  if (skilllasteffect_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    skilllasteffect_->clear();
  }
  clear_has_skilllasteffect();
}
inline const ::std::string& SkillBaseData::skilllasteffect() const {
  // @@protoc_insertion_point(field_get:pb.SkillBaseData.SkillLastEffect)
  return *skilllasteffect_;
}
inline void SkillBaseData::set_skilllasteffect(const ::std::string& value) {
  set_has_skilllasteffect();
  if (skilllasteffect_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    skilllasteffect_ = new ::std::string;
  }
  skilllasteffect_->assign(value);
  // @@protoc_insertion_point(field_set:pb.SkillBaseData.SkillLastEffect)
}
inline void SkillBaseData::set_skilllasteffect(const char* value) {
  set_has_skilllasteffect();
  if (skilllasteffect_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    skilllasteffect_ = new ::std::string;
  }
  skilllasteffect_->assign(value);
  // @@protoc_insertion_point(field_set_char:pb.SkillBaseData.SkillLastEffect)
}
inline void SkillBaseData::set_skilllasteffect(const char* value, size_t size) {
  set_has_skilllasteffect();
  if (skilllasteffect_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    skilllasteffect_ = new ::std::string;
  }
  skilllasteffect_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:pb.SkillBaseData.SkillLastEffect)
}
inline ::std::string* SkillBaseData::mutable_skilllasteffect() {
  set_has_skilllasteffect();
  if (skilllasteffect_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    skilllasteffect_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:pb.SkillBaseData.SkillLastEffect)
  return skilllasteffect_;
}
inline ::std::string* SkillBaseData::release_skilllasteffect() {
  clear_has_skilllasteffect();
  if (skilllasteffect_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = skilllasteffect_;
    skilllasteffect_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void SkillBaseData::set_allocated_skilllasteffect(::std::string* skilllasteffect) {
  if (skilllasteffect_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete skilllasteffect_;
  }
  if (skilllasteffect) {
    set_has_skilllasteffect();
    skilllasteffect_ = skilllasteffect;
  } else {
    clear_has_skilllasteffect();
    skilllasteffect_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:pb.SkillBaseData.SkillLastEffect)
}

// optional int32 SkillShowTime = 40;
inline bool SkillBaseData::has_skillshowtime() const {
  return (_has_bits_[0] & 0x10000000u) != 0;
}
inline void SkillBaseData::set_has_skillshowtime() {
  _has_bits_[0] |= 0x10000000u;
}
inline void SkillBaseData::clear_has_skillshowtime() {
  _has_bits_[0] &= ~0x10000000u;
}
inline void SkillBaseData::clear_skillshowtime() {
  skillshowtime_ = 0;
  clear_has_skillshowtime();
}
inline ::google::protobuf::int32 SkillBaseData::skillshowtime() const {
  // @@protoc_insertion_point(field_get:pb.SkillBaseData.SkillShowTime)
  return skillshowtime_;
}
inline void SkillBaseData::set_skillshowtime(::google::protobuf::int32 value) {
  set_has_skillshowtime();
  skillshowtime_ = value;
  // @@protoc_insertion_point(field_set:pb.SkillBaseData.SkillShowTime)
}

// repeated int32 TriggerSkillArr = 41;
inline int SkillBaseData::triggerskillarr_size() const {
  return triggerskillarr_.size();
}
inline void SkillBaseData::clear_triggerskillarr() {
  triggerskillarr_.Clear();
}
inline ::google::protobuf::int32 SkillBaseData::triggerskillarr(int index) const {
  // @@protoc_insertion_point(field_get:pb.SkillBaseData.TriggerSkillArr)
  return triggerskillarr_.Get(index);
}
inline void SkillBaseData::set_triggerskillarr(int index, ::google::protobuf::int32 value) {
  triggerskillarr_.Set(index, value);
  // @@protoc_insertion_point(field_set:pb.SkillBaseData.TriggerSkillArr)
}
inline void SkillBaseData::add_triggerskillarr(::google::protobuf::int32 value) {
  triggerskillarr_.Add(value);
  // @@protoc_insertion_point(field_add:pb.SkillBaseData.TriggerSkillArr)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
SkillBaseData::triggerskillarr() const {
  // @@protoc_insertion_point(field_list:pb.SkillBaseData.TriggerSkillArr)
  return triggerskillarr_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
SkillBaseData::mutable_triggerskillarr() {
  // @@protoc_insertion_point(field_mutable_list:pb.SkillBaseData.TriggerSkillArr)
  return &triggerskillarr_;
}

// optional bool RefTargetIncludeSelf = 42;
inline bool SkillBaseData::has_reftargetincludeself() const {
  return (_has_bits_[0] & 0x40000000u) != 0;
}
inline void SkillBaseData::set_has_reftargetincludeself() {
  _has_bits_[0] |= 0x40000000u;
}
inline void SkillBaseData::clear_has_reftargetincludeself() {
  _has_bits_[0] &= ~0x40000000u;
}
inline void SkillBaseData::clear_reftargetincludeself() {
  reftargetincludeself_ = false;
  clear_has_reftargetincludeself();
}
inline bool SkillBaseData::reftargetincludeself() const {
  // @@protoc_insertion_point(field_get:pb.SkillBaseData.RefTargetIncludeSelf)
  return reftargetincludeself_;
}
inline void SkillBaseData::set_reftargetincludeself(bool value) {
  set_has_reftargetincludeself();
  reftargetincludeself_ = value;
  // @@protoc_insertion_point(field_set:pb.SkillBaseData.RefTargetIncludeSelf)
}

// optional int32 TriggerSkillChance = 43;
inline bool SkillBaseData::has_triggerskillchance() const {
  return (_has_bits_[0] & 0x80000000u) != 0;
}
inline void SkillBaseData::set_has_triggerskillchance() {
  _has_bits_[0] |= 0x80000000u;
}
inline void SkillBaseData::clear_has_triggerskillchance() {
  _has_bits_[0] &= ~0x80000000u;
}
inline void SkillBaseData::clear_triggerskillchance() {
  triggerskillchance_ = 0;
  clear_has_triggerskillchance();
}
inline ::google::protobuf::int32 SkillBaseData::triggerskillchance() const {
  // @@protoc_insertion_point(field_get:pb.SkillBaseData.TriggerSkillChance)
  return triggerskillchance_;
}
inline void SkillBaseData::set_triggerskillchance(::google::protobuf::int32 value) {
  set_has_triggerskillchance();
  triggerskillchance_ = value;
  // @@protoc_insertion_point(field_set:pb.SkillBaseData.TriggerSkillChance)
}

// optional bool PartofRageSkill = 45;
inline bool SkillBaseData::has_partofrageskill() const {
  return (_has_bits_[1] & 0x00000001u) != 0;
}
inline void SkillBaseData::set_has_partofrageskill() {
  _has_bits_[1] |= 0x00000001u;
}
inline void SkillBaseData::clear_has_partofrageskill() {
  _has_bits_[1] &= ~0x00000001u;
}
inline void SkillBaseData::clear_partofrageskill() {
  partofrageskill_ = false;
  clear_has_partofrageskill();
}
inline bool SkillBaseData::partofrageskill() const {
  // @@protoc_insertion_point(field_get:pb.SkillBaseData.PartofRageSkill)
  return partofrageskill_;
}
inline void SkillBaseData::set_partofrageskill(bool value) {
  set_has_partofrageskill();
  partofrageskill_ = value;
  // @@protoc_insertion_point(field_set:pb.SkillBaseData.PartofRageSkill)
}

// optional int32 SkillActionLastTime = 46;
inline bool SkillBaseData::has_skillactionlasttime() const {
  return (_has_bits_[1] & 0x00000002u) != 0;
}
inline void SkillBaseData::set_has_skillactionlasttime() {
  _has_bits_[1] |= 0x00000002u;
}
inline void SkillBaseData::clear_has_skillactionlasttime() {
  _has_bits_[1] &= ~0x00000002u;
}
inline void SkillBaseData::clear_skillactionlasttime() {
  skillactionlasttime_ = 0;
  clear_has_skillactionlasttime();
}
inline ::google::protobuf::int32 SkillBaseData::skillactionlasttime() const {
  // @@protoc_insertion_point(field_get:pb.SkillBaseData.SkillActionLastTime)
  return skillactionlasttime_;
}
inline void SkillBaseData::set_skillactionlasttime(::google::protobuf::int32 value) {
  set_has_skillactionlasttime();
  skillactionlasttime_ = value;
  // @@protoc_insertion_point(field_set:pb.SkillBaseData.SkillActionLastTime)
}

// optional string MusouTimeLine = 47;
inline bool SkillBaseData::has_musoutimeline() const {
  return (_has_bits_[1] & 0x00000004u) != 0;
}
inline void SkillBaseData::set_has_musoutimeline() {
  _has_bits_[1] |= 0x00000004u;
}
inline void SkillBaseData::clear_has_musoutimeline() {
  _has_bits_[1] &= ~0x00000004u;
}
inline void SkillBaseData::clear_musoutimeline() {
  if (musoutimeline_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    musoutimeline_->clear();
  }
  clear_has_musoutimeline();
}
inline const ::std::string& SkillBaseData::musoutimeline() const {
  // @@protoc_insertion_point(field_get:pb.SkillBaseData.MusouTimeLine)
  return *musoutimeline_;
}
inline void SkillBaseData::set_musoutimeline(const ::std::string& value) {
  set_has_musoutimeline();
  if (musoutimeline_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    musoutimeline_ = new ::std::string;
  }
  musoutimeline_->assign(value);
  // @@protoc_insertion_point(field_set:pb.SkillBaseData.MusouTimeLine)
}
inline void SkillBaseData::set_musoutimeline(const char* value) {
  set_has_musoutimeline();
  if (musoutimeline_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    musoutimeline_ = new ::std::string;
  }
  musoutimeline_->assign(value);
  // @@protoc_insertion_point(field_set_char:pb.SkillBaseData.MusouTimeLine)
}
inline void SkillBaseData::set_musoutimeline(const char* value, size_t size) {
  set_has_musoutimeline();
  if (musoutimeline_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    musoutimeline_ = new ::std::string;
  }
  musoutimeline_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:pb.SkillBaseData.MusouTimeLine)
}
inline ::std::string* SkillBaseData::mutable_musoutimeline() {
  set_has_musoutimeline();
  if (musoutimeline_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    musoutimeline_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:pb.SkillBaseData.MusouTimeLine)
  return musoutimeline_;
}
inline ::std::string* SkillBaseData::release_musoutimeline() {
  clear_has_musoutimeline();
  if (musoutimeline_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = musoutimeline_;
    musoutimeline_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void SkillBaseData::set_allocated_musoutimeline(::std::string* musoutimeline) {
  if (musoutimeline_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete musoutimeline_;
  }
  if (musoutimeline) {
    set_has_musoutimeline();
    musoutimeline_ = musoutimeline;
  } else {
    clear_has_musoutimeline();
    musoutimeline_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:pb.SkillBaseData.MusouTimeLine)
}

// optional int32 SkillPriority = 48;
inline bool SkillBaseData::has_skillpriority() const {
  return (_has_bits_[1] & 0x00000008u) != 0;
}
inline void SkillBaseData::set_has_skillpriority() {
  _has_bits_[1] |= 0x00000008u;
}
inline void SkillBaseData::clear_has_skillpriority() {
  _has_bits_[1] &= ~0x00000008u;
}
inline void SkillBaseData::clear_skillpriority() {
  skillpriority_ = 0;
  clear_has_skillpriority();
}
inline ::google::protobuf::int32 SkillBaseData::skillpriority() const {
  // @@protoc_insertion_point(field_get:pb.SkillBaseData.SkillPriority)
  return skillpriority_;
}
inline void SkillBaseData::set_skillpriority(::google::protobuf::int32 value) {
  set_has_skillpriority();
  skillpriority_ = value;
  // @@protoc_insertion_point(field_set:pb.SkillBaseData.SkillPriority)
}

// optional string RageSkillSpine = 49;
inline bool SkillBaseData::has_rageskillspine() const {
  return (_has_bits_[1] & 0x00000010u) != 0;
}
inline void SkillBaseData::set_has_rageskillspine() {
  _has_bits_[1] |= 0x00000010u;
}
inline void SkillBaseData::clear_has_rageskillspine() {
  _has_bits_[1] &= ~0x00000010u;
}
inline void SkillBaseData::clear_rageskillspine() {
  if (rageskillspine_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    rageskillspine_->clear();
  }
  clear_has_rageskillspine();
}
inline const ::std::string& SkillBaseData::rageskillspine() const {
  // @@protoc_insertion_point(field_get:pb.SkillBaseData.RageSkillSpine)
  return *rageskillspine_;
}
inline void SkillBaseData::set_rageskillspine(const ::std::string& value) {
  set_has_rageskillspine();
  if (rageskillspine_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    rageskillspine_ = new ::std::string;
  }
  rageskillspine_->assign(value);
  // @@protoc_insertion_point(field_set:pb.SkillBaseData.RageSkillSpine)
}
inline void SkillBaseData::set_rageskillspine(const char* value) {
  set_has_rageskillspine();
  if (rageskillspine_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    rageskillspine_ = new ::std::string;
  }
  rageskillspine_->assign(value);
  // @@protoc_insertion_point(field_set_char:pb.SkillBaseData.RageSkillSpine)
}
inline void SkillBaseData::set_rageskillspine(const char* value, size_t size) {
  set_has_rageskillspine();
  if (rageskillspine_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    rageskillspine_ = new ::std::string;
  }
  rageskillspine_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:pb.SkillBaseData.RageSkillSpine)
}
inline ::std::string* SkillBaseData::mutable_rageskillspine() {
  set_has_rageskillspine();
  if (rageskillspine_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    rageskillspine_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:pb.SkillBaseData.RageSkillSpine)
  return rageskillspine_;
}
inline ::std::string* SkillBaseData::release_rageskillspine() {
  clear_has_rageskillspine();
  if (rageskillspine_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = rageskillspine_;
    rageskillspine_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void SkillBaseData::set_allocated_rageskillspine(::std::string* rageskillspine) {
  if (rageskillspine_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete rageskillspine_;
  }
  if (rageskillspine) {
    set_has_rageskillspine();
    rageskillspine_ = rageskillspine;
  } else {
    clear_has_rageskillspine();
    rageskillspine_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:pb.SkillBaseData.RageSkillSpine)
}

// optional string RageSkillEffect = 50;
inline bool SkillBaseData::has_rageskilleffect() const {
  return (_has_bits_[1] & 0x00000020u) != 0;
}
inline void SkillBaseData::set_has_rageskilleffect() {
  _has_bits_[1] |= 0x00000020u;
}
inline void SkillBaseData::clear_has_rageskilleffect() {
  _has_bits_[1] &= ~0x00000020u;
}
inline void SkillBaseData::clear_rageskilleffect() {
  if (rageskilleffect_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    rageskilleffect_->clear();
  }
  clear_has_rageskilleffect();
}
inline const ::std::string& SkillBaseData::rageskilleffect() const {
  // @@protoc_insertion_point(field_get:pb.SkillBaseData.RageSkillEffect)
  return *rageskilleffect_;
}
inline void SkillBaseData::set_rageskilleffect(const ::std::string& value) {
  set_has_rageskilleffect();
  if (rageskilleffect_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    rageskilleffect_ = new ::std::string;
  }
  rageskilleffect_->assign(value);
  // @@protoc_insertion_point(field_set:pb.SkillBaseData.RageSkillEffect)
}
inline void SkillBaseData::set_rageskilleffect(const char* value) {
  set_has_rageskilleffect();
  if (rageskilleffect_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    rageskilleffect_ = new ::std::string;
  }
  rageskilleffect_->assign(value);
  // @@protoc_insertion_point(field_set_char:pb.SkillBaseData.RageSkillEffect)
}
inline void SkillBaseData::set_rageskilleffect(const char* value, size_t size) {
  set_has_rageskilleffect();
  if (rageskilleffect_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    rageskilleffect_ = new ::std::string;
  }
  rageskilleffect_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:pb.SkillBaseData.RageSkillEffect)
}
inline ::std::string* SkillBaseData::mutable_rageskilleffect() {
  set_has_rageskilleffect();
  if (rageskilleffect_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    rageskilleffect_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:pb.SkillBaseData.RageSkillEffect)
  return rageskilleffect_;
}
inline ::std::string* SkillBaseData::release_rageskilleffect() {
  clear_has_rageskilleffect();
  if (rageskilleffect_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = rageskilleffect_;
    rageskilleffect_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void SkillBaseData::set_allocated_rageskilleffect(::std::string* rageskilleffect) {
  if (rageskilleffect_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete rageskilleffect_;
  }
  if (rageskilleffect) {
    set_has_rageskilleffect();
    rageskilleffect_ = rageskilleffect;
  } else {
    clear_has_rageskilleffect();
    rageskilleffect_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:pb.SkillBaseData.RageSkillEffect)
}

// optional string RageSkillAudio = 51;
inline bool SkillBaseData::has_rageskillaudio() const {
  return (_has_bits_[1] & 0x00000040u) != 0;
}
inline void SkillBaseData::set_has_rageskillaudio() {
  _has_bits_[1] |= 0x00000040u;
}
inline void SkillBaseData::clear_has_rageskillaudio() {
  _has_bits_[1] &= ~0x00000040u;
}
inline void SkillBaseData::clear_rageskillaudio() {
  if (rageskillaudio_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    rageskillaudio_->clear();
  }
  clear_has_rageskillaudio();
}
inline const ::std::string& SkillBaseData::rageskillaudio() const {
  // @@protoc_insertion_point(field_get:pb.SkillBaseData.RageSkillAudio)
  return *rageskillaudio_;
}
inline void SkillBaseData::set_rageskillaudio(const ::std::string& value) {
  set_has_rageskillaudio();
  if (rageskillaudio_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    rageskillaudio_ = new ::std::string;
  }
  rageskillaudio_->assign(value);
  // @@protoc_insertion_point(field_set:pb.SkillBaseData.RageSkillAudio)
}
inline void SkillBaseData::set_rageskillaudio(const char* value) {
  set_has_rageskillaudio();
  if (rageskillaudio_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    rageskillaudio_ = new ::std::string;
  }
  rageskillaudio_->assign(value);
  // @@protoc_insertion_point(field_set_char:pb.SkillBaseData.RageSkillAudio)
}
inline void SkillBaseData::set_rageskillaudio(const char* value, size_t size) {
  set_has_rageskillaudio();
  if (rageskillaudio_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    rageskillaudio_ = new ::std::string;
  }
  rageskillaudio_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:pb.SkillBaseData.RageSkillAudio)
}
inline ::std::string* SkillBaseData::mutable_rageskillaudio() {
  set_has_rageskillaudio();
  if (rageskillaudio_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    rageskillaudio_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:pb.SkillBaseData.RageSkillAudio)
  return rageskillaudio_;
}
inline ::std::string* SkillBaseData::release_rageskillaudio() {
  clear_has_rageskillaudio();
  if (rageskillaudio_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = rageskillaudio_;
    rageskillaudio_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void SkillBaseData::set_allocated_rageskillaudio(::std::string* rageskillaudio) {
  if (rageskillaudio_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete rageskillaudio_;
  }
  if (rageskillaudio) {
    set_has_rageskillaudio();
    rageskillaudio_ = rageskillaudio;
  } else {
    clear_has_rageskillaudio();
    rageskillaudio_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:pb.SkillBaseData.RageSkillAudio)
}

// optional string DeathAnim = 52;
inline bool SkillBaseData::has_deathanim() const {
  return (_has_bits_[1] & 0x00000080u) != 0;
}
inline void SkillBaseData::set_has_deathanim() {
  _has_bits_[1] |= 0x00000080u;
}
inline void SkillBaseData::clear_has_deathanim() {
  _has_bits_[1] &= ~0x00000080u;
}
inline void SkillBaseData::clear_deathanim() {
  if (deathanim_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    deathanim_->clear();
  }
  clear_has_deathanim();
}
inline const ::std::string& SkillBaseData::deathanim() const {
  // @@protoc_insertion_point(field_get:pb.SkillBaseData.DeathAnim)
  return *deathanim_;
}
inline void SkillBaseData::set_deathanim(const ::std::string& value) {
  set_has_deathanim();
  if (deathanim_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    deathanim_ = new ::std::string;
  }
  deathanim_->assign(value);
  // @@protoc_insertion_point(field_set:pb.SkillBaseData.DeathAnim)
}
inline void SkillBaseData::set_deathanim(const char* value) {
  set_has_deathanim();
  if (deathanim_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    deathanim_ = new ::std::string;
  }
  deathanim_->assign(value);
  // @@protoc_insertion_point(field_set_char:pb.SkillBaseData.DeathAnim)
}
inline void SkillBaseData::set_deathanim(const char* value, size_t size) {
  set_has_deathanim();
  if (deathanim_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    deathanim_ = new ::std::string;
  }
  deathanim_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:pb.SkillBaseData.DeathAnim)
}
inline ::std::string* SkillBaseData::mutable_deathanim() {
  set_has_deathanim();
  if (deathanim_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    deathanim_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:pb.SkillBaseData.DeathAnim)
  return deathanim_;
}
inline ::std::string* SkillBaseData::release_deathanim() {
  clear_has_deathanim();
  if (deathanim_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = deathanim_;
    deathanim_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void SkillBaseData::set_allocated_deathanim(::std::string* deathanim) {
  if (deathanim_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete deathanim_;
  }
  if (deathanim) {
    set_has_deathanim();
    deathanim_ = deathanim;
  } else {
    clear_has_deathanim();
    deathanim_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:pb.SkillBaseData.DeathAnim)
}

// optional .pb.SkillSpecialData SkillSpecialData = 53;
inline bool SkillBaseData::has_skillspecialdata() const {
  return (_has_bits_[1] & 0x00000100u) != 0;
}
inline void SkillBaseData::set_has_skillspecialdata() {
  _has_bits_[1] |= 0x00000100u;
}
inline void SkillBaseData::clear_has_skillspecialdata() {
  _has_bits_[1] &= ~0x00000100u;
}
inline void SkillBaseData::clear_skillspecialdata() {
  if (skillspecialdata_ != NULL) skillspecialdata_->::pb::SkillSpecialData::Clear();
  clear_has_skillspecialdata();
}
inline const ::pb::SkillSpecialData& SkillBaseData::skillspecialdata() const {
  // @@protoc_insertion_point(field_get:pb.SkillBaseData.SkillSpecialData)
  return skillspecialdata_ != NULL ? *skillspecialdata_ : *default_instance_->skillspecialdata_;
}
inline ::pb::SkillSpecialData* SkillBaseData::mutable_skillspecialdata() {
  set_has_skillspecialdata();
  if (skillspecialdata_ == NULL) skillspecialdata_ = new ::pb::SkillSpecialData;
  // @@protoc_insertion_point(field_mutable:pb.SkillBaseData.SkillSpecialData)
  return skillspecialdata_;
}
inline ::pb::SkillSpecialData* SkillBaseData::release_skillspecialdata() {
  clear_has_skillspecialdata();
  ::pb::SkillSpecialData* temp = skillspecialdata_;
  skillspecialdata_ = NULL;
  return temp;
}
inline void SkillBaseData::set_allocated_skillspecialdata(::pb::SkillSpecialData* skillspecialdata) {
  delete skillspecialdata_;
  skillspecialdata_ = skillspecialdata;
  if (skillspecialdata) {
    set_has_skillspecialdata();
  } else {
    clear_has_skillspecialdata();
  }
  // @@protoc_insertion_point(field_set_allocated:pb.SkillBaseData.SkillSpecialData)
}

// optional bool ShowRageSkillDamage = 54;
inline bool SkillBaseData::has_showrageskilldamage() const {
  return (_has_bits_[1] & 0x00000200u) != 0;
}
inline void SkillBaseData::set_has_showrageskilldamage() {
  _has_bits_[1] |= 0x00000200u;
}
inline void SkillBaseData::clear_has_showrageskilldamage() {
  _has_bits_[1] &= ~0x00000200u;
}
inline void SkillBaseData::clear_showrageskilldamage() {
  showrageskilldamage_ = false;
  clear_has_showrageskilldamage();
}
inline bool SkillBaseData::showrageskilldamage() const {
  // @@protoc_insertion_point(field_get:pb.SkillBaseData.ShowRageSkillDamage)
  return showrageskilldamage_;
}
inline void SkillBaseData::set_showrageskilldamage(bool value) {
  set_has_showrageskilldamage();
  showrageskilldamage_ = value;
  // @@protoc_insertion_point(field_set:pb.SkillBaseData.ShowRageSkillDamage)
}

// repeated int32 SkillReplace = 55;
inline int SkillBaseData::skillreplace_size() const {
  return skillreplace_.size();
}
inline void SkillBaseData::clear_skillreplace() {
  skillreplace_.Clear();
}
inline ::google::protobuf::int32 SkillBaseData::skillreplace(int index) const {
  // @@protoc_insertion_point(field_get:pb.SkillBaseData.SkillReplace)
  return skillreplace_.Get(index);
}
inline void SkillBaseData::set_skillreplace(int index, ::google::protobuf::int32 value) {
  skillreplace_.Set(index, value);
  // @@protoc_insertion_point(field_set:pb.SkillBaseData.SkillReplace)
}
inline void SkillBaseData::add_skillreplace(::google::protobuf::int32 value) {
  skillreplace_.Add(value);
  // @@protoc_insertion_point(field_add:pb.SkillBaseData.SkillReplace)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
SkillBaseData::skillreplace() const {
  // @@protoc_insertion_point(field_list:pb.SkillBaseData.SkillReplace)
  return skillreplace_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
SkillBaseData::mutable_skillreplace() {
  // @@protoc_insertion_point(field_mutable_list:pb.SkillBaseData.SkillReplace)
  return &skillreplace_;
}

// optional int32 RageBonusAfterKill = 56;
inline bool SkillBaseData::has_ragebonusafterkill() const {
  return (_has_bits_[1] & 0x00000800u) != 0;
}
inline void SkillBaseData::set_has_ragebonusafterkill() {
  _has_bits_[1] |= 0x00000800u;
}
inline void SkillBaseData::clear_has_ragebonusafterkill() {
  _has_bits_[1] &= ~0x00000800u;
}
inline void SkillBaseData::clear_ragebonusafterkill() {
  ragebonusafterkill_ = 0;
  clear_has_ragebonusafterkill();
}
inline ::google::protobuf::int32 SkillBaseData::ragebonusafterkill() const {
  // @@protoc_insertion_point(field_get:pb.SkillBaseData.RageBonusAfterKill)
  return ragebonusafterkill_;
}
inline void SkillBaseData::set_ragebonusafterkill(::google::protobuf::int32 value) {
  set_has_ragebonusafterkill();
  ragebonusafterkill_ = value;
  // @@protoc_insertion_point(field_set:pb.SkillBaseData.RageBonusAfterKill)
}

// optional .pb.SkillCastType SkillCastType = 57;
inline bool SkillBaseData::has_skillcasttype() const {
  return (_has_bits_[1] & 0x00001000u) != 0;
}
inline void SkillBaseData::set_has_skillcasttype() {
  _has_bits_[1] |= 0x00001000u;
}
inline void SkillBaseData::clear_has_skillcasttype() {
  _has_bits_[1] &= ~0x00001000u;
}
inline void SkillBaseData::clear_skillcasttype() {
  if (skillcasttype_ != NULL) skillcasttype_->::pb::SkillCastType::Clear();
  clear_has_skillcasttype();
}
inline const ::pb::SkillCastType& SkillBaseData::skillcasttype() const {
  // @@protoc_insertion_point(field_get:pb.SkillBaseData.SkillCastType)
  return skillcasttype_ != NULL ? *skillcasttype_ : *default_instance_->skillcasttype_;
}
inline ::pb::SkillCastType* SkillBaseData::mutable_skillcasttype() {
  set_has_skillcasttype();
  if (skillcasttype_ == NULL) skillcasttype_ = new ::pb::SkillCastType;
  // @@protoc_insertion_point(field_mutable:pb.SkillBaseData.SkillCastType)
  return skillcasttype_;
}
inline ::pb::SkillCastType* SkillBaseData::release_skillcasttype() {
  clear_has_skillcasttype();
  ::pb::SkillCastType* temp = skillcasttype_;
  skillcasttype_ = NULL;
  return temp;
}
inline void SkillBaseData::set_allocated_skillcasttype(::pb::SkillCastType* skillcasttype) {
  delete skillcasttype_;
  skillcasttype_ = skillcasttype;
  if (skillcasttype) {
    set_has_skillcasttype();
  } else {
    clear_has_skillcasttype();
  }
  // @@protoc_insertion_point(field_set_allocated:pb.SkillBaseData.SkillCastType)
}

// repeated string MusouCameraLookatInfo = 58;
inline int SkillBaseData::musoucameralookatinfo_size() const {
  return musoucameralookatinfo_.size();
}
inline void SkillBaseData::clear_musoucameralookatinfo() {
  musoucameralookatinfo_.Clear();
}
inline const ::std::string& SkillBaseData::musoucameralookatinfo(int index) const {
  // @@protoc_insertion_point(field_get:pb.SkillBaseData.MusouCameraLookatInfo)
  return musoucameralookatinfo_.Get(index);
}
inline ::std::string* SkillBaseData::mutable_musoucameralookatinfo(int index) {
  // @@protoc_insertion_point(field_mutable:pb.SkillBaseData.MusouCameraLookatInfo)
  return musoucameralookatinfo_.Mutable(index);
}
inline void SkillBaseData::set_musoucameralookatinfo(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:pb.SkillBaseData.MusouCameraLookatInfo)
  musoucameralookatinfo_.Mutable(index)->assign(value);
}
inline void SkillBaseData::set_musoucameralookatinfo(int index, const char* value) {
  musoucameralookatinfo_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:pb.SkillBaseData.MusouCameraLookatInfo)
}
inline void SkillBaseData::set_musoucameralookatinfo(int index, const char* value, size_t size) {
  musoucameralookatinfo_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:pb.SkillBaseData.MusouCameraLookatInfo)
}
inline ::std::string* SkillBaseData::add_musoucameralookatinfo() {
  return musoucameralookatinfo_.Add();
}
inline void SkillBaseData::add_musoucameralookatinfo(const ::std::string& value) {
  musoucameralookatinfo_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:pb.SkillBaseData.MusouCameraLookatInfo)
}
inline void SkillBaseData::add_musoucameralookatinfo(const char* value) {
  musoucameralookatinfo_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:pb.SkillBaseData.MusouCameraLookatInfo)
}
inline void SkillBaseData::add_musoucameralookatinfo(const char* value, size_t size) {
  musoucameralookatinfo_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:pb.SkillBaseData.MusouCameraLookatInfo)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
SkillBaseData::musoucameralookatinfo() const {
  // @@protoc_insertion_point(field_list:pb.SkillBaseData.MusouCameraLookatInfo)
  return musoucameralookatinfo_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
SkillBaseData::mutable_musoucameralookatinfo() {
  // @@protoc_insertion_point(field_mutable_list:pb.SkillBaseData.MusouCameraLookatInfo)
  return &musoucameralookatinfo_;
}

// optional .pb.SkillTargetPriority RefPriority = 59;
inline bool SkillBaseData::has_refpriority() const {
  return (_has_bits_[1] & 0x00004000u) != 0;
}
inline void SkillBaseData::set_has_refpriority() {
  _has_bits_[1] |= 0x00004000u;
}
inline void SkillBaseData::clear_has_refpriority() {
  _has_bits_[1] &= ~0x00004000u;
}
inline void SkillBaseData::clear_refpriority() {
  if (refpriority_ != NULL) refpriority_->::pb::SkillTargetPriority::Clear();
  clear_has_refpriority();
}
inline const ::pb::SkillTargetPriority& SkillBaseData::refpriority() const {
  // @@protoc_insertion_point(field_get:pb.SkillBaseData.RefPriority)
  return refpriority_ != NULL ? *refpriority_ : *default_instance_->refpriority_;
}
inline ::pb::SkillTargetPriority* SkillBaseData::mutable_refpriority() {
  set_has_refpriority();
  if (refpriority_ == NULL) refpriority_ = new ::pb::SkillTargetPriority;
  // @@protoc_insertion_point(field_mutable:pb.SkillBaseData.RefPriority)
  return refpriority_;
}
inline ::pb::SkillTargetPriority* SkillBaseData::release_refpriority() {
  clear_has_refpriority();
  ::pb::SkillTargetPriority* temp = refpriority_;
  refpriority_ = NULL;
  return temp;
}
inline void SkillBaseData::set_allocated_refpriority(::pb::SkillTargetPriority* refpriority) {
  delete refpriority_;
  refpriority_ = refpriority;
  if (refpriority) {
    set_has_refpriority();
  } else {
    clear_has_refpriority();
  }
  // @@protoc_insertion_point(field_set_allocated:pb.SkillBaseData.RefPriority)
}

// optional int32 SpeBuffIDBack = 60;
inline bool SkillBaseData::has_spebuffidback() const {
  return (_has_bits_[1] & 0x00008000u) != 0;
}
inline void SkillBaseData::set_has_spebuffidback() {
  _has_bits_[1] |= 0x00008000u;
}
inline void SkillBaseData::clear_has_spebuffidback() {
  _has_bits_[1] &= ~0x00008000u;
}
inline void SkillBaseData::clear_spebuffidback() {
  spebuffidback_ = 0;
  clear_has_spebuffidback();
}
inline ::google::protobuf::int32 SkillBaseData::spebuffidback() const {
  // @@protoc_insertion_point(field_get:pb.SkillBaseData.SpeBuffIDBack)
  return spebuffidback_;
}
inline void SkillBaseData::set_spebuffidback(::google::protobuf::int32 value) {
  set_has_spebuffidback();
  spebuffidback_ = value;
  // @@protoc_insertion_point(field_set:pb.SkillBaseData.SpeBuffIDBack)
}

// optional bool AutoRageSkill = 61;
inline bool SkillBaseData::has_autorageskill() const {
  return (_has_bits_[1] & 0x00010000u) != 0;
}
inline void SkillBaseData::set_has_autorageskill() {
  _has_bits_[1] |= 0x00010000u;
}
inline void SkillBaseData::clear_has_autorageskill() {
  _has_bits_[1] &= ~0x00010000u;
}
inline void SkillBaseData::clear_autorageskill() {
  autorageskill_ = false;
  clear_has_autorageskill();
}
inline bool SkillBaseData::autorageskill() const {
  // @@protoc_insertion_point(field_get:pb.SkillBaseData.AutoRageSkill)
  return autorageskill_;
}
inline void SkillBaseData::set_autorageskill(bool value) {
  set_has_autorageskill();
  autorageskill_ = value;
  // @@protoc_insertion_point(field_set:pb.SkillBaseData.AutoRageSkill)
}

// optional bool SubRageSmoothly = 62;
inline bool SkillBaseData::has_subragesmoothly() const {
  return (_has_bits_[1] & 0x00020000u) != 0;
}
inline void SkillBaseData::set_has_subragesmoothly() {
  _has_bits_[1] |= 0x00020000u;
}
inline void SkillBaseData::clear_has_subragesmoothly() {
  _has_bits_[1] &= ~0x00020000u;
}
inline void SkillBaseData::clear_subragesmoothly() {
  subragesmoothly_ = false;
  clear_has_subragesmoothly();
}
inline bool SkillBaseData::subragesmoothly() const {
  // @@protoc_insertion_point(field_get:pb.SkillBaseData.SubRageSmoothly)
  return subragesmoothly_;
}
inline void SkillBaseData::set_subragesmoothly(bool value) {
  set_has_subragesmoothly();
  subragesmoothly_ = value;
  // @@protoc_insertion_point(field_set:pb.SkillBaseData.SubRageSmoothly)
}

// optional int32 SubRageDuration = 63;
inline bool SkillBaseData::has_subrageduration() const {
  return (_has_bits_[1] & 0x00040000u) != 0;
}
inline void SkillBaseData::set_has_subrageduration() {
  _has_bits_[1] |= 0x00040000u;
}
inline void SkillBaseData::clear_has_subrageduration() {
  _has_bits_[1] &= ~0x00040000u;
}
inline void SkillBaseData::clear_subrageduration() {
  subrageduration_ = 0;
  clear_has_subrageduration();
}
inline ::google::protobuf::int32 SkillBaseData::subrageduration() const {
  // @@protoc_insertion_point(field_get:pb.SkillBaseData.SubRageDuration)
  return subrageduration_;
}
inline void SkillBaseData::set_subrageduration(::google::protobuf::int32 value) {
  set_has_subrageduration();
  subrageduration_ = value;
  // @@protoc_insertion_point(field_set:pb.SkillBaseData.SubRageDuration)
}

// optional bool LastEffForwardSelf = 64;
inline bool SkillBaseData::has_lasteffforwardself() const {
  return (_has_bits_[1] & 0x00080000u) != 0;
}
inline void SkillBaseData::set_has_lasteffforwardself() {
  _has_bits_[1] |= 0x00080000u;
}
inline void SkillBaseData::clear_has_lasteffforwardself() {
  _has_bits_[1] &= ~0x00080000u;
}
inline void SkillBaseData::clear_lasteffforwardself() {
  lasteffforwardself_ = false;
  clear_has_lasteffforwardself();
}
inline bool SkillBaseData::lasteffforwardself() const {
  // @@protoc_insertion_point(field_get:pb.SkillBaseData.LastEffForwardSelf)
  return lasteffforwardself_;
}
inline void SkillBaseData::set_lasteffforwardself(bool value) {
  set_has_lasteffforwardself();
  lasteffforwardself_ = value;
  // @@protoc_insertion_point(field_set:pb.SkillBaseData.LastEffForwardSelf)
}

// optional int32 LocalizeSkillId = 65;
inline bool SkillBaseData::has_localizeskillid() const {
  return (_has_bits_[1] & 0x00100000u) != 0;
}
inline void SkillBaseData::set_has_localizeskillid() {
  _has_bits_[1] |= 0x00100000u;
}
inline void SkillBaseData::clear_has_localizeskillid() {
  _has_bits_[1] &= ~0x00100000u;
}
inline void SkillBaseData::clear_localizeskillid() {
  localizeskillid_ = 0;
  clear_has_localizeskillid();
}
inline ::google::protobuf::int32 SkillBaseData::localizeskillid() const {
  // @@protoc_insertion_point(field_get:pb.SkillBaseData.LocalizeSkillId)
  return localizeskillid_;
}
inline void SkillBaseData::set_localizeskillid(::google::protobuf::int32 value) {
  set_has_localizeskillid();
  localizeskillid_ = value;
  // @@protoc_insertion_point(field_set:pb.SkillBaseData.LocalizeSkillId)
}

// repeated int32 ScenePosIndex = 66;
inline int SkillBaseData::sceneposindex_size() const {
  return sceneposindex_.size();
}
inline void SkillBaseData::clear_sceneposindex() {
  sceneposindex_.Clear();
}
inline ::google::protobuf::int32 SkillBaseData::sceneposindex(int index) const {
  // @@protoc_insertion_point(field_get:pb.SkillBaseData.ScenePosIndex)
  return sceneposindex_.Get(index);
}
inline void SkillBaseData::set_sceneposindex(int index, ::google::protobuf::int32 value) {
  sceneposindex_.Set(index, value);
  // @@protoc_insertion_point(field_set:pb.SkillBaseData.ScenePosIndex)
}
inline void SkillBaseData::add_sceneposindex(::google::protobuf::int32 value) {
  sceneposindex_.Add(value);
  // @@protoc_insertion_point(field_add:pb.SkillBaseData.ScenePosIndex)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
SkillBaseData::sceneposindex() const {
  // @@protoc_insertion_point(field_list:pb.SkillBaseData.ScenePosIndex)
  return sceneposindex_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
SkillBaseData::mutable_sceneposindex() {
  // @@protoc_insertion_point(field_mutable_list:pb.SkillBaseData.ScenePosIndex)
  return &sceneposindex_;
}

// optional int32 DamageSpecialType = 67;
inline bool SkillBaseData::has_damagespecialtype() const {
  return (_has_bits_[1] & 0x00400000u) != 0;
}
inline void SkillBaseData::set_has_damagespecialtype() {
  _has_bits_[1] |= 0x00400000u;
}
inline void SkillBaseData::clear_has_damagespecialtype() {
  _has_bits_[1] &= ~0x00400000u;
}
inline void SkillBaseData::clear_damagespecialtype() {
  damagespecialtype_ = 0;
  clear_has_damagespecialtype();
}
inline ::google::protobuf::int32 SkillBaseData::damagespecialtype() const {
  // @@protoc_insertion_point(field_get:pb.SkillBaseData.DamageSpecialType)
  return damagespecialtype_;
}
inline void SkillBaseData::set_damagespecialtype(::google::protobuf::int32 value) {
  set_has_damagespecialtype();
  damagespecialtype_ = value;
  // @@protoc_insertion_point(field_set:pb.SkillBaseData.DamageSpecialType)
}

// optional bool IsSemiAutoRageSkill = 68;
inline bool SkillBaseData::has_issemiautorageskill() const {
  return (_has_bits_[1] & 0x00800000u) != 0;
}
inline void SkillBaseData::set_has_issemiautorageskill() {
  _has_bits_[1] |= 0x00800000u;
}
inline void SkillBaseData::clear_has_issemiautorageskill() {
  _has_bits_[1] &= ~0x00800000u;
}
inline void SkillBaseData::clear_issemiautorageskill() {
  issemiautorageskill_ = false;
  clear_has_issemiautorageskill();
}
inline bool SkillBaseData::issemiautorageskill() const {
  // @@protoc_insertion_point(field_get:pb.SkillBaseData.IsSemiAutoRageSkill)
  return issemiautorageskill_;
}
inline void SkillBaseData::set_issemiautorageskill(bool value) {
  set_has_issemiautorageskill();
  issemiautorageskill_ = value;
  // @@protoc_insertion_point(field_set:pb.SkillBaseData.IsSemiAutoRageSkill)
}

// optional int32 SemiAutoSkillTimeToLive = 69;
inline bool SkillBaseData::has_semiautoskilltimetolive() const {
  return (_has_bits_[1] & 0x01000000u) != 0;
}
inline void SkillBaseData::set_has_semiautoskilltimetolive() {
  _has_bits_[1] |= 0x01000000u;
}
inline void SkillBaseData::clear_has_semiautoskilltimetolive() {
  _has_bits_[1] &= ~0x01000000u;
}
inline void SkillBaseData::clear_semiautoskilltimetolive() {
  semiautoskilltimetolive_ = 0;
  clear_has_semiautoskilltimetolive();
}
inline ::google::protobuf::int32 SkillBaseData::semiautoskilltimetolive() const {
  // @@protoc_insertion_point(field_get:pb.SkillBaseData.SemiAutoSkillTimeToLive)
  return semiautoskilltimetolive_;
}
inline void SkillBaseData::set_semiautoskilltimetolive(::google::protobuf::int32 value) {
  set_has_semiautoskilltimetolive();
  semiautoskilltimetolive_ = value;
  // @@protoc_insertion_point(field_set:pb.SkillBaseData.SemiAutoSkillTimeToLive)
}

// optional int32 SemiAutoSkillInterval = 70;
inline bool SkillBaseData::has_semiautoskillinterval() const {
  return (_has_bits_[1] & 0x02000000u) != 0;
}
inline void SkillBaseData::set_has_semiautoskillinterval() {
  _has_bits_[1] |= 0x02000000u;
}
inline void SkillBaseData::clear_has_semiautoskillinterval() {
  _has_bits_[1] &= ~0x02000000u;
}
inline void SkillBaseData::clear_semiautoskillinterval() {
  semiautoskillinterval_ = 0;
  clear_has_semiautoskillinterval();
}
inline ::google::protobuf::int32 SkillBaseData::semiautoskillinterval() const {
  // @@protoc_insertion_point(field_get:pb.SkillBaseData.SemiAutoSkillInterval)
  return semiautoskillinterval_;
}
inline void SkillBaseData::set_semiautoskillinterval(::google::protobuf::int32 value) {
  set_has_semiautoskillinterval();
  semiautoskillinterval_ = value;
  // @@protoc_insertion_point(field_set:pb.SkillBaseData.SemiAutoSkillInterval)
}

// repeated int32 SemiAutoSkillChain = 71;
inline int SkillBaseData::semiautoskillchain_size() const {
  return semiautoskillchain_.size();
}
inline void SkillBaseData::clear_semiautoskillchain() {
  semiautoskillchain_.Clear();
}
inline ::google::protobuf::int32 SkillBaseData::semiautoskillchain(int index) const {
  // @@protoc_insertion_point(field_get:pb.SkillBaseData.SemiAutoSkillChain)
  return semiautoskillchain_.Get(index);
}
inline void SkillBaseData::set_semiautoskillchain(int index, ::google::protobuf::int32 value) {
  semiautoskillchain_.Set(index, value);
  // @@protoc_insertion_point(field_set:pb.SkillBaseData.SemiAutoSkillChain)
}
inline void SkillBaseData::add_semiautoskillchain(::google::protobuf::int32 value) {
  semiautoskillchain_.Add(value);
  // @@protoc_insertion_point(field_add:pb.SkillBaseData.SemiAutoSkillChain)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
SkillBaseData::semiautoskillchain() const {
  // @@protoc_insertion_point(field_list:pb.SkillBaseData.SemiAutoSkillChain)
  return semiautoskillchain_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
SkillBaseData::mutable_semiautoskillchain() {
  // @@protoc_insertion_point(field_mutable_list:pb.SkillBaseData.SemiAutoSkillChain)
  return &semiautoskillchain_;
}

// optional bool IsBlockPriority = 72;
inline bool SkillBaseData::has_isblockpriority() const {
  return (_has_bits_[1] & 0x08000000u) != 0;
}
inline void SkillBaseData::set_has_isblockpriority() {
  _has_bits_[1] |= 0x08000000u;
}
inline void SkillBaseData::clear_has_isblockpriority() {
  _has_bits_[1] &= ~0x08000000u;
}
inline void SkillBaseData::clear_isblockpriority() {
  isblockpriority_ = false;
  clear_has_isblockpriority();
}
inline bool SkillBaseData::isblockpriority() const {
  // @@protoc_insertion_point(field_get:pb.SkillBaseData.IsBlockPriority)
  return isblockpriority_;
}
inline void SkillBaseData::set_isblockpriority(bool value) {
  set_has_isblockpriority();
  isblockpriority_ = value;
  // @@protoc_insertion_point(field_set:pb.SkillBaseData.IsBlockPriority)
}

// optional bool IgnoreInterruptEffect = 73;
inline bool SkillBaseData::has_ignoreinterrupteffect() const {
  return (_has_bits_[1] & 0x10000000u) != 0;
}
inline void SkillBaseData::set_has_ignoreinterrupteffect() {
  _has_bits_[1] |= 0x10000000u;
}
inline void SkillBaseData::clear_has_ignoreinterrupteffect() {
  _has_bits_[1] &= ~0x10000000u;
}
inline void SkillBaseData::clear_ignoreinterrupteffect() {
  ignoreinterrupteffect_ = false;
  clear_has_ignoreinterrupteffect();
}
inline bool SkillBaseData::ignoreinterrupteffect() const {
  // @@protoc_insertion_point(field_get:pb.SkillBaseData.IgnoreInterruptEffect)
  return ignoreinterrupteffect_;
}
inline void SkillBaseData::set_ignoreinterrupteffect(bool value) {
  set_has_ignoreinterrupteffect();
  ignoreinterrupteffect_ = value;
  // @@protoc_insertion_point(field_set:pb.SkillBaseData.IgnoreInterruptEffect)
}

// repeated int32 SkillEnergyLevel = 74;
inline int SkillBaseData::skillenergylevel_size() const {
  return skillenergylevel_.size();
}
inline void SkillBaseData::clear_skillenergylevel() {
  skillenergylevel_.Clear();
}
inline ::google::protobuf::int32 SkillBaseData::skillenergylevel(int index) const {
  // @@protoc_insertion_point(field_get:pb.SkillBaseData.SkillEnergyLevel)
  return skillenergylevel_.Get(index);
}
inline void SkillBaseData::set_skillenergylevel(int index, ::google::protobuf::int32 value) {
  skillenergylevel_.Set(index, value);
  // @@protoc_insertion_point(field_set:pb.SkillBaseData.SkillEnergyLevel)
}
inline void SkillBaseData::add_skillenergylevel(::google::protobuf::int32 value) {
  skillenergylevel_.Add(value);
  // @@protoc_insertion_point(field_add:pb.SkillBaseData.SkillEnergyLevel)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
SkillBaseData::skillenergylevel() const {
  // @@protoc_insertion_point(field_list:pb.SkillBaseData.SkillEnergyLevel)
  return skillenergylevel_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
SkillBaseData::mutable_skillenergylevel() {
  // @@protoc_insertion_point(field_mutable_list:pb.SkillBaseData.SkillEnergyLevel)
  return &skillenergylevel_;
}

// optional int32 PerfectInterruptDuration = 75;
inline bool SkillBaseData::has_perfectinterruptduration() const {
  return (_has_bits_[1] & 0x40000000u) != 0;
}
inline void SkillBaseData::set_has_perfectinterruptduration() {
  _has_bits_[1] |= 0x40000000u;
}
inline void SkillBaseData::clear_has_perfectinterruptduration() {
  _has_bits_[1] &= ~0x40000000u;
}
inline void SkillBaseData::clear_perfectinterruptduration() {
  perfectinterruptduration_ = 0;
  clear_has_perfectinterruptduration();
}
inline ::google::protobuf::int32 SkillBaseData::perfectinterruptduration() const {
  // @@protoc_insertion_point(field_get:pb.SkillBaseData.PerfectInterruptDuration)
  return perfectinterruptduration_;
}
inline void SkillBaseData::set_perfectinterruptduration(::google::protobuf::int32 value) {
  set_has_perfectinterruptduration();
  perfectinterruptduration_ = value;
  // @@protoc_insertion_point(field_set:pb.SkillBaseData.PerfectInterruptDuration)
}

// optional int32 SkillEndTime = 76;
inline bool SkillBaseData::has_skillendtime() const {
  return (_has_bits_[1] & 0x80000000u) != 0;
}
inline void SkillBaseData::set_has_skillendtime() {
  _has_bits_[1] |= 0x80000000u;
}
inline void SkillBaseData::clear_has_skillendtime() {
  _has_bits_[1] &= ~0x80000000u;
}
inline void SkillBaseData::clear_skillendtime() {
  skillendtime_ = 0;
  clear_has_skillendtime();
}
inline ::google::protobuf::int32 SkillBaseData::skillendtime() const {
  // @@protoc_insertion_point(field_get:pb.SkillBaseData.SkillEndTime)
  return skillendtime_;
}
inline void SkillBaseData::set_skillendtime(::google::protobuf::int32 value) {
  set_has_skillendtime();
  skillendtime_ = value;
  // @@protoc_insertion_point(field_set:pb.SkillBaseData.SkillEndTime)
}

// optional bool Lockon = 77;
inline bool SkillBaseData::has_lockon() const {
  return (_has_bits_[2] & 0x00000001u) != 0;
}
inline void SkillBaseData::set_has_lockon() {
  _has_bits_[2] |= 0x00000001u;
}
inline void SkillBaseData::clear_has_lockon() {
  _has_bits_[2] &= ~0x00000001u;
}
inline void SkillBaseData::clear_lockon() {
  lockon_ = false;
  clear_has_lockon();
}
inline bool SkillBaseData::lockon() const {
  // @@protoc_insertion_point(field_get:pb.SkillBaseData.Lockon)
  return lockon_;
}
inline void SkillBaseData::set_lockon(bool value) {
  set_has_lockon();
  lockon_ = value;
  // @@protoc_insertion_point(field_set:pb.SkillBaseData.Lockon)
}

// optional bool IsNeedHighligh = 78;
inline bool SkillBaseData::has_isneedhighligh() const {
  return (_has_bits_[2] & 0x00000002u) != 0;
}
inline void SkillBaseData::set_has_isneedhighligh() {
  _has_bits_[2] |= 0x00000002u;
}
inline void SkillBaseData::clear_has_isneedhighligh() {
  _has_bits_[2] &= ~0x00000002u;
}
inline void SkillBaseData::clear_isneedhighligh() {
  isneedhighligh_ = false;
  clear_has_isneedhighligh();
}
inline bool SkillBaseData::isneedhighligh() const {
  // @@protoc_insertion_point(field_get:pb.SkillBaseData.IsNeedHighligh)
  return isneedhighligh_;
}
inline void SkillBaseData::set_isneedhighligh(bool value) {
  set_has_isneedhighligh();
  isneedhighligh_ = value;
  // @@protoc_insertion_point(field_set:pb.SkillBaseData.IsNeedHighligh)
}

// optional int32 KeepDyingDuration = 79;
inline bool SkillBaseData::has_keepdyingduration() const {
  return (_has_bits_[2] & 0x00000004u) != 0;
}
inline void SkillBaseData::set_has_keepdyingduration() {
  _has_bits_[2] |= 0x00000004u;
}
inline void SkillBaseData::clear_has_keepdyingduration() {
  _has_bits_[2] &= ~0x00000004u;
}
inline void SkillBaseData::clear_keepdyingduration() {
  keepdyingduration_ = 0;
  clear_has_keepdyingduration();
}
inline ::google::protobuf::int32 SkillBaseData::keepdyingduration() const {
  // @@protoc_insertion_point(field_get:pb.SkillBaseData.KeepDyingDuration)
  return keepdyingduration_;
}
inline void SkillBaseData::set_keepdyingduration(::google::protobuf::int32 value) {
  set_has_keepdyingduration();
  keepdyingduration_ = value;
  // @@protoc_insertion_point(field_set:pb.SkillBaseData.KeepDyingDuration)
}

// optional bool InterruptBossSkill = 80;
inline bool SkillBaseData::has_interruptbossskill() const {
  return (_has_bits_[2] & 0x00000008u) != 0;
}
inline void SkillBaseData::set_has_interruptbossskill() {
  _has_bits_[2] |= 0x00000008u;
}
inline void SkillBaseData::clear_has_interruptbossskill() {
  _has_bits_[2] &= ~0x00000008u;
}
inline void SkillBaseData::clear_interruptbossskill() {
  interruptbossskill_ = false;
  clear_has_interruptbossskill();
}
inline bool SkillBaseData::interruptbossskill() const {
  // @@protoc_insertion_point(field_get:pb.SkillBaseData.InterruptBossSkill)
  return interruptbossskill_;
}
inline void SkillBaseData::set_interruptbossskill(bool value) {
  set_has_interruptbossskill();
  interruptbossskill_ = value;
  // @@protoc_insertion_point(field_set:pb.SkillBaseData.InterruptBossSkill)
}

// optional bool SkipIdleOnEnd = 81;
inline bool SkillBaseData::has_skipidleonend() const {
  return (_has_bits_[2] & 0x00000010u) != 0;
}
inline void SkillBaseData::set_has_skipidleonend() {
  _has_bits_[2] |= 0x00000010u;
}
inline void SkillBaseData::clear_has_skipidleonend() {
  _has_bits_[2] &= ~0x00000010u;
}
inline void SkillBaseData::clear_skipidleonend() {
  skipidleonend_ = false;
  clear_has_skipidleonend();
}
inline bool SkillBaseData::skipidleonend() const {
  // @@protoc_insertion_point(field_get:pb.SkillBaseData.SkipIdleOnEnd)
  return skipidleonend_;
}
inline void SkillBaseData::set_skipidleonend(bool value) {
  set_has_skipidleonend();
  skipidleonend_ = value;
  // @@protoc_insertion_point(field_set:pb.SkillBaseData.SkipIdleOnEnd)
}

// optional bool RageSkillInterruptable = 82;
inline bool SkillBaseData::has_rageskillinterruptable() const {
  return (_has_bits_[2] & 0x00000020u) != 0;
}
inline void SkillBaseData::set_has_rageskillinterruptable() {
  _has_bits_[2] |= 0x00000020u;
}
inline void SkillBaseData::clear_has_rageskillinterruptable() {
  _has_bits_[2] &= ~0x00000020u;
}
inline void SkillBaseData::clear_rageskillinterruptable() {
  rageskillinterruptable_ = false;
  clear_has_rageskillinterruptable();
}
inline bool SkillBaseData::rageskillinterruptable() const {
  // @@protoc_insertion_point(field_get:pb.SkillBaseData.RageSkillInterruptable)
  return rageskillinterruptable_;
}
inline void SkillBaseData::set_rageskillinterruptable(bool value) {
  set_has_rageskillinterruptable();
  rageskillinterruptable_ = value;
  // @@protoc_insertion_point(field_set:pb.SkillBaseData.RageSkillInterruptable)
}

// repeated int32 ArmySkillInfo = 83;
inline int SkillBaseData::armyskillinfo_size() const {
  return armyskillinfo_.size();
}
inline void SkillBaseData::clear_armyskillinfo() {
  armyskillinfo_.Clear();
}
inline ::google::protobuf::int32 SkillBaseData::armyskillinfo(int index) const {
  // @@protoc_insertion_point(field_get:pb.SkillBaseData.ArmySkillInfo)
  return armyskillinfo_.Get(index);
}
inline void SkillBaseData::set_armyskillinfo(int index, ::google::protobuf::int32 value) {
  armyskillinfo_.Set(index, value);
  // @@protoc_insertion_point(field_set:pb.SkillBaseData.ArmySkillInfo)
}
inline void SkillBaseData::add_armyskillinfo(::google::protobuf::int32 value) {
  armyskillinfo_.Add(value);
  // @@protoc_insertion_point(field_add:pb.SkillBaseData.ArmySkillInfo)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
SkillBaseData::armyskillinfo() const {
  // @@protoc_insertion_point(field_list:pb.SkillBaseData.ArmySkillInfo)
  return armyskillinfo_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
SkillBaseData::mutable_armyskillinfo() {
  // @@protoc_insertion_point(field_mutable_list:pb.SkillBaseData.ArmySkillInfo)
  return &armyskillinfo_;
}

// optional bool IgnoreNoSkill = 84;
inline bool SkillBaseData::has_ignorenoskill() const {
  return (_has_bits_[2] & 0x00000080u) != 0;
}
inline void SkillBaseData::set_has_ignorenoskill() {
  _has_bits_[2] |= 0x00000080u;
}
inline void SkillBaseData::clear_has_ignorenoskill() {
  _has_bits_[2] &= ~0x00000080u;
}
inline void SkillBaseData::clear_ignorenoskill() {
  ignorenoskill_ = false;
  clear_has_ignorenoskill();
}
inline bool SkillBaseData::ignorenoskill() const {
  // @@protoc_insertion_point(field_get:pb.SkillBaseData.IgnoreNoSkill)
  return ignorenoskill_;
}
inline void SkillBaseData::set_ignorenoskill(bool value) {
  set_has_ignorenoskill();
  ignorenoskill_ = value;
  // @@protoc_insertion_point(field_set:pb.SkillBaseData.IgnoreNoSkill)
}

// optional int32 RefTargetSummonType = 85;
inline bool SkillBaseData::has_reftargetsummontype() const {
  return (_has_bits_[2] & 0x00000100u) != 0;
}
inline void SkillBaseData::set_has_reftargetsummontype() {
  _has_bits_[2] |= 0x00000100u;
}
inline void SkillBaseData::clear_has_reftargetsummontype() {
  _has_bits_[2] &= ~0x00000100u;
}
inline void SkillBaseData::clear_reftargetsummontype() {
  reftargetsummontype_ = 0;
  clear_has_reftargetsummontype();
}
inline ::google::protobuf::int32 SkillBaseData::reftargetsummontype() const {
  // @@protoc_insertion_point(field_get:pb.SkillBaseData.RefTargetSummonType)
  return reftargetsummontype_;
}
inline void SkillBaseData::set_reftargetsummontype(::google::protobuf::int32 value) {
  set_has_reftargetsummontype();
  reftargetsummontype_ = value;
  // @@protoc_insertion_point(field_set:pb.SkillBaseData.RefTargetSummonType)
}

// optional int32 LevelCoolingTimeGrowth = 86;
inline bool SkillBaseData::has_levelcoolingtimegrowth() const {
  return (_has_bits_[2] & 0x00000200u) != 0;
}
inline void SkillBaseData::set_has_levelcoolingtimegrowth() {
  _has_bits_[2] |= 0x00000200u;
}
inline void SkillBaseData::clear_has_levelcoolingtimegrowth() {
  _has_bits_[2] &= ~0x00000200u;
}
inline void SkillBaseData::clear_levelcoolingtimegrowth() {
  levelcoolingtimegrowth_ = 0;
  clear_has_levelcoolingtimegrowth();
}
inline ::google::protobuf::int32 SkillBaseData::levelcoolingtimegrowth() const {
  // @@protoc_insertion_point(field_get:pb.SkillBaseData.LevelCoolingTimeGrowth)
  return levelcoolingtimegrowth_;
}
inline void SkillBaseData::set_levelcoolingtimegrowth(::google::protobuf::int32 value) {
  set_has_levelcoolingtimegrowth();
  levelcoolingtimegrowth_ = value;
  // @@protoc_insertion_point(field_set:pb.SkillBaseData.LevelCoolingTimeGrowth)
}

// repeated int32 TargetProfessions = 87;
inline int SkillBaseData::targetprofessions_size() const {
  return targetprofessions_.size();
}
inline void SkillBaseData::clear_targetprofessions() {
  targetprofessions_.Clear();
}
inline ::google::protobuf::int32 SkillBaseData::targetprofessions(int index) const {
  // @@protoc_insertion_point(field_get:pb.SkillBaseData.TargetProfessions)
  return targetprofessions_.Get(index);
}
inline void SkillBaseData::set_targetprofessions(int index, ::google::protobuf::int32 value) {
  targetprofessions_.Set(index, value);
  // @@protoc_insertion_point(field_set:pb.SkillBaseData.TargetProfessions)
}
inline void SkillBaseData::add_targetprofessions(::google::protobuf::int32 value) {
  targetprofessions_.Add(value);
  // @@protoc_insertion_point(field_add:pb.SkillBaseData.TargetProfessions)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
SkillBaseData::targetprofessions() const {
  // @@protoc_insertion_point(field_list:pb.SkillBaseData.TargetProfessions)
  return targetprofessions_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
SkillBaseData::mutable_targetprofessions() {
  // @@protoc_insertion_point(field_mutable_list:pb.SkillBaseData.TargetProfessions)
  return &targetprofessions_;
}

// optional int32 ArcherParam1 = 88;
inline bool SkillBaseData::has_archerparam1() const {
  return (_has_bits_[2] & 0x00000800u) != 0;
}
inline void SkillBaseData::set_has_archerparam1() {
  _has_bits_[2] |= 0x00000800u;
}
inline void SkillBaseData::clear_has_archerparam1() {
  _has_bits_[2] &= ~0x00000800u;
}
inline void SkillBaseData::clear_archerparam1() {
  archerparam1_ = 0;
  clear_has_archerparam1();
}
inline ::google::protobuf::int32 SkillBaseData::archerparam1() const {
  // @@protoc_insertion_point(field_get:pb.SkillBaseData.ArcherParam1)
  return archerparam1_;
}
inline void SkillBaseData::set_archerparam1(::google::protobuf::int32 value) {
  set_has_archerparam1();
  archerparam1_ = value;
  // @@protoc_insertion_point(field_set:pb.SkillBaseData.ArcherParam1)
}

// optional int32 ArcherParam2 = 89;
inline bool SkillBaseData::has_archerparam2() const {
  return (_has_bits_[2] & 0x00001000u) != 0;
}
inline void SkillBaseData::set_has_archerparam2() {
  _has_bits_[2] |= 0x00001000u;
}
inline void SkillBaseData::clear_has_archerparam2() {
  _has_bits_[2] &= ~0x00001000u;
}
inline void SkillBaseData::clear_archerparam2() {
  archerparam2_ = 0;
  clear_has_archerparam2();
}
inline ::google::protobuf::int32 SkillBaseData::archerparam2() const {
  // @@protoc_insertion_point(field_get:pb.SkillBaseData.ArcherParam2)
  return archerparam2_;
}
inline void SkillBaseData::set_archerparam2(::google::protobuf::int32 value) {
  set_has_archerparam2();
  archerparam2_ = value;
  // @@protoc_insertion_point(field_set:pb.SkillBaseData.ArcherParam2)
}

// -------------------------------------------------------------------

// SkillSpecialData

// repeated int32 RageSkillCameraUp = 1;
inline int SkillSpecialData::rageskillcameraup_size() const {
  return rageskillcameraup_.size();
}
inline void SkillSpecialData::clear_rageskillcameraup() {
  rageskillcameraup_.Clear();
}
inline ::google::protobuf::int32 SkillSpecialData::rageskillcameraup(int index) const {
  // @@protoc_insertion_point(field_get:pb.SkillSpecialData.RageSkillCameraUp)
  return rageskillcameraup_.Get(index);
}
inline void SkillSpecialData::set_rageskillcameraup(int index, ::google::protobuf::int32 value) {
  rageskillcameraup_.Set(index, value);
  // @@protoc_insertion_point(field_set:pb.SkillSpecialData.RageSkillCameraUp)
}
inline void SkillSpecialData::add_rageskillcameraup(::google::protobuf::int32 value) {
  rageskillcameraup_.Add(value);
  // @@protoc_insertion_point(field_add:pb.SkillSpecialData.RageSkillCameraUp)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
SkillSpecialData::rageskillcameraup() const {
  // @@protoc_insertion_point(field_list:pb.SkillSpecialData.RageSkillCameraUp)
  return rageskillcameraup_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
SkillSpecialData::mutable_rageskillcameraup() {
  // @@protoc_insertion_point(field_mutable_list:pb.SkillSpecialData.RageSkillCameraUp)
  return &rageskillcameraup_;
}

// repeated int32 RageSkillCameraUpSpeedTime = 2;
inline int SkillSpecialData::rageskillcameraupspeedtime_size() const {
  return rageskillcameraupspeedtime_.size();
}
inline void SkillSpecialData::clear_rageskillcameraupspeedtime() {
  rageskillcameraupspeedtime_.Clear();
}
inline ::google::protobuf::int32 SkillSpecialData::rageskillcameraupspeedtime(int index) const {
  // @@protoc_insertion_point(field_get:pb.SkillSpecialData.RageSkillCameraUpSpeedTime)
  return rageskillcameraupspeedtime_.Get(index);
}
inline void SkillSpecialData::set_rageskillcameraupspeedtime(int index, ::google::protobuf::int32 value) {
  rageskillcameraupspeedtime_.Set(index, value);
  // @@protoc_insertion_point(field_set:pb.SkillSpecialData.RageSkillCameraUpSpeedTime)
}
inline void SkillSpecialData::add_rageskillcameraupspeedtime(::google::protobuf::int32 value) {
  rageskillcameraupspeedtime_.Add(value);
  // @@protoc_insertion_point(field_add:pb.SkillSpecialData.RageSkillCameraUpSpeedTime)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
SkillSpecialData::rageskillcameraupspeedtime() const {
  // @@protoc_insertion_point(field_list:pb.SkillSpecialData.RageSkillCameraUpSpeedTime)
  return rageskillcameraupspeedtime_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
SkillSpecialData::mutable_rageskillcameraupspeedtime() {
  // @@protoc_insertion_point(field_mutable_list:pb.SkillSpecialData.RageSkillCameraUpSpeedTime)
  return &rageskillcameraupspeedtime_;
}

// repeated int32 RageSkillCameraDown = 3;
inline int SkillSpecialData::rageskillcameradown_size() const {
  return rageskillcameradown_.size();
}
inline void SkillSpecialData::clear_rageskillcameradown() {
  rageskillcameradown_.Clear();
}
inline ::google::protobuf::int32 SkillSpecialData::rageskillcameradown(int index) const {
  // @@protoc_insertion_point(field_get:pb.SkillSpecialData.RageSkillCameraDown)
  return rageskillcameradown_.Get(index);
}
inline void SkillSpecialData::set_rageskillcameradown(int index, ::google::protobuf::int32 value) {
  rageskillcameradown_.Set(index, value);
  // @@protoc_insertion_point(field_set:pb.SkillSpecialData.RageSkillCameraDown)
}
inline void SkillSpecialData::add_rageskillcameradown(::google::protobuf::int32 value) {
  rageskillcameradown_.Add(value);
  // @@protoc_insertion_point(field_add:pb.SkillSpecialData.RageSkillCameraDown)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
SkillSpecialData::rageskillcameradown() const {
  // @@protoc_insertion_point(field_list:pb.SkillSpecialData.RageSkillCameraDown)
  return rageskillcameradown_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
SkillSpecialData::mutable_rageskillcameradown() {
  // @@protoc_insertion_point(field_mutable_list:pb.SkillSpecialData.RageSkillCameraDown)
  return &rageskillcameradown_;
}

// repeated int32 RageSkillCameraDownSpeedTime = 4;
inline int SkillSpecialData::rageskillcameradownspeedtime_size() const {
  return rageskillcameradownspeedtime_.size();
}
inline void SkillSpecialData::clear_rageskillcameradownspeedtime() {
  rageskillcameradownspeedtime_.Clear();
}
inline ::google::protobuf::int32 SkillSpecialData::rageskillcameradownspeedtime(int index) const {
  // @@protoc_insertion_point(field_get:pb.SkillSpecialData.RageSkillCameraDownSpeedTime)
  return rageskillcameradownspeedtime_.Get(index);
}
inline void SkillSpecialData::set_rageskillcameradownspeedtime(int index, ::google::protobuf::int32 value) {
  rageskillcameradownspeedtime_.Set(index, value);
  // @@protoc_insertion_point(field_set:pb.SkillSpecialData.RageSkillCameraDownSpeedTime)
}
inline void SkillSpecialData::add_rageskillcameradownspeedtime(::google::protobuf::int32 value) {
  rageskillcameradownspeedtime_.Add(value);
  // @@protoc_insertion_point(field_add:pb.SkillSpecialData.RageSkillCameraDownSpeedTime)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
SkillSpecialData::rageskillcameradownspeedtime() const {
  // @@protoc_insertion_point(field_list:pb.SkillSpecialData.RageSkillCameraDownSpeedTime)
  return rageskillcameradownspeedtime_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
SkillSpecialData::mutable_rageskillcameradownspeedtime() {
  // @@protoc_insertion_point(field_mutable_list:pb.SkillSpecialData.RageSkillCameraDownSpeedTime)
  return &rageskillcameradownspeedtime_;
}

// repeated int32 RageSkillCameraRecoverSpeedTime = 5;
inline int SkillSpecialData::rageskillcamerarecoverspeedtime_size() const {
  return rageskillcamerarecoverspeedtime_.size();
}
inline void SkillSpecialData::clear_rageskillcamerarecoverspeedtime() {
  rageskillcamerarecoverspeedtime_.Clear();
}
inline ::google::protobuf::int32 SkillSpecialData::rageskillcamerarecoverspeedtime(int index) const {
  // @@protoc_insertion_point(field_get:pb.SkillSpecialData.RageSkillCameraRecoverSpeedTime)
  return rageskillcamerarecoverspeedtime_.Get(index);
}
inline void SkillSpecialData::set_rageskillcamerarecoverspeedtime(int index, ::google::protobuf::int32 value) {
  rageskillcamerarecoverspeedtime_.Set(index, value);
  // @@protoc_insertion_point(field_set:pb.SkillSpecialData.RageSkillCameraRecoverSpeedTime)
}
inline void SkillSpecialData::add_rageskillcamerarecoverspeedtime(::google::protobuf::int32 value) {
  rageskillcamerarecoverspeedtime_.Add(value);
  // @@protoc_insertion_point(field_add:pb.SkillSpecialData.RageSkillCameraRecoverSpeedTime)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
SkillSpecialData::rageskillcamerarecoverspeedtime() const {
  // @@protoc_insertion_point(field_list:pb.SkillSpecialData.RageSkillCameraRecoverSpeedTime)
  return rageskillcamerarecoverspeedtime_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
SkillSpecialData::mutable_rageskillcamerarecoverspeedtime() {
  // @@protoc_insertion_point(field_mutable_list:pb.SkillSpecialData.RageSkillCameraRecoverSpeedTime)
  return &rageskillcamerarecoverspeedtime_;
}

// optional string RageSkillSpine = 6;
inline bool SkillSpecialData::has_rageskillspine() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void SkillSpecialData::set_has_rageskillspine() {
  _has_bits_[0] |= 0x00000020u;
}
inline void SkillSpecialData::clear_has_rageskillspine() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void SkillSpecialData::clear_rageskillspine() {
  if (rageskillspine_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    rageskillspine_->clear();
  }
  clear_has_rageskillspine();
}
inline const ::std::string& SkillSpecialData::rageskillspine() const {
  // @@protoc_insertion_point(field_get:pb.SkillSpecialData.RageSkillSpine)
  return *rageskillspine_;
}
inline void SkillSpecialData::set_rageskillspine(const ::std::string& value) {
  set_has_rageskillspine();
  if (rageskillspine_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    rageskillspine_ = new ::std::string;
  }
  rageskillspine_->assign(value);
  // @@protoc_insertion_point(field_set:pb.SkillSpecialData.RageSkillSpine)
}
inline void SkillSpecialData::set_rageskillspine(const char* value) {
  set_has_rageskillspine();
  if (rageskillspine_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    rageskillspine_ = new ::std::string;
  }
  rageskillspine_->assign(value);
  // @@protoc_insertion_point(field_set_char:pb.SkillSpecialData.RageSkillSpine)
}
inline void SkillSpecialData::set_rageskillspine(const char* value, size_t size) {
  set_has_rageskillspine();
  if (rageskillspine_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    rageskillspine_ = new ::std::string;
  }
  rageskillspine_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:pb.SkillSpecialData.RageSkillSpine)
}
inline ::std::string* SkillSpecialData::mutable_rageskillspine() {
  set_has_rageskillspine();
  if (rageskillspine_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    rageskillspine_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:pb.SkillSpecialData.RageSkillSpine)
  return rageskillspine_;
}
inline ::std::string* SkillSpecialData::release_rageskillspine() {
  clear_has_rageskillspine();
  if (rageskillspine_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = rageskillspine_;
    rageskillspine_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void SkillSpecialData::set_allocated_rageskillspine(::std::string* rageskillspine) {
  if (rageskillspine_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete rageskillspine_;
  }
  if (rageskillspine) {
    set_has_rageskillspine();
    rageskillspine_ = rageskillspine;
  } else {
    clear_has_rageskillspine();
    rageskillspine_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:pb.SkillSpecialData.RageSkillSpine)
}

// optional string RageSkillEffect = 7;
inline bool SkillSpecialData::has_rageskilleffect() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void SkillSpecialData::set_has_rageskilleffect() {
  _has_bits_[0] |= 0x00000040u;
}
inline void SkillSpecialData::clear_has_rageskilleffect() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void SkillSpecialData::clear_rageskilleffect() {
  if (rageskilleffect_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    rageskilleffect_->clear();
  }
  clear_has_rageskilleffect();
}
inline const ::std::string& SkillSpecialData::rageskilleffect() const {
  // @@protoc_insertion_point(field_get:pb.SkillSpecialData.RageSkillEffect)
  return *rageskilleffect_;
}
inline void SkillSpecialData::set_rageskilleffect(const ::std::string& value) {
  set_has_rageskilleffect();
  if (rageskilleffect_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    rageskilleffect_ = new ::std::string;
  }
  rageskilleffect_->assign(value);
  // @@protoc_insertion_point(field_set:pb.SkillSpecialData.RageSkillEffect)
}
inline void SkillSpecialData::set_rageskilleffect(const char* value) {
  set_has_rageskilleffect();
  if (rageskilleffect_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    rageskilleffect_ = new ::std::string;
  }
  rageskilleffect_->assign(value);
  // @@protoc_insertion_point(field_set_char:pb.SkillSpecialData.RageSkillEffect)
}
inline void SkillSpecialData::set_rageskilleffect(const char* value, size_t size) {
  set_has_rageskilleffect();
  if (rageskilleffect_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    rageskilleffect_ = new ::std::string;
  }
  rageskilleffect_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:pb.SkillSpecialData.RageSkillEffect)
}
inline ::std::string* SkillSpecialData::mutable_rageskilleffect() {
  set_has_rageskilleffect();
  if (rageskilleffect_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    rageskilleffect_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:pb.SkillSpecialData.RageSkillEffect)
  return rageskilleffect_;
}
inline ::std::string* SkillSpecialData::release_rageskilleffect() {
  clear_has_rageskilleffect();
  if (rageskilleffect_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = rageskilleffect_;
    rageskilleffect_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void SkillSpecialData::set_allocated_rageskilleffect(::std::string* rageskilleffect) {
  if (rageskilleffect_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete rageskilleffect_;
  }
  if (rageskilleffect) {
    set_has_rageskilleffect();
    rageskilleffect_ = rageskilleffect;
  } else {
    clear_has_rageskilleffect();
    rageskilleffect_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:pb.SkillSpecialData.RageSkillEffect)
}

// optional string RageSkillAudio = 8;
inline bool SkillSpecialData::has_rageskillaudio() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void SkillSpecialData::set_has_rageskillaudio() {
  _has_bits_[0] |= 0x00000080u;
}
inline void SkillSpecialData::clear_has_rageskillaudio() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void SkillSpecialData::clear_rageskillaudio() {
  if (rageskillaudio_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    rageskillaudio_->clear();
  }
  clear_has_rageskillaudio();
}
inline const ::std::string& SkillSpecialData::rageskillaudio() const {
  // @@protoc_insertion_point(field_get:pb.SkillSpecialData.RageSkillAudio)
  return *rageskillaudio_;
}
inline void SkillSpecialData::set_rageskillaudio(const ::std::string& value) {
  set_has_rageskillaudio();
  if (rageskillaudio_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    rageskillaudio_ = new ::std::string;
  }
  rageskillaudio_->assign(value);
  // @@protoc_insertion_point(field_set:pb.SkillSpecialData.RageSkillAudio)
}
inline void SkillSpecialData::set_rageskillaudio(const char* value) {
  set_has_rageskillaudio();
  if (rageskillaudio_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    rageskillaudio_ = new ::std::string;
  }
  rageskillaudio_->assign(value);
  // @@protoc_insertion_point(field_set_char:pb.SkillSpecialData.RageSkillAudio)
}
inline void SkillSpecialData::set_rageskillaudio(const char* value, size_t size) {
  set_has_rageskillaudio();
  if (rageskillaudio_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    rageskillaudio_ = new ::std::string;
  }
  rageskillaudio_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:pb.SkillSpecialData.RageSkillAudio)
}
inline ::std::string* SkillSpecialData::mutable_rageskillaudio() {
  set_has_rageskillaudio();
  if (rageskillaudio_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    rageskillaudio_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:pb.SkillSpecialData.RageSkillAudio)
  return rageskillaudio_;
}
inline ::std::string* SkillSpecialData::release_rageskillaudio() {
  clear_has_rageskillaudio();
  if (rageskillaudio_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = rageskillaudio_;
    rageskillaudio_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void SkillSpecialData::set_allocated_rageskillaudio(::std::string* rageskillaudio) {
  if (rageskillaudio_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete rageskillaudio_;
  }
  if (rageskillaudio) {
    set_has_rageskillaudio();
    rageskillaudio_ = rageskillaudio;
  } else {
    clear_has_rageskillaudio();
    rageskillaudio_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:pb.SkillSpecialData.RageSkillAudio)
}

// repeated float RageSkillSpineAdjust = 9;
inline int SkillSpecialData::rageskillspineadjust_size() const {
  return rageskillspineadjust_.size();
}
inline void SkillSpecialData::clear_rageskillspineadjust() {
  rageskillspineadjust_.Clear();
}
inline float SkillSpecialData::rageskillspineadjust(int index) const {
  // @@protoc_insertion_point(field_get:pb.SkillSpecialData.RageSkillSpineAdjust)
  return rageskillspineadjust_.Get(index);
}
inline void SkillSpecialData::set_rageskillspineadjust(int index, float value) {
  rageskillspineadjust_.Set(index, value);
  // @@protoc_insertion_point(field_set:pb.SkillSpecialData.RageSkillSpineAdjust)
}
inline void SkillSpecialData::add_rageskillspineadjust(float value) {
  rageskillspineadjust_.Add(value);
  // @@protoc_insertion_point(field_add:pb.SkillSpecialData.RageSkillSpineAdjust)
}
inline const ::google::protobuf::RepeatedField< float >&
SkillSpecialData::rageskillspineadjust() const {
  // @@protoc_insertion_point(field_list:pb.SkillSpecialData.RageSkillSpineAdjust)
  return rageskillspineadjust_;
}
inline ::google::protobuf::RepeatedField< float >*
SkillSpecialData::mutable_rageskillspineadjust() {
  // @@protoc_insertion_point(field_mutable_list:pb.SkillSpecialData.RageSkillSpineAdjust)
  return &rageskillspineadjust_;
}

// optional bool ShowSkillLabel = 10;
inline bool SkillSpecialData::has_showskilllabel() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void SkillSpecialData::set_has_showskilllabel() {
  _has_bits_[0] |= 0x00000200u;
}
inline void SkillSpecialData::clear_has_showskilllabel() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void SkillSpecialData::clear_showskilllabel() {
  showskilllabel_ = false;
  clear_has_showskilllabel();
}
inline bool SkillSpecialData::showskilllabel() const {
  // @@protoc_insertion_point(field_get:pb.SkillSpecialData.ShowSkillLabel)
  return showskilllabel_;
}
inline void SkillSpecialData::set_showskilllabel(bool value) {
  set_has_showskilllabel();
  showskilllabel_ = value;
  // @@protoc_insertion_point(field_set:pb.SkillSpecialData.ShowSkillLabel)
}

// optional string SkillLabelSlot = 11;
inline bool SkillSpecialData::has_skilllabelslot() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void SkillSpecialData::set_has_skilllabelslot() {
  _has_bits_[0] |= 0x00000400u;
}
inline void SkillSpecialData::clear_has_skilllabelslot() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void SkillSpecialData::clear_skilllabelslot() {
  if (skilllabelslot_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    skilllabelslot_->clear();
  }
  clear_has_skilllabelslot();
}
inline const ::std::string& SkillSpecialData::skilllabelslot() const {
  // @@protoc_insertion_point(field_get:pb.SkillSpecialData.SkillLabelSlot)
  return *skilllabelslot_;
}
inline void SkillSpecialData::set_skilllabelslot(const ::std::string& value) {
  set_has_skilllabelslot();
  if (skilllabelslot_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    skilllabelslot_ = new ::std::string;
  }
  skilllabelslot_->assign(value);
  // @@protoc_insertion_point(field_set:pb.SkillSpecialData.SkillLabelSlot)
}
inline void SkillSpecialData::set_skilllabelslot(const char* value) {
  set_has_skilllabelslot();
  if (skilllabelslot_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    skilllabelslot_ = new ::std::string;
  }
  skilllabelslot_->assign(value);
  // @@protoc_insertion_point(field_set_char:pb.SkillSpecialData.SkillLabelSlot)
}
inline void SkillSpecialData::set_skilllabelslot(const char* value, size_t size) {
  set_has_skilllabelslot();
  if (skilllabelslot_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    skilllabelslot_ = new ::std::string;
  }
  skilllabelslot_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:pb.SkillSpecialData.SkillLabelSlot)
}
inline ::std::string* SkillSpecialData::mutable_skilllabelslot() {
  set_has_skilllabelslot();
  if (skilllabelslot_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    skilllabelslot_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:pb.SkillSpecialData.SkillLabelSlot)
  return skilllabelslot_;
}
inline ::std::string* SkillSpecialData::release_skilllabelslot() {
  clear_has_skilllabelslot();
  if (skilllabelslot_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = skilllabelslot_;
    skilllabelslot_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void SkillSpecialData::set_allocated_skilllabelslot(::std::string* skilllabelslot) {
  if (skilllabelslot_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete skilllabelslot_;
  }
  if (skilllabelslot) {
    set_has_skilllabelslot();
    skilllabelslot_ = skilllabelslot;
  } else {
    clear_has_skilllabelslot();
    skilllabelslot_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:pb.SkillSpecialData.SkillLabelSlot)
}

// optional int32 SkillLabelId = 12;
inline bool SkillSpecialData::has_skilllabelid() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void SkillSpecialData::set_has_skilllabelid() {
  _has_bits_[0] |= 0x00000800u;
}
inline void SkillSpecialData::clear_has_skilllabelid() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void SkillSpecialData::clear_skilllabelid() {
  skilllabelid_ = 0;
  clear_has_skilllabelid();
}
inline ::google::protobuf::int32 SkillSpecialData::skilllabelid() const {
  // @@protoc_insertion_point(field_get:pb.SkillSpecialData.SkillLabelId)
  return skilllabelid_;
}
inline void SkillSpecialData::set_skilllabelid(::google::protobuf::int32 value) {
  set_has_skilllabelid();
  skilllabelid_ = value;
  // @@protoc_insertion_point(field_set:pb.SkillSpecialData.SkillLabelId)
}

// optional string SkillLabelAudio = 13;
inline bool SkillSpecialData::has_skilllabelaudio() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void SkillSpecialData::set_has_skilllabelaudio() {
  _has_bits_[0] |= 0x00001000u;
}
inline void SkillSpecialData::clear_has_skilllabelaudio() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void SkillSpecialData::clear_skilllabelaudio() {
  if (skilllabelaudio_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    skilllabelaudio_->clear();
  }
  clear_has_skilllabelaudio();
}
inline const ::std::string& SkillSpecialData::skilllabelaudio() const {
  // @@protoc_insertion_point(field_get:pb.SkillSpecialData.SkillLabelAudio)
  return *skilllabelaudio_;
}
inline void SkillSpecialData::set_skilllabelaudio(const ::std::string& value) {
  set_has_skilllabelaudio();
  if (skilllabelaudio_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    skilllabelaudio_ = new ::std::string;
  }
  skilllabelaudio_->assign(value);
  // @@protoc_insertion_point(field_set:pb.SkillSpecialData.SkillLabelAudio)
}
inline void SkillSpecialData::set_skilllabelaudio(const char* value) {
  set_has_skilllabelaudio();
  if (skilllabelaudio_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    skilllabelaudio_ = new ::std::string;
  }
  skilllabelaudio_->assign(value);
  // @@protoc_insertion_point(field_set_char:pb.SkillSpecialData.SkillLabelAudio)
}
inline void SkillSpecialData::set_skilllabelaudio(const char* value, size_t size) {
  set_has_skilllabelaudio();
  if (skilllabelaudio_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    skilllabelaudio_ = new ::std::string;
  }
  skilllabelaudio_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:pb.SkillSpecialData.SkillLabelAudio)
}
inline ::std::string* SkillSpecialData::mutable_skilllabelaudio() {
  set_has_skilllabelaudio();
  if (skilllabelaudio_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    skilllabelaudio_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:pb.SkillSpecialData.SkillLabelAudio)
  return skilllabelaudio_;
}
inline ::std::string* SkillSpecialData::release_skilllabelaudio() {
  clear_has_skilllabelaudio();
  if (skilllabelaudio_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = skilllabelaudio_;
    skilllabelaudio_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void SkillSpecialData::set_allocated_skilllabelaudio(::std::string* skilllabelaudio) {
  if (skilllabelaudio_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete skilllabelaudio_;
  }
  if (skilllabelaudio) {
    set_has_skilllabelaudio();
    skilllabelaudio_ = skilllabelaudio;
  } else {
    clear_has_skilllabelaudio();
    skilllabelaudio_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:pb.SkillSpecialData.SkillLabelAudio)
}

// repeated int32 NonRageSkillCameraUpParam = 14;
inline int SkillSpecialData::nonrageskillcameraupparam_size() const {
  return nonrageskillcameraupparam_.size();
}
inline void SkillSpecialData::clear_nonrageskillcameraupparam() {
  nonrageskillcameraupparam_.Clear();
}
inline ::google::protobuf::int32 SkillSpecialData::nonrageskillcameraupparam(int index) const {
  // @@protoc_insertion_point(field_get:pb.SkillSpecialData.NonRageSkillCameraUpParam)
  return nonrageskillcameraupparam_.Get(index);
}
inline void SkillSpecialData::set_nonrageskillcameraupparam(int index, ::google::protobuf::int32 value) {
  nonrageskillcameraupparam_.Set(index, value);
  // @@protoc_insertion_point(field_set:pb.SkillSpecialData.NonRageSkillCameraUpParam)
}
inline void SkillSpecialData::add_nonrageskillcameraupparam(::google::protobuf::int32 value) {
  nonrageskillcameraupparam_.Add(value);
  // @@protoc_insertion_point(field_add:pb.SkillSpecialData.NonRageSkillCameraUpParam)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
SkillSpecialData::nonrageskillcameraupparam() const {
  // @@protoc_insertion_point(field_list:pb.SkillSpecialData.NonRageSkillCameraUpParam)
  return nonrageskillcameraupparam_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
SkillSpecialData::mutable_nonrageskillcameraupparam() {
  // @@protoc_insertion_point(field_mutable_list:pb.SkillSpecialData.NonRageSkillCameraUpParam)
  return &nonrageskillcameraupparam_;
}

// repeated int32 NonRageSkillCameraRecoverParam = 15;
inline int SkillSpecialData::nonrageskillcamerarecoverparam_size() const {
  return nonrageskillcamerarecoverparam_.size();
}
inline void SkillSpecialData::clear_nonrageskillcamerarecoverparam() {
  nonrageskillcamerarecoverparam_.Clear();
}
inline ::google::protobuf::int32 SkillSpecialData::nonrageskillcamerarecoverparam(int index) const {
  // @@protoc_insertion_point(field_get:pb.SkillSpecialData.NonRageSkillCameraRecoverParam)
  return nonrageskillcamerarecoverparam_.Get(index);
}
inline void SkillSpecialData::set_nonrageskillcamerarecoverparam(int index, ::google::protobuf::int32 value) {
  nonrageskillcamerarecoverparam_.Set(index, value);
  // @@protoc_insertion_point(field_set:pb.SkillSpecialData.NonRageSkillCameraRecoverParam)
}
inline void SkillSpecialData::add_nonrageskillcamerarecoverparam(::google::protobuf::int32 value) {
  nonrageskillcamerarecoverparam_.Add(value);
  // @@protoc_insertion_point(field_add:pb.SkillSpecialData.NonRageSkillCameraRecoverParam)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
SkillSpecialData::nonrageskillcamerarecoverparam() const {
  // @@protoc_insertion_point(field_list:pb.SkillSpecialData.NonRageSkillCameraRecoverParam)
  return nonrageskillcamerarecoverparam_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
SkillSpecialData::mutable_nonrageskillcamerarecoverparam() {
  // @@protoc_insertion_point(field_mutable_list:pb.SkillSpecialData.NonRageSkillCameraRecoverParam)
  return &nonrageskillcamerarecoverparam_;
}

// optional bool EnemyRageHeaderShow = 16;
inline bool SkillSpecialData::has_enemyrageheadershow() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void SkillSpecialData::set_has_enemyrageheadershow() {
  _has_bits_[0] |= 0x00008000u;
}
inline void SkillSpecialData::clear_has_enemyrageheadershow() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void SkillSpecialData::clear_enemyrageheadershow() {
  enemyrageheadershow_ = false;
  clear_has_enemyrageheadershow();
}
inline bool SkillSpecialData::enemyrageheadershow() const {
  // @@protoc_insertion_point(field_get:pb.SkillSpecialData.EnemyRageHeaderShow)
  return enemyrageheadershow_;
}
inline void SkillSpecialData::set_enemyrageheadershow(bool value) {
  set_has_enemyrageheadershow();
  enemyrageheadershow_ = value;
  // @@protoc_insertion_point(field_set:pb.SkillSpecialData.EnemyRageHeaderShow)
}

// repeated float EnemyRageSkillSpineAdjust = 17;
inline int SkillSpecialData::enemyrageskillspineadjust_size() const {
  return enemyrageskillspineadjust_.size();
}
inline void SkillSpecialData::clear_enemyrageskillspineadjust() {
  enemyrageskillspineadjust_.Clear();
}
inline float SkillSpecialData::enemyrageskillspineadjust(int index) const {
  // @@protoc_insertion_point(field_get:pb.SkillSpecialData.EnemyRageSkillSpineAdjust)
  return enemyrageskillspineadjust_.Get(index);
}
inline void SkillSpecialData::set_enemyrageskillspineadjust(int index, float value) {
  enemyrageskillspineadjust_.Set(index, value);
  // @@protoc_insertion_point(field_set:pb.SkillSpecialData.EnemyRageSkillSpineAdjust)
}
inline void SkillSpecialData::add_enemyrageskillspineadjust(float value) {
  enemyrageskillspineadjust_.Add(value);
  // @@protoc_insertion_point(field_add:pb.SkillSpecialData.EnemyRageSkillSpineAdjust)
}
inline const ::google::protobuf::RepeatedField< float >&
SkillSpecialData::enemyrageskillspineadjust() const {
  // @@protoc_insertion_point(field_list:pb.SkillSpecialData.EnemyRageSkillSpineAdjust)
  return enemyrageskillspineadjust_;
}
inline ::google::protobuf::RepeatedField< float >*
SkillSpecialData::mutable_enemyrageskillspineadjust() {
  // @@protoc_insertion_point(field_mutable_list:pb.SkillSpecialData.EnemyRageSkillSpineAdjust)
  return &enemyrageskillspineadjust_;
}

// optional bool HideUnparallelIcon = 18;
inline bool SkillSpecialData::has_hideunparallelicon() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
inline void SkillSpecialData::set_has_hideunparallelicon() {
  _has_bits_[0] |= 0x00020000u;
}
inline void SkillSpecialData::clear_has_hideunparallelicon() {
  _has_bits_[0] &= ~0x00020000u;
}
inline void SkillSpecialData::clear_hideunparallelicon() {
  hideunparallelicon_ = false;
  clear_has_hideunparallelicon();
}
inline bool SkillSpecialData::hideunparallelicon() const {
  // @@protoc_insertion_point(field_get:pb.SkillSpecialData.HideUnparallelIcon)
  return hideunparallelicon_;
}
inline void SkillSpecialData::set_hideunparallelicon(bool value) {
  set_has_hideunparallelicon();
  hideunparallelicon_ = value;
  // @@protoc_insertion_point(field_set:pb.SkillSpecialData.HideUnparallelIcon)
}

// optional string SuperAngerIconPath1 = 19;
inline bool SkillSpecialData::has_superangericonpath1() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
inline void SkillSpecialData::set_has_superangericonpath1() {
  _has_bits_[0] |= 0x00040000u;
}
inline void SkillSpecialData::clear_has_superangericonpath1() {
  _has_bits_[0] &= ~0x00040000u;
}
inline void SkillSpecialData::clear_superangericonpath1() {
  if (superangericonpath1_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    superangericonpath1_->clear();
  }
  clear_has_superangericonpath1();
}
inline const ::std::string& SkillSpecialData::superangericonpath1() const {
  // @@protoc_insertion_point(field_get:pb.SkillSpecialData.SuperAngerIconPath1)
  return *superangericonpath1_;
}
inline void SkillSpecialData::set_superangericonpath1(const ::std::string& value) {
  set_has_superangericonpath1();
  if (superangericonpath1_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    superangericonpath1_ = new ::std::string;
  }
  superangericonpath1_->assign(value);
  // @@protoc_insertion_point(field_set:pb.SkillSpecialData.SuperAngerIconPath1)
}
inline void SkillSpecialData::set_superangericonpath1(const char* value) {
  set_has_superangericonpath1();
  if (superangericonpath1_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    superangericonpath1_ = new ::std::string;
  }
  superangericonpath1_->assign(value);
  // @@protoc_insertion_point(field_set_char:pb.SkillSpecialData.SuperAngerIconPath1)
}
inline void SkillSpecialData::set_superangericonpath1(const char* value, size_t size) {
  set_has_superangericonpath1();
  if (superangericonpath1_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    superangericonpath1_ = new ::std::string;
  }
  superangericonpath1_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:pb.SkillSpecialData.SuperAngerIconPath1)
}
inline ::std::string* SkillSpecialData::mutable_superangericonpath1() {
  set_has_superangericonpath1();
  if (superangericonpath1_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    superangericonpath1_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:pb.SkillSpecialData.SuperAngerIconPath1)
  return superangericonpath1_;
}
inline ::std::string* SkillSpecialData::release_superangericonpath1() {
  clear_has_superangericonpath1();
  if (superangericonpath1_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = superangericonpath1_;
    superangericonpath1_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void SkillSpecialData::set_allocated_superangericonpath1(::std::string* superangericonpath1) {
  if (superangericonpath1_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete superangericonpath1_;
  }
  if (superangericonpath1) {
    set_has_superangericonpath1();
    superangericonpath1_ = superangericonpath1;
  } else {
    clear_has_superangericonpath1();
    superangericonpath1_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:pb.SkillSpecialData.SuperAngerIconPath1)
}

// optional string SuperAngerIconPath2 = 20;
inline bool SkillSpecialData::has_superangericonpath2() const {
  return (_has_bits_[0] & 0x00080000u) != 0;
}
inline void SkillSpecialData::set_has_superangericonpath2() {
  _has_bits_[0] |= 0x00080000u;
}
inline void SkillSpecialData::clear_has_superangericonpath2() {
  _has_bits_[0] &= ~0x00080000u;
}
inline void SkillSpecialData::clear_superangericonpath2() {
  if (superangericonpath2_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    superangericonpath2_->clear();
  }
  clear_has_superangericonpath2();
}
inline const ::std::string& SkillSpecialData::superangericonpath2() const {
  // @@protoc_insertion_point(field_get:pb.SkillSpecialData.SuperAngerIconPath2)
  return *superangericonpath2_;
}
inline void SkillSpecialData::set_superangericonpath2(const ::std::string& value) {
  set_has_superangericonpath2();
  if (superangericonpath2_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    superangericonpath2_ = new ::std::string;
  }
  superangericonpath2_->assign(value);
  // @@protoc_insertion_point(field_set:pb.SkillSpecialData.SuperAngerIconPath2)
}
inline void SkillSpecialData::set_superangericonpath2(const char* value) {
  set_has_superangericonpath2();
  if (superangericonpath2_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    superangericonpath2_ = new ::std::string;
  }
  superangericonpath2_->assign(value);
  // @@protoc_insertion_point(field_set_char:pb.SkillSpecialData.SuperAngerIconPath2)
}
inline void SkillSpecialData::set_superangericonpath2(const char* value, size_t size) {
  set_has_superangericonpath2();
  if (superangericonpath2_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    superangericonpath2_ = new ::std::string;
  }
  superangericonpath2_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:pb.SkillSpecialData.SuperAngerIconPath2)
}
inline ::std::string* SkillSpecialData::mutable_superangericonpath2() {
  set_has_superangericonpath2();
  if (superangericonpath2_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    superangericonpath2_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:pb.SkillSpecialData.SuperAngerIconPath2)
  return superangericonpath2_;
}
inline ::std::string* SkillSpecialData::release_superangericonpath2() {
  clear_has_superangericonpath2();
  if (superangericonpath2_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = superangericonpath2_;
    superangericonpath2_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void SkillSpecialData::set_allocated_superangericonpath2(::std::string* superangericonpath2) {
  if (superangericonpath2_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete superangericonpath2_;
  }
  if (superangericonpath2) {
    set_has_superangericonpath2();
    superangericonpath2_ = superangericonpath2;
  } else {
    clear_has_superangericonpath2();
    superangericonpath2_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:pb.SkillSpecialData.SuperAngerIconPath2)
}

// optional string SuperAngerIconPath3 = 21;
inline bool SkillSpecialData::has_superangericonpath3() const {
  return (_has_bits_[0] & 0x00100000u) != 0;
}
inline void SkillSpecialData::set_has_superangericonpath3() {
  _has_bits_[0] |= 0x00100000u;
}
inline void SkillSpecialData::clear_has_superangericonpath3() {
  _has_bits_[0] &= ~0x00100000u;
}
inline void SkillSpecialData::clear_superangericonpath3() {
  if (superangericonpath3_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    superangericonpath3_->clear();
  }
  clear_has_superangericonpath3();
}
inline const ::std::string& SkillSpecialData::superangericonpath3() const {
  // @@protoc_insertion_point(field_get:pb.SkillSpecialData.SuperAngerIconPath3)
  return *superangericonpath3_;
}
inline void SkillSpecialData::set_superangericonpath3(const ::std::string& value) {
  set_has_superangericonpath3();
  if (superangericonpath3_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    superangericonpath3_ = new ::std::string;
  }
  superangericonpath3_->assign(value);
  // @@protoc_insertion_point(field_set:pb.SkillSpecialData.SuperAngerIconPath3)
}
inline void SkillSpecialData::set_superangericonpath3(const char* value) {
  set_has_superangericonpath3();
  if (superangericonpath3_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    superangericonpath3_ = new ::std::string;
  }
  superangericonpath3_->assign(value);
  // @@protoc_insertion_point(field_set_char:pb.SkillSpecialData.SuperAngerIconPath3)
}
inline void SkillSpecialData::set_superangericonpath3(const char* value, size_t size) {
  set_has_superangericonpath3();
  if (superangericonpath3_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    superangericonpath3_ = new ::std::string;
  }
  superangericonpath3_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:pb.SkillSpecialData.SuperAngerIconPath3)
}
inline ::std::string* SkillSpecialData::mutable_superangericonpath3() {
  set_has_superangericonpath3();
  if (superangericonpath3_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    superangericonpath3_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:pb.SkillSpecialData.SuperAngerIconPath3)
  return superangericonpath3_;
}
inline ::std::string* SkillSpecialData::release_superangericonpath3() {
  clear_has_superangericonpath3();
  if (superangericonpath3_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = superangericonpath3_;
    superangericonpath3_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void SkillSpecialData::set_allocated_superangericonpath3(::std::string* superangericonpath3) {
  if (superangericonpath3_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete superangericonpath3_;
  }
  if (superangericonpath3) {
    set_has_superangericonpath3();
    superangericonpath3_ = superangericonpath3;
  } else {
    clear_has_superangericonpath3();
    superangericonpath3_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:pb.SkillSpecialData.SuperAngerIconPath3)
}

// optional string SuperAngerSkillNamePath = 22;
inline bool SkillSpecialData::has_superangerskillnamepath() const {
  return (_has_bits_[0] & 0x00200000u) != 0;
}
inline void SkillSpecialData::set_has_superangerskillnamepath() {
  _has_bits_[0] |= 0x00200000u;
}
inline void SkillSpecialData::clear_has_superangerskillnamepath() {
  _has_bits_[0] &= ~0x00200000u;
}
inline void SkillSpecialData::clear_superangerskillnamepath() {
  if (superangerskillnamepath_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    superangerskillnamepath_->clear();
  }
  clear_has_superangerskillnamepath();
}
inline const ::std::string& SkillSpecialData::superangerskillnamepath() const {
  // @@protoc_insertion_point(field_get:pb.SkillSpecialData.SuperAngerSkillNamePath)
  return *superangerskillnamepath_;
}
inline void SkillSpecialData::set_superangerskillnamepath(const ::std::string& value) {
  set_has_superangerskillnamepath();
  if (superangerskillnamepath_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    superangerskillnamepath_ = new ::std::string;
  }
  superangerskillnamepath_->assign(value);
  // @@protoc_insertion_point(field_set:pb.SkillSpecialData.SuperAngerSkillNamePath)
}
inline void SkillSpecialData::set_superangerskillnamepath(const char* value) {
  set_has_superangerskillnamepath();
  if (superangerskillnamepath_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    superangerskillnamepath_ = new ::std::string;
  }
  superangerskillnamepath_->assign(value);
  // @@protoc_insertion_point(field_set_char:pb.SkillSpecialData.SuperAngerSkillNamePath)
}
inline void SkillSpecialData::set_superangerskillnamepath(const char* value, size_t size) {
  set_has_superangerskillnamepath();
  if (superangerskillnamepath_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    superangerskillnamepath_ = new ::std::string;
  }
  superangerskillnamepath_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:pb.SkillSpecialData.SuperAngerSkillNamePath)
}
inline ::std::string* SkillSpecialData::mutable_superangerskillnamepath() {
  set_has_superangerskillnamepath();
  if (superangerskillnamepath_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    superangerskillnamepath_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:pb.SkillSpecialData.SuperAngerSkillNamePath)
  return superangerskillnamepath_;
}
inline ::std::string* SkillSpecialData::release_superangerskillnamepath() {
  clear_has_superangerskillnamepath();
  if (superangerskillnamepath_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = superangerskillnamepath_;
    superangerskillnamepath_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void SkillSpecialData::set_allocated_superangerskillnamepath(::std::string* superangerskillnamepath) {
  if (superangerskillnamepath_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete superangerskillnamepath_;
  }
  if (superangerskillnamepath) {
    set_has_superangerskillnamepath();
    superangerskillnamepath_ = superangerskillnamepath;
  } else {
    clear_has_superangerskillnamepath();
    superangerskillnamepath_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:pb.SkillSpecialData.SuperAngerSkillNamePath)
}

// optional string SuperAngerAudio = 23;
inline bool SkillSpecialData::has_superangeraudio() const {
  return (_has_bits_[0] & 0x00400000u) != 0;
}
inline void SkillSpecialData::set_has_superangeraudio() {
  _has_bits_[0] |= 0x00400000u;
}
inline void SkillSpecialData::clear_has_superangeraudio() {
  _has_bits_[0] &= ~0x00400000u;
}
inline void SkillSpecialData::clear_superangeraudio() {
  if (superangeraudio_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    superangeraudio_->clear();
  }
  clear_has_superangeraudio();
}
inline const ::std::string& SkillSpecialData::superangeraudio() const {
  // @@protoc_insertion_point(field_get:pb.SkillSpecialData.SuperAngerAudio)
  return *superangeraudio_;
}
inline void SkillSpecialData::set_superangeraudio(const ::std::string& value) {
  set_has_superangeraudio();
  if (superangeraudio_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    superangeraudio_ = new ::std::string;
  }
  superangeraudio_->assign(value);
  // @@protoc_insertion_point(field_set:pb.SkillSpecialData.SuperAngerAudio)
}
inline void SkillSpecialData::set_superangeraudio(const char* value) {
  set_has_superangeraudio();
  if (superangeraudio_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    superangeraudio_ = new ::std::string;
  }
  superangeraudio_->assign(value);
  // @@protoc_insertion_point(field_set_char:pb.SkillSpecialData.SuperAngerAudio)
}
inline void SkillSpecialData::set_superangeraudio(const char* value, size_t size) {
  set_has_superangeraudio();
  if (superangeraudio_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    superangeraudio_ = new ::std::string;
  }
  superangeraudio_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:pb.SkillSpecialData.SuperAngerAudio)
}
inline ::std::string* SkillSpecialData::mutable_superangeraudio() {
  set_has_superangeraudio();
  if (superangeraudio_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    superangeraudio_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:pb.SkillSpecialData.SuperAngerAudio)
  return superangeraudio_;
}
inline ::std::string* SkillSpecialData::release_superangeraudio() {
  clear_has_superangeraudio();
  if (superangeraudio_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = superangeraudio_;
    superangeraudio_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void SkillSpecialData::set_allocated_superangeraudio(::std::string* superangeraudio) {
  if (superangeraudio_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete superangeraudio_;
  }
  if (superangeraudio) {
    set_has_superangeraudio();
    superangeraudio_ = superangeraudio;
  } else {
    clear_has_superangeraudio();
    superangeraudio_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:pb.SkillSpecialData.SuperAngerAudio)
}

// optional int32 SuperAngerHeroArr = 24;
inline bool SkillSpecialData::has_superangerheroarr() const {
  return (_has_bits_[0] & 0x00800000u) != 0;
}
inline void SkillSpecialData::set_has_superangerheroarr() {
  _has_bits_[0] |= 0x00800000u;
}
inline void SkillSpecialData::clear_has_superangerheroarr() {
  _has_bits_[0] &= ~0x00800000u;
}
inline void SkillSpecialData::clear_superangerheroarr() {
  superangerheroarr_ = 0;
  clear_has_superangerheroarr();
}
inline ::google::protobuf::int32 SkillSpecialData::superangerheroarr() const {
  // @@protoc_insertion_point(field_get:pb.SkillSpecialData.SuperAngerHeroArr)
  return superangerheroarr_;
}
inline void SkillSpecialData::set_superangerheroarr(::google::protobuf::int32 value) {
  set_has_superangerheroarr();
  superangerheroarr_ = value;
  // @@protoc_insertion_point(field_set:pb.SkillSpecialData.SuperAngerHeroArr)
}

// optional int32 GroundMeshDuration = 25;
inline bool SkillSpecialData::has_groundmeshduration() const {
  return (_has_bits_[0] & 0x01000000u) != 0;
}
inline void SkillSpecialData::set_has_groundmeshduration() {
  _has_bits_[0] |= 0x01000000u;
}
inline void SkillSpecialData::clear_has_groundmeshduration() {
  _has_bits_[0] &= ~0x01000000u;
}
inline void SkillSpecialData::clear_groundmeshduration() {
  groundmeshduration_ = 0;
  clear_has_groundmeshduration();
}
inline ::google::protobuf::int32 SkillSpecialData::groundmeshduration() const {
  // @@protoc_insertion_point(field_get:pb.SkillSpecialData.GroundMeshDuration)
  return groundmeshduration_;
}
inline void SkillSpecialData::set_groundmeshduration(::google::protobuf::int32 value) {
  set_has_groundmeshduration();
  groundmeshduration_ = value;
  // @@protoc_insertion_point(field_set:pb.SkillSpecialData.GroundMeshDuration)
}

// optional bool NeedShowGroundMesh = 26;
inline bool SkillSpecialData::has_needshowgroundmesh() const {
  return (_has_bits_[0] & 0x02000000u) != 0;
}
inline void SkillSpecialData::set_has_needshowgroundmesh() {
  _has_bits_[0] |= 0x02000000u;
}
inline void SkillSpecialData::clear_has_needshowgroundmesh() {
  _has_bits_[0] &= ~0x02000000u;
}
inline void SkillSpecialData::clear_needshowgroundmesh() {
  needshowgroundmesh_ = false;
  clear_has_needshowgroundmesh();
}
inline bool SkillSpecialData::needshowgroundmesh() const {
  // @@protoc_insertion_point(field_get:pb.SkillSpecialData.NeedShowGroundMesh)
  return needshowgroundmesh_;
}
inline void SkillSpecialData::set_needshowgroundmesh(bool value) {
  set_has_needshowgroundmesh();
  needshowgroundmesh_ = value;
  // @@protoc_insertion_point(field_set:pb.SkillSpecialData.NeedShowGroundMesh)
}

// optional int32 SlowStartTime = 28;
inline bool SkillSpecialData::has_slowstarttime() const {
  return (_has_bits_[0] & 0x04000000u) != 0;
}
inline void SkillSpecialData::set_has_slowstarttime() {
  _has_bits_[0] |= 0x04000000u;
}
inline void SkillSpecialData::clear_has_slowstarttime() {
  _has_bits_[0] &= ~0x04000000u;
}
inline void SkillSpecialData::clear_slowstarttime() {
  slowstarttime_ = 0;
  clear_has_slowstarttime();
}
inline ::google::protobuf::int32 SkillSpecialData::slowstarttime() const {
  // @@protoc_insertion_point(field_get:pb.SkillSpecialData.SlowStartTime)
  return slowstarttime_;
}
inline void SkillSpecialData::set_slowstarttime(::google::protobuf::int32 value) {
  set_has_slowstarttime();
  slowstarttime_ = value;
  // @@protoc_insertion_point(field_set:pb.SkillSpecialData.SlowStartTime)
}

// optional int32 SlowDuration = 29;
inline bool SkillSpecialData::has_slowduration() const {
  return (_has_bits_[0] & 0x08000000u) != 0;
}
inline void SkillSpecialData::set_has_slowduration() {
  _has_bits_[0] |= 0x08000000u;
}
inline void SkillSpecialData::clear_has_slowduration() {
  _has_bits_[0] &= ~0x08000000u;
}
inline void SkillSpecialData::clear_slowduration() {
  slowduration_ = 0;
  clear_has_slowduration();
}
inline ::google::protobuf::int32 SkillSpecialData::slowduration() const {
  // @@protoc_insertion_point(field_get:pb.SkillSpecialData.SlowDuration)
  return slowduration_;
}
inline void SkillSpecialData::set_slowduration(::google::protobuf::int32 value) {
  set_has_slowduration();
  slowduration_ = value;
  // @@protoc_insertion_point(field_set:pb.SkillSpecialData.SlowDuration)
}

// optional int32 SlowBuffId = 30;
inline bool SkillSpecialData::has_slowbuffid() const {
  return (_has_bits_[0] & 0x10000000u) != 0;
}
inline void SkillSpecialData::set_has_slowbuffid() {
  _has_bits_[0] |= 0x10000000u;
}
inline void SkillSpecialData::clear_has_slowbuffid() {
  _has_bits_[0] &= ~0x10000000u;
}
inline void SkillSpecialData::clear_slowbuffid() {
  slowbuffid_ = 0;
  clear_has_slowbuffid();
}
inline ::google::protobuf::int32 SkillSpecialData::slowbuffid() const {
  // @@protoc_insertion_point(field_get:pb.SkillSpecialData.SlowBuffId)
  return slowbuffid_;
}
inline void SkillSpecialData::set_slowbuffid(::google::protobuf::int32 value) {
  set_has_slowbuffid();
  slowbuffid_ = value;
  // @@protoc_insertion_point(field_set:pb.SkillSpecialData.SlowBuffId)
}

// optional string GroundMeshAssetPath = 31;
inline bool SkillSpecialData::has_groundmeshassetpath() const {
  return (_has_bits_[0] & 0x20000000u) != 0;
}
inline void SkillSpecialData::set_has_groundmeshassetpath() {
  _has_bits_[0] |= 0x20000000u;
}
inline void SkillSpecialData::clear_has_groundmeshassetpath() {
  _has_bits_[0] &= ~0x20000000u;
}
inline void SkillSpecialData::clear_groundmeshassetpath() {
  if (groundmeshassetpath_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    groundmeshassetpath_->clear();
  }
  clear_has_groundmeshassetpath();
}
inline const ::std::string& SkillSpecialData::groundmeshassetpath() const {
  // @@protoc_insertion_point(field_get:pb.SkillSpecialData.GroundMeshAssetPath)
  return *groundmeshassetpath_;
}
inline void SkillSpecialData::set_groundmeshassetpath(const ::std::string& value) {
  set_has_groundmeshassetpath();
  if (groundmeshassetpath_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    groundmeshassetpath_ = new ::std::string;
  }
  groundmeshassetpath_->assign(value);
  // @@protoc_insertion_point(field_set:pb.SkillSpecialData.GroundMeshAssetPath)
}
inline void SkillSpecialData::set_groundmeshassetpath(const char* value) {
  set_has_groundmeshassetpath();
  if (groundmeshassetpath_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    groundmeshassetpath_ = new ::std::string;
  }
  groundmeshassetpath_->assign(value);
  // @@protoc_insertion_point(field_set_char:pb.SkillSpecialData.GroundMeshAssetPath)
}
inline void SkillSpecialData::set_groundmeshassetpath(const char* value, size_t size) {
  set_has_groundmeshassetpath();
  if (groundmeshassetpath_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    groundmeshassetpath_ = new ::std::string;
  }
  groundmeshassetpath_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:pb.SkillSpecialData.GroundMeshAssetPath)
}
inline ::std::string* SkillSpecialData::mutable_groundmeshassetpath() {
  set_has_groundmeshassetpath();
  if (groundmeshassetpath_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    groundmeshassetpath_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:pb.SkillSpecialData.GroundMeshAssetPath)
  return groundmeshassetpath_;
}
inline ::std::string* SkillSpecialData::release_groundmeshassetpath() {
  clear_has_groundmeshassetpath();
  if (groundmeshassetpath_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = groundmeshassetpath_;
    groundmeshassetpath_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void SkillSpecialData::set_allocated_groundmeshassetpath(::std::string* groundmeshassetpath) {
  if (groundmeshassetpath_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete groundmeshassetpath_;
  }
  if (groundmeshassetpath) {
    set_has_groundmeshassetpath();
    groundmeshassetpath_ = groundmeshassetpath;
  } else {
    clear_has_groundmeshassetpath();
    groundmeshassetpath_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:pb.SkillSpecialData.GroundMeshAssetPath)
}

// optional int32 SlowEndTime = 32;
inline bool SkillSpecialData::has_slowendtime() const {
  return (_has_bits_[0] & 0x40000000u) != 0;
}
inline void SkillSpecialData::set_has_slowendtime() {
  _has_bits_[0] |= 0x40000000u;
}
inline void SkillSpecialData::clear_has_slowendtime() {
  _has_bits_[0] &= ~0x40000000u;
}
inline void SkillSpecialData::clear_slowendtime() {
  slowendtime_ = 0;
  clear_has_slowendtime();
}
inline ::google::protobuf::int32 SkillSpecialData::slowendtime() const {
  // @@protoc_insertion_point(field_get:pb.SkillSpecialData.SlowEndTime)
  return slowendtime_;
}
inline void SkillSpecialData::set_slowendtime(::google::protobuf::int32 value) {
  set_has_slowendtime();
  slowendtime_ = value;
  // @@protoc_insertion_point(field_set:pb.SkillSpecialData.SlowEndTime)
}

// repeated string GroundAudioEvents = 33;
inline int SkillSpecialData::groundaudioevents_size() const {
  return groundaudioevents_.size();
}
inline void SkillSpecialData::clear_groundaudioevents() {
  groundaudioevents_.Clear();
}
inline const ::std::string& SkillSpecialData::groundaudioevents(int index) const {
  // @@protoc_insertion_point(field_get:pb.SkillSpecialData.GroundAudioEvents)
  return groundaudioevents_.Get(index);
}
inline ::std::string* SkillSpecialData::mutable_groundaudioevents(int index) {
  // @@protoc_insertion_point(field_mutable:pb.SkillSpecialData.GroundAudioEvents)
  return groundaudioevents_.Mutable(index);
}
inline void SkillSpecialData::set_groundaudioevents(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:pb.SkillSpecialData.GroundAudioEvents)
  groundaudioevents_.Mutable(index)->assign(value);
}
inline void SkillSpecialData::set_groundaudioevents(int index, const char* value) {
  groundaudioevents_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:pb.SkillSpecialData.GroundAudioEvents)
}
inline void SkillSpecialData::set_groundaudioevents(int index, const char* value, size_t size) {
  groundaudioevents_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:pb.SkillSpecialData.GroundAudioEvents)
}
inline ::std::string* SkillSpecialData::add_groundaudioevents() {
  return groundaudioevents_.Add();
}
inline void SkillSpecialData::add_groundaudioevents(const ::std::string& value) {
  groundaudioevents_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:pb.SkillSpecialData.GroundAudioEvents)
}
inline void SkillSpecialData::add_groundaudioevents(const char* value) {
  groundaudioevents_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:pb.SkillSpecialData.GroundAudioEvents)
}
inline void SkillSpecialData::add_groundaudioevents(const char* value, size_t size) {
  groundaudioevents_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:pb.SkillSpecialData.GroundAudioEvents)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
SkillSpecialData::groundaudioevents() const {
  // @@protoc_insertion_point(field_list:pb.SkillSpecialData.GroundAudioEvents)
  return groundaudioevents_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
SkillSpecialData::mutable_groundaudioevents() {
  // @@protoc_insertion_point(field_mutable_list:pb.SkillSpecialData.GroundAudioEvents)
  return &groundaudioevents_;
}

// optional string EffectOnDisappear = 34;
inline bool SkillSpecialData::has_effectondisappear() const {
  return (_has_bits_[1] & 0x00000001u) != 0;
}
inline void SkillSpecialData::set_has_effectondisappear() {
  _has_bits_[1] |= 0x00000001u;
}
inline void SkillSpecialData::clear_has_effectondisappear() {
  _has_bits_[1] &= ~0x00000001u;
}
inline void SkillSpecialData::clear_effectondisappear() {
  if (effectondisappear_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    effectondisappear_->clear();
  }
  clear_has_effectondisappear();
}
inline const ::std::string& SkillSpecialData::effectondisappear() const {
  // @@protoc_insertion_point(field_get:pb.SkillSpecialData.EffectOnDisappear)
  return *effectondisappear_;
}
inline void SkillSpecialData::set_effectondisappear(const ::std::string& value) {
  set_has_effectondisappear();
  if (effectondisappear_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    effectondisappear_ = new ::std::string;
  }
  effectondisappear_->assign(value);
  // @@protoc_insertion_point(field_set:pb.SkillSpecialData.EffectOnDisappear)
}
inline void SkillSpecialData::set_effectondisappear(const char* value) {
  set_has_effectondisappear();
  if (effectondisappear_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    effectondisappear_ = new ::std::string;
  }
  effectondisappear_->assign(value);
  // @@protoc_insertion_point(field_set_char:pb.SkillSpecialData.EffectOnDisappear)
}
inline void SkillSpecialData::set_effectondisappear(const char* value, size_t size) {
  set_has_effectondisappear();
  if (effectondisappear_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    effectondisappear_ = new ::std::string;
  }
  effectondisappear_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:pb.SkillSpecialData.EffectOnDisappear)
}
inline ::std::string* SkillSpecialData::mutable_effectondisappear() {
  set_has_effectondisappear();
  if (effectondisappear_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    effectondisappear_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:pb.SkillSpecialData.EffectOnDisappear)
  return effectondisappear_;
}
inline ::std::string* SkillSpecialData::release_effectondisappear() {
  clear_has_effectondisappear();
  if (effectondisappear_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = effectondisappear_;
    effectondisappear_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void SkillSpecialData::set_allocated_effectondisappear(::std::string* effectondisappear) {
  if (effectondisappear_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete effectondisappear_;
  }
  if (effectondisappear) {
    set_has_effectondisappear();
    effectondisappear_ = effectondisappear;
  } else {
    clear_has_effectondisappear();
    effectondisappear_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:pb.SkillSpecialData.EffectOnDisappear)
}

// optional bool ActiveTextShift = 35;
inline bool SkillSpecialData::has_activetextshift() const {
  return (_has_bits_[1] & 0x00000002u) != 0;
}
inline void SkillSpecialData::set_has_activetextshift() {
  _has_bits_[1] |= 0x00000002u;
}
inline void SkillSpecialData::clear_has_activetextshift() {
  _has_bits_[1] &= ~0x00000002u;
}
inline void SkillSpecialData::clear_activetextshift() {
  activetextshift_ = false;
  clear_has_activetextshift();
}
inline bool SkillSpecialData::activetextshift() const {
  // @@protoc_insertion_point(field_get:pb.SkillSpecialData.ActiveTextShift)
  return activetextshift_;
}
inline void SkillSpecialData::set_activetextshift(bool value) {
  set_has_activetextshift();
  activetextshift_ = value;
  // @@protoc_insertion_point(field_set:pb.SkillSpecialData.ActiveTextShift)
}

// repeated int32 TextShiftSkillArr = 36;
inline int SkillSpecialData::textshiftskillarr_size() const {
  return textshiftskillarr_.size();
}
inline void SkillSpecialData::clear_textshiftskillarr() {
  textshiftskillarr_.Clear();
}
inline ::google::protobuf::int32 SkillSpecialData::textshiftskillarr(int index) const {
  // @@protoc_insertion_point(field_get:pb.SkillSpecialData.TextShiftSkillArr)
  return textshiftskillarr_.Get(index);
}
inline void SkillSpecialData::set_textshiftskillarr(int index, ::google::protobuf::int32 value) {
  textshiftskillarr_.Set(index, value);
  // @@protoc_insertion_point(field_set:pb.SkillSpecialData.TextShiftSkillArr)
}
inline void SkillSpecialData::add_textshiftskillarr(::google::protobuf::int32 value) {
  textshiftskillarr_.Add(value);
  // @@protoc_insertion_point(field_add:pb.SkillSpecialData.TextShiftSkillArr)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
SkillSpecialData::textshiftskillarr() const {
  // @@protoc_insertion_point(field_list:pb.SkillSpecialData.TextShiftSkillArr)
  return textshiftskillarr_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
SkillSpecialData::mutable_textshiftskillarr() {
  // @@protoc_insertion_point(field_mutable_list:pb.SkillSpecialData.TextShiftSkillArr)
  return &textshiftskillarr_;
}

// optional bool ActiveHideWhenBorn = 37;
inline bool SkillSpecialData::has_activehidewhenborn() const {
  return (_has_bits_[1] & 0x00000008u) != 0;
}
inline void SkillSpecialData::set_has_activehidewhenborn() {
  _has_bits_[1] |= 0x00000008u;
}
inline void SkillSpecialData::clear_has_activehidewhenborn() {
  _has_bits_[1] &= ~0x00000008u;
}
inline void SkillSpecialData::clear_activehidewhenborn() {
  activehidewhenborn_ = false;
  clear_has_activehidewhenborn();
}
inline bool SkillSpecialData::activehidewhenborn() const {
  // @@protoc_insertion_point(field_get:pb.SkillSpecialData.ActiveHideWhenBorn)
  return activehidewhenborn_;
}
inline void SkillSpecialData::set_activehidewhenborn(bool value) {
  set_has_activehidewhenborn();
  activehidewhenborn_ = value;
  // @@protoc_insertion_point(field_set:pb.SkillSpecialData.ActiveHideWhenBorn)
}

// optional string AwakenDataPath1 = 38;
inline bool SkillSpecialData::has_awakendatapath1() const {
  return (_has_bits_[1] & 0x00000010u) != 0;
}
inline void SkillSpecialData::set_has_awakendatapath1() {
  _has_bits_[1] |= 0x00000010u;
}
inline void SkillSpecialData::clear_has_awakendatapath1() {
  _has_bits_[1] &= ~0x00000010u;
}
inline void SkillSpecialData::clear_awakendatapath1() {
  if (awakendatapath1_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    awakendatapath1_->clear();
  }
  clear_has_awakendatapath1();
}
inline const ::std::string& SkillSpecialData::awakendatapath1() const {
  // @@protoc_insertion_point(field_get:pb.SkillSpecialData.AwakenDataPath1)
  return *awakendatapath1_;
}
inline void SkillSpecialData::set_awakendatapath1(const ::std::string& value) {
  set_has_awakendatapath1();
  if (awakendatapath1_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    awakendatapath1_ = new ::std::string;
  }
  awakendatapath1_->assign(value);
  // @@protoc_insertion_point(field_set:pb.SkillSpecialData.AwakenDataPath1)
}
inline void SkillSpecialData::set_awakendatapath1(const char* value) {
  set_has_awakendatapath1();
  if (awakendatapath1_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    awakendatapath1_ = new ::std::string;
  }
  awakendatapath1_->assign(value);
  // @@protoc_insertion_point(field_set_char:pb.SkillSpecialData.AwakenDataPath1)
}
inline void SkillSpecialData::set_awakendatapath1(const char* value, size_t size) {
  set_has_awakendatapath1();
  if (awakendatapath1_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    awakendatapath1_ = new ::std::string;
  }
  awakendatapath1_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:pb.SkillSpecialData.AwakenDataPath1)
}
inline ::std::string* SkillSpecialData::mutable_awakendatapath1() {
  set_has_awakendatapath1();
  if (awakendatapath1_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    awakendatapath1_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:pb.SkillSpecialData.AwakenDataPath1)
  return awakendatapath1_;
}
inline ::std::string* SkillSpecialData::release_awakendatapath1() {
  clear_has_awakendatapath1();
  if (awakendatapath1_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = awakendatapath1_;
    awakendatapath1_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void SkillSpecialData::set_allocated_awakendatapath1(::std::string* awakendatapath1) {
  if (awakendatapath1_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete awakendatapath1_;
  }
  if (awakendatapath1) {
    set_has_awakendatapath1();
    awakendatapath1_ = awakendatapath1;
  } else {
    clear_has_awakendatapath1();
    awakendatapath1_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:pb.SkillSpecialData.AwakenDataPath1)
}

// optional string BJRageSkillSpine = 39;
inline bool SkillSpecialData::has_bjrageskillspine() const {
  return (_has_bits_[1] & 0x00000020u) != 0;
}
inline void SkillSpecialData::set_has_bjrageskillspine() {
  _has_bits_[1] |= 0x00000020u;
}
inline void SkillSpecialData::clear_has_bjrageskillspine() {
  _has_bits_[1] &= ~0x00000020u;
}
inline void SkillSpecialData::clear_bjrageskillspine() {
  if (bjrageskillspine_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    bjrageskillspine_->clear();
  }
  clear_has_bjrageskillspine();
}
inline const ::std::string& SkillSpecialData::bjrageskillspine() const {
  // @@protoc_insertion_point(field_get:pb.SkillSpecialData.BJRageSkillSpine)
  return *bjrageskillspine_;
}
inline void SkillSpecialData::set_bjrageskillspine(const ::std::string& value) {
  set_has_bjrageskillspine();
  if (bjrageskillspine_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    bjrageskillspine_ = new ::std::string;
  }
  bjrageskillspine_->assign(value);
  // @@protoc_insertion_point(field_set:pb.SkillSpecialData.BJRageSkillSpine)
}
inline void SkillSpecialData::set_bjrageskillspine(const char* value) {
  set_has_bjrageskillspine();
  if (bjrageskillspine_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    bjrageskillspine_ = new ::std::string;
  }
  bjrageskillspine_->assign(value);
  // @@protoc_insertion_point(field_set_char:pb.SkillSpecialData.BJRageSkillSpine)
}
inline void SkillSpecialData::set_bjrageskillspine(const char* value, size_t size) {
  set_has_bjrageskillspine();
  if (bjrageskillspine_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    bjrageskillspine_ = new ::std::string;
  }
  bjrageskillspine_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:pb.SkillSpecialData.BJRageSkillSpine)
}
inline ::std::string* SkillSpecialData::mutable_bjrageskillspine() {
  set_has_bjrageskillspine();
  if (bjrageskillspine_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    bjrageskillspine_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:pb.SkillSpecialData.BJRageSkillSpine)
  return bjrageskillspine_;
}
inline ::std::string* SkillSpecialData::release_bjrageskillspine() {
  clear_has_bjrageskillspine();
  if (bjrageskillspine_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = bjrageskillspine_;
    bjrageskillspine_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void SkillSpecialData::set_allocated_bjrageskillspine(::std::string* bjrageskillspine) {
  if (bjrageskillspine_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete bjrageskillspine_;
  }
  if (bjrageskillspine) {
    set_has_bjrageskillspine();
    bjrageskillspine_ = bjrageskillspine;
  } else {
    clear_has_bjrageskillspine();
    bjrageskillspine_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:pb.SkillSpecialData.BJRageSkillSpine)
}

// repeated float BJRageSkillSpineAdjust = 40;
inline int SkillSpecialData::bjrageskillspineadjust_size() const {
  return bjrageskillspineadjust_.size();
}
inline void SkillSpecialData::clear_bjrageskillspineadjust() {
  bjrageskillspineadjust_.Clear();
}
inline float SkillSpecialData::bjrageskillspineadjust(int index) const {
  // @@protoc_insertion_point(field_get:pb.SkillSpecialData.BJRageSkillSpineAdjust)
  return bjrageskillspineadjust_.Get(index);
}
inline void SkillSpecialData::set_bjrageskillspineadjust(int index, float value) {
  bjrageskillspineadjust_.Set(index, value);
  // @@protoc_insertion_point(field_set:pb.SkillSpecialData.BJRageSkillSpineAdjust)
}
inline void SkillSpecialData::add_bjrageskillspineadjust(float value) {
  bjrageskillspineadjust_.Add(value);
  // @@protoc_insertion_point(field_add:pb.SkillSpecialData.BJRageSkillSpineAdjust)
}
inline const ::google::protobuf::RepeatedField< float >&
SkillSpecialData::bjrageskillspineadjust() const {
  // @@protoc_insertion_point(field_list:pb.SkillSpecialData.BJRageSkillSpineAdjust)
  return bjrageskillspineadjust_;
}
inline ::google::protobuf::RepeatedField< float >*
SkillSpecialData::mutable_bjrageskillspineadjust() {
  // @@protoc_insertion_point(field_mutable_list:pb.SkillSpecialData.BJRageSkillSpineAdjust)
  return &bjrageskillspineadjust_;
}

// repeated float BJEnemyRageSkillSpineAdjust = 41;
inline int SkillSpecialData::bjenemyrageskillspineadjust_size() const {
  return bjenemyrageskillspineadjust_.size();
}
inline void SkillSpecialData::clear_bjenemyrageskillspineadjust() {
  bjenemyrageskillspineadjust_.Clear();
}
inline float SkillSpecialData::bjenemyrageskillspineadjust(int index) const {
  // @@protoc_insertion_point(field_get:pb.SkillSpecialData.BJEnemyRageSkillSpineAdjust)
  return bjenemyrageskillspineadjust_.Get(index);
}
inline void SkillSpecialData::set_bjenemyrageskillspineadjust(int index, float value) {
  bjenemyrageskillspineadjust_.Set(index, value);
  // @@protoc_insertion_point(field_set:pb.SkillSpecialData.BJEnemyRageSkillSpineAdjust)
}
inline void SkillSpecialData::add_bjenemyrageskillspineadjust(float value) {
  bjenemyrageskillspineadjust_.Add(value);
  // @@protoc_insertion_point(field_add:pb.SkillSpecialData.BJEnemyRageSkillSpineAdjust)
}
inline const ::google::protobuf::RepeatedField< float >&
SkillSpecialData::bjenemyrageskillspineadjust() const {
  // @@protoc_insertion_point(field_list:pb.SkillSpecialData.BJEnemyRageSkillSpineAdjust)
  return bjenemyrageskillspineadjust_;
}
inline ::google::protobuf::RepeatedField< float >*
SkillSpecialData::mutable_bjenemyrageskillspineadjust() {
  // @@protoc_insertion_point(field_mutable_list:pb.SkillSpecialData.BJEnemyRageSkillSpineAdjust)
  return &bjenemyrageskillspineadjust_;
}

// -------------------------------------------------------------------

// SkillTargetPriority

// optional int32 Front = 1;
inline bool SkillTargetPriority::has_front() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SkillTargetPriority::set_has_front() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SkillTargetPriority::clear_has_front() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SkillTargetPriority::clear_front() {
  front_ = 0;
  clear_has_front();
}
inline ::google::protobuf::int32 SkillTargetPriority::front() const {
  // @@protoc_insertion_point(field_get:pb.SkillTargetPriority.Front)
  return front_;
}
inline void SkillTargetPriority::set_front(::google::protobuf::int32 value) {
  set_has_front();
  front_ = value;
  // @@protoc_insertion_point(field_set:pb.SkillTargetPriority.Front)
}

// optional int32 Middle = 2;
inline bool SkillTargetPriority::has_middle() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SkillTargetPriority::set_has_middle() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SkillTargetPriority::clear_has_middle() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SkillTargetPriority::clear_middle() {
  middle_ = 0;
  clear_has_middle();
}
inline ::google::protobuf::int32 SkillTargetPriority::middle() const {
  // @@protoc_insertion_point(field_get:pb.SkillTargetPriority.Middle)
  return middle_;
}
inline void SkillTargetPriority::set_middle(::google::protobuf::int32 value) {
  set_has_middle();
  middle_ = value;
  // @@protoc_insertion_point(field_set:pb.SkillTargetPriority.Middle)
}

// optional int32 Back = 3;
inline bool SkillTargetPriority::has_back() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void SkillTargetPriority::set_has_back() {
  _has_bits_[0] |= 0x00000004u;
}
inline void SkillTargetPriority::clear_has_back() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void SkillTargetPriority::clear_back() {
  back_ = 0;
  clear_has_back();
}
inline ::google::protobuf::int32 SkillTargetPriority::back() const {
  // @@protoc_insertion_point(field_get:pb.SkillTargetPriority.Back)
  return back_;
}
inline void SkillTargetPriority::set_back(::google::protobuf::int32 value) {
  set_has_back();
  back_ = value;
  // @@protoc_insertion_point(field_set:pb.SkillTargetPriority.Back)
}

// -------------------------------------------------------------------

// HitEffectData

// optional int32 EffectParent = 1;
inline bool HitEffectData::has_effectparent() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void HitEffectData::set_has_effectparent() {
  _has_bits_[0] |= 0x00000001u;
}
inline void HitEffectData::clear_has_effectparent() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void HitEffectData::clear_effectparent() {
  effectparent_ = 0;
  clear_has_effectparent();
}
inline ::google::protobuf::int32 HitEffectData::effectparent() const {
  // @@protoc_insertion_point(field_get:pb.HitEffectData.EffectParent)
  return effectparent_;
}
inline void HitEffectData::set_effectparent(::google::protobuf::int32 value) {
  set_has_effectparent();
  effectparent_ = value;
  // @@protoc_insertion_point(field_set:pb.HitEffectData.EffectParent)
}

// optional string HitEffect = 2;
inline bool HitEffectData::has_hiteffect() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void HitEffectData::set_has_hiteffect() {
  _has_bits_[0] |= 0x00000002u;
}
inline void HitEffectData::clear_has_hiteffect() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void HitEffectData::clear_hiteffect() {
  if (hiteffect_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    hiteffect_->clear();
  }
  clear_has_hiteffect();
}
inline const ::std::string& HitEffectData::hiteffect() const {
  // @@protoc_insertion_point(field_get:pb.HitEffectData.HitEffect)
  return *hiteffect_;
}
inline void HitEffectData::set_hiteffect(const ::std::string& value) {
  set_has_hiteffect();
  if (hiteffect_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    hiteffect_ = new ::std::string;
  }
  hiteffect_->assign(value);
  // @@protoc_insertion_point(field_set:pb.HitEffectData.HitEffect)
}
inline void HitEffectData::set_hiteffect(const char* value) {
  set_has_hiteffect();
  if (hiteffect_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    hiteffect_ = new ::std::string;
  }
  hiteffect_->assign(value);
  // @@protoc_insertion_point(field_set_char:pb.HitEffectData.HitEffect)
}
inline void HitEffectData::set_hiteffect(const char* value, size_t size) {
  set_has_hiteffect();
  if (hiteffect_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    hiteffect_ = new ::std::string;
  }
  hiteffect_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:pb.HitEffectData.HitEffect)
}
inline ::std::string* HitEffectData::mutable_hiteffect() {
  set_has_hiteffect();
  if (hiteffect_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    hiteffect_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:pb.HitEffectData.HitEffect)
  return hiteffect_;
}
inline ::std::string* HitEffectData::release_hiteffect() {
  clear_has_hiteffect();
  if (hiteffect_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = hiteffect_;
    hiteffect_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void HitEffectData::set_allocated_hiteffect(::std::string* hiteffect) {
  if (hiteffect_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete hiteffect_;
  }
  if (hiteffect) {
    set_has_hiteffect();
    hiteffect_ = hiteffect;
  } else {
    clear_has_hiteffect();
    hiteffect_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:pb.HitEffectData.HitEffect)
}

// optional string HitSound = 3;
inline bool HitEffectData::has_hitsound() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void HitEffectData::set_has_hitsound() {
  _has_bits_[0] |= 0x00000004u;
}
inline void HitEffectData::clear_has_hitsound() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void HitEffectData::clear_hitsound() {
  if (hitsound_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    hitsound_->clear();
  }
  clear_has_hitsound();
}
inline const ::std::string& HitEffectData::hitsound() const {
  // @@protoc_insertion_point(field_get:pb.HitEffectData.HitSound)
  return *hitsound_;
}
inline void HitEffectData::set_hitsound(const ::std::string& value) {
  set_has_hitsound();
  if (hitsound_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    hitsound_ = new ::std::string;
  }
  hitsound_->assign(value);
  // @@protoc_insertion_point(field_set:pb.HitEffectData.HitSound)
}
inline void HitEffectData::set_hitsound(const char* value) {
  set_has_hitsound();
  if (hitsound_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    hitsound_ = new ::std::string;
  }
  hitsound_->assign(value);
  // @@protoc_insertion_point(field_set_char:pb.HitEffectData.HitSound)
}
inline void HitEffectData::set_hitsound(const char* value, size_t size) {
  set_has_hitsound();
  if (hitsound_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    hitsound_ = new ::std::string;
  }
  hitsound_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:pb.HitEffectData.HitSound)
}
inline ::std::string* HitEffectData::mutable_hitsound() {
  set_has_hitsound();
  if (hitsound_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    hitsound_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:pb.HitEffectData.HitSound)
  return hitsound_;
}
inline ::std::string* HitEffectData::release_hitsound() {
  clear_has_hitsound();
  if (hitsound_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = hitsound_;
    hitsound_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void HitEffectData::set_allocated_hitsound(::std::string* hitsound) {
  if (hitsound_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete hitsound_;
  }
  if (hitsound) {
    set_has_hitsound();
    hitsound_ = hitsound;
  } else {
    clear_has_hitsound();
    hitsound_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:pb.HitEffectData.HitSound)
}

// optional bool HitEffectFollow = 4;
inline bool HitEffectData::has_hiteffectfollow() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void HitEffectData::set_has_hiteffectfollow() {
  _has_bits_[0] |= 0x00000008u;
}
inline void HitEffectData::clear_has_hiteffectfollow() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void HitEffectData::clear_hiteffectfollow() {
  hiteffectfollow_ = false;
  clear_has_hiteffectfollow();
}
inline bool HitEffectData::hiteffectfollow() const {
  // @@protoc_insertion_point(field_get:pb.HitEffectData.HitEffectFollow)
  return hiteffectfollow_;
}
inline void HitEffectData::set_hiteffectfollow(bool value) {
  set_has_hiteffectfollow();
  hiteffectfollow_ = value;
  // @@protoc_insertion_point(field_set:pb.HitEffectData.HitEffectFollow)
}

// optional bool HitEffectFlip = 5;
inline bool HitEffectData::has_hiteffectflip() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void HitEffectData::set_has_hiteffectflip() {
  _has_bits_[0] |= 0x00000010u;
}
inline void HitEffectData::clear_has_hiteffectflip() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void HitEffectData::clear_hiteffectflip() {
  hiteffectflip_ = false;
  clear_has_hiteffectflip();
}
inline bool HitEffectData::hiteffectflip() const {
  // @@protoc_insertion_point(field_get:pb.HitEffectData.HitEffectFlip)
  return hiteffectflip_;
}
inline void HitEffectData::set_hiteffectflip(bool value) {
  set_has_hiteffectflip();
  hiteffectflip_ = value;
  // @@protoc_insertion_point(field_set:pb.HitEffectData.HitEffectFlip)
}

// optional bool HitEffectRotateRandom = 6;
inline bool HitEffectData::has_hiteffectrotaterandom() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void HitEffectData::set_has_hiteffectrotaterandom() {
  _has_bits_[0] |= 0x00000020u;
}
inline void HitEffectData::clear_has_hiteffectrotaterandom() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void HitEffectData::clear_hiteffectrotaterandom() {
  hiteffectrotaterandom_ = false;
  clear_has_hiteffectrotaterandom();
}
inline bool HitEffectData::hiteffectrotaterandom() const {
  // @@protoc_insertion_point(field_get:pb.HitEffectData.HitEffectRotateRandom)
  return hiteffectrotaterandom_;
}
inline void HitEffectData::set_hiteffectrotaterandom(bool value) {
  set_has_hiteffectrotaterandom();
  hiteffectrotaterandom_ = value;
  // @@protoc_insertion_point(field_set:pb.HitEffectData.HitEffectRotateRandom)
}

// repeated int32 HitEffectRotateRangeX = 7;
inline int HitEffectData::hiteffectrotaterangex_size() const {
  return hiteffectrotaterangex_.size();
}
inline void HitEffectData::clear_hiteffectrotaterangex() {
  hiteffectrotaterangex_.Clear();
}
inline ::google::protobuf::int32 HitEffectData::hiteffectrotaterangex(int index) const {
  // @@protoc_insertion_point(field_get:pb.HitEffectData.HitEffectRotateRangeX)
  return hiteffectrotaterangex_.Get(index);
}
inline void HitEffectData::set_hiteffectrotaterangex(int index, ::google::protobuf::int32 value) {
  hiteffectrotaterangex_.Set(index, value);
  // @@protoc_insertion_point(field_set:pb.HitEffectData.HitEffectRotateRangeX)
}
inline void HitEffectData::add_hiteffectrotaterangex(::google::protobuf::int32 value) {
  hiteffectrotaterangex_.Add(value);
  // @@protoc_insertion_point(field_add:pb.HitEffectData.HitEffectRotateRangeX)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
HitEffectData::hiteffectrotaterangex() const {
  // @@protoc_insertion_point(field_list:pb.HitEffectData.HitEffectRotateRangeX)
  return hiteffectrotaterangex_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
HitEffectData::mutable_hiteffectrotaterangex() {
  // @@protoc_insertion_point(field_mutable_list:pb.HitEffectData.HitEffectRotateRangeX)
  return &hiteffectrotaterangex_;
}

// repeated int32 HitEffectRotateRangeY = 8;
inline int HitEffectData::hiteffectrotaterangey_size() const {
  return hiteffectrotaterangey_.size();
}
inline void HitEffectData::clear_hiteffectrotaterangey() {
  hiteffectrotaterangey_.Clear();
}
inline ::google::protobuf::int32 HitEffectData::hiteffectrotaterangey(int index) const {
  // @@protoc_insertion_point(field_get:pb.HitEffectData.HitEffectRotateRangeY)
  return hiteffectrotaterangey_.Get(index);
}
inline void HitEffectData::set_hiteffectrotaterangey(int index, ::google::protobuf::int32 value) {
  hiteffectrotaterangey_.Set(index, value);
  // @@protoc_insertion_point(field_set:pb.HitEffectData.HitEffectRotateRangeY)
}
inline void HitEffectData::add_hiteffectrotaterangey(::google::protobuf::int32 value) {
  hiteffectrotaterangey_.Add(value);
  // @@protoc_insertion_point(field_add:pb.HitEffectData.HitEffectRotateRangeY)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
HitEffectData::hiteffectrotaterangey() const {
  // @@protoc_insertion_point(field_list:pb.HitEffectData.HitEffectRotateRangeY)
  return hiteffectrotaterangey_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
HitEffectData::mutable_hiteffectrotaterangey() {
  // @@protoc_insertion_point(field_mutable_list:pb.HitEffectData.HitEffectRotateRangeY)
  return &hiteffectrotaterangey_;
}

// optional bool HitEffectScale = 9;
inline bool HitEffectData::has_hiteffectscale() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void HitEffectData::set_has_hiteffectscale() {
  _has_bits_[0] |= 0x00000100u;
}
inline void HitEffectData::clear_has_hiteffectscale() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void HitEffectData::clear_hiteffectscale() {
  hiteffectscale_ = false;
  clear_has_hiteffectscale();
}
inline bool HitEffectData::hiteffectscale() const {
  // @@protoc_insertion_point(field_get:pb.HitEffectData.HitEffectScale)
  return hiteffectscale_;
}
inline void HitEffectData::set_hiteffectscale(bool value) {
  set_has_hiteffectscale();
  hiteffectscale_ = value;
  // @@protoc_insertion_point(field_set:pb.HitEffectData.HitEffectScale)
}

// repeated int32 HitEffectScaleRange = 10;
inline int HitEffectData::hiteffectscalerange_size() const {
  return hiteffectscalerange_.size();
}
inline void HitEffectData::clear_hiteffectscalerange() {
  hiteffectscalerange_.Clear();
}
inline ::google::protobuf::int32 HitEffectData::hiteffectscalerange(int index) const {
  // @@protoc_insertion_point(field_get:pb.HitEffectData.HitEffectScaleRange)
  return hiteffectscalerange_.Get(index);
}
inline void HitEffectData::set_hiteffectscalerange(int index, ::google::protobuf::int32 value) {
  hiteffectscalerange_.Set(index, value);
  // @@protoc_insertion_point(field_set:pb.HitEffectData.HitEffectScaleRange)
}
inline void HitEffectData::add_hiteffectscalerange(::google::protobuf::int32 value) {
  hiteffectscalerange_.Add(value);
  // @@protoc_insertion_point(field_add:pb.HitEffectData.HitEffectScaleRange)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
HitEffectData::hiteffectscalerange() const {
  // @@protoc_insertion_point(field_list:pb.HitEffectData.HitEffectScaleRange)
  return hiteffectscalerange_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
HitEffectData::mutable_hiteffectscalerange() {
  // @@protoc_insertion_point(field_mutable_list:pb.HitEffectData.HitEffectScaleRange)
  return &hiteffectscalerange_;
}

// -------------------------------------------------------------------

// SkillCastType

// optional int32 CastType = 1;
inline bool SkillCastType::has_casttype() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SkillCastType::set_has_casttype() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SkillCastType::clear_has_casttype() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SkillCastType::clear_casttype() {
  casttype_ = 0;
  clear_has_casttype();
}
inline ::google::protobuf::int32 SkillCastType::casttype() const {
  // @@protoc_insertion_point(field_get:pb.SkillCastType.CastType)
  return casttype_;
}
inline void SkillCastType::set_casttype(::google::protobuf::int32 value) {
  set_has_casttype();
  casttype_ = value;
  // @@protoc_insertion_point(field_set:pb.SkillCastType.CastType)
}

// optional int32 EventMajor = 2;
inline bool SkillCastType::has_eventmajor() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SkillCastType::set_has_eventmajor() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SkillCastType::clear_has_eventmajor() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SkillCastType::clear_eventmajor() {
  eventmajor_ = 0;
  clear_has_eventmajor();
}
inline ::google::protobuf::int32 SkillCastType::eventmajor() const {
  // @@protoc_insertion_point(field_get:pb.SkillCastType.EventMajor)
  return eventmajor_;
}
inline void SkillCastType::set_eventmajor(::google::protobuf::int32 value) {
  set_has_eventmajor();
  eventmajor_ = value;
  // @@protoc_insertion_point(field_set:pb.SkillCastType.EventMajor)
}

// optional int32 EventRelation = 3;
inline bool SkillCastType::has_eventrelation() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void SkillCastType::set_has_eventrelation() {
  _has_bits_[0] |= 0x00000004u;
}
inline void SkillCastType::clear_has_eventrelation() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void SkillCastType::clear_eventrelation() {
  eventrelation_ = 0;
  clear_has_eventrelation();
}
inline ::google::protobuf::int32 SkillCastType::eventrelation() const {
  // @@protoc_insertion_point(field_get:pb.SkillCastType.EventRelation)
  return eventrelation_;
}
inline void SkillCastType::set_eventrelation(::google::protobuf::int32 value) {
  set_has_eventrelation();
  eventrelation_ = value;
  // @@protoc_insertion_point(field_set:pb.SkillCastType.EventRelation)
}

// optional int32 EventSub = 4;
inline bool SkillCastType::has_eventsub() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void SkillCastType::set_has_eventsub() {
  _has_bits_[0] |= 0x00000008u;
}
inline void SkillCastType::clear_has_eventsub() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void SkillCastType::clear_eventsub() {
  eventsub_ = 0;
  clear_has_eventsub();
}
inline ::google::protobuf::int32 SkillCastType::eventsub() const {
  // @@protoc_insertion_point(field_get:pb.SkillCastType.EventSub)
  return eventsub_;
}
inline void SkillCastType::set_eventsub(::google::protobuf::int32 value) {
  set_has_eventsub();
  eventsub_ = value;
  // @@protoc_insertion_point(field_set:pb.SkillCastType.EventSub)
}

// optional int32 TriggerBuffID = 5;
inline bool SkillCastType::has_triggerbuffid() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void SkillCastType::set_has_triggerbuffid() {
  _has_bits_[0] |= 0x00000010u;
}
inline void SkillCastType::clear_has_triggerbuffid() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void SkillCastType::clear_triggerbuffid() {
  triggerbuffid_ = 0;
  clear_has_triggerbuffid();
}
inline ::google::protobuf::int32 SkillCastType::triggerbuffid() const {
  // @@protoc_insertion_point(field_get:pb.SkillCastType.TriggerBuffID)
  return triggerbuffid_;
}
inline void SkillCastType::set_triggerbuffid(::google::protobuf::int32 value) {
  set_has_triggerbuffid();
  triggerbuffid_ = value;
  // @@protoc_insertion_point(field_set:pb.SkillCastType.TriggerBuffID)
}

// optional int32 TriggerBuffLayer = 6;
inline bool SkillCastType::has_triggerbufflayer() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void SkillCastType::set_has_triggerbufflayer() {
  _has_bits_[0] |= 0x00000020u;
}
inline void SkillCastType::clear_has_triggerbufflayer() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void SkillCastType::clear_triggerbufflayer() {
  triggerbufflayer_ = 0;
  clear_has_triggerbufflayer();
}
inline ::google::protobuf::int32 SkillCastType::triggerbufflayer() const {
  // @@protoc_insertion_point(field_get:pb.SkillCastType.TriggerBuffLayer)
  return triggerbufflayer_;
}
inline void SkillCastType::set_triggerbufflayer(::google::protobuf::int32 value) {
  set_has_triggerbufflayer();
  triggerbufflayer_ = value;
  // @@protoc_insertion_point(field_set:pb.SkillCastType.TriggerBuffLayer)
}

// repeated int32 TriggerSkillArr = 7;
inline int SkillCastType::triggerskillarr_size() const {
  return triggerskillarr_.size();
}
inline void SkillCastType::clear_triggerskillarr() {
  triggerskillarr_.Clear();
}
inline ::google::protobuf::int32 SkillCastType::triggerskillarr(int index) const {
  // @@protoc_insertion_point(field_get:pb.SkillCastType.TriggerSkillArr)
  return triggerskillarr_.Get(index);
}
inline void SkillCastType::set_triggerskillarr(int index, ::google::protobuf::int32 value) {
  triggerskillarr_.Set(index, value);
  // @@protoc_insertion_point(field_set:pb.SkillCastType.TriggerSkillArr)
}
inline void SkillCastType::add_triggerskillarr(::google::protobuf::int32 value) {
  triggerskillarr_.Add(value);
  // @@protoc_insertion_point(field_add:pb.SkillCastType.TriggerSkillArr)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
SkillCastType::triggerskillarr() const {
  // @@protoc_insertion_point(field_list:pb.SkillCastType.TriggerSkillArr)
  return triggerskillarr_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
SkillCastType::mutable_triggerskillarr() {
  // @@protoc_insertion_point(field_mutable_list:pb.SkillCastType.TriggerSkillArr)
  return &triggerskillarr_;
}

// optional int32 TriggerChance = 8;
inline bool SkillCastType::has_triggerchance() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void SkillCastType::set_has_triggerchance() {
  _has_bits_[0] |= 0x00000080u;
}
inline void SkillCastType::clear_has_triggerchance() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void SkillCastType::clear_triggerchance() {
  triggerchance_ = 0;
  clear_has_triggerchance();
}
inline ::google::protobuf::int32 SkillCastType::triggerchance() const {
  // @@protoc_insertion_point(field_get:pb.SkillCastType.TriggerChance)
  return triggerchance_;
}
inline void SkillCastType::set_triggerchance(::google::protobuf::int32 value) {
  set_has_triggerchance();
  triggerchance_ = value;
  // @@protoc_insertion_point(field_set:pb.SkillCastType.TriggerChance)
}

// repeated int32 EventSubSkillArr = 9;
inline int SkillCastType::eventsubskillarr_size() const {
  return eventsubskillarr_.size();
}
inline void SkillCastType::clear_eventsubskillarr() {
  eventsubskillarr_.Clear();
}
inline ::google::protobuf::int32 SkillCastType::eventsubskillarr(int index) const {
  // @@protoc_insertion_point(field_get:pb.SkillCastType.EventSubSkillArr)
  return eventsubskillarr_.Get(index);
}
inline void SkillCastType::set_eventsubskillarr(int index, ::google::protobuf::int32 value) {
  eventsubskillarr_.Set(index, value);
  // @@protoc_insertion_point(field_set:pb.SkillCastType.EventSubSkillArr)
}
inline void SkillCastType::add_eventsubskillarr(::google::protobuf::int32 value) {
  eventsubskillarr_.Add(value);
  // @@protoc_insertion_point(field_add:pb.SkillCastType.EventSubSkillArr)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
SkillCastType::eventsubskillarr() const {
  // @@protoc_insertion_point(field_list:pb.SkillCastType.EventSubSkillArr)
  return eventsubskillarr_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
SkillCastType::mutable_eventsubskillarr() {
  // @@protoc_insertion_point(field_mutable_list:pb.SkillCastType.EventSubSkillArr)
  return &eventsubskillarr_;
}

// optional bool NeedInterrupt = 10;
inline bool SkillCastType::has_needinterrupt() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void SkillCastType::set_has_needinterrupt() {
  _has_bits_[0] |= 0x00000200u;
}
inline void SkillCastType::clear_has_needinterrupt() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void SkillCastType::clear_needinterrupt() {
  needinterrupt_ = false;
  clear_has_needinterrupt();
}
inline bool SkillCastType::needinterrupt() const {
  // @@protoc_insertion_point(field_get:pb.SkillCastType.NeedInterrupt)
  return needinterrupt_;
}
inline void SkillCastType::set_needinterrupt(bool value) {
  set_has_needinterrupt();
  needinterrupt_ = value;
  // @@protoc_insertion_point(field_set:pb.SkillCastType.NeedInterrupt)
}

// optional int32 RecordBuffId = 11;
inline bool SkillCastType::has_recordbuffid() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void SkillCastType::set_has_recordbuffid() {
  _has_bits_[0] |= 0x00000400u;
}
inline void SkillCastType::clear_has_recordbuffid() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void SkillCastType::clear_recordbuffid() {
  recordbuffid_ = 0;
  clear_has_recordbuffid();
}
inline ::google::protobuf::int32 SkillCastType::recordbuffid() const {
  // @@protoc_insertion_point(field_get:pb.SkillCastType.RecordBuffId)
  return recordbuffid_;
}
inline void SkillCastType::set_recordbuffid(::google::protobuf::int32 value) {
  set_has_recordbuffid();
  recordbuffid_ = value;
  // @@protoc_insertion_point(field_set:pb.SkillCastType.RecordBuffId)
}

// optional int32 RecordThreshold = 12;
inline bool SkillCastType::has_recordthreshold() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void SkillCastType::set_has_recordthreshold() {
  _has_bits_[0] |= 0x00000800u;
}
inline void SkillCastType::clear_has_recordthreshold() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void SkillCastType::clear_recordthreshold() {
  recordthreshold_ = 0;
  clear_has_recordthreshold();
}
inline ::google::protobuf::int32 SkillCastType::recordthreshold() const {
  // @@protoc_insertion_point(field_get:pb.SkillCastType.RecordThreshold)
  return recordthreshold_;
}
inline void SkillCastType::set_recordthreshold(::google::protobuf::int32 value) {
  set_has_recordthreshold();
  recordthreshold_ = value;
  // @@protoc_insertion_point(field_set:pb.SkillCastType.RecordThreshold)
}

// repeated int32 EventBuffSubArr = 13;
inline int SkillCastType::eventbuffsubarr_size() const {
  return eventbuffsubarr_.size();
}
inline void SkillCastType::clear_eventbuffsubarr() {
  eventbuffsubarr_.Clear();
}
inline ::google::protobuf::int32 SkillCastType::eventbuffsubarr(int index) const {
  // @@protoc_insertion_point(field_get:pb.SkillCastType.EventBuffSubArr)
  return eventbuffsubarr_.Get(index);
}
inline void SkillCastType::set_eventbuffsubarr(int index, ::google::protobuf::int32 value) {
  eventbuffsubarr_.Set(index, value);
  // @@protoc_insertion_point(field_set:pb.SkillCastType.EventBuffSubArr)
}
inline void SkillCastType::add_eventbuffsubarr(::google::protobuf::int32 value) {
  eventbuffsubarr_.Add(value);
  // @@protoc_insertion_point(field_add:pb.SkillCastType.EventBuffSubArr)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
SkillCastType::eventbuffsubarr() const {
  // @@protoc_insertion_point(field_list:pb.SkillCastType.EventBuffSubArr)
  return eventbuffsubarr_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
SkillCastType::mutable_eventbuffsubarr() {
  // @@protoc_insertion_point(field_mutable_list:pb.SkillCastType.EventBuffSubArr)
  return &eventbuffsubarr_;
}

// optional int32 TriggerChanceCoef = 14;
inline bool SkillCastType::has_triggerchancecoef() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void SkillCastType::set_has_triggerchancecoef() {
  _has_bits_[0] |= 0x00002000u;
}
inline void SkillCastType::clear_has_triggerchancecoef() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void SkillCastType::clear_triggerchancecoef() {
  triggerchancecoef_ = 0;
  clear_has_triggerchancecoef();
}
inline ::google::protobuf::int32 SkillCastType::triggerchancecoef() const {
  // @@protoc_insertion_point(field_get:pb.SkillCastType.TriggerChanceCoef)
  return triggerchancecoef_;
}
inline void SkillCastType::set_triggerchancecoef(::google::protobuf::int32 value) {
  set_has_triggerchancecoef();
  triggerchancecoef_ = value;
  // @@protoc_insertion_point(field_set:pb.SkillCastType.TriggerChanceCoef)
}

// optional int32 Param1 = 15;
inline bool SkillCastType::has_param1() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void SkillCastType::set_has_param1() {
  _has_bits_[0] |= 0x00004000u;
}
inline void SkillCastType::clear_has_param1() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void SkillCastType::clear_param1() {
  param1_ = 0;
  clear_has_param1();
}
inline ::google::protobuf::int32 SkillCastType::param1() const {
  // @@protoc_insertion_point(field_get:pb.SkillCastType.Param1)
  return param1_;
}
inline void SkillCastType::set_param1(::google::protobuf::int32 value) {
  set_has_param1();
  param1_ = value;
  // @@protoc_insertion_point(field_set:pb.SkillCastType.Param1)
}

// optional int32 Param2 = 16;
inline bool SkillCastType::has_param2() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void SkillCastType::set_has_param2() {
  _has_bits_[0] |= 0x00008000u;
}
inline void SkillCastType::clear_has_param2() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void SkillCastType::clear_param2() {
  param2_ = 0;
  clear_has_param2();
}
inline ::google::protobuf::int32 SkillCastType::param2() const {
  // @@protoc_insertion_point(field_get:pb.SkillCastType.Param2)
  return param2_;
}
inline void SkillCastType::set_param2(::google::protobuf::int32 value) {
  set_has_param2();
  param2_ = value;
  // @@protoc_insertion_point(field_set:pb.SkillCastType.Param2)
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace pb

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_module_2fSkillBaseData_2eproto__INCLUDED
