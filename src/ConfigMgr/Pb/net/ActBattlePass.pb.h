// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: net/ActBattlePass.proto

#ifndef PROTOBUF_net_2fActBattlePass_2eproto__INCLUDED
#define PROTOBUF_net_2fActBattlePass_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
#include "net/CommonReward.pb.h"
#include "net/OpenActivity.pb.h"
// @@protoc_insertion_point(includes)

namespace pb {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_net_2fActBattlePass_2eproto();
void protobuf_AssignDesc_net_2fActBattlePass_2eproto();
void protobuf_ShutdownFile_net_2fActBattlePass_2eproto();

class TActBattlePassTaskInfo;
class TActBattlePassSingle;
class TActBattlePassGetInfoRsp;
class TActBattlePassGetArrRewardReq;
class TActBattlePassGetArrRewardRsp;
class TActBattlePassGetArrCostRewardReq;
class TActBattlePassGetArrCostRewardRsp;
class TActBattlePassNotifySingle;
class TActBattlePassNotify;

// ===================================================================

/*FOR2LUA
<Record>
	<name>TActBattlePassTaskInfo</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/ActBattlePass.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TActBattlePassTaskInfo : public ::google::protobuf::Message {
 public:
  TActBattlePassTaskInfo();
  virtual ~TActBattlePassTaskInfo();

  TActBattlePassTaskInfo(const TActBattlePassTaskInfo& from);

  inline TActBattlePassTaskInfo& operator=(const TActBattlePassTaskInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TActBattlePassTaskInfo& default_instance();

  void Swap(TActBattlePassTaskInfo* other);

  // implements Message ----------------------------------------------

  TActBattlePassTaskInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TActBattlePassTaskInfo& from);
  void MergeFrom(const TActBattlePassTaskInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 TaskType = 1;
  inline bool has_tasktype() const;
  inline void clear_tasktype();
  static const int kTaskTypeFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TActBattlePassTaskInfo</name>
  	<Function>
  		<name>tasktype</name>
  		<replaceName>TaskType</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_tasktype</name>
  		<replaceName>TaskType</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_tasktype</name>
  		<replaceName>TaskType</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 tasktype() const;
  inline void set_tasktype(::google::protobuf::uint32 value);

  // optional uint64 Num = 2;
  inline bool has_num() const;
  inline void clear_num();
  static const int kNumFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TActBattlePassTaskInfo</name>
  	<Function>
  		<name>num</name>
  		<replaceName>Num</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_num</name>
  		<replaceName>Num</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_num</name>
  		<replaceName>Num</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint64 num() const;
  inline void set_num(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:pb.TActBattlePassTaskInfo)
 private:
  inline void set_has_tasktype();
  inline void clear_has_tasktype();
  inline void set_has_num();
  inline void clear_has_num();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint64 num_;
  ::google::protobuf::uint32 tasktype_;
  friend void  protobuf_AddDesc_net_2fActBattlePass_2eproto();
  friend void protobuf_AssignDesc_net_2fActBattlePass_2eproto();
  friend void protobuf_ShutdownFile_net_2fActBattlePass_2eproto();

  void InitAsDefaultInstance();
  static TActBattlePassTaskInfo* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TActBattlePassSingle</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/ActBattlePass.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TActBattlePassSingle : public ::google::protobuf::Message {
 public:
  TActBattlePassSingle();
  virtual ~TActBattlePassSingle();

  TActBattlePassSingle(const TActBattlePassSingle& from);

  inline TActBattlePassSingle& operator=(const TActBattlePassSingle& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TActBattlePassSingle& default_instance();

  void Swap(TActBattlePassSingle* other);

  // implements Message ----------------------------------------------

  TActBattlePassSingle* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TActBattlePassSingle& from);
  void MergeFrom(const TActBattlePassSingle& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 ProductId = 1;
  inline bool has_productid() const;
  inline void clear_productid();
  static const int kProductIdFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TActBattlePassSingle</name>
  	<Function>
  		<name>productid</name>
  		<replaceName>ProductId</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_productid</name>
  		<replaceName>ProductId</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_productid</name>
  		<replaceName>ProductId</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 productid() const;
  inline void set_productid(::google::protobuf::uint32 value);

  // optional uint64 BuyTime = 2;
  inline bool has_buytime() const;
  inline void clear_buytime();
  static const int kBuyTimeFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TActBattlePassSingle</name>
  	<Function>
  		<name>buytime</name>
  		<replaceName>BuyTime</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_buytime</name>
  		<replaceName>BuyTime</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_buytime</name>
  		<replaceName>BuyTime</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint64 buytime() const;
  inline void set_buytime(::google::protobuf::uint64 value);

  // optional uint32 TotalScore = 3;
  inline bool has_totalscore() const;
  inline void clear_totalscore();
  static const int kTotalScoreFieldNumber = 3;
  /*FOR2LUA
  <Record>
  	<name>TActBattlePassSingle</name>
  	<Function>
  		<name>totalscore</name>
  		<replaceName>TotalScore</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_totalscore</name>
  		<replaceName>TotalScore</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_totalscore</name>
  		<replaceName>TotalScore</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 totalscore() const;
  inline void set_totalscore(::google::protobuf::uint32 value);

  // repeated .pb.TActBattlePassTaskInfo ArrTaskInfo = 4;
  inline int arrtaskinfo_size() const;
  inline void clear_arrtaskinfo();
  static const int kArrTaskInfoFieldNumber = 4;
  /*FOR2LUA
  <Record>
  	<name>TActBattlePassSingle</name>
  	<Function>
  		<name>arrtaskinfo</name>
  		<replaceName>ArrTaskInfo</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_arrtaskinfo</name>
  		<replaceName>ArrTaskInfo</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_arrtaskinfo</name>
  		<replaceName>ArrTaskInfo</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_arrtaskinfo</name>
  		<replaceName>ArrTaskInfo</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>arrtaskinfo_size</name>
  		<replaceName>ArrTaskInfo</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TActBattlePassTaskInfo& arrtaskinfo(int index) const;
  inline ::pb::TActBattlePassTaskInfo* mutable_arrtaskinfo(int index);
  inline ::pb::TActBattlePassTaskInfo* add_arrtaskinfo();
  inline const ::google::protobuf::RepeatedPtrField< ::pb::TActBattlePassTaskInfo >&
      arrtaskinfo() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb::TActBattlePassTaskInfo >*
      mutable_arrtaskinfo();

  // repeated .pb.TActivityRewardInfo ArrRewardInfo = 5;
  inline int arrrewardinfo_size() const;
  inline void clear_arrrewardinfo();
  static const int kArrRewardInfoFieldNumber = 5;
  /*FOR2LUA
  <Record>
  	<name>TActBattlePassSingle</name>
  	<Function>
  		<name>arrrewardinfo</name>
  		<replaceName>ArrRewardInfo</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_arrrewardinfo</name>
  		<replaceName>ArrRewardInfo</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_arrrewardinfo</name>
  		<replaceName>ArrRewardInfo</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_arrrewardinfo</name>
  		<replaceName>ArrRewardInfo</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>arrrewardinfo_size</name>
  		<replaceName>ArrRewardInfo</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TActivityRewardInfo& arrrewardinfo(int index) const;
  inline ::pb::TActivityRewardInfo* mutable_arrrewardinfo(int index);
  inline ::pb::TActivityRewardInfo* add_arrrewardinfo();
  inline const ::google::protobuf::RepeatedPtrField< ::pb::TActivityRewardInfo >&
      arrrewardinfo() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb::TActivityRewardInfo >*
      mutable_arrrewardinfo();

  // repeated .pb.TActivityRewardInfo ArrCostRewardInfo = 6;
  inline int arrcostrewardinfo_size() const;
  inline void clear_arrcostrewardinfo();
  static const int kArrCostRewardInfoFieldNumber = 6;
  /*FOR2LUA
  <Record>
  	<name>TActBattlePassSingle</name>
  	<Function>
  		<name>arrcostrewardinfo</name>
  		<replaceName>ArrCostRewardInfo</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_arrcostrewardinfo</name>
  		<replaceName>ArrCostRewardInfo</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_arrcostrewardinfo</name>
  		<replaceName>ArrCostRewardInfo</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_arrcostrewardinfo</name>
  		<replaceName>ArrCostRewardInfo</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>arrcostrewardinfo_size</name>
  		<replaceName>ArrCostRewardInfo</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TActivityRewardInfo& arrcostrewardinfo(int index) const;
  inline ::pb::TActivityRewardInfo* mutable_arrcostrewardinfo(int index);
  inline ::pb::TActivityRewardInfo* add_arrcostrewardinfo();
  inline const ::google::protobuf::RepeatedPtrField< ::pb::TActivityRewardInfo >&
      arrcostrewardinfo() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb::TActivityRewardInfo >*
      mutable_arrcostrewardinfo();

  // @@protoc_insertion_point(class_scope:pb.TActBattlePassSingle)
 private:
  inline void set_has_productid();
  inline void clear_has_productid();
  inline void set_has_buytime();
  inline void clear_has_buytime();
  inline void set_has_totalscore();
  inline void clear_has_totalscore();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint64 buytime_;
  ::google::protobuf::uint32 productid_;
  ::google::protobuf::uint32 totalscore_;
  ::google::protobuf::RepeatedPtrField< ::pb::TActBattlePassTaskInfo > arrtaskinfo_;
  ::google::protobuf::RepeatedPtrField< ::pb::TActivityRewardInfo > arrrewardinfo_;
  ::google::protobuf::RepeatedPtrField< ::pb::TActivityRewardInfo > arrcostrewardinfo_;
  friend void  protobuf_AddDesc_net_2fActBattlePass_2eproto();
  friend void protobuf_AssignDesc_net_2fActBattlePass_2eproto();
  friend void protobuf_ShutdownFile_net_2fActBattlePass_2eproto();

  void InitAsDefaultInstance();
  static TActBattlePassSingle* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TActBattlePassGetInfoRsp</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/ActBattlePass.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TActBattlePassGetInfoRsp : public ::google::protobuf::Message {
 public:
  TActBattlePassGetInfoRsp();
  virtual ~TActBattlePassGetInfoRsp();

  TActBattlePassGetInfoRsp(const TActBattlePassGetInfoRsp& from);

  inline TActBattlePassGetInfoRsp& operator=(const TActBattlePassGetInfoRsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TActBattlePassGetInfoRsp& default_instance();

  void Swap(TActBattlePassGetInfoRsp* other);

  // implements Message ----------------------------------------------

  TActBattlePassGetInfoRsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TActBattlePassGetInfoRsp& from);
  void MergeFrom(const TActBattlePassGetInfoRsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .pb.TActBattlePassSingle ArrInfo = 1;
  inline int arrinfo_size() const;
  inline void clear_arrinfo();
  static const int kArrInfoFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TActBattlePassGetInfoRsp</name>
  	<Function>
  		<name>arrinfo</name>
  		<replaceName>ArrInfo</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_arrinfo</name>
  		<replaceName>ArrInfo</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_arrinfo</name>
  		<replaceName>ArrInfo</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_arrinfo</name>
  		<replaceName>ArrInfo</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>arrinfo_size</name>
  		<replaceName>ArrInfo</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TActBattlePassSingle& arrinfo(int index) const;
  inline ::pb::TActBattlePassSingle* mutable_arrinfo(int index);
  inline ::pb::TActBattlePassSingle* add_arrinfo();
  inline const ::google::protobuf::RepeatedPtrField< ::pb::TActBattlePassSingle >&
      arrinfo() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb::TActBattlePassSingle >*
      mutable_arrinfo();

  // @@protoc_insertion_point(class_scope:pb.TActBattlePassGetInfoRsp)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::pb::TActBattlePassSingle > arrinfo_;
  friend void  protobuf_AddDesc_net_2fActBattlePass_2eproto();
  friend void protobuf_AssignDesc_net_2fActBattlePass_2eproto();
  friend void protobuf_ShutdownFile_net_2fActBattlePass_2eproto();

  void InitAsDefaultInstance();
  static TActBattlePassGetInfoRsp* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TActBattlePassGetArrRewardReq</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/ActBattlePass.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TActBattlePassGetArrRewardReq : public ::google::protobuf::Message {
 public:
  TActBattlePassGetArrRewardReq();
  virtual ~TActBattlePassGetArrRewardReq();

  TActBattlePassGetArrRewardReq(const TActBattlePassGetArrRewardReq& from);

  inline TActBattlePassGetArrRewardReq& operator=(const TActBattlePassGetArrRewardReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TActBattlePassGetArrRewardReq& default_instance();

  void Swap(TActBattlePassGetArrRewardReq* other);

  // implements Message ----------------------------------------------

  TActBattlePassGetArrRewardReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TActBattlePassGetArrRewardReq& from);
  void MergeFrom(const TActBattlePassGetArrRewardReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 ProductId = 1;
  inline bool has_productid() const;
  inline void clear_productid();
  static const int kProductIdFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TActBattlePassGetArrRewardReq</name>
  	<Function>
  		<name>productid</name>
  		<replaceName>ProductId</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_productid</name>
  		<replaceName>ProductId</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_productid</name>
  		<replaceName>ProductId</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 productid() const;
  inline void set_productid(::google::protobuf::uint32 value);

  // repeated uint32 ArrId = 2;
  inline int arrid_size() const;
  inline void clear_arrid();
  static const int kArrIdFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TActBattlePassGetArrRewardReq</name>
  	<Function>
  		<name>arrid</name>
  		<replaceName>ArrId</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_arrid</name>
  		<replaceName>ArrId</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_arrid</name>
  		<replaceName>ArrId</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_arrid</name>
  		<replaceName>ArrId</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>arrid_size</name>
  		<replaceName>ArrId</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 arrid(int index) const;
  inline void set_arrid(int index, ::google::protobuf::uint32 value);
  inline void add_arrid(::google::protobuf::uint32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      arrid() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_arrid();

  // @@protoc_insertion_point(class_scope:pb.TActBattlePassGetArrRewardReq)
 private:
  inline void set_has_productid();
  inline void clear_has_productid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > arrid_;
  ::google::protobuf::uint32 productid_;
  friend void  protobuf_AddDesc_net_2fActBattlePass_2eproto();
  friend void protobuf_AssignDesc_net_2fActBattlePass_2eproto();
  friend void protobuf_ShutdownFile_net_2fActBattlePass_2eproto();

  void InitAsDefaultInstance();
  static TActBattlePassGetArrRewardReq* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TActBattlePassGetArrRewardRsp</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/ActBattlePass.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TActBattlePassGetArrRewardRsp : public ::google::protobuf::Message {
 public:
  TActBattlePassGetArrRewardRsp();
  virtual ~TActBattlePassGetArrRewardRsp();

  TActBattlePassGetArrRewardRsp(const TActBattlePassGetArrRewardRsp& from);

  inline TActBattlePassGetArrRewardRsp& operator=(const TActBattlePassGetArrRewardRsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TActBattlePassGetArrRewardRsp& default_instance();

  void Swap(TActBattlePassGetArrRewardRsp* other);

  // implements Message ----------------------------------------------

  TActBattlePassGetArrRewardRsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TActBattlePassGetArrRewardRsp& from);
  void MergeFrom(const TActBattlePassGetArrRewardRsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .pb.TCommonReward ArrReward = 1;
  inline int arrreward_size() const;
  inline void clear_arrreward();
  static const int kArrRewardFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TActBattlePassGetArrRewardRsp</name>
  	<Function>
  		<name>arrreward</name>
  		<replaceName>ArrReward</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_arrreward</name>
  		<replaceName>ArrReward</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_arrreward</name>
  		<replaceName>ArrReward</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_arrreward</name>
  		<replaceName>ArrReward</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>arrreward_size</name>
  		<replaceName>ArrReward</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TCommonReward& arrreward(int index) const;
  inline ::pb::TCommonReward* mutable_arrreward(int index);
  inline ::pb::TCommonReward* add_arrreward();
  inline const ::google::protobuf::RepeatedPtrField< ::pb::TCommonReward >&
      arrreward() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb::TCommonReward >*
      mutable_arrreward();

  // @@protoc_insertion_point(class_scope:pb.TActBattlePassGetArrRewardRsp)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::pb::TCommonReward > arrreward_;
  friend void  protobuf_AddDesc_net_2fActBattlePass_2eproto();
  friend void protobuf_AssignDesc_net_2fActBattlePass_2eproto();
  friend void protobuf_ShutdownFile_net_2fActBattlePass_2eproto();

  void InitAsDefaultInstance();
  static TActBattlePassGetArrRewardRsp* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TActBattlePassGetArrCostRewardReq</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/ActBattlePass.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TActBattlePassGetArrCostRewardReq : public ::google::protobuf::Message {
 public:
  TActBattlePassGetArrCostRewardReq();
  virtual ~TActBattlePassGetArrCostRewardReq();

  TActBattlePassGetArrCostRewardReq(const TActBattlePassGetArrCostRewardReq& from);

  inline TActBattlePassGetArrCostRewardReq& operator=(const TActBattlePassGetArrCostRewardReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TActBattlePassGetArrCostRewardReq& default_instance();

  void Swap(TActBattlePassGetArrCostRewardReq* other);

  // implements Message ----------------------------------------------

  TActBattlePassGetArrCostRewardReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TActBattlePassGetArrCostRewardReq& from);
  void MergeFrom(const TActBattlePassGetArrCostRewardReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 ProductId = 1;
  inline bool has_productid() const;
  inline void clear_productid();
  static const int kProductIdFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TActBattlePassGetArrCostRewardReq</name>
  	<Function>
  		<name>productid</name>
  		<replaceName>ProductId</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_productid</name>
  		<replaceName>ProductId</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_productid</name>
  		<replaceName>ProductId</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 productid() const;
  inline void set_productid(::google::protobuf::uint32 value);

  // repeated uint32 ArrId = 2;
  inline int arrid_size() const;
  inline void clear_arrid();
  static const int kArrIdFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TActBattlePassGetArrCostRewardReq</name>
  	<Function>
  		<name>arrid</name>
  		<replaceName>ArrId</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_arrid</name>
  		<replaceName>ArrId</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_arrid</name>
  		<replaceName>ArrId</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_arrid</name>
  		<replaceName>ArrId</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>arrid_size</name>
  		<replaceName>ArrId</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 arrid(int index) const;
  inline void set_arrid(int index, ::google::protobuf::uint32 value);
  inline void add_arrid(::google::protobuf::uint32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      arrid() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_arrid();

  // @@protoc_insertion_point(class_scope:pb.TActBattlePassGetArrCostRewardReq)
 private:
  inline void set_has_productid();
  inline void clear_has_productid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > arrid_;
  ::google::protobuf::uint32 productid_;
  friend void  protobuf_AddDesc_net_2fActBattlePass_2eproto();
  friend void protobuf_AssignDesc_net_2fActBattlePass_2eproto();
  friend void protobuf_ShutdownFile_net_2fActBattlePass_2eproto();

  void InitAsDefaultInstance();
  static TActBattlePassGetArrCostRewardReq* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TActBattlePassGetArrCostRewardRsp</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/ActBattlePass.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TActBattlePassGetArrCostRewardRsp : public ::google::protobuf::Message {
 public:
  TActBattlePassGetArrCostRewardRsp();
  virtual ~TActBattlePassGetArrCostRewardRsp();

  TActBattlePassGetArrCostRewardRsp(const TActBattlePassGetArrCostRewardRsp& from);

  inline TActBattlePassGetArrCostRewardRsp& operator=(const TActBattlePassGetArrCostRewardRsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TActBattlePassGetArrCostRewardRsp& default_instance();

  void Swap(TActBattlePassGetArrCostRewardRsp* other);

  // implements Message ----------------------------------------------

  TActBattlePassGetArrCostRewardRsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TActBattlePassGetArrCostRewardRsp& from);
  void MergeFrom(const TActBattlePassGetArrCostRewardRsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .pb.TCommonReward ArrReward = 1;
  inline int arrreward_size() const;
  inline void clear_arrreward();
  static const int kArrRewardFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TActBattlePassGetArrCostRewardRsp</name>
  	<Function>
  		<name>arrreward</name>
  		<replaceName>ArrReward</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_arrreward</name>
  		<replaceName>ArrReward</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_arrreward</name>
  		<replaceName>ArrReward</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_arrreward</name>
  		<replaceName>ArrReward</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>arrreward_size</name>
  		<replaceName>ArrReward</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TCommonReward& arrreward(int index) const;
  inline ::pb::TCommonReward* mutable_arrreward(int index);
  inline ::pb::TCommonReward* add_arrreward();
  inline const ::google::protobuf::RepeatedPtrField< ::pb::TCommonReward >&
      arrreward() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb::TCommonReward >*
      mutable_arrreward();

  // @@protoc_insertion_point(class_scope:pb.TActBattlePassGetArrCostRewardRsp)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::pb::TCommonReward > arrreward_;
  friend void  protobuf_AddDesc_net_2fActBattlePass_2eproto();
  friend void protobuf_AssignDesc_net_2fActBattlePass_2eproto();
  friend void protobuf_ShutdownFile_net_2fActBattlePass_2eproto();

  void InitAsDefaultInstance();
  static TActBattlePassGetArrCostRewardRsp* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TActBattlePassNotifySingle</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/ActBattlePass.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TActBattlePassNotifySingle : public ::google::protobuf::Message {
 public:
  TActBattlePassNotifySingle();
  virtual ~TActBattlePassNotifySingle();

  TActBattlePassNotifySingle(const TActBattlePassNotifySingle& from);

  inline TActBattlePassNotifySingle& operator=(const TActBattlePassNotifySingle& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TActBattlePassNotifySingle& default_instance();

  void Swap(TActBattlePassNotifySingle* other);

  // implements Message ----------------------------------------------

  TActBattlePassNotifySingle* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TActBattlePassNotifySingle& from);
  void MergeFrom(const TActBattlePassNotifySingle& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 ProductId = 1;
  inline bool has_productid() const;
  inline void clear_productid();
  static const int kProductIdFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TActBattlePassNotifySingle</name>
  	<Function>
  		<name>productid</name>
  		<replaceName>ProductId</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_productid</name>
  		<replaceName>ProductId</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_productid</name>
  		<replaceName>ProductId</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 productid() const;
  inline void set_productid(::google::protobuf::uint32 value);

  // optional uint64 BuyTime = 2;
  inline bool has_buytime() const;
  inline void clear_buytime();
  static const int kBuyTimeFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TActBattlePassNotifySingle</name>
  	<Function>
  		<name>buytime</name>
  		<replaceName>BuyTime</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_buytime</name>
  		<replaceName>BuyTime</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_buytime</name>
  		<replaceName>BuyTime</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint64 buytime() const;
  inline void set_buytime(::google::protobuf::uint64 value);

  // optional uint32 TotalScore = 3;
  inline bool has_totalscore() const;
  inline void clear_totalscore();
  static const int kTotalScoreFieldNumber = 3;
  /*FOR2LUA
  <Record>
  	<name>TActBattlePassNotifySingle</name>
  	<Function>
  		<name>totalscore</name>
  		<replaceName>TotalScore</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_totalscore</name>
  		<replaceName>TotalScore</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_totalscore</name>
  		<replaceName>TotalScore</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 totalscore() const;
  inline void set_totalscore(::google::protobuf::uint32 value);

  // repeated .pb.TActBattlePassTaskInfo ArrTaskInfo = 4;
  inline int arrtaskinfo_size() const;
  inline void clear_arrtaskinfo();
  static const int kArrTaskInfoFieldNumber = 4;
  /*FOR2LUA
  <Record>
  	<name>TActBattlePassNotifySingle</name>
  	<Function>
  		<name>arrtaskinfo</name>
  		<replaceName>ArrTaskInfo</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_arrtaskinfo</name>
  		<replaceName>ArrTaskInfo</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_arrtaskinfo</name>
  		<replaceName>ArrTaskInfo</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_arrtaskinfo</name>
  		<replaceName>ArrTaskInfo</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>arrtaskinfo_size</name>
  		<replaceName>ArrTaskInfo</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TActBattlePassTaskInfo& arrtaskinfo(int index) const;
  inline ::pb::TActBattlePassTaskInfo* mutable_arrtaskinfo(int index);
  inline ::pb::TActBattlePassTaskInfo* add_arrtaskinfo();
  inline const ::google::protobuf::RepeatedPtrField< ::pb::TActBattlePassTaskInfo >&
      arrtaskinfo() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb::TActBattlePassTaskInfo >*
      mutable_arrtaskinfo();

  // repeated .pb.TActivityRewardInfo ArrCostRewardInfo = 5;
  inline int arrcostrewardinfo_size() const;
  inline void clear_arrcostrewardinfo();
  static const int kArrCostRewardInfoFieldNumber = 5;
  /*FOR2LUA
  <Record>
  	<name>TActBattlePassNotifySingle</name>
  	<Function>
  		<name>arrcostrewardinfo</name>
  		<replaceName>ArrCostRewardInfo</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_arrcostrewardinfo</name>
  		<replaceName>ArrCostRewardInfo</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_arrcostrewardinfo</name>
  		<replaceName>ArrCostRewardInfo</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_arrcostrewardinfo</name>
  		<replaceName>ArrCostRewardInfo</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>arrcostrewardinfo_size</name>
  		<replaceName>ArrCostRewardInfo</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TActivityRewardInfo& arrcostrewardinfo(int index) const;
  inline ::pb::TActivityRewardInfo* mutable_arrcostrewardinfo(int index);
  inline ::pb::TActivityRewardInfo* add_arrcostrewardinfo();
  inline const ::google::protobuf::RepeatedPtrField< ::pb::TActivityRewardInfo >&
      arrcostrewardinfo() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb::TActivityRewardInfo >*
      mutable_arrcostrewardinfo();

  // @@protoc_insertion_point(class_scope:pb.TActBattlePassNotifySingle)
 private:
  inline void set_has_productid();
  inline void clear_has_productid();
  inline void set_has_buytime();
  inline void clear_has_buytime();
  inline void set_has_totalscore();
  inline void clear_has_totalscore();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint64 buytime_;
  ::google::protobuf::uint32 productid_;
  ::google::protobuf::uint32 totalscore_;
  ::google::protobuf::RepeatedPtrField< ::pb::TActBattlePassTaskInfo > arrtaskinfo_;
  ::google::protobuf::RepeatedPtrField< ::pb::TActivityRewardInfo > arrcostrewardinfo_;
  friend void  protobuf_AddDesc_net_2fActBattlePass_2eproto();
  friend void protobuf_AssignDesc_net_2fActBattlePass_2eproto();
  friend void protobuf_ShutdownFile_net_2fActBattlePass_2eproto();

  void InitAsDefaultInstance();
  static TActBattlePassNotifySingle* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TActBattlePassNotify</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/ActBattlePass.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TActBattlePassNotify : public ::google::protobuf::Message {
 public:
  TActBattlePassNotify();
  virtual ~TActBattlePassNotify();

  TActBattlePassNotify(const TActBattlePassNotify& from);

  inline TActBattlePassNotify& operator=(const TActBattlePassNotify& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TActBattlePassNotify& default_instance();

  void Swap(TActBattlePassNotify* other);

  // implements Message ----------------------------------------------

  TActBattlePassNotify* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TActBattlePassNotify& from);
  void MergeFrom(const TActBattlePassNotify& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .pb.TActBattlePassNotifySingle ArrNotify = 1;
  inline int arrnotify_size() const;
  inline void clear_arrnotify();
  static const int kArrNotifyFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TActBattlePassNotify</name>
  	<Function>
  		<name>arrnotify</name>
  		<replaceName>ArrNotify</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_arrnotify</name>
  		<replaceName>ArrNotify</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_arrnotify</name>
  		<replaceName>ArrNotify</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_arrnotify</name>
  		<replaceName>ArrNotify</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>arrnotify_size</name>
  		<replaceName>ArrNotify</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TActBattlePassNotifySingle& arrnotify(int index) const;
  inline ::pb::TActBattlePassNotifySingle* mutable_arrnotify(int index);
  inline ::pb::TActBattlePassNotifySingle* add_arrnotify();
  inline const ::google::protobuf::RepeatedPtrField< ::pb::TActBattlePassNotifySingle >&
      arrnotify() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb::TActBattlePassNotifySingle >*
      mutable_arrnotify();

  // @@protoc_insertion_point(class_scope:pb.TActBattlePassNotify)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::pb::TActBattlePassNotifySingle > arrnotify_;
  friend void  protobuf_AddDesc_net_2fActBattlePass_2eproto();
  friend void protobuf_AssignDesc_net_2fActBattlePass_2eproto();
  friend void protobuf_ShutdownFile_net_2fActBattlePass_2eproto();

  void InitAsDefaultInstance();
  static TActBattlePassNotify* default_instance_;
};
// ===================================================================


// ===================================================================

// TActBattlePassTaskInfo

// optional uint32 TaskType = 1;
inline bool TActBattlePassTaskInfo::has_tasktype() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TActBattlePassTaskInfo::set_has_tasktype() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TActBattlePassTaskInfo::clear_has_tasktype() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TActBattlePassTaskInfo::clear_tasktype() {
  tasktype_ = 0u;
  clear_has_tasktype();
}
inline ::google::protobuf::uint32 TActBattlePassTaskInfo::tasktype() const {
  // @@protoc_insertion_point(field_get:pb.TActBattlePassTaskInfo.TaskType)
  return tasktype_;
}
inline void TActBattlePassTaskInfo::set_tasktype(::google::protobuf::uint32 value) {
  set_has_tasktype();
  tasktype_ = value;
  // @@protoc_insertion_point(field_set:pb.TActBattlePassTaskInfo.TaskType)
}

// optional uint64 Num = 2;
inline bool TActBattlePassTaskInfo::has_num() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TActBattlePassTaskInfo::set_has_num() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TActBattlePassTaskInfo::clear_has_num() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TActBattlePassTaskInfo::clear_num() {
  num_ = GOOGLE_ULONGLONG(0);
  clear_has_num();
}
inline ::google::protobuf::uint64 TActBattlePassTaskInfo::num() const {
  // @@protoc_insertion_point(field_get:pb.TActBattlePassTaskInfo.Num)
  return num_;
}
inline void TActBattlePassTaskInfo::set_num(::google::protobuf::uint64 value) {
  set_has_num();
  num_ = value;
  // @@protoc_insertion_point(field_set:pb.TActBattlePassTaskInfo.Num)
}

// -------------------------------------------------------------------

// TActBattlePassSingle

// optional uint32 ProductId = 1;
inline bool TActBattlePassSingle::has_productid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TActBattlePassSingle::set_has_productid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TActBattlePassSingle::clear_has_productid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TActBattlePassSingle::clear_productid() {
  productid_ = 0u;
  clear_has_productid();
}
inline ::google::protobuf::uint32 TActBattlePassSingle::productid() const {
  // @@protoc_insertion_point(field_get:pb.TActBattlePassSingle.ProductId)
  return productid_;
}
inline void TActBattlePassSingle::set_productid(::google::protobuf::uint32 value) {
  set_has_productid();
  productid_ = value;
  // @@protoc_insertion_point(field_set:pb.TActBattlePassSingle.ProductId)
}

// optional uint64 BuyTime = 2;
inline bool TActBattlePassSingle::has_buytime() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TActBattlePassSingle::set_has_buytime() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TActBattlePassSingle::clear_has_buytime() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TActBattlePassSingle::clear_buytime() {
  buytime_ = GOOGLE_ULONGLONG(0);
  clear_has_buytime();
}
inline ::google::protobuf::uint64 TActBattlePassSingle::buytime() const {
  // @@protoc_insertion_point(field_get:pb.TActBattlePassSingle.BuyTime)
  return buytime_;
}
inline void TActBattlePassSingle::set_buytime(::google::protobuf::uint64 value) {
  set_has_buytime();
  buytime_ = value;
  // @@protoc_insertion_point(field_set:pb.TActBattlePassSingle.BuyTime)
}

// optional uint32 TotalScore = 3;
inline bool TActBattlePassSingle::has_totalscore() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void TActBattlePassSingle::set_has_totalscore() {
  _has_bits_[0] |= 0x00000004u;
}
inline void TActBattlePassSingle::clear_has_totalscore() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void TActBattlePassSingle::clear_totalscore() {
  totalscore_ = 0u;
  clear_has_totalscore();
}
inline ::google::protobuf::uint32 TActBattlePassSingle::totalscore() const {
  // @@protoc_insertion_point(field_get:pb.TActBattlePassSingle.TotalScore)
  return totalscore_;
}
inline void TActBattlePassSingle::set_totalscore(::google::protobuf::uint32 value) {
  set_has_totalscore();
  totalscore_ = value;
  // @@protoc_insertion_point(field_set:pb.TActBattlePassSingle.TotalScore)
}

// repeated .pb.TActBattlePassTaskInfo ArrTaskInfo = 4;
inline int TActBattlePassSingle::arrtaskinfo_size() const {
  return arrtaskinfo_.size();
}
inline void TActBattlePassSingle::clear_arrtaskinfo() {
  arrtaskinfo_.Clear();
}
inline const ::pb::TActBattlePassTaskInfo& TActBattlePassSingle::arrtaskinfo(int index) const {
  // @@protoc_insertion_point(field_get:pb.TActBattlePassSingle.ArrTaskInfo)
  return arrtaskinfo_.Get(index);
}
inline ::pb::TActBattlePassTaskInfo* TActBattlePassSingle::mutable_arrtaskinfo(int index) {
  // @@protoc_insertion_point(field_mutable:pb.TActBattlePassSingle.ArrTaskInfo)
  return arrtaskinfo_.Mutable(index);
}
inline ::pb::TActBattlePassTaskInfo* TActBattlePassSingle::add_arrtaskinfo() {
  // @@protoc_insertion_point(field_add:pb.TActBattlePassSingle.ArrTaskInfo)
  return arrtaskinfo_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::TActBattlePassTaskInfo >&
TActBattlePassSingle::arrtaskinfo() const {
  // @@protoc_insertion_point(field_list:pb.TActBattlePassSingle.ArrTaskInfo)
  return arrtaskinfo_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb::TActBattlePassTaskInfo >*
TActBattlePassSingle::mutable_arrtaskinfo() {
  // @@protoc_insertion_point(field_mutable_list:pb.TActBattlePassSingle.ArrTaskInfo)
  return &arrtaskinfo_;
}

// repeated .pb.TActivityRewardInfo ArrRewardInfo = 5;
inline int TActBattlePassSingle::arrrewardinfo_size() const {
  return arrrewardinfo_.size();
}
inline void TActBattlePassSingle::clear_arrrewardinfo() {
  arrrewardinfo_.Clear();
}
inline const ::pb::TActivityRewardInfo& TActBattlePassSingle::arrrewardinfo(int index) const {
  // @@protoc_insertion_point(field_get:pb.TActBattlePassSingle.ArrRewardInfo)
  return arrrewardinfo_.Get(index);
}
inline ::pb::TActivityRewardInfo* TActBattlePassSingle::mutable_arrrewardinfo(int index) {
  // @@protoc_insertion_point(field_mutable:pb.TActBattlePassSingle.ArrRewardInfo)
  return arrrewardinfo_.Mutable(index);
}
inline ::pb::TActivityRewardInfo* TActBattlePassSingle::add_arrrewardinfo() {
  // @@protoc_insertion_point(field_add:pb.TActBattlePassSingle.ArrRewardInfo)
  return arrrewardinfo_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::TActivityRewardInfo >&
TActBattlePassSingle::arrrewardinfo() const {
  // @@protoc_insertion_point(field_list:pb.TActBattlePassSingle.ArrRewardInfo)
  return arrrewardinfo_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb::TActivityRewardInfo >*
TActBattlePassSingle::mutable_arrrewardinfo() {
  // @@protoc_insertion_point(field_mutable_list:pb.TActBattlePassSingle.ArrRewardInfo)
  return &arrrewardinfo_;
}

// repeated .pb.TActivityRewardInfo ArrCostRewardInfo = 6;
inline int TActBattlePassSingle::arrcostrewardinfo_size() const {
  return arrcostrewardinfo_.size();
}
inline void TActBattlePassSingle::clear_arrcostrewardinfo() {
  arrcostrewardinfo_.Clear();
}
inline const ::pb::TActivityRewardInfo& TActBattlePassSingle::arrcostrewardinfo(int index) const {
  // @@protoc_insertion_point(field_get:pb.TActBattlePassSingle.ArrCostRewardInfo)
  return arrcostrewardinfo_.Get(index);
}
inline ::pb::TActivityRewardInfo* TActBattlePassSingle::mutable_arrcostrewardinfo(int index) {
  // @@protoc_insertion_point(field_mutable:pb.TActBattlePassSingle.ArrCostRewardInfo)
  return arrcostrewardinfo_.Mutable(index);
}
inline ::pb::TActivityRewardInfo* TActBattlePassSingle::add_arrcostrewardinfo() {
  // @@protoc_insertion_point(field_add:pb.TActBattlePassSingle.ArrCostRewardInfo)
  return arrcostrewardinfo_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::TActivityRewardInfo >&
TActBattlePassSingle::arrcostrewardinfo() const {
  // @@protoc_insertion_point(field_list:pb.TActBattlePassSingle.ArrCostRewardInfo)
  return arrcostrewardinfo_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb::TActivityRewardInfo >*
TActBattlePassSingle::mutable_arrcostrewardinfo() {
  // @@protoc_insertion_point(field_mutable_list:pb.TActBattlePassSingle.ArrCostRewardInfo)
  return &arrcostrewardinfo_;
}

// -------------------------------------------------------------------

// TActBattlePassGetInfoRsp

// repeated .pb.TActBattlePassSingle ArrInfo = 1;
inline int TActBattlePassGetInfoRsp::arrinfo_size() const {
  return arrinfo_.size();
}
inline void TActBattlePassGetInfoRsp::clear_arrinfo() {
  arrinfo_.Clear();
}
inline const ::pb::TActBattlePassSingle& TActBattlePassGetInfoRsp::arrinfo(int index) const {
  // @@protoc_insertion_point(field_get:pb.TActBattlePassGetInfoRsp.ArrInfo)
  return arrinfo_.Get(index);
}
inline ::pb::TActBattlePassSingle* TActBattlePassGetInfoRsp::mutable_arrinfo(int index) {
  // @@protoc_insertion_point(field_mutable:pb.TActBattlePassGetInfoRsp.ArrInfo)
  return arrinfo_.Mutable(index);
}
inline ::pb::TActBattlePassSingle* TActBattlePassGetInfoRsp::add_arrinfo() {
  // @@protoc_insertion_point(field_add:pb.TActBattlePassGetInfoRsp.ArrInfo)
  return arrinfo_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::TActBattlePassSingle >&
TActBattlePassGetInfoRsp::arrinfo() const {
  // @@protoc_insertion_point(field_list:pb.TActBattlePassGetInfoRsp.ArrInfo)
  return arrinfo_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb::TActBattlePassSingle >*
TActBattlePassGetInfoRsp::mutable_arrinfo() {
  // @@protoc_insertion_point(field_mutable_list:pb.TActBattlePassGetInfoRsp.ArrInfo)
  return &arrinfo_;
}

// -------------------------------------------------------------------

// TActBattlePassGetArrRewardReq

// optional uint32 ProductId = 1;
inline bool TActBattlePassGetArrRewardReq::has_productid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TActBattlePassGetArrRewardReq::set_has_productid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TActBattlePassGetArrRewardReq::clear_has_productid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TActBattlePassGetArrRewardReq::clear_productid() {
  productid_ = 0u;
  clear_has_productid();
}
inline ::google::protobuf::uint32 TActBattlePassGetArrRewardReq::productid() const {
  // @@protoc_insertion_point(field_get:pb.TActBattlePassGetArrRewardReq.ProductId)
  return productid_;
}
inline void TActBattlePassGetArrRewardReq::set_productid(::google::protobuf::uint32 value) {
  set_has_productid();
  productid_ = value;
  // @@protoc_insertion_point(field_set:pb.TActBattlePassGetArrRewardReq.ProductId)
}

// repeated uint32 ArrId = 2;
inline int TActBattlePassGetArrRewardReq::arrid_size() const {
  return arrid_.size();
}
inline void TActBattlePassGetArrRewardReq::clear_arrid() {
  arrid_.Clear();
}
inline ::google::protobuf::uint32 TActBattlePassGetArrRewardReq::arrid(int index) const {
  // @@protoc_insertion_point(field_get:pb.TActBattlePassGetArrRewardReq.ArrId)
  return arrid_.Get(index);
}
inline void TActBattlePassGetArrRewardReq::set_arrid(int index, ::google::protobuf::uint32 value) {
  arrid_.Set(index, value);
  // @@protoc_insertion_point(field_set:pb.TActBattlePassGetArrRewardReq.ArrId)
}
inline void TActBattlePassGetArrRewardReq::add_arrid(::google::protobuf::uint32 value) {
  arrid_.Add(value);
  // @@protoc_insertion_point(field_add:pb.TActBattlePassGetArrRewardReq.ArrId)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
TActBattlePassGetArrRewardReq::arrid() const {
  // @@protoc_insertion_point(field_list:pb.TActBattlePassGetArrRewardReq.ArrId)
  return arrid_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
TActBattlePassGetArrRewardReq::mutable_arrid() {
  // @@protoc_insertion_point(field_mutable_list:pb.TActBattlePassGetArrRewardReq.ArrId)
  return &arrid_;
}

// -------------------------------------------------------------------

// TActBattlePassGetArrRewardRsp

// repeated .pb.TCommonReward ArrReward = 1;
inline int TActBattlePassGetArrRewardRsp::arrreward_size() const {
  return arrreward_.size();
}
inline void TActBattlePassGetArrRewardRsp::clear_arrreward() {
  arrreward_.Clear();
}
inline const ::pb::TCommonReward& TActBattlePassGetArrRewardRsp::arrreward(int index) const {
  // @@protoc_insertion_point(field_get:pb.TActBattlePassGetArrRewardRsp.ArrReward)
  return arrreward_.Get(index);
}
inline ::pb::TCommonReward* TActBattlePassGetArrRewardRsp::mutable_arrreward(int index) {
  // @@protoc_insertion_point(field_mutable:pb.TActBattlePassGetArrRewardRsp.ArrReward)
  return arrreward_.Mutable(index);
}
inline ::pb::TCommonReward* TActBattlePassGetArrRewardRsp::add_arrreward() {
  // @@protoc_insertion_point(field_add:pb.TActBattlePassGetArrRewardRsp.ArrReward)
  return arrreward_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::TCommonReward >&
TActBattlePassGetArrRewardRsp::arrreward() const {
  // @@protoc_insertion_point(field_list:pb.TActBattlePassGetArrRewardRsp.ArrReward)
  return arrreward_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb::TCommonReward >*
TActBattlePassGetArrRewardRsp::mutable_arrreward() {
  // @@protoc_insertion_point(field_mutable_list:pb.TActBattlePassGetArrRewardRsp.ArrReward)
  return &arrreward_;
}

// -------------------------------------------------------------------

// TActBattlePassGetArrCostRewardReq

// optional uint32 ProductId = 1;
inline bool TActBattlePassGetArrCostRewardReq::has_productid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TActBattlePassGetArrCostRewardReq::set_has_productid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TActBattlePassGetArrCostRewardReq::clear_has_productid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TActBattlePassGetArrCostRewardReq::clear_productid() {
  productid_ = 0u;
  clear_has_productid();
}
inline ::google::protobuf::uint32 TActBattlePassGetArrCostRewardReq::productid() const {
  // @@protoc_insertion_point(field_get:pb.TActBattlePassGetArrCostRewardReq.ProductId)
  return productid_;
}
inline void TActBattlePassGetArrCostRewardReq::set_productid(::google::protobuf::uint32 value) {
  set_has_productid();
  productid_ = value;
  // @@protoc_insertion_point(field_set:pb.TActBattlePassGetArrCostRewardReq.ProductId)
}

// repeated uint32 ArrId = 2;
inline int TActBattlePassGetArrCostRewardReq::arrid_size() const {
  return arrid_.size();
}
inline void TActBattlePassGetArrCostRewardReq::clear_arrid() {
  arrid_.Clear();
}
inline ::google::protobuf::uint32 TActBattlePassGetArrCostRewardReq::arrid(int index) const {
  // @@protoc_insertion_point(field_get:pb.TActBattlePassGetArrCostRewardReq.ArrId)
  return arrid_.Get(index);
}
inline void TActBattlePassGetArrCostRewardReq::set_arrid(int index, ::google::protobuf::uint32 value) {
  arrid_.Set(index, value);
  // @@protoc_insertion_point(field_set:pb.TActBattlePassGetArrCostRewardReq.ArrId)
}
inline void TActBattlePassGetArrCostRewardReq::add_arrid(::google::protobuf::uint32 value) {
  arrid_.Add(value);
  // @@protoc_insertion_point(field_add:pb.TActBattlePassGetArrCostRewardReq.ArrId)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
TActBattlePassGetArrCostRewardReq::arrid() const {
  // @@protoc_insertion_point(field_list:pb.TActBattlePassGetArrCostRewardReq.ArrId)
  return arrid_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
TActBattlePassGetArrCostRewardReq::mutable_arrid() {
  // @@protoc_insertion_point(field_mutable_list:pb.TActBattlePassGetArrCostRewardReq.ArrId)
  return &arrid_;
}

// -------------------------------------------------------------------

// TActBattlePassGetArrCostRewardRsp

// repeated .pb.TCommonReward ArrReward = 1;
inline int TActBattlePassGetArrCostRewardRsp::arrreward_size() const {
  return arrreward_.size();
}
inline void TActBattlePassGetArrCostRewardRsp::clear_arrreward() {
  arrreward_.Clear();
}
inline const ::pb::TCommonReward& TActBattlePassGetArrCostRewardRsp::arrreward(int index) const {
  // @@protoc_insertion_point(field_get:pb.TActBattlePassGetArrCostRewardRsp.ArrReward)
  return arrreward_.Get(index);
}
inline ::pb::TCommonReward* TActBattlePassGetArrCostRewardRsp::mutable_arrreward(int index) {
  // @@protoc_insertion_point(field_mutable:pb.TActBattlePassGetArrCostRewardRsp.ArrReward)
  return arrreward_.Mutable(index);
}
inline ::pb::TCommonReward* TActBattlePassGetArrCostRewardRsp::add_arrreward() {
  // @@protoc_insertion_point(field_add:pb.TActBattlePassGetArrCostRewardRsp.ArrReward)
  return arrreward_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::TCommonReward >&
TActBattlePassGetArrCostRewardRsp::arrreward() const {
  // @@protoc_insertion_point(field_list:pb.TActBattlePassGetArrCostRewardRsp.ArrReward)
  return arrreward_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb::TCommonReward >*
TActBattlePassGetArrCostRewardRsp::mutable_arrreward() {
  // @@protoc_insertion_point(field_mutable_list:pb.TActBattlePassGetArrCostRewardRsp.ArrReward)
  return &arrreward_;
}

// -------------------------------------------------------------------

// TActBattlePassNotifySingle

// optional uint32 ProductId = 1;
inline bool TActBattlePassNotifySingle::has_productid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TActBattlePassNotifySingle::set_has_productid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TActBattlePassNotifySingle::clear_has_productid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TActBattlePassNotifySingle::clear_productid() {
  productid_ = 0u;
  clear_has_productid();
}
inline ::google::protobuf::uint32 TActBattlePassNotifySingle::productid() const {
  // @@protoc_insertion_point(field_get:pb.TActBattlePassNotifySingle.ProductId)
  return productid_;
}
inline void TActBattlePassNotifySingle::set_productid(::google::protobuf::uint32 value) {
  set_has_productid();
  productid_ = value;
  // @@protoc_insertion_point(field_set:pb.TActBattlePassNotifySingle.ProductId)
}

// optional uint64 BuyTime = 2;
inline bool TActBattlePassNotifySingle::has_buytime() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TActBattlePassNotifySingle::set_has_buytime() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TActBattlePassNotifySingle::clear_has_buytime() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TActBattlePassNotifySingle::clear_buytime() {
  buytime_ = GOOGLE_ULONGLONG(0);
  clear_has_buytime();
}
inline ::google::protobuf::uint64 TActBattlePassNotifySingle::buytime() const {
  // @@protoc_insertion_point(field_get:pb.TActBattlePassNotifySingle.BuyTime)
  return buytime_;
}
inline void TActBattlePassNotifySingle::set_buytime(::google::protobuf::uint64 value) {
  set_has_buytime();
  buytime_ = value;
  // @@protoc_insertion_point(field_set:pb.TActBattlePassNotifySingle.BuyTime)
}

// optional uint32 TotalScore = 3;
inline bool TActBattlePassNotifySingle::has_totalscore() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void TActBattlePassNotifySingle::set_has_totalscore() {
  _has_bits_[0] |= 0x00000004u;
}
inline void TActBattlePassNotifySingle::clear_has_totalscore() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void TActBattlePassNotifySingle::clear_totalscore() {
  totalscore_ = 0u;
  clear_has_totalscore();
}
inline ::google::protobuf::uint32 TActBattlePassNotifySingle::totalscore() const {
  // @@protoc_insertion_point(field_get:pb.TActBattlePassNotifySingle.TotalScore)
  return totalscore_;
}
inline void TActBattlePassNotifySingle::set_totalscore(::google::protobuf::uint32 value) {
  set_has_totalscore();
  totalscore_ = value;
  // @@protoc_insertion_point(field_set:pb.TActBattlePassNotifySingle.TotalScore)
}

// repeated .pb.TActBattlePassTaskInfo ArrTaskInfo = 4;
inline int TActBattlePassNotifySingle::arrtaskinfo_size() const {
  return arrtaskinfo_.size();
}
inline void TActBattlePassNotifySingle::clear_arrtaskinfo() {
  arrtaskinfo_.Clear();
}
inline const ::pb::TActBattlePassTaskInfo& TActBattlePassNotifySingle::arrtaskinfo(int index) const {
  // @@protoc_insertion_point(field_get:pb.TActBattlePassNotifySingle.ArrTaskInfo)
  return arrtaskinfo_.Get(index);
}
inline ::pb::TActBattlePassTaskInfo* TActBattlePassNotifySingle::mutable_arrtaskinfo(int index) {
  // @@protoc_insertion_point(field_mutable:pb.TActBattlePassNotifySingle.ArrTaskInfo)
  return arrtaskinfo_.Mutable(index);
}
inline ::pb::TActBattlePassTaskInfo* TActBattlePassNotifySingle::add_arrtaskinfo() {
  // @@protoc_insertion_point(field_add:pb.TActBattlePassNotifySingle.ArrTaskInfo)
  return arrtaskinfo_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::TActBattlePassTaskInfo >&
TActBattlePassNotifySingle::arrtaskinfo() const {
  // @@protoc_insertion_point(field_list:pb.TActBattlePassNotifySingle.ArrTaskInfo)
  return arrtaskinfo_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb::TActBattlePassTaskInfo >*
TActBattlePassNotifySingle::mutable_arrtaskinfo() {
  // @@protoc_insertion_point(field_mutable_list:pb.TActBattlePassNotifySingle.ArrTaskInfo)
  return &arrtaskinfo_;
}

// repeated .pb.TActivityRewardInfo ArrCostRewardInfo = 5;
inline int TActBattlePassNotifySingle::arrcostrewardinfo_size() const {
  return arrcostrewardinfo_.size();
}
inline void TActBattlePassNotifySingle::clear_arrcostrewardinfo() {
  arrcostrewardinfo_.Clear();
}
inline const ::pb::TActivityRewardInfo& TActBattlePassNotifySingle::arrcostrewardinfo(int index) const {
  // @@protoc_insertion_point(field_get:pb.TActBattlePassNotifySingle.ArrCostRewardInfo)
  return arrcostrewardinfo_.Get(index);
}
inline ::pb::TActivityRewardInfo* TActBattlePassNotifySingle::mutable_arrcostrewardinfo(int index) {
  // @@protoc_insertion_point(field_mutable:pb.TActBattlePassNotifySingle.ArrCostRewardInfo)
  return arrcostrewardinfo_.Mutable(index);
}
inline ::pb::TActivityRewardInfo* TActBattlePassNotifySingle::add_arrcostrewardinfo() {
  // @@protoc_insertion_point(field_add:pb.TActBattlePassNotifySingle.ArrCostRewardInfo)
  return arrcostrewardinfo_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::TActivityRewardInfo >&
TActBattlePassNotifySingle::arrcostrewardinfo() const {
  // @@protoc_insertion_point(field_list:pb.TActBattlePassNotifySingle.ArrCostRewardInfo)
  return arrcostrewardinfo_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb::TActivityRewardInfo >*
TActBattlePassNotifySingle::mutable_arrcostrewardinfo() {
  // @@protoc_insertion_point(field_mutable_list:pb.TActBattlePassNotifySingle.ArrCostRewardInfo)
  return &arrcostrewardinfo_;
}

// -------------------------------------------------------------------

// TActBattlePassNotify

// repeated .pb.TActBattlePassNotifySingle ArrNotify = 1;
inline int TActBattlePassNotify::arrnotify_size() const {
  return arrnotify_.size();
}
inline void TActBattlePassNotify::clear_arrnotify() {
  arrnotify_.Clear();
}
inline const ::pb::TActBattlePassNotifySingle& TActBattlePassNotify::arrnotify(int index) const {
  // @@protoc_insertion_point(field_get:pb.TActBattlePassNotify.ArrNotify)
  return arrnotify_.Get(index);
}
inline ::pb::TActBattlePassNotifySingle* TActBattlePassNotify::mutable_arrnotify(int index) {
  // @@protoc_insertion_point(field_mutable:pb.TActBattlePassNotify.ArrNotify)
  return arrnotify_.Mutable(index);
}
inline ::pb::TActBattlePassNotifySingle* TActBattlePassNotify::add_arrnotify() {
  // @@protoc_insertion_point(field_add:pb.TActBattlePassNotify.ArrNotify)
  return arrnotify_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::TActBattlePassNotifySingle >&
TActBattlePassNotify::arrnotify() const {
  // @@protoc_insertion_point(field_list:pb.TActBattlePassNotify.ArrNotify)
  return arrnotify_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb::TActBattlePassNotifySingle >*
TActBattlePassNotify::mutable_arrnotify() {
  // @@protoc_insertion_point(field_mutable_list:pb.TActBattlePassNotify.ArrNotify)
  return &arrnotify_;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace pb

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_net_2fActBattlePass_2eproto__INCLUDED
