// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: net/SlgTeam.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "net/SlgTeam.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace pb {

namespace {

const ::google::protobuf::Descriptor* TTeamEquipItem_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TTeamEquipItem_reflection_ = NULL;
const ::google::protobuf::Descriptor* TTeamHero_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TTeamHero_reflection_ = NULL;
const ::google::protobuf::Descriptor* TTeamInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TTeamInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* TTeamGetInfoRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TTeamGetInfoRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* TTeamAddHeroReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TTeamAddHeroReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* TTeamRemoveHeroReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TTeamRemoveHeroReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* TTeamExchangeHeroReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TTeamExchangeHeroReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* TTeamRaiseTroops_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TTeamRaiseTroops_reflection_ = NULL;
const ::google::protobuf::Descriptor* TTeamRaiseTroopsReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TTeamRaiseTroopsReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* TTeamRaiseTroopsRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TTeamRaiseTroopsRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* TTeamCancelRaiseTroopsReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TTeamCancelRaiseTroopsReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* TTeamCancelRaiseTroopsRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TTeamCancelRaiseTroopsRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* TTeamSpeedUpRaiseTroopsReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TTeamSpeedUpRaiseTroopsReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* TTeamSpeedUpRaiseTroopsRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TTeamSpeedUpRaiseTroopsRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* TTeamEquipItemsReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TTeamEquipItemsReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* TTeamUpdateDataNotify_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TTeamUpdateDataNotify_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* ETeamStatus_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* ESpeedUpMode_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_net_2fSlgTeam_2eproto() {
  protobuf_AddDesc_net_2fSlgTeam_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "net/SlgTeam.proto");
  GOOGLE_CHECK(file != NULL);
  TTeamEquipItem_descriptor_ = file->message_type(0);
  static const int TTeamEquipItem_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TTeamEquipItem, pos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TTeamEquipItem, item_),
  };
  TTeamEquipItem_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TTeamEquipItem_descriptor_,
      TTeamEquipItem::default_instance_,
      TTeamEquipItem_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TTeamEquipItem, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TTeamEquipItem, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TTeamEquipItem));
  TTeamHero_descriptor_ = file->message_type(1);
  static const int TTeamHero_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TTeamHero, hid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TTeamHero, troops_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TTeamHero, hurttroops_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TTeamHero, raisetroops_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TTeamHero, starttime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TTeamHero, endtime_),
  };
  TTeamHero_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TTeamHero_descriptor_,
      TTeamHero::default_instance_,
      TTeamHero_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TTeamHero, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TTeamHero, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TTeamHero));
  TTeamInfo_descriptor_ = file->message_type(2);
  static const int TTeamInfo_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TTeamInfo, teamid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TTeamInfo, teamstatus_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TTeamInfo, gridindex_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TTeamInfo, heroarr_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TTeamInfo, itemarr_),
  };
  TTeamInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TTeamInfo_descriptor_,
      TTeamInfo::default_instance_,
      TTeamInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TTeamInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TTeamInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TTeamInfo));
  TTeamGetInfoRsp_descriptor_ = file->message_type(3);
  static const int TTeamGetInfoRsp_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TTeamGetInfoRsp, teamarr_),
  };
  TTeamGetInfoRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TTeamGetInfoRsp_descriptor_,
      TTeamGetInfoRsp::default_instance_,
      TTeamGetInfoRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TTeamGetInfoRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TTeamGetInfoRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TTeamGetInfoRsp));
  TTeamAddHeroReq_descriptor_ = file->message_type(4);
  static const int TTeamAddHeroReq_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TTeamAddHeroReq, teamid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TTeamAddHeroReq, hid_),
  };
  TTeamAddHeroReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TTeamAddHeroReq_descriptor_,
      TTeamAddHeroReq::default_instance_,
      TTeamAddHeroReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TTeamAddHeroReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TTeamAddHeroReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TTeamAddHeroReq));
  TTeamRemoveHeroReq_descriptor_ = file->message_type(5);
  static const int TTeamRemoveHeroReq_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TTeamRemoveHeroReq, teamid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TTeamRemoveHeroReq, hid_),
  };
  TTeamRemoveHeroReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TTeamRemoveHeroReq_descriptor_,
      TTeamRemoveHeroReq::default_instance_,
      TTeamRemoveHeroReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TTeamRemoveHeroReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TTeamRemoveHeroReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TTeamRemoveHeroReq));
  TTeamExchangeHeroReq_descriptor_ = file->message_type(6);
  static const int TTeamExchangeHeroReq_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TTeamExchangeHeroReq, srcteamid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TTeamExchangeHeroReq, srchid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TTeamExchangeHeroReq, desteamid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TTeamExchangeHeroReq, deshid_),
  };
  TTeamExchangeHeroReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TTeamExchangeHeroReq_descriptor_,
      TTeamExchangeHeroReq::default_instance_,
      TTeamExchangeHeroReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TTeamExchangeHeroReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TTeamExchangeHeroReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TTeamExchangeHeroReq));
  TTeamRaiseTroops_descriptor_ = file->message_type(7);
  static const int TTeamRaiseTroops_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TTeamRaiseTroops, hid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TTeamRaiseTroops, addnum_),
  };
  TTeamRaiseTroops_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TTeamRaiseTroops_descriptor_,
      TTeamRaiseTroops::default_instance_,
      TTeamRaiseTroops_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TTeamRaiseTroops, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TTeamRaiseTroops, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TTeamRaiseTroops));
  TTeamRaiseTroopsReq_descriptor_ = file->message_type(8);
  static const int TTeamRaiseTroopsReq_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TTeamRaiseTroopsReq, teamid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TTeamRaiseTroopsReq, addarr_),
  };
  TTeamRaiseTroopsReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TTeamRaiseTroopsReq_descriptor_,
      TTeamRaiseTroopsReq::default_instance_,
      TTeamRaiseTroopsReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TTeamRaiseTroopsReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TTeamRaiseTroopsReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TTeamRaiseTroopsReq));
  TTeamRaiseTroopsRsp_descriptor_ = file->message_type(9);
  static const int TTeamRaiseTroopsRsp_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TTeamRaiseTroopsRsp, heroarr_),
  };
  TTeamRaiseTroopsRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TTeamRaiseTroopsRsp_descriptor_,
      TTeamRaiseTroopsRsp::default_instance_,
      TTeamRaiseTroopsRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TTeamRaiseTroopsRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TTeamRaiseTroopsRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TTeamRaiseTroopsRsp));
  TTeamCancelRaiseTroopsReq_descriptor_ = file->message_type(10);
  static const int TTeamCancelRaiseTroopsReq_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TTeamCancelRaiseTroopsReq, teamid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TTeamCancelRaiseTroopsReq, hid_),
  };
  TTeamCancelRaiseTroopsReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TTeamCancelRaiseTroopsReq_descriptor_,
      TTeamCancelRaiseTroopsReq::default_instance_,
      TTeamCancelRaiseTroopsReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TTeamCancelRaiseTroopsReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TTeamCancelRaiseTroopsReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TTeamCancelRaiseTroopsReq));
  TTeamCancelRaiseTroopsRsp_descriptor_ = file->message_type(11);
  static const int TTeamCancelRaiseTroopsRsp_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TTeamCancelRaiseTroopsRsp, hero_),
  };
  TTeamCancelRaiseTroopsRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TTeamCancelRaiseTroopsRsp_descriptor_,
      TTeamCancelRaiseTroopsRsp::default_instance_,
      TTeamCancelRaiseTroopsRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TTeamCancelRaiseTroopsRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TTeamCancelRaiseTroopsRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TTeamCancelRaiseTroopsRsp));
  TTeamSpeedUpRaiseTroopsReq_descriptor_ = file->message_type(12);
  static const int TTeamSpeedUpRaiseTroopsReq_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TTeamSpeedUpRaiseTroopsReq, teamid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TTeamSpeedUpRaiseTroopsReq, hid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TTeamSpeedUpRaiseTroopsReq, mode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TTeamSpeedUpRaiseTroopsReq, item_),
  };
  TTeamSpeedUpRaiseTroopsReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TTeamSpeedUpRaiseTroopsReq_descriptor_,
      TTeamSpeedUpRaiseTroopsReq::default_instance_,
      TTeamSpeedUpRaiseTroopsReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TTeamSpeedUpRaiseTroopsReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TTeamSpeedUpRaiseTroopsReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TTeamSpeedUpRaiseTroopsReq));
  TTeamSpeedUpRaiseTroopsRsp_descriptor_ = file->message_type(13);
  static const int TTeamSpeedUpRaiseTroopsRsp_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TTeamSpeedUpRaiseTroopsRsp, hero_),
  };
  TTeamSpeedUpRaiseTroopsRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TTeamSpeedUpRaiseTroopsRsp_descriptor_,
      TTeamSpeedUpRaiseTroopsRsp::default_instance_,
      TTeamSpeedUpRaiseTroopsRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TTeamSpeedUpRaiseTroopsRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TTeamSpeedUpRaiseTroopsRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TTeamSpeedUpRaiseTroopsRsp));
  TTeamEquipItemsReq_descriptor_ = file->message_type(14);
  static const int TTeamEquipItemsReq_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TTeamEquipItemsReq, teamid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TTeamEquipItemsReq, itemarr_),
  };
  TTeamEquipItemsReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TTeamEquipItemsReq_descriptor_,
      TTeamEquipItemsReq::default_instance_,
      TTeamEquipItemsReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TTeamEquipItemsReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TTeamEquipItemsReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TTeamEquipItemsReq));
  TTeamUpdateDataNotify_descriptor_ = file->message_type(15);
  static const int TTeamUpdateDataNotify_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TTeamUpdateDataNotify, teamarr_),
  };
  TTeamUpdateDataNotify_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TTeamUpdateDataNotify_descriptor_,
      TTeamUpdateDataNotify::default_instance_,
      TTeamUpdateDataNotify_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TTeamUpdateDataNotify, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TTeamUpdateDataNotify, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TTeamUpdateDataNotify));
  ETeamStatus_descriptor_ = file->enum_type(0);
  ESpeedUpMode_descriptor_ = file->enum_type(1);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_net_2fSlgTeam_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TTeamEquipItem_descriptor_, &TTeamEquipItem::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TTeamHero_descriptor_, &TTeamHero::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TTeamInfo_descriptor_, &TTeamInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TTeamGetInfoRsp_descriptor_, &TTeamGetInfoRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TTeamAddHeroReq_descriptor_, &TTeamAddHeroReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TTeamRemoveHeroReq_descriptor_, &TTeamRemoveHeroReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TTeamExchangeHeroReq_descriptor_, &TTeamExchangeHeroReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TTeamRaiseTroops_descriptor_, &TTeamRaiseTroops::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TTeamRaiseTroopsReq_descriptor_, &TTeamRaiseTroopsReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TTeamRaiseTroopsRsp_descriptor_, &TTeamRaiseTroopsRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TTeamCancelRaiseTroopsReq_descriptor_, &TTeamCancelRaiseTroopsReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TTeamCancelRaiseTroopsRsp_descriptor_, &TTeamCancelRaiseTroopsRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TTeamSpeedUpRaiseTroopsReq_descriptor_, &TTeamSpeedUpRaiseTroopsReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TTeamSpeedUpRaiseTroopsRsp_descriptor_, &TTeamSpeedUpRaiseTroopsRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TTeamEquipItemsReq_descriptor_, &TTeamEquipItemsReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TTeamUpdateDataNotify_descriptor_, &TTeamUpdateDataNotify::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_net_2fSlgTeam_2eproto() {
  delete TTeamEquipItem::default_instance_;
  delete TTeamEquipItem_reflection_;
  delete TTeamHero::default_instance_;
  delete TTeamHero_reflection_;
  delete TTeamInfo::default_instance_;
  delete TTeamInfo_reflection_;
  delete TTeamGetInfoRsp::default_instance_;
  delete TTeamGetInfoRsp_reflection_;
  delete TTeamAddHeroReq::default_instance_;
  delete TTeamAddHeroReq_reflection_;
  delete TTeamRemoveHeroReq::default_instance_;
  delete TTeamRemoveHeroReq_reflection_;
  delete TTeamExchangeHeroReq::default_instance_;
  delete TTeamExchangeHeroReq_reflection_;
  delete TTeamRaiseTroops::default_instance_;
  delete TTeamRaiseTroops_reflection_;
  delete TTeamRaiseTroopsReq::default_instance_;
  delete TTeamRaiseTroopsReq_reflection_;
  delete TTeamRaiseTroopsRsp::default_instance_;
  delete TTeamRaiseTroopsRsp_reflection_;
  delete TTeamCancelRaiseTroopsReq::default_instance_;
  delete TTeamCancelRaiseTroopsReq_reflection_;
  delete TTeamCancelRaiseTroopsRsp::default_instance_;
  delete TTeamCancelRaiseTroopsRsp_reflection_;
  delete TTeamSpeedUpRaiseTroopsReq::default_instance_;
  delete TTeamSpeedUpRaiseTroopsReq_reflection_;
  delete TTeamSpeedUpRaiseTroopsRsp::default_instance_;
  delete TTeamSpeedUpRaiseTroopsRsp_reflection_;
  delete TTeamEquipItemsReq::default_instance_;
  delete TTeamEquipItemsReq_reflection_;
  delete TTeamUpdateDataNotify::default_instance_;
  delete TTeamUpdateDataNotify_reflection_;
}

void protobuf_AddDesc_net_2fSlgTeam_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::pb::protobuf_AddDesc_net_2fCommon_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\021net/SlgTeam.proto\022\002pb\032\020net/Common.prot"
    "o\"<\n\016TTeamEquipItem\022\013\n\003Pos\030\001 \001(\r\022\035\n\004Item"
    "\030\002 \001(\0132\017.pb.TSimpleItem\"u\n\tTTeamHero\022\013\n\003"
    "Hid\030\001 \001(\r\022\016\n\006Troops\030\002 \001(\r\022\022\n\nHurtTroops\030"
    "\003 \001(\r\022\023\n\013RaiseTroops\030\004 \001(\r\022\021\n\tStartTime\030"
    "\005 \001(\004\022\017\n\007EndTime\030\006 \001(\004\"\230\001\n\tTTeamInfo\022\016\n\006"
    "TeamId\030\001 \001(\r\022#\n\nTeamStatus\030\002 \001(\0162\017.pb.ET"
    "eamStatus\022\021\n\tGridIndex\030\003 \001(\r\022\036\n\007HeroArr\030"
    "\004 \003(\0132\r.pb.TTeamHero\022#\n\007ItemArr\030\005 \003(\0132\022."
    "pb.TTeamEquipItem\"1\n\017TTeamGetInfoRsp\022\036\n\007"
    "TeamArr\030\001 \003(\0132\r.pb.TTeamInfo\".\n\017TTeamAdd"
    "HeroReq\022\016\n\006TeamId\030\001 \001(\r\022\013\n\003Hid\030\002 \001(\r\"1\n\022"
    "TTeamRemoveHeroReq\022\016\n\006TeamId\030\001 \001(\r\022\013\n\003Hi"
    "d\030\002 \001(\r\"\\\n\024TTeamExchangeHeroReq\022\021\n\tSrcTe"
    "amId\030\001 \001(\r\022\016\n\006SrcHid\030\002 \001(\r\022\021\n\tDesTeamId\030"
    "\003 \001(\r\022\016\n\006DesHid\030\004 \001(\r\"/\n\020TTeamRaiseTroop"
    "s\022\013\n\003Hid\030\001 \001(\r\022\016\n\006AddNum\030\002 \001(\r\"K\n\023TTeamR"
    "aiseTroopsReq\022\016\n\006TeamId\030\001 \001(\r\022$\n\006AddArr\030"
    "\002 \003(\0132\024.pb.TTeamRaiseTroops\"5\n\023TTeamRais"
    "eTroopsRsp\022\036\n\007HeroArr\030\001 \003(\0132\r.pb.TTeamHe"
    "ro\"8\n\031TTeamCancelRaiseTroopsReq\022\016\n\006TeamI"
    "d\030\001 \001(\r\022\013\n\003Hid\030\002 \001(\r\"8\n\031TTeamCancelRaise"
    "TroopsRsp\022\033\n\004Hero\030\001 \001(\0132\r.pb.TTeamHero\"x"
    "\n\032TTeamSpeedUpRaiseTroopsReq\022\016\n\006TeamId\030\001"
    " \001(\r\022\013\n\003Hid\030\002 \001(\r\022\036\n\004Mode\030\003 \001(\0162\020.pb.ESp"
    "eedUpMode\022\035\n\004Item\030\004 \001(\0132\017.pb.TSimpleItem"
    "\"9\n\032TTeamSpeedUpRaiseTroopsRsp\022\033\n\004Hero\030\001"
    " \001(\0132\r.pb.TTeamHero\"I\n\022TTeamEquipItemsRe"
    "q\022\016\n\006TeamId\030\001 \001(\r\022#\n\007ItemArr\030\002 \003(\0132\022.pb."
    "TTeamEquipItem\"7\n\025TTeamUpdateDataNotify\022"
    "\036\n\007TeamArr\030\001 \003(\0132\r.pb.TTeamInfo*\223\001\n\013ETea"
    "mStatus\022\020\n\014TEAM_STANDBY\020\000\022\016\n\nTEAM_MARCH\020"
    "\001\022\017\n\013TEAM_RETURN\020\002\022\022\n\016TEAM_DEFENDING\020\003\022\023"
    "\n\017TEAM_COLLECTING\020\004\022\024\n\020TEAM_ASSEMBLYING\020"
    "\005\022\022\n\016TEAM_SEARCHING\020\006*2\n\014ESpeedUpMode\022\020\n"
    "\014SPEEDUP_GOLD\020\001\022\020\n\014SPEEDUP_ITEM\020\002", 1433);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "net/SlgTeam.proto", &protobuf_RegisterTypes);
  TTeamEquipItem::default_instance_ = new TTeamEquipItem();
  TTeamHero::default_instance_ = new TTeamHero();
  TTeamInfo::default_instance_ = new TTeamInfo();
  TTeamGetInfoRsp::default_instance_ = new TTeamGetInfoRsp();
  TTeamAddHeroReq::default_instance_ = new TTeamAddHeroReq();
  TTeamRemoveHeroReq::default_instance_ = new TTeamRemoveHeroReq();
  TTeamExchangeHeroReq::default_instance_ = new TTeamExchangeHeroReq();
  TTeamRaiseTroops::default_instance_ = new TTeamRaiseTroops();
  TTeamRaiseTroopsReq::default_instance_ = new TTeamRaiseTroopsReq();
  TTeamRaiseTroopsRsp::default_instance_ = new TTeamRaiseTroopsRsp();
  TTeamCancelRaiseTroopsReq::default_instance_ = new TTeamCancelRaiseTroopsReq();
  TTeamCancelRaiseTroopsRsp::default_instance_ = new TTeamCancelRaiseTroopsRsp();
  TTeamSpeedUpRaiseTroopsReq::default_instance_ = new TTeamSpeedUpRaiseTroopsReq();
  TTeamSpeedUpRaiseTroopsRsp::default_instance_ = new TTeamSpeedUpRaiseTroopsRsp();
  TTeamEquipItemsReq::default_instance_ = new TTeamEquipItemsReq();
  TTeamUpdateDataNotify::default_instance_ = new TTeamUpdateDataNotify();
  TTeamEquipItem::default_instance_->InitAsDefaultInstance();
  TTeamHero::default_instance_->InitAsDefaultInstance();
  TTeamInfo::default_instance_->InitAsDefaultInstance();
  TTeamGetInfoRsp::default_instance_->InitAsDefaultInstance();
  TTeamAddHeroReq::default_instance_->InitAsDefaultInstance();
  TTeamRemoveHeroReq::default_instance_->InitAsDefaultInstance();
  TTeamExchangeHeroReq::default_instance_->InitAsDefaultInstance();
  TTeamRaiseTroops::default_instance_->InitAsDefaultInstance();
  TTeamRaiseTroopsReq::default_instance_->InitAsDefaultInstance();
  TTeamRaiseTroopsRsp::default_instance_->InitAsDefaultInstance();
  TTeamCancelRaiseTroopsReq::default_instance_->InitAsDefaultInstance();
  TTeamCancelRaiseTroopsRsp::default_instance_->InitAsDefaultInstance();
  TTeamSpeedUpRaiseTroopsReq::default_instance_->InitAsDefaultInstance();
  TTeamSpeedUpRaiseTroopsRsp::default_instance_->InitAsDefaultInstance();
  TTeamEquipItemsReq::default_instance_->InitAsDefaultInstance();
  TTeamUpdateDataNotify::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_net_2fSlgTeam_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_net_2fSlgTeam_2eproto {
  StaticDescriptorInitializer_net_2fSlgTeam_2eproto() {
    protobuf_AddDesc_net_2fSlgTeam_2eproto();
  }
} static_descriptor_initializer_net_2fSlgTeam_2eproto_;
const ::google::protobuf::EnumDescriptor* ETeamStatus_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ETeamStatus_descriptor_;
}
bool ETeamStatus_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* ESpeedUpMode_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ESpeedUpMode_descriptor_;
}
bool ESpeedUpMode_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#ifndef _MSC_VER
const int TTeamEquipItem::kPosFieldNumber;
const int TTeamEquipItem::kItemFieldNumber;
#endif  // !_MSC_VER

TTeamEquipItem::TTeamEquipItem()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TTeamEquipItem)
}

void TTeamEquipItem::InitAsDefaultInstance() {
  item_ = const_cast< ::pb::TSimpleItem*>(&::pb::TSimpleItem::default_instance());
}

TTeamEquipItem::TTeamEquipItem(const TTeamEquipItem& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TTeamEquipItem)
}

void TTeamEquipItem::SharedCtor() {
  _cached_size_ = 0;
  pos_ = 0u;
  item_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TTeamEquipItem::~TTeamEquipItem() {
  // @@protoc_insertion_point(destructor:pb.TTeamEquipItem)
  SharedDtor();
}

void TTeamEquipItem::SharedDtor() {
  if (this != default_instance_) {
    delete item_;
  }
}

void TTeamEquipItem::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TTeamEquipItem::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TTeamEquipItem_descriptor_;
}

const TTeamEquipItem& TTeamEquipItem::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fSlgTeam_2eproto();
  return *default_instance_;
}

TTeamEquipItem* TTeamEquipItem::default_instance_ = NULL;

TTeamEquipItem* TTeamEquipItem::New() const {
  return new TTeamEquipItem;
}

void TTeamEquipItem::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    pos_ = 0u;
    if (has_item()) {
      if (item_ != NULL) item_->::pb::TSimpleItem::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TTeamEquipItem::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TTeamEquipItem)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 Pos = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &pos_)));
          set_has_pos();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_Item;
        break;
      }

      // optional .pb.TSimpleItem Item = 2;
      case 2: {
        if (tag == 18) {
         parse_Item:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_item()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TTeamEquipItem)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TTeamEquipItem)
  return false;
#undef DO_
}

void TTeamEquipItem::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TTeamEquipItem)
  // optional uint32 Pos = 1;
  if (has_pos()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->pos(), output);
  }

  // optional .pb.TSimpleItem Item = 2;
  if (has_item()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->item(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TTeamEquipItem)
}

::google::protobuf::uint8* TTeamEquipItem::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TTeamEquipItem)
  // optional uint32 Pos = 1;
  if (has_pos()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->pos(), target);
  }

  // optional .pb.TSimpleItem Item = 2;
  if (has_item()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->item(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TTeamEquipItem)
  return target;
}

int TTeamEquipItem::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 Pos = 1;
    if (has_pos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->pos());
    }

    // optional .pb.TSimpleItem Item = 2;
    if (has_item()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->item());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TTeamEquipItem::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TTeamEquipItem* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TTeamEquipItem*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TTeamEquipItem::MergeFrom(const TTeamEquipItem& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_pos()) {
      set_pos(from.pos());
    }
    if (from.has_item()) {
      mutable_item()->::pb::TSimpleItem::MergeFrom(from.item());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TTeamEquipItem::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TTeamEquipItem::CopyFrom(const TTeamEquipItem& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TTeamEquipItem::IsInitialized() const {

  return true;
}

void TTeamEquipItem::Swap(TTeamEquipItem* other) {
  if (other != this) {
    std::swap(pos_, other->pos_);
    std::swap(item_, other->item_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TTeamEquipItem::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TTeamEquipItem_descriptor_;
  metadata.reflection = TTeamEquipItem_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TTeamHero::kHidFieldNumber;
const int TTeamHero::kTroopsFieldNumber;
const int TTeamHero::kHurtTroopsFieldNumber;
const int TTeamHero::kRaiseTroopsFieldNumber;
const int TTeamHero::kStartTimeFieldNumber;
const int TTeamHero::kEndTimeFieldNumber;
#endif  // !_MSC_VER

TTeamHero::TTeamHero()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TTeamHero)
}

void TTeamHero::InitAsDefaultInstance() {
}

TTeamHero::TTeamHero(const TTeamHero& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TTeamHero)
}

void TTeamHero::SharedCtor() {
  _cached_size_ = 0;
  hid_ = 0u;
  troops_ = 0u;
  hurttroops_ = 0u;
  raisetroops_ = 0u;
  starttime_ = GOOGLE_ULONGLONG(0);
  endtime_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TTeamHero::~TTeamHero() {
  // @@protoc_insertion_point(destructor:pb.TTeamHero)
  SharedDtor();
}

void TTeamHero::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TTeamHero::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TTeamHero::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TTeamHero_descriptor_;
}

const TTeamHero& TTeamHero::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fSlgTeam_2eproto();
  return *default_instance_;
}

TTeamHero* TTeamHero::default_instance_ = NULL;

TTeamHero* TTeamHero::New() const {
  return new TTeamHero;
}

void TTeamHero::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<TTeamHero*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 63) {
    ZR_(hid_, endtime_);
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TTeamHero::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TTeamHero)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 Hid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &hid_)));
          set_has_hid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_Troops;
        break;
      }

      // optional uint32 Troops = 2;
      case 2: {
        if (tag == 16) {
         parse_Troops:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &troops_)));
          set_has_troops();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_HurtTroops;
        break;
      }

      // optional uint32 HurtTroops = 3;
      case 3: {
        if (tag == 24) {
         parse_HurtTroops:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &hurttroops_)));
          set_has_hurttroops();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_RaiseTroops;
        break;
      }

      // optional uint32 RaiseTroops = 4;
      case 4: {
        if (tag == 32) {
         parse_RaiseTroops:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &raisetroops_)));
          set_has_raisetroops();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_StartTime;
        break;
      }

      // optional uint64 StartTime = 5;
      case 5: {
        if (tag == 40) {
         parse_StartTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &starttime_)));
          set_has_starttime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_EndTime;
        break;
      }

      // optional uint64 EndTime = 6;
      case 6: {
        if (tag == 48) {
         parse_EndTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &endtime_)));
          set_has_endtime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TTeamHero)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TTeamHero)
  return false;
#undef DO_
}

void TTeamHero::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TTeamHero)
  // optional uint32 Hid = 1;
  if (has_hid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->hid(), output);
  }

  // optional uint32 Troops = 2;
  if (has_troops()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->troops(), output);
  }

  // optional uint32 HurtTroops = 3;
  if (has_hurttroops()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->hurttroops(), output);
  }

  // optional uint32 RaiseTroops = 4;
  if (has_raisetroops()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->raisetroops(), output);
  }

  // optional uint64 StartTime = 5;
  if (has_starttime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(5, this->starttime(), output);
  }

  // optional uint64 EndTime = 6;
  if (has_endtime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(6, this->endtime(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TTeamHero)
}

::google::protobuf::uint8* TTeamHero::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TTeamHero)
  // optional uint32 Hid = 1;
  if (has_hid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->hid(), target);
  }

  // optional uint32 Troops = 2;
  if (has_troops()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->troops(), target);
  }

  // optional uint32 HurtTroops = 3;
  if (has_hurttroops()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->hurttroops(), target);
  }

  // optional uint32 RaiseTroops = 4;
  if (has_raisetroops()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->raisetroops(), target);
  }

  // optional uint64 StartTime = 5;
  if (has_starttime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(5, this->starttime(), target);
  }

  // optional uint64 EndTime = 6;
  if (has_endtime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(6, this->endtime(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TTeamHero)
  return target;
}

int TTeamHero::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 Hid = 1;
    if (has_hid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->hid());
    }

    // optional uint32 Troops = 2;
    if (has_troops()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->troops());
    }

    // optional uint32 HurtTroops = 3;
    if (has_hurttroops()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->hurttroops());
    }

    // optional uint32 RaiseTroops = 4;
    if (has_raisetroops()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->raisetroops());
    }

    // optional uint64 StartTime = 5;
    if (has_starttime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->starttime());
    }

    // optional uint64 EndTime = 6;
    if (has_endtime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->endtime());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TTeamHero::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TTeamHero* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TTeamHero*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TTeamHero::MergeFrom(const TTeamHero& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_hid()) {
      set_hid(from.hid());
    }
    if (from.has_troops()) {
      set_troops(from.troops());
    }
    if (from.has_hurttroops()) {
      set_hurttroops(from.hurttroops());
    }
    if (from.has_raisetroops()) {
      set_raisetroops(from.raisetroops());
    }
    if (from.has_starttime()) {
      set_starttime(from.starttime());
    }
    if (from.has_endtime()) {
      set_endtime(from.endtime());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TTeamHero::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TTeamHero::CopyFrom(const TTeamHero& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TTeamHero::IsInitialized() const {

  return true;
}

void TTeamHero::Swap(TTeamHero* other) {
  if (other != this) {
    std::swap(hid_, other->hid_);
    std::swap(troops_, other->troops_);
    std::swap(hurttroops_, other->hurttroops_);
    std::swap(raisetroops_, other->raisetroops_);
    std::swap(starttime_, other->starttime_);
    std::swap(endtime_, other->endtime_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TTeamHero::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TTeamHero_descriptor_;
  metadata.reflection = TTeamHero_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TTeamInfo::kTeamIdFieldNumber;
const int TTeamInfo::kTeamStatusFieldNumber;
const int TTeamInfo::kGridIndexFieldNumber;
const int TTeamInfo::kHeroArrFieldNumber;
const int TTeamInfo::kItemArrFieldNumber;
#endif  // !_MSC_VER

TTeamInfo::TTeamInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TTeamInfo)
}

void TTeamInfo::InitAsDefaultInstance() {
}

TTeamInfo::TTeamInfo(const TTeamInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TTeamInfo)
}

void TTeamInfo::SharedCtor() {
  _cached_size_ = 0;
  teamid_ = 0u;
  teamstatus_ = 0;
  gridindex_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TTeamInfo::~TTeamInfo() {
  // @@protoc_insertion_point(destructor:pb.TTeamInfo)
  SharedDtor();
}

void TTeamInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TTeamInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TTeamInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TTeamInfo_descriptor_;
}

const TTeamInfo& TTeamInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fSlgTeam_2eproto();
  return *default_instance_;
}

TTeamInfo* TTeamInfo::default_instance_ = NULL;

TTeamInfo* TTeamInfo::New() const {
  return new TTeamInfo;
}

void TTeamInfo::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<TTeamInfo*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 7) {
    ZR_(teamid_, teamstatus_);
    gridindex_ = 0u;
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  heroarr_.Clear();
  itemarr_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TTeamInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TTeamInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 TeamId = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &teamid_)));
          set_has_teamid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_TeamStatus;
        break;
      }

      // optional .pb.ETeamStatus TeamStatus = 2;
      case 2: {
        if (tag == 16) {
         parse_TeamStatus:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::pb::ETeamStatus_IsValid(value)) {
            set_teamstatus(static_cast< ::pb::ETeamStatus >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_GridIndex;
        break;
      }

      // optional uint32 GridIndex = 3;
      case 3: {
        if (tag == 24) {
         parse_GridIndex:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &gridindex_)));
          set_has_gridindex();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_HeroArr;
        break;
      }

      // repeated .pb.TTeamHero HeroArr = 4;
      case 4: {
        if (tag == 34) {
         parse_HeroArr:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_heroarr()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_HeroArr;
        if (input->ExpectTag(42)) goto parse_ItemArr;
        break;
      }

      // repeated .pb.TTeamEquipItem ItemArr = 5;
      case 5: {
        if (tag == 42) {
         parse_ItemArr:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_itemarr()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_ItemArr;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TTeamInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TTeamInfo)
  return false;
#undef DO_
}

void TTeamInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TTeamInfo)
  // optional uint32 TeamId = 1;
  if (has_teamid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->teamid(), output);
  }

  // optional .pb.ETeamStatus TeamStatus = 2;
  if (has_teamstatus()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->teamstatus(), output);
  }

  // optional uint32 GridIndex = 3;
  if (has_gridindex()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->gridindex(), output);
  }

  // repeated .pb.TTeamHero HeroArr = 4;
  for (int i = 0; i < this->heroarr_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->heroarr(i), output);
  }

  // repeated .pb.TTeamEquipItem ItemArr = 5;
  for (int i = 0; i < this->itemarr_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->itemarr(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TTeamInfo)
}

::google::protobuf::uint8* TTeamInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TTeamInfo)
  // optional uint32 TeamId = 1;
  if (has_teamid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->teamid(), target);
  }

  // optional .pb.ETeamStatus TeamStatus = 2;
  if (has_teamstatus()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->teamstatus(), target);
  }

  // optional uint32 GridIndex = 3;
  if (has_gridindex()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->gridindex(), target);
  }

  // repeated .pb.TTeamHero HeroArr = 4;
  for (int i = 0; i < this->heroarr_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->heroarr(i), target);
  }

  // repeated .pb.TTeamEquipItem ItemArr = 5;
  for (int i = 0; i < this->itemarr_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->itemarr(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TTeamInfo)
  return target;
}

int TTeamInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 TeamId = 1;
    if (has_teamid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->teamid());
    }

    // optional .pb.ETeamStatus TeamStatus = 2;
    if (has_teamstatus()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->teamstatus());
    }

    // optional uint32 GridIndex = 3;
    if (has_gridindex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->gridindex());
    }

  }
  // repeated .pb.TTeamHero HeroArr = 4;
  total_size += 1 * this->heroarr_size();
  for (int i = 0; i < this->heroarr_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->heroarr(i));
  }

  // repeated .pb.TTeamEquipItem ItemArr = 5;
  total_size += 1 * this->itemarr_size();
  for (int i = 0; i < this->itemarr_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->itemarr(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TTeamInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TTeamInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TTeamInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TTeamInfo::MergeFrom(const TTeamInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  heroarr_.MergeFrom(from.heroarr_);
  itemarr_.MergeFrom(from.itemarr_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_teamid()) {
      set_teamid(from.teamid());
    }
    if (from.has_teamstatus()) {
      set_teamstatus(from.teamstatus());
    }
    if (from.has_gridindex()) {
      set_gridindex(from.gridindex());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TTeamInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TTeamInfo::CopyFrom(const TTeamInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TTeamInfo::IsInitialized() const {

  return true;
}

void TTeamInfo::Swap(TTeamInfo* other) {
  if (other != this) {
    std::swap(teamid_, other->teamid_);
    std::swap(teamstatus_, other->teamstatus_);
    std::swap(gridindex_, other->gridindex_);
    heroarr_.Swap(&other->heroarr_);
    itemarr_.Swap(&other->itemarr_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TTeamInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TTeamInfo_descriptor_;
  metadata.reflection = TTeamInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TTeamGetInfoRsp::kTeamArrFieldNumber;
#endif  // !_MSC_VER

TTeamGetInfoRsp::TTeamGetInfoRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TTeamGetInfoRsp)
}

void TTeamGetInfoRsp::InitAsDefaultInstance() {
}

TTeamGetInfoRsp::TTeamGetInfoRsp(const TTeamGetInfoRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TTeamGetInfoRsp)
}

void TTeamGetInfoRsp::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TTeamGetInfoRsp::~TTeamGetInfoRsp() {
  // @@protoc_insertion_point(destructor:pb.TTeamGetInfoRsp)
  SharedDtor();
}

void TTeamGetInfoRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TTeamGetInfoRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TTeamGetInfoRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TTeamGetInfoRsp_descriptor_;
}

const TTeamGetInfoRsp& TTeamGetInfoRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fSlgTeam_2eproto();
  return *default_instance_;
}

TTeamGetInfoRsp* TTeamGetInfoRsp::default_instance_ = NULL;

TTeamGetInfoRsp* TTeamGetInfoRsp::New() const {
  return new TTeamGetInfoRsp;
}

void TTeamGetInfoRsp::Clear() {
  teamarr_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TTeamGetInfoRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TTeamGetInfoRsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .pb.TTeamInfo TeamArr = 1;
      case 1: {
        if (tag == 10) {
         parse_TeamArr:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_teamarr()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_TeamArr;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TTeamGetInfoRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TTeamGetInfoRsp)
  return false;
#undef DO_
}

void TTeamGetInfoRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TTeamGetInfoRsp)
  // repeated .pb.TTeamInfo TeamArr = 1;
  for (int i = 0; i < this->teamarr_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->teamarr(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TTeamGetInfoRsp)
}

::google::protobuf::uint8* TTeamGetInfoRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TTeamGetInfoRsp)
  // repeated .pb.TTeamInfo TeamArr = 1;
  for (int i = 0; i < this->teamarr_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->teamarr(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TTeamGetInfoRsp)
  return target;
}

int TTeamGetInfoRsp::ByteSize() const {
  int total_size = 0;

  // repeated .pb.TTeamInfo TeamArr = 1;
  total_size += 1 * this->teamarr_size();
  for (int i = 0; i < this->teamarr_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->teamarr(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TTeamGetInfoRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TTeamGetInfoRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TTeamGetInfoRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TTeamGetInfoRsp::MergeFrom(const TTeamGetInfoRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  teamarr_.MergeFrom(from.teamarr_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TTeamGetInfoRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TTeamGetInfoRsp::CopyFrom(const TTeamGetInfoRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TTeamGetInfoRsp::IsInitialized() const {

  return true;
}

void TTeamGetInfoRsp::Swap(TTeamGetInfoRsp* other) {
  if (other != this) {
    teamarr_.Swap(&other->teamarr_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TTeamGetInfoRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TTeamGetInfoRsp_descriptor_;
  metadata.reflection = TTeamGetInfoRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TTeamAddHeroReq::kTeamIdFieldNumber;
const int TTeamAddHeroReq::kHidFieldNumber;
#endif  // !_MSC_VER

TTeamAddHeroReq::TTeamAddHeroReq()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TTeamAddHeroReq)
}

void TTeamAddHeroReq::InitAsDefaultInstance() {
}

TTeamAddHeroReq::TTeamAddHeroReq(const TTeamAddHeroReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TTeamAddHeroReq)
}

void TTeamAddHeroReq::SharedCtor() {
  _cached_size_ = 0;
  teamid_ = 0u;
  hid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TTeamAddHeroReq::~TTeamAddHeroReq() {
  // @@protoc_insertion_point(destructor:pb.TTeamAddHeroReq)
  SharedDtor();
}

void TTeamAddHeroReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TTeamAddHeroReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TTeamAddHeroReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TTeamAddHeroReq_descriptor_;
}

const TTeamAddHeroReq& TTeamAddHeroReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fSlgTeam_2eproto();
  return *default_instance_;
}

TTeamAddHeroReq* TTeamAddHeroReq::default_instance_ = NULL;

TTeamAddHeroReq* TTeamAddHeroReq::New() const {
  return new TTeamAddHeroReq;
}

void TTeamAddHeroReq::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<TTeamAddHeroReq*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(teamid_, hid_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TTeamAddHeroReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TTeamAddHeroReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 TeamId = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &teamid_)));
          set_has_teamid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_Hid;
        break;
      }

      // optional uint32 Hid = 2;
      case 2: {
        if (tag == 16) {
         parse_Hid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &hid_)));
          set_has_hid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TTeamAddHeroReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TTeamAddHeroReq)
  return false;
#undef DO_
}

void TTeamAddHeroReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TTeamAddHeroReq)
  // optional uint32 TeamId = 1;
  if (has_teamid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->teamid(), output);
  }

  // optional uint32 Hid = 2;
  if (has_hid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->hid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TTeamAddHeroReq)
}

::google::protobuf::uint8* TTeamAddHeroReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TTeamAddHeroReq)
  // optional uint32 TeamId = 1;
  if (has_teamid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->teamid(), target);
  }

  // optional uint32 Hid = 2;
  if (has_hid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->hid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TTeamAddHeroReq)
  return target;
}

int TTeamAddHeroReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 TeamId = 1;
    if (has_teamid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->teamid());
    }

    // optional uint32 Hid = 2;
    if (has_hid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->hid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TTeamAddHeroReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TTeamAddHeroReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TTeamAddHeroReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TTeamAddHeroReq::MergeFrom(const TTeamAddHeroReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_teamid()) {
      set_teamid(from.teamid());
    }
    if (from.has_hid()) {
      set_hid(from.hid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TTeamAddHeroReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TTeamAddHeroReq::CopyFrom(const TTeamAddHeroReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TTeamAddHeroReq::IsInitialized() const {

  return true;
}

void TTeamAddHeroReq::Swap(TTeamAddHeroReq* other) {
  if (other != this) {
    std::swap(teamid_, other->teamid_);
    std::swap(hid_, other->hid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TTeamAddHeroReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TTeamAddHeroReq_descriptor_;
  metadata.reflection = TTeamAddHeroReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TTeamRemoveHeroReq::kTeamIdFieldNumber;
const int TTeamRemoveHeroReq::kHidFieldNumber;
#endif  // !_MSC_VER

TTeamRemoveHeroReq::TTeamRemoveHeroReq()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TTeamRemoveHeroReq)
}

void TTeamRemoveHeroReq::InitAsDefaultInstance() {
}

TTeamRemoveHeroReq::TTeamRemoveHeroReq(const TTeamRemoveHeroReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TTeamRemoveHeroReq)
}

void TTeamRemoveHeroReq::SharedCtor() {
  _cached_size_ = 0;
  teamid_ = 0u;
  hid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TTeamRemoveHeroReq::~TTeamRemoveHeroReq() {
  // @@protoc_insertion_point(destructor:pb.TTeamRemoveHeroReq)
  SharedDtor();
}

void TTeamRemoveHeroReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TTeamRemoveHeroReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TTeamRemoveHeroReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TTeamRemoveHeroReq_descriptor_;
}

const TTeamRemoveHeroReq& TTeamRemoveHeroReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fSlgTeam_2eproto();
  return *default_instance_;
}

TTeamRemoveHeroReq* TTeamRemoveHeroReq::default_instance_ = NULL;

TTeamRemoveHeroReq* TTeamRemoveHeroReq::New() const {
  return new TTeamRemoveHeroReq;
}

void TTeamRemoveHeroReq::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<TTeamRemoveHeroReq*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(teamid_, hid_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TTeamRemoveHeroReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TTeamRemoveHeroReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 TeamId = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &teamid_)));
          set_has_teamid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_Hid;
        break;
      }

      // optional uint32 Hid = 2;
      case 2: {
        if (tag == 16) {
         parse_Hid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &hid_)));
          set_has_hid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TTeamRemoveHeroReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TTeamRemoveHeroReq)
  return false;
#undef DO_
}

void TTeamRemoveHeroReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TTeamRemoveHeroReq)
  // optional uint32 TeamId = 1;
  if (has_teamid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->teamid(), output);
  }

  // optional uint32 Hid = 2;
  if (has_hid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->hid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TTeamRemoveHeroReq)
}

::google::protobuf::uint8* TTeamRemoveHeroReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TTeamRemoveHeroReq)
  // optional uint32 TeamId = 1;
  if (has_teamid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->teamid(), target);
  }

  // optional uint32 Hid = 2;
  if (has_hid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->hid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TTeamRemoveHeroReq)
  return target;
}

int TTeamRemoveHeroReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 TeamId = 1;
    if (has_teamid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->teamid());
    }

    // optional uint32 Hid = 2;
    if (has_hid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->hid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TTeamRemoveHeroReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TTeamRemoveHeroReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TTeamRemoveHeroReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TTeamRemoveHeroReq::MergeFrom(const TTeamRemoveHeroReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_teamid()) {
      set_teamid(from.teamid());
    }
    if (from.has_hid()) {
      set_hid(from.hid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TTeamRemoveHeroReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TTeamRemoveHeroReq::CopyFrom(const TTeamRemoveHeroReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TTeamRemoveHeroReq::IsInitialized() const {

  return true;
}

void TTeamRemoveHeroReq::Swap(TTeamRemoveHeroReq* other) {
  if (other != this) {
    std::swap(teamid_, other->teamid_);
    std::swap(hid_, other->hid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TTeamRemoveHeroReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TTeamRemoveHeroReq_descriptor_;
  metadata.reflection = TTeamRemoveHeroReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TTeamExchangeHeroReq::kSrcTeamIdFieldNumber;
const int TTeamExchangeHeroReq::kSrcHidFieldNumber;
const int TTeamExchangeHeroReq::kDesTeamIdFieldNumber;
const int TTeamExchangeHeroReq::kDesHidFieldNumber;
#endif  // !_MSC_VER

TTeamExchangeHeroReq::TTeamExchangeHeroReq()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TTeamExchangeHeroReq)
}

void TTeamExchangeHeroReq::InitAsDefaultInstance() {
}

TTeamExchangeHeroReq::TTeamExchangeHeroReq(const TTeamExchangeHeroReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TTeamExchangeHeroReq)
}

void TTeamExchangeHeroReq::SharedCtor() {
  _cached_size_ = 0;
  srcteamid_ = 0u;
  srchid_ = 0u;
  desteamid_ = 0u;
  deshid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TTeamExchangeHeroReq::~TTeamExchangeHeroReq() {
  // @@protoc_insertion_point(destructor:pb.TTeamExchangeHeroReq)
  SharedDtor();
}

void TTeamExchangeHeroReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TTeamExchangeHeroReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TTeamExchangeHeroReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TTeamExchangeHeroReq_descriptor_;
}

const TTeamExchangeHeroReq& TTeamExchangeHeroReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fSlgTeam_2eproto();
  return *default_instance_;
}

TTeamExchangeHeroReq* TTeamExchangeHeroReq::default_instance_ = NULL;

TTeamExchangeHeroReq* TTeamExchangeHeroReq::New() const {
  return new TTeamExchangeHeroReq;
}

void TTeamExchangeHeroReq::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<TTeamExchangeHeroReq*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(srcteamid_, deshid_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TTeamExchangeHeroReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TTeamExchangeHeroReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 SrcTeamId = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &srcteamid_)));
          set_has_srcteamid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_SrcHid;
        break;
      }

      // optional uint32 SrcHid = 2;
      case 2: {
        if (tag == 16) {
         parse_SrcHid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &srchid_)));
          set_has_srchid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_DesTeamId;
        break;
      }

      // optional uint32 DesTeamId = 3;
      case 3: {
        if (tag == 24) {
         parse_DesTeamId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &desteamid_)));
          set_has_desteamid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_DesHid;
        break;
      }

      // optional uint32 DesHid = 4;
      case 4: {
        if (tag == 32) {
         parse_DesHid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &deshid_)));
          set_has_deshid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TTeamExchangeHeroReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TTeamExchangeHeroReq)
  return false;
#undef DO_
}

void TTeamExchangeHeroReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TTeamExchangeHeroReq)
  // optional uint32 SrcTeamId = 1;
  if (has_srcteamid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->srcteamid(), output);
  }

  // optional uint32 SrcHid = 2;
  if (has_srchid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->srchid(), output);
  }

  // optional uint32 DesTeamId = 3;
  if (has_desteamid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->desteamid(), output);
  }

  // optional uint32 DesHid = 4;
  if (has_deshid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->deshid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TTeamExchangeHeroReq)
}

::google::protobuf::uint8* TTeamExchangeHeroReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TTeamExchangeHeroReq)
  // optional uint32 SrcTeamId = 1;
  if (has_srcteamid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->srcteamid(), target);
  }

  // optional uint32 SrcHid = 2;
  if (has_srchid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->srchid(), target);
  }

  // optional uint32 DesTeamId = 3;
  if (has_desteamid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->desteamid(), target);
  }

  // optional uint32 DesHid = 4;
  if (has_deshid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->deshid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TTeamExchangeHeroReq)
  return target;
}

int TTeamExchangeHeroReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 SrcTeamId = 1;
    if (has_srcteamid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->srcteamid());
    }

    // optional uint32 SrcHid = 2;
    if (has_srchid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->srchid());
    }

    // optional uint32 DesTeamId = 3;
    if (has_desteamid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->desteamid());
    }

    // optional uint32 DesHid = 4;
    if (has_deshid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->deshid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TTeamExchangeHeroReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TTeamExchangeHeroReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TTeamExchangeHeroReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TTeamExchangeHeroReq::MergeFrom(const TTeamExchangeHeroReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_srcteamid()) {
      set_srcteamid(from.srcteamid());
    }
    if (from.has_srchid()) {
      set_srchid(from.srchid());
    }
    if (from.has_desteamid()) {
      set_desteamid(from.desteamid());
    }
    if (from.has_deshid()) {
      set_deshid(from.deshid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TTeamExchangeHeroReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TTeamExchangeHeroReq::CopyFrom(const TTeamExchangeHeroReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TTeamExchangeHeroReq::IsInitialized() const {

  return true;
}

void TTeamExchangeHeroReq::Swap(TTeamExchangeHeroReq* other) {
  if (other != this) {
    std::swap(srcteamid_, other->srcteamid_);
    std::swap(srchid_, other->srchid_);
    std::swap(desteamid_, other->desteamid_);
    std::swap(deshid_, other->deshid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TTeamExchangeHeroReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TTeamExchangeHeroReq_descriptor_;
  metadata.reflection = TTeamExchangeHeroReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TTeamRaiseTroops::kHidFieldNumber;
const int TTeamRaiseTroops::kAddNumFieldNumber;
#endif  // !_MSC_VER

TTeamRaiseTroops::TTeamRaiseTroops()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TTeamRaiseTroops)
}

void TTeamRaiseTroops::InitAsDefaultInstance() {
}

TTeamRaiseTroops::TTeamRaiseTroops(const TTeamRaiseTroops& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TTeamRaiseTroops)
}

void TTeamRaiseTroops::SharedCtor() {
  _cached_size_ = 0;
  hid_ = 0u;
  addnum_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TTeamRaiseTroops::~TTeamRaiseTroops() {
  // @@protoc_insertion_point(destructor:pb.TTeamRaiseTroops)
  SharedDtor();
}

void TTeamRaiseTroops::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TTeamRaiseTroops::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TTeamRaiseTroops::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TTeamRaiseTroops_descriptor_;
}

const TTeamRaiseTroops& TTeamRaiseTroops::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fSlgTeam_2eproto();
  return *default_instance_;
}

TTeamRaiseTroops* TTeamRaiseTroops::default_instance_ = NULL;

TTeamRaiseTroops* TTeamRaiseTroops::New() const {
  return new TTeamRaiseTroops;
}

void TTeamRaiseTroops::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<TTeamRaiseTroops*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(hid_, addnum_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TTeamRaiseTroops::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TTeamRaiseTroops)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 Hid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &hid_)));
          set_has_hid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_AddNum;
        break;
      }

      // optional uint32 AddNum = 2;
      case 2: {
        if (tag == 16) {
         parse_AddNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &addnum_)));
          set_has_addnum();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TTeamRaiseTroops)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TTeamRaiseTroops)
  return false;
#undef DO_
}

void TTeamRaiseTroops::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TTeamRaiseTroops)
  // optional uint32 Hid = 1;
  if (has_hid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->hid(), output);
  }

  // optional uint32 AddNum = 2;
  if (has_addnum()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->addnum(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TTeamRaiseTroops)
}

::google::protobuf::uint8* TTeamRaiseTroops::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TTeamRaiseTroops)
  // optional uint32 Hid = 1;
  if (has_hid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->hid(), target);
  }

  // optional uint32 AddNum = 2;
  if (has_addnum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->addnum(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TTeamRaiseTroops)
  return target;
}

int TTeamRaiseTroops::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 Hid = 1;
    if (has_hid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->hid());
    }

    // optional uint32 AddNum = 2;
    if (has_addnum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->addnum());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TTeamRaiseTroops::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TTeamRaiseTroops* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TTeamRaiseTroops*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TTeamRaiseTroops::MergeFrom(const TTeamRaiseTroops& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_hid()) {
      set_hid(from.hid());
    }
    if (from.has_addnum()) {
      set_addnum(from.addnum());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TTeamRaiseTroops::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TTeamRaiseTroops::CopyFrom(const TTeamRaiseTroops& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TTeamRaiseTroops::IsInitialized() const {

  return true;
}

void TTeamRaiseTroops::Swap(TTeamRaiseTroops* other) {
  if (other != this) {
    std::swap(hid_, other->hid_);
    std::swap(addnum_, other->addnum_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TTeamRaiseTroops::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TTeamRaiseTroops_descriptor_;
  metadata.reflection = TTeamRaiseTroops_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TTeamRaiseTroopsReq::kTeamIdFieldNumber;
const int TTeamRaiseTroopsReq::kAddArrFieldNumber;
#endif  // !_MSC_VER

TTeamRaiseTroopsReq::TTeamRaiseTroopsReq()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TTeamRaiseTroopsReq)
}

void TTeamRaiseTroopsReq::InitAsDefaultInstance() {
}

TTeamRaiseTroopsReq::TTeamRaiseTroopsReq(const TTeamRaiseTroopsReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TTeamRaiseTroopsReq)
}

void TTeamRaiseTroopsReq::SharedCtor() {
  _cached_size_ = 0;
  teamid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TTeamRaiseTroopsReq::~TTeamRaiseTroopsReq() {
  // @@protoc_insertion_point(destructor:pb.TTeamRaiseTroopsReq)
  SharedDtor();
}

void TTeamRaiseTroopsReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TTeamRaiseTroopsReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TTeamRaiseTroopsReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TTeamRaiseTroopsReq_descriptor_;
}

const TTeamRaiseTroopsReq& TTeamRaiseTroopsReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fSlgTeam_2eproto();
  return *default_instance_;
}

TTeamRaiseTroopsReq* TTeamRaiseTroopsReq::default_instance_ = NULL;

TTeamRaiseTroopsReq* TTeamRaiseTroopsReq::New() const {
  return new TTeamRaiseTroopsReq;
}

void TTeamRaiseTroopsReq::Clear() {
  teamid_ = 0u;
  addarr_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TTeamRaiseTroopsReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TTeamRaiseTroopsReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 TeamId = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &teamid_)));
          set_has_teamid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_AddArr;
        break;
      }

      // repeated .pb.TTeamRaiseTroops AddArr = 2;
      case 2: {
        if (tag == 18) {
         parse_AddArr:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_addarr()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_AddArr;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TTeamRaiseTroopsReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TTeamRaiseTroopsReq)
  return false;
#undef DO_
}

void TTeamRaiseTroopsReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TTeamRaiseTroopsReq)
  // optional uint32 TeamId = 1;
  if (has_teamid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->teamid(), output);
  }

  // repeated .pb.TTeamRaiseTroops AddArr = 2;
  for (int i = 0; i < this->addarr_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->addarr(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TTeamRaiseTroopsReq)
}

::google::protobuf::uint8* TTeamRaiseTroopsReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TTeamRaiseTroopsReq)
  // optional uint32 TeamId = 1;
  if (has_teamid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->teamid(), target);
  }

  // repeated .pb.TTeamRaiseTroops AddArr = 2;
  for (int i = 0; i < this->addarr_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->addarr(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TTeamRaiseTroopsReq)
  return target;
}

int TTeamRaiseTroopsReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 TeamId = 1;
    if (has_teamid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->teamid());
    }

  }
  // repeated .pb.TTeamRaiseTroops AddArr = 2;
  total_size += 1 * this->addarr_size();
  for (int i = 0; i < this->addarr_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->addarr(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TTeamRaiseTroopsReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TTeamRaiseTroopsReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TTeamRaiseTroopsReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TTeamRaiseTroopsReq::MergeFrom(const TTeamRaiseTroopsReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  addarr_.MergeFrom(from.addarr_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_teamid()) {
      set_teamid(from.teamid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TTeamRaiseTroopsReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TTeamRaiseTroopsReq::CopyFrom(const TTeamRaiseTroopsReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TTeamRaiseTroopsReq::IsInitialized() const {

  return true;
}

void TTeamRaiseTroopsReq::Swap(TTeamRaiseTroopsReq* other) {
  if (other != this) {
    std::swap(teamid_, other->teamid_);
    addarr_.Swap(&other->addarr_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TTeamRaiseTroopsReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TTeamRaiseTroopsReq_descriptor_;
  metadata.reflection = TTeamRaiseTroopsReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TTeamRaiseTroopsRsp::kHeroArrFieldNumber;
#endif  // !_MSC_VER

TTeamRaiseTroopsRsp::TTeamRaiseTroopsRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TTeamRaiseTroopsRsp)
}

void TTeamRaiseTroopsRsp::InitAsDefaultInstance() {
}

TTeamRaiseTroopsRsp::TTeamRaiseTroopsRsp(const TTeamRaiseTroopsRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TTeamRaiseTroopsRsp)
}

void TTeamRaiseTroopsRsp::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TTeamRaiseTroopsRsp::~TTeamRaiseTroopsRsp() {
  // @@protoc_insertion_point(destructor:pb.TTeamRaiseTroopsRsp)
  SharedDtor();
}

void TTeamRaiseTroopsRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TTeamRaiseTroopsRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TTeamRaiseTroopsRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TTeamRaiseTroopsRsp_descriptor_;
}

const TTeamRaiseTroopsRsp& TTeamRaiseTroopsRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fSlgTeam_2eproto();
  return *default_instance_;
}

TTeamRaiseTroopsRsp* TTeamRaiseTroopsRsp::default_instance_ = NULL;

TTeamRaiseTroopsRsp* TTeamRaiseTroopsRsp::New() const {
  return new TTeamRaiseTroopsRsp;
}

void TTeamRaiseTroopsRsp::Clear() {
  heroarr_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TTeamRaiseTroopsRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TTeamRaiseTroopsRsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .pb.TTeamHero HeroArr = 1;
      case 1: {
        if (tag == 10) {
         parse_HeroArr:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_heroarr()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_HeroArr;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TTeamRaiseTroopsRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TTeamRaiseTroopsRsp)
  return false;
#undef DO_
}

void TTeamRaiseTroopsRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TTeamRaiseTroopsRsp)
  // repeated .pb.TTeamHero HeroArr = 1;
  for (int i = 0; i < this->heroarr_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->heroarr(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TTeamRaiseTroopsRsp)
}

::google::protobuf::uint8* TTeamRaiseTroopsRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TTeamRaiseTroopsRsp)
  // repeated .pb.TTeamHero HeroArr = 1;
  for (int i = 0; i < this->heroarr_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->heroarr(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TTeamRaiseTroopsRsp)
  return target;
}

int TTeamRaiseTroopsRsp::ByteSize() const {
  int total_size = 0;

  // repeated .pb.TTeamHero HeroArr = 1;
  total_size += 1 * this->heroarr_size();
  for (int i = 0; i < this->heroarr_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->heroarr(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TTeamRaiseTroopsRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TTeamRaiseTroopsRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TTeamRaiseTroopsRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TTeamRaiseTroopsRsp::MergeFrom(const TTeamRaiseTroopsRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  heroarr_.MergeFrom(from.heroarr_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TTeamRaiseTroopsRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TTeamRaiseTroopsRsp::CopyFrom(const TTeamRaiseTroopsRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TTeamRaiseTroopsRsp::IsInitialized() const {

  return true;
}

void TTeamRaiseTroopsRsp::Swap(TTeamRaiseTroopsRsp* other) {
  if (other != this) {
    heroarr_.Swap(&other->heroarr_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TTeamRaiseTroopsRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TTeamRaiseTroopsRsp_descriptor_;
  metadata.reflection = TTeamRaiseTroopsRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TTeamCancelRaiseTroopsReq::kTeamIdFieldNumber;
const int TTeamCancelRaiseTroopsReq::kHidFieldNumber;
#endif  // !_MSC_VER

TTeamCancelRaiseTroopsReq::TTeamCancelRaiseTroopsReq()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TTeamCancelRaiseTroopsReq)
}

void TTeamCancelRaiseTroopsReq::InitAsDefaultInstance() {
}

TTeamCancelRaiseTroopsReq::TTeamCancelRaiseTroopsReq(const TTeamCancelRaiseTroopsReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TTeamCancelRaiseTroopsReq)
}

void TTeamCancelRaiseTroopsReq::SharedCtor() {
  _cached_size_ = 0;
  teamid_ = 0u;
  hid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TTeamCancelRaiseTroopsReq::~TTeamCancelRaiseTroopsReq() {
  // @@protoc_insertion_point(destructor:pb.TTeamCancelRaiseTroopsReq)
  SharedDtor();
}

void TTeamCancelRaiseTroopsReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TTeamCancelRaiseTroopsReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TTeamCancelRaiseTroopsReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TTeamCancelRaiseTroopsReq_descriptor_;
}

const TTeamCancelRaiseTroopsReq& TTeamCancelRaiseTroopsReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fSlgTeam_2eproto();
  return *default_instance_;
}

TTeamCancelRaiseTroopsReq* TTeamCancelRaiseTroopsReq::default_instance_ = NULL;

TTeamCancelRaiseTroopsReq* TTeamCancelRaiseTroopsReq::New() const {
  return new TTeamCancelRaiseTroopsReq;
}

void TTeamCancelRaiseTroopsReq::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<TTeamCancelRaiseTroopsReq*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(teamid_, hid_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TTeamCancelRaiseTroopsReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TTeamCancelRaiseTroopsReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 TeamId = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &teamid_)));
          set_has_teamid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_Hid;
        break;
      }

      // optional uint32 Hid = 2;
      case 2: {
        if (tag == 16) {
         parse_Hid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &hid_)));
          set_has_hid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TTeamCancelRaiseTroopsReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TTeamCancelRaiseTroopsReq)
  return false;
#undef DO_
}

void TTeamCancelRaiseTroopsReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TTeamCancelRaiseTroopsReq)
  // optional uint32 TeamId = 1;
  if (has_teamid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->teamid(), output);
  }

  // optional uint32 Hid = 2;
  if (has_hid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->hid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TTeamCancelRaiseTroopsReq)
}

::google::protobuf::uint8* TTeamCancelRaiseTroopsReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TTeamCancelRaiseTroopsReq)
  // optional uint32 TeamId = 1;
  if (has_teamid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->teamid(), target);
  }

  // optional uint32 Hid = 2;
  if (has_hid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->hid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TTeamCancelRaiseTroopsReq)
  return target;
}

int TTeamCancelRaiseTroopsReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 TeamId = 1;
    if (has_teamid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->teamid());
    }

    // optional uint32 Hid = 2;
    if (has_hid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->hid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TTeamCancelRaiseTroopsReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TTeamCancelRaiseTroopsReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TTeamCancelRaiseTroopsReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TTeamCancelRaiseTroopsReq::MergeFrom(const TTeamCancelRaiseTroopsReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_teamid()) {
      set_teamid(from.teamid());
    }
    if (from.has_hid()) {
      set_hid(from.hid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TTeamCancelRaiseTroopsReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TTeamCancelRaiseTroopsReq::CopyFrom(const TTeamCancelRaiseTroopsReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TTeamCancelRaiseTroopsReq::IsInitialized() const {

  return true;
}

void TTeamCancelRaiseTroopsReq::Swap(TTeamCancelRaiseTroopsReq* other) {
  if (other != this) {
    std::swap(teamid_, other->teamid_);
    std::swap(hid_, other->hid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TTeamCancelRaiseTroopsReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TTeamCancelRaiseTroopsReq_descriptor_;
  metadata.reflection = TTeamCancelRaiseTroopsReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TTeamCancelRaiseTroopsRsp::kHeroFieldNumber;
#endif  // !_MSC_VER

TTeamCancelRaiseTroopsRsp::TTeamCancelRaiseTroopsRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TTeamCancelRaiseTroopsRsp)
}

void TTeamCancelRaiseTroopsRsp::InitAsDefaultInstance() {
  hero_ = const_cast< ::pb::TTeamHero*>(&::pb::TTeamHero::default_instance());
}

TTeamCancelRaiseTroopsRsp::TTeamCancelRaiseTroopsRsp(const TTeamCancelRaiseTroopsRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TTeamCancelRaiseTroopsRsp)
}

void TTeamCancelRaiseTroopsRsp::SharedCtor() {
  _cached_size_ = 0;
  hero_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TTeamCancelRaiseTroopsRsp::~TTeamCancelRaiseTroopsRsp() {
  // @@protoc_insertion_point(destructor:pb.TTeamCancelRaiseTroopsRsp)
  SharedDtor();
}

void TTeamCancelRaiseTroopsRsp::SharedDtor() {
  if (this != default_instance_) {
    delete hero_;
  }
}

void TTeamCancelRaiseTroopsRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TTeamCancelRaiseTroopsRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TTeamCancelRaiseTroopsRsp_descriptor_;
}

const TTeamCancelRaiseTroopsRsp& TTeamCancelRaiseTroopsRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fSlgTeam_2eproto();
  return *default_instance_;
}

TTeamCancelRaiseTroopsRsp* TTeamCancelRaiseTroopsRsp::default_instance_ = NULL;

TTeamCancelRaiseTroopsRsp* TTeamCancelRaiseTroopsRsp::New() const {
  return new TTeamCancelRaiseTroopsRsp;
}

void TTeamCancelRaiseTroopsRsp::Clear() {
  if (has_hero()) {
    if (hero_ != NULL) hero_->::pb::TTeamHero::Clear();
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TTeamCancelRaiseTroopsRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TTeamCancelRaiseTroopsRsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .pb.TTeamHero Hero = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_hero()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TTeamCancelRaiseTroopsRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TTeamCancelRaiseTroopsRsp)
  return false;
#undef DO_
}

void TTeamCancelRaiseTroopsRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TTeamCancelRaiseTroopsRsp)
  // optional .pb.TTeamHero Hero = 1;
  if (has_hero()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->hero(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TTeamCancelRaiseTroopsRsp)
}

::google::protobuf::uint8* TTeamCancelRaiseTroopsRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TTeamCancelRaiseTroopsRsp)
  // optional .pb.TTeamHero Hero = 1;
  if (has_hero()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->hero(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TTeamCancelRaiseTroopsRsp)
  return target;
}

int TTeamCancelRaiseTroopsRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .pb.TTeamHero Hero = 1;
    if (has_hero()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->hero());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TTeamCancelRaiseTroopsRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TTeamCancelRaiseTroopsRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TTeamCancelRaiseTroopsRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TTeamCancelRaiseTroopsRsp::MergeFrom(const TTeamCancelRaiseTroopsRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_hero()) {
      mutable_hero()->::pb::TTeamHero::MergeFrom(from.hero());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TTeamCancelRaiseTroopsRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TTeamCancelRaiseTroopsRsp::CopyFrom(const TTeamCancelRaiseTroopsRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TTeamCancelRaiseTroopsRsp::IsInitialized() const {

  return true;
}

void TTeamCancelRaiseTroopsRsp::Swap(TTeamCancelRaiseTroopsRsp* other) {
  if (other != this) {
    std::swap(hero_, other->hero_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TTeamCancelRaiseTroopsRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TTeamCancelRaiseTroopsRsp_descriptor_;
  metadata.reflection = TTeamCancelRaiseTroopsRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TTeamSpeedUpRaiseTroopsReq::kTeamIdFieldNumber;
const int TTeamSpeedUpRaiseTroopsReq::kHidFieldNumber;
const int TTeamSpeedUpRaiseTroopsReq::kModeFieldNumber;
const int TTeamSpeedUpRaiseTroopsReq::kItemFieldNumber;
#endif  // !_MSC_VER

TTeamSpeedUpRaiseTroopsReq::TTeamSpeedUpRaiseTroopsReq()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TTeamSpeedUpRaiseTroopsReq)
}

void TTeamSpeedUpRaiseTroopsReq::InitAsDefaultInstance() {
  item_ = const_cast< ::pb::TSimpleItem*>(&::pb::TSimpleItem::default_instance());
}

TTeamSpeedUpRaiseTroopsReq::TTeamSpeedUpRaiseTroopsReq(const TTeamSpeedUpRaiseTroopsReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TTeamSpeedUpRaiseTroopsReq)
}

void TTeamSpeedUpRaiseTroopsReq::SharedCtor() {
  _cached_size_ = 0;
  teamid_ = 0u;
  hid_ = 0u;
  mode_ = 1;
  item_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TTeamSpeedUpRaiseTroopsReq::~TTeamSpeedUpRaiseTroopsReq() {
  // @@protoc_insertion_point(destructor:pb.TTeamSpeedUpRaiseTroopsReq)
  SharedDtor();
}

void TTeamSpeedUpRaiseTroopsReq::SharedDtor() {
  if (this != default_instance_) {
    delete item_;
  }
}

void TTeamSpeedUpRaiseTroopsReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TTeamSpeedUpRaiseTroopsReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TTeamSpeedUpRaiseTroopsReq_descriptor_;
}

const TTeamSpeedUpRaiseTroopsReq& TTeamSpeedUpRaiseTroopsReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fSlgTeam_2eproto();
  return *default_instance_;
}

TTeamSpeedUpRaiseTroopsReq* TTeamSpeedUpRaiseTroopsReq::default_instance_ = NULL;

TTeamSpeedUpRaiseTroopsReq* TTeamSpeedUpRaiseTroopsReq::New() const {
  return new TTeamSpeedUpRaiseTroopsReq;
}

void TTeamSpeedUpRaiseTroopsReq::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<TTeamSpeedUpRaiseTroopsReq*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 15) {
    ZR_(teamid_, hid_);
    mode_ = 1;
    if (has_item()) {
      if (item_ != NULL) item_->::pb::TSimpleItem::Clear();
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TTeamSpeedUpRaiseTroopsReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TTeamSpeedUpRaiseTroopsReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 TeamId = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &teamid_)));
          set_has_teamid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_Hid;
        break;
      }

      // optional uint32 Hid = 2;
      case 2: {
        if (tag == 16) {
         parse_Hid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &hid_)));
          set_has_hid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_Mode;
        break;
      }

      // optional .pb.ESpeedUpMode Mode = 3;
      case 3: {
        if (tag == 24) {
         parse_Mode:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::pb::ESpeedUpMode_IsValid(value)) {
            set_mode(static_cast< ::pb::ESpeedUpMode >(value));
          } else {
            mutable_unknown_fields()->AddVarint(3, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_Item;
        break;
      }

      // optional .pb.TSimpleItem Item = 4;
      case 4: {
        if (tag == 34) {
         parse_Item:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_item()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TTeamSpeedUpRaiseTroopsReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TTeamSpeedUpRaiseTroopsReq)
  return false;
#undef DO_
}

void TTeamSpeedUpRaiseTroopsReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TTeamSpeedUpRaiseTroopsReq)
  // optional uint32 TeamId = 1;
  if (has_teamid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->teamid(), output);
  }

  // optional uint32 Hid = 2;
  if (has_hid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->hid(), output);
  }

  // optional .pb.ESpeedUpMode Mode = 3;
  if (has_mode()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->mode(), output);
  }

  // optional .pb.TSimpleItem Item = 4;
  if (has_item()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->item(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TTeamSpeedUpRaiseTroopsReq)
}

::google::protobuf::uint8* TTeamSpeedUpRaiseTroopsReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TTeamSpeedUpRaiseTroopsReq)
  // optional uint32 TeamId = 1;
  if (has_teamid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->teamid(), target);
  }

  // optional uint32 Hid = 2;
  if (has_hid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->hid(), target);
  }

  // optional .pb.ESpeedUpMode Mode = 3;
  if (has_mode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->mode(), target);
  }

  // optional .pb.TSimpleItem Item = 4;
  if (has_item()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->item(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TTeamSpeedUpRaiseTroopsReq)
  return target;
}

int TTeamSpeedUpRaiseTroopsReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 TeamId = 1;
    if (has_teamid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->teamid());
    }

    // optional uint32 Hid = 2;
    if (has_hid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->hid());
    }

    // optional .pb.ESpeedUpMode Mode = 3;
    if (has_mode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->mode());
    }

    // optional .pb.TSimpleItem Item = 4;
    if (has_item()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->item());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TTeamSpeedUpRaiseTroopsReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TTeamSpeedUpRaiseTroopsReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TTeamSpeedUpRaiseTroopsReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TTeamSpeedUpRaiseTroopsReq::MergeFrom(const TTeamSpeedUpRaiseTroopsReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_teamid()) {
      set_teamid(from.teamid());
    }
    if (from.has_hid()) {
      set_hid(from.hid());
    }
    if (from.has_mode()) {
      set_mode(from.mode());
    }
    if (from.has_item()) {
      mutable_item()->::pb::TSimpleItem::MergeFrom(from.item());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TTeamSpeedUpRaiseTroopsReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TTeamSpeedUpRaiseTroopsReq::CopyFrom(const TTeamSpeedUpRaiseTroopsReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TTeamSpeedUpRaiseTroopsReq::IsInitialized() const {

  return true;
}

void TTeamSpeedUpRaiseTroopsReq::Swap(TTeamSpeedUpRaiseTroopsReq* other) {
  if (other != this) {
    std::swap(teamid_, other->teamid_);
    std::swap(hid_, other->hid_);
    std::swap(mode_, other->mode_);
    std::swap(item_, other->item_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TTeamSpeedUpRaiseTroopsReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TTeamSpeedUpRaiseTroopsReq_descriptor_;
  metadata.reflection = TTeamSpeedUpRaiseTroopsReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TTeamSpeedUpRaiseTroopsRsp::kHeroFieldNumber;
#endif  // !_MSC_VER

TTeamSpeedUpRaiseTroopsRsp::TTeamSpeedUpRaiseTroopsRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TTeamSpeedUpRaiseTroopsRsp)
}

void TTeamSpeedUpRaiseTroopsRsp::InitAsDefaultInstance() {
  hero_ = const_cast< ::pb::TTeamHero*>(&::pb::TTeamHero::default_instance());
}

TTeamSpeedUpRaiseTroopsRsp::TTeamSpeedUpRaiseTroopsRsp(const TTeamSpeedUpRaiseTroopsRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TTeamSpeedUpRaiseTroopsRsp)
}

void TTeamSpeedUpRaiseTroopsRsp::SharedCtor() {
  _cached_size_ = 0;
  hero_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TTeamSpeedUpRaiseTroopsRsp::~TTeamSpeedUpRaiseTroopsRsp() {
  // @@protoc_insertion_point(destructor:pb.TTeamSpeedUpRaiseTroopsRsp)
  SharedDtor();
}

void TTeamSpeedUpRaiseTroopsRsp::SharedDtor() {
  if (this != default_instance_) {
    delete hero_;
  }
}

void TTeamSpeedUpRaiseTroopsRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TTeamSpeedUpRaiseTroopsRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TTeamSpeedUpRaiseTroopsRsp_descriptor_;
}

const TTeamSpeedUpRaiseTroopsRsp& TTeamSpeedUpRaiseTroopsRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fSlgTeam_2eproto();
  return *default_instance_;
}

TTeamSpeedUpRaiseTroopsRsp* TTeamSpeedUpRaiseTroopsRsp::default_instance_ = NULL;

TTeamSpeedUpRaiseTroopsRsp* TTeamSpeedUpRaiseTroopsRsp::New() const {
  return new TTeamSpeedUpRaiseTroopsRsp;
}

void TTeamSpeedUpRaiseTroopsRsp::Clear() {
  if (has_hero()) {
    if (hero_ != NULL) hero_->::pb::TTeamHero::Clear();
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TTeamSpeedUpRaiseTroopsRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TTeamSpeedUpRaiseTroopsRsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .pb.TTeamHero Hero = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_hero()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TTeamSpeedUpRaiseTroopsRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TTeamSpeedUpRaiseTroopsRsp)
  return false;
#undef DO_
}

void TTeamSpeedUpRaiseTroopsRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TTeamSpeedUpRaiseTroopsRsp)
  // optional .pb.TTeamHero Hero = 1;
  if (has_hero()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->hero(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TTeamSpeedUpRaiseTroopsRsp)
}

::google::protobuf::uint8* TTeamSpeedUpRaiseTroopsRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TTeamSpeedUpRaiseTroopsRsp)
  // optional .pb.TTeamHero Hero = 1;
  if (has_hero()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->hero(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TTeamSpeedUpRaiseTroopsRsp)
  return target;
}

int TTeamSpeedUpRaiseTroopsRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .pb.TTeamHero Hero = 1;
    if (has_hero()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->hero());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TTeamSpeedUpRaiseTroopsRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TTeamSpeedUpRaiseTroopsRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TTeamSpeedUpRaiseTroopsRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TTeamSpeedUpRaiseTroopsRsp::MergeFrom(const TTeamSpeedUpRaiseTroopsRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_hero()) {
      mutable_hero()->::pb::TTeamHero::MergeFrom(from.hero());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TTeamSpeedUpRaiseTroopsRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TTeamSpeedUpRaiseTroopsRsp::CopyFrom(const TTeamSpeedUpRaiseTroopsRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TTeamSpeedUpRaiseTroopsRsp::IsInitialized() const {

  return true;
}

void TTeamSpeedUpRaiseTroopsRsp::Swap(TTeamSpeedUpRaiseTroopsRsp* other) {
  if (other != this) {
    std::swap(hero_, other->hero_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TTeamSpeedUpRaiseTroopsRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TTeamSpeedUpRaiseTroopsRsp_descriptor_;
  metadata.reflection = TTeamSpeedUpRaiseTroopsRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TTeamEquipItemsReq::kTeamIdFieldNumber;
const int TTeamEquipItemsReq::kItemArrFieldNumber;
#endif  // !_MSC_VER

TTeamEquipItemsReq::TTeamEquipItemsReq()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TTeamEquipItemsReq)
}

void TTeamEquipItemsReq::InitAsDefaultInstance() {
}

TTeamEquipItemsReq::TTeamEquipItemsReq(const TTeamEquipItemsReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TTeamEquipItemsReq)
}

void TTeamEquipItemsReq::SharedCtor() {
  _cached_size_ = 0;
  teamid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TTeamEquipItemsReq::~TTeamEquipItemsReq() {
  // @@protoc_insertion_point(destructor:pb.TTeamEquipItemsReq)
  SharedDtor();
}

void TTeamEquipItemsReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TTeamEquipItemsReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TTeamEquipItemsReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TTeamEquipItemsReq_descriptor_;
}

const TTeamEquipItemsReq& TTeamEquipItemsReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fSlgTeam_2eproto();
  return *default_instance_;
}

TTeamEquipItemsReq* TTeamEquipItemsReq::default_instance_ = NULL;

TTeamEquipItemsReq* TTeamEquipItemsReq::New() const {
  return new TTeamEquipItemsReq;
}

void TTeamEquipItemsReq::Clear() {
  teamid_ = 0u;
  itemarr_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TTeamEquipItemsReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TTeamEquipItemsReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 TeamId = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &teamid_)));
          set_has_teamid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_ItemArr;
        break;
      }

      // repeated .pb.TTeamEquipItem ItemArr = 2;
      case 2: {
        if (tag == 18) {
         parse_ItemArr:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_itemarr()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_ItemArr;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TTeamEquipItemsReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TTeamEquipItemsReq)
  return false;
#undef DO_
}

void TTeamEquipItemsReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TTeamEquipItemsReq)
  // optional uint32 TeamId = 1;
  if (has_teamid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->teamid(), output);
  }

  // repeated .pb.TTeamEquipItem ItemArr = 2;
  for (int i = 0; i < this->itemarr_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->itemarr(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TTeamEquipItemsReq)
}

::google::protobuf::uint8* TTeamEquipItemsReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TTeamEquipItemsReq)
  // optional uint32 TeamId = 1;
  if (has_teamid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->teamid(), target);
  }

  // repeated .pb.TTeamEquipItem ItemArr = 2;
  for (int i = 0; i < this->itemarr_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->itemarr(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TTeamEquipItemsReq)
  return target;
}

int TTeamEquipItemsReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 TeamId = 1;
    if (has_teamid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->teamid());
    }

  }
  // repeated .pb.TTeamEquipItem ItemArr = 2;
  total_size += 1 * this->itemarr_size();
  for (int i = 0; i < this->itemarr_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->itemarr(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TTeamEquipItemsReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TTeamEquipItemsReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TTeamEquipItemsReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TTeamEquipItemsReq::MergeFrom(const TTeamEquipItemsReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  itemarr_.MergeFrom(from.itemarr_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_teamid()) {
      set_teamid(from.teamid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TTeamEquipItemsReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TTeamEquipItemsReq::CopyFrom(const TTeamEquipItemsReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TTeamEquipItemsReq::IsInitialized() const {

  return true;
}

void TTeamEquipItemsReq::Swap(TTeamEquipItemsReq* other) {
  if (other != this) {
    std::swap(teamid_, other->teamid_);
    itemarr_.Swap(&other->itemarr_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TTeamEquipItemsReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TTeamEquipItemsReq_descriptor_;
  metadata.reflection = TTeamEquipItemsReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TTeamUpdateDataNotify::kTeamArrFieldNumber;
#endif  // !_MSC_VER

TTeamUpdateDataNotify::TTeamUpdateDataNotify()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TTeamUpdateDataNotify)
}

void TTeamUpdateDataNotify::InitAsDefaultInstance() {
}

TTeamUpdateDataNotify::TTeamUpdateDataNotify(const TTeamUpdateDataNotify& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TTeamUpdateDataNotify)
}

void TTeamUpdateDataNotify::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TTeamUpdateDataNotify::~TTeamUpdateDataNotify() {
  // @@protoc_insertion_point(destructor:pb.TTeamUpdateDataNotify)
  SharedDtor();
}

void TTeamUpdateDataNotify::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TTeamUpdateDataNotify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TTeamUpdateDataNotify::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TTeamUpdateDataNotify_descriptor_;
}

const TTeamUpdateDataNotify& TTeamUpdateDataNotify::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fSlgTeam_2eproto();
  return *default_instance_;
}

TTeamUpdateDataNotify* TTeamUpdateDataNotify::default_instance_ = NULL;

TTeamUpdateDataNotify* TTeamUpdateDataNotify::New() const {
  return new TTeamUpdateDataNotify;
}

void TTeamUpdateDataNotify::Clear() {
  teamarr_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TTeamUpdateDataNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TTeamUpdateDataNotify)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .pb.TTeamInfo TeamArr = 1;
      case 1: {
        if (tag == 10) {
         parse_TeamArr:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_teamarr()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_TeamArr;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TTeamUpdateDataNotify)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TTeamUpdateDataNotify)
  return false;
#undef DO_
}

void TTeamUpdateDataNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TTeamUpdateDataNotify)
  // repeated .pb.TTeamInfo TeamArr = 1;
  for (int i = 0; i < this->teamarr_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->teamarr(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TTeamUpdateDataNotify)
}

::google::protobuf::uint8* TTeamUpdateDataNotify::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TTeamUpdateDataNotify)
  // repeated .pb.TTeamInfo TeamArr = 1;
  for (int i = 0; i < this->teamarr_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->teamarr(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TTeamUpdateDataNotify)
  return target;
}

int TTeamUpdateDataNotify::ByteSize() const {
  int total_size = 0;

  // repeated .pb.TTeamInfo TeamArr = 1;
  total_size += 1 * this->teamarr_size();
  for (int i = 0; i < this->teamarr_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->teamarr(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TTeamUpdateDataNotify::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TTeamUpdateDataNotify* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TTeamUpdateDataNotify*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TTeamUpdateDataNotify::MergeFrom(const TTeamUpdateDataNotify& from) {
  GOOGLE_CHECK_NE(&from, this);
  teamarr_.MergeFrom(from.teamarr_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TTeamUpdateDataNotify::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TTeamUpdateDataNotify::CopyFrom(const TTeamUpdateDataNotify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TTeamUpdateDataNotify::IsInitialized() const {

  return true;
}

void TTeamUpdateDataNotify::Swap(TTeamUpdateDataNotify* other) {
  if (other != this) {
    teamarr_.Swap(&other->teamarr_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TTeamUpdateDataNotify::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TTeamUpdateDataNotify_descriptor_;
  metadata.reflection = TTeamUpdateDataNotify_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace pb

// @@protoc_insertion_point(global_scope)
