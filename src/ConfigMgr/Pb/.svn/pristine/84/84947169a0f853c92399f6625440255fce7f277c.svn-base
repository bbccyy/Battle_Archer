// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: net/DefineChallenge.proto

#ifndef PROTOBUF_net_2fDefineChallenge_2eproto__INCLUDED
#define PROTOBUF_net_2fDefineChallenge_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "net/User.pb.h"
#include "net/CommonReward.pb.h"
#include "net/Battle.pb.h"
// @@protoc_insertion_point(includes)

namespace pb {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_net_2fDefineChallenge_2eproto();
void protobuf_AssignDesc_net_2fDefineChallenge_2eproto();
void protobuf_ShutdownFile_net_2fDefineChallenge_2eproto();

class TDefineChallengeExpectProcess;
class TDefineChallengeActualProcess;
class TDefineChallengeExpectBossProcess;
class TDefineChallengeBattlePosInfo;
class TDefineChallengeFmtInfo;
class TDefineChallengeRankInfo;
class TDefineChallengeBossInfo;
class TDefineChallengeTaskInfo;
class TDefineChallengeGiftInfo;
class TDefineChallengeOtherRankInfo;
class TDefineChallengeGetTimeConfRsp;
class TDefineChallengeGetBaseInfoRsp;
class TDefineChallengeGetBattleArgsReq;
class TDefineChallengeGetBattleArgsRsp;
class TDefineChallengeReportBattleBossReq;
class TDefineChallengeReportBattleBossRsp;
class TDefineChallengeGetFmtReq;
class TDefineChallengeGetFmtRsp;
class TDefineChallengeSetFmtReq;
class TDefineChallengeReceiveTaskRewardReq;
class TDefineChallengeReceiveTaskRewardRsp;
class TDefineChallengeGetGroupRankArrRep;
class TDefineChallengeGetGroupRankArrRsp;
class TDefineChallengeGetWarZoneRankArrRep;
class TDefineChallengeGetWarZoneRankArrRsp;
class TDefineChallengeGetRankFormationRep;
class TDefineChallengeGetRankFormationRsp;
class TDefineChallengeChangeBossRep;
class TDefineChallengeChangeBossRsp;
class TDefineChallengeGetTaskListRep;
class TDefineChallengeGetTaskListRsp;
class TDefineChallengeGetShopInfoRsp;
class TDefineChallengeExchangeTimeLimitGiftRep;
class TDefineChallengeExchangeTimeLimitGiftRsp;
class TDefineChallengeSaveDebuffRep;

enum EDefineChallengeStage {
  EDEFINECHALLENGE_STAGE_INVALID = 0,
  EDEFINECHALLENGE_STAGE_SIGN = 1,
  EDEFINECHALLENGE_STAGE_GROUP = 2,
  EDEFINECHALLENGE_STAGE_BATTLE = 3,
  EDEFINECHALLENGE_STAGE_SHOW = 100
};
bool EDefineChallengeStage_IsValid(int value);
const EDefineChallengeStage EDefineChallengeStage_MIN = EDEFINECHALLENGE_STAGE_INVALID;
const EDefineChallengeStage EDefineChallengeStage_MAX = EDEFINECHALLENGE_STAGE_SHOW;
const int EDefineChallengeStage_ARRAYSIZE = EDefineChallengeStage_MAX + 1;

const ::google::protobuf::EnumDescriptor* EDefineChallengeStage_descriptor();
inline const ::std::string& EDefineChallengeStage_Name(EDefineChallengeStage value) {
  return ::google::protobuf::internal::NameOfEnum(
    EDefineChallengeStage_descriptor(), value);
}
inline bool EDefineChallengeStage_Parse(
    const ::std::string& name, EDefineChallengeStage* value) {
  return ::google::protobuf::internal::ParseNamedEnum<EDefineChallengeStage>(
    EDefineChallengeStage_descriptor(), name, value);
}
enum EDefineChallengeBanMType {
  BEASTAttr = 1,
  BEASTSkill = 2,
  WARRID = 3,
  TREASURE = 4
};
bool EDefineChallengeBanMType_IsValid(int value);
const EDefineChallengeBanMType EDefineChallengeBanMType_MIN = BEASTAttr;
const EDefineChallengeBanMType EDefineChallengeBanMType_MAX = TREASURE;
const int EDefineChallengeBanMType_ARRAYSIZE = EDefineChallengeBanMType_MAX + 1;

const ::google::protobuf::EnumDescriptor* EDefineChallengeBanMType_descriptor();
inline const ::std::string& EDefineChallengeBanMType_Name(EDefineChallengeBanMType value) {
  return ::google::protobuf::internal::NameOfEnum(
    EDefineChallengeBanMType_descriptor(), value);
}
inline bool EDefineChallengeBanMType_Parse(
    const ::std::string& name, EDefineChallengeBanMType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<EDefineChallengeBanMType>(
    EDefineChallengeBanMType_descriptor(), name, value);
}
// ===================================================================

/*FOR2LUA
<Record>
	<name>TDefineChallengeExpectProcess</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/DefineChallenge.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TDefineChallengeExpectProcess : public ::google::protobuf::Message {
 public:
  TDefineChallengeExpectProcess();
  virtual ~TDefineChallengeExpectProcess();

  TDefineChallengeExpectProcess(const TDefineChallengeExpectProcess& from);

  inline TDefineChallengeExpectProcess& operator=(const TDefineChallengeExpectProcess& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TDefineChallengeExpectProcess& default_instance();

  void Swap(TDefineChallengeExpectProcess* other);

  // implements Message ----------------------------------------------

  TDefineChallengeExpectProcess* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TDefineChallengeExpectProcess& from);
  void MergeFrom(const TDefineChallengeExpectProcess& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .pb.EDefineChallengeStage Stage = 1;
  inline bool has_stage() const;
  inline void clear_stage();
  static const int kStageFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TDefineChallengeExpectProcess</name>
  	<Function>
  		<name>stage</name>
  		<replaceName>Stage</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_stage</name>
  		<replaceName>Stage</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_stage</name>
  		<replaceName>Stage</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::pb::EDefineChallengeStage stage() const;
  inline void set_stage(::pb::EDefineChallengeStage value);

  // optional uint64 BegTime = 2;
  inline bool has_begtime() const;
  inline void clear_begtime();
  static const int kBegTimeFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TDefineChallengeExpectProcess</name>
  	<Function>
  		<name>begtime</name>
  		<replaceName>BegTime</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_begtime</name>
  		<replaceName>BegTime</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_begtime</name>
  		<replaceName>BegTime</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint64 begtime() const;
  inline void set_begtime(::google::protobuf::uint64 value);

  // optional uint64 EndTime = 3;
  inline bool has_endtime() const;
  inline void clear_endtime();
  static const int kEndTimeFieldNumber = 3;
  /*FOR2LUA
  <Record>
  	<name>TDefineChallengeExpectProcess</name>
  	<Function>
  		<name>endtime</name>
  		<replaceName>EndTime</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_endtime</name>
  		<replaceName>EndTime</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_endtime</name>
  		<replaceName>EndTime</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint64 endtime() const;
  inline void set_endtime(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:pb.TDefineChallengeExpectProcess)
 private:
  inline void set_has_stage();
  inline void clear_has_stage();
  inline void set_has_begtime();
  inline void clear_has_begtime();
  inline void set_has_endtime();
  inline void clear_has_endtime();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint64 begtime_;
  ::google::protobuf::uint64 endtime_;
  int stage_;
  friend void  protobuf_AddDesc_net_2fDefineChallenge_2eproto();
  friend void protobuf_AssignDesc_net_2fDefineChallenge_2eproto();
  friend void protobuf_ShutdownFile_net_2fDefineChallenge_2eproto();

  void InitAsDefaultInstance();
  static TDefineChallengeExpectProcess* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TDefineChallengeActualProcess</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/DefineChallenge.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TDefineChallengeActualProcess : public ::google::protobuf::Message {
 public:
  TDefineChallengeActualProcess();
  virtual ~TDefineChallengeActualProcess();

  TDefineChallengeActualProcess(const TDefineChallengeActualProcess& from);

  inline TDefineChallengeActualProcess& operator=(const TDefineChallengeActualProcess& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TDefineChallengeActualProcess& default_instance();

  void Swap(TDefineChallengeActualProcess* other);

  // implements Message ----------------------------------------------

  TDefineChallengeActualProcess* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TDefineChallengeActualProcess& from);
  void MergeFrom(const TDefineChallengeActualProcess& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .pb.TDefineChallengeExpectProcess ExpectProcess = 1;
  inline bool has_expectprocess() const;
  inline void clear_expectprocess();
  static const int kExpectProcessFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TDefineChallengeActualProcess</name>
  	<Function>
  		<name>expectprocess</name>
  		<replaceName>ExpectProcess</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_expectprocess</name>
  		<replaceName>ExpectProcess</replaceName>
  		<handler>descripter = pb_set_message_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_allocated_expectprocess</name>
  		<replaceName>ExpectProcess</replaceName>
  		<handler>descripter = pb_set_message_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_expectprocess</name>
  		<replaceName>ExpectProcess</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TDefineChallengeExpectProcess& expectprocess() const;
  inline ::pb::TDefineChallengeExpectProcess* mutable_expectprocess();
  inline ::pb::TDefineChallengeExpectProcess* release_expectprocess();
  inline void set_allocated_expectprocess(::pb::TDefineChallengeExpectProcess* expectprocess);

  // optional uint64 DoneTime = 2;
  inline bool has_donetime() const;
  inline void clear_donetime();
  static const int kDoneTimeFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TDefineChallengeActualProcess</name>
  	<Function>
  		<name>donetime</name>
  		<replaceName>DoneTime</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_donetime</name>
  		<replaceName>DoneTime</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_donetime</name>
  		<replaceName>DoneTime</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint64 donetime() const;
  inline void set_donetime(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:pb.TDefineChallengeActualProcess)
 private:
  inline void set_has_expectprocess();
  inline void clear_has_expectprocess();
  inline void set_has_donetime();
  inline void clear_has_donetime();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::pb::TDefineChallengeExpectProcess* expectprocess_;
  ::google::protobuf::uint64 donetime_;
  friend void  protobuf_AddDesc_net_2fDefineChallenge_2eproto();
  friend void protobuf_AssignDesc_net_2fDefineChallenge_2eproto();
  friend void protobuf_ShutdownFile_net_2fDefineChallenge_2eproto();

  void InitAsDefaultInstance();
  static TDefineChallengeActualProcess* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TDefineChallengeExpectBossProcess</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/DefineChallenge.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TDefineChallengeExpectBossProcess : public ::google::protobuf::Message {
 public:
  TDefineChallengeExpectBossProcess();
  virtual ~TDefineChallengeExpectBossProcess();

  TDefineChallengeExpectBossProcess(const TDefineChallengeExpectBossProcess& from);

  inline TDefineChallengeExpectBossProcess& operator=(const TDefineChallengeExpectBossProcess& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TDefineChallengeExpectBossProcess& default_instance();

  void Swap(TDefineChallengeExpectBossProcess* other);

  // implements Message ----------------------------------------------

  TDefineChallengeExpectBossProcess* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TDefineChallengeExpectBossProcess& from);
  void MergeFrom(const TDefineChallengeExpectBossProcess& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated uint32 BossId = 1;
  inline int bossid_size() const;
  inline void clear_bossid();
  static const int kBossIdFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TDefineChallengeExpectBossProcess</name>
  	<Function>
  		<name>bossid</name>
  		<replaceName>BossId</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_bossid</name>
  		<replaceName>BossId</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_bossid</name>
  		<replaceName>BossId</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_bossid</name>
  		<replaceName>BossId</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>bossid_size</name>
  		<replaceName>BossId</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 bossid(int index) const;
  inline void set_bossid(int index, ::google::protobuf::uint32 value);
  inline void add_bossid(::google::protobuf::uint32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      bossid() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_bossid();

  // optional uint64 BegTime = 2;
  inline bool has_begtime() const;
  inline void clear_begtime();
  static const int kBegTimeFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TDefineChallengeExpectBossProcess</name>
  	<Function>
  		<name>begtime</name>
  		<replaceName>BegTime</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_begtime</name>
  		<replaceName>BegTime</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_begtime</name>
  		<replaceName>BegTime</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint64 begtime() const;
  inline void set_begtime(::google::protobuf::uint64 value);

  // optional uint64 EndTime = 3;
  inline bool has_endtime() const;
  inline void clear_endtime();
  static const int kEndTimeFieldNumber = 3;
  /*FOR2LUA
  <Record>
  	<name>TDefineChallengeExpectBossProcess</name>
  	<Function>
  		<name>endtime</name>
  		<replaceName>EndTime</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_endtime</name>
  		<replaceName>EndTime</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_endtime</name>
  		<replaceName>EndTime</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint64 endtime() const;
  inline void set_endtime(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:pb.TDefineChallengeExpectBossProcess)
 private:
  inline void set_has_begtime();
  inline void clear_has_begtime();
  inline void set_has_endtime();
  inline void clear_has_endtime();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > bossid_;
  ::google::protobuf::uint64 begtime_;
  ::google::protobuf::uint64 endtime_;
  friend void  protobuf_AddDesc_net_2fDefineChallenge_2eproto();
  friend void protobuf_AssignDesc_net_2fDefineChallenge_2eproto();
  friend void protobuf_ShutdownFile_net_2fDefineChallenge_2eproto();

  void InitAsDefaultInstance();
  static TDefineChallengeExpectBossProcess* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TDefineChallengeBattlePosInfo</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/DefineChallenge.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TDefineChallengeBattlePosInfo : public ::google::protobuf::Message {
 public:
  TDefineChallengeBattlePosInfo();
  virtual ~TDefineChallengeBattlePosInfo();

  TDefineChallengeBattlePosInfo(const TDefineChallengeBattlePosInfo& from);

  inline TDefineChallengeBattlePosInfo& operator=(const TDefineChallengeBattlePosInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TDefineChallengeBattlePosInfo& default_instance();

  void Swap(TDefineChallengeBattlePosInfo* other);

  // implements Message ----------------------------------------------

  TDefineChallengeBattlePosInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TDefineChallengeBattlePosInfo& from);
  void MergeFrom(const TDefineChallengeBattlePosInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 Pos = 1;
  inline bool has_pos() const;
  inline void clear_pos();
  static const int kPosFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TDefineChallengeBattlePosInfo</name>
  	<Function>
  		<name>pos</name>
  		<replaceName>Pos</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_pos</name>
  		<replaceName>Pos</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_pos</name>
  		<replaceName>Pos</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 pos() const;
  inline void set_pos(::google::protobuf::uint32 value);

  // optional uint32 Hid = 2;
  inline bool has_hid() const;
  inline void clear_hid();
  static const int kHidFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TDefineChallengeBattlePosInfo</name>
  	<Function>
  		<name>hid</name>
  		<replaceName>Hid</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_hid</name>
  		<replaceName>Hid</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_hid</name>
  		<replaceName>Hid</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 hid() const;
  inline void set_hid(::google::protobuf::uint32 value);

  // optional uint32 Star = 3;
  inline bool has_star() const;
  inline void clear_star();
  static const int kStarFieldNumber = 3;
  /*FOR2LUA
  <Record>
  	<name>TDefineChallengeBattlePosInfo</name>
  	<Function>
  		<name>star</name>
  		<replaceName>Star</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_star</name>
  		<replaceName>Star</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_star</name>
  		<replaceName>Star</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 star() const;
  inline void set_star(::google::protobuf::uint32 value);

  // optional uint32 Aptitude = 4;
  inline bool has_aptitude() const;
  inline void clear_aptitude();
  static const int kAptitudeFieldNumber = 4;
  /*FOR2LUA
  <Record>
  	<name>TDefineChallengeBattlePosInfo</name>
  	<Function>
  		<name>aptitude</name>
  		<replaceName>Aptitude</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_aptitude</name>
  		<replaceName>Aptitude</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_aptitude</name>
  		<replaceName>Aptitude</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 aptitude() const;
  inline void set_aptitude(::google::protobuf::uint32 value);

  // optional uint32 Htid = 5;
  inline bool has_htid() const;
  inline void clear_htid();
  static const int kHtidFieldNumber = 5;
  /*FOR2LUA
  <Record>
  	<name>TDefineChallengeBattlePosInfo</name>
  	<Function>
  		<name>htid</name>
  		<replaceName>Htid</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_htid</name>
  		<replaceName>Htid</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_htid</name>
  		<replaceName>Htid</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 htid() const;
  inline void set_htid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:pb.TDefineChallengeBattlePosInfo)
 private:
  inline void set_has_pos();
  inline void clear_has_pos();
  inline void set_has_hid();
  inline void clear_has_hid();
  inline void set_has_star();
  inline void clear_has_star();
  inline void set_has_aptitude();
  inline void clear_has_aptitude();
  inline void set_has_htid();
  inline void clear_has_htid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 pos_;
  ::google::protobuf::uint32 hid_;
  ::google::protobuf::uint32 star_;
  ::google::protobuf::uint32 aptitude_;
  ::google::protobuf::uint32 htid_;
  friend void  protobuf_AddDesc_net_2fDefineChallenge_2eproto();
  friend void protobuf_AssignDesc_net_2fDefineChallenge_2eproto();
  friend void protobuf_ShutdownFile_net_2fDefineChallenge_2eproto();

  void InitAsDefaultInstance();
  static TDefineChallengeBattlePosInfo* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TDefineChallengeFmtInfo</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/DefineChallenge.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TDefineChallengeFmtInfo : public ::google::protobuf::Message {
 public:
  TDefineChallengeFmtInfo();
  virtual ~TDefineChallengeFmtInfo();

  TDefineChallengeFmtInfo(const TDefineChallengeFmtInfo& from);

  inline TDefineChallengeFmtInfo& operator=(const TDefineChallengeFmtInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TDefineChallengeFmtInfo& default_instance();

  void Swap(TDefineChallengeFmtInfo* other);

  // implements Message ----------------------------------------------

  TDefineChallengeFmtInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TDefineChallengeFmtInfo& from);
  void MergeFrom(const TDefineChallengeFmtInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 BossId = 1;
  inline bool has_bossid() const;
  inline void clear_bossid();
  static const int kBossIdFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TDefineChallengeFmtInfo</name>
  	<Function>
  		<name>bossid</name>
  		<replaceName>BossId</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_bossid</name>
  		<replaceName>BossId</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_bossid</name>
  		<replaceName>BossId</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 bossid() const;
  inline void set_bossid(::google::protobuf::uint32 value);

  // repeated .pb.TDefineChallengeBattlePosInfo ArrPos = 2;
  inline int arrpos_size() const;
  inline void clear_arrpos();
  static const int kArrPosFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TDefineChallengeFmtInfo</name>
  	<Function>
  		<name>arrpos</name>
  		<replaceName>ArrPos</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_arrpos</name>
  		<replaceName>ArrPos</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_arrpos</name>
  		<replaceName>ArrPos</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_arrpos</name>
  		<replaceName>ArrPos</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>arrpos_size</name>
  		<replaceName>ArrPos</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TDefineChallengeBattlePosInfo& arrpos(int index) const;
  inline ::pb::TDefineChallengeBattlePosInfo* mutable_arrpos(int index);
  inline ::pb::TDefineChallengeBattlePosInfo* add_arrpos();
  inline const ::google::protobuf::RepeatedPtrField< ::pb::TDefineChallengeBattlePosInfo >&
      arrpos() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb::TDefineChallengeBattlePosInfo >*
      mutable_arrpos();

  // @@protoc_insertion_point(class_scope:pb.TDefineChallengeFmtInfo)
 private:
  inline void set_has_bossid();
  inline void clear_has_bossid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::pb::TDefineChallengeBattlePosInfo > arrpos_;
  ::google::protobuf::uint32 bossid_;
  friend void  protobuf_AddDesc_net_2fDefineChallenge_2eproto();
  friend void protobuf_AssignDesc_net_2fDefineChallenge_2eproto();
  friend void protobuf_ShutdownFile_net_2fDefineChallenge_2eproto();

  void InitAsDefaultInstance();
  static TDefineChallengeFmtInfo* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TDefineChallengeRankInfo</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/DefineChallenge.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TDefineChallengeRankInfo : public ::google::protobuf::Message {
 public:
  TDefineChallengeRankInfo();
  virtual ~TDefineChallengeRankInfo();

  TDefineChallengeRankInfo(const TDefineChallengeRankInfo& from);

  inline TDefineChallengeRankInfo& operator=(const TDefineChallengeRankInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TDefineChallengeRankInfo& default_instance();

  void Swap(TDefineChallengeRankInfo* other);

  // implements Message ----------------------------------------------

  TDefineChallengeRankInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TDefineChallengeRankInfo& from);
  void MergeFrom(const TDefineChallengeRankInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 Rank = 1;
  inline bool has_rank() const;
  inline void clear_rank();
  static const int kRankFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TDefineChallengeRankInfo</name>
  	<Function>
  		<name>rank</name>
  		<replaceName>Rank</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_rank</name>
  		<replaceName>Rank</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_rank</name>
  		<replaceName>Rank</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 rank() const;
  inline void set_rank(::google::protobuf::uint32 value);

  // optional uint32 Score = 2;
  inline bool has_score() const;
  inline void clear_score();
  static const int kScoreFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TDefineChallengeRankInfo</name>
  	<Function>
  		<name>score</name>
  		<replaceName>Score</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_score</name>
  		<replaceName>Score</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_score</name>
  		<replaceName>Score</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 score() const;
  inline void set_score(::google::protobuf::uint32 value);

  // optional .pb.TUserSimpleInfo SimpleInfo = 3;
  inline bool has_simpleinfo() const;
  inline void clear_simpleinfo();
  static const int kSimpleInfoFieldNumber = 3;
  /*FOR2LUA
  <Record>
  	<name>TDefineChallengeRankInfo</name>
  	<Function>
  		<name>simpleinfo</name>
  		<replaceName>SimpleInfo</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_simpleinfo</name>
  		<replaceName>SimpleInfo</replaceName>
  		<handler>descripter = pb_set_message_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_allocated_simpleinfo</name>
  		<replaceName>SimpleInfo</replaceName>
  		<handler>descripter = pb_set_message_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_simpleinfo</name>
  		<replaceName>SimpleInfo</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TUserSimpleInfo& simpleinfo() const;
  inline ::pb::TUserSimpleInfo* mutable_simpleinfo();
  inline ::pb::TUserSimpleInfo* release_simpleinfo();
  inline void set_allocated_simpleinfo(::pb::TUserSimpleInfo* simpleinfo);

  // optional uint64 RecordTime = 4;
  inline bool has_recordtime() const;
  inline void clear_recordtime();
  static const int kRecordTimeFieldNumber = 4;
  /*FOR2LUA
  <Record>
  	<name>TDefineChallengeRankInfo</name>
  	<Function>
  		<name>recordtime</name>
  		<replaceName>RecordTime</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_recordtime</name>
  		<replaceName>RecordTime</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_recordtime</name>
  		<replaceName>RecordTime</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint64 recordtime() const;
  inline void set_recordtime(::google::protobuf::uint64 value);

  // optional uint64 Uid = 5;
  inline bool has_uid() const;
  inline void clear_uid();
  static const int kUidFieldNumber = 5;
  /*FOR2LUA
  <Record>
  	<name>TDefineChallengeRankInfo</name>
  	<Function>
  		<name>uid</name>
  		<replaceName>Uid</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_uid</name>
  		<replaceName>Uid</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_uid</name>
  		<replaceName>Uid</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint64 uid() const;
  inline void set_uid(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:pb.TDefineChallengeRankInfo)
 private:
  inline void set_has_rank();
  inline void clear_has_rank();
  inline void set_has_score();
  inline void clear_has_score();
  inline void set_has_simpleinfo();
  inline void clear_has_simpleinfo();
  inline void set_has_recordtime();
  inline void clear_has_recordtime();
  inline void set_has_uid();
  inline void clear_has_uid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 rank_;
  ::google::protobuf::uint32 score_;
  ::pb::TUserSimpleInfo* simpleinfo_;
  ::google::protobuf::uint64 recordtime_;
  ::google::protobuf::uint64 uid_;
  friend void  protobuf_AddDesc_net_2fDefineChallenge_2eproto();
  friend void protobuf_AssignDesc_net_2fDefineChallenge_2eproto();
  friend void protobuf_ShutdownFile_net_2fDefineChallenge_2eproto();

  void InitAsDefaultInstance();
  static TDefineChallengeRankInfo* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TDefineChallengeBossInfo</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/DefineChallenge.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TDefineChallengeBossInfo : public ::google::protobuf::Message {
 public:
  TDefineChallengeBossInfo();
  virtual ~TDefineChallengeBossInfo();

  TDefineChallengeBossInfo(const TDefineChallengeBossInfo& from);

  inline TDefineChallengeBossInfo& operator=(const TDefineChallengeBossInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TDefineChallengeBossInfo& default_instance();

  void Swap(TDefineChallengeBossInfo* other);

  // implements Message ----------------------------------------------

  TDefineChallengeBossInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TDefineChallengeBossInfo& from);
  void MergeFrom(const TDefineChallengeBossInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 BossId = 1;
  inline bool has_bossid() const;
  inline void clear_bossid();
  static const int kBossIdFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TDefineChallengeBossInfo</name>
  	<Function>
  		<name>bossid</name>
  		<replaceName>BossId</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_bossid</name>
  		<replaceName>BossId</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_bossid</name>
  		<replaceName>BossId</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 bossid() const;
  inline void set_bossid(::google::protobuf::uint32 value);

  // repeated uint32 DebuffArr = 2;
  inline int debuffarr_size() const;
  inline void clear_debuffarr();
  static const int kDebuffArrFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TDefineChallengeBossInfo</name>
  	<Function>
  		<name>debuffarr</name>
  		<replaceName>DebuffArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_debuffarr</name>
  		<replaceName>DebuffArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_debuffarr</name>
  		<replaceName>DebuffArr</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_debuffarr</name>
  		<replaceName>DebuffArr</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>debuffarr_size</name>
  		<replaceName>DebuffArr</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 debuffarr(int index) const;
  inline void set_debuffarr(int index, ::google::protobuf::uint32 value);
  inline void add_debuffarr(::google::protobuf::uint32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      debuffarr() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_debuffarr();

  // repeated uint32 BanHero = 3;
  inline int banhero_size() const;
  inline void clear_banhero();
  static const int kBanHeroFieldNumber = 3;
  /*FOR2LUA
  <Record>
  	<name>TDefineChallengeBossInfo</name>
  	<Function>
  		<name>banhero</name>
  		<replaceName>BanHero</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_banhero</name>
  		<replaceName>BanHero</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_banhero</name>
  		<replaceName>BanHero</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_banhero</name>
  		<replaceName>BanHero</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>banhero_size</name>
  		<replaceName>BanHero</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 banhero(int index) const;
  inline void set_banhero(int index, ::google::protobuf::uint32 value);
  inline void add_banhero(::google::protobuf::uint32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      banhero() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_banhero();

  // repeated uint32 DebuffArrUnlocked = 4;
  inline int debuffarrunlocked_size() const;
  inline void clear_debuffarrunlocked();
  static const int kDebuffArrUnlockedFieldNumber = 4;
  /*FOR2LUA
  <Record>
  	<name>TDefineChallengeBossInfo</name>
  	<Function>
  		<name>debuffarrunlocked</name>
  		<replaceName>DebuffArrUnlocked</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_debuffarrunlocked</name>
  		<replaceName>DebuffArrUnlocked</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_debuffarrunlocked</name>
  		<replaceName>DebuffArrUnlocked</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_debuffarrunlocked</name>
  		<replaceName>DebuffArrUnlocked</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>debuffarrunlocked_size</name>
  		<replaceName>DebuffArrUnlocked</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 debuffarrunlocked(int index) const;
  inline void set_debuffarrunlocked(int index, ::google::protobuf::uint32 value);
  inline void add_debuffarrunlocked(::google::protobuf::uint32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      debuffarrunlocked() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_debuffarrunlocked();

  // optional uint64 FightForce = 5;
  inline bool has_fightforce() const;
  inline void clear_fightforce();
  static const int kFightForceFieldNumber = 5;
  /*FOR2LUA
  <Record>
  	<name>TDefineChallengeBossInfo</name>
  	<Function>
  		<name>fightforce</name>
  		<replaceName>FightForce</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_fightforce</name>
  		<replaceName>FightForce</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_fightforce</name>
  		<replaceName>FightForce</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint64 fightforce() const;
  inline void set_fightforce(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:pb.TDefineChallengeBossInfo)
 private:
  inline void set_has_bossid();
  inline void clear_has_bossid();
  inline void set_has_fightforce();
  inline void clear_has_fightforce();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > debuffarr_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > banhero_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > debuffarrunlocked_;
  ::google::protobuf::uint64 fightforce_;
  ::google::protobuf::uint32 bossid_;
  friend void  protobuf_AddDesc_net_2fDefineChallenge_2eproto();
  friend void protobuf_AssignDesc_net_2fDefineChallenge_2eproto();
  friend void protobuf_ShutdownFile_net_2fDefineChallenge_2eproto();

  void InitAsDefaultInstance();
  static TDefineChallengeBossInfo* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TDefineChallengeTaskInfo</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/DefineChallenge.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TDefineChallengeTaskInfo : public ::google::protobuf::Message {
 public:
  TDefineChallengeTaskInfo();
  virtual ~TDefineChallengeTaskInfo();

  TDefineChallengeTaskInfo(const TDefineChallengeTaskInfo& from);

  inline TDefineChallengeTaskInfo& operator=(const TDefineChallengeTaskInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TDefineChallengeTaskInfo& default_instance();

  void Swap(TDefineChallengeTaskInfo* other);

  // implements Message ----------------------------------------------

  TDefineChallengeTaskInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TDefineChallengeTaskInfo& from);
  void MergeFrom(const TDefineChallengeTaskInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 TaskId = 1;
  inline bool has_taskid() const;
  inline void clear_taskid();
  static const int kTaskIdFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TDefineChallengeTaskInfo</name>
  	<Function>
  		<name>taskid</name>
  		<replaceName>TaskId</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_taskid</name>
  		<replaceName>TaskId</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_taskid</name>
  		<replaceName>TaskId</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 taskid() const;
  inline void set_taskid(::google::protobuf::uint32 value);

  // optional uint32 Num = 2;
  inline bool has_num() const;
  inline void clear_num();
  static const int kNumFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TDefineChallengeTaskInfo</name>
  	<Function>
  		<name>num</name>
  		<replaceName>Num</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_num</name>
  		<replaceName>Num</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_num</name>
  		<replaceName>Num</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 num() const;
  inline void set_num(::google::protobuf::uint32 value);

  // optional uint64 RewardTime = 3;
  inline bool has_rewardtime() const;
  inline void clear_rewardtime();
  static const int kRewardTimeFieldNumber = 3;
  /*FOR2LUA
  <Record>
  	<name>TDefineChallengeTaskInfo</name>
  	<Function>
  		<name>rewardtime</name>
  		<replaceName>RewardTime</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_rewardtime</name>
  		<replaceName>RewardTime</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_rewardtime</name>
  		<replaceName>RewardTime</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint64 rewardtime() const;
  inline void set_rewardtime(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:pb.TDefineChallengeTaskInfo)
 private:
  inline void set_has_taskid();
  inline void clear_has_taskid();
  inline void set_has_num();
  inline void clear_has_num();
  inline void set_has_rewardtime();
  inline void clear_has_rewardtime();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 taskid_;
  ::google::protobuf::uint32 num_;
  ::google::protobuf::uint64 rewardtime_;
  friend void  protobuf_AddDesc_net_2fDefineChallenge_2eproto();
  friend void protobuf_AssignDesc_net_2fDefineChallenge_2eproto();
  friend void protobuf_ShutdownFile_net_2fDefineChallenge_2eproto();

  void InitAsDefaultInstance();
  static TDefineChallengeTaskInfo* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TDefineChallengeGiftInfo</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/DefineChallenge.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TDefineChallengeGiftInfo : public ::google::protobuf::Message {
 public:
  TDefineChallengeGiftInfo();
  virtual ~TDefineChallengeGiftInfo();

  TDefineChallengeGiftInfo(const TDefineChallengeGiftInfo& from);

  inline TDefineChallengeGiftInfo& operator=(const TDefineChallengeGiftInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TDefineChallengeGiftInfo& default_instance();

  void Swap(TDefineChallengeGiftInfo* other);

  // implements Message ----------------------------------------------

  TDefineChallengeGiftInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TDefineChallengeGiftInfo& from);
  void MergeFrom(const TDefineChallengeGiftInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 Id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TDefineChallengeGiftInfo</name>
  	<Function>
  		<name>id</name>
  		<replaceName>Id</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_id</name>
  		<replaceName>Id</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_id</name>
  		<replaceName>Id</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 id() const;
  inline void set_id(::google::protobuf::uint32 value);

  // optional uint32 BuyNum = 2;
  inline bool has_buynum() const;
  inline void clear_buynum();
  static const int kBuyNumFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TDefineChallengeGiftInfo</name>
  	<Function>
  		<name>buynum</name>
  		<replaceName>BuyNum</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_buynum</name>
  		<replaceName>BuyNum</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_buynum</name>
  		<replaceName>BuyNum</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 buynum() const;
  inline void set_buynum(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:pb.TDefineChallengeGiftInfo)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_buynum();
  inline void clear_has_buynum();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 id_;
  ::google::protobuf::uint32 buynum_;
  friend void  protobuf_AddDesc_net_2fDefineChallenge_2eproto();
  friend void protobuf_AssignDesc_net_2fDefineChallenge_2eproto();
  friend void protobuf_ShutdownFile_net_2fDefineChallenge_2eproto();

  void InitAsDefaultInstance();
  static TDefineChallengeGiftInfo* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TDefineChallengeOtherRankInfo</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/DefineChallenge.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TDefineChallengeOtherRankInfo : public ::google::protobuf::Message {
 public:
  TDefineChallengeOtherRankInfo();
  virtual ~TDefineChallengeOtherRankInfo();

  TDefineChallengeOtherRankInfo(const TDefineChallengeOtherRankInfo& from);

  inline TDefineChallengeOtherRankInfo& operator=(const TDefineChallengeOtherRankInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TDefineChallengeOtherRankInfo& default_instance();

  void Swap(TDefineChallengeOtherRankInfo* other);

  // implements Message ----------------------------------------------

  TDefineChallengeOtherRankInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TDefineChallengeOtherRankInfo& from);
  void MergeFrom(const TDefineChallengeOtherRankInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .pb.TDefineChallengeBossInfo BossInfo = 1;
  inline bool has_bossinfo() const;
  inline void clear_bossinfo();
  static const int kBossInfoFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TDefineChallengeOtherRankInfo</name>
  	<Function>
  		<name>bossinfo</name>
  		<replaceName>BossInfo</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_bossinfo</name>
  		<replaceName>BossInfo</replaceName>
  		<handler>descripter = pb_set_message_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_allocated_bossinfo</name>
  		<replaceName>BossInfo</replaceName>
  		<handler>descripter = pb_set_message_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_bossinfo</name>
  		<replaceName>BossInfo</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TDefineChallengeBossInfo& bossinfo() const;
  inline ::pb::TDefineChallengeBossInfo* mutable_bossinfo();
  inline ::pb::TDefineChallengeBossInfo* release_bossinfo();
  inline void set_allocated_bossinfo(::pb::TDefineChallengeBossInfo* bossinfo);

  // optional uint32 score = 2;
  inline bool has_score() const;
  inline void clear_score();
  static const int kScoreFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TDefineChallengeOtherRankInfo</name>
  	<Function>
  		<name>score</name>
  		<replaceName>score</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_score</name>
  		<replaceName>score</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_score</name>
  		<replaceName>score</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 score() const;
  inline void set_score(::google::protobuf::uint32 value);

  // repeated .pb.TDefineChallengeBattlePosInfo Fmt = 3;
  inline int fmt_size() const;
  inline void clear_fmt();
  static const int kFmtFieldNumber = 3;
  /*FOR2LUA
  <Record>
  	<name>TDefineChallengeOtherRankInfo</name>
  	<Function>
  		<name>fmt</name>
  		<replaceName>Fmt</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_fmt</name>
  		<replaceName>Fmt</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_fmt</name>
  		<replaceName>Fmt</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_fmt</name>
  		<replaceName>Fmt</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>fmt_size</name>
  		<replaceName>Fmt</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TDefineChallengeBattlePosInfo& fmt(int index) const;
  inline ::pb::TDefineChallengeBattlePosInfo* mutable_fmt(int index);
  inline ::pb::TDefineChallengeBattlePosInfo* add_fmt();
  inline const ::google::protobuf::RepeatedPtrField< ::pb::TDefineChallengeBattlePosInfo >&
      fmt() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb::TDefineChallengeBattlePosInfo >*
      mutable_fmt();

  // @@protoc_insertion_point(class_scope:pb.TDefineChallengeOtherRankInfo)
 private:
  inline void set_has_bossinfo();
  inline void clear_has_bossinfo();
  inline void set_has_score();
  inline void clear_has_score();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::pb::TDefineChallengeBossInfo* bossinfo_;
  ::google::protobuf::RepeatedPtrField< ::pb::TDefineChallengeBattlePosInfo > fmt_;
  ::google::protobuf::uint32 score_;
  friend void  protobuf_AddDesc_net_2fDefineChallenge_2eproto();
  friend void protobuf_AssignDesc_net_2fDefineChallenge_2eproto();
  friend void protobuf_ShutdownFile_net_2fDefineChallenge_2eproto();

  void InitAsDefaultInstance();
  static TDefineChallengeOtherRankInfo* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TDefineChallengeGetTimeConfRsp</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/DefineChallenge.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TDefineChallengeGetTimeConfRsp : public ::google::protobuf::Message {
 public:
  TDefineChallengeGetTimeConfRsp();
  virtual ~TDefineChallengeGetTimeConfRsp();

  TDefineChallengeGetTimeConfRsp(const TDefineChallengeGetTimeConfRsp& from);

  inline TDefineChallengeGetTimeConfRsp& operator=(const TDefineChallengeGetTimeConfRsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TDefineChallengeGetTimeConfRsp& default_instance();

  void Swap(TDefineChallengeGetTimeConfRsp* other);

  // implements Message ----------------------------------------------

  TDefineChallengeGetTimeConfRsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TDefineChallengeGetTimeConfRsp& from);
  void MergeFrom(const TDefineChallengeGetTimeConfRsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .pb.TDefineChallengeExpectProcess ArrExpectProcess = 1;
  inline int arrexpectprocess_size() const;
  inline void clear_arrexpectprocess();
  static const int kArrExpectProcessFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TDefineChallengeGetTimeConfRsp</name>
  	<Function>
  		<name>arrexpectprocess</name>
  		<replaceName>ArrExpectProcess</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_arrexpectprocess</name>
  		<replaceName>ArrExpectProcess</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_arrexpectprocess</name>
  		<replaceName>ArrExpectProcess</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_arrexpectprocess</name>
  		<replaceName>ArrExpectProcess</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>arrexpectprocess_size</name>
  		<replaceName>ArrExpectProcess</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TDefineChallengeExpectProcess& arrexpectprocess(int index) const;
  inline ::pb::TDefineChallengeExpectProcess* mutable_arrexpectprocess(int index);
  inline ::pb::TDefineChallengeExpectProcess* add_arrexpectprocess();
  inline const ::google::protobuf::RepeatedPtrField< ::pb::TDefineChallengeExpectProcess >&
      arrexpectprocess() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb::TDefineChallengeExpectProcess >*
      mutable_arrexpectprocess();

  // optional bool FuncOpen = 2;
  inline bool has_funcopen() const;
  inline void clear_funcopen();
  static const int kFuncOpenFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TDefineChallengeGetTimeConfRsp</name>
  	<Function>
  		<name>funcopen</name>
  		<replaceName>FuncOpen</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_funcopen</name>
  		<replaceName>FuncOpen</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_funcopen</name>
  		<replaceName>FuncOpen</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline bool funcopen() const;
  inline void set_funcopen(bool value);

  // optional .pb.TDefineChallengeActualProcess ActualProcess = 3;
  inline bool has_actualprocess() const;
  inline void clear_actualprocess();
  static const int kActualProcessFieldNumber = 3;
  /*FOR2LUA
  <Record>
  	<name>TDefineChallengeGetTimeConfRsp</name>
  	<Function>
  		<name>actualprocess</name>
  		<replaceName>ActualProcess</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_actualprocess</name>
  		<replaceName>ActualProcess</replaceName>
  		<handler>descripter = pb_set_message_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_allocated_actualprocess</name>
  		<replaceName>ActualProcess</replaceName>
  		<handler>descripter = pb_set_message_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_actualprocess</name>
  		<replaceName>ActualProcess</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TDefineChallengeActualProcess& actualprocess() const;
  inline ::pb::TDefineChallengeActualProcess* mutable_actualprocess();
  inline ::pb::TDefineChallengeActualProcess* release_actualprocess();
  inline void set_allocated_actualprocess(::pb::TDefineChallengeActualProcess* actualprocess);

  // optional .pb.TDefineChallengeExpectBossProcess ArrBossProcess = 4;
  inline bool has_arrbossprocess() const;
  inline void clear_arrbossprocess();
  static const int kArrBossProcessFieldNumber = 4;
  /*FOR2LUA
  <Record>
  	<name>TDefineChallengeGetTimeConfRsp</name>
  	<Function>
  		<name>arrbossprocess</name>
  		<replaceName>ArrBossProcess</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_arrbossprocess</name>
  		<replaceName>ArrBossProcess</replaceName>
  		<handler>descripter = pb_set_message_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_allocated_arrbossprocess</name>
  		<replaceName>ArrBossProcess</replaceName>
  		<handler>descripter = pb_set_message_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_arrbossprocess</name>
  		<replaceName>ArrBossProcess</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TDefineChallengeExpectBossProcess& arrbossprocess() const;
  inline ::pb::TDefineChallengeExpectBossProcess* mutable_arrbossprocess();
  inline ::pb::TDefineChallengeExpectBossProcess* release_arrbossprocess();
  inline void set_allocated_arrbossprocess(::pb::TDefineChallengeExpectBossProcess* arrbossprocess);

  // optional .pb.TDefineChallengeExpectBossProcess ActualBossProcess = 5;
  inline bool has_actualbossprocess() const;
  inline void clear_actualbossprocess();
  static const int kActualBossProcessFieldNumber = 5;
  /*FOR2LUA
  <Record>
  	<name>TDefineChallengeGetTimeConfRsp</name>
  	<Function>
  		<name>actualbossprocess</name>
  		<replaceName>ActualBossProcess</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_actualbossprocess</name>
  		<replaceName>ActualBossProcess</replaceName>
  		<handler>descripter = pb_set_message_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_allocated_actualbossprocess</name>
  		<replaceName>ActualBossProcess</replaceName>
  		<handler>descripter = pb_set_message_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_actualbossprocess</name>
  		<replaceName>ActualBossProcess</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TDefineChallengeExpectBossProcess& actualbossprocess() const;
  inline ::pb::TDefineChallengeExpectBossProcess* mutable_actualbossprocess();
  inline ::pb::TDefineChallengeExpectBossProcess* release_actualbossprocess();
  inline void set_allocated_actualbossprocess(::pb::TDefineChallengeExpectBossProcess* actualbossprocess);

  // @@protoc_insertion_point(class_scope:pb.TDefineChallengeGetTimeConfRsp)
 private:
  inline void set_has_funcopen();
  inline void clear_has_funcopen();
  inline void set_has_actualprocess();
  inline void clear_has_actualprocess();
  inline void set_has_arrbossprocess();
  inline void clear_has_arrbossprocess();
  inline void set_has_actualbossprocess();
  inline void clear_has_actualbossprocess();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::pb::TDefineChallengeExpectProcess > arrexpectprocess_;
  ::pb::TDefineChallengeActualProcess* actualprocess_;
  ::pb::TDefineChallengeExpectBossProcess* arrbossprocess_;
  ::pb::TDefineChallengeExpectBossProcess* actualbossprocess_;
  bool funcopen_;
  friend void  protobuf_AddDesc_net_2fDefineChallenge_2eproto();
  friend void protobuf_AssignDesc_net_2fDefineChallenge_2eproto();
  friend void protobuf_ShutdownFile_net_2fDefineChallenge_2eproto();

  void InitAsDefaultInstance();
  static TDefineChallengeGetTimeConfRsp* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TDefineChallengeGetBaseInfoRsp</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/DefineChallenge.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TDefineChallengeGetBaseInfoRsp : public ::google::protobuf::Message {
 public:
  TDefineChallengeGetBaseInfoRsp();
  virtual ~TDefineChallengeGetBaseInfoRsp();

  TDefineChallengeGetBaseInfoRsp(const TDefineChallengeGetBaseInfoRsp& from);

  inline TDefineChallengeGetBaseInfoRsp& operator=(const TDefineChallengeGetBaseInfoRsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TDefineChallengeGetBaseInfoRsp& default_instance();

  void Swap(TDefineChallengeGetBaseInfoRsp* other);

  // implements Message ----------------------------------------------

  TDefineChallengeGetBaseInfoRsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TDefineChallengeGetBaseInfoRsp& from);
  void MergeFrom(const TDefineChallengeGetBaseInfoRsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 WarZoneId = 1;
  inline bool has_warzoneid() const;
  inline void clear_warzoneid();
  static const int kWarZoneIdFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TDefineChallengeGetBaseInfoRsp</name>
  	<Function>
  		<name>warzoneid</name>
  		<replaceName>WarZoneId</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_warzoneid</name>
  		<replaceName>WarZoneId</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_warzoneid</name>
  		<replaceName>WarZoneId</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 warzoneid() const;
  inline void set_warzoneid(::google::protobuf::uint32 value);

  // optional uint32 GroupId = 2;
  inline bool has_groupid() const;
  inline void clear_groupid();
  static const int kGroupIdFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TDefineChallengeGetBaseInfoRsp</name>
  	<Function>
  		<name>groupid</name>
  		<replaceName>GroupId</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_groupid</name>
  		<replaceName>GroupId</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_groupid</name>
  		<replaceName>GroupId</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 groupid() const;
  inline void set_groupid(::google::protobuf::uint32 value);

  // optional string SceneId = 3;
  inline bool has_sceneid() const;
  inline void clear_sceneid();
  static const int kSceneIdFieldNumber = 3;
  /*FOR2LUA
  <Record>
  	<name>TDefineChallengeGetBaseInfoRsp</name>
  	<Function>
  		<name>sceneid</name>
  		<replaceName>SceneId</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_sceneid</name>
  		<replaceName>SceneId</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_sceneid</name>
  		<replaceName>SceneId</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::std::string& sceneid() const;
  inline void set_sceneid(const ::std::string& value);
  inline void set_sceneid(const char* value);
  inline void set_sceneid(const char* value, size_t size);
  inline ::std::string* mutable_sceneid();
  inline ::std::string* release_sceneid();
  inline void set_allocated_sceneid(::std::string* sceneid);

  // optional uint64 SignTime = 4;
  inline bool has_signtime() const;
  inline void clear_signtime();
  static const int kSignTimeFieldNumber = 4;
  /*FOR2LUA
  <Record>
  	<name>TDefineChallengeGetBaseInfoRsp</name>
  	<Function>
  		<name>signtime</name>
  		<replaceName>SignTime</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_signtime</name>
  		<replaceName>SignTime</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_signtime</name>
  		<replaceName>SignTime</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint64 signtime() const;
  inline void set_signtime(::google::protobuf::uint64 value);

  // optional uint64 MaxFightForce = 5;
  inline bool has_maxfightforce() const;
  inline void clear_maxfightforce();
  static const int kMaxFightForceFieldNumber = 5;
  /*FOR2LUA
  <Record>
  	<name>TDefineChallengeGetBaseInfoRsp</name>
  	<Function>
  		<name>maxfightforce</name>
  		<replaceName>MaxFightForce</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_maxfightforce</name>
  		<replaceName>MaxFightForce</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_maxfightforce</name>
  		<replaceName>MaxFightForce</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint64 maxfightforce() const;
  inline void set_maxfightforce(::google::protobuf::uint64 value);

  // optional uint32 GroupRank = 6;
  inline bool has_grouprank() const;
  inline void clear_grouprank();
  static const int kGroupRankFieldNumber = 6;
  /*FOR2LUA
  <Record>
  	<name>TDefineChallengeGetBaseInfoRsp</name>
  	<Function>
  		<name>grouprank</name>
  		<replaceName>GroupRank</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_grouprank</name>
  		<replaceName>GroupRank</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_grouprank</name>
  		<replaceName>GroupRank</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 grouprank() const;
  inline void set_grouprank(::google::protobuf::uint32 value);

  // optional uint32 WarZoneRank = 7;
  inline bool has_warzonerank() const;
  inline void clear_warzonerank();
  static const int kWarZoneRankFieldNumber = 7;
  /*FOR2LUA
  <Record>
  	<name>TDefineChallengeGetBaseInfoRsp</name>
  	<Function>
  		<name>warzonerank</name>
  		<replaceName>WarZoneRank</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_warzonerank</name>
  		<replaceName>WarZoneRank</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_warzonerank</name>
  		<replaceName>WarZoneRank</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 warzonerank() const;
  inline void set_warzonerank(::google::protobuf::uint32 value);

  // optional .pb.TDefineChallengeBossInfo BossInfo = 8;
  inline bool has_bossinfo() const;
  inline void clear_bossinfo();
  static const int kBossInfoFieldNumber = 8;
  /*FOR2LUA
  <Record>
  	<name>TDefineChallengeGetBaseInfoRsp</name>
  	<Function>
  		<name>bossinfo</name>
  		<replaceName>BossInfo</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_bossinfo</name>
  		<replaceName>BossInfo</replaceName>
  		<handler>descripter = pb_set_message_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_allocated_bossinfo</name>
  		<replaceName>BossInfo</replaceName>
  		<handler>descripter = pb_set_message_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_bossinfo</name>
  		<replaceName>BossInfo</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TDefineChallengeBossInfo& bossinfo() const;
  inline ::pb::TDefineChallengeBossInfo* mutable_bossinfo();
  inline ::pb::TDefineChallengeBossInfo* release_bossinfo();
  inline void set_allocated_bossinfo(::pb::TDefineChallengeBossInfo* bossinfo);

  // optional uint32 Score = 9;
  inline bool has_score() const;
  inline void clear_score();
  static const int kScoreFieldNumber = 9;
  /*FOR2LUA
  <Record>
  	<name>TDefineChallengeGetBaseInfoRsp</name>
  	<Function>
  		<name>score</name>
  		<replaceName>Score</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_score</name>
  		<replaceName>Score</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_score</name>
  		<replaceName>Score</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 score() const;
  inline void set_score(::google::protobuf::uint32 value);

  // optional uint64 RewardTime = 10;
  inline bool has_rewardtime() const;
  inline void clear_rewardtime();
  static const int kRewardTimeFieldNumber = 10;
  /*FOR2LUA
  <Record>
  	<name>TDefineChallengeGetBaseInfoRsp</name>
  	<Function>
  		<name>rewardtime</name>
  		<replaceName>RewardTime</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_rewardtime</name>
  		<replaceName>RewardTime</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_rewardtime</name>
  		<replaceName>RewardTime</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint64 rewardtime() const;
  inline void set_rewardtime(::google::protobuf::uint64 value);

  // optional uint32 IsViewed = 11;
  inline bool has_isviewed() const;
  inline void clear_isviewed();
  static const int kIsViewedFieldNumber = 11;
  /*FOR2LUA
  <Record>
  	<name>TDefineChallengeGetBaseInfoRsp</name>
  	<Function>
  		<name>isviewed</name>
  		<replaceName>IsViewed</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_isviewed</name>
  		<replaceName>IsViewed</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_isviewed</name>
  		<replaceName>IsViewed</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 isviewed() const;
  inline void set_isviewed(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:pb.TDefineChallengeGetBaseInfoRsp)
 private:
  inline void set_has_warzoneid();
  inline void clear_has_warzoneid();
  inline void set_has_groupid();
  inline void clear_has_groupid();
  inline void set_has_sceneid();
  inline void clear_has_sceneid();
  inline void set_has_signtime();
  inline void clear_has_signtime();
  inline void set_has_maxfightforce();
  inline void clear_has_maxfightforce();
  inline void set_has_grouprank();
  inline void clear_has_grouprank();
  inline void set_has_warzonerank();
  inline void clear_has_warzonerank();
  inline void set_has_bossinfo();
  inline void clear_has_bossinfo();
  inline void set_has_score();
  inline void clear_has_score();
  inline void set_has_rewardtime();
  inline void clear_has_rewardtime();
  inline void set_has_isviewed();
  inline void clear_has_isviewed();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 warzoneid_;
  ::google::protobuf::uint32 groupid_;
  ::std::string* sceneid_;
  ::google::protobuf::uint64 signtime_;
  ::google::protobuf::uint64 maxfightforce_;
  ::google::protobuf::uint32 grouprank_;
  ::google::protobuf::uint32 warzonerank_;
  ::pb::TDefineChallengeBossInfo* bossinfo_;
  ::google::protobuf::uint64 rewardtime_;
  ::google::protobuf::uint32 score_;
  ::google::protobuf::uint32 isviewed_;
  friend void  protobuf_AddDesc_net_2fDefineChallenge_2eproto();
  friend void protobuf_AssignDesc_net_2fDefineChallenge_2eproto();
  friend void protobuf_ShutdownFile_net_2fDefineChallenge_2eproto();

  void InitAsDefaultInstance();
  static TDefineChallengeGetBaseInfoRsp* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TDefineChallengeGetBattleArgsReq</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/DefineChallenge.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TDefineChallengeGetBattleArgsReq : public ::google::protobuf::Message {
 public:
  TDefineChallengeGetBattleArgsReq();
  virtual ~TDefineChallengeGetBattleArgsReq();

  TDefineChallengeGetBattleArgsReq(const TDefineChallengeGetBattleArgsReq& from);

  inline TDefineChallengeGetBattleArgsReq& operator=(const TDefineChallengeGetBattleArgsReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TDefineChallengeGetBattleArgsReq& default_instance();

  void Swap(TDefineChallengeGetBattleArgsReq* other);

  // implements Message ----------------------------------------------

  TDefineChallengeGetBattleArgsReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TDefineChallengeGetBattleArgsReq& from);
  void MergeFrom(const TDefineChallengeGetBattleArgsReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .pb.TDefineChallengeBossInfo BossInfo = 1;
  inline bool has_bossinfo() const;
  inline void clear_bossinfo();
  static const int kBossInfoFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TDefineChallengeGetBattleArgsReq</name>
  	<Function>
  		<name>bossinfo</name>
  		<replaceName>BossInfo</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_bossinfo</name>
  		<replaceName>BossInfo</replaceName>
  		<handler>descripter = pb_set_message_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_allocated_bossinfo</name>
  		<replaceName>BossInfo</replaceName>
  		<handler>descripter = pb_set_message_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_bossinfo</name>
  		<replaceName>BossInfo</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TDefineChallengeBossInfo& bossinfo() const;
  inline ::pb::TDefineChallengeBossInfo* mutable_bossinfo();
  inline ::pb::TDefineChallengeBossInfo* release_bossinfo();
  inline void set_allocated_bossinfo(::pb::TDefineChallengeBossInfo* bossinfo);

  // optional .pb.TBattleCheckParam BattleCheckParam = 2;
  inline bool has_battlecheckparam() const;
  inline void clear_battlecheckparam();
  static const int kBattleCheckParamFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TDefineChallengeGetBattleArgsReq</name>
  	<Function>
  		<name>battlecheckparam</name>
  		<replaceName>BattleCheckParam</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_battlecheckparam</name>
  		<replaceName>BattleCheckParam</replaceName>
  		<handler>descripter = pb_set_message_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_allocated_battlecheckparam</name>
  		<replaceName>BattleCheckParam</replaceName>
  		<handler>descripter = pb_set_message_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_battlecheckparam</name>
  		<replaceName>BattleCheckParam</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TBattleCheckParam& battlecheckparam() const;
  inline ::pb::TBattleCheckParam* mutable_battlecheckparam();
  inline ::pb::TBattleCheckParam* release_battlecheckparam();
  inline void set_allocated_battlecheckparam(::pb::TBattleCheckParam* battlecheckparam);

  // @@protoc_insertion_point(class_scope:pb.TDefineChallengeGetBattleArgsReq)
 private:
  inline void set_has_bossinfo();
  inline void clear_has_bossinfo();
  inline void set_has_battlecheckparam();
  inline void clear_has_battlecheckparam();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::pb::TDefineChallengeBossInfo* bossinfo_;
  ::pb::TBattleCheckParam* battlecheckparam_;
  friend void  protobuf_AddDesc_net_2fDefineChallenge_2eproto();
  friend void protobuf_AssignDesc_net_2fDefineChallenge_2eproto();
  friend void protobuf_ShutdownFile_net_2fDefineChallenge_2eproto();

  void InitAsDefaultInstance();
  static TDefineChallengeGetBattleArgsReq* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TDefineChallengeGetBattleArgsRsp</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/DefineChallenge.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TDefineChallengeGetBattleArgsRsp : public ::google::protobuf::Message {
 public:
  TDefineChallengeGetBattleArgsRsp();
  virtual ~TDefineChallengeGetBattleArgsRsp();

  TDefineChallengeGetBattleArgsRsp(const TDefineChallengeGetBattleArgsRsp& from);

  inline TDefineChallengeGetBattleArgsRsp& operator=(const TDefineChallengeGetBattleArgsRsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TDefineChallengeGetBattleArgsRsp& default_instance();

  void Swap(TDefineChallengeGetBattleArgsRsp* other);

  // implements Message ----------------------------------------------

  TDefineChallengeGetBattleArgsRsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TDefineChallengeGetBattleArgsRsp& from);
  void MergeFrom(const TDefineChallengeGetBattleArgsRsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .pb.TBattleArgs BattleArgs = 1;
  inline bool has_battleargs() const;
  inline void clear_battleargs();
  static const int kBattleArgsFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TDefineChallengeGetBattleArgsRsp</name>
  	<Function>
  		<name>battleargs</name>
  		<replaceName>BattleArgs</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_battleargs</name>
  		<replaceName>BattleArgs</replaceName>
  		<handler>descripter = pb_set_message_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_allocated_battleargs</name>
  		<replaceName>BattleArgs</replaceName>
  		<handler>descripter = pb_set_message_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_battleargs</name>
  		<replaceName>BattleArgs</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TBattleArgs& battleargs() const;
  inline ::pb::TBattleArgs* mutable_battleargs();
  inline ::pb::TBattleArgs* release_battleargs();
  inline void set_allocated_battleargs(::pb::TBattleArgs* battleargs);

  // @@protoc_insertion_point(class_scope:pb.TDefineChallengeGetBattleArgsRsp)
 private:
  inline void set_has_battleargs();
  inline void clear_has_battleargs();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::pb::TBattleArgs* battleargs_;
  friend void  protobuf_AddDesc_net_2fDefineChallenge_2eproto();
  friend void protobuf_AssignDesc_net_2fDefineChallenge_2eproto();
  friend void protobuf_ShutdownFile_net_2fDefineChallenge_2eproto();

  void InitAsDefaultInstance();
  static TDefineChallengeGetBattleArgsRsp* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TDefineChallengeReportBattleBossReq</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/DefineChallenge.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TDefineChallengeReportBattleBossReq : public ::google::protobuf::Message {
 public:
  TDefineChallengeReportBattleBossReq();
  virtual ~TDefineChallengeReportBattleBossReq();

  TDefineChallengeReportBattleBossReq(const TDefineChallengeReportBattleBossReq& from);

  inline TDefineChallengeReportBattleBossReq& operator=(const TDefineChallengeReportBattleBossReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TDefineChallengeReportBattleBossReq& default_instance();

  void Swap(TDefineChallengeReportBattleBossReq* other);

  // implements Message ----------------------------------------------

  TDefineChallengeReportBattleBossReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TDefineChallengeReportBattleBossReq& from);
  void MergeFrom(const TDefineChallengeReportBattleBossReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .pb.TDefineChallengeBossInfo BossInfo = 1;
  inline bool has_bossinfo() const;
  inline void clear_bossinfo();
  static const int kBossInfoFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TDefineChallengeReportBattleBossReq</name>
  	<Function>
  		<name>bossinfo</name>
  		<replaceName>BossInfo</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_bossinfo</name>
  		<replaceName>BossInfo</replaceName>
  		<handler>descripter = pb_set_message_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_allocated_bossinfo</name>
  		<replaceName>BossInfo</replaceName>
  		<handler>descripter = pb_set_message_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_bossinfo</name>
  		<replaceName>BossInfo</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TDefineChallengeBossInfo& bossinfo() const;
  inline ::pb::TDefineChallengeBossInfo* mutable_bossinfo();
  inline ::pb::TDefineChallengeBossInfo* release_bossinfo();
  inline void set_allocated_bossinfo(::pb::TDefineChallengeBossInfo* bossinfo);

  // optional bytes BattleRet = 2;
  inline bool has_battleret() const;
  inline void clear_battleret();
  static const int kBattleRetFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TDefineChallengeReportBattleBossReq</name>
  	<Function>
  		<name>battleret</name>
  		<replaceName>BattleRet</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_battleret</name>
  		<replaceName>BattleRet</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_battleret</name>
  		<replaceName>BattleRet</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::std::string& battleret() const;
  inline void set_battleret(const ::std::string& value);
  inline void set_battleret(const char* value);
  inline void set_battleret(const void* value, size_t size);
  inline ::std::string* mutable_battleret();
  inline ::std::string* release_battleret();
  inline void set_allocated_battleret(::std::string* battleret);

  // optional uint32 MasterHid = 3;
  inline bool has_masterhid() const;
  inline void clear_masterhid();
  static const int kMasterHidFieldNumber = 3;
  /*FOR2LUA
  <Record>
  	<name>TDefineChallengeReportBattleBossReq</name>
  	<Function>
  		<name>masterhid</name>
  		<replaceName>MasterHid</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_masterhid</name>
  		<replaceName>MasterHid</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_masterhid</name>
  		<replaceName>MasterHid</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 masterhid() const;
  inline void set_masterhid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:pb.TDefineChallengeReportBattleBossReq)
 private:
  inline void set_has_bossinfo();
  inline void clear_has_bossinfo();
  inline void set_has_battleret();
  inline void clear_has_battleret();
  inline void set_has_masterhid();
  inline void clear_has_masterhid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::pb::TDefineChallengeBossInfo* bossinfo_;
  ::std::string* battleret_;
  ::google::protobuf::uint32 masterhid_;
  friend void  protobuf_AddDesc_net_2fDefineChallenge_2eproto();
  friend void protobuf_AssignDesc_net_2fDefineChallenge_2eproto();
  friend void protobuf_ShutdownFile_net_2fDefineChallenge_2eproto();

  void InitAsDefaultInstance();
  static TDefineChallengeReportBattleBossReq* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TDefineChallengeReportBattleBossRsp</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/DefineChallenge.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TDefineChallengeReportBattleBossRsp : public ::google::protobuf::Message {
 public:
  TDefineChallengeReportBattleBossRsp();
  virtual ~TDefineChallengeReportBattleBossRsp();

  TDefineChallengeReportBattleBossRsp(const TDefineChallengeReportBattleBossRsp& from);

  inline TDefineChallengeReportBattleBossRsp& operator=(const TDefineChallengeReportBattleBossRsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TDefineChallengeReportBattleBossRsp& default_instance();

  void Swap(TDefineChallengeReportBattleBossRsp* other);

  // implements Message ----------------------------------------------

  TDefineChallengeReportBattleBossRsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TDefineChallengeReportBattleBossRsp& from);
  void MergeFrom(const TDefineChallengeReportBattleBossRsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 SettleScore = 1;
  inline bool has_settlescore() const;
  inline void clear_settlescore();
  static const int kSettleScoreFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TDefineChallengeReportBattleBossRsp</name>
  	<Function>
  		<name>settlescore</name>
  		<replaceName>SettleScore</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_settlescore</name>
  		<replaceName>SettleScore</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_settlescore</name>
  		<replaceName>SettleScore</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 settlescore() const;
  inline void set_settlescore(::google::protobuf::uint32 value);

  // optional uint32 TotalScore = 2;
  inline bool has_totalscore() const;
  inline void clear_totalscore();
  static const int kTotalScoreFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TDefineChallengeReportBattleBossRsp</name>
  	<Function>
  		<name>totalscore</name>
  		<replaceName>TotalScore</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_totalscore</name>
  		<replaceName>TotalScore</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_totalscore</name>
  		<replaceName>TotalScore</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 totalscore() const;
  inline void set_totalscore(::google::protobuf::uint32 value);

  // optional uint32 IsWin = 3;
  inline bool has_iswin() const;
  inline void clear_iswin();
  static const int kIsWinFieldNumber = 3;
  /*FOR2LUA
  <Record>
  	<name>TDefineChallengeReportBattleBossRsp</name>
  	<Function>
  		<name>iswin</name>
  		<replaceName>IsWin</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_iswin</name>
  		<replaceName>IsWin</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_iswin</name>
  		<replaceName>IsWin</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 iswin() const;
  inline void set_iswin(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:pb.TDefineChallengeReportBattleBossRsp)
 private:
  inline void set_has_settlescore();
  inline void clear_has_settlescore();
  inline void set_has_totalscore();
  inline void clear_has_totalscore();
  inline void set_has_iswin();
  inline void clear_has_iswin();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 settlescore_;
  ::google::protobuf::uint32 totalscore_;
  ::google::protobuf::uint32 iswin_;
  friend void  protobuf_AddDesc_net_2fDefineChallenge_2eproto();
  friend void protobuf_AssignDesc_net_2fDefineChallenge_2eproto();
  friend void protobuf_ShutdownFile_net_2fDefineChallenge_2eproto();

  void InitAsDefaultInstance();
  static TDefineChallengeReportBattleBossRsp* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TDefineChallengeGetFmtReq</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/DefineChallenge.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TDefineChallengeGetFmtReq : public ::google::protobuf::Message {
 public:
  TDefineChallengeGetFmtReq();
  virtual ~TDefineChallengeGetFmtReq();

  TDefineChallengeGetFmtReq(const TDefineChallengeGetFmtReq& from);

  inline TDefineChallengeGetFmtReq& operator=(const TDefineChallengeGetFmtReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TDefineChallengeGetFmtReq& default_instance();

  void Swap(TDefineChallengeGetFmtReq* other);

  // implements Message ----------------------------------------------

  TDefineChallengeGetFmtReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TDefineChallengeGetFmtReq& from);
  void MergeFrom(const TDefineChallengeGetFmtReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 BossId = 1;
  inline bool has_bossid() const;
  inline void clear_bossid();
  static const int kBossIdFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TDefineChallengeGetFmtReq</name>
  	<Function>
  		<name>bossid</name>
  		<replaceName>BossId</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_bossid</name>
  		<replaceName>BossId</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_bossid</name>
  		<replaceName>BossId</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 bossid() const;
  inline void set_bossid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:pb.TDefineChallengeGetFmtReq)
 private:
  inline void set_has_bossid();
  inline void clear_has_bossid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 bossid_;
  friend void  protobuf_AddDesc_net_2fDefineChallenge_2eproto();
  friend void protobuf_AssignDesc_net_2fDefineChallenge_2eproto();
  friend void protobuf_ShutdownFile_net_2fDefineChallenge_2eproto();

  void InitAsDefaultInstance();
  static TDefineChallengeGetFmtReq* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TDefineChallengeGetFmtRsp</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/DefineChallenge.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TDefineChallengeGetFmtRsp : public ::google::protobuf::Message {
 public:
  TDefineChallengeGetFmtRsp();
  virtual ~TDefineChallengeGetFmtRsp();

  TDefineChallengeGetFmtRsp(const TDefineChallengeGetFmtRsp& from);

  inline TDefineChallengeGetFmtRsp& operator=(const TDefineChallengeGetFmtRsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TDefineChallengeGetFmtRsp& default_instance();

  void Swap(TDefineChallengeGetFmtRsp* other);

  // implements Message ----------------------------------------------

  TDefineChallengeGetFmtRsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TDefineChallengeGetFmtRsp& from);
  void MergeFrom(const TDefineChallengeGetFmtRsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .pb.TDefineChallengeBattlePosInfo Fmt = 1;
  inline int fmt_size() const;
  inline void clear_fmt();
  static const int kFmtFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TDefineChallengeGetFmtRsp</name>
  	<Function>
  		<name>fmt</name>
  		<replaceName>Fmt</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_fmt</name>
  		<replaceName>Fmt</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_fmt</name>
  		<replaceName>Fmt</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_fmt</name>
  		<replaceName>Fmt</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>fmt_size</name>
  		<replaceName>Fmt</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TDefineChallengeBattlePosInfo& fmt(int index) const;
  inline ::pb::TDefineChallengeBattlePosInfo* mutable_fmt(int index);
  inline ::pb::TDefineChallengeBattlePosInfo* add_fmt();
  inline const ::google::protobuf::RepeatedPtrField< ::pb::TDefineChallengeBattlePosInfo >&
      fmt() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb::TDefineChallengeBattlePosInfo >*
      mutable_fmt();

  // @@protoc_insertion_point(class_scope:pb.TDefineChallengeGetFmtRsp)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::pb::TDefineChallengeBattlePosInfo > fmt_;
  friend void  protobuf_AddDesc_net_2fDefineChallenge_2eproto();
  friend void protobuf_AssignDesc_net_2fDefineChallenge_2eproto();
  friend void protobuf_ShutdownFile_net_2fDefineChallenge_2eproto();

  void InitAsDefaultInstance();
  static TDefineChallengeGetFmtRsp* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TDefineChallengeSetFmtReq</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/DefineChallenge.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TDefineChallengeSetFmtReq : public ::google::protobuf::Message {
 public:
  TDefineChallengeSetFmtReq();
  virtual ~TDefineChallengeSetFmtReq();

  TDefineChallengeSetFmtReq(const TDefineChallengeSetFmtReq& from);

  inline TDefineChallengeSetFmtReq& operator=(const TDefineChallengeSetFmtReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TDefineChallengeSetFmtReq& default_instance();

  void Swap(TDefineChallengeSetFmtReq* other);

  // implements Message ----------------------------------------------

  TDefineChallengeSetFmtReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TDefineChallengeSetFmtReq& from);
  void MergeFrom(const TDefineChallengeSetFmtReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .pb.TDefineChallengeBattlePosInfo Fmt = 1;
  inline int fmt_size() const;
  inline void clear_fmt();
  static const int kFmtFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TDefineChallengeSetFmtReq</name>
  	<Function>
  		<name>fmt</name>
  		<replaceName>Fmt</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_fmt</name>
  		<replaceName>Fmt</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_fmt</name>
  		<replaceName>Fmt</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_fmt</name>
  		<replaceName>Fmt</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>fmt_size</name>
  		<replaceName>Fmt</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TDefineChallengeBattlePosInfo& fmt(int index) const;
  inline ::pb::TDefineChallengeBattlePosInfo* mutable_fmt(int index);
  inline ::pb::TDefineChallengeBattlePosInfo* add_fmt();
  inline const ::google::protobuf::RepeatedPtrField< ::pb::TDefineChallengeBattlePosInfo >&
      fmt() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb::TDefineChallengeBattlePosInfo >*
      mutable_fmt();

  // optional uint32 BossId = 2;
  inline bool has_bossid() const;
  inline void clear_bossid();
  static const int kBossIdFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TDefineChallengeSetFmtReq</name>
  	<Function>
  		<name>bossid</name>
  		<replaceName>BossId</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_bossid</name>
  		<replaceName>BossId</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_bossid</name>
  		<replaceName>BossId</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 bossid() const;
  inline void set_bossid(::google::protobuf::uint32 value);

  // repeated uint32 DebuffArr = 3;
  inline int debuffarr_size() const;
  inline void clear_debuffarr();
  static const int kDebuffArrFieldNumber = 3;
  /*FOR2LUA
  <Record>
  	<name>TDefineChallengeSetFmtReq</name>
  	<Function>
  		<name>debuffarr</name>
  		<replaceName>DebuffArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_debuffarr</name>
  		<replaceName>DebuffArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_debuffarr</name>
  		<replaceName>DebuffArr</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_debuffarr</name>
  		<replaceName>DebuffArr</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>debuffarr_size</name>
  		<replaceName>DebuffArr</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 debuffarr(int index) const;
  inline void set_debuffarr(int index, ::google::protobuf::uint32 value);
  inline void add_debuffarr(::google::protobuf::uint32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      debuffarr() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_debuffarr();

  // @@protoc_insertion_point(class_scope:pb.TDefineChallengeSetFmtReq)
 private:
  inline void set_has_bossid();
  inline void clear_has_bossid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::pb::TDefineChallengeBattlePosInfo > fmt_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > debuffarr_;
  ::google::protobuf::uint32 bossid_;
  friend void  protobuf_AddDesc_net_2fDefineChallenge_2eproto();
  friend void protobuf_AssignDesc_net_2fDefineChallenge_2eproto();
  friend void protobuf_ShutdownFile_net_2fDefineChallenge_2eproto();

  void InitAsDefaultInstance();
  static TDefineChallengeSetFmtReq* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TDefineChallengeReceiveTaskRewardReq</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/DefineChallenge.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TDefineChallengeReceiveTaskRewardReq : public ::google::protobuf::Message {
 public:
  TDefineChallengeReceiveTaskRewardReq();
  virtual ~TDefineChallengeReceiveTaskRewardReq();

  TDefineChallengeReceiveTaskRewardReq(const TDefineChallengeReceiveTaskRewardReq& from);

  inline TDefineChallengeReceiveTaskRewardReq& operator=(const TDefineChallengeReceiveTaskRewardReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TDefineChallengeReceiveTaskRewardReq& default_instance();

  void Swap(TDefineChallengeReceiveTaskRewardReq* other);

  // implements Message ----------------------------------------------

  TDefineChallengeReceiveTaskRewardReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TDefineChallengeReceiveTaskRewardReq& from);
  void MergeFrom(const TDefineChallengeReceiveTaskRewardReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 TaskId = 1;
  inline bool has_taskid() const;
  inline void clear_taskid();
  static const int kTaskIdFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TDefineChallengeReceiveTaskRewardReq</name>
  	<Function>
  		<name>taskid</name>
  		<replaceName>TaskId</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_taskid</name>
  		<replaceName>TaskId</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_taskid</name>
  		<replaceName>TaskId</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 taskid() const;
  inline void set_taskid(::google::protobuf::uint32 value);

  // optional uint32 BossId = 2;
  inline bool has_bossid() const;
  inline void clear_bossid();
  static const int kBossIdFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TDefineChallengeReceiveTaskRewardReq</name>
  	<Function>
  		<name>bossid</name>
  		<replaceName>BossId</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_bossid</name>
  		<replaceName>BossId</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_bossid</name>
  		<replaceName>BossId</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 bossid() const;
  inline void set_bossid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:pb.TDefineChallengeReceiveTaskRewardReq)
 private:
  inline void set_has_taskid();
  inline void clear_has_taskid();
  inline void set_has_bossid();
  inline void clear_has_bossid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 taskid_;
  ::google::protobuf::uint32 bossid_;
  friend void  protobuf_AddDesc_net_2fDefineChallenge_2eproto();
  friend void protobuf_AssignDesc_net_2fDefineChallenge_2eproto();
  friend void protobuf_ShutdownFile_net_2fDefineChallenge_2eproto();

  void InitAsDefaultInstance();
  static TDefineChallengeReceiveTaskRewardReq* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TDefineChallengeReceiveTaskRewardRsp</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/DefineChallenge.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TDefineChallengeReceiveTaskRewardRsp : public ::google::protobuf::Message {
 public:
  TDefineChallengeReceiveTaskRewardRsp();
  virtual ~TDefineChallengeReceiveTaskRewardRsp();

  TDefineChallengeReceiveTaskRewardRsp(const TDefineChallengeReceiveTaskRewardRsp& from);

  inline TDefineChallengeReceiveTaskRewardRsp& operator=(const TDefineChallengeReceiveTaskRewardRsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TDefineChallengeReceiveTaskRewardRsp& default_instance();

  void Swap(TDefineChallengeReceiveTaskRewardRsp* other);

  // implements Message ----------------------------------------------

  TDefineChallengeReceiveTaskRewardRsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TDefineChallengeReceiveTaskRewardRsp& from);
  void MergeFrom(const TDefineChallengeReceiveTaskRewardRsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .pb.TCommonReward RewardArr = 1;
  inline int rewardarr_size() const;
  inline void clear_rewardarr();
  static const int kRewardArrFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TDefineChallengeReceiveTaskRewardRsp</name>
  	<Function>
  		<name>rewardarr</name>
  		<replaceName>RewardArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_rewardarr</name>
  		<replaceName>RewardArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_rewardarr</name>
  		<replaceName>RewardArr</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_rewardarr</name>
  		<replaceName>RewardArr</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>rewardarr_size</name>
  		<replaceName>RewardArr</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TCommonReward& rewardarr(int index) const;
  inline ::pb::TCommonReward* mutable_rewardarr(int index);
  inline ::pb::TCommonReward* add_rewardarr();
  inline const ::google::protobuf::RepeatedPtrField< ::pb::TCommonReward >&
      rewardarr() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb::TCommonReward >*
      mutable_rewardarr();

  // @@protoc_insertion_point(class_scope:pb.TDefineChallengeReceiveTaskRewardRsp)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::pb::TCommonReward > rewardarr_;
  friend void  protobuf_AddDesc_net_2fDefineChallenge_2eproto();
  friend void protobuf_AssignDesc_net_2fDefineChallenge_2eproto();
  friend void protobuf_ShutdownFile_net_2fDefineChallenge_2eproto();

  void InitAsDefaultInstance();
  static TDefineChallengeReceiveTaskRewardRsp* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TDefineChallengeGetGroupRankArrRep</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/DefineChallenge.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TDefineChallengeGetGroupRankArrRep : public ::google::protobuf::Message {
 public:
  TDefineChallengeGetGroupRankArrRep();
  virtual ~TDefineChallengeGetGroupRankArrRep();

  TDefineChallengeGetGroupRankArrRep(const TDefineChallengeGetGroupRankArrRep& from);

  inline TDefineChallengeGetGroupRankArrRep& operator=(const TDefineChallengeGetGroupRankArrRep& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TDefineChallengeGetGroupRankArrRep& default_instance();

  void Swap(TDefineChallengeGetGroupRankArrRep* other);

  // implements Message ----------------------------------------------

  TDefineChallengeGetGroupRankArrRep* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TDefineChallengeGetGroupRankArrRep& from);
  void MergeFrom(const TDefineChallengeGetGroupRankArrRep& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 GroupId = 1;
  inline bool has_groupid() const;
  inline void clear_groupid();
  static const int kGroupIdFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TDefineChallengeGetGroupRankArrRep</name>
  	<Function>
  		<name>groupid</name>
  		<replaceName>GroupId</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_groupid</name>
  		<replaceName>GroupId</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_groupid</name>
  		<replaceName>GroupId</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 groupid() const;
  inline void set_groupid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:pb.TDefineChallengeGetGroupRankArrRep)
 private:
  inline void set_has_groupid();
  inline void clear_has_groupid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 groupid_;
  friend void  protobuf_AddDesc_net_2fDefineChallenge_2eproto();
  friend void protobuf_AssignDesc_net_2fDefineChallenge_2eproto();
  friend void protobuf_ShutdownFile_net_2fDefineChallenge_2eproto();

  void InitAsDefaultInstance();
  static TDefineChallengeGetGroupRankArrRep* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TDefineChallengeGetGroupRankArrRsp</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/DefineChallenge.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TDefineChallengeGetGroupRankArrRsp : public ::google::protobuf::Message {
 public:
  TDefineChallengeGetGroupRankArrRsp();
  virtual ~TDefineChallengeGetGroupRankArrRsp();

  TDefineChallengeGetGroupRankArrRsp(const TDefineChallengeGetGroupRankArrRsp& from);

  inline TDefineChallengeGetGroupRankArrRsp& operator=(const TDefineChallengeGetGroupRankArrRsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TDefineChallengeGetGroupRankArrRsp& default_instance();

  void Swap(TDefineChallengeGetGroupRankArrRsp* other);

  // implements Message ----------------------------------------------

  TDefineChallengeGetGroupRankArrRsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TDefineChallengeGetGroupRankArrRsp& from);
  void MergeFrom(const TDefineChallengeGetGroupRankArrRsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .pb.TDefineChallengeRankInfo UserRankArr = 1;
  inline int userrankarr_size() const;
  inline void clear_userrankarr();
  static const int kUserRankArrFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TDefineChallengeGetGroupRankArrRsp</name>
  	<Function>
  		<name>userrankarr</name>
  		<replaceName>UserRankArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_userrankarr</name>
  		<replaceName>UserRankArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_userrankarr</name>
  		<replaceName>UserRankArr</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_userrankarr</name>
  		<replaceName>UserRankArr</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>userrankarr_size</name>
  		<replaceName>UserRankArr</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TDefineChallengeRankInfo& userrankarr(int index) const;
  inline ::pb::TDefineChallengeRankInfo* mutable_userrankarr(int index);
  inline ::pb::TDefineChallengeRankInfo* add_userrankarr();
  inline const ::google::protobuf::RepeatedPtrField< ::pb::TDefineChallengeRankInfo >&
      userrankarr() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb::TDefineChallengeRankInfo >*
      mutable_userrankarr();

  // optional .pb.TDefineChallengeRankInfo SelfRank = 2;
  inline bool has_selfrank() const;
  inline void clear_selfrank();
  static const int kSelfRankFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TDefineChallengeGetGroupRankArrRsp</name>
  	<Function>
  		<name>selfrank</name>
  		<replaceName>SelfRank</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_selfrank</name>
  		<replaceName>SelfRank</replaceName>
  		<handler>descripter = pb_set_message_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_allocated_selfrank</name>
  		<replaceName>SelfRank</replaceName>
  		<handler>descripter = pb_set_message_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_selfrank</name>
  		<replaceName>SelfRank</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TDefineChallengeRankInfo& selfrank() const;
  inline ::pb::TDefineChallengeRankInfo* mutable_selfrank();
  inline ::pb::TDefineChallengeRankInfo* release_selfrank();
  inline void set_allocated_selfrank(::pb::TDefineChallengeRankInfo* selfrank);

  // @@protoc_insertion_point(class_scope:pb.TDefineChallengeGetGroupRankArrRsp)
 private:
  inline void set_has_selfrank();
  inline void clear_has_selfrank();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::pb::TDefineChallengeRankInfo > userrankarr_;
  ::pb::TDefineChallengeRankInfo* selfrank_;
  friend void  protobuf_AddDesc_net_2fDefineChallenge_2eproto();
  friend void protobuf_AssignDesc_net_2fDefineChallenge_2eproto();
  friend void protobuf_ShutdownFile_net_2fDefineChallenge_2eproto();

  void InitAsDefaultInstance();
  static TDefineChallengeGetGroupRankArrRsp* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TDefineChallengeGetWarZoneRankArrRep</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/DefineChallenge.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TDefineChallengeGetWarZoneRankArrRep : public ::google::protobuf::Message {
 public:
  TDefineChallengeGetWarZoneRankArrRep();
  virtual ~TDefineChallengeGetWarZoneRankArrRep();

  TDefineChallengeGetWarZoneRankArrRep(const TDefineChallengeGetWarZoneRankArrRep& from);

  inline TDefineChallengeGetWarZoneRankArrRep& operator=(const TDefineChallengeGetWarZoneRankArrRep& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TDefineChallengeGetWarZoneRankArrRep& default_instance();

  void Swap(TDefineChallengeGetWarZoneRankArrRep* other);

  // implements Message ----------------------------------------------

  TDefineChallengeGetWarZoneRankArrRep* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TDefineChallengeGetWarZoneRankArrRep& from);
  void MergeFrom(const TDefineChallengeGetWarZoneRankArrRep& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 WarZoneId = 1;
  inline bool has_warzoneid() const;
  inline void clear_warzoneid();
  static const int kWarZoneIdFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TDefineChallengeGetWarZoneRankArrRep</name>
  	<Function>
  		<name>warzoneid</name>
  		<replaceName>WarZoneId</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_warzoneid</name>
  		<replaceName>WarZoneId</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_warzoneid</name>
  		<replaceName>WarZoneId</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 warzoneid() const;
  inline void set_warzoneid(::google::protobuf::uint32 value);

  // optional uint32 OffSet = 2;
  inline bool has_offset() const;
  inline void clear_offset();
  static const int kOffSetFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TDefineChallengeGetWarZoneRankArrRep</name>
  	<Function>
  		<name>offset</name>
  		<replaceName>OffSet</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_offset</name>
  		<replaceName>OffSet</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_offset</name>
  		<replaceName>OffSet</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 offset() const;
  inline void set_offset(::google::protobuf::uint32 value);

  // optional uint32 Limit = 3;
  inline bool has_limit() const;
  inline void clear_limit();
  static const int kLimitFieldNumber = 3;
  /*FOR2LUA
  <Record>
  	<name>TDefineChallengeGetWarZoneRankArrRep</name>
  	<Function>
  		<name>limit</name>
  		<replaceName>Limit</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_limit</name>
  		<replaceName>Limit</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_limit</name>
  		<replaceName>Limit</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 limit() const;
  inline void set_limit(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:pb.TDefineChallengeGetWarZoneRankArrRep)
 private:
  inline void set_has_warzoneid();
  inline void clear_has_warzoneid();
  inline void set_has_offset();
  inline void clear_has_offset();
  inline void set_has_limit();
  inline void clear_has_limit();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 warzoneid_;
  ::google::protobuf::uint32 offset_;
  ::google::protobuf::uint32 limit_;
  friend void  protobuf_AddDesc_net_2fDefineChallenge_2eproto();
  friend void protobuf_AssignDesc_net_2fDefineChallenge_2eproto();
  friend void protobuf_ShutdownFile_net_2fDefineChallenge_2eproto();

  void InitAsDefaultInstance();
  static TDefineChallengeGetWarZoneRankArrRep* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TDefineChallengeGetWarZoneRankArrRsp</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/DefineChallenge.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TDefineChallengeGetWarZoneRankArrRsp : public ::google::protobuf::Message {
 public:
  TDefineChallengeGetWarZoneRankArrRsp();
  virtual ~TDefineChallengeGetWarZoneRankArrRsp();

  TDefineChallengeGetWarZoneRankArrRsp(const TDefineChallengeGetWarZoneRankArrRsp& from);

  inline TDefineChallengeGetWarZoneRankArrRsp& operator=(const TDefineChallengeGetWarZoneRankArrRsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TDefineChallengeGetWarZoneRankArrRsp& default_instance();

  void Swap(TDefineChallengeGetWarZoneRankArrRsp* other);

  // implements Message ----------------------------------------------

  TDefineChallengeGetWarZoneRankArrRsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TDefineChallengeGetWarZoneRankArrRsp& from);
  void MergeFrom(const TDefineChallengeGetWarZoneRankArrRsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .pb.TDefineChallengeRankInfo UserRankArr = 1;
  inline int userrankarr_size() const;
  inline void clear_userrankarr();
  static const int kUserRankArrFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TDefineChallengeGetWarZoneRankArrRsp</name>
  	<Function>
  		<name>userrankarr</name>
  		<replaceName>UserRankArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_userrankarr</name>
  		<replaceName>UserRankArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_userrankarr</name>
  		<replaceName>UserRankArr</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_userrankarr</name>
  		<replaceName>UserRankArr</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>userrankarr_size</name>
  		<replaceName>UserRankArr</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TDefineChallengeRankInfo& userrankarr(int index) const;
  inline ::pb::TDefineChallengeRankInfo* mutable_userrankarr(int index);
  inline ::pb::TDefineChallengeRankInfo* add_userrankarr();
  inline const ::google::protobuf::RepeatedPtrField< ::pb::TDefineChallengeRankInfo >&
      userrankarr() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb::TDefineChallengeRankInfo >*
      mutable_userrankarr();

  // optional .pb.TDefineChallengeRankInfo SelfRank = 2;
  inline bool has_selfrank() const;
  inline void clear_selfrank();
  static const int kSelfRankFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TDefineChallengeGetWarZoneRankArrRsp</name>
  	<Function>
  		<name>selfrank</name>
  		<replaceName>SelfRank</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_selfrank</name>
  		<replaceName>SelfRank</replaceName>
  		<handler>descripter = pb_set_message_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_allocated_selfrank</name>
  		<replaceName>SelfRank</replaceName>
  		<handler>descripter = pb_set_message_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_selfrank</name>
  		<replaceName>SelfRank</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TDefineChallengeRankInfo& selfrank() const;
  inline ::pb::TDefineChallengeRankInfo* mutable_selfrank();
  inline ::pb::TDefineChallengeRankInfo* release_selfrank();
  inline void set_allocated_selfrank(::pb::TDefineChallengeRankInfo* selfrank);

  // @@protoc_insertion_point(class_scope:pb.TDefineChallengeGetWarZoneRankArrRsp)
 private:
  inline void set_has_selfrank();
  inline void clear_has_selfrank();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::pb::TDefineChallengeRankInfo > userrankarr_;
  ::pb::TDefineChallengeRankInfo* selfrank_;
  friend void  protobuf_AddDesc_net_2fDefineChallenge_2eproto();
  friend void protobuf_AssignDesc_net_2fDefineChallenge_2eproto();
  friend void protobuf_ShutdownFile_net_2fDefineChallenge_2eproto();

  void InitAsDefaultInstance();
  static TDefineChallengeGetWarZoneRankArrRsp* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TDefineChallengeGetRankFormationRep</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/DefineChallenge.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TDefineChallengeGetRankFormationRep : public ::google::protobuf::Message {
 public:
  TDefineChallengeGetRankFormationRep();
  virtual ~TDefineChallengeGetRankFormationRep();

  TDefineChallengeGetRankFormationRep(const TDefineChallengeGetRankFormationRep& from);

  inline TDefineChallengeGetRankFormationRep& operator=(const TDefineChallengeGetRankFormationRep& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TDefineChallengeGetRankFormationRep& default_instance();

  void Swap(TDefineChallengeGetRankFormationRep* other);

  // implements Message ----------------------------------------------

  TDefineChallengeGetRankFormationRep* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TDefineChallengeGetRankFormationRep& from);
  void MergeFrom(const TDefineChallengeGetRankFormationRep& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint64 Uid = 1;
  inline bool has_uid() const;
  inline void clear_uid();
  static const int kUidFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TDefineChallengeGetRankFormationRep</name>
  	<Function>
  		<name>uid</name>
  		<replaceName>Uid</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_uid</name>
  		<replaceName>Uid</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_uid</name>
  		<replaceName>Uid</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint64 uid() const;
  inline void set_uid(::google::protobuf::uint64 value);

  // optional uint32 Rank = 2;
  inline bool has_rank() const;
  inline void clear_rank();
  static const int kRankFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TDefineChallengeGetRankFormationRep</name>
  	<Function>
  		<name>rank</name>
  		<replaceName>Rank</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_rank</name>
  		<replaceName>Rank</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_rank</name>
  		<replaceName>Rank</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 rank() const;
  inline void set_rank(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:pb.TDefineChallengeGetRankFormationRep)
 private:
  inline void set_has_uid();
  inline void clear_has_uid();
  inline void set_has_rank();
  inline void clear_has_rank();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint64 uid_;
  ::google::protobuf::uint32 rank_;
  friend void  protobuf_AddDesc_net_2fDefineChallenge_2eproto();
  friend void protobuf_AssignDesc_net_2fDefineChallenge_2eproto();
  friend void protobuf_ShutdownFile_net_2fDefineChallenge_2eproto();

  void InitAsDefaultInstance();
  static TDefineChallengeGetRankFormationRep* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TDefineChallengeGetRankFormationRsp</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/DefineChallenge.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TDefineChallengeGetRankFormationRsp : public ::google::protobuf::Message {
 public:
  TDefineChallengeGetRankFormationRsp();
  virtual ~TDefineChallengeGetRankFormationRsp();

  TDefineChallengeGetRankFormationRsp(const TDefineChallengeGetRankFormationRsp& from);

  inline TDefineChallengeGetRankFormationRsp& operator=(const TDefineChallengeGetRankFormationRsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TDefineChallengeGetRankFormationRsp& default_instance();

  void Swap(TDefineChallengeGetRankFormationRsp* other);

  // implements Message ----------------------------------------------

  TDefineChallengeGetRankFormationRsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TDefineChallengeGetRankFormationRsp& from);
  void MergeFrom(const TDefineChallengeGetRankFormationRsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .pb.TDefineChallengeOtherRankInfo BossInfo = 1;
  inline int bossinfo_size() const;
  inline void clear_bossinfo();
  static const int kBossInfoFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TDefineChallengeGetRankFormationRsp</name>
  	<Function>
  		<name>bossinfo</name>
  		<replaceName>BossInfo</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_bossinfo</name>
  		<replaceName>BossInfo</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_bossinfo</name>
  		<replaceName>BossInfo</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_bossinfo</name>
  		<replaceName>BossInfo</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>bossinfo_size</name>
  		<replaceName>BossInfo</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TDefineChallengeOtherRankInfo& bossinfo(int index) const;
  inline ::pb::TDefineChallengeOtherRankInfo* mutable_bossinfo(int index);
  inline ::pb::TDefineChallengeOtherRankInfo* add_bossinfo();
  inline const ::google::protobuf::RepeatedPtrField< ::pb::TDefineChallengeOtherRankInfo >&
      bossinfo() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb::TDefineChallengeOtherRankInfo >*
      mutable_bossinfo();

  // @@protoc_insertion_point(class_scope:pb.TDefineChallengeGetRankFormationRsp)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::pb::TDefineChallengeOtherRankInfo > bossinfo_;
  friend void  protobuf_AddDesc_net_2fDefineChallenge_2eproto();
  friend void protobuf_AssignDesc_net_2fDefineChallenge_2eproto();
  friend void protobuf_ShutdownFile_net_2fDefineChallenge_2eproto();

  void InitAsDefaultInstance();
  static TDefineChallengeGetRankFormationRsp* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TDefineChallengeChangeBossRep</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/DefineChallenge.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TDefineChallengeChangeBossRep : public ::google::protobuf::Message {
 public:
  TDefineChallengeChangeBossRep();
  virtual ~TDefineChallengeChangeBossRep();

  TDefineChallengeChangeBossRep(const TDefineChallengeChangeBossRep& from);

  inline TDefineChallengeChangeBossRep& operator=(const TDefineChallengeChangeBossRep& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TDefineChallengeChangeBossRep& default_instance();

  void Swap(TDefineChallengeChangeBossRep* other);

  // implements Message ----------------------------------------------

  TDefineChallengeChangeBossRep* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TDefineChallengeChangeBossRep& from);
  void MergeFrom(const TDefineChallengeChangeBossRep& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 BossId = 1;
  inline bool has_bossid() const;
  inline void clear_bossid();
  static const int kBossIdFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TDefineChallengeChangeBossRep</name>
  	<Function>
  		<name>bossid</name>
  		<replaceName>BossId</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_bossid</name>
  		<replaceName>BossId</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_bossid</name>
  		<replaceName>BossId</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 bossid() const;
  inline void set_bossid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:pb.TDefineChallengeChangeBossRep)
 private:
  inline void set_has_bossid();
  inline void clear_has_bossid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 bossid_;
  friend void  protobuf_AddDesc_net_2fDefineChallenge_2eproto();
  friend void protobuf_AssignDesc_net_2fDefineChallenge_2eproto();
  friend void protobuf_ShutdownFile_net_2fDefineChallenge_2eproto();

  void InitAsDefaultInstance();
  static TDefineChallengeChangeBossRep* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TDefineChallengeChangeBossRsp</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/DefineChallenge.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TDefineChallengeChangeBossRsp : public ::google::protobuf::Message {
 public:
  TDefineChallengeChangeBossRsp();
  virtual ~TDefineChallengeChangeBossRsp();

  TDefineChallengeChangeBossRsp(const TDefineChallengeChangeBossRsp& from);

  inline TDefineChallengeChangeBossRsp& operator=(const TDefineChallengeChangeBossRsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TDefineChallengeChangeBossRsp& default_instance();

  void Swap(TDefineChallengeChangeBossRsp* other);

  // implements Message ----------------------------------------------

  TDefineChallengeChangeBossRsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TDefineChallengeChangeBossRsp& from);
  void MergeFrom(const TDefineChallengeChangeBossRsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .pb.TDefineChallengeBossInfo BossInfo = 1;
  inline bool has_bossinfo() const;
  inline void clear_bossinfo();
  static const int kBossInfoFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TDefineChallengeChangeBossRsp</name>
  	<Function>
  		<name>bossinfo</name>
  		<replaceName>BossInfo</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_bossinfo</name>
  		<replaceName>BossInfo</replaceName>
  		<handler>descripter = pb_set_message_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_allocated_bossinfo</name>
  		<replaceName>BossInfo</replaceName>
  		<handler>descripter = pb_set_message_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_bossinfo</name>
  		<replaceName>BossInfo</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TDefineChallengeBossInfo& bossinfo() const;
  inline ::pb::TDefineChallengeBossInfo* mutable_bossinfo();
  inline ::pb::TDefineChallengeBossInfo* release_bossinfo();
  inline void set_allocated_bossinfo(::pb::TDefineChallengeBossInfo* bossinfo);

  // @@protoc_insertion_point(class_scope:pb.TDefineChallengeChangeBossRsp)
 private:
  inline void set_has_bossinfo();
  inline void clear_has_bossinfo();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::pb::TDefineChallengeBossInfo* bossinfo_;
  friend void  protobuf_AddDesc_net_2fDefineChallenge_2eproto();
  friend void protobuf_AssignDesc_net_2fDefineChallenge_2eproto();
  friend void protobuf_ShutdownFile_net_2fDefineChallenge_2eproto();

  void InitAsDefaultInstance();
  static TDefineChallengeChangeBossRsp* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TDefineChallengeGetTaskListRep</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/DefineChallenge.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TDefineChallengeGetTaskListRep : public ::google::protobuf::Message {
 public:
  TDefineChallengeGetTaskListRep();
  virtual ~TDefineChallengeGetTaskListRep();

  TDefineChallengeGetTaskListRep(const TDefineChallengeGetTaskListRep& from);

  inline TDefineChallengeGetTaskListRep& operator=(const TDefineChallengeGetTaskListRep& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TDefineChallengeGetTaskListRep& default_instance();

  void Swap(TDefineChallengeGetTaskListRep* other);

  // implements Message ----------------------------------------------

  TDefineChallengeGetTaskListRep* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TDefineChallengeGetTaskListRep& from);
  void MergeFrom(const TDefineChallengeGetTaskListRep& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 BossId = 1;
  inline bool has_bossid() const;
  inline void clear_bossid();
  static const int kBossIdFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TDefineChallengeGetTaskListRep</name>
  	<Function>
  		<name>bossid</name>
  		<replaceName>BossId</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_bossid</name>
  		<replaceName>BossId</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_bossid</name>
  		<replaceName>BossId</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 bossid() const;
  inline void set_bossid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:pb.TDefineChallengeGetTaskListRep)
 private:
  inline void set_has_bossid();
  inline void clear_has_bossid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 bossid_;
  friend void  protobuf_AddDesc_net_2fDefineChallenge_2eproto();
  friend void protobuf_AssignDesc_net_2fDefineChallenge_2eproto();
  friend void protobuf_ShutdownFile_net_2fDefineChallenge_2eproto();

  void InitAsDefaultInstance();
  static TDefineChallengeGetTaskListRep* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TDefineChallengeGetTaskListRsp</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/DefineChallenge.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TDefineChallengeGetTaskListRsp : public ::google::protobuf::Message {
 public:
  TDefineChallengeGetTaskListRsp();
  virtual ~TDefineChallengeGetTaskListRsp();

  TDefineChallengeGetTaskListRsp(const TDefineChallengeGetTaskListRsp& from);

  inline TDefineChallengeGetTaskListRsp& operator=(const TDefineChallengeGetTaskListRsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TDefineChallengeGetTaskListRsp& default_instance();

  void Swap(TDefineChallengeGetTaskListRsp* other);

  // implements Message ----------------------------------------------

  TDefineChallengeGetTaskListRsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TDefineChallengeGetTaskListRsp& from);
  void MergeFrom(const TDefineChallengeGetTaskListRsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .pb.TDefineChallengeTaskInfo TaskInfo = 1;
  inline int taskinfo_size() const;
  inline void clear_taskinfo();
  static const int kTaskInfoFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TDefineChallengeGetTaskListRsp</name>
  	<Function>
  		<name>taskinfo</name>
  		<replaceName>TaskInfo</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_taskinfo</name>
  		<replaceName>TaskInfo</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_taskinfo</name>
  		<replaceName>TaskInfo</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_taskinfo</name>
  		<replaceName>TaskInfo</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>taskinfo_size</name>
  		<replaceName>TaskInfo</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TDefineChallengeTaskInfo& taskinfo(int index) const;
  inline ::pb::TDefineChallengeTaskInfo* mutable_taskinfo(int index);
  inline ::pb::TDefineChallengeTaskInfo* add_taskinfo();
  inline const ::google::protobuf::RepeatedPtrField< ::pb::TDefineChallengeTaskInfo >&
      taskinfo() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb::TDefineChallengeTaskInfo >*
      mutable_taskinfo();

  // @@protoc_insertion_point(class_scope:pb.TDefineChallengeGetTaskListRsp)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::pb::TDefineChallengeTaskInfo > taskinfo_;
  friend void  protobuf_AddDesc_net_2fDefineChallenge_2eproto();
  friend void protobuf_AssignDesc_net_2fDefineChallenge_2eproto();
  friend void protobuf_ShutdownFile_net_2fDefineChallenge_2eproto();

  void InitAsDefaultInstance();
  static TDefineChallengeGetTaskListRsp* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TDefineChallengeGetShopInfoRsp</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/DefineChallenge.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TDefineChallengeGetShopInfoRsp : public ::google::protobuf::Message {
 public:
  TDefineChallengeGetShopInfoRsp();
  virtual ~TDefineChallengeGetShopInfoRsp();

  TDefineChallengeGetShopInfoRsp(const TDefineChallengeGetShopInfoRsp& from);

  inline TDefineChallengeGetShopInfoRsp& operator=(const TDefineChallengeGetShopInfoRsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TDefineChallengeGetShopInfoRsp& default_instance();

  void Swap(TDefineChallengeGetShopInfoRsp* other);

  // implements Message ----------------------------------------------

  TDefineChallengeGetShopInfoRsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TDefineChallengeGetShopInfoRsp& from);
  void MergeFrom(const TDefineChallengeGetShopInfoRsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .pb.TDefineChallengeGiftInfo GiftInfoArr = 1;
  inline int giftinfoarr_size() const;
  inline void clear_giftinfoarr();
  static const int kGiftInfoArrFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TDefineChallengeGetShopInfoRsp</name>
  	<Function>
  		<name>giftinfoarr</name>
  		<replaceName>GiftInfoArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_giftinfoarr</name>
  		<replaceName>GiftInfoArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_giftinfoarr</name>
  		<replaceName>GiftInfoArr</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_giftinfoarr</name>
  		<replaceName>GiftInfoArr</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>giftinfoarr_size</name>
  		<replaceName>GiftInfoArr</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TDefineChallengeGiftInfo& giftinfoarr(int index) const;
  inline ::pb::TDefineChallengeGiftInfo* mutable_giftinfoarr(int index);
  inline ::pb::TDefineChallengeGiftInfo* add_giftinfoarr();
  inline const ::google::protobuf::RepeatedPtrField< ::pb::TDefineChallengeGiftInfo >&
      giftinfoarr() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb::TDefineChallengeGiftInfo >*
      mutable_giftinfoarr();

  // @@protoc_insertion_point(class_scope:pb.TDefineChallengeGetShopInfoRsp)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::pb::TDefineChallengeGiftInfo > giftinfoarr_;
  friend void  protobuf_AddDesc_net_2fDefineChallenge_2eproto();
  friend void protobuf_AssignDesc_net_2fDefineChallenge_2eproto();
  friend void protobuf_ShutdownFile_net_2fDefineChallenge_2eproto();

  void InitAsDefaultInstance();
  static TDefineChallengeGetShopInfoRsp* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TDefineChallengeExchangeTimeLimitGiftRep</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/DefineChallenge.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TDefineChallengeExchangeTimeLimitGiftRep : public ::google::protobuf::Message {
 public:
  TDefineChallengeExchangeTimeLimitGiftRep();
  virtual ~TDefineChallengeExchangeTimeLimitGiftRep();

  TDefineChallengeExchangeTimeLimitGiftRep(const TDefineChallengeExchangeTimeLimitGiftRep& from);

  inline TDefineChallengeExchangeTimeLimitGiftRep& operator=(const TDefineChallengeExchangeTimeLimitGiftRep& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TDefineChallengeExchangeTimeLimitGiftRep& default_instance();

  void Swap(TDefineChallengeExchangeTimeLimitGiftRep* other);

  // implements Message ----------------------------------------------

  TDefineChallengeExchangeTimeLimitGiftRep* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TDefineChallengeExchangeTimeLimitGiftRep& from);
  void MergeFrom(const TDefineChallengeExchangeTimeLimitGiftRep& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 GiftId = 1;
  inline bool has_giftid() const;
  inline void clear_giftid();
  static const int kGiftIdFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TDefineChallengeExchangeTimeLimitGiftRep</name>
  	<Function>
  		<name>giftid</name>
  		<replaceName>GiftId</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_giftid</name>
  		<replaceName>GiftId</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_giftid</name>
  		<replaceName>GiftId</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 giftid() const;
  inline void set_giftid(::google::protobuf::uint32 value);

  // optional uint32 BuyNum = 2;
  inline bool has_buynum() const;
  inline void clear_buynum();
  static const int kBuyNumFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TDefineChallengeExchangeTimeLimitGiftRep</name>
  	<Function>
  		<name>buynum</name>
  		<replaceName>BuyNum</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_buynum</name>
  		<replaceName>BuyNum</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_buynum</name>
  		<replaceName>BuyNum</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 buynum() const;
  inline void set_buynum(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:pb.TDefineChallengeExchangeTimeLimitGiftRep)
 private:
  inline void set_has_giftid();
  inline void clear_has_giftid();
  inline void set_has_buynum();
  inline void clear_has_buynum();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 giftid_;
  ::google::protobuf::uint32 buynum_;
  friend void  protobuf_AddDesc_net_2fDefineChallenge_2eproto();
  friend void protobuf_AssignDesc_net_2fDefineChallenge_2eproto();
  friend void protobuf_ShutdownFile_net_2fDefineChallenge_2eproto();

  void InitAsDefaultInstance();
  static TDefineChallengeExchangeTimeLimitGiftRep* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TDefineChallengeExchangeTimeLimitGiftRsp</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/DefineChallenge.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TDefineChallengeExchangeTimeLimitGiftRsp : public ::google::protobuf::Message {
 public:
  TDefineChallengeExchangeTimeLimitGiftRsp();
  virtual ~TDefineChallengeExchangeTimeLimitGiftRsp();

  TDefineChallengeExchangeTimeLimitGiftRsp(const TDefineChallengeExchangeTimeLimitGiftRsp& from);

  inline TDefineChallengeExchangeTimeLimitGiftRsp& operator=(const TDefineChallengeExchangeTimeLimitGiftRsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TDefineChallengeExchangeTimeLimitGiftRsp& default_instance();

  void Swap(TDefineChallengeExchangeTimeLimitGiftRsp* other);

  // implements Message ----------------------------------------------

  TDefineChallengeExchangeTimeLimitGiftRsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TDefineChallengeExchangeTimeLimitGiftRsp& from);
  void MergeFrom(const TDefineChallengeExchangeTimeLimitGiftRsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .pb.TCommonReward Reward = 1;
  inline int reward_size() const;
  inline void clear_reward();
  static const int kRewardFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TDefineChallengeExchangeTimeLimitGiftRsp</name>
  	<Function>
  		<name>reward</name>
  		<replaceName>Reward</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_reward</name>
  		<replaceName>Reward</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_reward</name>
  		<replaceName>Reward</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_reward</name>
  		<replaceName>Reward</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>reward_size</name>
  		<replaceName>Reward</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TCommonReward& reward(int index) const;
  inline ::pb::TCommonReward* mutable_reward(int index);
  inline ::pb::TCommonReward* add_reward();
  inline const ::google::protobuf::RepeatedPtrField< ::pb::TCommonReward >&
      reward() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb::TCommonReward >*
      mutable_reward();

  // optional uint32 BuyNum = 2;
  inline bool has_buynum() const;
  inline void clear_buynum();
  static const int kBuyNumFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TDefineChallengeExchangeTimeLimitGiftRsp</name>
  	<Function>
  		<name>buynum</name>
  		<replaceName>BuyNum</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_buynum</name>
  		<replaceName>BuyNum</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_buynum</name>
  		<replaceName>BuyNum</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 buynum() const;
  inline void set_buynum(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:pb.TDefineChallengeExchangeTimeLimitGiftRsp)
 private:
  inline void set_has_buynum();
  inline void clear_has_buynum();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::pb::TCommonReward > reward_;
  ::google::protobuf::uint32 buynum_;
  friend void  protobuf_AddDesc_net_2fDefineChallenge_2eproto();
  friend void protobuf_AssignDesc_net_2fDefineChallenge_2eproto();
  friend void protobuf_ShutdownFile_net_2fDefineChallenge_2eproto();

  void InitAsDefaultInstance();
  static TDefineChallengeExchangeTimeLimitGiftRsp* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TDefineChallengeSaveDebuffRep</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/DefineChallenge.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TDefineChallengeSaveDebuffRep : public ::google::protobuf::Message {
 public:
  TDefineChallengeSaveDebuffRep();
  virtual ~TDefineChallengeSaveDebuffRep();

  TDefineChallengeSaveDebuffRep(const TDefineChallengeSaveDebuffRep& from);

  inline TDefineChallengeSaveDebuffRep& operator=(const TDefineChallengeSaveDebuffRep& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TDefineChallengeSaveDebuffRep& default_instance();

  void Swap(TDefineChallengeSaveDebuffRep* other);

  // implements Message ----------------------------------------------

  TDefineChallengeSaveDebuffRep* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TDefineChallengeSaveDebuffRep& from);
  void MergeFrom(const TDefineChallengeSaveDebuffRep& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 BossId = 1;
  inline bool has_bossid() const;
  inline void clear_bossid();
  static const int kBossIdFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TDefineChallengeSaveDebuffRep</name>
  	<Function>
  		<name>bossid</name>
  		<replaceName>BossId</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_bossid</name>
  		<replaceName>BossId</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_bossid</name>
  		<replaceName>BossId</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 bossid() const;
  inline void set_bossid(::google::protobuf::uint32 value);

  // repeated uint32 DebuffArr = 2;
  inline int debuffarr_size() const;
  inline void clear_debuffarr();
  static const int kDebuffArrFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TDefineChallengeSaveDebuffRep</name>
  	<Function>
  		<name>debuffarr</name>
  		<replaceName>DebuffArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_debuffarr</name>
  		<replaceName>DebuffArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_debuffarr</name>
  		<replaceName>DebuffArr</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_debuffarr</name>
  		<replaceName>DebuffArr</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>debuffarr_size</name>
  		<replaceName>DebuffArr</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 debuffarr(int index) const;
  inline void set_debuffarr(int index, ::google::protobuf::uint32 value);
  inline void add_debuffarr(::google::protobuf::uint32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      debuffarr() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_debuffarr();

  // @@protoc_insertion_point(class_scope:pb.TDefineChallengeSaveDebuffRep)
 private:
  inline void set_has_bossid();
  inline void clear_has_bossid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > debuffarr_;
  ::google::protobuf::uint32 bossid_;
  friend void  protobuf_AddDesc_net_2fDefineChallenge_2eproto();
  friend void protobuf_AssignDesc_net_2fDefineChallenge_2eproto();
  friend void protobuf_ShutdownFile_net_2fDefineChallenge_2eproto();

  void InitAsDefaultInstance();
  static TDefineChallengeSaveDebuffRep* default_instance_;
};
// ===================================================================


// ===================================================================

// TDefineChallengeExpectProcess

// optional .pb.EDefineChallengeStage Stage = 1;
inline bool TDefineChallengeExpectProcess::has_stage() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TDefineChallengeExpectProcess::set_has_stage() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TDefineChallengeExpectProcess::clear_has_stage() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TDefineChallengeExpectProcess::clear_stage() {
  stage_ = 0;
  clear_has_stage();
}
inline ::pb::EDefineChallengeStage TDefineChallengeExpectProcess::stage() const {
  // @@protoc_insertion_point(field_get:pb.TDefineChallengeExpectProcess.Stage)
  return static_cast< ::pb::EDefineChallengeStage >(stage_);
}
inline void TDefineChallengeExpectProcess::set_stage(::pb::EDefineChallengeStage value) {
  assert(::pb::EDefineChallengeStage_IsValid(value));
  set_has_stage();
  stage_ = value;
  // @@protoc_insertion_point(field_set:pb.TDefineChallengeExpectProcess.Stage)
}

// optional uint64 BegTime = 2;
inline bool TDefineChallengeExpectProcess::has_begtime() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TDefineChallengeExpectProcess::set_has_begtime() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TDefineChallengeExpectProcess::clear_has_begtime() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TDefineChallengeExpectProcess::clear_begtime() {
  begtime_ = GOOGLE_ULONGLONG(0);
  clear_has_begtime();
}
inline ::google::protobuf::uint64 TDefineChallengeExpectProcess::begtime() const {
  // @@protoc_insertion_point(field_get:pb.TDefineChallengeExpectProcess.BegTime)
  return begtime_;
}
inline void TDefineChallengeExpectProcess::set_begtime(::google::protobuf::uint64 value) {
  set_has_begtime();
  begtime_ = value;
  // @@protoc_insertion_point(field_set:pb.TDefineChallengeExpectProcess.BegTime)
}

// optional uint64 EndTime = 3;
inline bool TDefineChallengeExpectProcess::has_endtime() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void TDefineChallengeExpectProcess::set_has_endtime() {
  _has_bits_[0] |= 0x00000004u;
}
inline void TDefineChallengeExpectProcess::clear_has_endtime() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void TDefineChallengeExpectProcess::clear_endtime() {
  endtime_ = GOOGLE_ULONGLONG(0);
  clear_has_endtime();
}
inline ::google::protobuf::uint64 TDefineChallengeExpectProcess::endtime() const {
  // @@protoc_insertion_point(field_get:pb.TDefineChallengeExpectProcess.EndTime)
  return endtime_;
}
inline void TDefineChallengeExpectProcess::set_endtime(::google::protobuf::uint64 value) {
  set_has_endtime();
  endtime_ = value;
  // @@protoc_insertion_point(field_set:pb.TDefineChallengeExpectProcess.EndTime)
}

// -------------------------------------------------------------------

// TDefineChallengeActualProcess

// optional .pb.TDefineChallengeExpectProcess ExpectProcess = 1;
inline bool TDefineChallengeActualProcess::has_expectprocess() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TDefineChallengeActualProcess::set_has_expectprocess() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TDefineChallengeActualProcess::clear_has_expectprocess() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TDefineChallengeActualProcess::clear_expectprocess() {
  if (expectprocess_ != NULL) expectprocess_->::pb::TDefineChallengeExpectProcess::Clear();
  clear_has_expectprocess();
}
inline const ::pb::TDefineChallengeExpectProcess& TDefineChallengeActualProcess::expectprocess() const {
  // @@protoc_insertion_point(field_get:pb.TDefineChallengeActualProcess.ExpectProcess)
  return expectprocess_ != NULL ? *expectprocess_ : *default_instance_->expectprocess_;
}
inline ::pb::TDefineChallengeExpectProcess* TDefineChallengeActualProcess::mutable_expectprocess() {
  set_has_expectprocess();
  if (expectprocess_ == NULL) expectprocess_ = new ::pb::TDefineChallengeExpectProcess;
  // @@protoc_insertion_point(field_mutable:pb.TDefineChallengeActualProcess.ExpectProcess)
  return expectprocess_;
}
inline ::pb::TDefineChallengeExpectProcess* TDefineChallengeActualProcess::release_expectprocess() {
  clear_has_expectprocess();
  ::pb::TDefineChallengeExpectProcess* temp = expectprocess_;
  expectprocess_ = NULL;
  return temp;
}
inline void TDefineChallengeActualProcess::set_allocated_expectprocess(::pb::TDefineChallengeExpectProcess* expectprocess) {
  delete expectprocess_;
  expectprocess_ = expectprocess;
  if (expectprocess) {
    set_has_expectprocess();
  } else {
    clear_has_expectprocess();
  }
  // @@protoc_insertion_point(field_set_allocated:pb.TDefineChallengeActualProcess.ExpectProcess)
}

// optional uint64 DoneTime = 2;
inline bool TDefineChallengeActualProcess::has_donetime() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TDefineChallengeActualProcess::set_has_donetime() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TDefineChallengeActualProcess::clear_has_donetime() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TDefineChallengeActualProcess::clear_donetime() {
  donetime_ = GOOGLE_ULONGLONG(0);
  clear_has_donetime();
}
inline ::google::protobuf::uint64 TDefineChallengeActualProcess::donetime() const {
  // @@protoc_insertion_point(field_get:pb.TDefineChallengeActualProcess.DoneTime)
  return donetime_;
}
inline void TDefineChallengeActualProcess::set_donetime(::google::protobuf::uint64 value) {
  set_has_donetime();
  donetime_ = value;
  // @@protoc_insertion_point(field_set:pb.TDefineChallengeActualProcess.DoneTime)
}

// -------------------------------------------------------------------

// TDefineChallengeExpectBossProcess

// repeated uint32 BossId = 1;
inline int TDefineChallengeExpectBossProcess::bossid_size() const {
  return bossid_.size();
}
inline void TDefineChallengeExpectBossProcess::clear_bossid() {
  bossid_.Clear();
}
inline ::google::protobuf::uint32 TDefineChallengeExpectBossProcess::bossid(int index) const {
  // @@protoc_insertion_point(field_get:pb.TDefineChallengeExpectBossProcess.BossId)
  return bossid_.Get(index);
}
inline void TDefineChallengeExpectBossProcess::set_bossid(int index, ::google::protobuf::uint32 value) {
  bossid_.Set(index, value);
  // @@protoc_insertion_point(field_set:pb.TDefineChallengeExpectBossProcess.BossId)
}
inline void TDefineChallengeExpectBossProcess::add_bossid(::google::protobuf::uint32 value) {
  bossid_.Add(value);
  // @@protoc_insertion_point(field_add:pb.TDefineChallengeExpectBossProcess.BossId)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
TDefineChallengeExpectBossProcess::bossid() const {
  // @@protoc_insertion_point(field_list:pb.TDefineChallengeExpectBossProcess.BossId)
  return bossid_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
TDefineChallengeExpectBossProcess::mutable_bossid() {
  // @@protoc_insertion_point(field_mutable_list:pb.TDefineChallengeExpectBossProcess.BossId)
  return &bossid_;
}

// optional uint64 BegTime = 2;
inline bool TDefineChallengeExpectBossProcess::has_begtime() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TDefineChallengeExpectBossProcess::set_has_begtime() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TDefineChallengeExpectBossProcess::clear_has_begtime() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TDefineChallengeExpectBossProcess::clear_begtime() {
  begtime_ = GOOGLE_ULONGLONG(0);
  clear_has_begtime();
}
inline ::google::protobuf::uint64 TDefineChallengeExpectBossProcess::begtime() const {
  // @@protoc_insertion_point(field_get:pb.TDefineChallengeExpectBossProcess.BegTime)
  return begtime_;
}
inline void TDefineChallengeExpectBossProcess::set_begtime(::google::protobuf::uint64 value) {
  set_has_begtime();
  begtime_ = value;
  // @@protoc_insertion_point(field_set:pb.TDefineChallengeExpectBossProcess.BegTime)
}

// optional uint64 EndTime = 3;
inline bool TDefineChallengeExpectBossProcess::has_endtime() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void TDefineChallengeExpectBossProcess::set_has_endtime() {
  _has_bits_[0] |= 0x00000004u;
}
inline void TDefineChallengeExpectBossProcess::clear_has_endtime() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void TDefineChallengeExpectBossProcess::clear_endtime() {
  endtime_ = GOOGLE_ULONGLONG(0);
  clear_has_endtime();
}
inline ::google::protobuf::uint64 TDefineChallengeExpectBossProcess::endtime() const {
  // @@protoc_insertion_point(field_get:pb.TDefineChallengeExpectBossProcess.EndTime)
  return endtime_;
}
inline void TDefineChallengeExpectBossProcess::set_endtime(::google::protobuf::uint64 value) {
  set_has_endtime();
  endtime_ = value;
  // @@protoc_insertion_point(field_set:pb.TDefineChallengeExpectBossProcess.EndTime)
}

// -------------------------------------------------------------------

// TDefineChallengeBattlePosInfo

// optional uint32 Pos = 1;
inline bool TDefineChallengeBattlePosInfo::has_pos() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TDefineChallengeBattlePosInfo::set_has_pos() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TDefineChallengeBattlePosInfo::clear_has_pos() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TDefineChallengeBattlePosInfo::clear_pos() {
  pos_ = 0u;
  clear_has_pos();
}
inline ::google::protobuf::uint32 TDefineChallengeBattlePosInfo::pos() const {
  // @@protoc_insertion_point(field_get:pb.TDefineChallengeBattlePosInfo.Pos)
  return pos_;
}
inline void TDefineChallengeBattlePosInfo::set_pos(::google::protobuf::uint32 value) {
  set_has_pos();
  pos_ = value;
  // @@protoc_insertion_point(field_set:pb.TDefineChallengeBattlePosInfo.Pos)
}

// optional uint32 Hid = 2;
inline bool TDefineChallengeBattlePosInfo::has_hid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TDefineChallengeBattlePosInfo::set_has_hid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TDefineChallengeBattlePosInfo::clear_has_hid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TDefineChallengeBattlePosInfo::clear_hid() {
  hid_ = 0u;
  clear_has_hid();
}
inline ::google::protobuf::uint32 TDefineChallengeBattlePosInfo::hid() const {
  // @@protoc_insertion_point(field_get:pb.TDefineChallengeBattlePosInfo.Hid)
  return hid_;
}
inline void TDefineChallengeBattlePosInfo::set_hid(::google::protobuf::uint32 value) {
  set_has_hid();
  hid_ = value;
  // @@protoc_insertion_point(field_set:pb.TDefineChallengeBattlePosInfo.Hid)
}

// optional uint32 Star = 3;
inline bool TDefineChallengeBattlePosInfo::has_star() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void TDefineChallengeBattlePosInfo::set_has_star() {
  _has_bits_[0] |= 0x00000004u;
}
inline void TDefineChallengeBattlePosInfo::clear_has_star() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void TDefineChallengeBattlePosInfo::clear_star() {
  star_ = 0u;
  clear_has_star();
}
inline ::google::protobuf::uint32 TDefineChallengeBattlePosInfo::star() const {
  // @@protoc_insertion_point(field_get:pb.TDefineChallengeBattlePosInfo.Star)
  return star_;
}
inline void TDefineChallengeBattlePosInfo::set_star(::google::protobuf::uint32 value) {
  set_has_star();
  star_ = value;
  // @@protoc_insertion_point(field_set:pb.TDefineChallengeBattlePosInfo.Star)
}

// optional uint32 Aptitude = 4;
inline bool TDefineChallengeBattlePosInfo::has_aptitude() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void TDefineChallengeBattlePosInfo::set_has_aptitude() {
  _has_bits_[0] |= 0x00000008u;
}
inline void TDefineChallengeBattlePosInfo::clear_has_aptitude() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void TDefineChallengeBattlePosInfo::clear_aptitude() {
  aptitude_ = 0u;
  clear_has_aptitude();
}
inline ::google::protobuf::uint32 TDefineChallengeBattlePosInfo::aptitude() const {
  // @@protoc_insertion_point(field_get:pb.TDefineChallengeBattlePosInfo.Aptitude)
  return aptitude_;
}
inline void TDefineChallengeBattlePosInfo::set_aptitude(::google::protobuf::uint32 value) {
  set_has_aptitude();
  aptitude_ = value;
  // @@protoc_insertion_point(field_set:pb.TDefineChallengeBattlePosInfo.Aptitude)
}

// optional uint32 Htid = 5;
inline bool TDefineChallengeBattlePosInfo::has_htid() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void TDefineChallengeBattlePosInfo::set_has_htid() {
  _has_bits_[0] |= 0x00000010u;
}
inline void TDefineChallengeBattlePosInfo::clear_has_htid() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void TDefineChallengeBattlePosInfo::clear_htid() {
  htid_ = 0u;
  clear_has_htid();
}
inline ::google::protobuf::uint32 TDefineChallengeBattlePosInfo::htid() const {
  // @@protoc_insertion_point(field_get:pb.TDefineChallengeBattlePosInfo.Htid)
  return htid_;
}
inline void TDefineChallengeBattlePosInfo::set_htid(::google::protobuf::uint32 value) {
  set_has_htid();
  htid_ = value;
  // @@protoc_insertion_point(field_set:pb.TDefineChallengeBattlePosInfo.Htid)
}

// -------------------------------------------------------------------

// TDefineChallengeFmtInfo

// optional uint32 BossId = 1;
inline bool TDefineChallengeFmtInfo::has_bossid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TDefineChallengeFmtInfo::set_has_bossid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TDefineChallengeFmtInfo::clear_has_bossid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TDefineChallengeFmtInfo::clear_bossid() {
  bossid_ = 0u;
  clear_has_bossid();
}
inline ::google::protobuf::uint32 TDefineChallengeFmtInfo::bossid() const {
  // @@protoc_insertion_point(field_get:pb.TDefineChallengeFmtInfo.BossId)
  return bossid_;
}
inline void TDefineChallengeFmtInfo::set_bossid(::google::protobuf::uint32 value) {
  set_has_bossid();
  bossid_ = value;
  // @@protoc_insertion_point(field_set:pb.TDefineChallengeFmtInfo.BossId)
}

// repeated .pb.TDefineChallengeBattlePosInfo ArrPos = 2;
inline int TDefineChallengeFmtInfo::arrpos_size() const {
  return arrpos_.size();
}
inline void TDefineChallengeFmtInfo::clear_arrpos() {
  arrpos_.Clear();
}
inline const ::pb::TDefineChallengeBattlePosInfo& TDefineChallengeFmtInfo::arrpos(int index) const {
  // @@protoc_insertion_point(field_get:pb.TDefineChallengeFmtInfo.ArrPos)
  return arrpos_.Get(index);
}
inline ::pb::TDefineChallengeBattlePosInfo* TDefineChallengeFmtInfo::mutable_arrpos(int index) {
  // @@protoc_insertion_point(field_mutable:pb.TDefineChallengeFmtInfo.ArrPos)
  return arrpos_.Mutable(index);
}
inline ::pb::TDefineChallengeBattlePosInfo* TDefineChallengeFmtInfo::add_arrpos() {
  // @@protoc_insertion_point(field_add:pb.TDefineChallengeFmtInfo.ArrPos)
  return arrpos_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::TDefineChallengeBattlePosInfo >&
TDefineChallengeFmtInfo::arrpos() const {
  // @@protoc_insertion_point(field_list:pb.TDefineChallengeFmtInfo.ArrPos)
  return arrpos_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb::TDefineChallengeBattlePosInfo >*
TDefineChallengeFmtInfo::mutable_arrpos() {
  // @@protoc_insertion_point(field_mutable_list:pb.TDefineChallengeFmtInfo.ArrPos)
  return &arrpos_;
}

// -------------------------------------------------------------------

// TDefineChallengeRankInfo

// optional uint32 Rank = 1;
inline bool TDefineChallengeRankInfo::has_rank() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TDefineChallengeRankInfo::set_has_rank() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TDefineChallengeRankInfo::clear_has_rank() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TDefineChallengeRankInfo::clear_rank() {
  rank_ = 0u;
  clear_has_rank();
}
inline ::google::protobuf::uint32 TDefineChallengeRankInfo::rank() const {
  // @@protoc_insertion_point(field_get:pb.TDefineChallengeRankInfo.Rank)
  return rank_;
}
inline void TDefineChallengeRankInfo::set_rank(::google::protobuf::uint32 value) {
  set_has_rank();
  rank_ = value;
  // @@protoc_insertion_point(field_set:pb.TDefineChallengeRankInfo.Rank)
}

// optional uint32 Score = 2;
inline bool TDefineChallengeRankInfo::has_score() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TDefineChallengeRankInfo::set_has_score() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TDefineChallengeRankInfo::clear_has_score() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TDefineChallengeRankInfo::clear_score() {
  score_ = 0u;
  clear_has_score();
}
inline ::google::protobuf::uint32 TDefineChallengeRankInfo::score() const {
  // @@protoc_insertion_point(field_get:pb.TDefineChallengeRankInfo.Score)
  return score_;
}
inline void TDefineChallengeRankInfo::set_score(::google::protobuf::uint32 value) {
  set_has_score();
  score_ = value;
  // @@protoc_insertion_point(field_set:pb.TDefineChallengeRankInfo.Score)
}

// optional .pb.TUserSimpleInfo SimpleInfo = 3;
inline bool TDefineChallengeRankInfo::has_simpleinfo() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void TDefineChallengeRankInfo::set_has_simpleinfo() {
  _has_bits_[0] |= 0x00000004u;
}
inline void TDefineChallengeRankInfo::clear_has_simpleinfo() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void TDefineChallengeRankInfo::clear_simpleinfo() {
  if (simpleinfo_ != NULL) simpleinfo_->::pb::TUserSimpleInfo::Clear();
  clear_has_simpleinfo();
}
inline const ::pb::TUserSimpleInfo& TDefineChallengeRankInfo::simpleinfo() const {
  // @@protoc_insertion_point(field_get:pb.TDefineChallengeRankInfo.SimpleInfo)
  return simpleinfo_ != NULL ? *simpleinfo_ : *default_instance_->simpleinfo_;
}
inline ::pb::TUserSimpleInfo* TDefineChallengeRankInfo::mutable_simpleinfo() {
  set_has_simpleinfo();
  if (simpleinfo_ == NULL) simpleinfo_ = new ::pb::TUserSimpleInfo;
  // @@protoc_insertion_point(field_mutable:pb.TDefineChallengeRankInfo.SimpleInfo)
  return simpleinfo_;
}
inline ::pb::TUserSimpleInfo* TDefineChallengeRankInfo::release_simpleinfo() {
  clear_has_simpleinfo();
  ::pb::TUserSimpleInfo* temp = simpleinfo_;
  simpleinfo_ = NULL;
  return temp;
}
inline void TDefineChallengeRankInfo::set_allocated_simpleinfo(::pb::TUserSimpleInfo* simpleinfo) {
  delete simpleinfo_;
  simpleinfo_ = simpleinfo;
  if (simpleinfo) {
    set_has_simpleinfo();
  } else {
    clear_has_simpleinfo();
  }
  // @@protoc_insertion_point(field_set_allocated:pb.TDefineChallengeRankInfo.SimpleInfo)
}

// optional uint64 RecordTime = 4;
inline bool TDefineChallengeRankInfo::has_recordtime() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void TDefineChallengeRankInfo::set_has_recordtime() {
  _has_bits_[0] |= 0x00000008u;
}
inline void TDefineChallengeRankInfo::clear_has_recordtime() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void TDefineChallengeRankInfo::clear_recordtime() {
  recordtime_ = GOOGLE_ULONGLONG(0);
  clear_has_recordtime();
}
inline ::google::protobuf::uint64 TDefineChallengeRankInfo::recordtime() const {
  // @@protoc_insertion_point(field_get:pb.TDefineChallengeRankInfo.RecordTime)
  return recordtime_;
}
inline void TDefineChallengeRankInfo::set_recordtime(::google::protobuf::uint64 value) {
  set_has_recordtime();
  recordtime_ = value;
  // @@protoc_insertion_point(field_set:pb.TDefineChallengeRankInfo.RecordTime)
}

// optional uint64 Uid = 5;
inline bool TDefineChallengeRankInfo::has_uid() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void TDefineChallengeRankInfo::set_has_uid() {
  _has_bits_[0] |= 0x00000010u;
}
inline void TDefineChallengeRankInfo::clear_has_uid() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void TDefineChallengeRankInfo::clear_uid() {
  uid_ = GOOGLE_ULONGLONG(0);
  clear_has_uid();
}
inline ::google::protobuf::uint64 TDefineChallengeRankInfo::uid() const {
  // @@protoc_insertion_point(field_get:pb.TDefineChallengeRankInfo.Uid)
  return uid_;
}
inline void TDefineChallengeRankInfo::set_uid(::google::protobuf::uint64 value) {
  set_has_uid();
  uid_ = value;
  // @@protoc_insertion_point(field_set:pb.TDefineChallengeRankInfo.Uid)
}

// -------------------------------------------------------------------

// TDefineChallengeBossInfo

// optional uint32 BossId = 1;
inline bool TDefineChallengeBossInfo::has_bossid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TDefineChallengeBossInfo::set_has_bossid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TDefineChallengeBossInfo::clear_has_bossid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TDefineChallengeBossInfo::clear_bossid() {
  bossid_ = 0u;
  clear_has_bossid();
}
inline ::google::protobuf::uint32 TDefineChallengeBossInfo::bossid() const {
  // @@protoc_insertion_point(field_get:pb.TDefineChallengeBossInfo.BossId)
  return bossid_;
}
inline void TDefineChallengeBossInfo::set_bossid(::google::protobuf::uint32 value) {
  set_has_bossid();
  bossid_ = value;
  // @@protoc_insertion_point(field_set:pb.TDefineChallengeBossInfo.BossId)
}

// repeated uint32 DebuffArr = 2;
inline int TDefineChallengeBossInfo::debuffarr_size() const {
  return debuffarr_.size();
}
inline void TDefineChallengeBossInfo::clear_debuffarr() {
  debuffarr_.Clear();
}
inline ::google::protobuf::uint32 TDefineChallengeBossInfo::debuffarr(int index) const {
  // @@protoc_insertion_point(field_get:pb.TDefineChallengeBossInfo.DebuffArr)
  return debuffarr_.Get(index);
}
inline void TDefineChallengeBossInfo::set_debuffarr(int index, ::google::protobuf::uint32 value) {
  debuffarr_.Set(index, value);
  // @@protoc_insertion_point(field_set:pb.TDefineChallengeBossInfo.DebuffArr)
}
inline void TDefineChallengeBossInfo::add_debuffarr(::google::protobuf::uint32 value) {
  debuffarr_.Add(value);
  // @@protoc_insertion_point(field_add:pb.TDefineChallengeBossInfo.DebuffArr)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
TDefineChallengeBossInfo::debuffarr() const {
  // @@protoc_insertion_point(field_list:pb.TDefineChallengeBossInfo.DebuffArr)
  return debuffarr_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
TDefineChallengeBossInfo::mutable_debuffarr() {
  // @@protoc_insertion_point(field_mutable_list:pb.TDefineChallengeBossInfo.DebuffArr)
  return &debuffarr_;
}

// repeated uint32 BanHero = 3;
inline int TDefineChallengeBossInfo::banhero_size() const {
  return banhero_.size();
}
inline void TDefineChallengeBossInfo::clear_banhero() {
  banhero_.Clear();
}
inline ::google::protobuf::uint32 TDefineChallengeBossInfo::banhero(int index) const {
  // @@protoc_insertion_point(field_get:pb.TDefineChallengeBossInfo.BanHero)
  return banhero_.Get(index);
}
inline void TDefineChallengeBossInfo::set_banhero(int index, ::google::protobuf::uint32 value) {
  banhero_.Set(index, value);
  // @@protoc_insertion_point(field_set:pb.TDefineChallengeBossInfo.BanHero)
}
inline void TDefineChallengeBossInfo::add_banhero(::google::protobuf::uint32 value) {
  banhero_.Add(value);
  // @@protoc_insertion_point(field_add:pb.TDefineChallengeBossInfo.BanHero)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
TDefineChallengeBossInfo::banhero() const {
  // @@protoc_insertion_point(field_list:pb.TDefineChallengeBossInfo.BanHero)
  return banhero_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
TDefineChallengeBossInfo::mutable_banhero() {
  // @@protoc_insertion_point(field_mutable_list:pb.TDefineChallengeBossInfo.BanHero)
  return &banhero_;
}

// repeated uint32 DebuffArrUnlocked = 4;
inline int TDefineChallengeBossInfo::debuffarrunlocked_size() const {
  return debuffarrunlocked_.size();
}
inline void TDefineChallengeBossInfo::clear_debuffarrunlocked() {
  debuffarrunlocked_.Clear();
}
inline ::google::protobuf::uint32 TDefineChallengeBossInfo::debuffarrunlocked(int index) const {
  // @@protoc_insertion_point(field_get:pb.TDefineChallengeBossInfo.DebuffArrUnlocked)
  return debuffarrunlocked_.Get(index);
}
inline void TDefineChallengeBossInfo::set_debuffarrunlocked(int index, ::google::protobuf::uint32 value) {
  debuffarrunlocked_.Set(index, value);
  // @@protoc_insertion_point(field_set:pb.TDefineChallengeBossInfo.DebuffArrUnlocked)
}
inline void TDefineChallengeBossInfo::add_debuffarrunlocked(::google::protobuf::uint32 value) {
  debuffarrunlocked_.Add(value);
  // @@protoc_insertion_point(field_add:pb.TDefineChallengeBossInfo.DebuffArrUnlocked)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
TDefineChallengeBossInfo::debuffarrunlocked() const {
  // @@protoc_insertion_point(field_list:pb.TDefineChallengeBossInfo.DebuffArrUnlocked)
  return debuffarrunlocked_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
TDefineChallengeBossInfo::mutable_debuffarrunlocked() {
  // @@protoc_insertion_point(field_mutable_list:pb.TDefineChallengeBossInfo.DebuffArrUnlocked)
  return &debuffarrunlocked_;
}

// optional uint64 FightForce = 5;
inline bool TDefineChallengeBossInfo::has_fightforce() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void TDefineChallengeBossInfo::set_has_fightforce() {
  _has_bits_[0] |= 0x00000010u;
}
inline void TDefineChallengeBossInfo::clear_has_fightforce() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void TDefineChallengeBossInfo::clear_fightforce() {
  fightforce_ = GOOGLE_ULONGLONG(0);
  clear_has_fightforce();
}
inline ::google::protobuf::uint64 TDefineChallengeBossInfo::fightforce() const {
  // @@protoc_insertion_point(field_get:pb.TDefineChallengeBossInfo.FightForce)
  return fightforce_;
}
inline void TDefineChallengeBossInfo::set_fightforce(::google::protobuf::uint64 value) {
  set_has_fightforce();
  fightforce_ = value;
  // @@protoc_insertion_point(field_set:pb.TDefineChallengeBossInfo.FightForce)
}

// -------------------------------------------------------------------

// TDefineChallengeTaskInfo

// optional uint32 TaskId = 1;
inline bool TDefineChallengeTaskInfo::has_taskid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TDefineChallengeTaskInfo::set_has_taskid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TDefineChallengeTaskInfo::clear_has_taskid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TDefineChallengeTaskInfo::clear_taskid() {
  taskid_ = 0u;
  clear_has_taskid();
}
inline ::google::protobuf::uint32 TDefineChallengeTaskInfo::taskid() const {
  // @@protoc_insertion_point(field_get:pb.TDefineChallengeTaskInfo.TaskId)
  return taskid_;
}
inline void TDefineChallengeTaskInfo::set_taskid(::google::protobuf::uint32 value) {
  set_has_taskid();
  taskid_ = value;
  // @@protoc_insertion_point(field_set:pb.TDefineChallengeTaskInfo.TaskId)
}

// optional uint32 Num = 2;
inline bool TDefineChallengeTaskInfo::has_num() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TDefineChallengeTaskInfo::set_has_num() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TDefineChallengeTaskInfo::clear_has_num() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TDefineChallengeTaskInfo::clear_num() {
  num_ = 0u;
  clear_has_num();
}
inline ::google::protobuf::uint32 TDefineChallengeTaskInfo::num() const {
  // @@protoc_insertion_point(field_get:pb.TDefineChallengeTaskInfo.Num)
  return num_;
}
inline void TDefineChallengeTaskInfo::set_num(::google::protobuf::uint32 value) {
  set_has_num();
  num_ = value;
  // @@protoc_insertion_point(field_set:pb.TDefineChallengeTaskInfo.Num)
}

// optional uint64 RewardTime = 3;
inline bool TDefineChallengeTaskInfo::has_rewardtime() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void TDefineChallengeTaskInfo::set_has_rewardtime() {
  _has_bits_[0] |= 0x00000004u;
}
inline void TDefineChallengeTaskInfo::clear_has_rewardtime() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void TDefineChallengeTaskInfo::clear_rewardtime() {
  rewardtime_ = GOOGLE_ULONGLONG(0);
  clear_has_rewardtime();
}
inline ::google::protobuf::uint64 TDefineChallengeTaskInfo::rewardtime() const {
  // @@protoc_insertion_point(field_get:pb.TDefineChallengeTaskInfo.RewardTime)
  return rewardtime_;
}
inline void TDefineChallengeTaskInfo::set_rewardtime(::google::protobuf::uint64 value) {
  set_has_rewardtime();
  rewardtime_ = value;
  // @@protoc_insertion_point(field_set:pb.TDefineChallengeTaskInfo.RewardTime)
}

// -------------------------------------------------------------------

// TDefineChallengeGiftInfo

// optional uint32 Id = 1;
inline bool TDefineChallengeGiftInfo::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TDefineChallengeGiftInfo::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TDefineChallengeGiftInfo::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TDefineChallengeGiftInfo::clear_id() {
  id_ = 0u;
  clear_has_id();
}
inline ::google::protobuf::uint32 TDefineChallengeGiftInfo::id() const {
  // @@protoc_insertion_point(field_get:pb.TDefineChallengeGiftInfo.Id)
  return id_;
}
inline void TDefineChallengeGiftInfo::set_id(::google::protobuf::uint32 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:pb.TDefineChallengeGiftInfo.Id)
}

// optional uint32 BuyNum = 2;
inline bool TDefineChallengeGiftInfo::has_buynum() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TDefineChallengeGiftInfo::set_has_buynum() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TDefineChallengeGiftInfo::clear_has_buynum() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TDefineChallengeGiftInfo::clear_buynum() {
  buynum_ = 0u;
  clear_has_buynum();
}
inline ::google::protobuf::uint32 TDefineChallengeGiftInfo::buynum() const {
  // @@protoc_insertion_point(field_get:pb.TDefineChallengeGiftInfo.BuyNum)
  return buynum_;
}
inline void TDefineChallengeGiftInfo::set_buynum(::google::protobuf::uint32 value) {
  set_has_buynum();
  buynum_ = value;
  // @@protoc_insertion_point(field_set:pb.TDefineChallengeGiftInfo.BuyNum)
}

// -------------------------------------------------------------------

// TDefineChallengeOtherRankInfo

// optional .pb.TDefineChallengeBossInfo BossInfo = 1;
inline bool TDefineChallengeOtherRankInfo::has_bossinfo() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TDefineChallengeOtherRankInfo::set_has_bossinfo() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TDefineChallengeOtherRankInfo::clear_has_bossinfo() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TDefineChallengeOtherRankInfo::clear_bossinfo() {
  if (bossinfo_ != NULL) bossinfo_->::pb::TDefineChallengeBossInfo::Clear();
  clear_has_bossinfo();
}
inline const ::pb::TDefineChallengeBossInfo& TDefineChallengeOtherRankInfo::bossinfo() const {
  // @@protoc_insertion_point(field_get:pb.TDefineChallengeOtherRankInfo.BossInfo)
  return bossinfo_ != NULL ? *bossinfo_ : *default_instance_->bossinfo_;
}
inline ::pb::TDefineChallengeBossInfo* TDefineChallengeOtherRankInfo::mutable_bossinfo() {
  set_has_bossinfo();
  if (bossinfo_ == NULL) bossinfo_ = new ::pb::TDefineChallengeBossInfo;
  // @@protoc_insertion_point(field_mutable:pb.TDefineChallengeOtherRankInfo.BossInfo)
  return bossinfo_;
}
inline ::pb::TDefineChallengeBossInfo* TDefineChallengeOtherRankInfo::release_bossinfo() {
  clear_has_bossinfo();
  ::pb::TDefineChallengeBossInfo* temp = bossinfo_;
  bossinfo_ = NULL;
  return temp;
}
inline void TDefineChallengeOtherRankInfo::set_allocated_bossinfo(::pb::TDefineChallengeBossInfo* bossinfo) {
  delete bossinfo_;
  bossinfo_ = bossinfo;
  if (bossinfo) {
    set_has_bossinfo();
  } else {
    clear_has_bossinfo();
  }
  // @@protoc_insertion_point(field_set_allocated:pb.TDefineChallengeOtherRankInfo.BossInfo)
}

// optional uint32 score = 2;
inline bool TDefineChallengeOtherRankInfo::has_score() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TDefineChallengeOtherRankInfo::set_has_score() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TDefineChallengeOtherRankInfo::clear_has_score() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TDefineChallengeOtherRankInfo::clear_score() {
  score_ = 0u;
  clear_has_score();
}
inline ::google::protobuf::uint32 TDefineChallengeOtherRankInfo::score() const {
  // @@protoc_insertion_point(field_get:pb.TDefineChallengeOtherRankInfo.score)
  return score_;
}
inline void TDefineChallengeOtherRankInfo::set_score(::google::protobuf::uint32 value) {
  set_has_score();
  score_ = value;
  // @@protoc_insertion_point(field_set:pb.TDefineChallengeOtherRankInfo.score)
}

// repeated .pb.TDefineChallengeBattlePosInfo Fmt = 3;
inline int TDefineChallengeOtherRankInfo::fmt_size() const {
  return fmt_.size();
}
inline void TDefineChallengeOtherRankInfo::clear_fmt() {
  fmt_.Clear();
}
inline const ::pb::TDefineChallengeBattlePosInfo& TDefineChallengeOtherRankInfo::fmt(int index) const {
  // @@protoc_insertion_point(field_get:pb.TDefineChallengeOtherRankInfo.Fmt)
  return fmt_.Get(index);
}
inline ::pb::TDefineChallengeBattlePosInfo* TDefineChallengeOtherRankInfo::mutable_fmt(int index) {
  // @@protoc_insertion_point(field_mutable:pb.TDefineChallengeOtherRankInfo.Fmt)
  return fmt_.Mutable(index);
}
inline ::pb::TDefineChallengeBattlePosInfo* TDefineChallengeOtherRankInfo::add_fmt() {
  // @@protoc_insertion_point(field_add:pb.TDefineChallengeOtherRankInfo.Fmt)
  return fmt_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::TDefineChallengeBattlePosInfo >&
TDefineChallengeOtherRankInfo::fmt() const {
  // @@protoc_insertion_point(field_list:pb.TDefineChallengeOtherRankInfo.Fmt)
  return fmt_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb::TDefineChallengeBattlePosInfo >*
TDefineChallengeOtherRankInfo::mutable_fmt() {
  // @@protoc_insertion_point(field_mutable_list:pb.TDefineChallengeOtherRankInfo.Fmt)
  return &fmt_;
}

// -------------------------------------------------------------------

// TDefineChallengeGetTimeConfRsp

// repeated .pb.TDefineChallengeExpectProcess ArrExpectProcess = 1;
inline int TDefineChallengeGetTimeConfRsp::arrexpectprocess_size() const {
  return arrexpectprocess_.size();
}
inline void TDefineChallengeGetTimeConfRsp::clear_arrexpectprocess() {
  arrexpectprocess_.Clear();
}
inline const ::pb::TDefineChallengeExpectProcess& TDefineChallengeGetTimeConfRsp::arrexpectprocess(int index) const {
  // @@protoc_insertion_point(field_get:pb.TDefineChallengeGetTimeConfRsp.ArrExpectProcess)
  return arrexpectprocess_.Get(index);
}
inline ::pb::TDefineChallengeExpectProcess* TDefineChallengeGetTimeConfRsp::mutable_arrexpectprocess(int index) {
  // @@protoc_insertion_point(field_mutable:pb.TDefineChallengeGetTimeConfRsp.ArrExpectProcess)
  return arrexpectprocess_.Mutable(index);
}
inline ::pb::TDefineChallengeExpectProcess* TDefineChallengeGetTimeConfRsp::add_arrexpectprocess() {
  // @@protoc_insertion_point(field_add:pb.TDefineChallengeGetTimeConfRsp.ArrExpectProcess)
  return arrexpectprocess_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::TDefineChallengeExpectProcess >&
TDefineChallengeGetTimeConfRsp::arrexpectprocess() const {
  // @@protoc_insertion_point(field_list:pb.TDefineChallengeGetTimeConfRsp.ArrExpectProcess)
  return arrexpectprocess_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb::TDefineChallengeExpectProcess >*
TDefineChallengeGetTimeConfRsp::mutable_arrexpectprocess() {
  // @@protoc_insertion_point(field_mutable_list:pb.TDefineChallengeGetTimeConfRsp.ArrExpectProcess)
  return &arrexpectprocess_;
}

// optional bool FuncOpen = 2;
inline bool TDefineChallengeGetTimeConfRsp::has_funcopen() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TDefineChallengeGetTimeConfRsp::set_has_funcopen() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TDefineChallengeGetTimeConfRsp::clear_has_funcopen() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TDefineChallengeGetTimeConfRsp::clear_funcopen() {
  funcopen_ = false;
  clear_has_funcopen();
}
inline bool TDefineChallengeGetTimeConfRsp::funcopen() const {
  // @@protoc_insertion_point(field_get:pb.TDefineChallengeGetTimeConfRsp.FuncOpen)
  return funcopen_;
}
inline void TDefineChallengeGetTimeConfRsp::set_funcopen(bool value) {
  set_has_funcopen();
  funcopen_ = value;
  // @@protoc_insertion_point(field_set:pb.TDefineChallengeGetTimeConfRsp.FuncOpen)
}

// optional .pb.TDefineChallengeActualProcess ActualProcess = 3;
inline bool TDefineChallengeGetTimeConfRsp::has_actualprocess() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void TDefineChallengeGetTimeConfRsp::set_has_actualprocess() {
  _has_bits_[0] |= 0x00000004u;
}
inline void TDefineChallengeGetTimeConfRsp::clear_has_actualprocess() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void TDefineChallengeGetTimeConfRsp::clear_actualprocess() {
  if (actualprocess_ != NULL) actualprocess_->::pb::TDefineChallengeActualProcess::Clear();
  clear_has_actualprocess();
}
inline const ::pb::TDefineChallengeActualProcess& TDefineChallengeGetTimeConfRsp::actualprocess() const {
  // @@protoc_insertion_point(field_get:pb.TDefineChallengeGetTimeConfRsp.ActualProcess)
  return actualprocess_ != NULL ? *actualprocess_ : *default_instance_->actualprocess_;
}
inline ::pb::TDefineChallengeActualProcess* TDefineChallengeGetTimeConfRsp::mutable_actualprocess() {
  set_has_actualprocess();
  if (actualprocess_ == NULL) actualprocess_ = new ::pb::TDefineChallengeActualProcess;
  // @@protoc_insertion_point(field_mutable:pb.TDefineChallengeGetTimeConfRsp.ActualProcess)
  return actualprocess_;
}
inline ::pb::TDefineChallengeActualProcess* TDefineChallengeGetTimeConfRsp::release_actualprocess() {
  clear_has_actualprocess();
  ::pb::TDefineChallengeActualProcess* temp = actualprocess_;
  actualprocess_ = NULL;
  return temp;
}
inline void TDefineChallengeGetTimeConfRsp::set_allocated_actualprocess(::pb::TDefineChallengeActualProcess* actualprocess) {
  delete actualprocess_;
  actualprocess_ = actualprocess;
  if (actualprocess) {
    set_has_actualprocess();
  } else {
    clear_has_actualprocess();
  }
  // @@protoc_insertion_point(field_set_allocated:pb.TDefineChallengeGetTimeConfRsp.ActualProcess)
}

// optional .pb.TDefineChallengeExpectBossProcess ArrBossProcess = 4;
inline bool TDefineChallengeGetTimeConfRsp::has_arrbossprocess() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void TDefineChallengeGetTimeConfRsp::set_has_arrbossprocess() {
  _has_bits_[0] |= 0x00000008u;
}
inline void TDefineChallengeGetTimeConfRsp::clear_has_arrbossprocess() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void TDefineChallengeGetTimeConfRsp::clear_arrbossprocess() {
  if (arrbossprocess_ != NULL) arrbossprocess_->::pb::TDefineChallengeExpectBossProcess::Clear();
  clear_has_arrbossprocess();
}
inline const ::pb::TDefineChallengeExpectBossProcess& TDefineChallengeGetTimeConfRsp::arrbossprocess() const {
  // @@protoc_insertion_point(field_get:pb.TDefineChallengeGetTimeConfRsp.ArrBossProcess)
  return arrbossprocess_ != NULL ? *arrbossprocess_ : *default_instance_->arrbossprocess_;
}
inline ::pb::TDefineChallengeExpectBossProcess* TDefineChallengeGetTimeConfRsp::mutable_arrbossprocess() {
  set_has_arrbossprocess();
  if (arrbossprocess_ == NULL) arrbossprocess_ = new ::pb::TDefineChallengeExpectBossProcess;
  // @@protoc_insertion_point(field_mutable:pb.TDefineChallengeGetTimeConfRsp.ArrBossProcess)
  return arrbossprocess_;
}
inline ::pb::TDefineChallengeExpectBossProcess* TDefineChallengeGetTimeConfRsp::release_arrbossprocess() {
  clear_has_arrbossprocess();
  ::pb::TDefineChallengeExpectBossProcess* temp = arrbossprocess_;
  arrbossprocess_ = NULL;
  return temp;
}
inline void TDefineChallengeGetTimeConfRsp::set_allocated_arrbossprocess(::pb::TDefineChallengeExpectBossProcess* arrbossprocess) {
  delete arrbossprocess_;
  arrbossprocess_ = arrbossprocess;
  if (arrbossprocess) {
    set_has_arrbossprocess();
  } else {
    clear_has_arrbossprocess();
  }
  // @@protoc_insertion_point(field_set_allocated:pb.TDefineChallengeGetTimeConfRsp.ArrBossProcess)
}

// optional .pb.TDefineChallengeExpectBossProcess ActualBossProcess = 5;
inline bool TDefineChallengeGetTimeConfRsp::has_actualbossprocess() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void TDefineChallengeGetTimeConfRsp::set_has_actualbossprocess() {
  _has_bits_[0] |= 0x00000010u;
}
inline void TDefineChallengeGetTimeConfRsp::clear_has_actualbossprocess() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void TDefineChallengeGetTimeConfRsp::clear_actualbossprocess() {
  if (actualbossprocess_ != NULL) actualbossprocess_->::pb::TDefineChallengeExpectBossProcess::Clear();
  clear_has_actualbossprocess();
}
inline const ::pb::TDefineChallengeExpectBossProcess& TDefineChallengeGetTimeConfRsp::actualbossprocess() const {
  // @@protoc_insertion_point(field_get:pb.TDefineChallengeGetTimeConfRsp.ActualBossProcess)
  return actualbossprocess_ != NULL ? *actualbossprocess_ : *default_instance_->actualbossprocess_;
}
inline ::pb::TDefineChallengeExpectBossProcess* TDefineChallengeGetTimeConfRsp::mutable_actualbossprocess() {
  set_has_actualbossprocess();
  if (actualbossprocess_ == NULL) actualbossprocess_ = new ::pb::TDefineChallengeExpectBossProcess;
  // @@protoc_insertion_point(field_mutable:pb.TDefineChallengeGetTimeConfRsp.ActualBossProcess)
  return actualbossprocess_;
}
inline ::pb::TDefineChallengeExpectBossProcess* TDefineChallengeGetTimeConfRsp::release_actualbossprocess() {
  clear_has_actualbossprocess();
  ::pb::TDefineChallengeExpectBossProcess* temp = actualbossprocess_;
  actualbossprocess_ = NULL;
  return temp;
}
inline void TDefineChallengeGetTimeConfRsp::set_allocated_actualbossprocess(::pb::TDefineChallengeExpectBossProcess* actualbossprocess) {
  delete actualbossprocess_;
  actualbossprocess_ = actualbossprocess;
  if (actualbossprocess) {
    set_has_actualbossprocess();
  } else {
    clear_has_actualbossprocess();
  }
  // @@protoc_insertion_point(field_set_allocated:pb.TDefineChallengeGetTimeConfRsp.ActualBossProcess)
}

// -------------------------------------------------------------------

// TDefineChallengeGetBaseInfoRsp

// optional uint32 WarZoneId = 1;
inline bool TDefineChallengeGetBaseInfoRsp::has_warzoneid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TDefineChallengeGetBaseInfoRsp::set_has_warzoneid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TDefineChallengeGetBaseInfoRsp::clear_has_warzoneid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TDefineChallengeGetBaseInfoRsp::clear_warzoneid() {
  warzoneid_ = 0u;
  clear_has_warzoneid();
}
inline ::google::protobuf::uint32 TDefineChallengeGetBaseInfoRsp::warzoneid() const {
  // @@protoc_insertion_point(field_get:pb.TDefineChallengeGetBaseInfoRsp.WarZoneId)
  return warzoneid_;
}
inline void TDefineChallengeGetBaseInfoRsp::set_warzoneid(::google::protobuf::uint32 value) {
  set_has_warzoneid();
  warzoneid_ = value;
  // @@protoc_insertion_point(field_set:pb.TDefineChallengeGetBaseInfoRsp.WarZoneId)
}

// optional uint32 GroupId = 2;
inline bool TDefineChallengeGetBaseInfoRsp::has_groupid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TDefineChallengeGetBaseInfoRsp::set_has_groupid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TDefineChallengeGetBaseInfoRsp::clear_has_groupid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TDefineChallengeGetBaseInfoRsp::clear_groupid() {
  groupid_ = 0u;
  clear_has_groupid();
}
inline ::google::protobuf::uint32 TDefineChallengeGetBaseInfoRsp::groupid() const {
  // @@protoc_insertion_point(field_get:pb.TDefineChallengeGetBaseInfoRsp.GroupId)
  return groupid_;
}
inline void TDefineChallengeGetBaseInfoRsp::set_groupid(::google::protobuf::uint32 value) {
  set_has_groupid();
  groupid_ = value;
  // @@protoc_insertion_point(field_set:pb.TDefineChallengeGetBaseInfoRsp.GroupId)
}

// optional string SceneId = 3;
inline bool TDefineChallengeGetBaseInfoRsp::has_sceneid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void TDefineChallengeGetBaseInfoRsp::set_has_sceneid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void TDefineChallengeGetBaseInfoRsp::clear_has_sceneid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void TDefineChallengeGetBaseInfoRsp::clear_sceneid() {
  if (sceneid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    sceneid_->clear();
  }
  clear_has_sceneid();
}
inline const ::std::string& TDefineChallengeGetBaseInfoRsp::sceneid() const {
  // @@protoc_insertion_point(field_get:pb.TDefineChallengeGetBaseInfoRsp.SceneId)
  return *sceneid_;
}
inline void TDefineChallengeGetBaseInfoRsp::set_sceneid(const ::std::string& value) {
  set_has_sceneid();
  if (sceneid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    sceneid_ = new ::std::string;
  }
  sceneid_->assign(value);
  // @@protoc_insertion_point(field_set:pb.TDefineChallengeGetBaseInfoRsp.SceneId)
}
inline void TDefineChallengeGetBaseInfoRsp::set_sceneid(const char* value) {
  set_has_sceneid();
  if (sceneid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    sceneid_ = new ::std::string;
  }
  sceneid_->assign(value);
  // @@protoc_insertion_point(field_set_char:pb.TDefineChallengeGetBaseInfoRsp.SceneId)
}
inline void TDefineChallengeGetBaseInfoRsp::set_sceneid(const char* value, size_t size) {
  set_has_sceneid();
  if (sceneid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    sceneid_ = new ::std::string;
  }
  sceneid_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:pb.TDefineChallengeGetBaseInfoRsp.SceneId)
}
inline ::std::string* TDefineChallengeGetBaseInfoRsp::mutable_sceneid() {
  set_has_sceneid();
  if (sceneid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    sceneid_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:pb.TDefineChallengeGetBaseInfoRsp.SceneId)
  return sceneid_;
}
inline ::std::string* TDefineChallengeGetBaseInfoRsp::release_sceneid() {
  clear_has_sceneid();
  if (sceneid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = sceneid_;
    sceneid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void TDefineChallengeGetBaseInfoRsp::set_allocated_sceneid(::std::string* sceneid) {
  if (sceneid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete sceneid_;
  }
  if (sceneid) {
    set_has_sceneid();
    sceneid_ = sceneid;
  } else {
    clear_has_sceneid();
    sceneid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:pb.TDefineChallengeGetBaseInfoRsp.SceneId)
}

// optional uint64 SignTime = 4;
inline bool TDefineChallengeGetBaseInfoRsp::has_signtime() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void TDefineChallengeGetBaseInfoRsp::set_has_signtime() {
  _has_bits_[0] |= 0x00000008u;
}
inline void TDefineChallengeGetBaseInfoRsp::clear_has_signtime() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void TDefineChallengeGetBaseInfoRsp::clear_signtime() {
  signtime_ = GOOGLE_ULONGLONG(0);
  clear_has_signtime();
}
inline ::google::protobuf::uint64 TDefineChallengeGetBaseInfoRsp::signtime() const {
  // @@protoc_insertion_point(field_get:pb.TDefineChallengeGetBaseInfoRsp.SignTime)
  return signtime_;
}
inline void TDefineChallengeGetBaseInfoRsp::set_signtime(::google::protobuf::uint64 value) {
  set_has_signtime();
  signtime_ = value;
  // @@protoc_insertion_point(field_set:pb.TDefineChallengeGetBaseInfoRsp.SignTime)
}

// optional uint64 MaxFightForce = 5;
inline bool TDefineChallengeGetBaseInfoRsp::has_maxfightforce() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void TDefineChallengeGetBaseInfoRsp::set_has_maxfightforce() {
  _has_bits_[0] |= 0x00000010u;
}
inline void TDefineChallengeGetBaseInfoRsp::clear_has_maxfightforce() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void TDefineChallengeGetBaseInfoRsp::clear_maxfightforce() {
  maxfightforce_ = GOOGLE_ULONGLONG(0);
  clear_has_maxfightforce();
}
inline ::google::protobuf::uint64 TDefineChallengeGetBaseInfoRsp::maxfightforce() const {
  // @@protoc_insertion_point(field_get:pb.TDefineChallengeGetBaseInfoRsp.MaxFightForce)
  return maxfightforce_;
}
inline void TDefineChallengeGetBaseInfoRsp::set_maxfightforce(::google::protobuf::uint64 value) {
  set_has_maxfightforce();
  maxfightforce_ = value;
  // @@protoc_insertion_point(field_set:pb.TDefineChallengeGetBaseInfoRsp.MaxFightForce)
}

// optional uint32 GroupRank = 6;
inline bool TDefineChallengeGetBaseInfoRsp::has_grouprank() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void TDefineChallengeGetBaseInfoRsp::set_has_grouprank() {
  _has_bits_[0] |= 0x00000020u;
}
inline void TDefineChallengeGetBaseInfoRsp::clear_has_grouprank() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void TDefineChallengeGetBaseInfoRsp::clear_grouprank() {
  grouprank_ = 0u;
  clear_has_grouprank();
}
inline ::google::protobuf::uint32 TDefineChallengeGetBaseInfoRsp::grouprank() const {
  // @@protoc_insertion_point(field_get:pb.TDefineChallengeGetBaseInfoRsp.GroupRank)
  return grouprank_;
}
inline void TDefineChallengeGetBaseInfoRsp::set_grouprank(::google::protobuf::uint32 value) {
  set_has_grouprank();
  grouprank_ = value;
  // @@protoc_insertion_point(field_set:pb.TDefineChallengeGetBaseInfoRsp.GroupRank)
}

// optional uint32 WarZoneRank = 7;
inline bool TDefineChallengeGetBaseInfoRsp::has_warzonerank() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void TDefineChallengeGetBaseInfoRsp::set_has_warzonerank() {
  _has_bits_[0] |= 0x00000040u;
}
inline void TDefineChallengeGetBaseInfoRsp::clear_has_warzonerank() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void TDefineChallengeGetBaseInfoRsp::clear_warzonerank() {
  warzonerank_ = 0u;
  clear_has_warzonerank();
}
inline ::google::protobuf::uint32 TDefineChallengeGetBaseInfoRsp::warzonerank() const {
  // @@protoc_insertion_point(field_get:pb.TDefineChallengeGetBaseInfoRsp.WarZoneRank)
  return warzonerank_;
}
inline void TDefineChallengeGetBaseInfoRsp::set_warzonerank(::google::protobuf::uint32 value) {
  set_has_warzonerank();
  warzonerank_ = value;
  // @@protoc_insertion_point(field_set:pb.TDefineChallengeGetBaseInfoRsp.WarZoneRank)
}

// optional .pb.TDefineChallengeBossInfo BossInfo = 8;
inline bool TDefineChallengeGetBaseInfoRsp::has_bossinfo() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void TDefineChallengeGetBaseInfoRsp::set_has_bossinfo() {
  _has_bits_[0] |= 0x00000080u;
}
inline void TDefineChallengeGetBaseInfoRsp::clear_has_bossinfo() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void TDefineChallengeGetBaseInfoRsp::clear_bossinfo() {
  if (bossinfo_ != NULL) bossinfo_->::pb::TDefineChallengeBossInfo::Clear();
  clear_has_bossinfo();
}
inline const ::pb::TDefineChallengeBossInfo& TDefineChallengeGetBaseInfoRsp::bossinfo() const {
  // @@protoc_insertion_point(field_get:pb.TDefineChallengeGetBaseInfoRsp.BossInfo)
  return bossinfo_ != NULL ? *bossinfo_ : *default_instance_->bossinfo_;
}
inline ::pb::TDefineChallengeBossInfo* TDefineChallengeGetBaseInfoRsp::mutable_bossinfo() {
  set_has_bossinfo();
  if (bossinfo_ == NULL) bossinfo_ = new ::pb::TDefineChallengeBossInfo;
  // @@protoc_insertion_point(field_mutable:pb.TDefineChallengeGetBaseInfoRsp.BossInfo)
  return bossinfo_;
}
inline ::pb::TDefineChallengeBossInfo* TDefineChallengeGetBaseInfoRsp::release_bossinfo() {
  clear_has_bossinfo();
  ::pb::TDefineChallengeBossInfo* temp = bossinfo_;
  bossinfo_ = NULL;
  return temp;
}
inline void TDefineChallengeGetBaseInfoRsp::set_allocated_bossinfo(::pb::TDefineChallengeBossInfo* bossinfo) {
  delete bossinfo_;
  bossinfo_ = bossinfo;
  if (bossinfo) {
    set_has_bossinfo();
  } else {
    clear_has_bossinfo();
  }
  // @@protoc_insertion_point(field_set_allocated:pb.TDefineChallengeGetBaseInfoRsp.BossInfo)
}

// optional uint32 Score = 9;
inline bool TDefineChallengeGetBaseInfoRsp::has_score() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void TDefineChallengeGetBaseInfoRsp::set_has_score() {
  _has_bits_[0] |= 0x00000100u;
}
inline void TDefineChallengeGetBaseInfoRsp::clear_has_score() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void TDefineChallengeGetBaseInfoRsp::clear_score() {
  score_ = 0u;
  clear_has_score();
}
inline ::google::protobuf::uint32 TDefineChallengeGetBaseInfoRsp::score() const {
  // @@protoc_insertion_point(field_get:pb.TDefineChallengeGetBaseInfoRsp.Score)
  return score_;
}
inline void TDefineChallengeGetBaseInfoRsp::set_score(::google::protobuf::uint32 value) {
  set_has_score();
  score_ = value;
  // @@protoc_insertion_point(field_set:pb.TDefineChallengeGetBaseInfoRsp.Score)
}

// optional uint64 RewardTime = 10;
inline bool TDefineChallengeGetBaseInfoRsp::has_rewardtime() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void TDefineChallengeGetBaseInfoRsp::set_has_rewardtime() {
  _has_bits_[0] |= 0x00000200u;
}
inline void TDefineChallengeGetBaseInfoRsp::clear_has_rewardtime() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void TDefineChallengeGetBaseInfoRsp::clear_rewardtime() {
  rewardtime_ = GOOGLE_ULONGLONG(0);
  clear_has_rewardtime();
}
inline ::google::protobuf::uint64 TDefineChallengeGetBaseInfoRsp::rewardtime() const {
  // @@protoc_insertion_point(field_get:pb.TDefineChallengeGetBaseInfoRsp.RewardTime)
  return rewardtime_;
}
inline void TDefineChallengeGetBaseInfoRsp::set_rewardtime(::google::protobuf::uint64 value) {
  set_has_rewardtime();
  rewardtime_ = value;
  // @@protoc_insertion_point(field_set:pb.TDefineChallengeGetBaseInfoRsp.RewardTime)
}

// optional uint32 IsViewed = 11;
inline bool TDefineChallengeGetBaseInfoRsp::has_isviewed() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void TDefineChallengeGetBaseInfoRsp::set_has_isviewed() {
  _has_bits_[0] |= 0x00000400u;
}
inline void TDefineChallengeGetBaseInfoRsp::clear_has_isviewed() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void TDefineChallengeGetBaseInfoRsp::clear_isviewed() {
  isviewed_ = 0u;
  clear_has_isviewed();
}
inline ::google::protobuf::uint32 TDefineChallengeGetBaseInfoRsp::isviewed() const {
  // @@protoc_insertion_point(field_get:pb.TDefineChallengeGetBaseInfoRsp.IsViewed)
  return isviewed_;
}
inline void TDefineChallengeGetBaseInfoRsp::set_isviewed(::google::protobuf::uint32 value) {
  set_has_isviewed();
  isviewed_ = value;
  // @@protoc_insertion_point(field_set:pb.TDefineChallengeGetBaseInfoRsp.IsViewed)
}

// -------------------------------------------------------------------

// TDefineChallengeGetBattleArgsReq

// optional .pb.TDefineChallengeBossInfo BossInfo = 1;
inline bool TDefineChallengeGetBattleArgsReq::has_bossinfo() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TDefineChallengeGetBattleArgsReq::set_has_bossinfo() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TDefineChallengeGetBattleArgsReq::clear_has_bossinfo() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TDefineChallengeGetBattleArgsReq::clear_bossinfo() {
  if (bossinfo_ != NULL) bossinfo_->::pb::TDefineChallengeBossInfo::Clear();
  clear_has_bossinfo();
}
inline const ::pb::TDefineChallengeBossInfo& TDefineChallengeGetBattleArgsReq::bossinfo() const {
  // @@protoc_insertion_point(field_get:pb.TDefineChallengeGetBattleArgsReq.BossInfo)
  return bossinfo_ != NULL ? *bossinfo_ : *default_instance_->bossinfo_;
}
inline ::pb::TDefineChallengeBossInfo* TDefineChallengeGetBattleArgsReq::mutable_bossinfo() {
  set_has_bossinfo();
  if (bossinfo_ == NULL) bossinfo_ = new ::pb::TDefineChallengeBossInfo;
  // @@protoc_insertion_point(field_mutable:pb.TDefineChallengeGetBattleArgsReq.BossInfo)
  return bossinfo_;
}
inline ::pb::TDefineChallengeBossInfo* TDefineChallengeGetBattleArgsReq::release_bossinfo() {
  clear_has_bossinfo();
  ::pb::TDefineChallengeBossInfo* temp = bossinfo_;
  bossinfo_ = NULL;
  return temp;
}
inline void TDefineChallengeGetBattleArgsReq::set_allocated_bossinfo(::pb::TDefineChallengeBossInfo* bossinfo) {
  delete bossinfo_;
  bossinfo_ = bossinfo;
  if (bossinfo) {
    set_has_bossinfo();
  } else {
    clear_has_bossinfo();
  }
  // @@protoc_insertion_point(field_set_allocated:pb.TDefineChallengeGetBattleArgsReq.BossInfo)
}

// optional .pb.TBattleCheckParam BattleCheckParam = 2;
inline bool TDefineChallengeGetBattleArgsReq::has_battlecheckparam() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TDefineChallengeGetBattleArgsReq::set_has_battlecheckparam() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TDefineChallengeGetBattleArgsReq::clear_has_battlecheckparam() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TDefineChallengeGetBattleArgsReq::clear_battlecheckparam() {
  if (battlecheckparam_ != NULL) battlecheckparam_->::pb::TBattleCheckParam::Clear();
  clear_has_battlecheckparam();
}
inline const ::pb::TBattleCheckParam& TDefineChallengeGetBattleArgsReq::battlecheckparam() const {
  // @@protoc_insertion_point(field_get:pb.TDefineChallengeGetBattleArgsReq.BattleCheckParam)
  return battlecheckparam_ != NULL ? *battlecheckparam_ : *default_instance_->battlecheckparam_;
}
inline ::pb::TBattleCheckParam* TDefineChallengeGetBattleArgsReq::mutable_battlecheckparam() {
  set_has_battlecheckparam();
  if (battlecheckparam_ == NULL) battlecheckparam_ = new ::pb::TBattleCheckParam;
  // @@protoc_insertion_point(field_mutable:pb.TDefineChallengeGetBattleArgsReq.BattleCheckParam)
  return battlecheckparam_;
}
inline ::pb::TBattleCheckParam* TDefineChallengeGetBattleArgsReq::release_battlecheckparam() {
  clear_has_battlecheckparam();
  ::pb::TBattleCheckParam* temp = battlecheckparam_;
  battlecheckparam_ = NULL;
  return temp;
}
inline void TDefineChallengeGetBattleArgsReq::set_allocated_battlecheckparam(::pb::TBattleCheckParam* battlecheckparam) {
  delete battlecheckparam_;
  battlecheckparam_ = battlecheckparam;
  if (battlecheckparam) {
    set_has_battlecheckparam();
  } else {
    clear_has_battlecheckparam();
  }
  // @@protoc_insertion_point(field_set_allocated:pb.TDefineChallengeGetBattleArgsReq.BattleCheckParam)
}

// -------------------------------------------------------------------

// TDefineChallengeGetBattleArgsRsp

// optional .pb.TBattleArgs BattleArgs = 1;
inline bool TDefineChallengeGetBattleArgsRsp::has_battleargs() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TDefineChallengeGetBattleArgsRsp::set_has_battleargs() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TDefineChallengeGetBattleArgsRsp::clear_has_battleargs() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TDefineChallengeGetBattleArgsRsp::clear_battleargs() {
  if (battleargs_ != NULL) battleargs_->::pb::TBattleArgs::Clear();
  clear_has_battleargs();
}
inline const ::pb::TBattleArgs& TDefineChallengeGetBattleArgsRsp::battleargs() const {
  // @@protoc_insertion_point(field_get:pb.TDefineChallengeGetBattleArgsRsp.BattleArgs)
  return battleargs_ != NULL ? *battleargs_ : *default_instance_->battleargs_;
}
inline ::pb::TBattleArgs* TDefineChallengeGetBattleArgsRsp::mutable_battleargs() {
  set_has_battleargs();
  if (battleargs_ == NULL) battleargs_ = new ::pb::TBattleArgs;
  // @@protoc_insertion_point(field_mutable:pb.TDefineChallengeGetBattleArgsRsp.BattleArgs)
  return battleargs_;
}
inline ::pb::TBattleArgs* TDefineChallengeGetBattleArgsRsp::release_battleargs() {
  clear_has_battleargs();
  ::pb::TBattleArgs* temp = battleargs_;
  battleargs_ = NULL;
  return temp;
}
inline void TDefineChallengeGetBattleArgsRsp::set_allocated_battleargs(::pb::TBattleArgs* battleargs) {
  delete battleargs_;
  battleargs_ = battleargs;
  if (battleargs) {
    set_has_battleargs();
  } else {
    clear_has_battleargs();
  }
  // @@protoc_insertion_point(field_set_allocated:pb.TDefineChallengeGetBattleArgsRsp.BattleArgs)
}

// -------------------------------------------------------------------

// TDefineChallengeReportBattleBossReq

// optional .pb.TDefineChallengeBossInfo BossInfo = 1;
inline bool TDefineChallengeReportBattleBossReq::has_bossinfo() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TDefineChallengeReportBattleBossReq::set_has_bossinfo() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TDefineChallengeReportBattleBossReq::clear_has_bossinfo() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TDefineChallengeReportBattleBossReq::clear_bossinfo() {
  if (bossinfo_ != NULL) bossinfo_->::pb::TDefineChallengeBossInfo::Clear();
  clear_has_bossinfo();
}
inline const ::pb::TDefineChallengeBossInfo& TDefineChallengeReportBattleBossReq::bossinfo() const {
  // @@protoc_insertion_point(field_get:pb.TDefineChallengeReportBattleBossReq.BossInfo)
  return bossinfo_ != NULL ? *bossinfo_ : *default_instance_->bossinfo_;
}
inline ::pb::TDefineChallengeBossInfo* TDefineChallengeReportBattleBossReq::mutable_bossinfo() {
  set_has_bossinfo();
  if (bossinfo_ == NULL) bossinfo_ = new ::pb::TDefineChallengeBossInfo;
  // @@protoc_insertion_point(field_mutable:pb.TDefineChallengeReportBattleBossReq.BossInfo)
  return bossinfo_;
}
inline ::pb::TDefineChallengeBossInfo* TDefineChallengeReportBattleBossReq::release_bossinfo() {
  clear_has_bossinfo();
  ::pb::TDefineChallengeBossInfo* temp = bossinfo_;
  bossinfo_ = NULL;
  return temp;
}
inline void TDefineChallengeReportBattleBossReq::set_allocated_bossinfo(::pb::TDefineChallengeBossInfo* bossinfo) {
  delete bossinfo_;
  bossinfo_ = bossinfo;
  if (bossinfo) {
    set_has_bossinfo();
  } else {
    clear_has_bossinfo();
  }
  // @@protoc_insertion_point(field_set_allocated:pb.TDefineChallengeReportBattleBossReq.BossInfo)
}

// optional bytes BattleRet = 2;
inline bool TDefineChallengeReportBattleBossReq::has_battleret() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TDefineChallengeReportBattleBossReq::set_has_battleret() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TDefineChallengeReportBattleBossReq::clear_has_battleret() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TDefineChallengeReportBattleBossReq::clear_battleret() {
  if (battleret_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    battleret_->clear();
  }
  clear_has_battleret();
}
inline const ::std::string& TDefineChallengeReportBattleBossReq::battleret() const {
  // @@protoc_insertion_point(field_get:pb.TDefineChallengeReportBattleBossReq.BattleRet)
  return *battleret_;
}
inline void TDefineChallengeReportBattleBossReq::set_battleret(const ::std::string& value) {
  set_has_battleret();
  if (battleret_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    battleret_ = new ::std::string;
  }
  battleret_->assign(value);
  // @@protoc_insertion_point(field_set:pb.TDefineChallengeReportBattleBossReq.BattleRet)
}
inline void TDefineChallengeReportBattleBossReq::set_battleret(const char* value) {
  set_has_battleret();
  if (battleret_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    battleret_ = new ::std::string;
  }
  battleret_->assign(value);
  // @@protoc_insertion_point(field_set_char:pb.TDefineChallengeReportBattleBossReq.BattleRet)
}
inline void TDefineChallengeReportBattleBossReq::set_battleret(const void* value, size_t size) {
  set_has_battleret();
  if (battleret_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    battleret_ = new ::std::string;
  }
  battleret_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:pb.TDefineChallengeReportBattleBossReq.BattleRet)
}
inline ::std::string* TDefineChallengeReportBattleBossReq::mutable_battleret() {
  set_has_battleret();
  if (battleret_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    battleret_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:pb.TDefineChallengeReportBattleBossReq.BattleRet)
  return battleret_;
}
inline ::std::string* TDefineChallengeReportBattleBossReq::release_battleret() {
  clear_has_battleret();
  if (battleret_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = battleret_;
    battleret_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void TDefineChallengeReportBattleBossReq::set_allocated_battleret(::std::string* battleret) {
  if (battleret_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete battleret_;
  }
  if (battleret) {
    set_has_battleret();
    battleret_ = battleret;
  } else {
    clear_has_battleret();
    battleret_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:pb.TDefineChallengeReportBattleBossReq.BattleRet)
}

// optional uint32 MasterHid = 3;
inline bool TDefineChallengeReportBattleBossReq::has_masterhid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void TDefineChallengeReportBattleBossReq::set_has_masterhid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void TDefineChallengeReportBattleBossReq::clear_has_masterhid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void TDefineChallengeReportBattleBossReq::clear_masterhid() {
  masterhid_ = 0u;
  clear_has_masterhid();
}
inline ::google::protobuf::uint32 TDefineChallengeReportBattleBossReq::masterhid() const {
  // @@protoc_insertion_point(field_get:pb.TDefineChallengeReportBattleBossReq.MasterHid)
  return masterhid_;
}
inline void TDefineChallengeReportBattleBossReq::set_masterhid(::google::protobuf::uint32 value) {
  set_has_masterhid();
  masterhid_ = value;
  // @@protoc_insertion_point(field_set:pb.TDefineChallengeReportBattleBossReq.MasterHid)
}

// -------------------------------------------------------------------

// TDefineChallengeReportBattleBossRsp

// optional uint32 SettleScore = 1;
inline bool TDefineChallengeReportBattleBossRsp::has_settlescore() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TDefineChallengeReportBattleBossRsp::set_has_settlescore() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TDefineChallengeReportBattleBossRsp::clear_has_settlescore() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TDefineChallengeReportBattleBossRsp::clear_settlescore() {
  settlescore_ = 0u;
  clear_has_settlescore();
}
inline ::google::protobuf::uint32 TDefineChallengeReportBattleBossRsp::settlescore() const {
  // @@protoc_insertion_point(field_get:pb.TDefineChallengeReportBattleBossRsp.SettleScore)
  return settlescore_;
}
inline void TDefineChallengeReportBattleBossRsp::set_settlescore(::google::protobuf::uint32 value) {
  set_has_settlescore();
  settlescore_ = value;
  // @@protoc_insertion_point(field_set:pb.TDefineChallengeReportBattleBossRsp.SettleScore)
}

// optional uint32 TotalScore = 2;
inline bool TDefineChallengeReportBattleBossRsp::has_totalscore() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TDefineChallengeReportBattleBossRsp::set_has_totalscore() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TDefineChallengeReportBattleBossRsp::clear_has_totalscore() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TDefineChallengeReportBattleBossRsp::clear_totalscore() {
  totalscore_ = 0u;
  clear_has_totalscore();
}
inline ::google::protobuf::uint32 TDefineChallengeReportBattleBossRsp::totalscore() const {
  // @@protoc_insertion_point(field_get:pb.TDefineChallengeReportBattleBossRsp.TotalScore)
  return totalscore_;
}
inline void TDefineChallengeReportBattleBossRsp::set_totalscore(::google::protobuf::uint32 value) {
  set_has_totalscore();
  totalscore_ = value;
  // @@protoc_insertion_point(field_set:pb.TDefineChallengeReportBattleBossRsp.TotalScore)
}

// optional uint32 IsWin = 3;
inline bool TDefineChallengeReportBattleBossRsp::has_iswin() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void TDefineChallengeReportBattleBossRsp::set_has_iswin() {
  _has_bits_[0] |= 0x00000004u;
}
inline void TDefineChallengeReportBattleBossRsp::clear_has_iswin() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void TDefineChallengeReportBattleBossRsp::clear_iswin() {
  iswin_ = 0u;
  clear_has_iswin();
}
inline ::google::protobuf::uint32 TDefineChallengeReportBattleBossRsp::iswin() const {
  // @@protoc_insertion_point(field_get:pb.TDefineChallengeReportBattleBossRsp.IsWin)
  return iswin_;
}
inline void TDefineChallengeReportBattleBossRsp::set_iswin(::google::protobuf::uint32 value) {
  set_has_iswin();
  iswin_ = value;
  // @@protoc_insertion_point(field_set:pb.TDefineChallengeReportBattleBossRsp.IsWin)
}

// -------------------------------------------------------------------

// TDefineChallengeGetFmtReq

// optional uint32 BossId = 1;
inline bool TDefineChallengeGetFmtReq::has_bossid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TDefineChallengeGetFmtReq::set_has_bossid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TDefineChallengeGetFmtReq::clear_has_bossid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TDefineChallengeGetFmtReq::clear_bossid() {
  bossid_ = 0u;
  clear_has_bossid();
}
inline ::google::protobuf::uint32 TDefineChallengeGetFmtReq::bossid() const {
  // @@protoc_insertion_point(field_get:pb.TDefineChallengeGetFmtReq.BossId)
  return bossid_;
}
inline void TDefineChallengeGetFmtReq::set_bossid(::google::protobuf::uint32 value) {
  set_has_bossid();
  bossid_ = value;
  // @@protoc_insertion_point(field_set:pb.TDefineChallengeGetFmtReq.BossId)
}

// -------------------------------------------------------------------

// TDefineChallengeGetFmtRsp

// repeated .pb.TDefineChallengeBattlePosInfo Fmt = 1;
inline int TDefineChallengeGetFmtRsp::fmt_size() const {
  return fmt_.size();
}
inline void TDefineChallengeGetFmtRsp::clear_fmt() {
  fmt_.Clear();
}
inline const ::pb::TDefineChallengeBattlePosInfo& TDefineChallengeGetFmtRsp::fmt(int index) const {
  // @@protoc_insertion_point(field_get:pb.TDefineChallengeGetFmtRsp.Fmt)
  return fmt_.Get(index);
}
inline ::pb::TDefineChallengeBattlePosInfo* TDefineChallengeGetFmtRsp::mutable_fmt(int index) {
  // @@protoc_insertion_point(field_mutable:pb.TDefineChallengeGetFmtRsp.Fmt)
  return fmt_.Mutable(index);
}
inline ::pb::TDefineChallengeBattlePosInfo* TDefineChallengeGetFmtRsp::add_fmt() {
  // @@protoc_insertion_point(field_add:pb.TDefineChallengeGetFmtRsp.Fmt)
  return fmt_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::TDefineChallengeBattlePosInfo >&
TDefineChallengeGetFmtRsp::fmt() const {
  // @@protoc_insertion_point(field_list:pb.TDefineChallengeGetFmtRsp.Fmt)
  return fmt_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb::TDefineChallengeBattlePosInfo >*
TDefineChallengeGetFmtRsp::mutable_fmt() {
  // @@protoc_insertion_point(field_mutable_list:pb.TDefineChallengeGetFmtRsp.Fmt)
  return &fmt_;
}

// -------------------------------------------------------------------

// TDefineChallengeSetFmtReq

// repeated .pb.TDefineChallengeBattlePosInfo Fmt = 1;
inline int TDefineChallengeSetFmtReq::fmt_size() const {
  return fmt_.size();
}
inline void TDefineChallengeSetFmtReq::clear_fmt() {
  fmt_.Clear();
}
inline const ::pb::TDefineChallengeBattlePosInfo& TDefineChallengeSetFmtReq::fmt(int index) const {
  // @@protoc_insertion_point(field_get:pb.TDefineChallengeSetFmtReq.Fmt)
  return fmt_.Get(index);
}
inline ::pb::TDefineChallengeBattlePosInfo* TDefineChallengeSetFmtReq::mutable_fmt(int index) {
  // @@protoc_insertion_point(field_mutable:pb.TDefineChallengeSetFmtReq.Fmt)
  return fmt_.Mutable(index);
}
inline ::pb::TDefineChallengeBattlePosInfo* TDefineChallengeSetFmtReq::add_fmt() {
  // @@protoc_insertion_point(field_add:pb.TDefineChallengeSetFmtReq.Fmt)
  return fmt_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::TDefineChallengeBattlePosInfo >&
TDefineChallengeSetFmtReq::fmt() const {
  // @@protoc_insertion_point(field_list:pb.TDefineChallengeSetFmtReq.Fmt)
  return fmt_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb::TDefineChallengeBattlePosInfo >*
TDefineChallengeSetFmtReq::mutable_fmt() {
  // @@protoc_insertion_point(field_mutable_list:pb.TDefineChallengeSetFmtReq.Fmt)
  return &fmt_;
}

// optional uint32 BossId = 2;
inline bool TDefineChallengeSetFmtReq::has_bossid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TDefineChallengeSetFmtReq::set_has_bossid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TDefineChallengeSetFmtReq::clear_has_bossid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TDefineChallengeSetFmtReq::clear_bossid() {
  bossid_ = 0u;
  clear_has_bossid();
}
inline ::google::protobuf::uint32 TDefineChallengeSetFmtReq::bossid() const {
  // @@protoc_insertion_point(field_get:pb.TDefineChallengeSetFmtReq.BossId)
  return bossid_;
}
inline void TDefineChallengeSetFmtReq::set_bossid(::google::protobuf::uint32 value) {
  set_has_bossid();
  bossid_ = value;
  // @@protoc_insertion_point(field_set:pb.TDefineChallengeSetFmtReq.BossId)
}

// repeated uint32 DebuffArr = 3;
inline int TDefineChallengeSetFmtReq::debuffarr_size() const {
  return debuffarr_.size();
}
inline void TDefineChallengeSetFmtReq::clear_debuffarr() {
  debuffarr_.Clear();
}
inline ::google::protobuf::uint32 TDefineChallengeSetFmtReq::debuffarr(int index) const {
  // @@protoc_insertion_point(field_get:pb.TDefineChallengeSetFmtReq.DebuffArr)
  return debuffarr_.Get(index);
}
inline void TDefineChallengeSetFmtReq::set_debuffarr(int index, ::google::protobuf::uint32 value) {
  debuffarr_.Set(index, value);
  // @@protoc_insertion_point(field_set:pb.TDefineChallengeSetFmtReq.DebuffArr)
}
inline void TDefineChallengeSetFmtReq::add_debuffarr(::google::protobuf::uint32 value) {
  debuffarr_.Add(value);
  // @@protoc_insertion_point(field_add:pb.TDefineChallengeSetFmtReq.DebuffArr)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
TDefineChallengeSetFmtReq::debuffarr() const {
  // @@protoc_insertion_point(field_list:pb.TDefineChallengeSetFmtReq.DebuffArr)
  return debuffarr_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
TDefineChallengeSetFmtReq::mutable_debuffarr() {
  // @@protoc_insertion_point(field_mutable_list:pb.TDefineChallengeSetFmtReq.DebuffArr)
  return &debuffarr_;
}

// -------------------------------------------------------------------

// TDefineChallengeReceiveTaskRewardReq

// optional uint32 TaskId = 1;
inline bool TDefineChallengeReceiveTaskRewardReq::has_taskid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TDefineChallengeReceiveTaskRewardReq::set_has_taskid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TDefineChallengeReceiveTaskRewardReq::clear_has_taskid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TDefineChallengeReceiveTaskRewardReq::clear_taskid() {
  taskid_ = 0u;
  clear_has_taskid();
}
inline ::google::protobuf::uint32 TDefineChallengeReceiveTaskRewardReq::taskid() const {
  // @@protoc_insertion_point(field_get:pb.TDefineChallengeReceiveTaskRewardReq.TaskId)
  return taskid_;
}
inline void TDefineChallengeReceiveTaskRewardReq::set_taskid(::google::protobuf::uint32 value) {
  set_has_taskid();
  taskid_ = value;
  // @@protoc_insertion_point(field_set:pb.TDefineChallengeReceiveTaskRewardReq.TaskId)
}

// optional uint32 BossId = 2;
inline bool TDefineChallengeReceiveTaskRewardReq::has_bossid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TDefineChallengeReceiveTaskRewardReq::set_has_bossid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TDefineChallengeReceiveTaskRewardReq::clear_has_bossid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TDefineChallengeReceiveTaskRewardReq::clear_bossid() {
  bossid_ = 0u;
  clear_has_bossid();
}
inline ::google::protobuf::uint32 TDefineChallengeReceiveTaskRewardReq::bossid() const {
  // @@protoc_insertion_point(field_get:pb.TDefineChallengeReceiveTaskRewardReq.BossId)
  return bossid_;
}
inline void TDefineChallengeReceiveTaskRewardReq::set_bossid(::google::protobuf::uint32 value) {
  set_has_bossid();
  bossid_ = value;
  // @@protoc_insertion_point(field_set:pb.TDefineChallengeReceiveTaskRewardReq.BossId)
}

// -------------------------------------------------------------------

// TDefineChallengeReceiveTaskRewardRsp

// repeated .pb.TCommonReward RewardArr = 1;
inline int TDefineChallengeReceiveTaskRewardRsp::rewardarr_size() const {
  return rewardarr_.size();
}
inline void TDefineChallengeReceiveTaskRewardRsp::clear_rewardarr() {
  rewardarr_.Clear();
}
inline const ::pb::TCommonReward& TDefineChallengeReceiveTaskRewardRsp::rewardarr(int index) const {
  // @@protoc_insertion_point(field_get:pb.TDefineChallengeReceiveTaskRewardRsp.RewardArr)
  return rewardarr_.Get(index);
}
inline ::pb::TCommonReward* TDefineChallengeReceiveTaskRewardRsp::mutable_rewardarr(int index) {
  // @@protoc_insertion_point(field_mutable:pb.TDefineChallengeReceiveTaskRewardRsp.RewardArr)
  return rewardarr_.Mutable(index);
}
inline ::pb::TCommonReward* TDefineChallengeReceiveTaskRewardRsp::add_rewardarr() {
  // @@protoc_insertion_point(field_add:pb.TDefineChallengeReceiveTaskRewardRsp.RewardArr)
  return rewardarr_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::TCommonReward >&
TDefineChallengeReceiveTaskRewardRsp::rewardarr() const {
  // @@protoc_insertion_point(field_list:pb.TDefineChallengeReceiveTaskRewardRsp.RewardArr)
  return rewardarr_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb::TCommonReward >*
TDefineChallengeReceiveTaskRewardRsp::mutable_rewardarr() {
  // @@protoc_insertion_point(field_mutable_list:pb.TDefineChallengeReceiveTaskRewardRsp.RewardArr)
  return &rewardarr_;
}

// -------------------------------------------------------------------

// TDefineChallengeGetGroupRankArrRep

// optional uint32 GroupId = 1;
inline bool TDefineChallengeGetGroupRankArrRep::has_groupid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TDefineChallengeGetGroupRankArrRep::set_has_groupid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TDefineChallengeGetGroupRankArrRep::clear_has_groupid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TDefineChallengeGetGroupRankArrRep::clear_groupid() {
  groupid_ = 0u;
  clear_has_groupid();
}
inline ::google::protobuf::uint32 TDefineChallengeGetGroupRankArrRep::groupid() const {
  // @@protoc_insertion_point(field_get:pb.TDefineChallengeGetGroupRankArrRep.GroupId)
  return groupid_;
}
inline void TDefineChallengeGetGroupRankArrRep::set_groupid(::google::protobuf::uint32 value) {
  set_has_groupid();
  groupid_ = value;
  // @@protoc_insertion_point(field_set:pb.TDefineChallengeGetGroupRankArrRep.GroupId)
}

// -------------------------------------------------------------------

// TDefineChallengeGetGroupRankArrRsp

// repeated .pb.TDefineChallengeRankInfo UserRankArr = 1;
inline int TDefineChallengeGetGroupRankArrRsp::userrankarr_size() const {
  return userrankarr_.size();
}
inline void TDefineChallengeGetGroupRankArrRsp::clear_userrankarr() {
  userrankarr_.Clear();
}
inline const ::pb::TDefineChallengeRankInfo& TDefineChallengeGetGroupRankArrRsp::userrankarr(int index) const {
  // @@protoc_insertion_point(field_get:pb.TDefineChallengeGetGroupRankArrRsp.UserRankArr)
  return userrankarr_.Get(index);
}
inline ::pb::TDefineChallengeRankInfo* TDefineChallengeGetGroupRankArrRsp::mutable_userrankarr(int index) {
  // @@protoc_insertion_point(field_mutable:pb.TDefineChallengeGetGroupRankArrRsp.UserRankArr)
  return userrankarr_.Mutable(index);
}
inline ::pb::TDefineChallengeRankInfo* TDefineChallengeGetGroupRankArrRsp::add_userrankarr() {
  // @@protoc_insertion_point(field_add:pb.TDefineChallengeGetGroupRankArrRsp.UserRankArr)
  return userrankarr_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::TDefineChallengeRankInfo >&
TDefineChallengeGetGroupRankArrRsp::userrankarr() const {
  // @@protoc_insertion_point(field_list:pb.TDefineChallengeGetGroupRankArrRsp.UserRankArr)
  return userrankarr_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb::TDefineChallengeRankInfo >*
TDefineChallengeGetGroupRankArrRsp::mutable_userrankarr() {
  // @@protoc_insertion_point(field_mutable_list:pb.TDefineChallengeGetGroupRankArrRsp.UserRankArr)
  return &userrankarr_;
}

// optional .pb.TDefineChallengeRankInfo SelfRank = 2;
inline bool TDefineChallengeGetGroupRankArrRsp::has_selfrank() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TDefineChallengeGetGroupRankArrRsp::set_has_selfrank() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TDefineChallengeGetGroupRankArrRsp::clear_has_selfrank() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TDefineChallengeGetGroupRankArrRsp::clear_selfrank() {
  if (selfrank_ != NULL) selfrank_->::pb::TDefineChallengeRankInfo::Clear();
  clear_has_selfrank();
}
inline const ::pb::TDefineChallengeRankInfo& TDefineChallengeGetGroupRankArrRsp::selfrank() const {
  // @@protoc_insertion_point(field_get:pb.TDefineChallengeGetGroupRankArrRsp.SelfRank)
  return selfrank_ != NULL ? *selfrank_ : *default_instance_->selfrank_;
}
inline ::pb::TDefineChallengeRankInfo* TDefineChallengeGetGroupRankArrRsp::mutable_selfrank() {
  set_has_selfrank();
  if (selfrank_ == NULL) selfrank_ = new ::pb::TDefineChallengeRankInfo;
  // @@protoc_insertion_point(field_mutable:pb.TDefineChallengeGetGroupRankArrRsp.SelfRank)
  return selfrank_;
}
inline ::pb::TDefineChallengeRankInfo* TDefineChallengeGetGroupRankArrRsp::release_selfrank() {
  clear_has_selfrank();
  ::pb::TDefineChallengeRankInfo* temp = selfrank_;
  selfrank_ = NULL;
  return temp;
}
inline void TDefineChallengeGetGroupRankArrRsp::set_allocated_selfrank(::pb::TDefineChallengeRankInfo* selfrank) {
  delete selfrank_;
  selfrank_ = selfrank;
  if (selfrank) {
    set_has_selfrank();
  } else {
    clear_has_selfrank();
  }
  // @@protoc_insertion_point(field_set_allocated:pb.TDefineChallengeGetGroupRankArrRsp.SelfRank)
}

// -------------------------------------------------------------------

// TDefineChallengeGetWarZoneRankArrRep

// optional uint32 WarZoneId = 1;
inline bool TDefineChallengeGetWarZoneRankArrRep::has_warzoneid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TDefineChallengeGetWarZoneRankArrRep::set_has_warzoneid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TDefineChallengeGetWarZoneRankArrRep::clear_has_warzoneid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TDefineChallengeGetWarZoneRankArrRep::clear_warzoneid() {
  warzoneid_ = 0u;
  clear_has_warzoneid();
}
inline ::google::protobuf::uint32 TDefineChallengeGetWarZoneRankArrRep::warzoneid() const {
  // @@protoc_insertion_point(field_get:pb.TDefineChallengeGetWarZoneRankArrRep.WarZoneId)
  return warzoneid_;
}
inline void TDefineChallengeGetWarZoneRankArrRep::set_warzoneid(::google::protobuf::uint32 value) {
  set_has_warzoneid();
  warzoneid_ = value;
  // @@protoc_insertion_point(field_set:pb.TDefineChallengeGetWarZoneRankArrRep.WarZoneId)
}

// optional uint32 OffSet = 2;
inline bool TDefineChallengeGetWarZoneRankArrRep::has_offset() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TDefineChallengeGetWarZoneRankArrRep::set_has_offset() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TDefineChallengeGetWarZoneRankArrRep::clear_has_offset() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TDefineChallengeGetWarZoneRankArrRep::clear_offset() {
  offset_ = 0u;
  clear_has_offset();
}
inline ::google::protobuf::uint32 TDefineChallengeGetWarZoneRankArrRep::offset() const {
  // @@protoc_insertion_point(field_get:pb.TDefineChallengeGetWarZoneRankArrRep.OffSet)
  return offset_;
}
inline void TDefineChallengeGetWarZoneRankArrRep::set_offset(::google::protobuf::uint32 value) {
  set_has_offset();
  offset_ = value;
  // @@protoc_insertion_point(field_set:pb.TDefineChallengeGetWarZoneRankArrRep.OffSet)
}

// optional uint32 Limit = 3;
inline bool TDefineChallengeGetWarZoneRankArrRep::has_limit() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void TDefineChallengeGetWarZoneRankArrRep::set_has_limit() {
  _has_bits_[0] |= 0x00000004u;
}
inline void TDefineChallengeGetWarZoneRankArrRep::clear_has_limit() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void TDefineChallengeGetWarZoneRankArrRep::clear_limit() {
  limit_ = 0u;
  clear_has_limit();
}
inline ::google::protobuf::uint32 TDefineChallengeGetWarZoneRankArrRep::limit() const {
  // @@protoc_insertion_point(field_get:pb.TDefineChallengeGetWarZoneRankArrRep.Limit)
  return limit_;
}
inline void TDefineChallengeGetWarZoneRankArrRep::set_limit(::google::protobuf::uint32 value) {
  set_has_limit();
  limit_ = value;
  // @@protoc_insertion_point(field_set:pb.TDefineChallengeGetWarZoneRankArrRep.Limit)
}

// -------------------------------------------------------------------

// TDefineChallengeGetWarZoneRankArrRsp

// repeated .pb.TDefineChallengeRankInfo UserRankArr = 1;
inline int TDefineChallengeGetWarZoneRankArrRsp::userrankarr_size() const {
  return userrankarr_.size();
}
inline void TDefineChallengeGetWarZoneRankArrRsp::clear_userrankarr() {
  userrankarr_.Clear();
}
inline const ::pb::TDefineChallengeRankInfo& TDefineChallengeGetWarZoneRankArrRsp::userrankarr(int index) const {
  // @@protoc_insertion_point(field_get:pb.TDefineChallengeGetWarZoneRankArrRsp.UserRankArr)
  return userrankarr_.Get(index);
}
inline ::pb::TDefineChallengeRankInfo* TDefineChallengeGetWarZoneRankArrRsp::mutable_userrankarr(int index) {
  // @@protoc_insertion_point(field_mutable:pb.TDefineChallengeGetWarZoneRankArrRsp.UserRankArr)
  return userrankarr_.Mutable(index);
}
inline ::pb::TDefineChallengeRankInfo* TDefineChallengeGetWarZoneRankArrRsp::add_userrankarr() {
  // @@protoc_insertion_point(field_add:pb.TDefineChallengeGetWarZoneRankArrRsp.UserRankArr)
  return userrankarr_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::TDefineChallengeRankInfo >&
TDefineChallengeGetWarZoneRankArrRsp::userrankarr() const {
  // @@protoc_insertion_point(field_list:pb.TDefineChallengeGetWarZoneRankArrRsp.UserRankArr)
  return userrankarr_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb::TDefineChallengeRankInfo >*
TDefineChallengeGetWarZoneRankArrRsp::mutable_userrankarr() {
  // @@protoc_insertion_point(field_mutable_list:pb.TDefineChallengeGetWarZoneRankArrRsp.UserRankArr)
  return &userrankarr_;
}

// optional .pb.TDefineChallengeRankInfo SelfRank = 2;
inline bool TDefineChallengeGetWarZoneRankArrRsp::has_selfrank() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TDefineChallengeGetWarZoneRankArrRsp::set_has_selfrank() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TDefineChallengeGetWarZoneRankArrRsp::clear_has_selfrank() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TDefineChallengeGetWarZoneRankArrRsp::clear_selfrank() {
  if (selfrank_ != NULL) selfrank_->::pb::TDefineChallengeRankInfo::Clear();
  clear_has_selfrank();
}
inline const ::pb::TDefineChallengeRankInfo& TDefineChallengeGetWarZoneRankArrRsp::selfrank() const {
  // @@protoc_insertion_point(field_get:pb.TDefineChallengeGetWarZoneRankArrRsp.SelfRank)
  return selfrank_ != NULL ? *selfrank_ : *default_instance_->selfrank_;
}
inline ::pb::TDefineChallengeRankInfo* TDefineChallengeGetWarZoneRankArrRsp::mutable_selfrank() {
  set_has_selfrank();
  if (selfrank_ == NULL) selfrank_ = new ::pb::TDefineChallengeRankInfo;
  // @@protoc_insertion_point(field_mutable:pb.TDefineChallengeGetWarZoneRankArrRsp.SelfRank)
  return selfrank_;
}
inline ::pb::TDefineChallengeRankInfo* TDefineChallengeGetWarZoneRankArrRsp::release_selfrank() {
  clear_has_selfrank();
  ::pb::TDefineChallengeRankInfo* temp = selfrank_;
  selfrank_ = NULL;
  return temp;
}
inline void TDefineChallengeGetWarZoneRankArrRsp::set_allocated_selfrank(::pb::TDefineChallengeRankInfo* selfrank) {
  delete selfrank_;
  selfrank_ = selfrank;
  if (selfrank) {
    set_has_selfrank();
  } else {
    clear_has_selfrank();
  }
  // @@protoc_insertion_point(field_set_allocated:pb.TDefineChallengeGetWarZoneRankArrRsp.SelfRank)
}

// -------------------------------------------------------------------

// TDefineChallengeGetRankFormationRep

// optional uint64 Uid = 1;
inline bool TDefineChallengeGetRankFormationRep::has_uid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TDefineChallengeGetRankFormationRep::set_has_uid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TDefineChallengeGetRankFormationRep::clear_has_uid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TDefineChallengeGetRankFormationRep::clear_uid() {
  uid_ = GOOGLE_ULONGLONG(0);
  clear_has_uid();
}
inline ::google::protobuf::uint64 TDefineChallengeGetRankFormationRep::uid() const {
  // @@protoc_insertion_point(field_get:pb.TDefineChallengeGetRankFormationRep.Uid)
  return uid_;
}
inline void TDefineChallengeGetRankFormationRep::set_uid(::google::protobuf::uint64 value) {
  set_has_uid();
  uid_ = value;
  // @@protoc_insertion_point(field_set:pb.TDefineChallengeGetRankFormationRep.Uid)
}

// optional uint32 Rank = 2;
inline bool TDefineChallengeGetRankFormationRep::has_rank() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TDefineChallengeGetRankFormationRep::set_has_rank() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TDefineChallengeGetRankFormationRep::clear_has_rank() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TDefineChallengeGetRankFormationRep::clear_rank() {
  rank_ = 0u;
  clear_has_rank();
}
inline ::google::protobuf::uint32 TDefineChallengeGetRankFormationRep::rank() const {
  // @@protoc_insertion_point(field_get:pb.TDefineChallengeGetRankFormationRep.Rank)
  return rank_;
}
inline void TDefineChallengeGetRankFormationRep::set_rank(::google::protobuf::uint32 value) {
  set_has_rank();
  rank_ = value;
  // @@protoc_insertion_point(field_set:pb.TDefineChallengeGetRankFormationRep.Rank)
}

// -------------------------------------------------------------------

// TDefineChallengeGetRankFormationRsp

// repeated .pb.TDefineChallengeOtherRankInfo BossInfo = 1;
inline int TDefineChallengeGetRankFormationRsp::bossinfo_size() const {
  return bossinfo_.size();
}
inline void TDefineChallengeGetRankFormationRsp::clear_bossinfo() {
  bossinfo_.Clear();
}
inline const ::pb::TDefineChallengeOtherRankInfo& TDefineChallengeGetRankFormationRsp::bossinfo(int index) const {
  // @@protoc_insertion_point(field_get:pb.TDefineChallengeGetRankFormationRsp.BossInfo)
  return bossinfo_.Get(index);
}
inline ::pb::TDefineChallengeOtherRankInfo* TDefineChallengeGetRankFormationRsp::mutable_bossinfo(int index) {
  // @@protoc_insertion_point(field_mutable:pb.TDefineChallengeGetRankFormationRsp.BossInfo)
  return bossinfo_.Mutable(index);
}
inline ::pb::TDefineChallengeOtherRankInfo* TDefineChallengeGetRankFormationRsp::add_bossinfo() {
  // @@protoc_insertion_point(field_add:pb.TDefineChallengeGetRankFormationRsp.BossInfo)
  return bossinfo_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::TDefineChallengeOtherRankInfo >&
TDefineChallengeGetRankFormationRsp::bossinfo() const {
  // @@protoc_insertion_point(field_list:pb.TDefineChallengeGetRankFormationRsp.BossInfo)
  return bossinfo_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb::TDefineChallengeOtherRankInfo >*
TDefineChallengeGetRankFormationRsp::mutable_bossinfo() {
  // @@protoc_insertion_point(field_mutable_list:pb.TDefineChallengeGetRankFormationRsp.BossInfo)
  return &bossinfo_;
}

// -------------------------------------------------------------------

// TDefineChallengeChangeBossRep

// optional uint32 BossId = 1;
inline bool TDefineChallengeChangeBossRep::has_bossid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TDefineChallengeChangeBossRep::set_has_bossid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TDefineChallengeChangeBossRep::clear_has_bossid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TDefineChallengeChangeBossRep::clear_bossid() {
  bossid_ = 0u;
  clear_has_bossid();
}
inline ::google::protobuf::uint32 TDefineChallengeChangeBossRep::bossid() const {
  // @@protoc_insertion_point(field_get:pb.TDefineChallengeChangeBossRep.BossId)
  return bossid_;
}
inline void TDefineChallengeChangeBossRep::set_bossid(::google::protobuf::uint32 value) {
  set_has_bossid();
  bossid_ = value;
  // @@protoc_insertion_point(field_set:pb.TDefineChallengeChangeBossRep.BossId)
}

// -------------------------------------------------------------------

// TDefineChallengeChangeBossRsp

// optional .pb.TDefineChallengeBossInfo BossInfo = 1;
inline bool TDefineChallengeChangeBossRsp::has_bossinfo() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TDefineChallengeChangeBossRsp::set_has_bossinfo() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TDefineChallengeChangeBossRsp::clear_has_bossinfo() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TDefineChallengeChangeBossRsp::clear_bossinfo() {
  if (bossinfo_ != NULL) bossinfo_->::pb::TDefineChallengeBossInfo::Clear();
  clear_has_bossinfo();
}
inline const ::pb::TDefineChallengeBossInfo& TDefineChallengeChangeBossRsp::bossinfo() const {
  // @@protoc_insertion_point(field_get:pb.TDefineChallengeChangeBossRsp.BossInfo)
  return bossinfo_ != NULL ? *bossinfo_ : *default_instance_->bossinfo_;
}
inline ::pb::TDefineChallengeBossInfo* TDefineChallengeChangeBossRsp::mutable_bossinfo() {
  set_has_bossinfo();
  if (bossinfo_ == NULL) bossinfo_ = new ::pb::TDefineChallengeBossInfo;
  // @@protoc_insertion_point(field_mutable:pb.TDefineChallengeChangeBossRsp.BossInfo)
  return bossinfo_;
}
inline ::pb::TDefineChallengeBossInfo* TDefineChallengeChangeBossRsp::release_bossinfo() {
  clear_has_bossinfo();
  ::pb::TDefineChallengeBossInfo* temp = bossinfo_;
  bossinfo_ = NULL;
  return temp;
}
inline void TDefineChallengeChangeBossRsp::set_allocated_bossinfo(::pb::TDefineChallengeBossInfo* bossinfo) {
  delete bossinfo_;
  bossinfo_ = bossinfo;
  if (bossinfo) {
    set_has_bossinfo();
  } else {
    clear_has_bossinfo();
  }
  // @@protoc_insertion_point(field_set_allocated:pb.TDefineChallengeChangeBossRsp.BossInfo)
}

// -------------------------------------------------------------------

// TDefineChallengeGetTaskListRep

// optional uint32 BossId = 1;
inline bool TDefineChallengeGetTaskListRep::has_bossid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TDefineChallengeGetTaskListRep::set_has_bossid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TDefineChallengeGetTaskListRep::clear_has_bossid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TDefineChallengeGetTaskListRep::clear_bossid() {
  bossid_ = 0u;
  clear_has_bossid();
}
inline ::google::protobuf::uint32 TDefineChallengeGetTaskListRep::bossid() const {
  // @@protoc_insertion_point(field_get:pb.TDefineChallengeGetTaskListRep.BossId)
  return bossid_;
}
inline void TDefineChallengeGetTaskListRep::set_bossid(::google::protobuf::uint32 value) {
  set_has_bossid();
  bossid_ = value;
  // @@protoc_insertion_point(field_set:pb.TDefineChallengeGetTaskListRep.BossId)
}

// -------------------------------------------------------------------

// TDefineChallengeGetTaskListRsp

// repeated .pb.TDefineChallengeTaskInfo TaskInfo = 1;
inline int TDefineChallengeGetTaskListRsp::taskinfo_size() const {
  return taskinfo_.size();
}
inline void TDefineChallengeGetTaskListRsp::clear_taskinfo() {
  taskinfo_.Clear();
}
inline const ::pb::TDefineChallengeTaskInfo& TDefineChallengeGetTaskListRsp::taskinfo(int index) const {
  // @@protoc_insertion_point(field_get:pb.TDefineChallengeGetTaskListRsp.TaskInfo)
  return taskinfo_.Get(index);
}
inline ::pb::TDefineChallengeTaskInfo* TDefineChallengeGetTaskListRsp::mutable_taskinfo(int index) {
  // @@protoc_insertion_point(field_mutable:pb.TDefineChallengeGetTaskListRsp.TaskInfo)
  return taskinfo_.Mutable(index);
}
inline ::pb::TDefineChallengeTaskInfo* TDefineChallengeGetTaskListRsp::add_taskinfo() {
  // @@protoc_insertion_point(field_add:pb.TDefineChallengeGetTaskListRsp.TaskInfo)
  return taskinfo_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::TDefineChallengeTaskInfo >&
TDefineChallengeGetTaskListRsp::taskinfo() const {
  // @@protoc_insertion_point(field_list:pb.TDefineChallengeGetTaskListRsp.TaskInfo)
  return taskinfo_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb::TDefineChallengeTaskInfo >*
TDefineChallengeGetTaskListRsp::mutable_taskinfo() {
  // @@protoc_insertion_point(field_mutable_list:pb.TDefineChallengeGetTaskListRsp.TaskInfo)
  return &taskinfo_;
}

// -------------------------------------------------------------------

// TDefineChallengeGetShopInfoRsp

// repeated .pb.TDefineChallengeGiftInfo GiftInfoArr = 1;
inline int TDefineChallengeGetShopInfoRsp::giftinfoarr_size() const {
  return giftinfoarr_.size();
}
inline void TDefineChallengeGetShopInfoRsp::clear_giftinfoarr() {
  giftinfoarr_.Clear();
}
inline const ::pb::TDefineChallengeGiftInfo& TDefineChallengeGetShopInfoRsp::giftinfoarr(int index) const {
  // @@protoc_insertion_point(field_get:pb.TDefineChallengeGetShopInfoRsp.GiftInfoArr)
  return giftinfoarr_.Get(index);
}
inline ::pb::TDefineChallengeGiftInfo* TDefineChallengeGetShopInfoRsp::mutable_giftinfoarr(int index) {
  // @@protoc_insertion_point(field_mutable:pb.TDefineChallengeGetShopInfoRsp.GiftInfoArr)
  return giftinfoarr_.Mutable(index);
}
inline ::pb::TDefineChallengeGiftInfo* TDefineChallengeGetShopInfoRsp::add_giftinfoarr() {
  // @@protoc_insertion_point(field_add:pb.TDefineChallengeGetShopInfoRsp.GiftInfoArr)
  return giftinfoarr_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::TDefineChallengeGiftInfo >&
TDefineChallengeGetShopInfoRsp::giftinfoarr() const {
  // @@protoc_insertion_point(field_list:pb.TDefineChallengeGetShopInfoRsp.GiftInfoArr)
  return giftinfoarr_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb::TDefineChallengeGiftInfo >*
TDefineChallengeGetShopInfoRsp::mutable_giftinfoarr() {
  // @@protoc_insertion_point(field_mutable_list:pb.TDefineChallengeGetShopInfoRsp.GiftInfoArr)
  return &giftinfoarr_;
}

// -------------------------------------------------------------------

// TDefineChallengeExchangeTimeLimitGiftRep

// optional uint32 GiftId = 1;
inline bool TDefineChallengeExchangeTimeLimitGiftRep::has_giftid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TDefineChallengeExchangeTimeLimitGiftRep::set_has_giftid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TDefineChallengeExchangeTimeLimitGiftRep::clear_has_giftid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TDefineChallengeExchangeTimeLimitGiftRep::clear_giftid() {
  giftid_ = 0u;
  clear_has_giftid();
}
inline ::google::protobuf::uint32 TDefineChallengeExchangeTimeLimitGiftRep::giftid() const {
  // @@protoc_insertion_point(field_get:pb.TDefineChallengeExchangeTimeLimitGiftRep.GiftId)
  return giftid_;
}
inline void TDefineChallengeExchangeTimeLimitGiftRep::set_giftid(::google::protobuf::uint32 value) {
  set_has_giftid();
  giftid_ = value;
  // @@protoc_insertion_point(field_set:pb.TDefineChallengeExchangeTimeLimitGiftRep.GiftId)
}

// optional uint32 BuyNum = 2;
inline bool TDefineChallengeExchangeTimeLimitGiftRep::has_buynum() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TDefineChallengeExchangeTimeLimitGiftRep::set_has_buynum() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TDefineChallengeExchangeTimeLimitGiftRep::clear_has_buynum() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TDefineChallengeExchangeTimeLimitGiftRep::clear_buynum() {
  buynum_ = 0u;
  clear_has_buynum();
}
inline ::google::protobuf::uint32 TDefineChallengeExchangeTimeLimitGiftRep::buynum() const {
  // @@protoc_insertion_point(field_get:pb.TDefineChallengeExchangeTimeLimitGiftRep.BuyNum)
  return buynum_;
}
inline void TDefineChallengeExchangeTimeLimitGiftRep::set_buynum(::google::protobuf::uint32 value) {
  set_has_buynum();
  buynum_ = value;
  // @@protoc_insertion_point(field_set:pb.TDefineChallengeExchangeTimeLimitGiftRep.BuyNum)
}

// -------------------------------------------------------------------

// TDefineChallengeExchangeTimeLimitGiftRsp

// repeated .pb.TCommonReward Reward = 1;
inline int TDefineChallengeExchangeTimeLimitGiftRsp::reward_size() const {
  return reward_.size();
}
inline void TDefineChallengeExchangeTimeLimitGiftRsp::clear_reward() {
  reward_.Clear();
}
inline const ::pb::TCommonReward& TDefineChallengeExchangeTimeLimitGiftRsp::reward(int index) const {
  // @@protoc_insertion_point(field_get:pb.TDefineChallengeExchangeTimeLimitGiftRsp.Reward)
  return reward_.Get(index);
}
inline ::pb::TCommonReward* TDefineChallengeExchangeTimeLimitGiftRsp::mutable_reward(int index) {
  // @@protoc_insertion_point(field_mutable:pb.TDefineChallengeExchangeTimeLimitGiftRsp.Reward)
  return reward_.Mutable(index);
}
inline ::pb::TCommonReward* TDefineChallengeExchangeTimeLimitGiftRsp::add_reward() {
  // @@protoc_insertion_point(field_add:pb.TDefineChallengeExchangeTimeLimitGiftRsp.Reward)
  return reward_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::TCommonReward >&
TDefineChallengeExchangeTimeLimitGiftRsp::reward() const {
  // @@protoc_insertion_point(field_list:pb.TDefineChallengeExchangeTimeLimitGiftRsp.Reward)
  return reward_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb::TCommonReward >*
TDefineChallengeExchangeTimeLimitGiftRsp::mutable_reward() {
  // @@protoc_insertion_point(field_mutable_list:pb.TDefineChallengeExchangeTimeLimitGiftRsp.Reward)
  return &reward_;
}

// optional uint32 BuyNum = 2;
inline bool TDefineChallengeExchangeTimeLimitGiftRsp::has_buynum() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TDefineChallengeExchangeTimeLimitGiftRsp::set_has_buynum() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TDefineChallengeExchangeTimeLimitGiftRsp::clear_has_buynum() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TDefineChallengeExchangeTimeLimitGiftRsp::clear_buynum() {
  buynum_ = 0u;
  clear_has_buynum();
}
inline ::google::protobuf::uint32 TDefineChallengeExchangeTimeLimitGiftRsp::buynum() const {
  // @@protoc_insertion_point(field_get:pb.TDefineChallengeExchangeTimeLimitGiftRsp.BuyNum)
  return buynum_;
}
inline void TDefineChallengeExchangeTimeLimitGiftRsp::set_buynum(::google::protobuf::uint32 value) {
  set_has_buynum();
  buynum_ = value;
  // @@protoc_insertion_point(field_set:pb.TDefineChallengeExchangeTimeLimitGiftRsp.BuyNum)
}

// -------------------------------------------------------------------

// TDefineChallengeSaveDebuffRep

// optional uint32 BossId = 1;
inline bool TDefineChallengeSaveDebuffRep::has_bossid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TDefineChallengeSaveDebuffRep::set_has_bossid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TDefineChallengeSaveDebuffRep::clear_has_bossid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TDefineChallengeSaveDebuffRep::clear_bossid() {
  bossid_ = 0u;
  clear_has_bossid();
}
inline ::google::protobuf::uint32 TDefineChallengeSaveDebuffRep::bossid() const {
  // @@protoc_insertion_point(field_get:pb.TDefineChallengeSaveDebuffRep.BossId)
  return bossid_;
}
inline void TDefineChallengeSaveDebuffRep::set_bossid(::google::protobuf::uint32 value) {
  set_has_bossid();
  bossid_ = value;
  // @@protoc_insertion_point(field_set:pb.TDefineChallengeSaveDebuffRep.BossId)
}

// repeated uint32 DebuffArr = 2;
inline int TDefineChallengeSaveDebuffRep::debuffarr_size() const {
  return debuffarr_.size();
}
inline void TDefineChallengeSaveDebuffRep::clear_debuffarr() {
  debuffarr_.Clear();
}
inline ::google::protobuf::uint32 TDefineChallengeSaveDebuffRep::debuffarr(int index) const {
  // @@protoc_insertion_point(field_get:pb.TDefineChallengeSaveDebuffRep.DebuffArr)
  return debuffarr_.Get(index);
}
inline void TDefineChallengeSaveDebuffRep::set_debuffarr(int index, ::google::protobuf::uint32 value) {
  debuffarr_.Set(index, value);
  // @@protoc_insertion_point(field_set:pb.TDefineChallengeSaveDebuffRep.DebuffArr)
}
inline void TDefineChallengeSaveDebuffRep::add_debuffarr(::google::protobuf::uint32 value) {
  debuffarr_.Add(value);
  // @@protoc_insertion_point(field_add:pb.TDefineChallengeSaveDebuffRep.DebuffArr)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
TDefineChallengeSaveDebuffRep::debuffarr() const {
  // @@protoc_insertion_point(field_list:pb.TDefineChallengeSaveDebuffRep.DebuffArr)
  return debuffarr_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
TDefineChallengeSaveDebuffRep::mutable_debuffarr() {
  // @@protoc_insertion_point(field_mutable_list:pb.TDefineChallengeSaveDebuffRep.DebuffArr)
  return &debuffarr_;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace pb

#ifndef SWIG
namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::pb::EDefineChallengeStage> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::pb::EDefineChallengeStage>() {
  return ::pb::EDefineChallengeStage_descriptor();
}
template <> struct is_proto_enum< ::pb::EDefineChallengeBanMType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::pb::EDefineChallengeBanMType>() {
  return ::pb::EDefineChallengeBanMType_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_net_2fDefineChallenge_2eproto__INCLUDED
