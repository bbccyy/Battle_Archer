// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: net/ArenaHighOrder.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "net/ArenaHighOrder.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace pb {

namespace {

const ::google::protobuf::Descriptor* TArenaHigOrderUserRankSingle_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TArenaHigOrderUserRankSingle_reflection_ = NULL;
const ::google::protobuf::Descriptor* TArenaHigOrderUserRankType_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TArenaHigOrderUserRankType_reflection_ = NULL;
const ::google::protobuf::Descriptor* TArenaHigOrderUserAboveRankRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TArenaHigOrderUserAboveRankRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* TArenaHigOrderTopRankUserReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TArenaHigOrderTopRankUserReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* TArenaHigOrderTopRankUserRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TArenaHigOrderTopRankUserRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* TArenaHigOrderUserTypeRankReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TArenaHigOrderUserTypeRankReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* TArenaHigOrderUserTypeRankRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TArenaHigOrderUserTypeRankRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* TArenaHighOrderUser_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TArenaHighOrderUser_reflection_ = NULL;
const ::google::protobuf::Descriptor* TArenaHighOrderUserRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TArenaHighOrderUserRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* TArenaHighOrderRefreshEnemyListRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TArenaHighOrderRefreshEnemyListRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* TArenaHighOrderBattlePos_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TArenaHighOrderBattlePos_reflection_ = NULL;
const ::google::protobuf::Descriptor* TArenaHighOrderFormationInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TArenaHighOrderFormationInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* TArenaHighOrderGetMyFormationRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TArenaHighOrderGetMyFormationRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* TArenaHighOrderSetFormationReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TArenaHighOrderSetFormationReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* TArenaHighOrderExchangeFormationReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TArenaHighOrderExchangeFormationReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* TArenaHighOrderEnemyFormation_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TArenaHighOrderEnemyFormation_reflection_ = NULL;
const ::google::protobuf::Descriptor* TArenaHighOrderGetEnemyFormationReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TArenaHighOrderGetEnemyFormationReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* TArenaHighOrderGetEnemyFormationRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TArenaHighOrderGetEnemyFormationRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* TUnitViewInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TUnitViewInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* TArmyViewInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TArmyViewInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* TArenaHighOrderFormationRecord_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TArenaHighOrderFormationRecord_reflection_ = NULL;
const ::google::protobuf::Descriptor* TArenaHighOrderRecordInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TArenaHighOrderRecordInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* TArenaHighOrderGetBattleRecordReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TArenaHighOrderGetBattleRecordReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* TArenaHighOrderGetBattleRecordRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TArenaHighOrderGetBattleRecordRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* TArenaHighOrderRankInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TArenaHighOrderRankInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* TArenaHighOrderGetRankListReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TArenaHighOrderGetRankListReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* TArenaHighOrderGetRankListRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TArenaHighOrderGetRankListRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* TArenaHighOrderBattleReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TArenaHighOrderBattleReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* TArenaHighOrderBattleRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TArenaHighOrderBattleRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* TArenaHighOrderGetSimpleBattleReportReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TArenaHighOrderGetSimpleBattleReportReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* TArenaHighOrderBattleRecordSimple_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TArenaHighOrderBattleRecordSimple_reflection_ = NULL;
const ::google::protobuf::Descriptor* TArenaHighOrderGetSimpleBattleReportRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TArenaHighOrderGetSimpleBattleReportRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* TArenaHighOrderBuyAtkNumReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TArenaHighOrderBuyAtkNumReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* TArenaHighOrderBuyAtkNumRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TArenaHighOrderBuyAtkNumRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* TArenaHighOrderServerPush_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TArenaHighOrderServerPush_reflection_ = NULL;
const ::google::protobuf::Descriptor* TArenaHighOrderReceiveScoresRewardReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TArenaHighOrderReceiveScoresRewardReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* TArenaHighOrderReceiveScoresRewardRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TArenaHighOrderReceiveScoresRewardRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* TArenaHighOrderGetEnemyFormationByOtherServerReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TArenaHighOrderGetEnemyFormationByOtherServerReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* TArenaHighOrderGetEnemyFormationByOtherServerRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TArenaHighOrderGetEnemyFormationByOtherServerRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* TArenaHighOrderSetAttackedRecordByOtherServerReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TArenaHighOrderSetAttackedRecordByOtherServerReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* TArenaHighOrderSetAttackedRecordByOtherServerRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TArenaHighOrderSetAttackedRecordByOtherServerRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* TArenaHighOrderGetTotalFightForceByOtherServerReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TArenaHighOrderGetTotalFightForceByOtherServerReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* TArenaHighOrderGetTotalFightForceByOtherServerRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TArenaHighOrderGetTotalFightForceByOtherServerRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* TArenaHighOrderQuickChallengServerReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TArenaHighOrderQuickChallengServerReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* TArenaHighOrderQuickChallengSingle_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TArenaHighOrderQuickChallengSingle_reflection_ = NULL;
const ::google::protobuf::Descriptor* TArenaHighOrderQuickChallengServerRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TArenaHighOrderQuickChallengServerRsp_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_net_2fArenaHighOrder_2eproto() {
  protobuf_AddDesc_net_2fArenaHighOrder_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "net/ArenaHighOrder.proto");
  GOOGLE_CHECK(file != NULL);
  TArenaHigOrderUserRankSingle_descriptor_ = file->message_type(0);
  static const int TArenaHigOrderUserRankSingle_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TArenaHigOrderUserRankSingle, usersimple_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TArenaHigOrderUserRankSingle, userscores_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TArenaHigOrderUserRankSingle, serverid_),
  };
  TArenaHigOrderUserRankSingle_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TArenaHigOrderUserRankSingle_descriptor_,
      TArenaHigOrderUserRankSingle::default_instance_,
      TArenaHigOrderUserRankSingle_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TArenaHigOrderUserRankSingle, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TArenaHigOrderUserRankSingle, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TArenaHigOrderUserRankSingle));
  TArenaHigOrderUserRankType_descriptor_ = file->message_type(1);
  static const int TArenaHigOrderUserRankType_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TArenaHigOrderUserRankType, rankid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TArenaHigOrderUserRankType, usernum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TArenaHigOrderUserRankType, userarr_),
  };
  TArenaHigOrderUserRankType_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TArenaHigOrderUserRankType_descriptor_,
      TArenaHigOrderUserRankType::default_instance_,
      TArenaHigOrderUserRankType_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TArenaHigOrderUserRankType, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TArenaHigOrderUserRankType, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TArenaHigOrderUserRankType));
  TArenaHigOrderUserAboveRankRsp_descriptor_ = file->message_type(2);
  static const int TArenaHigOrderUserAboveRankRsp_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TArenaHigOrderUserAboveRankRsp, myrank_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TArenaHigOrderUserAboveRankRsp, userrankarr_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TArenaHigOrderUserAboveRankRsp, toprankuserarr_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TArenaHigOrderUserAboveRankRsp, realtopn_),
  };
  TArenaHigOrderUserAboveRankRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TArenaHigOrderUserAboveRankRsp_descriptor_,
      TArenaHigOrderUserAboveRankRsp::default_instance_,
      TArenaHigOrderUserAboveRankRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TArenaHigOrderUserAboveRankRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TArenaHigOrderUserAboveRankRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TArenaHigOrderUserAboveRankRsp));
  TArenaHigOrderTopRankUserReq_descriptor_ = file->message_type(3);
  static const int TArenaHigOrderTopRankUserReq_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TArenaHigOrderTopRankUserReq, offset_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TArenaHigOrderTopRankUserReq, limit_),
  };
  TArenaHigOrderTopRankUserReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TArenaHigOrderTopRankUserReq_descriptor_,
      TArenaHigOrderTopRankUserReq::default_instance_,
      TArenaHigOrderTopRankUserReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TArenaHigOrderTopRankUserReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TArenaHigOrderTopRankUserReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TArenaHigOrderTopRankUserReq));
  TArenaHigOrderTopRankUserRsp_descriptor_ = file->message_type(4);
  static const int TArenaHigOrderTopRankUserRsp_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TArenaHigOrderTopRankUserRsp, toprankuserarr_),
  };
  TArenaHigOrderTopRankUserRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TArenaHigOrderTopRankUserRsp_descriptor_,
      TArenaHigOrderTopRankUserRsp::default_instance_,
      TArenaHigOrderTopRankUserRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TArenaHigOrderTopRankUserRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TArenaHigOrderTopRankUserRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TArenaHigOrderTopRankUserRsp));
  TArenaHigOrderUserTypeRankReq_descriptor_ = file->message_type(5);
  static const int TArenaHigOrderUserTypeRankReq_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TArenaHigOrderUserTypeRankReq, typerankid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TArenaHigOrderUserTypeRankReq, offset_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TArenaHigOrderUserTypeRankReq, limit_),
  };
  TArenaHigOrderUserTypeRankReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TArenaHigOrderUserTypeRankReq_descriptor_,
      TArenaHigOrderUserTypeRankReq::default_instance_,
      TArenaHigOrderUserTypeRankReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TArenaHigOrderUserTypeRankReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TArenaHigOrderUserTypeRankReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TArenaHigOrderUserTypeRankReq));
  TArenaHigOrderUserTypeRankRsp_descriptor_ = file->message_type(6);
  static const int TArenaHigOrderUserTypeRankRsp_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TArenaHigOrderUserTypeRankRsp, typerankarr_),
  };
  TArenaHigOrderUserTypeRankRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TArenaHigOrderUserTypeRankRsp_descriptor_,
      TArenaHigOrderUserTypeRankRsp::default_instance_,
      TArenaHigOrderUserTypeRankRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TArenaHigOrderUserTypeRankRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TArenaHigOrderUserTypeRankRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TArenaHigOrderUserTypeRankRsp));
  TArenaHighOrderUser_descriptor_ = file->message_type(7);
  static const int TArenaHighOrderUser_offsets_[10] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TArenaHighOrderUser, uid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TArenaHighOrderUser, uname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TArenaHighOrderUser, scores_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TArenaHighOrderUser, fightforce_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TArenaHighOrderUser, htid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TArenaHighOrderUser, rank_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TArenaHighOrderUser, serverid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TArenaHighOrderUser, playerimagehtid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TArenaHighOrderUser, playerimageframetid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TArenaHighOrderUser, guildname_),
  };
  TArenaHighOrderUser_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TArenaHighOrderUser_descriptor_,
      TArenaHighOrderUser::default_instance_,
      TArenaHighOrderUser_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TArenaHighOrderUser, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TArenaHighOrderUser, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TArenaHighOrderUser));
  TArenaHighOrderUserRsp_descriptor_ = file->message_type(8);
  static const int TArenaHighOrderUserRsp_offsets_[15] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TArenaHighOrderUserRsp, enemyarr_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TArenaHighOrderUserRsp, refreshtime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TArenaHighOrderUserRsp, extraatknum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TArenaHighOrderUserRsp, buynum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TArenaHighOrderUserRsp, myscores_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TArenaHighOrderUserRsp, myfightforce_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TArenaHighOrderUserRsp, hasnewreport_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TArenaHighOrderUserRsp, resettime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TArenaHighOrderUserRsp, maxscores_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TArenaHighOrderUserRsp, endtime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TArenaHighOrderUserRsp, receivetidarr_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TArenaHighOrderUserRsp, myrank_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TArenaHighOrderUserRsp, serverid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TArenaHighOrderUserRsp, hasatk_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TArenaHighOrderUserRsp, begintime_),
  };
  TArenaHighOrderUserRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TArenaHighOrderUserRsp_descriptor_,
      TArenaHighOrderUserRsp::default_instance_,
      TArenaHighOrderUserRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TArenaHighOrderUserRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TArenaHighOrderUserRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TArenaHighOrderUserRsp));
  TArenaHighOrderRefreshEnemyListRsp_descriptor_ = file->message_type(9);
  static const int TArenaHighOrderRefreshEnemyListRsp_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TArenaHighOrderRefreshEnemyListRsp, enemyarr_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TArenaHighOrderRefreshEnemyListRsp, refreshtime_),
  };
  TArenaHighOrderRefreshEnemyListRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TArenaHighOrderRefreshEnemyListRsp_descriptor_,
      TArenaHighOrderRefreshEnemyListRsp::default_instance_,
      TArenaHighOrderRefreshEnemyListRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TArenaHighOrderRefreshEnemyListRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TArenaHighOrderRefreshEnemyListRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TArenaHighOrderRefreshEnemyListRsp));
  TArenaHighOrderBattlePos_descriptor_ = file->message_type(10);
  static const int TArenaHighOrderBattlePos_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TArenaHighOrderBattlePos, hid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TArenaHighOrderBattlePos, pos_),
  };
  TArenaHighOrderBattlePos_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TArenaHighOrderBattlePos_descriptor_,
      TArenaHighOrderBattlePos::default_instance_,
      TArenaHighOrderBattlePos_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TArenaHighOrderBattlePos, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TArenaHighOrderBattlePos, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TArenaHighOrderBattlePos));
  TArenaHighOrderFormationInfo_descriptor_ = file->message_type(11);
  static const int TArenaHighOrderFormationInfo_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TArenaHighOrderFormationInfo, formationid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TArenaHighOrderFormationInfo, battlearr_),
  };
  TArenaHighOrderFormationInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TArenaHighOrderFormationInfo_descriptor_,
      TArenaHighOrderFormationInfo::default_instance_,
      TArenaHighOrderFormationInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TArenaHighOrderFormationInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TArenaHighOrderFormationInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TArenaHighOrderFormationInfo));
  TArenaHighOrderGetMyFormationRsp_descriptor_ = file->message_type(12);
  static const int TArenaHighOrderGetMyFormationRsp_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TArenaHighOrderGetMyFormationRsp, formationarr_),
  };
  TArenaHighOrderGetMyFormationRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TArenaHighOrderGetMyFormationRsp_descriptor_,
      TArenaHighOrderGetMyFormationRsp::default_instance_,
      TArenaHighOrderGetMyFormationRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TArenaHighOrderGetMyFormationRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TArenaHighOrderGetMyFormationRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TArenaHighOrderGetMyFormationRsp));
  TArenaHighOrderSetFormationReq_descriptor_ = file->message_type(13);
  static const int TArenaHighOrderSetFormationReq_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TArenaHighOrderSetFormationReq, formationarr_),
  };
  TArenaHighOrderSetFormationReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TArenaHighOrderSetFormationReq_descriptor_,
      TArenaHighOrderSetFormationReq::default_instance_,
      TArenaHighOrderSetFormationReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TArenaHighOrderSetFormationReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TArenaHighOrderSetFormationReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TArenaHighOrderSetFormationReq));
  TArenaHighOrderExchangeFormationReq_descriptor_ = file->message_type(14);
  static const int TArenaHighOrderExchangeFormationReq_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TArenaHighOrderExchangeFormationReq, formationid_),
  };
  TArenaHighOrderExchangeFormationReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TArenaHighOrderExchangeFormationReq_descriptor_,
      TArenaHighOrderExchangeFormationReq::default_instance_,
      TArenaHighOrderExchangeFormationReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TArenaHighOrderExchangeFormationReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TArenaHighOrderExchangeFormationReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TArenaHighOrderExchangeFormationReq));
  TArenaHighOrderEnemyFormation_descriptor_ = file->message_type(15);
  static const int TArenaHighOrderEnemyFormation_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TArenaHighOrderEnemyFormation, formationid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TArenaHighOrderEnemyFormation, unitarr_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TArenaHighOrderEnemyFormation, fightforce_),
  };
  TArenaHighOrderEnemyFormation_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TArenaHighOrderEnemyFormation_descriptor_,
      TArenaHighOrderEnemyFormation::default_instance_,
      TArenaHighOrderEnemyFormation_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TArenaHighOrderEnemyFormation, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TArenaHighOrderEnemyFormation, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TArenaHighOrderEnemyFormation));
  TArenaHighOrderGetEnemyFormationReq_descriptor_ = file->message_type(16);
  static const int TArenaHighOrderGetEnemyFormationReq_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TArenaHighOrderGetEnemyFormationReq, enemyuid_),
  };
  TArenaHighOrderGetEnemyFormationReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TArenaHighOrderGetEnemyFormationReq_descriptor_,
      TArenaHighOrderGetEnemyFormationReq::default_instance_,
      TArenaHighOrderGetEnemyFormationReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TArenaHighOrderGetEnemyFormationReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TArenaHighOrderGetEnemyFormationReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TArenaHighOrderGetEnemyFormationReq));
  TArenaHighOrderGetEnemyFormationRsp_descriptor_ = file->message_type(17);
  static const int TArenaHighOrderGetEnemyFormationRsp_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TArenaHighOrderGetEnemyFormationRsp, formationarr_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TArenaHighOrderGetEnemyFormationRsp, rankarr_),
  };
  TArenaHighOrderGetEnemyFormationRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TArenaHighOrderGetEnemyFormationRsp_descriptor_,
      TArenaHighOrderGetEnemyFormationRsp::default_instance_,
      TArenaHighOrderGetEnemyFormationRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TArenaHighOrderGetEnemyFormationRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TArenaHighOrderGetEnemyFormationRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TArenaHighOrderGetEnemyFormationRsp));
  TUnitViewInfo_descriptor_ = file->message_type(18);
  static const int TUnitViewInfo_offsets_[10] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TUnitViewInfo, hid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TUnitViewInfo, pos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TUnitViewInfo, level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TUnitViewInfo, star_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TUnitViewInfo, curhp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TUnitViewInfo, maxhp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TUnitViewInfo, damageout_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TUnitViewInfo, damagein_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TUnitViewInfo, htid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TUnitViewInfo, healout_),
  };
  TUnitViewInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TUnitViewInfo_descriptor_,
      TUnitViewInfo::default_instance_,
      TUnitViewInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TUnitViewInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TUnitViewInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TUnitViewInfo));
  TArmyViewInfo_descriptor_ = file->message_type(19);
  static const int TArmyViewInfo_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TArmyViewInfo, unitarr_),
  };
  TArmyViewInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TArmyViewInfo_descriptor_,
      TArmyViewInfo::default_instance_,
      TArmyViewInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TArmyViewInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TArmyViewInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TArmyViewInfo));
  TArenaHighOrderFormationRecord_descriptor_ = file->message_type(20);
  static const int TArenaHighOrderFormationRecord_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TArenaHighOrderFormationRecord, formationid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TArenaHighOrderFormationRecord, recordid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TArenaHighOrderFormationRecord, iswin_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TArenaHighOrderFormationRecord, army1arr_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TArenaHighOrderFormationRecord, army2arr_),
  };
  TArenaHighOrderFormationRecord_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TArenaHighOrderFormationRecord_descriptor_,
      TArenaHighOrderFormationRecord::default_instance_,
      TArenaHighOrderFormationRecord_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TArenaHighOrderFormationRecord, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TArenaHighOrderFormationRecord, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TArenaHighOrderFormationRecord));
  TArenaHighOrderRecordInfo_descriptor_ = file->message_type(21);
  static const int TArenaHighOrderRecordInfo_offsets_[15] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TArenaHighOrderRecordInfo, attackuserinfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TArenaHighOrderRecordInfo, defenduserinfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TArenaHighOrderRecordInfo, attackposbofore_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TArenaHighOrderRecordInfo, attackposafter_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TArenaHighOrderRecordInfo, attackscoresbefore_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TArenaHighOrderRecordInfo, attackscoresafter_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TArenaHighOrderRecordInfo, defendposbefore_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TArenaHighOrderRecordInfo, defendposafter_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TArenaHighOrderRecordInfo, defendscoresbefore_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TArenaHighOrderRecordInfo, defendscoresafter_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TArenaHighOrderRecordInfo, recordarr_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TArenaHighOrderRecordInfo, recordtime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TArenaHighOrderRecordInfo, readtime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TArenaHighOrderRecordInfo, atkserverid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TArenaHighOrderRecordInfo, defserverid_),
  };
  TArenaHighOrderRecordInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TArenaHighOrderRecordInfo_descriptor_,
      TArenaHighOrderRecordInfo::default_instance_,
      TArenaHighOrderRecordInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TArenaHighOrderRecordInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TArenaHighOrderRecordInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TArenaHighOrderRecordInfo));
  TArenaHighOrderGetBattleRecordReq_descriptor_ = file->message_type(22);
  static const int TArenaHighOrderGetBattleRecordReq_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TArenaHighOrderGetBattleRecordReq, offset_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TArenaHighOrderGetBattleRecordReq, limit_),
  };
  TArenaHighOrderGetBattleRecordReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TArenaHighOrderGetBattleRecordReq_descriptor_,
      TArenaHighOrderGetBattleRecordReq::default_instance_,
      TArenaHighOrderGetBattleRecordReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TArenaHighOrderGetBattleRecordReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TArenaHighOrderGetBattleRecordReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TArenaHighOrderGetBattleRecordReq));
  TArenaHighOrderGetBattleRecordRsp_descriptor_ = file->message_type(23);
  static const int TArenaHighOrderGetBattleRecordRsp_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TArenaHighOrderGetBattleRecordRsp, recordarr_),
  };
  TArenaHighOrderGetBattleRecordRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TArenaHighOrderGetBattleRecordRsp_descriptor_,
      TArenaHighOrderGetBattleRecordRsp::default_instance_,
      TArenaHighOrderGetBattleRecordRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TArenaHighOrderGetBattleRecordRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TArenaHighOrderGetBattleRecordRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TArenaHighOrderGetBattleRecordRsp));
  TArenaHighOrderRankInfo_descriptor_ = file->message_type(24);
  static const int TArenaHighOrderRankInfo_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TArenaHighOrderRankInfo, userinfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TArenaHighOrderRankInfo, position_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TArenaHighOrderRankInfo, scores_),
  };
  TArenaHighOrderRankInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TArenaHighOrderRankInfo_descriptor_,
      TArenaHighOrderRankInfo::default_instance_,
      TArenaHighOrderRankInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TArenaHighOrderRankInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TArenaHighOrderRankInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TArenaHighOrderRankInfo));
  TArenaHighOrderGetRankListReq_descriptor_ = file->message_type(25);
  static const int TArenaHighOrderGetRankListReq_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TArenaHighOrderGetRankListReq, offset_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TArenaHighOrderGetRankListReq, limit_),
  };
  TArenaHighOrderGetRankListReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TArenaHighOrderGetRankListReq_descriptor_,
      TArenaHighOrderGetRankListReq::default_instance_,
      TArenaHighOrderGetRankListReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TArenaHighOrderGetRankListReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TArenaHighOrderGetRankListReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TArenaHighOrderGetRankListReq));
  TArenaHighOrderGetRankListRsp_descriptor_ = file->message_type(26);
  static const int TArenaHighOrderGetRankListRsp_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TArenaHighOrderGetRankListRsp, rankarr_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TArenaHighOrderGetRankListRsp, myrank_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TArenaHighOrderGetRankListRsp, myscores_),
  };
  TArenaHighOrderGetRankListRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TArenaHighOrderGetRankListRsp_descriptor_,
      TArenaHighOrderGetRankListRsp::default_instance_,
      TArenaHighOrderGetRankListRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TArenaHighOrderGetRankListRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TArenaHighOrderGetRankListRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TArenaHighOrderGetRankListRsp));
  TArenaHighOrderBattleReq_descriptor_ = file->message_type(27);
  static const int TArenaHighOrderBattleReq_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TArenaHighOrderBattleReq, enemyuid_),
  };
  TArenaHighOrderBattleReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TArenaHighOrderBattleReq_descriptor_,
      TArenaHighOrderBattleReq::default_instance_,
      TArenaHighOrderBattleReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TArenaHighOrderBattleReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TArenaHighOrderBattleReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TArenaHighOrderBattleReq));
  TArenaHighOrderBattleRsp_descriptor_ = file->message_type(28);
  static const int TArenaHighOrderBattleRsp_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TArenaHighOrderBattleRsp, battlerecordinfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TArenaHighOrderBattleRsp, droparray_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TArenaHighOrderBattleRsp, extraatknum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TArenaHighOrderBattleRsp, firstresultinfo_),
  };
  TArenaHighOrderBattleRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TArenaHighOrderBattleRsp_descriptor_,
      TArenaHighOrderBattleRsp::default_instance_,
      TArenaHighOrderBattleRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TArenaHighOrderBattleRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TArenaHighOrderBattleRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TArenaHighOrderBattleRsp));
  TArenaHighOrderGetSimpleBattleReportReq_descriptor_ = file->message_type(29);
  static const int TArenaHighOrderGetSimpleBattleReportReq_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TArenaHighOrderGetSimpleBattleReportReq, serverid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TArenaHighOrderGetSimpleBattleReportReq, ridarr_),
  };
  TArenaHighOrderGetSimpleBattleReportReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TArenaHighOrderGetSimpleBattleReportReq_descriptor_,
      TArenaHighOrderGetSimpleBattleReportReq::default_instance_,
      TArenaHighOrderGetSimpleBattleReportReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TArenaHighOrderGetSimpleBattleReportReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TArenaHighOrderGetSimpleBattleReportReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TArenaHighOrderGetSimpleBattleReportReq));
  TArenaHighOrderBattleRecordSimple_descriptor_ = file->message_type(30);
  static const int TArenaHighOrderBattleRecordSimple_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TArenaHighOrderBattleRecordSimple, army1arr_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TArenaHighOrderBattleRecordSimple, army2arr_),
  };
  TArenaHighOrderBattleRecordSimple_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TArenaHighOrderBattleRecordSimple_descriptor_,
      TArenaHighOrderBattleRecordSimple::default_instance_,
      TArenaHighOrderBattleRecordSimple_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TArenaHighOrderBattleRecordSimple, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TArenaHighOrderBattleRecordSimple, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TArenaHighOrderBattleRecordSimple));
  TArenaHighOrderGetSimpleBattleReportRsp_descriptor_ = file->message_type(31);
  static const int TArenaHighOrderGetSimpleBattleReportRsp_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TArenaHighOrderGetSimpleBattleReportRsp, recordarr_),
  };
  TArenaHighOrderGetSimpleBattleReportRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TArenaHighOrderGetSimpleBattleReportRsp_descriptor_,
      TArenaHighOrderGetSimpleBattleReportRsp::default_instance_,
      TArenaHighOrderGetSimpleBattleReportRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TArenaHighOrderGetSimpleBattleReportRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TArenaHighOrderGetSimpleBattleReportRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TArenaHighOrderGetSimpleBattleReportRsp));
  TArenaHighOrderBuyAtkNumReq_descriptor_ = file->message_type(32);
  static const int TArenaHighOrderBuyAtkNumReq_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TArenaHighOrderBuyAtkNumReq, num_),
  };
  TArenaHighOrderBuyAtkNumReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TArenaHighOrderBuyAtkNumReq_descriptor_,
      TArenaHighOrderBuyAtkNumReq::default_instance_,
      TArenaHighOrderBuyAtkNumReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TArenaHighOrderBuyAtkNumReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TArenaHighOrderBuyAtkNumReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TArenaHighOrderBuyAtkNumReq));
  TArenaHighOrderBuyAtkNumRsp_descriptor_ = file->message_type(33);
  static const int TArenaHighOrderBuyAtkNumRsp_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TArenaHighOrderBuyAtkNumRsp, extraatknum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TArenaHighOrderBuyAtkNumRsp, buynum_),
  };
  TArenaHighOrderBuyAtkNumRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TArenaHighOrderBuyAtkNumRsp_descriptor_,
      TArenaHighOrderBuyAtkNumRsp::default_instance_,
      TArenaHighOrderBuyAtkNumRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TArenaHighOrderBuyAtkNumRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TArenaHighOrderBuyAtkNumRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TArenaHighOrderBuyAtkNumRsp));
  TArenaHighOrderServerPush_descriptor_ = file->message_type(34);
  static const int TArenaHighOrderServerPush_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TArenaHighOrderServerPush, recordinfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TArenaHighOrderServerPush, enemyarr_),
  };
  TArenaHighOrderServerPush_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TArenaHighOrderServerPush_descriptor_,
      TArenaHighOrderServerPush::default_instance_,
      TArenaHighOrderServerPush_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TArenaHighOrderServerPush, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TArenaHighOrderServerPush, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TArenaHighOrderServerPush));
  TArenaHighOrderReceiveScoresRewardReq_descriptor_ = file->message_type(35);
  static const int TArenaHighOrderReceiveScoresRewardReq_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TArenaHighOrderReceiveScoresRewardReq, tid_),
  };
  TArenaHighOrderReceiveScoresRewardReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TArenaHighOrderReceiveScoresRewardReq_descriptor_,
      TArenaHighOrderReceiveScoresRewardReq::default_instance_,
      TArenaHighOrderReceiveScoresRewardReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TArenaHighOrderReceiveScoresRewardReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TArenaHighOrderReceiveScoresRewardReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TArenaHighOrderReceiveScoresRewardReq));
  TArenaHighOrderReceiveScoresRewardRsp_descriptor_ = file->message_type(36);
  static const int TArenaHighOrderReceiveScoresRewardRsp_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TArenaHighOrderReceiveScoresRewardRsp, rewardarr_),
  };
  TArenaHighOrderReceiveScoresRewardRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TArenaHighOrderReceiveScoresRewardRsp_descriptor_,
      TArenaHighOrderReceiveScoresRewardRsp::default_instance_,
      TArenaHighOrderReceiveScoresRewardRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TArenaHighOrderReceiveScoresRewardRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TArenaHighOrderReceiveScoresRewardRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TArenaHighOrderReceiveScoresRewardRsp));
  TArenaHighOrderGetEnemyFormationByOtherServerReq_descriptor_ = file->message_type(37);
  static const int TArenaHighOrderGetEnemyFormationByOtherServerReq_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TArenaHighOrderGetEnemyFormationByOtherServerReq, uid_),
  };
  TArenaHighOrderGetEnemyFormationByOtherServerReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TArenaHighOrderGetEnemyFormationByOtherServerReq_descriptor_,
      TArenaHighOrderGetEnemyFormationByOtherServerReq::default_instance_,
      TArenaHighOrderGetEnemyFormationByOtherServerReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TArenaHighOrderGetEnemyFormationByOtherServerReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TArenaHighOrderGetEnemyFormationByOtherServerReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TArenaHighOrderGetEnemyFormationByOtherServerReq));
  TArenaHighOrderGetEnemyFormationByOtherServerRsp_descriptor_ = file->message_type(38);
  static const int TArenaHighOrderGetEnemyFormationByOtherServerRsp_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TArenaHighOrderGetEnemyFormationByOtherServerRsp, formationarray_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TArenaHighOrderGetEnemyFormationByOtherServerRsp, rankarr_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TArenaHighOrderGetEnemyFormationByOtherServerRsp, beastskillarr_),
  };
  TArenaHighOrderGetEnemyFormationByOtherServerRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TArenaHighOrderGetEnemyFormationByOtherServerRsp_descriptor_,
      TArenaHighOrderGetEnemyFormationByOtherServerRsp::default_instance_,
      TArenaHighOrderGetEnemyFormationByOtherServerRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TArenaHighOrderGetEnemyFormationByOtherServerRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TArenaHighOrderGetEnemyFormationByOtherServerRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TArenaHighOrderGetEnemyFormationByOtherServerRsp));
  TArenaHighOrderSetAttackedRecordByOtherServerReq_descriptor_ = file->message_type(39);
  static const int TArenaHighOrderSetAttackedRecordByOtherServerReq_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TArenaHighOrderSetAttackedRecordByOtherServerReq, uid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TArenaHighOrderSetAttackedRecordByOtherServerReq, scoresdelta_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TArenaHighOrderSetAttackedRecordByOtherServerReq, battlerecordinfo_),
  };
  TArenaHighOrderSetAttackedRecordByOtherServerReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TArenaHighOrderSetAttackedRecordByOtherServerReq_descriptor_,
      TArenaHighOrderSetAttackedRecordByOtherServerReq::default_instance_,
      TArenaHighOrderSetAttackedRecordByOtherServerReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TArenaHighOrderSetAttackedRecordByOtherServerReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TArenaHighOrderSetAttackedRecordByOtherServerReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TArenaHighOrderSetAttackedRecordByOtherServerReq));
  TArenaHighOrderSetAttackedRecordByOtherServerRsp_descriptor_ = file->message_type(40);
  static const int TArenaHighOrderSetAttackedRecordByOtherServerRsp_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TArenaHighOrderSetAttackedRecordByOtherServerRsp, scores_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TArenaHighOrderSetAttackedRecordByOtherServerRsp, rank_),
  };
  TArenaHighOrderSetAttackedRecordByOtherServerRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TArenaHighOrderSetAttackedRecordByOtherServerRsp_descriptor_,
      TArenaHighOrderSetAttackedRecordByOtherServerRsp::default_instance_,
      TArenaHighOrderSetAttackedRecordByOtherServerRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TArenaHighOrderSetAttackedRecordByOtherServerRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TArenaHighOrderSetAttackedRecordByOtherServerRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TArenaHighOrderSetAttackedRecordByOtherServerRsp));
  TArenaHighOrderGetTotalFightForceByOtherServerReq_descriptor_ = file->message_type(41);
  static const int TArenaHighOrderGetTotalFightForceByOtherServerReq_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TArenaHighOrderGetTotalFightForceByOtherServerReq, uid_),
  };
  TArenaHighOrderGetTotalFightForceByOtherServerReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TArenaHighOrderGetTotalFightForceByOtherServerReq_descriptor_,
      TArenaHighOrderGetTotalFightForceByOtherServerReq::default_instance_,
      TArenaHighOrderGetTotalFightForceByOtherServerReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TArenaHighOrderGetTotalFightForceByOtherServerReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TArenaHighOrderGetTotalFightForceByOtherServerReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TArenaHighOrderGetTotalFightForceByOtherServerReq));
  TArenaHighOrderGetTotalFightForceByOtherServerRsp_descriptor_ = file->message_type(42);
  static const int TArenaHighOrderGetTotalFightForceByOtherServerRsp_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TArenaHighOrderGetTotalFightForceByOtherServerRsp, fightforce_),
  };
  TArenaHighOrderGetTotalFightForceByOtherServerRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TArenaHighOrderGetTotalFightForceByOtherServerRsp_descriptor_,
      TArenaHighOrderGetTotalFightForceByOtherServerRsp::default_instance_,
      TArenaHighOrderGetTotalFightForceByOtherServerRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TArenaHighOrderGetTotalFightForceByOtherServerRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TArenaHighOrderGetTotalFightForceByOtherServerRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TArenaHighOrderGetTotalFightForceByOtherServerRsp));
  TArenaHighOrderQuickChallengServerReq_descriptor_ = file->message_type(43);
  static const int TArenaHighOrderQuickChallengServerReq_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TArenaHighOrderQuickChallengServerReq, uid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TArenaHighOrderQuickChallengServerReq, num_),
  };
  TArenaHighOrderQuickChallengServerReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TArenaHighOrderQuickChallengServerReq_descriptor_,
      TArenaHighOrderQuickChallengServerReq::default_instance_,
      TArenaHighOrderQuickChallengServerReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TArenaHighOrderQuickChallengServerReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TArenaHighOrderQuickChallengServerReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TArenaHighOrderQuickChallengServerReq));
  TArenaHighOrderQuickChallengSingle_descriptor_ = file->message_type(44);
  static const int TArenaHighOrderQuickChallengSingle_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TArenaHighOrderQuickChallengSingle, myscores_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TArenaHighOrderQuickChallengSingle, myrank_),
  };
  TArenaHighOrderQuickChallengSingle_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TArenaHighOrderQuickChallengSingle_descriptor_,
      TArenaHighOrderQuickChallengSingle::default_instance_,
      TArenaHighOrderQuickChallengSingle_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TArenaHighOrderQuickChallengSingle, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TArenaHighOrderQuickChallengSingle, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TArenaHighOrderQuickChallengSingle));
  TArenaHighOrderQuickChallengServerRsp_descriptor_ = file->message_type(45);
  static const int TArenaHighOrderQuickChallengServerRsp_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TArenaHighOrderQuickChallengServerRsp, resultarr_),
  };
  TArenaHighOrderQuickChallengServerRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TArenaHighOrderQuickChallengServerRsp_descriptor_,
      TArenaHighOrderQuickChallengServerRsp::default_instance_,
      TArenaHighOrderQuickChallengServerRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TArenaHighOrderQuickChallengServerRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TArenaHighOrderQuickChallengServerRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TArenaHighOrderQuickChallengServerRsp));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_net_2fArenaHighOrder_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TArenaHigOrderUserRankSingle_descriptor_, &TArenaHigOrderUserRankSingle::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TArenaHigOrderUserRankType_descriptor_, &TArenaHigOrderUserRankType::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TArenaHigOrderUserAboveRankRsp_descriptor_, &TArenaHigOrderUserAboveRankRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TArenaHigOrderTopRankUserReq_descriptor_, &TArenaHigOrderTopRankUserReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TArenaHigOrderTopRankUserRsp_descriptor_, &TArenaHigOrderTopRankUserRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TArenaHigOrderUserTypeRankReq_descriptor_, &TArenaHigOrderUserTypeRankReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TArenaHigOrderUserTypeRankRsp_descriptor_, &TArenaHigOrderUserTypeRankRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TArenaHighOrderUser_descriptor_, &TArenaHighOrderUser::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TArenaHighOrderUserRsp_descriptor_, &TArenaHighOrderUserRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TArenaHighOrderRefreshEnemyListRsp_descriptor_, &TArenaHighOrderRefreshEnemyListRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TArenaHighOrderBattlePos_descriptor_, &TArenaHighOrderBattlePos::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TArenaHighOrderFormationInfo_descriptor_, &TArenaHighOrderFormationInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TArenaHighOrderGetMyFormationRsp_descriptor_, &TArenaHighOrderGetMyFormationRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TArenaHighOrderSetFormationReq_descriptor_, &TArenaHighOrderSetFormationReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TArenaHighOrderExchangeFormationReq_descriptor_, &TArenaHighOrderExchangeFormationReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TArenaHighOrderEnemyFormation_descriptor_, &TArenaHighOrderEnemyFormation::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TArenaHighOrderGetEnemyFormationReq_descriptor_, &TArenaHighOrderGetEnemyFormationReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TArenaHighOrderGetEnemyFormationRsp_descriptor_, &TArenaHighOrderGetEnemyFormationRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TUnitViewInfo_descriptor_, &TUnitViewInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TArmyViewInfo_descriptor_, &TArmyViewInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TArenaHighOrderFormationRecord_descriptor_, &TArenaHighOrderFormationRecord::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TArenaHighOrderRecordInfo_descriptor_, &TArenaHighOrderRecordInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TArenaHighOrderGetBattleRecordReq_descriptor_, &TArenaHighOrderGetBattleRecordReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TArenaHighOrderGetBattleRecordRsp_descriptor_, &TArenaHighOrderGetBattleRecordRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TArenaHighOrderRankInfo_descriptor_, &TArenaHighOrderRankInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TArenaHighOrderGetRankListReq_descriptor_, &TArenaHighOrderGetRankListReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TArenaHighOrderGetRankListRsp_descriptor_, &TArenaHighOrderGetRankListRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TArenaHighOrderBattleReq_descriptor_, &TArenaHighOrderBattleReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TArenaHighOrderBattleRsp_descriptor_, &TArenaHighOrderBattleRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TArenaHighOrderGetSimpleBattleReportReq_descriptor_, &TArenaHighOrderGetSimpleBattleReportReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TArenaHighOrderBattleRecordSimple_descriptor_, &TArenaHighOrderBattleRecordSimple::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TArenaHighOrderGetSimpleBattleReportRsp_descriptor_, &TArenaHighOrderGetSimpleBattleReportRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TArenaHighOrderBuyAtkNumReq_descriptor_, &TArenaHighOrderBuyAtkNumReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TArenaHighOrderBuyAtkNumRsp_descriptor_, &TArenaHighOrderBuyAtkNumRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TArenaHighOrderServerPush_descriptor_, &TArenaHighOrderServerPush::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TArenaHighOrderReceiveScoresRewardReq_descriptor_, &TArenaHighOrderReceiveScoresRewardReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TArenaHighOrderReceiveScoresRewardRsp_descriptor_, &TArenaHighOrderReceiveScoresRewardRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TArenaHighOrderGetEnemyFormationByOtherServerReq_descriptor_, &TArenaHighOrderGetEnemyFormationByOtherServerReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TArenaHighOrderGetEnemyFormationByOtherServerRsp_descriptor_, &TArenaHighOrderGetEnemyFormationByOtherServerRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TArenaHighOrderSetAttackedRecordByOtherServerReq_descriptor_, &TArenaHighOrderSetAttackedRecordByOtherServerReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TArenaHighOrderSetAttackedRecordByOtherServerRsp_descriptor_, &TArenaHighOrderSetAttackedRecordByOtherServerRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TArenaHighOrderGetTotalFightForceByOtherServerReq_descriptor_, &TArenaHighOrderGetTotalFightForceByOtherServerReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TArenaHighOrderGetTotalFightForceByOtherServerRsp_descriptor_, &TArenaHighOrderGetTotalFightForceByOtherServerRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TArenaHighOrderQuickChallengServerReq_descriptor_, &TArenaHighOrderQuickChallengServerReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TArenaHighOrderQuickChallengSingle_descriptor_, &TArenaHighOrderQuickChallengSingle::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TArenaHighOrderQuickChallengServerRsp_descriptor_, &TArenaHighOrderQuickChallengServerRsp::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_net_2fArenaHighOrder_2eproto() {
  delete TArenaHigOrderUserRankSingle::default_instance_;
  delete TArenaHigOrderUserRankSingle_reflection_;
  delete TArenaHigOrderUserRankType::default_instance_;
  delete TArenaHigOrderUserRankType_reflection_;
  delete TArenaHigOrderUserAboveRankRsp::default_instance_;
  delete TArenaHigOrderUserAboveRankRsp_reflection_;
  delete TArenaHigOrderTopRankUserReq::default_instance_;
  delete TArenaHigOrderTopRankUserReq_reflection_;
  delete TArenaHigOrderTopRankUserRsp::default_instance_;
  delete TArenaHigOrderTopRankUserRsp_reflection_;
  delete TArenaHigOrderUserTypeRankReq::default_instance_;
  delete TArenaHigOrderUserTypeRankReq_reflection_;
  delete TArenaHigOrderUserTypeRankRsp::default_instance_;
  delete TArenaHigOrderUserTypeRankRsp_reflection_;
  delete TArenaHighOrderUser::default_instance_;
  delete TArenaHighOrderUser_reflection_;
  delete TArenaHighOrderUserRsp::default_instance_;
  delete TArenaHighOrderUserRsp_reflection_;
  delete TArenaHighOrderRefreshEnemyListRsp::default_instance_;
  delete TArenaHighOrderRefreshEnemyListRsp_reflection_;
  delete TArenaHighOrderBattlePos::default_instance_;
  delete TArenaHighOrderBattlePos_reflection_;
  delete TArenaHighOrderFormationInfo::default_instance_;
  delete TArenaHighOrderFormationInfo_reflection_;
  delete TArenaHighOrderGetMyFormationRsp::default_instance_;
  delete TArenaHighOrderGetMyFormationRsp_reflection_;
  delete TArenaHighOrderSetFormationReq::default_instance_;
  delete TArenaHighOrderSetFormationReq_reflection_;
  delete TArenaHighOrderExchangeFormationReq::default_instance_;
  delete TArenaHighOrderExchangeFormationReq_reflection_;
  delete TArenaHighOrderEnemyFormation::default_instance_;
  delete TArenaHighOrderEnemyFormation_reflection_;
  delete TArenaHighOrderGetEnemyFormationReq::default_instance_;
  delete TArenaHighOrderGetEnemyFormationReq_reflection_;
  delete TArenaHighOrderGetEnemyFormationRsp::default_instance_;
  delete TArenaHighOrderGetEnemyFormationRsp_reflection_;
  delete TUnitViewInfo::default_instance_;
  delete TUnitViewInfo_reflection_;
  delete TArmyViewInfo::default_instance_;
  delete TArmyViewInfo_reflection_;
  delete TArenaHighOrderFormationRecord::default_instance_;
  delete TArenaHighOrderFormationRecord_reflection_;
  delete TArenaHighOrderRecordInfo::default_instance_;
  delete TArenaHighOrderRecordInfo_reflection_;
  delete TArenaHighOrderGetBattleRecordReq::default_instance_;
  delete TArenaHighOrderGetBattleRecordReq_reflection_;
  delete TArenaHighOrderGetBattleRecordRsp::default_instance_;
  delete TArenaHighOrderGetBattleRecordRsp_reflection_;
  delete TArenaHighOrderRankInfo::default_instance_;
  delete TArenaHighOrderRankInfo_reflection_;
  delete TArenaHighOrderGetRankListReq::default_instance_;
  delete TArenaHighOrderGetRankListReq_reflection_;
  delete TArenaHighOrderGetRankListRsp::default_instance_;
  delete TArenaHighOrderGetRankListRsp_reflection_;
  delete TArenaHighOrderBattleReq::default_instance_;
  delete TArenaHighOrderBattleReq_reflection_;
  delete TArenaHighOrderBattleRsp::default_instance_;
  delete TArenaHighOrderBattleRsp_reflection_;
  delete TArenaHighOrderGetSimpleBattleReportReq::default_instance_;
  delete TArenaHighOrderGetSimpleBattleReportReq_reflection_;
  delete TArenaHighOrderBattleRecordSimple::default_instance_;
  delete TArenaHighOrderBattleRecordSimple_reflection_;
  delete TArenaHighOrderGetSimpleBattleReportRsp::default_instance_;
  delete TArenaHighOrderGetSimpleBattleReportRsp_reflection_;
  delete TArenaHighOrderBuyAtkNumReq::default_instance_;
  delete TArenaHighOrderBuyAtkNumReq_reflection_;
  delete TArenaHighOrderBuyAtkNumRsp::default_instance_;
  delete TArenaHighOrderBuyAtkNumRsp_reflection_;
  delete TArenaHighOrderServerPush::default_instance_;
  delete TArenaHighOrderServerPush_reflection_;
  delete TArenaHighOrderReceiveScoresRewardReq::default_instance_;
  delete TArenaHighOrderReceiveScoresRewardReq_reflection_;
  delete TArenaHighOrderReceiveScoresRewardRsp::default_instance_;
  delete TArenaHighOrderReceiveScoresRewardRsp_reflection_;
  delete TArenaHighOrderGetEnemyFormationByOtherServerReq::default_instance_;
  delete TArenaHighOrderGetEnemyFormationByOtherServerReq_reflection_;
  delete TArenaHighOrderGetEnemyFormationByOtherServerRsp::default_instance_;
  delete TArenaHighOrderGetEnemyFormationByOtherServerRsp_reflection_;
  delete TArenaHighOrderSetAttackedRecordByOtherServerReq::default_instance_;
  delete TArenaHighOrderSetAttackedRecordByOtherServerReq_reflection_;
  delete TArenaHighOrderSetAttackedRecordByOtherServerRsp::default_instance_;
  delete TArenaHighOrderSetAttackedRecordByOtherServerRsp_reflection_;
  delete TArenaHighOrderGetTotalFightForceByOtherServerReq::default_instance_;
  delete TArenaHighOrderGetTotalFightForceByOtherServerReq_reflection_;
  delete TArenaHighOrderGetTotalFightForceByOtherServerRsp::default_instance_;
  delete TArenaHighOrderGetTotalFightForceByOtherServerRsp_reflection_;
  delete TArenaHighOrderQuickChallengServerReq::default_instance_;
  delete TArenaHighOrderQuickChallengServerReq_reflection_;
  delete TArenaHighOrderQuickChallengSingle::default_instance_;
  delete TArenaHighOrderQuickChallengSingle_reflection_;
  delete TArenaHighOrderQuickChallengServerRsp::default_instance_;
  delete TArenaHighOrderQuickChallengServerRsp_reflection_;
}

void protobuf_AddDesc_net_2fArenaHighOrder_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::pb::protobuf_AddDesc_net_2fBattle_2eproto();
  ::pb::protobuf_AddDesc_net_2fUser_2eproto();
  ::pb::protobuf_AddDesc_net_2fCommonReward_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\030net/ArenaHighOrder.proto\022\002pb\032\020net/Batt"
    "le.proto\032\016net/User.proto\032\026net/CommonRewa"
    "rd.proto\"m\n\034TArenaHigOrderUserRankSingle"
    "\022\'\n\nUserSimple\030\001 \001(\0132\023.pb.TUserSimpleInf"
    "o\022\022\n\nUserScores\030\002 \001(\r\022\020\n\010ServerId\030\003 \001(\t\""
    "p\n\032TArenaHigOrderUserRankType\022\016\n\006RankId\030"
    "\001 \001(\r\022\017\n\007UserNum\030\002 \001(\r\0221\n\007UserArr\030\003 \003(\0132"
    " .pb.TArenaHigOrderUserRankSingle\"\261\001\n\036TA"
    "renaHigOrderUserAboveRankRsp\022\016\n\006MyRank\030\001"
    " \001(\005\0223\n\013UserRankArr\030\002 \003(\0132\036.pb.TArenaHig"
    "OrderUserRankType\0228\n\016TopRankUserArr\030\003 \003("
    "\0132 .pb.TArenaHigOrderUserRankSingle\022\020\n\010R"
    "ealTopN\030\004 \001(\r\"=\n\034TArenaHigOrderTopRankUs"
    "erReq\022\016\n\006Offset\030\001 \001(\005\022\r\n\005Limit\030\002 \001(\005\"X\n\034"
    "TArenaHigOrderTopRankUserRsp\0228\n\016TopRankU"
    "serArr\030\001 \003(\0132 .pb.TArenaHigOrderUserRank"
    "Single\"R\n\035TArenaHigOrderUserTypeRankReq\022"
    "\022\n\nTypeRankId\030\001 \001(\005\022\016\n\006Offset\030\002 \001(\005\022\r\n\005L"
    "imit\030\003 \001(\005\"V\n\035TArenaHigOrderUserTypeRank"
    "Rsp\0225\n\013TypeRankArr\030\001 \003(\0132 .pb.TArenaHigO"
    "rderUserRankSingle\"\314\001\n\023TArenaHighOrderUs"
    "er\022\013\n\003Uid\030\001 \001(\004\022\r\n\005Uname\030\002 \001(\t\022\016\n\006Scores"
    "\030\003 \001(\r\022\022\n\nFightForce\030\004 \001(\004\022\014\n\004Htid\030\005 \001(\r"
    "\022\014\n\004Rank\030\006 \001(\005\022\020\n\010ServerId\030\007 \001(\t\022\027\n\017Play"
    "erImageHtid\030\010 \001(\r\022\033\n\023PlayerImageFrameTid"
    "\030\t \001(\r\022\021\n\tGuildName\030\n \001(\t\"\316\002\n\026TArenaHigh"
    "OrderUserRsp\022)\n\010EnemyArr\030\001 \003(\0132\027.pb.TAre"
    "naHighOrderUser\022\023\n\013RefreshTime\030\002 \001(\004\022\023\n\013"
    "ExtraAtkNum\030\003 \001(\r\022\016\n\006BuyNum\030\004 \001(\r\022\020\n\010MyS"
    "cores\030\005 \001(\r\022\024\n\014MyFightForce\030\006 \001(\004\022\024\n\014Has"
    "NewReport\030\007 \001(\010\022\021\n\tResetTime\030\010 \001(\004\022\021\n\tMa"
    "xScores\030\t \001(\r\022\017\n\007EndTime\030\n \001(\004\022\025\n\rReceiv"
    "eTidArr\030\013 \003(\r\022\016\n\006MyRank\030\014 \001(\005\022\020\n\010ServerI"
    "d\030\r \001(\t\022\016\n\006HasAtk\030\016 \001(\010\022\021\n\tBeginTime\030\017 \001"
    "(\004\"d\n\"TArenaHighOrderRefreshEnemyListRsp"
    "\022)\n\010EnemyArr\030\001 \003(\0132\027.pb.TArenaHighOrderU"
    "ser\022\023\n\013RefreshTime\030\002 \001(\004\"4\n\030TArenaHighOr"
    "derBattlePos\022\013\n\003Hid\030\001 \001(\r\022\013\n\003Pos\030\002 \001(\r\"d"
    "\n\034TArenaHighOrderFormationInfo\022\023\n\013Format"
    "ionId\030\001 \001(\r\022/\n\tBattleArr\030\002 \003(\0132\034.pb.TAre"
    "naHighOrderBattlePos\"Z\n TArenaHighOrderG"
    "etMyFormationRsp\0226\n\014FormationArr\030\001 \003(\0132 "
    ".pb.TArenaHighOrderFormationInfo\"X\n\036TAre"
    "naHighOrderSetFormationReq\0226\n\014FormationA"
    "rr\030\001 \003(\0132 .pb.TArenaHighOrderFormationIn"
    "fo\":\n#TArenaHighOrderExchangeFormationRe"
    "q\022\023\n\013FormationId\030\001 \001(\r\"h\n\035TArenaHighOrde"
    "rEnemyFormation\022\023\n\013FormationId\030\001 \001(\r\022\036\n\007"
    "UnitArr\030\002 \003(\0132\r.pb.TUnitInfo\022\022\n\nFightFor"
    "ce\030\003 \001(\004\"7\n#TArenaHighOrderGetEnemyForma"
    "tionReq\022\020\n\010EnemyUid\030\001 \001(\004\"\200\001\n#TArenaHigh"
    "OrderGetEnemyFormationRsp\0227\n\014FormationAr"
    "r\030\001 \003(\0132!.pb.TArenaHighOrderEnemyFormati"
    "on\022 \n\007RankArr\030\002 \003(\0132\017.pb.TRankSingle\"\250\001\n"
    "\rTUnitViewInfo\022\013\n\003Hid\030\001 \002(\r\022\013\n\003Pos\030\002 \002(\r"
    "\022\r\n\005Level\030\003 \002(\r\022\014\n\004Star\030\004 \001(\r\022\r\n\005CurHp\030\005"
    " \001(\004\022\r\n\005MaxHp\030\006 \001(\004\022\021\n\tDamageOut\030\007 \001(\004\022\020"
    "\n\010DamageIn\030\010 \001(\004\022\014\n\004Htid\030\t \001(\r\022\017\n\007HealOu"
    "t\030\n \001(\004\"3\n\rTArmyViewInfo\022\"\n\007UnitArr\030\001 \003("
    "\0132\021.pb.TUnitViewInfo\"\240\001\n\036TArenaHighOrder"
    "FormationRecord\022\023\n\013FormationId\030\001 \001(\r\022\020\n\010"
    "RecordId\030\002 \001(\004\022\r\n\005IsWin\030\003 \001(\010\022#\n\010Army1Ar"
    "r\030\004 \003(\0132\021.pb.TArmyViewInfo\022#\n\010Army2Arr\030\005"
    " \003(\0132\021.pb.TArmyViewInfo\"\314\003\n\031TArenaHighOr"
    "derRecordInfo\022+\n\016AttackUserInfo\030\001 \001(\0132\023."
    "pb.TUserSimpleInfo\022+\n\016DefendUserInfo\030\002 \001"
    "(\0132\023.pb.TUserSimpleInfo\022\027\n\017AttackPosBofo"
    "re\030\003 \001(\r\022\026\n\016AttackPosAfter\030\004 \001(\r\022\032\n\022Atta"
    "ckScoresBefore\030\005 \001(\r\022\031\n\021AttackScoresAfte"
    "r\030\006 \001(\r\022\027\n\017DefendPosBefore\030\007 \001(\r\022\026\n\016Defe"
    "ndPosAfter\030\010 \001(\r\022\032\n\022DefendScoresBefore\030\t"
    " \001(\r\022\031\n\021DefendScoresAfter\030\n \001(\r\0225\n\tRecor"
    "dArr\030\013 \003(\0132\".pb.TArenaHighOrderFormation"
    "Record\022\022\n\nRecordTime\030\014 \001(\004\022\020\n\010ReadTime\030\r"
    " \001(\004\022\023\n\013AtkServerId\030\016 \001(\t\022\023\n\013DefServerId"
    "\030\017 \001(\t\"B\n!TArenaHighOrderGetBattleRecord"
    "Req\022\016\n\006Offset\030\001 \001(\r\022\r\n\005Limit\030\002 \001(\r\"U\n!TA"
    "renaHighOrderGetBattleRecordRsp\0220\n\tRecor"
    "dArr\030\001 \003(\0132\035.pb.TArenaHighOrderRecordInf"
    "o\"b\n\027TArenaHighOrderRankInfo\022%\n\010UserInfo"
    "\030\001 \001(\0132\023.pb.TUserSimpleInfo\022\020\n\010Position\030"
    "\002 \001(\r\022\016\n\006Scores\030\003 \001(\r\">\n\035TArenaHighOrder"
    "GetRankListReq\022\016\n\006Offset\030\001 \001(\r\022\r\n\005Limit\030"
    "\002 \001(\r\"o\n\035TArenaHighOrderGetRankListRsp\022,"
    "\n\007RankArr\030\001 \003(\0132\033.pb.TArenaHighOrderRank"
    "Info\022\016\n\006MyRank\030\002 \001(\005\022\020\n\010MyScores\030\003 \001(\005\","
    "\n\030TArenaHighOrderBattleReq\022\020\n\010EnemyUid\030\001"
    " \001(\004\"\247\001\n\030TArenaHighOrderBattleRsp\0227\n\020Bat"
    "tleRecordInfo\030\001 \001(\0132\035.pb.TArenaHighOrder"
    "RecordInfo\022$\n\tDropArray\030\002 \003(\0132\021.pb.TComm"
    "onReward\022\023\n\013ExtraAtkNum\030\003 \001(\r\022\027\n\017FirstRe"
    "sultInfo\030\004 \001(\014\"K\n\'TArenaHighOrderGetSimp"
    "leBattleReportReq\022\020\n\010ServerId\030\001 \001(\t\022\016\n\006R"
    "idArr\030\002 \003(\004\"m\n!TArenaHighOrderBattleReco"
    "rdSimple\022#\n\010Army1Arr\030\004 \001(\0132\021.pb.TArmyVie"
    "wInfo\022#\n\010Army2Arr\030\005 \001(\0132\021.pb.TArmyViewIn"
    "fo\"c\n\'TArenaHighOrderGetSimpleBattleRepo"
    "rtRsp\0228\n\tRecordArr\030\001 \003(\0132%.pb.TArenaHigh"
    "OrderBattleRecordSimple\"*\n\033TArenaHighOrd"
    "erBuyAtkNumReq\022\013\n\003Num\030\001 \001(\r\"B\n\033TArenaHig"
    "hOrderBuyAtkNumRsp\022\023\n\013ExtraAtkNum\030\001 \001(\r\022"
    "\016\n\006BuyNum\030\002 \001(\r\"y\n\031TArenaHighOrderServer"
    "Push\0221\n\nRecordInfo\030\001 \001(\0132\035.pb.TArenaHigh"
    "OrderRecordInfo\022)\n\010EnemyArr\030\002 \003(\0132\027.pb.T"
    "ArenaHighOrderUser\"4\n%TArenaHighOrderRec"
    "eiveScoresRewardReq\022\013\n\003Tid\030\001 \001(\r\"M\n%TAre"
    "naHighOrderReceiveScoresRewardRsp\022$\n\tRew"
    "ardArr\030\001 \003(\0132\021.pb.TCommonReward\"\?\n0TAren"
    "aHighOrderGetEnemyFormationByOtherServer"
    "Req\022\013\n\003Uid\030\001 \001(\004\"\246\001\n0TArenaHighOrderGetE"
    "nemyFormationByOtherServerRsp\0229\n\016Formati"
    "onArray\030\001 \003(\0132!.pb.TArenaHighOrderEnemyF"
    "ormation\022 \n\007RankArr\030\002 \003(\0132\017.pb.TRankSing"
    "le\022\025\n\rBeastSkillArr\030\003 \003(\r\"\215\001\n0TArenaHigh"
    "OrderSetAttackedRecordByOtherServerReq\022\013"
    "\n\003Uid\030\001 \001(\004\022\023\n\013ScoresDelta\030\002 \001(\005\0227\n\020Batt"
    "leRecordInfo\030\003 \001(\0132\035.pb.TArenaHighOrderR"
    "ecordInfo\"P\n0TArenaHighOrderSetAttackedR"
    "ecordByOtherServerRsp\022\016\n\006Scores\030\001 \001(\r\022\014\n"
    "\004Rank\030\002 \001(\005\"@\n1TArenaHighOrderGetTotalFi"
    "ghtForceByOtherServerReq\022\013\n\003Uid\030\001 \001(\004\"G\n"
    "1TArenaHighOrderGetTotalFightForceByOthe"
    "rServerRsp\022\022\n\nFightForce\030\001 \001(\004\"A\n%TArena"
    "HighOrderQuickChallengServerReq\022\013\n\003Uid\030\001"
    " \001(\004\022\013\n\003Num\030\002 \001(\r\"F\n\"TArenaHighOrderQuic"
    "kChallengSingle\022\020\n\010MyScores\030\001 \001(\r\022\016\n\006MyR"
    "ank\030\002 \001(\005\"b\n%TArenaHighOrderQuickChallen"
    "gServerRsp\0229\n\tResultArr\030\001 \003(\0132&.pb.TAren"
    "aHighOrderQuickChallengSingle", 5149);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "net/ArenaHighOrder.proto", &protobuf_RegisterTypes);
  TArenaHigOrderUserRankSingle::default_instance_ = new TArenaHigOrderUserRankSingle();
  TArenaHigOrderUserRankType::default_instance_ = new TArenaHigOrderUserRankType();
  TArenaHigOrderUserAboveRankRsp::default_instance_ = new TArenaHigOrderUserAboveRankRsp();
  TArenaHigOrderTopRankUserReq::default_instance_ = new TArenaHigOrderTopRankUserReq();
  TArenaHigOrderTopRankUserRsp::default_instance_ = new TArenaHigOrderTopRankUserRsp();
  TArenaHigOrderUserTypeRankReq::default_instance_ = new TArenaHigOrderUserTypeRankReq();
  TArenaHigOrderUserTypeRankRsp::default_instance_ = new TArenaHigOrderUserTypeRankRsp();
  TArenaHighOrderUser::default_instance_ = new TArenaHighOrderUser();
  TArenaHighOrderUserRsp::default_instance_ = new TArenaHighOrderUserRsp();
  TArenaHighOrderRefreshEnemyListRsp::default_instance_ = new TArenaHighOrderRefreshEnemyListRsp();
  TArenaHighOrderBattlePos::default_instance_ = new TArenaHighOrderBattlePos();
  TArenaHighOrderFormationInfo::default_instance_ = new TArenaHighOrderFormationInfo();
  TArenaHighOrderGetMyFormationRsp::default_instance_ = new TArenaHighOrderGetMyFormationRsp();
  TArenaHighOrderSetFormationReq::default_instance_ = new TArenaHighOrderSetFormationReq();
  TArenaHighOrderExchangeFormationReq::default_instance_ = new TArenaHighOrderExchangeFormationReq();
  TArenaHighOrderEnemyFormation::default_instance_ = new TArenaHighOrderEnemyFormation();
  TArenaHighOrderGetEnemyFormationReq::default_instance_ = new TArenaHighOrderGetEnemyFormationReq();
  TArenaHighOrderGetEnemyFormationRsp::default_instance_ = new TArenaHighOrderGetEnemyFormationRsp();
  TUnitViewInfo::default_instance_ = new TUnitViewInfo();
  TArmyViewInfo::default_instance_ = new TArmyViewInfo();
  TArenaHighOrderFormationRecord::default_instance_ = new TArenaHighOrderFormationRecord();
  TArenaHighOrderRecordInfo::default_instance_ = new TArenaHighOrderRecordInfo();
  TArenaHighOrderGetBattleRecordReq::default_instance_ = new TArenaHighOrderGetBattleRecordReq();
  TArenaHighOrderGetBattleRecordRsp::default_instance_ = new TArenaHighOrderGetBattleRecordRsp();
  TArenaHighOrderRankInfo::default_instance_ = new TArenaHighOrderRankInfo();
  TArenaHighOrderGetRankListReq::default_instance_ = new TArenaHighOrderGetRankListReq();
  TArenaHighOrderGetRankListRsp::default_instance_ = new TArenaHighOrderGetRankListRsp();
  TArenaHighOrderBattleReq::default_instance_ = new TArenaHighOrderBattleReq();
  TArenaHighOrderBattleRsp::default_instance_ = new TArenaHighOrderBattleRsp();
  TArenaHighOrderGetSimpleBattleReportReq::default_instance_ = new TArenaHighOrderGetSimpleBattleReportReq();
  TArenaHighOrderBattleRecordSimple::default_instance_ = new TArenaHighOrderBattleRecordSimple();
  TArenaHighOrderGetSimpleBattleReportRsp::default_instance_ = new TArenaHighOrderGetSimpleBattleReportRsp();
  TArenaHighOrderBuyAtkNumReq::default_instance_ = new TArenaHighOrderBuyAtkNumReq();
  TArenaHighOrderBuyAtkNumRsp::default_instance_ = new TArenaHighOrderBuyAtkNumRsp();
  TArenaHighOrderServerPush::default_instance_ = new TArenaHighOrderServerPush();
  TArenaHighOrderReceiveScoresRewardReq::default_instance_ = new TArenaHighOrderReceiveScoresRewardReq();
  TArenaHighOrderReceiveScoresRewardRsp::default_instance_ = new TArenaHighOrderReceiveScoresRewardRsp();
  TArenaHighOrderGetEnemyFormationByOtherServerReq::default_instance_ = new TArenaHighOrderGetEnemyFormationByOtherServerReq();
  TArenaHighOrderGetEnemyFormationByOtherServerRsp::default_instance_ = new TArenaHighOrderGetEnemyFormationByOtherServerRsp();
  TArenaHighOrderSetAttackedRecordByOtherServerReq::default_instance_ = new TArenaHighOrderSetAttackedRecordByOtherServerReq();
  TArenaHighOrderSetAttackedRecordByOtherServerRsp::default_instance_ = new TArenaHighOrderSetAttackedRecordByOtherServerRsp();
  TArenaHighOrderGetTotalFightForceByOtherServerReq::default_instance_ = new TArenaHighOrderGetTotalFightForceByOtherServerReq();
  TArenaHighOrderGetTotalFightForceByOtherServerRsp::default_instance_ = new TArenaHighOrderGetTotalFightForceByOtherServerRsp();
  TArenaHighOrderQuickChallengServerReq::default_instance_ = new TArenaHighOrderQuickChallengServerReq();
  TArenaHighOrderQuickChallengSingle::default_instance_ = new TArenaHighOrderQuickChallengSingle();
  TArenaHighOrderQuickChallengServerRsp::default_instance_ = new TArenaHighOrderQuickChallengServerRsp();
  TArenaHigOrderUserRankSingle::default_instance_->InitAsDefaultInstance();
  TArenaHigOrderUserRankType::default_instance_->InitAsDefaultInstance();
  TArenaHigOrderUserAboveRankRsp::default_instance_->InitAsDefaultInstance();
  TArenaHigOrderTopRankUserReq::default_instance_->InitAsDefaultInstance();
  TArenaHigOrderTopRankUserRsp::default_instance_->InitAsDefaultInstance();
  TArenaHigOrderUserTypeRankReq::default_instance_->InitAsDefaultInstance();
  TArenaHigOrderUserTypeRankRsp::default_instance_->InitAsDefaultInstance();
  TArenaHighOrderUser::default_instance_->InitAsDefaultInstance();
  TArenaHighOrderUserRsp::default_instance_->InitAsDefaultInstance();
  TArenaHighOrderRefreshEnemyListRsp::default_instance_->InitAsDefaultInstance();
  TArenaHighOrderBattlePos::default_instance_->InitAsDefaultInstance();
  TArenaHighOrderFormationInfo::default_instance_->InitAsDefaultInstance();
  TArenaHighOrderGetMyFormationRsp::default_instance_->InitAsDefaultInstance();
  TArenaHighOrderSetFormationReq::default_instance_->InitAsDefaultInstance();
  TArenaHighOrderExchangeFormationReq::default_instance_->InitAsDefaultInstance();
  TArenaHighOrderEnemyFormation::default_instance_->InitAsDefaultInstance();
  TArenaHighOrderGetEnemyFormationReq::default_instance_->InitAsDefaultInstance();
  TArenaHighOrderGetEnemyFormationRsp::default_instance_->InitAsDefaultInstance();
  TUnitViewInfo::default_instance_->InitAsDefaultInstance();
  TArmyViewInfo::default_instance_->InitAsDefaultInstance();
  TArenaHighOrderFormationRecord::default_instance_->InitAsDefaultInstance();
  TArenaHighOrderRecordInfo::default_instance_->InitAsDefaultInstance();
  TArenaHighOrderGetBattleRecordReq::default_instance_->InitAsDefaultInstance();
  TArenaHighOrderGetBattleRecordRsp::default_instance_->InitAsDefaultInstance();
  TArenaHighOrderRankInfo::default_instance_->InitAsDefaultInstance();
  TArenaHighOrderGetRankListReq::default_instance_->InitAsDefaultInstance();
  TArenaHighOrderGetRankListRsp::default_instance_->InitAsDefaultInstance();
  TArenaHighOrderBattleReq::default_instance_->InitAsDefaultInstance();
  TArenaHighOrderBattleRsp::default_instance_->InitAsDefaultInstance();
  TArenaHighOrderGetSimpleBattleReportReq::default_instance_->InitAsDefaultInstance();
  TArenaHighOrderBattleRecordSimple::default_instance_->InitAsDefaultInstance();
  TArenaHighOrderGetSimpleBattleReportRsp::default_instance_->InitAsDefaultInstance();
  TArenaHighOrderBuyAtkNumReq::default_instance_->InitAsDefaultInstance();
  TArenaHighOrderBuyAtkNumRsp::default_instance_->InitAsDefaultInstance();
  TArenaHighOrderServerPush::default_instance_->InitAsDefaultInstance();
  TArenaHighOrderReceiveScoresRewardReq::default_instance_->InitAsDefaultInstance();
  TArenaHighOrderReceiveScoresRewardRsp::default_instance_->InitAsDefaultInstance();
  TArenaHighOrderGetEnemyFormationByOtherServerReq::default_instance_->InitAsDefaultInstance();
  TArenaHighOrderGetEnemyFormationByOtherServerRsp::default_instance_->InitAsDefaultInstance();
  TArenaHighOrderSetAttackedRecordByOtherServerReq::default_instance_->InitAsDefaultInstance();
  TArenaHighOrderSetAttackedRecordByOtherServerRsp::default_instance_->InitAsDefaultInstance();
  TArenaHighOrderGetTotalFightForceByOtherServerReq::default_instance_->InitAsDefaultInstance();
  TArenaHighOrderGetTotalFightForceByOtherServerRsp::default_instance_->InitAsDefaultInstance();
  TArenaHighOrderQuickChallengServerReq::default_instance_->InitAsDefaultInstance();
  TArenaHighOrderQuickChallengSingle::default_instance_->InitAsDefaultInstance();
  TArenaHighOrderQuickChallengServerRsp::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_net_2fArenaHighOrder_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_net_2fArenaHighOrder_2eproto {
  StaticDescriptorInitializer_net_2fArenaHighOrder_2eproto() {
    protobuf_AddDesc_net_2fArenaHighOrder_2eproto();
  }
} static_descriptor_initializer_net_2fArenaHighOrder_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int TArenaHigOrderUserRankSingle::kUserSimpleFieldNumber;
const int TArenaHigOrderUserRankSingle::kUserScoresFieldNumber;
const int TArenaHigOrderUserRankSingle::kServerIdFieldNumber;
#endif  // !_MSC_VER

TArenaHigOrderUserRankSingle::TArenaHigOrderUserRankSingle()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TArenaHigOrderUserRankSingle)
}

void TArenaHigOrderUserRankSingle::InitAsDefaultInstance() {
  usersimple_ = const_cast< ::pb::TUserSimpleInfo*>(&::pb::TUserSimpleInfo::default_instance());
}

TArenaHigOrderUserRankSingle::TArenaHigOrderUserRankSingle(const TArenaHigOrderUserRankSingle& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TArenaHigOrderUserRankSingle)
}

void TArenaHigOrderUserRankSingle::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  usersimple_ = NULL;
  userscores_ = 0u;
  serverid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TArenaHigOrderUserRankSingle::~TArenaHigOrderUserRankSingle() {
  // @@protoc_insertion_point(destructor:pb.TArenaHigOrderUserRankSingle)
  SharedDtor();
}

void TArenaHigOrderUserRankSingle::SharedDtor() {
  if (serverid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete serverid_;
  }
  if (this != default_instance_) {
    delete usersimple_;
  }
}

void TArenaHigOrderUserRankSingle::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TArenaHigOrderUserRankSingle::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TArenaHigOrderUserRankSingle_descriptor_;
}

const TArenaHigOrderUserRankSingle& TArenaHigOrderUserRankSingle::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fArenaHighOrder_2eproto();
  return *default_instance_;
}

TArenaHigOrderUserRankSingle* TArenaHigOrderUserRankSingle::default_instance_ = NULL;

TArenaHigOrderUserRankSingle* TArenaHigOrderUserRankSingle::New() const {
  return new TArenaHigOrderUserRankSingle;
}

void TArenaHigOrderUserRankSingle::Clear() {
  if (_has_bits_[0 / 32] & 7) {
    if (has_usersimple()) {
      if (usersimple_ != NULL) usersimple_->::pb::TUserSimpleInfo::Clear();
    }
    userscores_ = 0u;
    if (has_serverid()) {
      if (serverid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        serverid_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TArenaHigOrderUserRankSingle::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TArenaHigOrderUserRankSingle)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .pb.TUserSimpleInfo UserSimple = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_usersimple()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_UserScores;
        break;
      }

      // optional uint32 UserScores = 2;
      case 2: {
        if (tag == 16) {
         parse_UserScores:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &userscores_)));
          set_has_userscores();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_ServerId;
        break;
      }

      // optional string ServerId = 3;
      case 3: {
        if (tag == 26) {
         parse_ServerId:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_serverid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->serverid().data(), this->serverid().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "serverid");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TArenaHigOrderUserRankSingle)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TArenaHigOrderUserRankSingle)
  return false;
#undef DO_
}

void TArenaHigOrderUserRankSingle::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TArenaHigOrderUserRankSingle)
  // optional .pb.TUserSimpleInfo UserSimple = 1;
  if (has_usersimple()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->usersimple(), output);
  }

  // optional uint32 UserScores = 2;
  if (has_userscores()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->userscores(), output);
  }

  // optional string ServerId = 3;
  if (has_serverid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->serverid().data(), this->serverid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "serverid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->serverid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TArenaHigOrderUserRankSingle)
}

::google::protobuf::uint8* TArenaHigOrderUserRankSingle::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TArenaHigOrderUserRankSingle)
  // optional .pb.TUserSimpleInfo UserSimple = 1;
  if (has_usersimple()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->usersimple(), target);
  }

  // optional uint32 UserScores = 2;
  if (has_userscores()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->userscores(), target);
  }

  // optional string ServerId = 3;
  if (has_serverid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->serverid().data(), this->serverid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "serverid");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->serverid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TArenaHigOrderUserRankSingle)
  return target;
}

int TArenaHigOrderUserRankSingle::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .pb.TUserSimpleInfo UserSimple = 1;
    if (has_usersimple()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->usersimple());
    }

    // optional uint32 UserScores = 2;
    if (has_userscores()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->userscores());
    }

    // optional string ServerId = 3;
    if (has_serverid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->serverid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TArenaHigOrderUserRankSingle::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TArenaHigOrderUserRankSingle* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TArenaHigOrderUserRankSingle*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TArenaHigOrderUserRankSingle::MergeFrom(const TArenaHigOrderUserRankSingle& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_usersimple()) {
      mutable_usersimple()->::pb::TUserSimpleInfo::MergeFrom(from.usersimple());
    }
    if (from.has_userscores()) {
      set_userscores(from.userscores());
    }
    if (from.has_serverid()) {
      set_serverid(from.serverid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TArenaHigOrderUserRankSingle::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TArenaHigOrderUserRankSingle::CopyFrom(const TArenaHigOrderUserRankSingle& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TArenaHigOrderUserRankSingle::IsInitialized() const {

  return true;
}

void TArenaHigOrderUserRankSingle::Swap(TArenaHigOrderUserRankSingle* other) {
  if (other != this) {
    std::swap(usersimple_, other->usersimple_);
    std::swap(userscores_, other->userscores_);
    std::swap(serverid_, other->serverid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TArenaHigOrderUserRankSingle::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TArenaHigOrderUserRankSingle_descriptor_;
  metadata.reflection = TArenaHigOrderUserRankSingle_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TArenaHigOrderUserRankType::kRankIdFieldNumber;
const int TArenaHigOrderUserRankType::kUserNumFieldNumber;
const int TArenaHigOrderUserRankType::kUserArrFieldNumber;
#endif  // !_MSC_VER

TArenaHigOrderUserRankType::TArenaHigOrderUserRankType()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TArenaHigOrderUserRankType)
}

void TArenaHigOrderUserRankType::InitAsDefaultInstance() {
}

TArenaHigOrderUserRankType::TArenaHigOrderUserRankType(const TArenaHigOrderUserRankType& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TArenaHigOrderUserRankType)
}

void TArenaHigOrderUserRankType::SharedCtor() {
  _cached_size_ = 0;
  rankid_ = 0u;
  usernum_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TArenaHigOrderUserRankType::~TArenaHigOrderUserRankType() {
  // @@protoc_insertion_point(destructor:pb.TArenaHigOrderUserRankType)
  SharedDtor();
}

void TArenaHigOrderUserRankType::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TArenaHigOrderUserRankType::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TArenaHigOrderUserRankType::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TArenaHigOrderUserRankType_descriptor_;
}

const TArenaHigOrderUserRankType& TArenaHigOrderUserRankType::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fArenaHighOrder_2eproto();
  return *default_instance_;
}

TArenaHigOrderUserRankType* TArenaHigOrderUserRankType::default_instance_ = NULL;

TArenaHigOrderUserRankType* TArenaHigOrderUserRankType::New() const {
  return new TArenaHigOrderUserRankType;
}

void TArenaHigOrderUserRankType::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<TArenaHigOrderUserRankType*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(rankid_, usernum_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  userarr_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TArenaHigOrderUserRankType::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TArenaHigOrderUserRankType)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 RankId = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &rankid_)));
          set_has_rankid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_UserNum;
        break;
      }

      // optional uint32 UserNum = 2;
      case 2: {
        if (tag == 16) {
         parse_UserNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &usernum_)));
          set_has_usernum();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_UserArr;
        break;
      }

      // repeated .pb.TArenaHigOrderUserRankSingle UserArr = 3;
      case 3: {
        if (tag == 26) {
         parse_UserArr:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_userarr()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_UserArr;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TArenaHigOrderUserRankType)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TArenaHigOrderUserRankType)
  return false;
#undef DO_
}

void TArenaHigOrderUserRankType::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TArenaHigOrderUserRankType)
  // optional uint32 RankId = 1;
  if (has_rankid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->rankid(), output);
  }

  // optional uint32 UserNum = 2;
  if (has_usernum()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->usernum(), output);
  }

  // repeated .pb.TArenaHigOrderUserRankSingle UserArr = 3;
  for (int i = 0; i < this->userarr_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->userarr(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TArenaHigOrderUserRankType)
}

::google::protobuf::uint8* TArenaHigOrderUserRankType::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TArenaHigOrderUserRankType)
  // optional uint32 RankId = 1;
  if (has_rankid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->rankid(), target);
  }

  // optional uint32 UserNum = 2;
  if (has_usernum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->usernum(), target);
  }

  // repeated .pb.TArenaHigOrderUserRankSingle UserArr = 3;
  for (int i = 0; i < this->userarr_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->userarr(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TArenaHigOrderUserRankType)
  return target;
}

int TArenaHigOrderUserRankType::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 RankId = 1;
    if (has_rankid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->rankid());
    }

    // optional uint32 UserNum = 2;
    if (has_usernum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->usernum());
    }

  }
  // repeated .pb.TArenaHigOrderUserRankSingle UserArr = 3;
  total_size += 1 * this->userarr_size();
  for (int i = 0; i < this->userarr_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->userarr(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TArenaHigOrderUserRankType::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TArenaHigOrderUserRankType* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TArenaHigOrderUserRankType*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TArenaHigOrderUserRankType::MergeFrom(const TArenaHigOrderUserRankType& from) {
  GOOGLE_CHECK_NE(&from, this);
  userarr_.MergeFrom(from.userarr_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_rankid()) {
      set_rankid(from.rankid());
    }
    if (from.has_usernum()) {
      set_usernum(from.usernum());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TArenaHigOrderUserRankType::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TArenaHigOrderUserRankType::CopyFrom(const TArenaHigOrderUserRankType& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TArenaHigOrderUserRankType::IsInitialized() const {

  return true;
}

void TArenaHigOrderUserRankType::Swap(TArenaHigOrderUserRankType* other) {
  if (other != this) {
    std::swap(rankid_, other->rankid_);
    std::swap(usernum_, other->usernum_);
    userarr_.Swap(&other->userarr_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TArenaHigOrderUserRankType::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TArenaHigOrderUserRankType_descriptor_;
  metadata.reflection = TArenaHigOrderUserRankType_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TArenaHigOrderUserAboveRankRsp::kMyRankFieldNumber;
const int TArenaHigOrderUserAboveRankRsp::kUserRankArrFieldNumber;
const int TArenaHigOrderUserAboveRankRsp::kTopRankUserArrFieldNumber;
const int TArenaHigOrderUserAboveRankRsp::kRealTopNFieldNumber;
#endif  // !_MSC_VER

TArenaHigOrderUserAboveRankRsp::TArenaHigOrderUserAboveRankRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TArenaHigOrderUserAboveRankRsp)
}

void TArenaHigOrderUserAboveRankRsp::InitAsDefaultInstance() {
}

TArenaHigOrderUserAboveRankRsp::TArenaHigOrderUserAboveRankRsp(const TArenaHigOrderUserAboveRankRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TArenaHigOrderUserAboveRankRsp)
}

void TArenaHigOrderUserAboveRankRsp::SharedCtor() {
  _cached_size_ = 0;
  myrank_ = 0;
  realtopn_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TArenaHigOrderUserAboveRankRsp::~TArenaHigOrderUserAboveRankRsp() {
  // @@protoc_insertion_point(destructor:pb.TArenaHigOrderUserAboveRankRsp)
  SharedDtor();
}

void TArenaHigOrderUserAboveRankRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TArenaHigOrderUserAboveRankRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TArenaHigOrderUserAboveRankRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TArenaHigOrderUserAboveRankRsp_descriptor_;
}

const TArenaHigOrderUserAboveRankRsp& TArenaHigOrderUserAboveRankRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fArenaHighOrder_2eproto();
  return *default_instance_;
}

TArenaHigOrderUserAboveRankRsp* TArenaHigOrderUserAboveRankRsp::default_instance_ = NULL;

TArenaHigOrderUserAboveRankRsp* TArenaHigOrderUserAboveRankRsp::New() const {
  return new TArenaHigOrderUserAboveRankRsp;
}

void TArenaHigOrderUserAboveRankRsp::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<TArenaHigOrderUserAboveRankRsp*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(myrank_, realtopn_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  userrankarr_.Clear();
  toprankuserarr_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TArenaHigOrderUserAboveRankRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TArenaHigOrderUserAboveRankRsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 MyRank = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &myrank_)));
          set_has_myrank();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_UserRankArr;
        break;
      }

      // repeated .pb.TArenaHigOrderUserRankType UserRankArr = 2;
      case 2: {
        if (tag == 18) {
         parse_UserRankArr:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_userrankarr()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_UserRankArr;
        if (input->ExpectTag(26)) goto parse_TopRankUserArr;
        break;
      }

      // repeated .pb.TArenaHigOrderUserRankSingle TopRankUserArr = 3;
      case 3: {
        if (tag == 26) {
         parse_TopRankUserArr:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_toprankuserarr()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_TopRankUserArr;
        if (input->ExpectTag(32)) goto parse_RealTopN;
        break;
      }

      // optional uint32 RealTopN = 4;
      case 4: {
        if (tag == 32) {
         parse_RealTopN:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &realtopn_)));
          set_has_realtopn();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TArenaHigOrderUserAboveRankRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TArenaHigOrderUserAboveRankRsp)
  return false;
#undef DO_
}

void TArenaHigOrderUserAboveRankRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TArenaHigOrderUserAboveRankRsp)
  // optional int32 MyRank = 1;
  if (has_myrank()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->myrank(), output);
  }

  // repeated .pb.TArenaHigOrderUserRankType UserRankArr = 2;
  for (int i = 0; i < this->userrankarr_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->userrankarr(i), output);
  }

  // repeated .pb.TArenaHigOrderUserRankSingle TopRankUserArr = 3;
  for (int i = 0; i < this->toprankuserarr_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->toprankuserarr(i), output);
  }

  // optional uint32 RealTopN = 4;
  if (has_realtopn()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->realtopn(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TArenaHigOrderUserAboveRankRsp)
}

::google::protobuf::uint8* TArenaHigOrderUserAboveRankRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TArenaHigOrderUserAboveRankRsp)
  // optional int32 MyRank = 1;
  if (has_myrank()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->myrank(), target);
  }

  // repeated .pb.TArenaHigOrderUserRankType UserRankArr = 2;
  for (int i = 0; i < this->userrankarr_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->userrankarr(i), target);
  }

  // repeated .pb.TArenaHigOrderUserRankSingle TopRankUserArr = 3;
  for (int i = 0; i < this->toprankuserarr_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->toprankuserarr(i), target);
  }

  // optional uint32 RealTopN = 4;
  if (has_realtopn()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->realtopn(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TArenaHigOrderUserAboveRankRsp)
  return target;
}

int TArenaHigOrderUserAboveRankRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 MyRank = 1;
    if (has_myrank()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->myrank());
    }

    // optional uint32 RealTopN = 4;
    if (has_realtopn()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->realtopn());
    }

  }
  // repeated .pb.TArenaHigOrderUserRankType UserRankArr = 2;
  total_size += 1 * this->userrankarr_size();
  for (int i = 0; i < this->userrankarr_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->userrankarr(i));
  }

  // repeated .pb.TArenaHigOrderUserRankSingle TopRankUserArr = 3;
  total_size += 1 * this->toprankuserarr_size();
  for (int i = 0; i < this->toprankuserarr_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->toprankuserarr(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TArenaHigOrderUserAboveRankRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TArenaHigOrderUserAboveRankRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TArenaHigOrderUserAboveRankRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TArenaHigOrderUserAboveRankRsp::MergeFrom(const TArenaHigOrderUserAboveRankRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  userrankarr_.MergeFrom(from.userrankarr_);
  toprankuserarr_.MergeFrom(from.toprankuserarr_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_myrank()) {
      set_myrank(from.myrank());
    }
    if (from.has_realtopn()) {
      set_realtopn(from.realtopn());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TArenaHigOrderUserAboveRankRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TArenaHigOrderUserAboveRankRsp::CopyFrom(const TArenaHigOrderUserAboveRankRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TArenaHigOrderUserAboveRankRsp::IsInitialized() const {

  return true;
}

void TArenaHigOrderUserAboveRankRsp::Swap(TArenaHigOrderUserAboveRankRsp* other) {
  if (other != this) {
    std::swap(myrank_, other->myrank_);
    userrankarr_.Swap(&other->userrankarr_);
    toprankuserarr_.Swap(&other->toprankuserarr_);
    std::swap(realtopn_, other->realtopn_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TArenaHigOrderUserAboveRankRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TArenaHigOrderUserAboveRankRsp_descriptor_;
  metadata.reflection = TArenaHigOrderUserAboveRankRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TArenaHigOrderTopRankUserReq::kOffsetFieldNumber;
const int TArenaHigOrderTopRankUserReq::kLimitFieldNumber;
#endif  // !_MSC_VER

TArenaHigOrderTopRankUserReq::TArenaHigOrderTopRankUserReq()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TArenaHigOrderTopRankUserReq)
}

void TArenaHigOrderTopRankUserReq::InitAsDefaultInstance() {
}

TArenaHigOrderTopRankUserReq::TArenaHigOrderTopRankUserReq(const TArenaHigOrderTopRankUserReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TArenaHigOrderTopRankUserReq)
}

void TArenaHigOrderTopRankUserReq::SharedCtor() {
  _cached_size_ = 0;
  offset_ = 0;
  limit_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TArenaHigOrderTopRankUserReq::~TArenaHigOrderTopRankUserReq() {
  // @@protoc_insertion_point(destructor:pb.TArenaHigOrderTopRankUserReq)
  SharedDtor();
}

void TArenaHigOrderTopRankUserReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TArenaHigOrderTopRankUserReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TArenaHigOrderTopRankUserReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TArenaHigOrderTopRankUserReq_descriptor_;
}

const TArenaHigOrderTopRankUserReq& TArenaHigOrderTopRankUserReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fArenaHighOrder_2eproto();
  return *default_instance_;
}

TArenaHigOrderTopRankUserReq* TArenaHigOrderTopRankUserReq::default_instance_ = NULL;

TArenaHigOrderTopRankUserReq* TArenaHigOrderTopRankUserReq::New() const {
  return new TArenaHigOrderTopRankUserReq;
}

void TArenaHigOrderTopRankUserReq::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<TArenaHigOrderTopRankUserReq*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(offset_, limit_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TArenaHigOrderTopRankUserReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TArenaHigOrderTopRankUserReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 Offset = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &offset_)));
          set_has_offset();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_Limit;
        break;
      }

      // optional int32 Limit = 2;
      case 2: {
        if (tag == 16) {
         parse_Limit:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &limit_)));
          set_has_limit();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TArenaHigOrderTopRankUserReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TArenaHigOrderTopRankUserReq)
  return false;
#undef DO_
}

void TArenaHigOrderTopRankUserReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TArenaHigOrderTopRankUserReq)
  // optional int32 Offset = 1;
  if (has_offset()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->offset(), output);
  }

  // optional int32 Limit = 2;
  if (has_limit()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->limit(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TArenaHigOrderTopRankUserReq)
}

::google::protobuf::uint8* TArenaHigOrderTopRankUserReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TArenaHigOrderTopRankUserReq)
  // optional int32 Offset = 1;
  if (has_offset()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->offset(), target);
  }

  // optional int32 Limit = 2;
  if (has_limit()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->limit(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TArenaHigOrderTopRankUserReq)
  return target;
}

int TArenaHigOrderTopRankUserReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 Offset = 1;
    if (has_offset()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->offset());
    }

    // optional int32 Limit = 2;
    if (has_limit()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->limit());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TArenaHigOrderTopRankUserReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TArenaHigOrderTopRankUserReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TArenaHigOrderTopRankUserReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TArenaHigOrderTopRankUserReq::MergeFrom(const TArenaHigOrderTopRankUserReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_offset()) {
      set_offset(from.offset());
    }
    if (from.has_limit()) {
      set_limit(from.limit());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TArenaHigOrderTopRankUserReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TArenaHigOrderTopRankUserReq::CopyFrom(const TArenaHigOrderTopRankUserReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TArenaHigOrderTopRankUserReq::IsInitialized() const {

  return true;
}

void TArenaHigOrderTopRankUserReq::Swap(TArenaHigOrderTopRankUserReq* other) {
  if (other != this) {
    std::swap(offset_, other->offset_);
    std::swap(limit_, other->limit_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TArenaHigOrderTopRankUserReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TArenaHigOrderTopRankUserReq_descriptor_;
  metadata.reflection = TArenaHigOrderTopRankUserReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TArenaHigOrderTopRankUserRsp::kTopRankUserArrFieldNumber;
#endif  // !_MSC_VER

TArenaHigOrderTopRankUserRsp::TArenaHigOrderTopRankUserRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TArenaHigOrderTopRankUserRsp)
}

void TArenaHigOrderTopRankUserRsp::InitAsDefaultInstance() {
}

TArenaHigOrderTopRankUserRsp::TArenaHigOrderTopRankUserRsp(const TArenaHigOrderTopRankUserRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TArenaHigOrderTopRankUserRsp)
}

void TArenaHigOrderTopRankUserRsp::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TArenaHigOrderTopRankUserRsp::~TArenaHigOrderTopRankUserRsp() {
  // @@protoc_insertion_point(destructor:pb.TArenaHigOrderTopRankUserRsp)
  SharedDtor();
}

void TArenaHigOrderTopRankUserRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TArenaHigOrderTopRankUserRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TArenaHigOrderTopRankUserRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TArenaHigOrderTopRankUserRsp_descriptor_;
}

const TArenaHigOrderTopRankUserRsp& TArenaHigOrderTopRankUserRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fArenaHighOrder_2eproto();
  return *default_instance_;
}

TArenaHigOrderTopRankUserRsp* TArenaHigOrderTopRankUserRsp::default_instance_ = NULL;

TArenaHigOrderTopRankUserRsp* TArenaHigOrderTopRankUserRsp::New() const {
  return new TArenaHigOrderTopRankUserRsp;
}

void TArenaHigOrderTopRankUserRsp::Clear() {
  toprankuserarr_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TArenaHigOrderTopRankUserRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TArenaHigOrderTopRankUserRsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .pb.TArenaHigOrderUserRankSingle TopRankUserArr = 1;
      case 1: {
        if (tag == 10) {
         parse_TopRankUserArr:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_toprankuserarr()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_TopRankUserArr;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TArenaHigOrderTopRankUserRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TArenaHigOrderTopRankUserRsp)
  return false;
#undef DO_
}

void TArenaHigOrderTopRankUserRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TArenaHigOrderTopRankUserRsp)
  // repeated .pb.TArenaHigOrderUserRankSingle TopRankUserArr = 1;
  for (int i = 0; i < this->toprankuserarr_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->toprankuserarr(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TArenaHigOrderTopRankUserRsp)
}

::google::protobuf::uint8* TArenaHigOrderTopRankUserRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TArenaHigOrderTopRankUserRsp)
  // repeated .pb.TArenaHigOrderUserRankSingle TopRankUserArr = 1;
  for (int i = 0; i < this->toprankuserarr_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->toprankuserarr(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TArenaHigOrderTopRankUserRsp)
  return target;
}

int TArenaHigOrderTopRankUserRsp::ByteSize() const {
  int total_size = 0;

  // repeated .pb.TArenaHigOrderUserRankSingle TopRankUserArr = 1;
  total_size += 1 * this->toprankuserarr_size();
  for (int i = 0; i < this->toprankuserarr_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->toprankuserarr(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TArenaHigOrderTopRankUserRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TArenaHigOrderTopRankUserRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TArenaHigOrderTopRankUserRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TArenaHigOrderTopRankUserRsp::MergeFrom(const TArenaHigOrderTopRankUserRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  toprankuserarr_.MergeFrom(from.toprankuserarr_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TArenaHigOrderTopRankUserRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TArenaHigOrderTopRankUserRsp::CopyFrom(const TArenaHigOrderTopRankUserRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TArenaHigOrderTopRankUserRsp::IsInitialized() const {

  return true;
}

void TArenaHigOrderTopRankUserRsp::Swap(TArenaHigOrderTopRankUserRsp* other) {
  if (other != this) {
    toprankuserarr_.Swap(&other->toprankuserarr_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TArenaHigOrderTopRankUserRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TArenaHigOrderTopRankUserRsp_descriptor_;
  metadata.reflection = TArenaHigOrderTopRankUserRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TArenaHigOrderUserTypeRankReq::kTypeRankIdFieldNumber;
const int TArenaHigOrderUserTypeRankReq::kOffsetFieldNumber;
const int TArenaHigOrderUserTypeRankReq::kLimitFieldNumber;
#endif  // !_MSC_VER

TArenaHigOrderUserTypeRankReq::TArenaHigOrderUserTypeRankReq()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TArenaHigOrderUserTypeRankReq)
}

void TArenaHigOrderUserTypeRankReq::InitAsDefaultInstance() {
}

TArenaHigOrderUserTypeRankReq::TArenaHigOrderUserTypeRankReq(const TArenaHigOrderUserTypeRankReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TArenaHigOrderUserTypeRankReq)
}

void TArenaHigOrderUserTypeRankReq::SharedCtor() {
  _cached_size_ = 0;
  typerankid_ = 0;
  offset_ = 0;
  limit_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TArenaHigOrderUserTypeRankReq::~TArenaHigOrderUserTypeRankReq() {
  // @@protoc_insertion_point(destructor:pb.TArenaHigOrderUserTypeRankReq)
  SharedDtor();
}

void TArenaHigOrderUserTypeRankReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TArenaHigOrderUserTypeRankReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TArenaHigOrderUserTypeRankReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TArenaHigOrderUserTypeRankReq_descriptor_;
}

const TArenaHigOrderUserTypeRankReq& TArenaHigOrderUserTypeRankReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fArenaHighOrder_2eproto();
  return *default_instance_;
}

TArenaHigOrderUserTypeRankReq* TArenaHigOrderUserTypeRankReq::default_instance_ = NULL;

TArenaHigOrderUserTypeRankReq* TArenaHigOrderUserTypeRankReq::New() const {
  return new TArenaHigOrderUserTypeRankReq;
}

void TArenaHigOrderUserTypeRankReq::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<TArenaHigOrderUserTypeRankReq*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(typerankid_, limit_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TArenaHigOrderUserTypeRankReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TArenaHigOrderUserTypeRankReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 TypeRankId = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &typerankid_)));
          set_has_typerankid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_Offset;
        break;
      }

      // optional int32 Offset = 2;
      case 2: {
        if (tag == 16) {
         parse_Offset:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &offset_)));
          set_has_offset();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_Limit;
        break;
      }

      // optional int32 Limit = 3;
      case 3: {
        if (tag == 24) {
         parse_Limit:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &limit_)));
          set_has_limit();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TArenaHigOrderUserTypeRankReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TArenaHigOrderUserTypeRankReq)
  return false;
#undef DO_
}

void TArenaHigOrderUserTypeRankReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TArenaHigOrderUserTypeRankReq)
  // optional int32 TypeRankId = 1;
  if (has_typerankid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->typerankid(), output);
  }

  // optional int32 Offset = 2;
  if (has_offset()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->offset(), output);
  }

  // optional int32 Limit = 3;
  if (has_limit()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->limit(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TArenaHigOrderUserTypeRankReq)
}

::google::protobuf::uint8* TArenaHigOrderUserTypeRankReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TArenaHigOrderUserTypeRankReq)
  // optional int32 TypeRankId = 1;
  if (has_typerankid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->typerankid(), target);
  }

  // optional int32 Offset = 2;
  if (has_offset()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->offset(), target);
  }

  // optional int32 Limit = 3;
  if (has_limit()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->limit(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TArenaHigOrderUserTypeRankReq)
  return target;
}

int TArenaHigOrderUserTypeRankReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 TypeRankId = 1;
    if (has_typerankid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->typerankid());
    }

    // optional int32 Offset = 2;
    if (has_offset()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->offset());
    }

    // optional int32 Limit = 3;
    if (has_limit()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->limit());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TArenaHigOrderUserTypeRankReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TArenaHigOrderUserTypeRankReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TArenaHigOrderUserTypeRankReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TArenaHigOrderUserTypeRankReq::MergeFrom(const TArenaHigOrderUserTypeRankReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_typerankid()) {
      set_typerankid(from.typerankid());
    }
    if (from.has_offset()) {
      set_offset(from.offset());
    }
    if (from.has_limit()) {
      set_limit(from.limit());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TArenaHigOrderUserTypeRankReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TArenaHigOrderUserTypeRankReq::CopyFrom(const TArenaHigOrderUserTypeRankReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TArenaHigOrderUserTypeRankReq::IsInitialized() const {

  return true;
}

void TArenaHigOrderUserTypeRankReq::Swap(TArenaHigOrderUserTypeRankReq* other) {
  if (other != this) {
    std::swap(typerankid_, other->typerankid_);
    std::swap(offset_, other->offset_);
    std::swap(limit_, other->limit_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TArenaHigOrderUserTypeRankReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TArenaHigOrderUserTypeRankReq_descriptor_;
  metadata.reflection = TArenaHigOrderUserTypeRankReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TArenaHigOrderUserTypeRankRsp::kTypeRankArrFieldNumber;
#endif  // !_MSC_VER

TArenaHigOrderUserTypeRankRsp::TArenaHigOrderUserTypeRankRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TArenaHigOrderUserTypeRankRsp)
}

void TArenaHigOrderUserTypeRankRsp::InitAsDefaultInstance() {
}

TArenaHigOrderUserTypeRankRsp::TArenaHigOrderUserTypeRankRsp(const TArenaHigOrderUserTypeRankRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TArenaHigOrderUserTypeRankRsp)
}

void TArenaHigOrderUserTypeRankRsp::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TArenaHigOrderUserTypeRankRsp::~TArenaHigOrderUserTypeRankRsp() {
  // @@protoc_insertion_point(destructor:pb.TArenaHigOrderUserTypeRankRsp)
  SharedDtor();
}

void TArenaHigOrderUserTypeRankRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TArenaHigOrderUserTypeRankRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TArenaHigOrderUserTypeRankRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TArenaHigOrderUserTypeRankRsp_descriptor_;
}

const TArenaHigOrderUserTypeRankRsp& TArenaHigOrderUserTypeRankRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fArenaHighOrder_2eproto();
  return *default_instance_;
}

TArenaHigOrderUserTypeRankRsp* TArenaHigOrderUserTypeRankRsp::default_instance_ = NULL;

TArenaHigOrderUserTypeRankRsp* TArenaHigOrderUserTypeRankRsp::New() const {
  return new TArenaHigOrderUserTypeRankRsp;
}

void TArenaHigOrderUserTypeRankRsp::Clear() {
  typerankarr_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TArenaHigOrderUserTypeRankRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TArenaHigOrderUserTypeRankRsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .pb.TArenaHigOrderUserRankSingle TypeRankArr = 1;
      case 1: {
        if (tag == 10) {
         parse_TypeRankArr:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_typerankarr()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_TypeRankArr;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TArenaHigOrderUserTypeRankRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TArenaHigOrderUserTypeRankRsp)
  return false;
#undef DO_
}

void TArenaHigOrderUserTypeRankRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TArenaHigOrderUserTypeRankRsp)
  // repeated .pb.TArenaHigOrderUserRankSingle TypeRankArr = 1;
  for (int i = 0; i < this->typerankarr_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->typerankarr(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TArenaHigOrderUserTypeRankRsp)
}

::google::protobuf::uint8* TArenaHigOrderUserTypeRankRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TArenaHigOrderUserTypeRankRsp)
  // repeated .pb.TArenaHigOrderUserRankSingle TypeRankArr = 1;
  for (int i = 0; i < this->typerankarr_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->typerankarr(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TArenaHigOrderUserTypeRankRsp)
  return target;
}

int TArenaHigOrderUserTypeRankRsp::ByteSize() const {
  int total_size = 0;

  // repeated .pb.TArenaHigOrderUserRankSingle TypeRankArr = 1;
  total_size += 1 * this->typerankarr_size();
  for (int i = 0; i < this->typerankarr_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->typerankarr(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TArenaHigOrderUserTypeRankRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TArenaHigOrderUserTypeRankRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TArenaHigOrderUserTypeRankRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TArenaHigOrderUserTypeRankRsp::MergeFrom(const TArenaHigOrderUserTypeRankRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  typerankarr_.MergeFrom(from.typerankarr_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TArenaHigOrderUserTypeRankRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TArenaHigOrderUserTypeRankRsp::CopyFrom(const TArenaHigOrderUserTypeRankRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TArenaHigOrderUserTypeRankRsp::IsInitialized() const {

  return true;
}

void TArenaHigOrderUserTypeRankRsp::Swap(TArenaHigOrderUserTypeRankRsp* other) {
  if (other != this) {
    typerankarr_.Swap(&other->typerankarr_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TArenaHigOrderUserTypeRankRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TArenaHigOrderUserTypeRankRsp_descriptor_;
  metadata.reflection = TArenaHigOrderUserTypeRankRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TArenaHighOrderUser::kUidFieldNumber;
const int TArenaHighOrderUser::kUnameFieldNumber;
const int TArenaHighOrderUser::kScoresFieldNumber;
const int TArenaHighOrderUser::kFightForceFieldNumber;
const int TArenaHighOrderUser::kHtidFieldNumber;
const int TArenaHighOrderUser::kRankFieldNumber;
const int TArenaHighOrderUser::kServerIdFieldNumber;
const int TArenaHighOrderUser::kPlayerImageHtidFieldNumber;
const int TArenaHighOrderUser::kPlayerImageFrameTidFieldNumber;
const int TArenaHighOrderUser::kGuildNameFieldNumber;
#endif  // !_MSC_VER

TArenaHighOrderUser::TArenaHighOrderUser()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TArenaHighOrderUser)
}

void TArenaHighOrderUser::InitAsDefaultInstance() {
}

TArenaHighOrderUser::TArenaHighOrderUser(const TArenaHighOrderUser& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TArenaHighOrderUser)
}

void TArenaHighOrderUser::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  uid_ = GOOGLE_ULONGLONG(0);
  uname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  scores_ = 0u;
  fightforce_ = GOOGLE_ULONGLONG(0);
  htid_ = 0u;
  rank_ = 0;
  serverid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  playerimagehtid_ = 0u;
  playerimageframetid_ = 0u;
  guildname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TArenaHighOrderUser::~TArenaHighOrderUser() {
  // @@protoc_insertion_point(destructor:pb.TArenaHighOrderUser)
  SharedDtor();
}

void TArenaHighOrderUser::SharedDtor() {
  if (uname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete uname_;
  }
  if (serverid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete serverid_;
  }
  if (guildname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete guildname_;
  }
  if (this != default_instance_) {
  }
}

void TArenaHighOrderUser::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TArenaHighOrderUser::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TArenaHighOrderUser_descriptor_;
}

const TArenaHighOrderUser& TArenaHighOrderUser::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fArenaHighOrder_2eproto();
  return *default_instance_;
}

TArenaHighOrderUser* TArenaHighOrderUser::default_instance_ = NULL;

TArenaHighOrderUser* TArenaHighOrderUser::New() const {
  return new TArenaHighOrderUser;
}

void TArenaHighOrderUser::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<TArenaHighOrderUser*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(fightforce_, htid_);
    ZR_(rank_, playerimagehtid_);
    uid_ = GOOGLE_ULONGLONG(0);
    if (has_uname()) {
      if (uname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        uname_->clear();
      }
    }
    if (has_serverid()) {
      if (serverid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        serverid_->clear();
      }
    }
  }
  if (_has_bits_[8 / 32] & 768) {
    playerimageframetid_ = 0u;
    if (has_guildname()) {
      if (guildname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        guildname_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TArenaHighOrderUser::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TArenaHighOrderUser)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 Uid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &uid_)));
          set_has_uid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_Uname;
        break;
      }

      // optional string Uname = 2;
      case 2: {
        if (tag == 18) {
         parse_Uname:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_uname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->uname().data(), this->uname().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "uname");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_Scores;
        break;
      }

      // optional uint32 Scores = 3;
      case 3: {
        if (tag == 24) {
         parse_Scores:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &scores_)));
          set_has_scores();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_FightForce;
        break;
      }

      // optional uint64 FightForce = 4;
      case 4: {
        if (tag == 32) {
         parse_FightForce:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &fightforce_)));
          set_has_fightforce();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_Htid;
        break;
      }

      // optional uint32 Htid = 5;
      case 5: {
        if (tag == 40) {
         parse_Htid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &htid_)));
          set_has_htid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_Rank;
        break;
      }

      // optional int32 Rank = 6;
      case 6: {
        if (tag == 48) {
         parse_Rank:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &rank_)));
          set_has_rank();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_ServerId;
        break;
      }

      // optional string ServerId = 7;
      case 7: {
        if (tag == 58) {
         parse_ServerId:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_serverid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->serverid().data(), this->serverid().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "serverid");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_PlayerImageHtid;
        break;
      }

      // optional uint32 PlayerImageHtid = 8;
      case 8: {
        if (tag == 64) {
         parse_PlayerImageHtid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &playerimagehtid_)));
          set_has_playerimagehtid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_PlayerImageFrameTid;
        break;
      }

      // optional uint32 PlayerImageFrameTid = 9;
      case 9: {
        if (tag == 72) {
         parse_PlayerImageFrameTid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &playerimageframetid_)));
          set_has_playerimageframetid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(82)) goto parse_GuildName;
        break;
      }

      // optional string GuildName = 10;
      case 10: {
        if (tag == 82) {
         parse_GuildName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_guildname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->guildname().data(), this->guildname().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "guildname");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TArenaHighOrderUser)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TArenaHighOrderUser)
  return false;
#undef DO_
}

void TArenaHighOrderUser::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TArenaHighOrderUser)
  // optional uint64 Uid = 1;
  if (has_uid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->uid(), output);
  }

  // optional string Uname = 2;
  if (has_uname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->uname().data(), this->uname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "uname");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->uname(), output);
  }

  // optional uint32 Scores = 3;
  if (has_scores()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->scores(), output);
  }

  // optional uint64 FightForce = 4;
  if (has_fightforce()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->fightforce(), output);
  }

  // optional uint32 Htid = 5;
  if (has_htid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->htid(), output);
  }

  // optional int32 Rank = 6;
  if (has_rank()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->rank(), output);
  }

  // optional string ServerId = 7;
  if (has_serverid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->serverid().data(), this->serverid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "serverid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      7, this->serverid(), output);
  }

  // optional uint32 PlayerImageHtid = 8;
  if (has_playerimagehtid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->playerimagehtid(), output);
  }

  // optional uint32 PlayerImageFrameTid = 9;
  if (has_playerimageframetid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->playerimageframetid(), output);
  }

  // optional string GuildName = 10;
  if (has_guildname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->guildname().data(), this->guildname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "guildname");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      10, this->guildname(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TArenaHighOrderUser)
}

::google::protobuf::uint8* TArenaHighOrderUser::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TArenaHighOrderUser)
  // optional uint64 Uid = 1;
  if (has_uid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->uid(), target);
  }

  // optional string Uname = 2;
  if (has_uname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->uname().data(), this->uname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "uname");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->uname(), target);
  }

  // optional uint32 Scores = 3;
  if (has_scores()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->scores(), target);
  }

  // optional uint64 FightForce = 4;
  if (has_fightforce()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->fightforce(), target);
  }

  // optional uint32 Htid = 5;
  if (has_htid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->htid(), target);
  }

  // optional int32 Rank = 6;
  if (has_rank()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->rank(), target);
  }

  // optional string ServerId = 7;
  if (has_serverid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->serverid().data(), this->serverid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "serverid");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->serverid(), target);
  }

  // optional uint32 PlayerImageHtid = 8;
  if (has_playerimagehtid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->playerimagehtid(), target);
  }

  // optional uint32 PlayerImageFrameTid = 9;
  if (has_playerimageframetid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->playerimageframetid(), target);
  }

  // optional string GuildName = 10;
  if (has_guildname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->guildname().data(), this->guildname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "guildname");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        10, this->guildname(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TArenaHighOrderUser)
  return target;
}

int TArenaHighOrderUser::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 Uid = 1;
    if (has_uid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->uid());
    }

    // optional string Uname = 2;
    if (has_uname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->uname());
    }

    // optional uint32 Scores = 3;
    if (has_scores()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->scores());
    }

    // optional uint64 FightForce = 4;
    if (has_fightforce()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->fightforce());
    }

    // optional uint32 Htid = 5;
    if (has_htid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->htid());
    }

    // optional int32 Rank = 6;
    if (has_rank()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->rank());
    }

    // optional string ServerId = 7;
    if (has_serverid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->serverid());
    }

    // optional uint32 PlayerImageHtid = 8;
    if (has_playerimagehtid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->playerimagehtid());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional uint32 PlayerImageFrameTid = 9;
    if (has_playerimageframetid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->playerimageframetid());
    }

    // optional string GuildName = 10;
    if (has_guildname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->guildname());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TArenaHighOrderUser::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TArenaHighOrderUser* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TArenaHighOrderUser*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TArenaHighOrderUser::MergeFrom(const TArenaHighOrderUser& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_uid()) {
      set_uid(from.uid());
    }
    if (from.has_uname()) {
      set_uname(from.uname());
    }
    if (from.has_scores()) {
      set_scores(from.scores());
    }
    if (from.has_fightforce()) {
      set_fightforce(from.fightforce());
    }
    if (from.has_htid()) {
      set_htid(from.htid());
    }
    if (from.has_rank()) {
      set_rank(from.rank());
    }
    if (from.has_serverid()) {
      set_serverid(from.serverid());
    }
    if (from.has_playerimagehtid()) {
      set_playerimagehtid(from.playerimagehtid());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_playerimageframetid()) {
      set_playerimageframetid(from.playerimageframetid());
    }
    if (from.has_guildname()) {
      set_guildname(from.guildname());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TArenaHighOrderUser::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TArenaHighOrderUser::CopyFrom(const TArenaHighOrderUser& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TArenaHighOrderUser::IsInitialized() const {

  return true;
}

void TArenaHighOrderUser::Swap(TArenaHighOrderUser* other) {
  if (other != this) {
    std::swap(uid_, other->uid_);
    std::swap(uname_, other->uname_);
    std::swap(scores_, other->scores_);
    std::swap(fightforce_, other->fightforce_);
    std::swap(htid_, other->htid_);
    std::swap(rank_, other->rank_);
    std::swap(serverid_, other->serverid_);
    std::swap(playerimagehtid_, other->playerimagehtid_);
    std::swap(playerimageframetid_, other->playerimageframetid_);
    std::swap(guildname_, other->guildname_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TArenaHighOrderUser::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TArenaHighOrderUser_descriptor_;
  metadata.reflection = TArenaHighOrderUser_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TArenaHighOrderUserRsp::kEnemyArrFieldNumber;
const int TArenaHighOrderUserRsp::kRefreshTimeFieldNumber;
const int TArenaHighOrderUserRsp::kExtraAtkNumFieldNumber;
const int TArenaHighOrderUserRsp::kBuyNumFieldNumber;
const int TArenaHighOrderUserRsp::kMyScoresFieldNumber;
const int TArenaHighOrderUserRsp::kMyFightForceFieldNumber;
const int TArenaHighOrderUserRsp::kHasNewReportFieldNumber;
const int TArenaHighOrderUserRsp::kResetTimeFieldNumber;
const int TArenaHighOrderUserRsp::kMaxScoresFieldNumber;
const int TArenaHighOrderUserRsp::kEndTimeFieldNumber;
const int TArenaHighOrderUserRsp::kReceiveTidArrFieldNumber;
const int TArenaHighOrderUserRsp::kMyRankFieldNumber;
const int TArenaHighOrderUserRsp::kServerIdFieldNumber;
const int TArenaHighOrderUserRsp::kHasAtkFieldNumber;
const int TArenaHighOrderUserRsp::kBeginTimeFieldNumber;
#endif  // !_MSC_VER

TArenaHighOrderUserRsp::TArenaHighOrderUserRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TArenaHighOrderUserRsp)
}

void TArenaHighOrderUserRsp::InitAsDefaultInstance() {
}

TArenaHighOrderUserRsp::TArenaHighOrderUserRsp(const TArenaHighOrderUserRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TArenaHighOrderUserRsp)
}

void TArenaHighOrderUserRsp::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  refreshtime_ = GOOGLE_ULONGLONG(0);
  extraatknum_ = 0u;
  buynum_ = 0u;
  myscores_ = 0u;
  myfightforce_ = GOOGLE_ULONGLONG(0);
  hasnewreport_ = false;
  resettime_ = GOOGLE_ULONGLONG(0);
  maxscores_ = 0u;
  endtime_ = GOOGLE_ULONGLONG(0);
  myrank_ = 0;
  serverid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  hasatk_ = false;
  begintime_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TArenaHighOrderUserRsp::~TArenaHighOrderUserRsp() {
  // @@protoc_insertion_point(destructor:pb.TArenaHighOrderUserRsp)
  SharedDtor();
}

void TArenaHighOrderUserRsp::SharedDtor() {
  if (serverid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete serverid_;
  }
  if (this != default_instance_) {
  }
}

void TArenaHighOrderUserRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TArenaHighOrderUserRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TArenaHighOrderUserRsp_descriptor_;
}

const TArenaHighOrderUserRsp& TArenaHighOrderUserRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fArenaHighOrder_2eproto();
  return *default_instance_;
}

TArenaHighOrderUserRsp* TArenaHighOrderUserRsp::default_instance_ = NULL;

TArenaHighOrderUserRsp* TArenaHighOrderUserRsp::New() const {
  return new TArenaHighOrderUserRsp;
}

void TArenaHighOrderUserRsp::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<TArenaHighOrderUserRsp*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 254) {
    ZR_(refreshtime_, myscores_);
    hasnewreport_ = false;
    resettime_ = GOOGLE_ULONGLONG(0);
  }
  if (_has_bits_[8 / 32] & 31488) {
    ZR_(hasatk_, myrank_);
    maxscores_ = 0u;
    endtime_ = GOOGLE_ULONGLONG(0);
    if (has_serverid()) {
      if (serverid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        serverid_->clear();
      }
    }
    begintime_ = GOOGLE_ULONGLONG(0);
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  enemyarr_.Clear();
  receivetidarr_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TArenaHighOrderUserRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TArenaHighOrderUserRsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .pb.TArenaHighOrderUser EnemyArr = 1;
      case 1: {
        if (tag == 10) {
         parse_EnemyArr:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_enemyarr()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_EnemyArr;
        if (input->ExpectTag(16)) goto parse_RefreshTime;
        break;
      }

      // optional uint64 RefreshTime = 2;
      case 2: {
        if (tag == 16) {
         parse_RefreshTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &refreshtime_)));
          set_has_refreshtime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_ExtraAtkNum;
        break;
      }

      // optional uint32 ExtraAtkNum = 3;
      case 3: {
        if (tag == 24) {
         parse_ExtraAtkNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &extraatknum_)));
          set_has_extraatknum();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_BuyNum;
        break;
      }

      // optional uint32 BuyNum = 4;
      case 4: {
        if (tag == 32) {
         parse_BuyNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &buynum_)));
          set_has_buynum();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_MyScores;
        break;
      }

      // optional uint32 MyScores = 5;
      case 5: {
        if (tag == 40) {
         parse_MyScores:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &myscores_)));
          set_has_myscores();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_MyFightForce;
        break;
      }

      // optional uint64 MyFightForce = 6;
      case 6: {
        if (tag == 48) {
         parse_MyFightForce:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &myfightforce_)));
          set_has_myfightforce();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_HasNewReport;
        break;
      }

      // optional bool HasNewReport = 7;
      case 7: {
        if (tag == 56) {
         parse_HasNewReport:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &hasnewreport_)));
          set_has_hasnewreport();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_ResetTime;
        break;
      }

      // optional uint64 ResetTime = 8;
      case 8: {
        if (tag == 64) {
         parse_ResetTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &resettime_)));
          set_has_resettime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_MaxScores;
        break;
      }

      // optional uint32 MaxScores = 9;
      case 9: {
        if (tag == 72) {
         parse_MaxScores:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &maxscores_)));
          set_has_maxscores();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(80)) goto parse_EndTime;
        break;
      }

      // optional uint64 EndTime = 10;
      case 10: {
        if (tag == 80) {
         parse_EndTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &endtime_)));
          set_has_endtime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(88)) goto parse_ReceiveTidArr;
        break;
      }

      // repeated uint32 ReceiveTidArr = 11;
      case 11: {
        if (tag == 88) {
         parse_ReceiveTidArr:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 88, input, this->mutable_receivetidarr())));
        } else if (tag == 90) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_receivetidarr())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(88)) goto parse_ReceiveTidArr;
        if (input->ExpectTag(96)) goto parse_MyRank;
        break;
      }

      // optional int32 MyRank = 12;
      case 12: {
        if (tag == 96) {
         parse_MyRank:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &myrank_)));
          set_has_myrank();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(106)) goto parse_ServerId;
        break;
      }

      // optional string ServerId = 13;
      case 13: {
        if (tag == 106) {
         parse_ServerId:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_serverid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->serverid().data(), this->serverid().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "serverid");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(112)) goto parse_HasAtk;
        break;
      }

      // optional bool HasAtk = 14;
      case 14: {
        if (tag == 112) {
         parse_HasAtk:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &hasatk_)));
          set_has_hasatk();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(120)) goto parse_BeginTime;
        break;
      }

      // optional uint64 BeginTime = 15;
      case 15: {
        if (tag == 120) {
         parse_BeginTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &begintime_)));
          set_has_begintime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TArenaHighOrderUserRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TArenaHighOrderUserRsp)
  return false;
#undef DO_
}

void TArenaHighOrderUserRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TArenaHighOrderUserRsp)
  // repeated .pb.TArenaHighOrderUser EnemyArr = 1;
  for (int i = 0; i < this->enemyarr_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->enemyarr(i), output);
  }

  // optional uint64 RefreshTime = 2;
  if (has_refreshtime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->refreshtime(), output);
  }

  // optional uint32 ExtraAtkNum = 3;
  if (has_extraatknum()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->extraatknum(), output);
  }

  // optional uint32 BuyNum = 4;
  if (has_buynum()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->buynum(), output);
  }

  // optional uint32 MyScores = 5;
  if (has_myscores()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->myscores(), output);
  }

  // optional uint64 MyFightForce = 6;
  if (has_myfightforce()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(6, this->myfightforce(), output);
  }

  // optional bool HasNewReport = 7;
  if (has_hasnewreport()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(7, this->hasnewreport(), output);
  }

  // optional uint64 ResetTime = 8;
  if (has_resettime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(8, this->resettime(), output);
  }

  // optional uint32 MaxScores = 9;
  if (has_maxscores()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->maxscores(), output);
  }

  // optional uint64 EndTime = 10;
  if (has_endtime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(10, this->endtime(), output);
  }

  // repeated uint32 ReceiveTidArr = 11;
  for (int i = 0; i < this->receivetidarr_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      11, this->receivetidarr(i), output);
  }

  // optional int32 MyRank = 12;
  if (has_myrank()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(12, this->myrank(), output);
  }

  // optional string ServerId = 13;
  if (has_serverid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->serverid().data(), this->serverid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "serverid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      13, this->serverid(), output);
  }

  // optional bool HasAtk = 14;
  if (has_hasatk()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(14, this->hasatk(), output);
  }

  // optional uint64 BeginTime = 15;
  if (has_begintime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(15, this->begintime(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TArenaHighOrderUserRsp)
}

::google::protobuf::uint8* TArenaHighOrderUserRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TArenaHighOrderUserRsp)
  // repeated .pb.TArenaHighOrderUser EnemyArr = 1;
  for (int i = 0; i < this->enemyarr_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->enemyarr(i), target);
  }

  // optional uint64 RefreshTime = 2;
  if (has_refreshtime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->refreshtime(), target);
  }

  // optional uint32 ExtraAtkNum = 3;
  if (has_extraatknum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->extraatknum(), target);
  }

  // optional uint32 BuyNum = 4;
  if (has_buynum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->buynum(), target);
  }

  // optional uint32 MyScores = 5;
  if (has_myscores()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->myscores(), target);
  }

  // optional uint64 MyFightForce = 6;
  if (has_myfightforce()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(6, this->myfightforce(), target);
  }

  // optional bool HasNewReport = 7;
  if (has_hasnewreport()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(7, this->hasnewreport(), target);
  }

  // optional uint64 ResetTime = 8;
  if (has_resettime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(8, this->resettime(), target);
  }

  // optional uint32 MaxScores = 9;
  if (has_maxscores()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->maxscores(), target);
  }

  // optional uint64 EndTime = 10;
  if (has_endtime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(10, this->endtime(), target);
  }

  // repeated uint32 ReceiveTidArr = 11;
  for (int i = 0; i < this->receivetidarr_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(11, this->receivetidarr(i), target);
  }

  // optional int32 MyRank = 12;
  if (has_myrank()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(12, this->myrank(), target);
  }

  // optional string ServerId = 13;
  if (has_serverid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->serverid().data(), this->serverid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "serverid");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        13, this->serverid(), target);
  }

  // optional bool HasAtk = 14;
  if (has_hasatk()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(14, this->hasatk(), target);
  }

  // optional uint64 BeginTime = 15;
  if (has_begintime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(15, this->begintime(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TArenaHighOrderUserRsp)
  return target;
}

int TArenaHighOrderUserRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // optional uint64 RefreshTime = 2;
    if (has_refreshtime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->refreshtime());
    }

    // optional uint32 ExtraAtkNum = 3;
    if (has_extraatknum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->extraatknum());
    }

    // optional uint32 BuyNum = 4;
    if (has_buynum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->buynum());
    }

    // optional uint32 MyScores = 5;
    if (has_myscores()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->myscores());
    }

    // optional uint64 MyFightForce = 6;
    if (has_myfightforce()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->myfightforce());
    }

    // optional bool HasNewReport = 7;
    if (has_hasnewreport()) {
      total_size += 1 + 1;
    }

    // optional uint64 ResetTime = 8;
    if (has_resettime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->resettime());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional uint32 MaxScores = 9;
    if (has_maxscores()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->maxscores());
    }

    // optional uint64 EndTime = 10;
    if (has_endtime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->endtime());
    }

    // optional int32 MyRank = 12;
    if (has_myrank()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->myrank());
    }

    // optional string ServerId = 13;
    if (has_serverid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->serverid());
    }

    // optional bool HasAtk = 14;
    if (has_hasatk()) {
      total_size += 1 + 1;
    }

    // optional uint64 BeginTime = 15;
    if (has_begintime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->begintime());
    }

  }
  // repeated .pb.TArenaHighOrderUser EnemyArr = 1;
  total_size += 1 * this->enemyarr_size();
  for (int i = 0; i < this->enemyarr_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->enemyarr(i));
  }

  // repeated uint32 ReceiveTidArr = 11;
  {
    int data_size = 0;
    for (int i = 0; i < this->receivetidarr_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->receivetidarr(i));
    }
    total_size += 1 * this->receivetidarr_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TArenaHighOrderUserRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TArenaHighOrderUserRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TArenaHighOrderUserRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TArenaHighOrderUserRsp::MergeFrom(const TArenaHighOrderUserRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  enemyarr_.MergeFrom(from.enemyarr_);
  receivetidarr_.MergeFrom(from.receivetidarr_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_refreshtime()) {
      set_refreshtime(from.refreshtime());
    }
    if (from.has_extraatknum()) {
      set_extraatknum(from.extraatknum());
    }
    if (from.has_buynum()) {
      set_buynum(from.buynum());
    }
    if (from.has_myscores()) {
      set_myscores(from.myscores());
    }
    if (from.has_myfightforce()) {
      set_myfightforce(from.myfightforce());
    }
    if (from.has_hasnewreport()) {
      set_hasnewreport(from.hasnewreport());
    }
    if (from.has_resettime()) {
      set_resettime(from.resettime());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_maxscores()) {
      set_maxscores(from.maxscores());
    }
    if (from.has_endtime()) {
      set_endtime(from.endtime());
    }
    if (from.has_myrank()) {
      set_myrank(from.myrank());
    }
    if (from.has_serverid()) {
      set_serverid(from.serverid());
    }
    if (from.has_hasatk()) {
      set_hasatk(from.hasatk());
    }
    if (from.has_begintime()) {
      set_begintime(from.begintime());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TArenaHighOrderUserRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TArenaHighOrderUserRsp::CopyFrom(const TArenaHighOrderUserRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TArenaHighOrderUserRsp::IsInitialized() const {

  return true;
}

void TArenaHighOrderUserRsp::Swap(TArenaHighOrderUserRsp* other) {
  if (other != this) {
    enemyarr_.Swap(&other->enemyarr_);
    std::swap(refreshtime_, other->refreshtime_);
    std::swap(extraatknum_, other->extraatknum_);
    std::swap(buynum_, other->buynum_);
    std::swap(myscores_, other->myscores_);
    std::swap(myfightforce_, other->myfightforce_);
    std::swap(hasnewreport_, other->hasnewreport_);
    std::swap(resettime_, other->resettime_);
    std::swap(maxscores_, other->maxscores_);
    std::swap(endtime_, other->endtime_);
    receivetidarr_.Swap(&other->receivetidarr_);
    std::swap(myrank_, other->myrank_);
    std::swap(serverid_, other->serverid_);
    std::swap(hasatk_, other->hasatk_);
    std::swap(begintime_, other->begintime_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TArenaHighOrderUserRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TArenaHighOrderUserRsp_descriptor_;
  metadata.reflection = TArenaHighOrderUserRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TArenaHighOrderRefreshEnemyListRsp::kEnemyArrFieldNumber;
const int TArenaHighOrderRefreshEnemyListRsp::kRefreshTimeFieldNumber;
#endif  // !_MSC_VER

TArenaHighOrderRefreshEnemyListRsp::TArenaHighOrderRefreshEnemyListRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TArenaHighOrderRefreshEnemyListRsp)
}

void TArenaHighOrderRefreshEnemyListRsp::InitAsDefaultInstance() {
}

TArenaHighOrderRefreshEnemyListRsp::TArenaHighOrderRefreshEnemyListRsp(const TArenaHighOrderRefreshEnemyListRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TArenaHighOrderRefreshEnemyListRsp)
}

void TArenaHighOrderRefreshEnemyListRsp::SharedCtor() {
  _cached_size_ = 0;
  refreshtime_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TArenaHighOrderRefreshEnemyListRsp::~TArenaHighOrderRefreshEnemyListRsp() {
  // @@protoc_insertion_point(destructor:pb.TArenaHighOrderRefreshEnemyListRsp)
  SharedDtor();
}

void TArenaHighOrderRefreshEnemyListRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TArenaHighOrderRefreshEnemyListRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TArenaHighOrderRefreshEnemyListRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TArenaHighOrderRefreshEnemyListRsp_descriptor_;
}

const TArenaHighOrderRefreshEnemyListRsp& TArenaHighOrderRefreshEnemyListRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fArenaHighOrder_2eproto();
  return *default_instance_;
}

TArenaHighOrderRefreshEnemyListRsp* TArenaHighOrderRefreshEnemyListRsp::default_instance_ = NULL;

TArenaHighOrderRefreshEnemyListRsp* TArenaHighOrderRefreshEnemyListRsp::New() const {
  return new TArenaHighOrderRefreshEnemyListRsp;
}

void TArenaHighOrderRefreshEnemyListRsp::Clear() {
  refreshtime_ = GOOGLE_ULONGLONG(0);
  enemyarr_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TArenaHighOrderRefreshEnemyListRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TArenaHighOrderRefreshEnemyListRsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .pb.TArenaHighOrderUser EnemyArr = 1;
      case 1: {
        if (tag == 10) {
         parse_EnemyArr:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_enemyarr()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_EnemyArr;
        if (input->ExpectTag(16)) goto parse_RefreshTime;
        break;
      }

      // optional uint64 RefreshTime = 2;
      case 2: {
        if (tag == 16) {
         parse_RefreshTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &refreshtime_)));
          set_has_refreshtime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TArenaHighOrderRefreshEnemyListRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TArenaHighOrderRefreshEnemyListRsp)
  return false;
#undef DO_
}

void TArenaHighOrderRefreshEnemyListRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TArenaHighOrderRefreshEnemyListRsp)
  // repeated .pb.TArenaHighOrderUser EnemyArr = 1;
  for (int i = 0; i < this->enemyarr_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->enemyarr(i), output);
  }

  // optional uint64 RefreshTime = 2;
  if (has_refreshtime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->refreshtime(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TArenaHighOrderRefreshEnemyListRsp)
}

::google::protobuf::uint8* TArenaHighOrderRefreshEnemyListRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TArenaHighOrderRefreshEnemyListRsp)
  // repeated .pb.TArenaHighOrderUser EnemyArr = 1;
  for (int i = 0; i < this->enemyarr_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->enemyarr(i), target);
  }

  // optional uint64 RefreshTime = 2;
  if (has_refreshtime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->refreshtime(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TArenaHighOrderRefreshEnemyListRsp)
  return target;
}

int TArenaHighOrderRefreshEnemyListRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // optional uint64 RefreshTime = 2;
    if (has_refreshtime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->refreshtime());
    }

  }
  // repeated .pb.TArenaHighOrderUser EnemyArr = 1;
  total_size += 1 * this->enemyarr_size();
  for (int i = 0; i < this->enemyarr_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->enemyarr(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TArenaHighOrderRefreshEnemyListRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TArenaHighOrderRefreshEnemyListRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TArenaHighOrderRefreshEnemyListRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TArenaHighOrderRefreshEnemyListRsp::MergeFrom(const TArenaHighOrderRefreshEnemyListRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  enemyarr_.MergeFrom(from.enemyarr_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_refreshtime()) {
      set_refreshtime(from.refreshtime());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TArenaHighOrderRefreshEnemyListRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TArenaHighOrderRefreshEnemyListRsp::CopyFrom(const TArenaHighOrderRefreshEnemyListRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TArenaHighOrderRefreshEnemyListRsp::IsInitialized() const {

  return true;
}

void TArenaHighOrderRefreshEnemyListRsp::Swap(TArenaHighOrderRefreshEnemyListRsp* other) {
  if (other != this) {
    enemyarr_.Swap(&other->enemyarr_);
    std::swap(refreshtime_, other->refreshtime_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TArenaHighOrderRefreshEnemyListRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TArenaHighOrderRefreshEnemyListRsp_descriptor_;
  metadata.reflection = TArenaHighOrderRefreshEnemyListRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TArenaHighOrderBattlePos::kHidFieldNumber;
const int TArenaHighOrderBattlePos::kPosFieldNumber;
#endif  // !_MSC_VER

TArenaHighOrderBattlePos::TArenaHighOrderBattlePos()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TArenaHighOrderBattlePos)
}

void TArenaHighOrderBattlePos::InitAsDefaultInstance() {
}

TArenaHighOrderBattlePos::TArenaHighOrderBattlePos(const TArenaHighOrderBattlePos& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TArenaHighOrderBattlePos)
}

void TArenaHighOrderBattlePos::SharedCtor() {
  _cached_size_ = 0;
  hid_ = 0u;
  pos_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TArenaHighOrderBattlePos::~TArenaHighOrderBattlePos() {
  // @@protoc_insertion_point(destructor:pb.TArenaHighOrderBattlePos)
  SharedDtor();
}

void TArenaHighOrderBattlePos::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TArenaHighOrderBattlePos::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TArenaHighOrderBattlePos::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TArenaHighOrderBattlePos_descriptor_;
}

const TArenaHighOrderBattlePos& TArenaHighOrderBattlePos::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fArenaHighOrder_2eproto();
  return *default_instance_;
}

TArenaHighOrderBattlePos* TArenaHighOrderBattlePos::default_instance_ = NULL;

TArenaHighOrderBattlePos* TArenaHighOrderBattlePos::New() const {
  return new TArenaHighOrderBattlePos;
}

void TArenaHighOrderBattlePos::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<TArenaHighOrderBattlePos*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(hid_, pos_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TArenaHighOrderBattlePos::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TArenaHighOrderBattlePos)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 Hid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &hid_)));
          set_has_hid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_Pos;
        break;
      }

      // optional uint32 Pos = 2;
      case 2: {
        if (tag == 16) {
         parse_Pos:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &pos_)));
          set_has_pos();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TArenaHighOrderBattlePos)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TArenaHighOrderBattlePos)
  return false;
#undef DO_
}

void TArenaHighOrderBattlePos::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TArenaHighOrderBattlePos)
  // optional uint32 Hid = 1;
  if (has_hid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->hid(), output);
  }

  // optional uint32 Pos = 2;
  if (has_pos()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->pos(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TArenaHighOrderBattlePos)
}

::google::protobuf::uint8* TArenaHighOrderBattlePos::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TArenaHighOrderBattlePos)
  // optional uint32 Hid = 1;
  if (has_hid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->hid(), target);
  }

  // optional uint32 Pos = 2;
  if (has_pos()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->pos(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TArenaHighOrderBattlePos)
  return target;
}

int TArenaHighOrderBattlePos::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 Hid = 1;
    if (has_hid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->hid());
    }

    // optional uint32 Pos = 2;
    if (has_pos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->pos());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TArenaHighOrderBattlePos::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TArenaHighOrderBattlePos* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TArenaHighOrderBattlePos*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TArenaHighOrderBattlePos::MergeFrom(const TArenaHighOrderBattlePos& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_hid()) {
      set_hid(from.hid());
    }
    if (from.has_pos()) {
      set_pos(from.pos());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TArenaHighOrderBattlePos::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TArenaHighOrderBattlePos::CopyFrom(const TArenaHighOrderBattlePos& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TArenaHighOrderBattlePos::IsInitialized() const {

  return true;
}

void TArenaHighOrderBattlePos::Swap(TArenaHighOrderBattlePos* other) {
  if (other != this) {
    std::swap(hid_, other->hid_);
    std::swap(pos_, other->pos_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TArenaHighOrderBattlePos::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TArenaHighOrderBattlePos_descriptor_;
  metadata.reflection = TArenaHighOrderBattlePos_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TArenaHighOrderFormationInfo::kFormationIdFieldNumber;
const int TArenaHighOrderFormationInfo::kBattleArrFieldNumber;
#endif  // !_MSC_VER

TArenaHighOrderFormationInfo::TArenaHighOrderFormationInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TArenaHighOrderFormationInfo)
}

void TArenaHighOrderFormationInfo::InitAsDefaultInstance() {
}

TArenaHighOrderFormationInfo::TArenaHighOrderFormationInfo(const TArenaHighOrderFormationInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TArenaHighOrderFormationInfo)
}

void TArenaHighOrderFormationInfo::SharedCtor() {
  _cached_size_ = 0;
  formationid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TArenaHighOrderFormationInfo::~TArenaHighOrderFormationInfo() {
  // @@protoc_insertion_point(destructor:pb.TArenaHighOrderFormationInfo)
  SharedDtor();
}

void TArenaHighOrderFormationInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TArenaHighOrderFormationInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TArenaHighOrderFormationInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TArenaHighOrderFormationInfo_descriptor_;
}

const TArenaHighOrderFormationInfo& TArenaHighOrderFormationInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fArenaHighOrder_2eproto();
  return *default_instance_;
}

TArenaHighOrderFormationInfo* TArenaHighOrderFormationInfo::default_instance_ = NULL;

TArenaHighOrderFormationInfo* TArenaHighOrderFormationInfo::New() const {
  return new TArenaHighOrderFormationInfo;
}

void TArenaHighOrderFormationInfo::Clear() {
  formationid_ = 0u;
  battlearr_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TArenaHighOrderFormationInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TArenaHighOrderFormationInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 FormationId = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &formationid_)));
          set_has_formationid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_BattleArr;
        break;
      }

      // repeated .pb.TArenaHighOrderBattlePos BattleArr = 2;
      case 2: {
        if (tag == 18) {
         parse_BattleArr:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_battlearr()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_BattleArr;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TArenaHighOrderFormationInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TArenaHighOrderFormationInfo)
  return false;
#undef DO_
}

void TArenaHighOrderFormationInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TArenaHighOrderFormationInfo)
  // optional uint32 FormationId = 1;
  if (has_formationid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->formationid(), output);
  }

  // repeated .pb.TArenaHighOrderBattlePos BattleArr = 2;
  for (int i = 0; i < this->battlearr_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->battlearr(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TArenaHighOrderFormationInfo)
}

::google::protobuf::uint8* TArenaHighOrderFormationInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TArenaHighOrderFormationInfo)
  // optional uint32 FormationId = 1;
  if (has_formationid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->formationid(), target);
  }

  // repeated .pb.TArenaHighOrderBattlePos BattleArr = 2;
  for (int i = 0; i < this->battlearr_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->battlearr(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TArenaHighOrderFormationInfo)
  return target;
}

int TArenaHighOrderFormationInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 FormationId = 1;
    if (has_formationid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->formationid());
    }

  }
  // repeated .pb.TArenaHighOrderBattlePos BattleArr = 2;
  total_size += 1 * this->battlearr_size();
  for (int i = 0; i < this->battlearr_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->battlearr(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TArenaHighOrderFormationInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TArenaHighOrderFormationInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TArenaHighOrderFormationInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TArenaHighOrderFormationInfo::MergeFrom(const TArenaHighOrderFormationInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  battlearr_.MergeFrom(from.battlearr_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_formationid()) {
      set_formationid(from.formationid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TArenaHighOrderFormationInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TArenaHighOrderFormationInfo::CopyFrom(const TArenaHighOrderFormationInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TArenaHighOrderFormationInfo::IsInitialized() const {

  return true;
}

void TArenaHighOrderFormationInfo::Swap(TArenaHighOrderFormationInfo* other) {
  if (other != this) {
    std::swap(formationid_, other->formationid_);
    battlearr_.Swap(&other->battlearr_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TArenaHighOrderFormationInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TArenaHighOrderFormationInfo_descriptor_;
  metadata.reflection = TArenaHighOrderFormationInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TArenaHighOrderGetMyFormationRsp::kFormationArrFieldNumber;
#endif  // !_MSC_VER

TArenaHighOrderGetMyFormationRsp::TArenaHighOrderGetMyFormationRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TArenaHighOrderGetMyFormationRsp)
}

void TArenaHighOrderGetMyFormationRsp::InitAsDefaultInstance() {
}

TArenaHighOrderGetMyFormationRsp::TArenaHighOrderGetMyFormationRsp(const TArenaHighOrderGetMyFormationRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TArenaHighOrderGetMyFormationRsp)
}

void TArenaHighOrderGetMyFormationRsp::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TArenaHighOrderGetMyFormationRsp::~TArenaHighOrderGetMyFormationRsp() {
  // @@protoc_insertion_point(destructor:pb.TArenaHighOrderGetMyFormationRsp)
  SharedDtor();
}

void TArenaHighOrderGetMyFormationRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TArenaHighOrderGetMyFormationRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TArenaHighOrderGetMyFormationRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TArenaHighOrderGetMyFormationRsp_descriptor_;
}

const TArenaHighOrderGetMyFormationRsp& TArenaHighOrderGetMyFormationRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fArenaHighOrder_2eproto();
  return *default_instance_;
}

TArenaHighOrderGetMyFormationRsp* TArenaHighOrderGetMyFormationRsp::default_instance_ = NULL;

TArenaHighOrderGetMyFormationRsp* TArenaHighOrderGetMyFormationRsp::New() const {
  return new TArenaHighOrderGetMyFormationRsp;
}

void TArenaHighOrderGetMyFormationRsp::Clear() {
  formationarr_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TArenaHighOrderGetMyFormationRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TArenaHighOrderGetMyFormationRsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .pb.TArenaHighOrderFormationInfo FormationArr = 1;
      case 1: {
        if (tag == 10) {
         parse_FormationArr:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_formationarr()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_FormationArr;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TArenaHighOrderGetMyFormationRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TArenaHighOrderGetMyFormationRsp)
  return false;
#undef DO_
}

void TArenaHighOrderGetMyFormationRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TArenaHighOrderGetMyFormationRsp)
  // repeated .pb.TArenaHighOrderFormationInfo FormationArr = 1;
  for (int i = 0; i < this->formationarr_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->formationarr(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TArenaHighOrderGetMyFormationRsp)
}

::google::protobuf::uint8* TArenaHighOrderGetMyFormationRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TArenaHighOrderGetMyFormationRsp)
  // repeated .pb.TArenaHighOrderFormationInfo FormationArr = 1;
  for (int i = 0; i < this->formationarr_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->formationarr(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TArenaHighOrderGetMyFormationRsp)
  return target;
}

int TArenaHighOrderGetMyFormationRsp::ByteSize() const {
  int total_size = 0;

  // repeated .pb.TArenaHighOrderFormationInfo FormationArr = 1;
  total_size += 1 * this->formationarr_size();
  for (int i = 0; i < this->formationarr_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->formationarr(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TArenaHighOrderGetMyFormationRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TArenaHighOrderGetMyFormationRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TArenaHighOrderGetMyFormationRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TArenaHighOrderGetMyFormationRsp::MergeFrom(const TArenaHighOrderGetMyFormationRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  formationarr_.MergeFrom(from.formationarr_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TArenaHighOrderGetMyFormationRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TArenaHighOrderGetMyFormationRsp::CopyFrom(const TArenaHighOrderGetMyFormationRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TArenaHighOrderGetMyFormationRsp::IsInitialized() const {

  return true;
}

void TArenaHighOrderGetMyFormationRsp::Swap(TArenaHighOrderGetMyFormationRsp* other) {
  if (other != this) {
    formationarr_.Swap(&other->formationarr_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TArenaHighOrderGetMyFormationRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TArenaHighOrderGetMyFormationRsp_descriptor_;
  metadata.reflection = TArenaHighOrderGetMyFormationRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TArenaHighOrderSetFormationReq::kFormationArrFieldNumber;
#endif  // !_MSC_VER

TArenaHighOrderSetFormationReq::TArenaHighOrderSetFormationReq()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TArenaHighOrderSetFormationReq)
}

void TArenaHighOrderSetFormationReq::InitAsDefaultInstance() {
}

TArenaHighOrderSetFormationReq::TArenaHighOrderSetFormationReq(const TArenaHighOrderSetFormationReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TArenaHighOrderSetFormationReq)
}

void TArenaHighOrderSetFormationReq::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TArenaHighOrderSetFormationReq::~TArenaHighOrderSetFormationReq() {
  // @@protoc_insertion_point(destructor:pb.TArenaHighOrderSetFormationReq)
  SharedDtor();
}

void TArenaHighOrderSetFormationReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TArenaHighOrderSetFormationReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TArenaHighOrderSetFormationReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TArenaHighOrderSetFormationReq_descriptor_;
}

const TArenaHighOrderSetFormationReq& TArenaHighOrderSetFormationReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fArenaHighOrder_2eproto();
  return *default_instance_;
}

TArenaHighOrderSetFormationReq* TArenaHighOrderSetFormationReq::default_instance_ = NULL;

TArenaHighOrderSetFormationReq* TArenaHighOrderSetFormationReq::New() const {
  return new TArenaHighOrderSetFormationReq;
}

void TArenaHighOrderSetFormationReq::Clear() {
  formationarr_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TArenaHighOrderSetFormationReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TArenaHighOrderSetFormationReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .pb.TArenaHighOrderFormationInfo FormationArr = 1;
      case 1: {
        if (tag == 10) {
         parse_FormationArr:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_formationarr()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_FormationArr;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TArenaHighOrderSetFormationReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TArenaHighOrderSetFormationReq)
  return false;
#undef DO_
}

void TArenaHighOrderSetFormationReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TArenaHighOrderSetFormationReq)
  // repeated .pb.TArenaHighOrderFormationInfo FormationArr = 1;
  for (int i = 0; i < this->formationarr_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->formationarr(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TArenaHighOrderSetFormationReq)
}

::google::protobuf::uint8* TArenaHighOrderSetFormationReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TArenaHighOrderSetFormationReq)
  // repeated .pb.TArenaHighOrderFormationInfo FormationArr = 1;
  for (int i = 0; i < this->formationarr_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->formationarr(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TArenaHighOrderSetFormationReq)
  return target;
}

int TArenaHighOrderSetFormationReq::ByteSize() const {
  int total_size = 0;

  // repeated .pb.TArenaHighOrderFormationInfo FormationArr = 1;
  total_size += 1 * this->formationarr_size();
  for (int i = 0; i < this->formationarr_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->formationarr(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TArenaHighOrderSetFormationReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TArenaHighOrderSetFormationReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TArenaHighOrderSetFormationReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TArenaHighOrderSetFormationReq::MergeFrom(const TArenaHighOrderSetFormationReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  formationarr_.MergeFrom(from.formationarr_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TArenaHighOrderSetFormationReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TArenaHighOrderSetFormationReq::CopyFrom(const TArenaHighOrderSetFormationReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TArenaHighOrderSetFormationReq::IsInitialized() const {

  return true;
}

void TArenaHighOrderSetFormationReq::Swap(TArenaHighOrderSetFormationReq* other) {
  if (other != this) {
    formationarr_.Swap(&other->formationarr_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TArenaHighOrderSetFormationReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TArenaHighOrderSetFormationReq_descriptor_;
  metadata.reflection = TArenaHighOrderSetFormationReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TArenaHighOrderExchangeFormationReq::kFormationIdFieldNumber;
#endif  // !_MSC_VER

TArenaHighOrderExchangeFormationReq::TArenaHighOrderExchangeFormationReq()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TArenaHighOrderExchangeFormationReq)
}

void TArenaHighOrderExchangeFormationReq::InitAsDefaultInstance() {
}

TArenaHighOrderExchangeFormationReq::TArenaHighOrderExchangeFormationReq(const TArenaHighOrderExchangeFormationReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TArenaHighOrderExchangeFormationReq)
}

void TArenaHighOrderExchangeFormationReq::SharedCtor() {
  _cached_size_ = 0;
  formationid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TArenaHighOrderExchangeFormationReq::~TArenaHighOrderExchangeFormationReq() {
  // @@protoc_insertion_point(destructor:pb.TArenaHighOrderExchangeFormationReq)
  SharedDtor();
}

void TArenaHighOrderExchangeFormationReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TArenaHighOrderExchangeFormationReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TArenaHighOrderExchangeFormationReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TArenaHighOrderExchangeFormationReq_descriptor_;
}

const TArenaHighOrderExchangeFormationReq& TArenaHighOrderExchangeFormationReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fArenaHighOrder_2eproto();
  return *default_instance_;
}

TArenaHighOrderExchangeFormationReq* TArenaHighOrderExchangeFormationReq::default_instance_ = NULL;

TArenaHighOrderExchangeFormationReq* TArenaHighOrderExchangeFormationReq::New() const {
  return new TArenaHighOrderExchangeFormationReq;
}

void TArenaHighOrderExchangeFormationReq::Clear() {
  formationid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TArenaHighOrderExchangeFormationReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TArenaHighOrderExchangeFormationReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 FormationId = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &formationid_)));
          set_has_formationid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TArenaHighOrderExchangeFormationReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TArenaHighOrderExchangeFormationReq)
  return false;
#undef DO_
}

void TArenaHighOrderExchangeFormationReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TArenaHighOrderExchangeFormationReq)
  // optional uint32 FormationId = 1;
  if (has_formationid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->formationid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TArenaHighOrderExchangeFormationReq)
}

::google::protobuf::uint8* TArenaHighOrderExchangeFormationReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TArenaHighOrderExchangeFormationReq)
  // optional uint32 FormationId = 1;
  if (has_formationid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->formationid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TArenaHighOrderExchangeFormationReq)
  return target;
}

int TArenaHighOrderExchangeFormationReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 FormationId = 1;
    if (has_formationid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->formationid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TArenaHighOrderExchangeFormationReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TArenaHighOrderExchangeFormationReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TArenaHighOrderExchangeFormationReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TArenaHighOrderExchangeFormationReq::MergeFrom(const TArenaHighOrderExchangeFormationReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_formationid()) {
      set_formationid(from.formationid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TArenaHighOrderExchangeFormationReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TArenaHighOrderExchangeFormationReq::CopyFrom(const TArenaHighOrderExchangeFormationReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TArenaHighOrderExchangeFormationReq::IsInitialized() const {

  return true;
}

void TArenaHighOrderExchangeFormationReq::Swap(TArenaHighOrderExchangeFormationReq* other) {
  if (other != this) {
    std::swap(formationid_, other->formationid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TArenaHighOrderExchangeFormationReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TArenaHighOrderExchangeFormationReq_descriptor_;
  metadata.reflection = TArenaHighOrderExchangeFormationReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TArenaHighOrderEnemyFormation::kFormationIdFieldNumber;
const int TArenaHighOrderEnemyFormation::kUnitArrFieldNumber;
const int TArenaHighOrderEnemyFormation::kFightForceFieldNumber;
#endif  // !_MSC_VER

TArenaHighOrderEnemyFormation::TArenaHighOrderEnemyFormation()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TArenaHighOrderEnemyFormation)
}

void TArenaHighOrderEnemyFormation::InitAsDefaultInstance() {
}

TArenaHighOrderEnemyFormation::TArenaHighOrderEnemyFormation(const TArenaHighOrderEnemyFormation& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TArenaHighOrderEnemyFormation)
}

void TArenaHighOrderEnemyFormation::SharedCtor() {
  _cached_size_ = 0;
  formationid_ = 0u;
  fightforce_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TArenaHighOrderEnemyFormation::~TArenaHighOrderEnemyFormation() {
  // @@protoc_insertion_point(destructor:pb.TArenaHighOrderEnemyFormation)
  SharedDtor();
}

void TArenaHighOrderEnemyFormation::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TArenaHighOrderEnemyFormation::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TArenaHighOrderEnemyFormation::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TArenaHighOrderEnemyFormation_descriptor_;
}

const TArenaHighOrderEnemyFormation& TArenaHighOrderEnemyFormation::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fArenaHighOrder_2eproto();
  return *default_instance_;
}

TArenaHighOrderEnemyFormation* TArenaHighOrderEnemyFormation::default_instance_ = NULL;

TArenaHighOrderEnemyFormation* TArenaHighOrderEnemyFormation::New() const {
  return new TArenaHighOrderEnemyFormation;
}

void TArenaHighOrderEnemyFormation::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<TArenaHighOrderEnemyFormation*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(fightforce_, formationid_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  unitarr_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TArenaHighOrderEnemyFormation::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TArenaHighOrderEnemyFormation)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 FormationId = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &formationid_)));
          set_has_formationid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_UnitArr;
        break;
      }

      // repeated .pb.TUnitInfo UnitArr = 2;
      case 2: {
        if (tag == 18) {
         parse_UnitArr:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_unitarr()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_UnitArr;
        if (input->ExpectTag(24)) goto parse_FightForce;
        break;
      }

      // optional uint64 FightForce = 3;
      case 3: {
        if (tag == 24) {
         parse_FightForce:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &fightforce_)));
          set_has_fightforce();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TArenaHighOrderEnemyFormation)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TArenaHighOrderEnemyFormation)
  return false;
#undef DO_
}

void TArenaHighOrderEnemyFormation::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TArenaHighOrderEnemyFormation)
  // optional uint32 FormationId = 1;
  if (has_formationid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->formationid(), output);
  }

  // repeated .pb.TUnitInfo UnitArr = 2;
  for (int i = 0; i < this->unitarr_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->unitarr(i), output);
  }

  // optional uint64 FightForce = 3;
  if (has_fightforce()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->fightforce(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TArenaHighOrderEnemyFormation)
}

::google::protobuf::uint8* TArenaHighOrderEnemyFormation::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TArenaHighOrderEnemyFormation)
  // optional uint32 FormationId = 1;
  if (has_formationid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->formationid(), target);
  }

  // repeated .pb.TUnitInfo UnitArr = 2;
  for (int i = 0; i < this->unitarr_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->unitarr(i), target);
  }

  // optional uint64 FightForce = 3;
  if (has_fightforce()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->fightforce(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TArenaHighOrderEnemyFormation)
  return target;
}

int TArenaHighOrderEnemyFormation::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 FormationId = 1;
    if (has_formationid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->formationid());
    }

    // optional uint64 FightForce = 3;
    if (has_fightforce()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->fightforce());
    }

  }
  // repeated .pb.TUnitInfo UnitArr = 2;
  total_size += 1 * this->unitarr_size();
  for (int i = 0; i < this->unitarr_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->unitarr(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TArenaHighOrderEnemyFormation::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TArenaHighOrderEnemyFormation* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TArenaHighOrderEnemyFormation*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TArenaHighOrderEnemyFormation::MergeFrom(const TArenaHighOrderEnemyFormation& from) {
  GOOGLE_CHECK_NE(&from, this);
  unitarr_.MergeFrom(from.unitarr_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_formationid()) {
      set_formationid(from.formationid());
    }
    if (from.has_fightforce()) {
      set_fightforce(from.fightforce());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TArenaHighOrderEnemyFormation::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TArenaHighOrderEnemyFormation::CopyFrom(const TArenaHighOrderEnemyFormation& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TArenaHighOrderEnemyFormation::IsInitialized() const {

  if (!::google::protobuf::internal::AllAreInitialized(this->unitarr())) return false;
  return true;
}

void TArenaHighOrderEnemyFormation::Swap(TArenaHighOrderEnemyFormation* other) {
  if (other != this) {
    std::swap(formationid_, other->formationid_);
    unitarr_.Swap(&other->unitarr_);
    std::swap(fightforce_, other->fightforce_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TArenaHighOrderEnemyFormation::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TArenaHighOrderEnemyFormation_descriptor_;
  metadata.reflection = TArenaHighOrderEnemyFormation_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TArenaHighOrderGetEnemyFormationReq::kEnemyUidFieldNumber;
#endif  // !_MSC_VER

TArenaHighOrderGetEnemyFormationReq::TArenaHighOrderGetEnemyFormationReq()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TArenaHighOrderGetEnemyFormationReq)
}

void TArenaHighOrderGetEnemyFormationReq::InitAsDefaultInstance() {
}

TArenaHighOrderGetEnemyFormationReq::TArenaHighOrderGetEnemyFormationReq(const TArenaHighOrderGetEnemyFormationReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TArenaHighOrderGetEnemyFormationReq)
}

void TArenaHighOrderGetEnemyFormationReq::SharedCtor() {
  _cached_size_ = 0;
  enemyuid_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TArenaHighOrderGetEnemyFormationReq::~TArenaHighOrderGetEnemyFormationReq() {
  // @@protoc_insertion_point(destructor:pb.TArenaHighOrderGetEnemyFormationReq)
  SharedDtor();
}

void TArenaHighOrderGetEnemyFormationReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TArenaHighOrderGetEnemyFormationReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TArenaHighOrderGetEnemyFormationReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TArenaHighOrderGetEnemyFormationReq_descriptor_;
}

const TArenaHighOrderGetEnemyFormationReq& TArenaHighOrderGetEnemyFormationReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fArenaHighOrder_2eproto();
  return *default_instance_;
}

TArenaHighOrderGetEnemyFormationReq* TArenaHighOrderGetEnemyFormationReq::default_instance_ = NULL;

TArenaHighOrderGetEnemyFormationReq* TArenaHighOrderGetEnemyFormationReq::New() const {
  return new TArenaHighOrderGetEnemyFormationReq;
}

void TArenaHighOrderGetEnemyFormationReq::Clear() {
  enemyuid_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TArenaHighOrderGetEnemyFormationReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TArenaHighOrderGetEnemyFormationReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 EnemyUid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &enemyuid_)));
          set_has_enemyuid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TArenaHighOrderGetEnemyFormationReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TArenaHighOrderGetEnemyFormationReq)
  return false;
#undef DO_
}

void TArenaHighOrderGetEnemyFormationReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TArenaHighOrderGetEnemyFormationReq)
  // optional uint64 EnemyUid = 1;
  if (has_enemyuid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->enemyuid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TArenaHighOrderGetEnemyFormationReq)
}

::google::protobuf::uint8* TArenaHighOrderGetEnemyFormationReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TArenaHighOrderGetEnemyFormationReq)
  // optional uint64 EnemyUid = 1;
  if (has_enemyuid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->enemyuid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TArenaHighOrderGetEnemyFormationReq)
  return target;
}

int TArenaHighOrderGetEnemyFormationReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 EnemyUid = 1;
    if (has_enemyuid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->enemyuid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TArenaHighOrderGetEnemyFormationReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TArenaHighOrderGetEnemyFormationReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TArenaHighOrderGetEnemyFormationReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TArenaHighOrderGetEnemyFormationReq::MergeFrom(const TArenaHighOrderGetEnemyFormationReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_enemyuid()) {
      set_enemyuid(from.enemyuid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TArenaHighOrderGetEnemyFormationReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TArenaHighOrderGetEnemyFormationReq::CopyFrom(const TArenaHighOrderGetEnemyFormationReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TArenaHighOrderGetEnemyFormationReq::IsInitialized() const {

  return true;
}

void TArenaHighOrderGetEnemyFormationReq::Swap(TArenaHighOrderGetEnemyFormationReq* other) {
  if (other != this) {
    std::swap(enemyuid_, other->enemyuid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TArenaHighOrderGetEnemyFormationReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TArenaHighOrderGetEnemyFormationReq_descriptor_;
  metadata.reflection = TArenaHighOrderGetEnemyFormationReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TArenaHighOrderGetEnemyFormationRsp::kFormationArrFieldNumber;
const int TArenaHighOrderGetEnemyFormationRsp::kRankArrFieldNumber;
#endif  // !_MSC_VER

TArenaHighOrderGetEnemyFormationRsp::TArenaHighOrderGetEnemyFormationRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TArenaHighOrderGetEnemyFormationRsp)
}

void TArenaHighOrderGetEnemyFormationRsp::InitAsDefaultInstance() {
}

TArenaHighOrderGetEnemyFormationRsp::TArenaHighOrderGetEnemyFormationRsp(const TArenaHighOrderGetEnemyFormationRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TArenaHighOrderGetEnemyFormationRsp)
}

void TArenaHighOrderGetEnemyFormationRsp::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TArenaHighOrderGetEnemyFormationRsp::~TArenaHighOrderGetEnemyFormationRsp() {
  // @@protoc_insertion_point(destructor:pb.TArenaHighOrderGetEnemyFormationRsp)
  SharedDtor();
}

void TArenaHighOrderGetEnemyFormationRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TArenaHighOrderGetEnemyFormationRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TArenaHighOrderGetEnemyFormationRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TArenaHighOrderGetEnemyFormationRsp_descriptor_;
}

const TArenaHighOrderGetEnemyFormationRsp& TArenaHighOrderGetEnemyFormationRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fArenaHighOrder_2eproto();
  return *default_instance_;
}

TArenaHighOrderGetEnemyFormationRsp* TArenaHighOrderGetEnemyFormationRsp::default_instance_ = NULL;

TArenaHighOrderGetEnemyFormationRsp* TArenaHighOrderGetEnemyFormationRsp::New() const {
  return new TArenaHighOrderGetEnemyFormationRsp;
}

void TArenaHighOrderGetEnemyFormationRsp::Clear() {
  formationarr_.Clear();
  rankarr_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TArenaHighOrderGetEnemyFormationRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TArenaHighOrderGetEnemyFormationRsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .pb.TArenaHighOrderEnemyFormation FormationArr = 1;
      case 1: {
        if (tag == 10) {
         parse_FormationArr:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_formationarr()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_FormationArr;
        if (input->ExpectTag(18)) goto parse_RankArr;
        break;
      }

      // repeated .pb.TRankSingle RankArr = 2;
      case 2: {
        if (tag == 18) {
         parse_RankArr:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_rankarr()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_RankArr;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TArenaHighOrderGetEnemyFormationRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TArenaHighOrderGetEnemyFormationRsp)
  return false;
#undef DO_
}

void TArenaHighOrderGetEnemyFormationRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TArenaHighOrderGetEnemyFormationRsp)
  // repeated .pb.TArenaHighOrderEnemyFormation FormationArr = 1;
  for (int i = 0; i < this->formationarr_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->formationarr(i), output);
  }

  // repeated .pb.TRankSingle RankArr = 2;
  for (int i = 0; i < this->rankarr_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->rankarr(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TArenaHighOrderGetEnemyFormationRsp)
}

::google::protobuf::uint8* TArenaHighOrderGetEnemyFormationRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TArenaHighOrderGetEnemyFormationRsp)
  // repeated .pb.TArenaHighOrderEnemyFormation FormationArr = 1;
  for (int i = 0; i < this->formationarr_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->formationarr(i), target);
  }

  // repeated .pb.TRankSingle RankArr = 2;
  for (int i = 0; i < this->rankarr_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->rankarr(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TArenaHighOrderGetEnemyFormationRsp)
  return target;
}

int TArenaHighOrderGetEnemyFormationRsp::ByteSize() const {
  int total_size = 0;

  // repeated .pb.TArenaHighOrderEnemyFormation FormationArr = 1;
  total_size += 1 * this->formationarr_size();
  for (int i = 0; i < this->formationarr_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->formationarr(i));
  }

  // repeated .pb.TRankSingle RankArr = 2;
  total_size += 1 * this->rankarr_size();
  for (int i = 0; i < this->rankarr_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->rankarr(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TArenaHighOrderGetEnemyFormationRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TArenaHighOrderGetEnemyFormationRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TArenaHighOrderGetEnemyFormationRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TArenaHighOrderGetEnemyFormationRsp::MergeFrom(const TArenaHighOrderGetEnemyFormationRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  formationarr_.MergeFrom(from.formationarr_);
  rankarr_.MergeFrom(from.rankarr_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TArenaHighOrderGetEnemyFormationRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TArenaHighOrderGetEnemyFormationRsp::CopyFrom(const TArenaHighOrderGetEnemyFormationRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TArenaHighOrderGetEnemyFormationRsp::IsInitialized() const {

  if (!::google::protobuf::internal::AllAreInitialized(this->formationarr())) return false;
  return true;
}

void TArenaHighOrderGetEnemyFormationRsp::Swap(TArenaHighOrderGetEnemyFormationRsp* other) {
  if (other != this) {
    formationarr_.Swap(&other->formationarr_);
    rankarr_.Swap(&other->rankarr_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TArenaHighOrderGetEnemyFormationRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TArenaHighOrderGetEnemyFormationRsp_descriptor_;
  metadata.reflection = TArenaHighOrderGetEnemyFormationRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TUnitViewInfo::kHidFieldNumber;
const int TUnitViewInfo::kPosFieldNumber;
const int TUnitViewInfo::kLevelFieldNumber;
const int TUnitViewInfo::kStarFieldNumber;
const int TUnitViewInfo::kCurHpFieldNumber;
const int TUnitViewInfo::kMaxHpFieldNumber;
const int TUnitViewInfo::kDamageOutFieldNumber;
const int TUnitViewInfo::kDamageInFieldNumber;
const int TUnitViewInfo::kHtidFieldNumber;
const int TUnitViewInfo::kHealOutFieldNumber;
#endif  // !_MSC_VER

TUnitViewInfo::TUnitViewInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TUnitViewInfo)
}

void TUnitViewInfo::InitAsDefaultInstance() {
}

TUnitViewInfo::TUnitViewInfo(const TUnitViewInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TUnitViewInfo)
}

void TUnitViewInfo::SharedCtor() {
  _cached_size_ = 0;
  hid_ = 0u;
  pos_ = 0u;
  level_ = 0u;
  star_ = 0u;
  curhp_ = GOOGLE_ULONGLONG(0);
  maxhp_ = GOOGLE_ULONGLONG(0);
  damageout_ = GOOGLE_ULONGLONG(0);
  damagein_ = GOOGLE_ULONGLONG(0);
  htid_ = 0u;
  healout_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TUnitViewInfo::~TUnitViewInfo() {
  // @@protoc_insertion_point(destructor:pb.TUnitViewInfo)
  SharedDtor();
}

void TUnitViewInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TUnitViewInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TUnitViewInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TUnitViewInfo_descriptor_;
}

const TUnitViewInfo& TUnitViewInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fArenaHighOrder_2eproto();
  return *default_instance_;
}

TUnitViewInfo* TUnitViewInfo::default_instance_ = NULL;

TUnitViewInfo* TUnitViewInfo::New() const {
  return new TUnitViewInfo;
}

void TUnitViewInfo::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<TUnitViewInfo*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(hid_, damagein_);
  }
  ZR_(healout_, htid_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TUnitViewInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TUnitViewInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 Hid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &hid_)));
          set_has_hid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_Pos;
        break;
      }

      // required uint32 Pos = 2;
      case 2: {
        if (tag == 16) {
         parse_Pos:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &pos_)));
          set_has_pos();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_Level;
        break;
      }

      // required uint32 Level = 3;
      case 3: {
        if (tag == 24) {
         parse_Level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &level_)));
          set_has_level();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_Star;
        break;
      }

      // optional uint32 Star = 4;
      case 4: {
        if (tag == 32) {
         parse_Star:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &star_)));
          set_has_star();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_CurHp;
        break;
      }

      // optional uint64 CurHp = 5;
      case 5: {
        if (tag == 40) {
         parse_CurHp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &curhp_)));
          set_has_curhp();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_MaxHp;
        break;
      }

      // optional uint64 MaxHp = 6;
      case 6: {
        if (tag == 48) {
         parse_MaxHp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &maxhp_)));
          set_has_maxhp();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_DamageOut;
        break;
      }

      // optional uint64 DamageOut = 7;
      case 7: {
        if (tag == 56) {
         parse_DamageOut:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &damageout_)));
          set_has_damageout();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_DamageIn;
        break;
      }

      // optional uint64 DamageIn = 8;
      case 8: {
        if (tag == 64) {
         parse_DamageIn:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &damagein_)));
          set_has_damagein();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_Htid;
        break;
      }

      // optional uint32 Htid = 9;
      case 9: {
        if (tag == 72) {
         parse_Htid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &htid_)));
          set_has_htid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(80)) goto parse_HealOut;
        break;
      }

      // optional uint64 HealOut = 10;
      case 10: {
        if (tag == 80) {
         parse_HealOut:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &healout_)));
          set_has_healout();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TUnitViewInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TUnitViewInfo)
  return false;
#undef DO_
}

void TUnitViewInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TUnitViewInfo)
  // required uint32 Hid = 1;
  if (has_hid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->hid(), output);
  }

  // required uint32 Pos = 2;
  if (has_pos()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->pos(), output);
  }

  // required uint32 Level = 3;
  if (has_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->level(), output);
  }

  // optional uint32 Star = 4;
  if (has_star()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->star(), output);
  }

  // optional uint64 CurHp = 5;
  if (has_curhp()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(5, this->curhp(), output);
  }

  // optional uint64 MaxHp = 6;
  if (has_maxhp()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(6, this->maxhp(), output);
  }

  // optional uint64 DamageOut = 7;
  if (has_damageout()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(7, this->damageout(), output);
  }

  // optional uint64 DamageIn = 8;
  if (has_damagein()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(8, this->damagein(), output);
  }

  // optional uint32 Htid = 9;
  if (has_htid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->htid(), output);
  }

  // optional uint64 HealOut = 10;
  if (has_healout()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(10, this->healout(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TUnitViewInfo)
}

::google::protobuf::uint8* TUnitViewInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TUnitViewInfo)
  // required uint32 Hid = 1;
  if (has_hid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->hid(), target);
  }

  // required uint32 Pos = 2;
  if (has_pos()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->pos(), target);
  }

  // required uint32 Level = 3;
  if (has_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->level(), target);
  }

  // optional uint32 Star = 4;
  if (has_star()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->star(), target);
  }

  // optional uint64 CurHp = 5;
  if (has_curhp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(5, this->curhp(), target);
  }

  // optional uint64 MaxHp = 6;
  if (has_maxhp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(6, this->maxhp(), target);
  }

  // optional uint64 DamageOut = 7;
  if (has_damageout()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(7, this->damageout(), target);
  }

  // optional uint64 DamageIn = 8;
  if (has_damagein()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(8, this->damagein(), target);
  }

  // optional uint32 Htid = 9;
  if (has_htid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->htid(), target);
  }

  // optional uint64 HealOut = 10;
  if (has_healout()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(10, this->healout(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TUnitViewInfo)
  return target;
}

int TUnitViewInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 Hid = 1;
    if (has_hid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->hid());
    }

    // required uint32 Pos = 2;
    if (has_pos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->pos());
    }

    // required uint32 Level = 3;
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->level());
    }

    // optional uint32 Star = 4;
    if (has_star()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->star());
    }

    // optional uint64 CurHp = 5;
    if (has_curhp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->curhp());
    }

    // optional uint64 MaxHp = 6;
    if (has_maxhp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->maxhp());
    }

    // optional uint64 DamageOut = 7;
    if (has_damageout()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->damageout());
    }

    // optional uint64 DamageIn = 8;
    if (has_damagein()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->damagein());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional uint32 Htid = 9;
    if (has_htid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->htid());
    }

    // optional uint64 HealOut = 10;
    if (has_healout()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->healout());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TUnitViewInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TUnitViewInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TUnitViewInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TUnitViewInfo::MergeFrom(const TUnitViewInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_hid()) {
      set_hid(from.hid());
    }
    if (from.has_pos()) {
      set_pos(from.pos());
    }
    if (from.has_level()) {
      set_level(from.level());
    }
    if (from.has_star()) {
      set_star(from.star());
    }
    if (from.has_curhp()) {
      set_curhp(from.curhp());
    }
    if (from.has_maxhp()) {
      set_maxhp(from.maxhp());
    }
    if (from.has_damageout()) {
      set_damageout(from.damageout());
    }
    if (from.has_damagein()) {
      set_damagein(from.damagein());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_htid()) {
      set_htid(from.htid());
    }
    if (from.has_healout()) {
      set_healout(from.healout());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TUnitViewInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TUnitViewInfo::CopyFrom(const TUnitViewInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TUnitViewInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void TUnitViewInfo::Swap(TUnitViewInfo* other) {
  if (other != this) {
    std::swap(hid_, other->hid_);
    std::swap(pos_, other->pos_);
    std::swap(level_, other->level_);
    std::swap(star_, other->star_);
    std::swap(curhp_, other->curhp_);
    std::swap(maxhp_, other->maxhp_);
    std::swap(damageout_, other->damageout_);
    std::swap(damagein_, other->damagein_);
    std::swap(htid_, other->htid_);
    std::swap(healout_, other->healout_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TUnitViewInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TUnitViewInfo_descriptor_;
  metadata.reflection = TUnitViewInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TArmyViewInfo::kUnitArrFieldNumber;
#endif  // !_MSC_VER

TArmyViewInfo::TArmyViewInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TArmyViewInfo)
}

void TArmyViewInfo::InitAsDefaultInstance() {
}

TArmyViewInfo::TArmyViewInfo(const TArmyViewInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TArmyViewInfo)
}

void TArmyViewInfo::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TArmyViewInfo::~TArmyViewInfo() {
  // @@protoc_insertion_point(destructor:pb.TArmyViewInfo)
  SharedDtor();
}

void TArmyViewInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TArmyViewInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TArmyViewInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TArmyViewInfo_descriptor_;
}

const TArmyViewInfo& TArmyViewInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fArenaHighOrder_2eproto();
  return *default_instance_;
}

TArmyViewInfo* TArmyViewInfo::default_instance_ = NULL;

TArmyViewInfo* TArmyViewInfo::New() const {
  return new TArmyViewInfo;
}

void TArmyViewInfo::Clear() {
  unitarr_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TArmyViewInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TArmyViewInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .pb.TUnitViewInfo UnitArr = 1;
      case 1: {
        if (tag == 10) {
         parse_UnitArr:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_unitarr()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_UnitArr;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TArmyViewInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TArmyViewInfo)
  return false;
#undef DO_
}

void TArmyViewInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TArmyViewInfo)
  // repeated .pb.TUnitViewInfo UnitArr = 1;
  for (int i = 0; i < this->unitarr_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->unitarr(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TArmyViewInfo)
}

::google::protobuf::uint8* TArmyViewInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TArmyViewInfo)
  // repeated .pb.TUnitViewInfo UnitArr = 1;
  for (int i = 0; i < this->unitarr_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->unitarr(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TArmyViewInfo)
  return target;
}

int TArmyViewInfo::ByteSize() const {
  int total_size = 0;

  // repeated .pb.TUnitViewInfo UnitArr = 1;
  total_size += 1 * this->unitarr_size();
  for (int i = 0; i < this->unitarr_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->unitarr(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TArmyViewInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TArmyViewInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TArmyViewInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TArmyViewInfo::MergeFrom(const TArmyViewInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  unitarr_.MergeFrom(from.unitarr_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TArmyViewInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TArmyViewInfo::CopyFrom(const TArmyViewInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TArmyViewInfo::IsInitialized() const {

  if (!::google::protobuf::internal::AllAreInitialized(this->unitarr())) return false;
  return true;
}

void TArmyViewInfo::Swap(TArmyViewInfo* other) {
  if (other != this) {
    unitarr_.Swap(&other->unitarr_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TArmyViewInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TArmyViewInfo_descriptor_;
  metadata.reflection = TArmyViewInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TArenaHighOrderFormationRecord::kFormationIdFieldNumber;
const int TArenaHighOrderFormationRecord::kRecordIdFieldNumber;
const int TArenaHighOrderFormationRecord::kIsWinFieldNumber;
const int TArenaHighOrderFormationRecord::kArmy1ArrFieldNumber;
const int TArenaHighOrderFormationRecord::kArmy2ArrFieldNumber;
#endif  // !_MSC_VER

TArenaHighOrderFormationRecord::TArenaHighOrderFormationRecord()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TArenaHighOrderFormationRecord)
}

void TArenaHighOrderFormationRecord::InitAsDefaultInstance() {
}

TArenaHighOrderFormationRecord::TArenaHighOrderFormationRecord(const TArenaHighOrderFormationRecord& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TArenaHighOrderFormationRecord)
}

void TArenaHighOrderFormationRecord::SharedCtor() {
  _cached_size_ = 0;
  formationid_ = 0u;
  recordid_ = GOOGLE_ULONGLONG(0);
  iswin_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TArenaHighOrderFormationRecord::~TArenaHighOrderFormationRecord() {
  // @@protoc_insertion_point(destructor:pb.TArenaHighOrderFormationRecord)
  SharedDtor();
}

void TArenaHighOrderFormationRecord::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TArenaHighOrderFormationRecord::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TArenaHighOrderFormationRecord::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TArenaHighOrderFormationRecord_descriptor_;
}

const TArenaHighOrderFormationRecord& TArenaHighOrderFormationRecord::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fArenaHighOrder_2eproto();
  return *default_instance_;
}

TArenaHighOrderFormationRecord* TArenaHighOrderFormationRecord::default_instance_ = NULL;

TArenaHighOrderFormationRecord* TArenaHighOrderFormationRecord::New() const {
  return new TArenaHighOrderFormationRecord;
}

void TArenaHighOrderFormationRecord::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<TArenaHighOrderFormationRecord*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(recordid_, iswin_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  army1arr_.Clear();
  army2arr_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TArenaHighOrderFormationRecord::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TArenaHighOrderFormationRecord)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 FormationId = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &formationid_)));
          set_has_formationid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_RecordId;
        break;
      }

      // optional uint64 RecordId = 2;
      case 2: {
        if (tag == 16) {
         parse_RecordId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &recordid_)));
          set_has_recordid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_IsWin;
        break;
      }

      // optional bool IsWin = 3;
      case 3: {
        if (tag == 24) {
         parse_IsWin:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &iswin_)));
          set_has_iswin();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_Army1Arr;
        break;
      }

      // repeated .pb.TArmyViewInfo Army1Arr = 4;
      case 4: {
        if (tag == 34) {
         parse_Army1Arr:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_army1arr()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_Army1Arr;
        if (input->ExpectTag(42)) goto parse_Army2Arr;
        break;
      }

      // repeated .pb.TArmyViewInfo Army2Arr = 5;
      case 5: {
        if (tag == 42) {
         parse_Army2Arr:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_army2arr()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_Army2Arr;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TArenaHighOrderFormationRecord)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TArenaHighOrderFormationRecord)
  return false;
#undef DO_
}

void TArenaHighOrderFormationRecord::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TArenaHighOrderFormationRecord)
  // optional uint32 FormationId = 1;
  if (has_formationid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->formationid(), output);
  }

  // optional uint64 RecordId = 2;
  if (has_recordid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->recordid(), output);
  }

  // optional bool IsWin = 3;
  if (has_iswin()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->iswin(), output);
  }

  // repeated .pb.TArmyViewInfo Army1Arr = 4;
  for (int i = 0; i < this->army1arr_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->army1arr(i), output);
  }

  // repeated .pb.TArmyViewInfo Army2Arr = 5;
  for (int i = 0; i < this->army2arr_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->army2arr(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TArenaHighOrderFormationRecord)
}

::google::protobuf::uint8* TArenaHighOrderFormationRecord::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TArenaHighOrderFormationRecord)
  // optional uint32 FormationId = 1;
  if (has_formationid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->formationid(), target);
  }

  // optional uint64 RecordId = 2;
  if (has_recordid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->recordid(), target);
  }

  // optional bool IsWin = 3;
  if (has_iswin()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->iswin(), target);
  }

  // repeated .pb.TArmyViewInfo Army1Arr = 4;
  for (int i = 0; i < this->army1arr_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->army1arr(i), target);
  }

  // repeated .pb.TArmyViewInfo Army2Arr = 5;
  for (int i = 0; i < this->army2arr_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->army2arr(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TArenaHighOrderFormationRecord)
  return target;
}

int TArenaHighOrderFormationRecord::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 FormationId = 1;
    if (has_formationid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->formationid());
    }

    // optional uint64 RecordId = 2;
    if (has_recordid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->recordid());
    }

    // optional bool IsWin = 3;
    if (has_iswin()) {
      total_size += 1 + 1;
    }

  }
  // repeated .pb.TArmyViewInfo Army1Arr = 4;
  total_size += 1 * this->army1arr_size();
  for (int i = 0; i < this->army1arr_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->army1arr(i));
  }

  // repeated .pb.TArmyViewInfo Army2Arr = 5;
  total_size += 1 * this->army2arr_size();
  for (int i = 0; i < this->army2arr_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->army2arr(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TArenaHighOrderFormationRecord::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TArenaHighOrderFormationRecord* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TArenaHighOrderFormationRecord*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TArenaHighOrderFormationRecord::MergeFrom(const TArenaHighOrderFormationRecord& from) {
  GOOGLE_CHECK_NE(&from, this);
  army1arr_.MergeFrom(from.army1arr_);
  army2arr_.MergeFrom(from.army2arr_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_formationid()) {
      set_formationid(from.formationid());
    }
    if (from.has_recordid()) {
      set_recordid(from.recordid());
    }
    if (from.has_iswin()) {
      set_iswin(from.iswin());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TArenaHighOrderFormationRecord::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TArenaHighOrderFormationRecord::CopyFrom(const TArenaHighOrderFormationRecord& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TArenaHighOrderFormationRecord::IsInitialized() const {

  if (!::google::protobuf::internal::AllAreInitialized(this->army1arr())) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->army2arr())) return false;
  return true;
}

void TArenaHighOrderFormationRecord::Swap(TArenaHighOrderFormationRecord* other) {
  if (other != this) {
    std::swap(formationid_, other->formationid_);
    std::swap(recordid_, other->recordid_);
    std::swap(iswin_, other->iswin_);
    army1arr_.Swap(&other->army1arr_);
    army2arr_.Swap(&other->army2arr_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TArenaHighOrderFormationRecord::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TArenaHighOrderFormationRecord_descriptor_;
  metadata.reflection = TArenaHighOrderFormationRecord_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TArenaHighOrderRecordInfo::kAttackUserInfoFieldNumber;
const int TArenaHighOrderRecordInfo::kDefendUserInfoFieldNumber;
const int TArenaHighOrderRecordInfo::kAttackPosBoforeFieldNumber;
const int TArenaHighOrderRecordInfo::kAttackPosAfterFieldNumber;
const int TArenaHighOrderRecordInfo::kAttackScoresBeforeFieldNumber;
const int TArenaHighOrderRecordInfo::kAttackScoresAfterFieldNumber;
const int TArenaHighOrderRecordInfo::kDefendPosBeforeFieldNumber;
const int TArenaHighOrderRecordInfo::kDefendPosAfterFieldNumber;
const int TArenaHighOrderRecordInfo::kDefendScoresBeforeFieldNumber;
const int TArenaHighOrderRecordInfo::kDefendScoresAfterFieldNumber;
const int TArenaHighOrderRecordInfo::kRecordArrFieldNumber;
const int TArenaHighOrderRecordInfo::kRecordTimeFieldNumber;
const int TArenaHighOrderRecordInfo::kReadTimeFieldNumber;
const int TArenaHighOrderRecordInfo::kAtkServerIdFieldNumber;
const int TArenaHighOrderRecordInfo::kDefServerIdFieldNumber;
#endif  // !_MSC_VER

TArenaHighOrderRecordInfo::TArenaHighOrderRecordInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TArenaHighOrderRecordInfo)
}

void TArenaHighOrderRecordInfo::InitAsDefaultInstance() {
  attackuserinfo_ = const_cast< ::pb::TUserSimpleInfo*>(&::pb::TUserSimpleInfo::default_instance());
  defenduserinfo_ = const_cast< ::pb::TUserSimpleInfo*>(&::pb::TUserSimpleInfo::default_instance());
}

TArenaHighOrderRecordInfo::TArenaHighOrderRecordInfo(const TArenaHighOrderRecordInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TArenaHighOrderRecordInfo)
}

void TArenaHighOrderRecordInfo::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  attackuserinfo_ = NULL;
  defenduserinfo_ = NULL;
  attackposbofore_ = 0u;
  attackposafter_ = 0u;
  attackscoresbefore_ = 0u;
  attackscoresafter_ = 0u;
  defendposbefore_ = 0u;
  defendposafter_ = 0u;
  defendscoresbefore_ = 0u;
  defendscoresafter_ = 0u;
  recordtime_ = GOOGLE_ULONGLONG(0);
  readtime_ = GOOGLE_ULONGLONG(0);
  atkserverid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  defserverid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TArenaHighOrderRecordInfo::~TArenaHighOrderRecordInfo() {
  // @@protoc_insertion_point(destructor:pb.TArenaHighOrderRecordInfo)
  SharedDtor();
}

void TArenaHighOrderRecordInfo::SharedDtor() {
  if (atkserverid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete atkserverid_;
  }
  if (defserverid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete defserverid_;
  }
  if (this != default_instance_) {
    delete attackuserinfo_;
    delete defenduserinfo_;
  }
}

void TArenaHighOrderRecordInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TArenaHighOrderRecordInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TArenaHighOrderRecordInfo_descriptor_;
}

const TArenaHighOrderRecordInfo& TArenaHighOrderRecordInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fArenaHighOrder_2eproto();
  return *default_instance_;
}

TArenaHighOrderRecordInfo* TArenaHighOrderRecordInfo::default_instance_ = NULL;

TArenaHighOrderRecordInfo* TArenaHighOrderRecordInfo::New() const {
  return new TArenaHighOrderRecordInfo;
}

void TArenaHighOrderRecordInfo::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<TArenaHighOrderRecordInfo*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(attackposbofore_, defendposafter_);
    if (has_attackuserinfo()) {
      if (attackuserinfo_ != NULL) attackuserinfo_->::pb::TUserSimpleInfo::Clear();
    }
    if (has_defenduserinfo()) {
      if (defenduserinfo_ != NULL) defenduserinfo_->::pb::TUserSimpleInfo::Clear();
    }
  }
  if (_has_bits_[8 / 32] & 31488) {
    ZR_(defendscoresbefore_, defendscoresafter_);
    ZR_(recordtime_, readtime_);
    if (has_atkserverid()) {
      if (atkserverid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        atkserverid_->clear();
      }
    }
    if (has_defserverid()) {
      if (defserverid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        defserverid_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  recordarr_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TArenaHighOrderRecordInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TArenaHighOrderRecordInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .pb.TUserSimpleInfo AttackUserInfo = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_attackuserinfo()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_DefendUserInfo;
        break;
      }

      // optional .pb.TUserSimpleInfo DefendUserInfo = 2;
      case 2: {
        if (tag == 18) {
         parse_DefendUserInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_defenduserinfo()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_AttackPosBofore;
        break;
      }

      // optional uint32 AttackPosBofore = 3;
      case 3: {
        if (tag == 24) {
         parse_AttackPosBofore:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &attackposbofore_)));
          set_has_attackposbofore();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_AttackPosAfter;
        break;
      }

      // optional uint32 AttackPosAfter = 4;
      case 4: {
        if (tag == 32) {
         parse_AttackPosAfter:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &attackposafter_)));
          set_has_attackposafter();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_AttackScoresBefore;
        break;
      }

      // optional uint32 AttackScoresBefore = 5;
      case 5: {
        if (tag == 40) {
         parse_AttackScoresBefore:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &attackscoresbefore_)));
          set_has_attackscoresbefore();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_AttackScoresAfter;
        break;
      }

      // optional uint32 AttackScoresAfter = 6;
      case 6: {
        if (tag == 48) {
         parse_AttackScoresAfter:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &attackscoresafter_)));
          set_has_attackscoresafter();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_DefendPosBefore;
        break;
      }

      // optional uint32 DefendPosBefore = 7;
      case 7: {
        if (tag == 56) {
         parse_DefendPosBefore:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &defendposbefore_)));
          set_has_defendposbefore();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_DefendPosAfter;
        break;
      }

      // optional uint32 DefendPosAfter = 8;
      case 8: {
        if (tag == 64) {
         parse_DefendPosAfter:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &defendposafter_)));
          set_has_defendposafter();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_DefendScoresBefore;
        break;
      }

      // optional uint32 DefendScoresBefore = 9;
      case 9: {
        if (tag == 72) {
         parse_DefendScoresBefore:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &defendscoresbefore_)));
          set_has_defendscoresbefore();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(80)) goto parse_DefendScoresAfter;
        break;
      }

      // optional uint32 DefendScoresAfter = 10;
      case 10: {
        if (tag == 80) {
         parse_DefendScoresAfter:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &defendscoresafter_)));
          set_has_defendscoresafter();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(90)) goto parse_RecordArr;
        break;
      }

      // repeated .pb.TArenaHighOrderFormationRecord RecordArr = 11;
      case 11: {
        if (tag == 90) {
         parse_RecordArr:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_recordarr()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(90)) goto parse_RecordArr;
        if (input->ExpectTag(96)) goto parse_RecordTime;
        break;
      }

      // optional uint64 RecordTime = 12;
      case 12: {
        if (tag == 96) {
         parse_RecordTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &recordtime_)));
          set_has_recordtime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(104)) goto parse_ReadTime;
        break;
      }

      // optional uint64 ReadTime = 13;
      case 13: {
        if (tag == 104) {
         parse_ReadTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &readtime_)));
          set_has_readtime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(114)) goto parse_AtkServerId;
        break;
      }

      // optional string AtkServerId = 14;
      case 14: {
        if (tag == 114) {
         parse_AtkServerId:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_atkserverid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->atkserverid().data(), this->atkserverid().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "atkserverid");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(122)) goto parse_DefServerId;
        break;
      }

      // optional string DefServerId = 15;
      case 15: {
        if (tag == 122) {
         parse_DefServerId:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_defserverid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->defserverid().data(), this->defserverid().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "defserverid");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TArenaHighOrderRecordInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TArenaHighOrderRecordInfo)
  return false;
#undef DO_
}

void TArenaHighOrderRecordInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TArenaHighOrderRecordInfo)
  // optional .pb.TUserSimpleInfo AttackUserInfo = 1;
  if (has_attackuserinfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->attackuserinfo(), output);
  }

  // optional .pb.TUserSimpleInfo DefendUserInfo = 2;
  if (has_defenduserinfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->defenduserinfo(), output);
  }

  // optional uint32 AttackPosBofore = 3;
  if (has_attackposbofore()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->attackposbofore(), output);
  }

  // optional uint32 AttackPosAfter = 4;
  if (has_attackposafter()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->attackposafter(), output);
  }

  // optional uint32 AttackScoresBefore = 5;
  if (has_attackscoresbefore()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->attackscoresbefore(), output);
  }

  // optional uint32 AttackScoresAfter = 6;
  if (has_attackscoresafter()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->attackscoresafter(), output);
  }

  // optional uint32 DefendPosBefore = 7;
  if (has_defendposbefore()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->defendposbefore(), output);
  }

  // optional uint32 DefendPosAfter = 8;
  if (has_defendposafter()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->defendposafter(), output);
  }

  // optional uint32 DefendScoresBefore = 9;
  if (has_defendscoresbefore()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->defendscoresbefore(), output);
  }

  // optional uint32 DefendScoresAfter = 10;
  if (has_defendscoresafter()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->defendscoresafter(), output);
  }

  // repeated .pb.TArenaHighOrderFormationRecord RecordArr = 11;
  for (int i = 0; i < this->recordarr_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      11, this->recordarr(i), output);
  }

  // optional uint64 RecordTime = 12;
  if (has_recordtime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(12, this->recordtime(), output);
  }

  // optional uint64 ReadTime = 13;
  if (has_readtime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(13, this->readtime(), output);
  }

  // optional string AtkServerId = 14;
  if (has_atkserverid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->atkserverid().data(), this->atkserverid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "atkserverid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      14, this->atkserverid(), output);
  }

  // optional string DefServerId = 15;
  if (has_defserverid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->defserverid().data(), this->defserverid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "defserverid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      15, this->defserverid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TArenaHighOrderRecordInfo)
}

::google::protobuf::uint8* TArenaHighOrderRecordInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TArenaHighOrderRecordInfo)
  // optional .pb.TUserSimpleInfo AttackUserInfo = 1;
  if (has_attackuserinfo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->attackuserinfo(), target);
  }

  // optional .pb.TUserSimpleInfo DefendUserInfo = 2;
  if (has_defenduserinfo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->defenduserinfo(), target);
  }

  // optional uint32 AttackPosBofore = 3;
  if (has_attackposbofore()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->attackposbofore(), target);
  }

  // optional uint32 AttackPosAfter = 4;
  if (has_attackposafter()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->attackposafter(), target);
  }

  // optional uint32 AttackScoresBefore = 5;
  if (has_attackscoresbefore()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->attackscoresbefore(), target);
  }

  // optional uint32 AttackScoresAfter = 6;
  if (has_attackscoresafter()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->attackscoresafter(), target);
  }

  // optional uint32 DefendPosBefore = 7;
  if (has_defendposbefore()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->defendposbefore(), target);
  }

  // optional uint32 DefendPosAfter = 8;
  if (has_defendposafter()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->defendposafter(), target);
  }

  // optional uint32 DefendScoresBefore = 9;
  if (has_defendscoresbefore()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->defendscoresbefore(), target);
  }

  // optional uint32 DefendScoresAfter = 10;
  if (has_defendscoresafter()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(10, this->defendscoresafter(), target);
  }

  // repeated .pb.TArenaHighOrderFormationRecord RecordArr = 11;
  for (int i = 0; i < this->recordarr_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        11, this->recordarr(i), target);
  }

  // optional uint64 RecordTime = 12;
  if (has_recordtime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(12, this->recordtime(), target);
  }

  // optional uint64 ReadTime = 13;
  if (has_readtime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(13, this->readtime(), target);
  }

  // optional string AtkServerId = 14;
  if (has_atkserverid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->atkserverid().data(), this->atkserverid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "atkserverid");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        14, this->atkserverid(), target);
  }

  // optional string DefServerId = 15;
  if (has_defserverid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->defserverid().data(), this->defserverid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "defserverid");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        15, this->defserverid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TArenaHighOrderRecordInfo)
  return target;
}

int TArenaHighOrderRecordInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .pb.TUserSimpleInfo AttackUserInfo = 1;
    if (has_attackuserinfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->attackuserinfo());
    }

    // optional .pb.TUserSimpleInfo DefendUserInfo = 2;
    if (has_defenduserinfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->defenduserinfo());
    }

    // optional uint32 AttackPosBofore = 3;
    if (has_attackposbofore()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->attackposbofore());
    }

    // optional uint32 AttackPosAfter = 4;
    if (has_attackposafter()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->attackposafter());
    }

    // optional uint32 AttackScoresBefore = 5;
    if (has_attackscoresbefore()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->attackscoresbefore());
    }

    // optional uint32 AttackScoresAfter = 6;
    if (has_attackscoresafter()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->attackscoresafter());
    }

    // optional uint32 DefendPosBefore = 7;
    if (has_defendposbefore()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->defendposbefore());
    }

    // optional uint32 DefendPosAfter = 8;
    if (has_defendposafter()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->defendposafter());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional uint32 DefendScoresBefore = 9;
    if (has_defendscoresbefore()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->defendscoresbefore());
    }

    // optional uint32 DefendScoresAfter = 10;
    if (has_defendscoresafter()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->defendscoresafter());
    }

    // optional uint64 RecordTime = 12;
    if (has_recordtime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->recordtime());
    }

    // optional uint64 ReadTime = 13;
    if (has_readtime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->readtime());
    }

    // optional string AtkServerId = 14;
    if (has_atkserverid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->atkserverid());
    }

    // optional string DefServerId = 15;
    if (has_defserverid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->defserverid());
    }

  }
  // repeated .pb.TArenaHighOrderFormationRecord RecordArr = 11;
  total_size += 1 * this->recordarr_size();
  for (int i = 0; i < this->recordarr_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->recordarr(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TArenaHighOrderRecordInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TArenaHighOrderRecordInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TArenaHighOrderRecordInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TArenaHighOrderRecordInfo::MergeFrom(const TArenaHighOrderRecordInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  recordarr_.MergeFrom(from.recordarr_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_attackuserinfo()) {
      mutable_attackuserinfo()->::pb::TUserSimpleInfo::MergeFrom(from.attackuserinfo());
    }
    if (from.has_defenduserinfo()) {
      mutable_defenduserinfo()->::pb::TUserSimpleInfo::MergeFrom(from.defenduserinfo());
    }
    if (from.has_attackposbofore()) {
      set_attackposbofore(from.attackposbofore());
    }
    if (from.has_attackposafter()) {
      set_attackposafter(from.attackposafter());
    }
    if (from.has_attackscoresbefore()) {
      set_attackscoresbefore(from.attackscoresbefore());
    }
    if (from.has_attackscoresafter()) {
      set_attackscoresafter(from.attackscoresafter());
    }
    if (from.has_defendposbefore()) {
      set_defendposbefore(from.defendposbefore());
    }
    if (from.has_defendposafter()) {
      set_defendposafter(from.defendposafter());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_defendscoresbefore()) {
      set_defendscoresbefore(from.defendscoresbefore());
    }
    if (from.has_defendscoresafter()) {
      set_defendscoresafter(from.defendscoresafter());
    }
    if (from.has_recordtime()) {
      set_recordtime(from.recordtime());
    }
    if (from.has_readtime()) {
      set_readtime(from.readtime());
    }
    if (from.has_atkserverid()) {
      set_atkserverid(from.atkserverid());
    }
    if (from.has_defserverid()) {
      set_defserverid(from.defserverid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TArenaHighOrderRecordInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TArenaHighOrderRecordInfo::CopyFrom(const TArenaHighOrderRecordInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TArenaHighOrderRecordInfo::IsInitialized() const {

  if (!::google::protobuf::internal::AllAreInitialized(this->recordarr())) return false;
  return true;
}

void TArenaHighOrderRecordInfo::Swap(TArenaHighOrderRecordInfo* other) {
  if (other != this) {
    std::swap(attackuserinfo_, other->attackuserinfo_);
    std::swap(defenduserinfo_, other->defenduserinfo_);
    std::swap(attackposbofore_, other->attackposbofore_);
    std::swap(attackposafter_, other->attackposafter_);
    std::swap(attackscoresbefore_, other->attackscoresbefore_);
    std::swap(attackscoresafter_, other->attackscoresafter_);
    std::swap(defendposbefore_, other->defendposbefore_);
    std::swap(defendposafter_, other->defendposafter_);
    std::swap(defendscoresbefore_, other->defendscoresbefore_);
    std::swap(defendscoresafter_, other->defendscoresafter_);
    recordarr_.Swap(&other->recordarr_);
    std::swap(recordtime_, other->recordtime_);
    std::swap(readtime_, other->readtime_);
    std::swap(atkserverid_, other->atkserverid_);
    std::swap(defserverid_, other->defserverid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TArenaHighOrderRecordInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TArenaHighOrderRecordInfo_descriptor_;
  metadata.reflection = TArenaHighOrderRecordInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TArenaHighOrderGetBattleRecordReq::kOffsetFieldNumber;
const int TArenaHighOrderGetBattleRecordReq::kLimitFieldNumber;
#endif  // !_MSC_VER

TArenaHighOrderGetBattleRecordReq::TArenaHighOrderGetBattleRecordReq()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TArenaHighOrderGetBattleRecordReq)
}

void TArenaHighOrderGetBattleRecordReq::InitAsDefaultInstance() {
}

TArenaHighOrderGetBattleRecordReq::TArenaHighOrderGetBattleRecordReq(const TArenaHighOrderGetBattleRecordReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TArenaHighOrderGetBattleRecordReq)
}

void TArenaHighOrderGetBattleRecordReq::SharedCtor() {
  _cached_size_ = 0;
  offset_ = 0u;
  limit_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TArenaHighOrderGetBattleRecordReq::~TArenaHighOrderGetBattleRecordReq() {
  // @@protoc_insertion_point(destructor:pb.TArenaHighOrderGetBattleRecordReq)
  SharedDtor();
}

void TArenaHighOrderGetBattleRecordReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TArenaHighOrderGetBattleRecordReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TArenaHighOrderGetBattleRecordReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TArenaHighOrderGetBattleRecordReq_descriptor_;
}

const TArenaHighOrderGetBattleRecordReq& TArenaHighOrderGetBattleRecordReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fArenaHighOrder_2eproto();
  return *default_instance_;
}

TArenaHighOrderGetBattleRecordReq* TArenaHighOrderGetBattleRecordReq::default_instance_ = NULL;

TArenaHighOrderGetBattleRecordReq* TArenaHighOrderGetBattleRecordReq::New() const {
  return new TArenaHighOrderGetBattleRecordReq;
}

void TArenaHighOrderGetBattleRecordReq::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<TArenaHighOrderGetBattleRecordReq*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(offset_, limit_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TArenaHighOrderGetBattleRecordReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TArenaHighOrderGetBattleRecordReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 Offset = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &offset_)));
          set_has_offset();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_Limit;
        break;
      }

      // optional uint32 Limit = 2;
      case 2: {
        if (tag == 16) {
         parse_Limit:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &limit_)));
          set_has_limit();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TArenaHighOrderGetBattleRecordReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TArenaHighOrderGetBattleRecordReq)
  return false;
#undef DO_
}

void TArenaHighOrderGetBattleRecordReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TArenaHighOrderGetBattleRecordReq)
  // optional uint32 Offset = 1;
  if (has_offset()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->offset(), output);
  }

  // optional uint32 Limit = 2;
  if (has_limit()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->limit(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TArenaHighOrderGetBattleRecordReq)
}

::google::protobuf::uint8* TArenaHighOrderGetBattleRecordReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TArenaHighOrderGetBattleRecordReq)
  // optional uint32 Offset = 1;
  if (has_offset()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->offset(), target);
  }

  // optional uint32 Limit = 2;
  if (has_limit()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->limit(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TArenaHighOrderGetBattleRecordReq)
  return target;
}

int TArenaHighOrderGetBattleRecordReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 Offset = 1;
    if (has_offset()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->offset());
    }

    // optional uint32 Limit = 2;
    if (has_limit()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->limit());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TArenaHighOrderGetBattleRecordReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TArenaHighOrderGetBattleRecordReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TArenaHighOrderGetBattleRecordReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TArenaHighOrderGetBattleRecordReq::MergeFrom(const TArenaHighOrderGetBattleRecordReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_offset()) {
      set_offset(from.offset());
    }
    if (from.has_limit()) {
      set_limit(from.limit());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TArenaHighOrderGetBattleRecordReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TArenaHighOrderGetBattleRecordReq::CopyFrom(const TArenaHighOrderGetBattleRecordReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TArenaHighOrderGetBattleRecordReq::IsInitialized() const {

  return true;
}

void TArenaHighOrderGetBattleRecordReq::Swap(TArenaHighOrderGetBattleRecordReq* other) {
  if (other != this) {
    std::swap(offset_, other->offset_);
    std::swap(limit_, other->limit_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TArenaHighOrderGetBattleRecordReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TArenaHighOrderGetBattleRecordReq_descriptor_;
  metadata.reflection = TArenaHighOrderGetBattleRecordReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TArenaHighOrderGetBattleRecordRsp::kRecordArrFieldNumber;
#endif  // !_MSC_VER

TArenaHighOrderGetBattleRecordRsp::TArenaHighOrderGetBattleRecordRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TArenaHighOrderGetBattleRecordRsp)
}

void TArenaHighOrderGetBattleRecordRsp::InitAsDefaultInstance() {
}

TArenaHighOrderGetBattleRecordRsp::TArenaHighOrderGetBattleRecordRsp(const TArenaHighOrderGetBattleRecordRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TArenaHighOrderGetBattleRecordRsp)
}

void TArenaHighOrderGetBattleRecordRsp::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TArenaHighOrderGetBattleRecordRsp::~TArenaHighOrderGetBattleRecordRsp() {
  // @@protoc_insertion_point(destructor:pb.TArenaHighOrderGetBattleRecordRsp)
  SharedDtor();
}

void TArenaHighOrderGetBattleRecordRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TArenaHighOrderGetBattleRecordRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TArenaHighOrderGetBattleRecordRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TArenaHighOrderGetBattleRecordRsp_descriptor_;
}

const TArenaHighOrderGetBattleRecordRsp& TArenaHighOrderGetBattleRecordRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fArenaHighOrder_2eproto();
  return *default_instance_;
}

TArenaHighOrderGetBattleRecordRsp* TArenaHighOrderGetBattleRecordRsp::default_instance_ = NULL;

TArenaHighOrderGetBattleRecordRsp* TArenaHighOrderGetBattleRecordRsp::New() const {
  return new TArenaHighOrderGetBattleRecordRsp;
}

void TArenaHighOrderGetBattleRecordRsp::Clear() {
  recordarr_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TArenaHighOrderGetBattleRecordRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TArenaHighOrderGetBattleRecordRsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .pb.TArenaHighOrderRecordInfo RecordArr = 1;
      case 1: {
        if (tag == 10) {
         parse_RecordArr:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_recordarr()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_RecordArr;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TArenaHighOrderGetBattleRecordRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TArenaHighOrderGetBattleRecordRsp)
  return false;
#undef DO_
}

void TArenaHighOrderGetBattleRecordRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TArenaHighOrderGetBattleRecordRsp)
  // repeated .pb.TArenaHighOrderRecordInfo RecordArr = 1;
  for (int i = 0; i < this->recordarr_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->recordarr(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TArenaHighOrderGetBattleRecordRsp)
}

::google::protobuf::uint8* TArenaHighOrderGetBattleRecordRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TArenaHighOrderGetBattleRecordRsp)
  // repeated .pb.TArenaHighOrderRecordInfo RecordArr = 1;
  for (int i = 0; i < this->recordarr_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->recordarr(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TArenaHighOrderGetBattleRecordRsp)
  return target;
}

int TArenaHighOrderGetBattleRecordRsp::ByteSize() const {
  int total_size = 0;

  // repeated .pb.TArenaHighOrderRecordInfo RecordArr = 1;
  total_size += 1 * this->recordarr_size();
  for (int i = 0; i < this->recordarr_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->recordarr(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TArenaHighOrderGetBattleRecordRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TArenaHighOrderGetBattleRecordRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TArenaHighOrderGetBattleRecordRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TArenaHighOrderGetBattleRecordRsp::MergeFrom(const TArenaHighOrderGetBattleRecordRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  recordarr_.MergeFrom(from.recordarr_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TArenaHighOrderGetBattleRecordRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TArenaHighOrderGetBattleRecordRsp::CopyFrom(const TArenaHighOrderGetBattleRecordRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TArenaHighOrderGetBattleRecordRsp::IsInitialized() const {

  if (!::google::protobuf::internal::AllAreInitialized(this->recordarr())) return false;
  return true;
}

void TArenaHighOrderGetBattleRecordRsp::Swap(TArenaHighOrderGetBattleRecordRsp* other) {
  if (other != this) {
    recordarr_.Swap(&other->recordarr_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TArenaHighOrderGetBattleRecordRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TArenaHighOrderGetBattleRecordRsp_descriptor_;
  metadata.reflection = TArenaHighOrderGetBattleRecordRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TArenaHighOrderRankInfo::kUserInfoFieldNumber;
const int TArenaHighOrderRankInfo::kPositionFieldNumber;
const int TArenaHighOrderRankInfo::kScoresFieldNumber;
#endif  // !_MSC_VER

TArenaHighOrderRankInfo::TArenaHighOrderRankInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TArenaHighOrderRankInfo)
}

void TArenaHighOrderRankInfo::InitAsDefaultInstance() {
  userinfo_ = const_cast< ::pb::TUserSimpleInfo*>(&::pb::TUserSimpleInfo::default_instance());
}

TArenaHighOrderRankInfo::TArenaHighOrderRankInfo(const TArenaHighOrderRankInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TArenaHighOrderRankInfo)
}

void TArenaHighOrderRankInfo::SharedCtor() {
  _cached_size_ = 0;
  userinfo_ = NULL;
  position_ = 0u;
  scores_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TArenaHighOrderRankInfo::~TArenaHighOrderRankInfo() {
  // @@protoc_insertion_point(destructor:pb.TArenaHighOrderRankInfo)
  SharedDtor();
}

void TArenaHighOrderRankInfo::SharedDtor() {
  if (this != default_instance_) {
    delete userinfo_;
  }
}

void TArenaHighOrderRankInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TArenaHighOrderRankInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TArenaHighOrderRankInfo_descriptor_;
}

const TArenaHighOrderRankInfo& TArenaHighOrderRankInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fArenaHighOrder_2eproto();
  return *default_instance_;
}

TArenaHighOrderRankInfo* TArenaHighOrderRankInfo::default_instance_ = NULL;

TArenaHighOrderRankInfo* TArenaHighOrderRankInfo::New() const {
  return new TArenaHighOrderRankInfo;
}

void TArenaHighOrderRankInfo::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<TArenaHighOrderRankInfo*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 7) {
    ZR_(position_, scores_);
    if (has_userinfo()) {
      if (userinfo_ != NULL) userinfo_->::pb::TUserSimpleInfo::Clear();
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TArenaHighOrderRankInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TArenaHighOrderRankInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .pb.TUserSimpleInfo UserInfo = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_userinfo()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_Position;
        break;
      }

      // optional uint32 Position = 2;
      case 2: {
        if (tag == 16) {
         parse_Position:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &position_)));
          set_has_position();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_Scores;
        break;
      }

      // optional uint32 Scores = 3;
      case 3: {
        if (tag == 24) {
         parse_Scores:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &scores_)));
          set_has_scores();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TArenaHighOrderRankInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TArenaHighOrderRankInfo)
  return false;
#undef DO_
}

void TArenaHighOrderRankInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TArenaHighOrderRankInfo)
  // optional .pb.TUserSimpleInfo UserInfo = 1;
  if (has_userinfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->userinfo(), output);
  }

  // optional uint32 Position = 2;
  if (has_position()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->position(), output);
  }

  // optional uint32 Scores = 3;
  if (has_scores()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->scores(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TArenaHighOrderRankInfo)
}

::google::protobuf::uint8* TArenaHighOrderRankInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TArenaHighOrderRankInfo)
  // optional .pb.TUserSimpleInfo UserInfo = 1;
  if (has_userinfo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->userinfo(), target);
  }

  // optional uint32 Position = 2;
  if (has_position()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->position(), target);
  }

  // optional uint32 Scores = 3;
  if (has_scores()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->scores(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TArenaHighOrderRankInfo)
  return target;
}

int TArenaHighOrderRankInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .pb.TUserSimpleInfo UserInfo = 1;
    if (has_userinfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->userinfo());
    }

    // optional uint32 Position = 2;
    if (has_position()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->position());
    }

    // optional uint32 Scores = 3;
    if (has_scores()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->scores());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TArenaHighOrderRankInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TArenaHighOrderRankInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TArenaHighOrderRankInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TArenaHighOrderRankInfo::MergeFrom(const TArenaHighOrderRankInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_userinfo()) {
      mutable_userinfo()->::pb::TUserSimpleInfo::MergeFrom(from.userinfo());
    }
    if (from.has_position()) {
      set_position(from.position());
    }
    if (from.has_scores()) {
      set_scores(from.scores());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TArenaHighOrderRankInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TArenaHighOrderRankInfo::CopyFrom(const TArenaHighOrderRankInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TArenaHighOrderRankInfo::IsInitialized() const {

  return true;
}

void TArenaHighOrderRankInfo::Swap(TArenaHighOrderRankInfo* other) {
  if (other != this) {
    std::swap(userinfo_, other->userinfo_);
    std::swap(position_, other->position_);
    std::swap(scores_, other->scores_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TArenaHighOrderRankInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TArenaHighOrderRankInfo_descriptor_;
  metadata.reflection = TArenaHighOrderRankInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TArenaHighOrderGetRankListReq::kOffsetFieldNumber;
const int TArenaHighOrderGetRankListReq::kLimitFieldNumber;
#endif  // !_MSC_VER

TArenaHighOrderGetRankListReq::TArenaHighOrderGetRankListReq()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TArenaHighOrderGetRankListReq)
}

void TArenaHighOrderGetRankListReq::InitAsDefaultInstance() {
}

TArenaHighOrderGetRankListReq::TArenaHighOrderGetRankListReq(const TArenaHighOrderGetRankListReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TArenaHighOrderGetRankListReq)
}

void TArenaHighOrderGetRankListReq::SharedCtor() {
  _cached_size_ = 0;
  offset_ = 0u;
  limit_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TArenaHighOrderGetRankListReq::~TArenaHighOrderGetRankListReq() {
  // @@protoc_insertion_point(destructor:pb.TArenaHighOrderGetRankListReq)
  SharedDtor();
}

void TArenaHighOrderGetRankListReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TArenaHighOrderGetRankListReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TArenaHighOrderGetRankListReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TArenaHighOrderGetRankListReq_descriptor_;
}

const TArenaHighOrderGetRankListReq& TArenaHighOrderGetRankListReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fArenaHighOrder_2eproto();
  return *default_instance_;
}

TArenaHighOrderGetRankListReq* TArenaHighOrderGetRankListReq::default_instance_ = NULL;

TArenaHighOrderGetRankListReq* TArenaHighOrderGetRankListReq::New() const {
  return new TArenaHighOrderGetRankListReq;
}

void TArenaHighOrderGetRankListReq::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<TArenaHighOrderGetRankListReq*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(offset_, limit_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TArenaHighOrderGetRankListReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TArenaHighOrderGetRankListReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 Offset = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &offset_)));
          set_has_offset();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_Limit;
        break;
      }

      // optional uint32 Limit = 2;
      case 2: {
        if (tag == 16) {
         parse_Limit:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &limit_)));
          set_has_limit();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TArenaHighOrderGetRankListReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TArenaHighOrderGetRankListReq)
  return false;
#undef DO_
}

void TArenaHighOrderGetRankListReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TArenaHighOrderGetRankListReq)
  // optional uint32 Offset = 1;
  if (has_offset()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->offset(), output);
  }

  // optional uint32 Limit = 2;
  if (has_limit()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->limit(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TArenaHighOrderGetRankListReq)
}

::google::protobuf::uint8* TArenaHighOrderGetRankListReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TArenaHighOrderGetRankListReq)
  // optional uint32 Offset = 1;
  if (has_offset()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->offset(), target);
  }

  // optional uint32 Limit = 2;
  if (has_limit()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->limit(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TArenaHighOrderGetRankListReq)
  return target;
}

int TArenaHighOrderGetRankListReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 Offset = 1;
    if (has_offset()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->offset());
    }

    // optional uint32 Limit = 2;
    if (has_limit()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->limit());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TArenaHighOrderGetRankListReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TArenaHighOrderGetRankListReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TArenaHighOrderGetRankListReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TArenaHighOrderGetRankListReq::MergeFrom(const TArenaHighOrderGetRankListReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_offset()) {
      set_offset(from.offset());
    }
    if (from.has_limit()) {
      set_limit(from.limit());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TArenaHighOrderGetRankListReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TArenaHighOrderGetRankListReq::CopyFrom(const TArenaHighOrderGetRankListReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TArenaHighOrderGetRankListReq::IsInitialized() const {

  return true;
}

void TArenaHighOrderGetRankListReq::Swap(TArenaHighOrderGetRankListReq* other) {
  if (other != this) {
    std::swap(offset_, other->offset_);
    std::swap(limit_, other->limit_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TArenaHighOrderGetRankListReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TArenaHighOrderGetRankListReq_descriptor_;
  metadata.reflection = TArenaHighOrderGetRankListReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TArenaHighOrderGetRankListRsp::kRankArrFieldNumber;
const int TArenaHighOrderGetRankListRsp::kMyRankFieldNumber;
const int TArenaHighOrderGetRankListRsp::kMyScoresFieldNumber;
#endif  // !_MSC_VER

TArenaHighOrderGetRankListRsp::TArenaHighOrderGetRankListRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TArenaHighOrderGetRankListRsp)
}

void TArenaHighOrderGetRankListRsp::InitAsDefaultInstance() {
}

TArenaHighOrderGetRankListRsp::TArenaHighOrderGetRankListRsp(const TArenaHighOrderGetRankListRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TArenaHighOrderGetRankListRsp)
}

void TArenaHighOrderGetRankListRsp::SharedCtor() {
  _cached_size_ = 0;
  myrank_ = 0;
  myscores_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TArenaHighOrderGetRankListRsp::~TArenaHighOrderGetRankListRsp() {
  // @@protoc_insertion_point(destructor:pb.TArenaHighOrderGetRankListRsp)
  SharedDtor();
}

void TArenaHighOrderGetRankListRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TArenaHighOrderGetRankListRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TArenaHighOrderGetRankListRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TArenaHighOrderGetRankListRsp_descriptor_;
}

const TArenaHighOrderGetRankListRsp& TArenaHighOrderGetRankListRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fArenaHighOrder_2eproto();
  return *default_instance_;
}

TArenaHighOrderGetRankListRsp* TArenaHighOrderGetRankListRsp::default_instance_ = NULL;

TArenaHighOrderGetRankListRsp* TArenaHighOrderGetRankListRsp::New() const {
  return new TArenaHighOrderGetRankListRsp;
}

void TArenaHighOrderGetRankListRsp::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<TArenaHighOrderGetRankListRsp*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(myrank_, myscores_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  rankarr_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TArenaHighOrderGetRankListRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TArenaHighOrderGetRankListRsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .pb.TArenaHighOrderRankInfo RankArr = 1;
      case 1: {
        if (tag == 10) {
         parse_RankArr:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_rankarr()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_RankArr;
        if (input->ExpectTag(16)) goto parse_MyRank;
        break;
      }

      // optional int32 MyRank = 2;
      case 2: {
        if (tag == 16) {
         parse_MyRank:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &myrank_)));
          set_has_myrank();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_MyScores;
        break;
      }

      // optional int32 MyScores = 3;
      case 3: {
        if (tag == 24) {
         parse_MyScores:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &myscores_)));
          set_has_myscores();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TArenaHighOrderGetRankListRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TArenaHighOrderGetRankListRsp)
  return false;
#undef DO_
}

void TArenaHighOrderGetRankListRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TArenaHighOrderGetRankListRsp)
  // repeated .pb.TArenaHighOrderRankInfo RankArr = 1;
  for (int i = 0; i < this->rankarr_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->rankarr(i), output);
  }

  // optional int32 MyRank = 2;
  if (has_myrank()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->myrank(), output);
  }

  // optional int32 MyScores = 3;
  if (has_myscores()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->myscores(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TArenaHighOrderGetRankListRsp)
}

::google::protobuf::uint8* TArenaHighOrderGetRankListRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TArenaHighOrderGetRankListRsp)
  // repeated .pb.TArenaHighOrderRankInfo RankArr = 1;
  for (int i = 0; i < this->rankarr_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->rankarr(i), target);
  }

  // optional int32 MyRank = 2;
  if (has_myrank()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->myrank(), target);
  }

  // optional int32 MyScores = 3;
  if (has_myscores()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->myscores(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TArenaHighOrderGetRankListRsp)
  return target;
}

int TArenaHighOrderGetRankListRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // optional int32 MyRank = 2;
    if (has_myrank()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->myrank());
    }

    // optional int32 MyScores = 3;
    if (has_myscores()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->myscores());
    }

  }
  // repeated .pb.TArenaHighOrderRankInfo RankArr = 1;
  total_size += 1 * this->rankarr_size();
  for (int i = 0; i < this->rankarr_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->rankarr(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TArenaHighOrderGetRankListRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TArenaHighOrderGetRankListRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TArenaHighOrderGetRankListRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TArenaHighOrderGetRankListRsp::MergeFrom(const TArenaHighOrderGetRankListRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  rankarr_.MergeFrom(from.rankarr_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_myrank()) {
      set_myrank(from.myrank());
    }
    if (from.has_myscores()) {
      set_myscores(from.myscores());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TArenaHighOrderGetRankListRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TArenaHighOrderGetRankListRsp::CopyFrom(const TArenaHighOrderGetRankListRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TArenaHighOrderGetRankListRsp::IsInitialized() const {

  return true;
}

void TArenaHighOrderGetRankListRsp::Swap(TArenaHighOrderGetRankListRsp* other) {
  if (other != this) {
    rankarr_.Swap(&other->rankarr_);
    std::swap(myrank_, other->myrank_);
    std::swap(myscores_, other->myscores_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TArenaHighOrderGetRankListRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TArenaHighOrderGetRankListRsp_descriptor_;
  metadata.reflection = TArenaHighOrderGetRankListRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TArenaHighOrderBattleReq::kEnemyUidFieldNumber;
#endif  // !_MSC_VER

TArenaHighOrderBattleReq::TArenaHighOrderBattleReq()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TArenaHighOrderBattleReq)
}

void TArenaHighOrderBattleReq::InitAsDefaultInstance() {
}

TArenaHighOrderBattleReq::TArenaHighOrderBattleReq(const TArenaHighOrderBattleReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TArenaHighOrderBattleReq)
}

void TArenaHighOrderBattleReq::SharedCtor() {
  _cached_size_ = 0;
  enemyuid_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TArenaHighOrderBattleReq::~TArenaHighOrderBattleReq() {
  // @@protoc_insertion_point(destructor:pb.TArenaHighOrderBattleReq)
  SharedDtor();
}

void TArenaHighOrderBattleReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TArenaHighOrderBattleReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TArenaHighOrderBattleReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TArenaHighOrderBattleReq_descriptor_;
}

const TArenaHighOrderBattleReq& TArenaHighOrderBattleReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fArenaHighOrder_2eproto();
  return *default_instance_;
}

TArenaHighOrderBattleReq* TArenaHighOrderBattleReq::default_instance_ = NULL;

TArenaHighOrderBattleReq* TArenaHighOrderBattleReq::New() const {
  return new TArenaHighOrderBattleReq;
}

void TArenaHighOrderBattleReq::Clear() {
  enemyuid_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TArenaHighOrderBattleReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TArenaHighOrderBattleReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 EnemyUid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &enemyuid_)));
          set_has_enemyuid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TArenaHighOrderBattleReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TArenaHighOrderBattleReq)
  return false;
#undef DO_
}

void TArenaHighOrderBattleReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TArenaHighOrderBattleReq)
  // optional uint64 EnemyUid = 1;
  if (has_enemyuid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->enemyuid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TArenaHighOrderBattleReq)
}

::google::protobuf::uint8* TArenaHighOrderBattleReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TArenaHighOrderBattleReq)
  // optional uint64 EnemyUid = 1;
  if (has_enemyuid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->enemyuid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TArenaHighOrderBattleReq)
  return target;
}

int TArenaHighOrderBattleReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 EnemyUid = 1;
    if (has_enemyuid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->enemyuid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TArenaHighOrderBattleReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TArenaHighOrderBattleReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TArenaHighOrderBattleReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TArenaHighOrderBattleReq::MergeFrom(const TArenaHighOrderBattleReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_enemyuid()) {
      set_enemyuid(from.enemyuid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TArenaHighOrderBattleReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TArenaHighOrderBattleReq::CopyFrom(const TArenaHighOrderBattleReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TArenaHighOrderBattleReq::IsInitialized() const {

  return true;
}

void TArenaHighOrderBattleReq::Swap(TArenaHighOrderBattleReq* other) {
  if (other != this) {
    std::swap(enemyuid_, other->enemyuid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TArenaHighOrderBattleReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TArenaHighOrderBattleReq_descriptor_;
  metadata.reflection = TArenaHighOrderBattleReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TArenaHighOrderBattleRsp::kBattleRecordInfoFieldNumber;
const int TArenaHighOrderBattleRsp::kDropArrayFieldNumber;
const int TArenaHighOrderBattleRsp::kExtraAtkNumFieldNumber;
const int TArenaHighOrderBattleRsp::kFirstResultInfoFieldNumber;
#endif  // !_MSC_VER

TArenaHighOrderBattleRsp::TArenaHighOrderBattleRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TArenaHighOrderBattleRsp)
}

void TArenaHighOrderBattleRsp::InitAsDefaultInstance() {
  battlerecordinfo_ = const_cast< ::pb::TArenaHighOrderRecordInfo*>(&::pb::TArenaHighOrderRecordInfo::default_instance());
}

TArenaHighOrderBattleRsp::TArenaHighOrderBattleRsp(const TArenaHighOrderBattleRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TArenaHighOrderBattleRsp)
}

void TArenaHighOrderBattleRsp::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  battlerecordinfo_ = NULL;
  extraatknum_ = 0u;
  firstresultinfo_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TArenaHighOrderBattleRsp::~TArenaHighOrderBattleRsp() {
  // @@protoc_insertion_point(destructor:pb.TArenaHighOrderBattleRsp)
  SharedDtor();
}

void TArenaHighOrderBattleRsp::SharedDtor() {
  if (firstresultinfo_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete firstresultinfo_;
  }
  if (this != default_instance_) {
    delete battlerecordinfo_;
  }
}

void TArenaHighOrderBattleRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TArenaHighOrderBattleRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TArenaHighOrderBattleRsp_descriptor_;
}

const TArenaHighOrderBattleRsp& TArenaHighOrderBattleRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fArenaHighOrder_2eproto();
  return *default_instance_;
}

TArenaHighOrderBattleRsp* TArenaHighOrderBattleRsp::default_instance_ = NULL;

TArenaHighOrderBattleRsp* TArenaHighOrderBattleRsp::New() const {
  return new TArenaHighOrderBattleRsp;
}

void TArenaHighOrderBattleRsp::Clear() {
  if (_has_bits_[0 / 32] & 13) {
    if (has_battlerecordinfo()) {
      if (battlerecordinfo_ != NULL) battlerecordinfo_->::pb::TArenaHighOrderRecordInfo::Clear();
    }
    extraatknum_ = 0u;
    if (has_firstresultinfo()) {
      if (firstresultinfo_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        firstresultinfo_->clear();
      }
    }
  }
  droparray_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TArenaHighOrderBattleRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TArenaHighOrderBattleRsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .pb.TArenaHighOrderRecordInfo BattleRecordInfo = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_battlerecordinfo()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_DropArray;
        break;
      }

      // repeated .pb.TCommonReward DropArray = 2;
      case 2: {
        if (tag == 18) {
         parse_DropArray:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_droparray()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_DropArray;
        if (input->ExpectTag(24)) goto parse_ExtraAtkNum;
        break;
      }

      // optional uint32 ExtraAtkNum = 3;
      case 3: {
        if (tag == 24) {
         parse_ExtraAtkNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &extraatknum_)));
          set_has_extraatknum();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_FirstResultInfo;
        break;
      }

      // optional bytes FirstResultInfo = 4;
      case 4: {
        if (tag == 34) {
         parse_FirstResultInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_firstresultinfo()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TArenaHighOrderBattleRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TArenaHighOrderBattleRsp)
  return false;
#undef DO_
}

void TArenaHighOrderBattleRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TArenaHighOrderBattleRsp)
  // optional .pb.TArenaHighOrderRecordInfo BattleRecordInfo = 1;
  if (has_battlerecordinfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->battlerecordinfo(), output);
  }

  // repeated .pb.TCommonReward DropArray = 2;
  for (int i = 0; i < this->droparray_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->droparray(i), output);
  }

  // optional uint32 ExtraAtkNum = 3;
  if (has_extraatknum()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->extraatknum(), output);
  }

  // optional bytes FirstResultInfo = 4;
  if (has_firstresultinfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      4, this->firstresultinfo(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TArenaHighOrderBattleRsp)
}

::google::protobuf::uint8* TArenaHighOrderBattleRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TArenaHighOrderBattleRsp)
  // optional .pb.TArenaHighOrderRecordInfo BattleRecordInfo = 1;
  if (has_battlerecordinfo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->battlerecordinfo(), target);
  }

  // repeated .pb.TCommonReward DropArray = 2;
  for (int i = 0; i < this->droparray_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->droparray(i), target);
  }

  // optional uint32 ExtraAtkNum = 3;
  if (has_extraatknum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->extraatknum(), target);
  }

  // optional bytes FirstResultInfo = 4;
  if (has_firstresultinfo()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        4, this->firstresultinfo(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TArenaHighOrderBattleRsp)
  return target;
}

int TArenaHighOrderBattleRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .pb.TArenaHighOrderRecordInfo BattleRecordInfo = 1;
    if (has_battlerecordinfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->battlerecordinfo());
    }

    // optional uint32 ExtraAtkNum = 3;
    if (has_extraatknum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->extraatknum());
    }

    // optional bytes FirstResultInfo = 4;
    if (has_firstresultinfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->firstresultinfo());
    }

  }
  // repeated .pb.TCommonReward DropArray = 2;
  total_size += 1 * this->droparray_size();
  for (int i = 0; i < this->droparray_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->droparray(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TArenaHighOrderBattleRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TArenaHighOrderBattleRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TArenaHighOrderBattleRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TArenaHighOrderBattleRsp::MergeFrom(const TArenaHighOrderBattleRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  droparray_.MergeFrom(from.droparray_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_battlerecordinfo()) {
      mutable_battlerecordinfo()->::pb::TArenaHighOrderRecordInfo::MergeFrom(from.battlerecordinfo());
    }
    if (from.has_extraatknum()) {
      set_extraatknum(from.extraatknum());
    }
    if (from.has_firstresultinfo()) {
      set_firstresultinfo(from.firstresultinfo());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TArenaHighOrderBattleRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TArenaHighOrderBattleRsp::CopyFrom(const TArenaHighOrderBattleRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TArenaHighOrderBattleRsp::IsInitialized() const {

  if (has_battlerecordinfo()) {
    if (!this->battlerecordinfo().IsInitialized()) return false;
  }
  return true;
}

void TArenaHighOrderBattleRsp::Swap(TArenaHighOrderBattleRsp* other) {
  if (other != this) {
    std::swap(battlerecordinfo_, other->battlerecordinfo_);
    droparray_.Swap(&other->droparray_);
    std::swap(extraatknum_, other->extraatknum_);
    std::swap(firstresultinfo_, other->firstresultinfo_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TArenaHighOrderBattleRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TArenaHighOrderBattleRsp_descriptor_;
  metadata.reflection = TArenaHighOrderBattleRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TArenaHighOrderGetSimpleBattleReportReq::kServerIdFieldNumber;
const int TArenaHighOrderGetSimpleBattleReportReq::kRidArrFieldNumber;
#endif  // !_MSC_VER

TArenaHighOrderGetSimpleBattleReportReq::TArenaHighOrderGetSimpleBattleReportReq()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TArenaHighOrderGetSimpleBattleReportReq)
}

void TArenaHighOrderGetSimpleBattleReportReq::InitAsDefaultInstance() {
}

TArenaHighOrderGetSimpleBattleReportReq::TArenaHighOrderGetSimpleBattleReportReq(const TArenaHighOrderGetSimpleBattleReportReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TArenaHighOrderGetSimpleBattleReportReq)
}

void TArenaHighOrderGetSimpleBattleReportReq::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  serverid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TArenaHighOrderGetSimpleBattleReportReq::~TArenaHighOrderGetSimpleBattleReportReq() {
  // @@protoc_insertion_point(destructor:pb.TArenaHighOrderGetSimpleBattleReportReq)
  SharedDtor();
}

void TArenaHighOrderGetSimpleBattleReportReq::SharedDtor() {
  if (serverid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete serverid_;
  }
  if (this != default_instance_) {
  }
}

void TArenaHighOrderGetSimpleBattleReportReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TArenaHighOrderGetSimpleBattleReportReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TArenaHighOrderGetSimpleBattleReportReq_descriptor_;
}

const TArenaHighOrderGetSimpleBattleReportReq& TArenaHighOrderGetSimpleBattleReportReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fArenaHighOrder_2eproto();
  return *default_instance_;
}

TArenaHighOrderGetSimpleBattleReportReq* TArenaHighOrderGetSimpleBattleReportReq::default_instance_ = NULL;

TArenaHighOrderGetSimpleBattleReportReq* TArenaHighOrderGetSimpleBattleReportReq::New() const {
  return new TArenaHighOrderGetSimpleBattleReportReq;
}

void TArenaHighOrderGetSimpleBattleReportReq::Clear() {
  if (has_serverid()) {
    if (serverid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
      serverid_->clear();
    }
  }
  ridarr_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TArenaHighOrderGetSimpleBattleReportReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TArenaHighOrderGetSimpleBattleReportReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string ServerId = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_serverid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->serverid().data(), this->serverid().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "serverid");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_RidArr;
        break;
      }

      // repeated uint64 RidArr = 2;
      case 2: {
        if (tag == 16) {
         parse_RidArr:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 1, 16, input, this->mutable_ridarr())));
        } else if (tag == 18) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, this->mutable_ridarr())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_RidArr;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TArenaHighOrderGetSimpleBattleReportReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TArenaHighOrderGetSimpleBattleReportReq)
  return false;
#undef DO_
}

void TArenaHighOrderGetSimpleBattleReportReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TArenaHighOrderGetSimpleBattleReportReq)
  // optional string ServerId = 1;
  if (has_serverid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->serverid().data(), this->serverid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "serverid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->serverid(), output);
  }

  // repeated uint64 RidArr = 2;
  for (int i = 0; i < this->ridarr_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(
      2, this->ridarr(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TArenaHighOrderGetSimpleBattleReportReq)
}

::google::protobuf::uint8* TArenaHighOrderGetSimpleBattleReportReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TArenaHighOrderGetSimpleBattleReportReq)
  // optional string ServerId = 1;
  if (has_serverid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->serverid().data(), this->serverid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "serverid");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->serverid(), target);
  }

  // repeated uint64 RidArr = 2;
  for (int i = 0; i < this->ridarr_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt64ToArray(2, this->ridarr(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TArenaHighOrderGetSimpleBattleReportReq)
  return target;
}

int TArenaHighOrderGetSimpleBattleReportReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string ServerId = 1;
    if (has_serverid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->serverid());
    }

  }
  // repeated uint64 RidArr = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->ridarr_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt64Size(this->ridarr(i));
    }
    total_size += 1 * this->ridarr_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TArenaHighOrderGetSimpleBattleReportReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TArenaHighOrderGetSimpleBattleReportReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TArenaHighOrderGetSimpleBattleReportReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TArenaHighOrderGetSimpleBattleReportReq::MergeFrom(const TArenaHighOrderGetSimpleBattleReportReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  ridarr_.MergeFrom(from.ridarr_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_serverid()) {
      set_serverid(from.serverid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TArenaHighOrderGetSimpleBattleReportReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TArenaHighOrderGetSimpleBattleReportReq::CopyFrom(const TArenaHighOrderGetSimpleBattleReportReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TArenaHighOrderGetSimpleBattleReportReq::IsInitialized() const {

  return true;
}

void TArenaHighOrderGetSimpleBattleReportReq::Swap(TArenaHighOrderGetSimpleBattleReportReq* other) {
  if (other != this) {
    std::swap(serverid_, other->serverid_);
    ridarr_.Swap(&other->ridarr_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TArenaHighOrderGetSimpleBattleReportReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TArenaHighOrderGetSimpleBattleReportReq_descriptor_;
  metadata.reflection = TArenaHighOrderGetSimpleBattleReportReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TArenaHighOrderBattleRecordSimple::kArmy1ArrFieldNumber;
const int TArenaHighOrderBattleRecordSimple::kArmy2ArrFieldNumber;
#endif  // !_MSC_VER

TArenaHighOrderBattleRecordSimple::TArenaHighOrderBattleRecordSimple()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TArenaHighOrderBattleRecordSimple)
}

void TArenaHighOrderBattleRecordSimple::InitAsDefaultInstance() {
  army1arr_ = const_cast< ::pb::TArmyViewInfo*>(&::pb::TArmyViewInfo::default_instance());
  army2arr_ = const_cast< ::pb::TArmyViewInfo*>(&::pb::TArmyViewInfo::default_instance());
}

TArenaHighOrderBattleRecordSimple::TArenaHighOrderBattleRecordSimple(const TArenaHighOrderBattleRecordSimple& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TArenaHighOrderBattleRecordSimple)
}

void TArenaHighOrderBattleRecordSimple::SharedCtor() {
  _cached_size_ = 0;
  army1arr_ = NULL;
  army2arr_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TArenaHighOrderBattleRecordSimple::~TArenaHighOrderBattleRecordSimple() {
  // @@protoc_insertion_point(destructor:pb.TArenaHighOrderBattleRecordSimple)
  SharedDtor();
}

void TArenaHighOrderBattleRecordSimple::SharedDtor() {
  if (this != default_instance_) {
    delete army1arr_;
    delete army2arr_;
  }
}

void TArenaHighOrderBattleRecordSimple::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TArenaHighOrderBattleRecordSimple::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TArenaHighOrderBattleRecordSimple_descriptor_;
}

const TArenaHighOrderBattleRecordSimple& TArenaHighOrderBattleRecordSimple::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fArenaHighOrder_2eproto();
  return *default_instance_;
}

TArenaHighOrderBattleRecordSimple* TArenaHighOrderBattleRecordSimple::default_instance_ = NULL;

TArenaHighOrderBattleRecordSimple* TArenaHighOrderBattleRecordSimple::New() const {
  return new TArenaHighOrderBattleRecordSimple;
}

void TArenaHighOrderBattleRecordSimple::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    if (has_army1arr()) {
      if (army1arr_ != NULL) army1arr_->::pb::TArmyViewInfo::Clear();
    }
    if (has_army2arr()) {
      if (army2arr_ != NULL) army2arr_->::pb::TArmyViewInfo::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TArenaHighOrderBattleRecordSimple::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TArenaHighOrderBattleRecordSimple)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .pb.TArmyViewInfo Army1Arr = 4;
      case 4: {
        if (tag == 34) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_army1arr()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_Army2Arr;
        break;
      }

      // optional .pb.TArmyViewInfo Army2Arr = 5;
      case 5: {
        if (tag == 42) {
         parse_Army2Arr:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_army2arr()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TArenaHighOrderBattleRecordSimple)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TArenaHighOrderBattleRecordSimple)
  return false;
#undef DO_
}

void TArenaHighOrderBattleRecordSimple::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TArenaHighOrderBattleRecordSimple)
  // optional .pb.TArmyViewInfo Army1Arr = 4;
  if (has_army1arr()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->army1arr(), output);
  }

  // optional .pb.TArmyViewInfo Army2Arr = 5;
  if (has_army2arr()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->army2arr(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TArenaHighOrderBattleRecordSimple)
}

::google::protobuf::uint8* TArenaHighOrderBattleRecordSimple::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TArenaHighOrderBattleRecordSimple)
  // optional .pb.TArmyViewInfo Army1Arr = 4;
  if (has_army1arr()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->army1arr(), target);
  }

  // optional .pb.TArmyViewInfo Army2Arr = 5;
  if (has_army2arr()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->army2arr(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TArenaHighOrderBattleRecordSimple)
  return target;
}

int TArenaHighOrderBattleRecordSimple::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .pb.TArmyViewInfo Army1Arr = 4;
    if (has_army1arr()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->army1arr());
    }

    // optional .pb.TArmyViewInfo Army2Arr = 5;
    if (has_army2arr()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->army2arr());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TArenaHighOrderBattleRecordSimple::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TArenaHighOrderBattleRecordSimple* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TArenaHighOrderBattleRecordSimple*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TArenaHighOrderBattleRecordSimple::MergeFrom(const TArenaHighOrderBattleRecordSimple& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_army1arr()) {
      mutable_army1arr()->::pb::TArmyViewInfo::MergeFrom(from.army1arr());
    }
    if (from.has_army2arr()) {
      mutable_army2arr()->::pb::TArmyViewInfo::MergeFrom(from.army2arr());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TArenaHighOrderBattleRecordSimple::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TArenaHighOrderBattleRecordSimple::CopyFrom(const TArenaHighOrderBattleRecordSimple& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TArenaHighOrderBattleRecordSimple::IsInitialized() const {

  if (has_army1arr()) {
    if (!this->army1arr().IsInitialized()) return false;
  }
  if (has_army2arr()) {
    if (!this->army2arr().IsInitialized()) return false;
  }
  return true;
}

void TArenaHighOrderBattleRecordSimple::Swap(TArenaHighOrderBattleRecordSimple* other) {
  if (other != this) {
    std::swap(army1arr_, other->army1arr_);
    std::swap(army2arr_, other->army2arr_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TArenaHighOrderBattleRecordSimple::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TArenaHighOrderBattleRecordSimple_descriptor_;
  metadata.reflection = TArenaHighOrderBattleRecordSimple_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TArenaHighOrderGetSimpleBattleReportRsp::kRecordArrFieldNumber;
#endif  // !_MSC_VER

TArenaHighOrderGetSimpleBattleReportRsp::TArenaHighOrderGetSimpleBattleReportRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TArenaHighOrderGetSimpleBattleReportRsp)
}

void TArenaHighOrderGetSimpleBattleReportRsp::InitAsDefaultInstance() {
}

TArenaHighOrderGetSimpleBattleReportRsp::TArenaHighOrderGetSimpleBattleReportRsp(const TArenaHighOrderGetSimpleBattleReportRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TArenaHighOrderGetSimpleBattleReportRsp)
}

void TArenaHighOrderGetSimpleBattleReportRsp::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TArenaHighOrderGetSimpleBattleReportRsp::~TArenaHighOrderGetSimpleBattleReportRsp() {
  // @@protoc_insertion_point(destructor:pb.TArenaHighOrderGetSimpleBattleReportRsp)
  SharedDtor();
}

void TArenaHighOrderGetSimpleBattleReportRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TArenaHighOrderGetSimpleBattleReportRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TArenaHighOrderGetSimpleBattleReportRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TArenaHighOrderGetSimpleBattleReportRsp_descriptor_;
}

const TArenaHighOrderGetSimpleBattleReportRsp& TArenaHighOrderGetSimpleBattleReportRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fArenaHighOrder_2eproto();
  return *default_instance_;
}

TArenaHighOrderGetSimpleBattleReportRsp* TArenaHighOrderGetSimpleBattleReportRsp::default_instance_ = NULL;

TArenaHighOrderGetSimpleBattleReportRsp* TArenaHighOrderGetSimpleBattleReportRsp::New() const {
  return new TArenaHighOrderGetSimpleBattleReportRsp;
}

void TArenaHighOrderGetSimpleBattleReportRsp::Clear() {
  recordarr_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TArenaHighOrderGetSimpleBattleReportRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TArenaHighOrderGetSimpleBattleReportRsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .pb.TArenaHighOrderBattleRecordSimple RecordArr = 1;
      case 1: {
        if (tag == 10) {
         parse_RecordArr:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_recordarr()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_RecordArr;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TArenaHighOrderGetSimpleBattleReportRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TArenaHighOrderGetSimpleBattleReportRsp)
  return false;
#undef DO_
}

void TArenaHighOrderGetSimpleBattleReportRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TArenaHighOrderGetSimpleBattleReportRsp)
  // repeated .pb.TArenaHighOrderBattleRecordSimple RecordArr = 1;
  for (int i = 0; i < this->recordarr_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->recordarr(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TArenaHighOrderGetSimpleBattleReportRsp)
}

::google::protobuf::uint8* TArenaHighOrderGetSimpleBattleReportRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TArenaHighOrderGetSimpleBattleReportRsp)
  // repeated .pb.TArenaHighOrderBattleRecordSimple RecordArr = 1;
  for (int i = 0; i < this->recordarr_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->recordarr(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TArenaHighOrderGetSimpleBattleReportRsp)
  return target;
}

int TArenaHighOrderGetSimpleBattleReportRsp::ByteSize() const {
  int total_size = 0;

  // repeated .pb.TArenaHighOrderBattleRecordSimple RecordArr = 1;
  total_size += 1 * this->recordarr_size();
  for (int i = 0; i < this->recordarr_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->recordarr(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TArenaHighOrderGetSimpleBattleReportRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TArenaHighOrderGetSimpleBattleReportRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TArenaHighOrderGetSimpleBattleReportRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TArenaHighOrderGetSimpleBattleReportRsp::MergeFrom(const TArenaHighOrderGetSimpleBattleReportRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  recordarr_.MergeFrom(from.recordarr_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TArenaHighOrderGetSimpleBattleReportRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TArenaHighOrderGetSimpleBattleReportRsp::CopyFrom(const TArenaHighOrderGetSimpleBattleReportRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TArenaHighOrderGetSimpleBattleReportRsp::IsInitialized() const {

  if (!::google::protobuf::internal::AllAreInitialized(this->recordarr())) return false;
  return true;
}

void TArenaHighOrderGetSimpleBattleReportRsp::Swap(TArenaHighOrderGetSimpleBattleReportRsp* other) {
  if (other != this) {
    recordarr_.Swap(&other->recordarr_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TArenaHighOrderGetSimpleBattleReportRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TArenaHighOrderGetSimpleBattleReportRsp_descriptor_;
  metadata.reflection = TArenaHighOrderGetSimpleBattleReportRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TArenaHighOrderBuyAtkNumReq::kNumFieldNumber;
#endif  // !_MSC_VER

TArenaHighOrderBuyAtkNumReq::TArenaHighOrderBuyAtkNumReq()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TArenaHighOrderBuyAtkNumReq)
}

void TArenaHighOrderBuyAtkNumReq::InitAsDefaultInstance() {
}

TArenaHighOrderBuyAtkNumReq::TArenaHighOrderBuyAtkNumReq(const TArenaHighOrderBuyAtkNumReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TArenaHighOrderBuyAtkNumReq)
}

void TArenaHighOrderBuyAtkNumReq::SharedCtor() {
  _cached_size_ = 0;
  num_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TArenaHighOrderBuyAtkNumReq::~TArenaHighOrderBuyAtkNumReq() {
  // @@protoc_insertion_point(destructor:pb.TArenaHighOrderBuyAtkNumReq)
  SharedDtor();
}

void TArenaHighOrderBuyAtkNumReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TArenaHighOrderBuyAtkNumReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TArenaHighOrderBuyAtkNumReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TArenaHighOrderBuyAtkNumReq_descriptor_;
}

const TArenaHighOrderBuyAtkNumReq& TArenaHighOrderBuyAtkNumReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fArenaHighOrder_2eproto();
  return *default_instance_;
}

TArenaHighOrderBuyAtkNumReq* TArenaHighOrderBuyAtkNumReq::default_instance_ = NULL;

TArenaHighOrderBuyAtkNumReq* TArenaHighOrderBuyAtkNumReq::New() const {
  return new TArenaHighOrderBuyAtkNumReq;
}

void TArenaHighOrderBuyAtkNumReq::Clear() {
  num_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TArenaHighOrderBuyAtkNumReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TArenaHighOrderBuyAtkNumReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 Num = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &num_)));
          set_has_num();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TArenaHighOrderBuyAtkNumReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TArenaHighOrderBuyAtkNumReq)
  return false;
#undef DO_
}

void TArenaHighOrderBuyAtkNumReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TArenaHighOrderBuyAtkNumReq)
  // optional uint32 Num = 1;
  if (has_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->num(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TArenaHighOrderBuyAtkNumReq)
}

::google::protobuf::uint8* TArenaHighOrderBuyAtkNumReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TArenaHighOrderBuyAtkNumReq)
  // optional uint32 Num = 1;
  if (has_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->num(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TArenaHighOrderBuyAtkNumReq)
  return target;
}

int TArenaHighOrderBuyAtkNumReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 Num = 1;
    if (has_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->num());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TArenaHighOrderBuyAtkNumReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TArenaHighOrderBuyAtkNumReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TArenaHighOrderBuyAtkNumReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TArenaHighOrderBuyAtkNumReq::MergeFrom(const TArenaHighOrderBuyAtkNumReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_num()) {
      set_num(from.num());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TArenaHighOrderBuyAtkNumReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TArenaHighOrderBuyAtkNumReq::CopyFrom(const TArenaHighOrderBuyAtkNumReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TArenaHighOrderBuyAtkNumReq::IsInitialized() const {

  return true;
}

void TArenaHighOrderBuyAtkNumReq::Swap(TArenaHighOrderBuyAtkNumReq* other) {
  if (other != this) {
    std::swap(num_, other->num_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TArenaHighOrderBuyAtkNumReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TArenaHighOrderBuyAtkNumReq_descriptor_;
  metadata.reflection = TArenaHighOrderBuyAtkNumReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TArenaHighOrderBuyAtkNumRsp::kExtraAtkNumFieldNumber;
const int TArenaHighOrderBuyAtkNumRsp::kBuyNumFieldNumber;
#endif  // !_MSC_VER

TArenaHighOrderBuyAtkNumRsp::TArenaHighOrderBuyAtkNumRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TArenaHighOrderBuyAtkNumRsp)
}

void TArenaHighOrderBuyAtkNumRsp::InitAsDefaultInstance() {
}

TArenaHighOrderBuyAtkNumRsp::TArenaHighOrderBuyAtkNumRsp(const TArenaHighOrderBuyAtkNumRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TArenaHighOrderBuyAtkNumRsp)
}

void TArenaHighOrderBuyAtkNumRsp::SharedCtor() {
  _cached_size_ = 0;
  extraatknum_ = 0u;
  buynum_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TArenaHighOrderBuyAtkNumRsp::~TArenaHighOrderBuyAtkNumRsp() {
  // @@protoc_insertion_point(destructor:pb.TArenaHighOrderBuyAtkNumRsp)
  SharedDtor();
}

void TArenaHighOrderBuyAtkNumRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TArenaHighOrderBuyAtkNumRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TArenaHighOrderBuyAtkNumRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TArenaHighOrderBuyAtkNumRsp_descriptor_;
}

const TArenaHighOrderBuyAtkNumRsp& TArenaHighOrderBuyAtkNumRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fArenaHighOrder_2eproto();
  return *default_instance_;
}

TArenaHighOrderBuyAtkNumRsp* TArenaHighOrderBuyAtkNumRsp::default_instance_ = NULL;

TArenaHighOrderBuyAtkNumRsp* TArenaHighOrderBuyAtkNumRsp::New() const {
  return new TArenaHighOrderBuyAtkNumRsp;
}

void TArenaHighOrderBuyAtkNumRsp::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<TArenaHighOrderBuyAtkNumRsp*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(extraatknum_, buynum_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TArenaHighOrderBuyAtkNumRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TArenaHighOrderBuyAtkNumRsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 ExtraAtkNum = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &extraatknum_)));
          set_has_extraatknum();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_BuyNum;
        break;
      }

      // optional uint32 BuyNum = 2;
      case 2: {
        if (tag == 16) {
         parse_BuyNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &buynum_)));
          set_has_buynum();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TArenaHighOrderBuyAtkNumRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TArenaHighOrderBuyAtkNumRsp)
  return false;
#undef DO_
}

void TArenaHighOrderBuyAtkNumRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TArenaHighOrderBuyAtkNumRsp)
  // optional uint32 ExtraAtkNum = 1;
  if (has_extraatknum()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->extraatknum(), output);
  }

  // optional uint32 BuyNum = 2;
  if (has_buynum()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->buynum(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TArenaHighOrderBuyAtkNumRsp)
}

::google::protobuf::uint8* TArenaHighOrderBuyAtkNumRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TArenaHighOrderBuyAtkNumRsp)
  // optional uint32 ExtraAtkNum = 1;
  if (has_extraatknum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->extraatknum(), target);
  }

  // optional uint32 BuyNum = 2;
  if (has_buynum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->buynum(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TArenaHighOrderBuyAtkNumRsp)
  return target;
}

int TArenaHighOrderBuyAtkNumRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 ExtraAtkNum = 1;
    if (has_extraatknum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->extraatknum());
    }

    // optional uint32 BuyNum = 2;
    if (has_buynum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->buynum());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TArenaHighOrderBuyAtkNumRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TArenaHighOrderBuyAtkNumRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TArenaHighOrderBuyAtkNumRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TArenaHighOrderBuyAtkNumRsp::MergeFrom(const TArenaHighOrderBuyAtkNumRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_extraatknum()) {
      set_extraatknum(from.extraatknum());
    }
    if (from.has_buynum()) {
      set_buynum(from.buynum());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TArenaHighOrderBuyAtkNumRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TArenaHighOrderBuyAtkNumRsp::CopyFrom(const TArenaHighOrderBuyAtkNumRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TArenaHighOrderBuyAtkNumRsp::IsInitialized() const {

  return true;
}

void TArenaHighOrderBuyAtkNumRsp::Swap(TArenaHighOrderBuyAtkNumRsp* other) {
  if (other != this) {
    std::swap(extraatknum_, other->extraatknum_);
    std::swap(buynum_, other->buynum_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TArenaHighOrderBuyAtkNumRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TArenaHighOrderBuyAtkNumRsp_descriptor_;
  metadata.reflection = TArenaHighOrderBuyAtkNumRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TArenaHighOrderServerPush::kRecordInfoFieldNumber;
const int TArenaHighOrderServerPush::kEnemyArrFieldNumber;
#endif  // !_MSC_VER

TArenaHighOrderServerPush::TArenaHighOrderServerPush()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TArenaHighOrderServerPush)
}

void TArenaHighOrderServerPush::InitAsDefaultInstance() {
  recordinfo_ = const_cast< ::pb::TArenaHighOrderRecordInfo*>(&::pb::TArenaHighOrderRecordInfo::default_instance());
}

TArenaHighOrderServerPush::TArenaHighOrderServerPush(const TArenaHighOrderServerPush& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TArenaHighOrderServerPush)
}

void TArenaHighOrderServerPush::SharedCtor() {
  _cached_size_ = 0;
  recordinfo_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TArenaHighOrderServerPush::~TArenaHighOrderServerPush() {
  // @@protoc_insertion_point(destructor:pb.TArenaHighOrderServerPush)
  SharedDtor();
}

void TArenaHighOrderServerPush::SharedDtor() {
  if (this != default_instance_) {
    delete recordinfo_;
  }
}

void TArenaHighOrderServerPush::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TArenaHighOrderServerPush::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TArenaHighOrderServerPush_descriptor_;
}

const TArenaHighOrderServerPush& TArenaHighOrderServerPush::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fArenaHighOrder_2eproto();
  return *default_instance_;
}

TArenaHighOrderServerPush* TArenaHighOrderServerPush::default_instance_ = NULL;

TArenaHighOrderServerPush* TArenaHighOrderServerPush::New() const {
  return new TArenaHighOrderServerPush;
}

void TArenaHighOrderServerPush::Clear() {
  if (has_recordinfo()) {
    if (recordinfo_ != NULL) recordinfo_->::pb::TArenaHighOrderRecordInfo::Clear();
  }
  enemyarr_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TArenaHighOrderServerPush::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TArenaHighOrderServerPush)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .pb.TArenaHighOrderRecordInfo RecordInfo = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_recordinfo()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_EnemyArr;
        break;
      }

      // repeated .pb.TArenaHighOrderUser EnemyArr = 2;
      case 2: {
        if (tag == 18) {
         parse_EnemyArr:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_enemyarr()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_EnemyArr;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TArenaHighOrderServerPush)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TArenaHighOrderServerPush)
  return false;
#undef DO_
}

void TArenaHighOrderServerPush::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TArenaHighOrderServerPush)
  // optional .pb.TArenaHighOrderRecordInfo RecordInfo = 1;
  if (has_recordinfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->recordinfo(), output);
  }

  // repeated .pb.TArenaHighOrderUser EnemyArr = 2;
  for (int i = 0; i < this->enemyarr_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->enemyarr(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TArenaHighOrderServerPush)
}

::google::protobuf::uint8* TArenaHighOrderServerPush::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TArenaHighOrderServerPush)
  // optional .pb.TArenaHighOrderRecordInfo RecordInfo = 1;
  if (has_recordinfo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->recordinfo(), target);
  }

  // repeated .pb.TArenaHighOrderUser EnemyArr = 2;
  for (int i = 0; i < this->enemyarr_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->enemyarr(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TArenaHighOrderServerPush)
  return target;
}

int TArenaHighOrderServerPush::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .pb.TArenaHighOrderRecordInfo RecordInfo = 1;
    if (has_recordinfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->recordinfo());
    }

  }
  // repeated .pb.TArenaHighOrderUser EnemyArr = 2;
  total_size += 1 * this->enemyarr_size();
  for (int i = 0; i < this->enemyarr_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->enemyarr(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TArenaHighOrderServerPush::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TArenaHighOrderServerPush* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TArenaHighOrderServerPush*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TArenaHighOrderServerPush::MergeFrom(const TArenaHighOrderServerPush& from) {
  GOOGLE_CHECK_NE(&from, this);
  enemyarr_.MergeFrom(from.enemyarr_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_recordinfo()) {
      mutable_recordinfo()->::pb::TArenaHighOrderRecordInfo::MergeFrom(from.recordinfo());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TArenaHighOrderServerPush::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TArenaHighOrderServerPush::CopyFrom(const TArenaHighOrderServerPush& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TArenaHighOrderServerPush::IsInitialized() const {

  if (has_recordinfo()) {
    if (!this->recordinfo().IsInitialized()) return false;
  }
  return true;
}

void TArenaHighOrderServerPush::Swap(TArenaHighOrderServerPush* other) {
  if (other != this) {
    std::swap(recordinfo_, other->recordinfo_);
    enemyarr_.Swap(&other->enemyarr_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TArenaHighOrderServerPush::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TArenaHighOrderServerPush_descriptor_;
  metadata.reflection = TArenaHighOrderServerPush_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TArenaHighOrderReceiveScoresRewardReq::kTidFieldNumber;
#endif  // !_MSC_VER

TArenaHighOrderReceiveScoresRewardReq::TArenaHighOrderReceiveScoresRewardReq()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TArenaHighOrderReceiveScoresRewardReq)
}

void TArenaHighOrderReceiveScoresRewardReq::InitAsDefaultInstance() {
}

TArenaHighOrderReceiveScoresRewardReq::TArenaHighOrderReceiveScoresRewardReq(const TArenaHighOrderReceiveScoresRewardReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TArenaHighOrderReceiveScoresRewardReq)
}

void TArenaHighOrderReceiveScoresRewardReq::SharedCtor() {
  _cached_size_ = 0;
  tid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TArenaHighOrderReceiveScoresRewardReq::~TArenaHighOrderReceiveScoresRewardReq() {
  // @@protoc_insertion_point(destructor:pb.TArenaHighOrderReceiveScoresRewardReq)
  SharedDtor();
}

void TArenaHighOrderReceiveScoresRewardReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TArenaHighOrderReceiveScoresRewardReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TArenaHighOrderReceiveScoresRewardReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TArenaHighOrderReceiveScoresRewardReq_descriptor_;
}

const TArenaHighOrderReceiveScoresRewardReq& TArenaHighOrderReceiveScoresRewardReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fArenaHighOrder_2eproto();
  return *default_instance_;
}

TArenaHighOrderReceiveScoresRewardReq* TArenaHighOrderReceiveScoresRewardReq::default_instance_ = NULL;

TArenaHighOrderReceiveScoresRewardReq* TArenaHighOrderReceiveScoresRewardReq::New() const {
  return new TArenaHighOrderReceiveScoresRewardReq;
}

void TArenaHighOrderReceiveScoresRewardReq::Clear() {
  tid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TArenaHighOrderReceiveScoresRewardReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TArenaHighOrderReceiveScoresRewardReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 Tid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &tid_)));
          set_has_tid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TArenaHighOrderReceiveScoresRewardReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TArenaHighOrderReceiveScoresRewardReq)
  return false;
#undef DO_
}

void TArenaHighOrderReceiveScoresRewardReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TArenaHighOrderReceiveScoresRewardReq)
  // optional uint32 Tid = 1;
  if (has_tid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->tid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TArenaHighOrderReceiveScoresRewardReq)
}

::google::protobuf::uint8* TArenaHighOrderReceiveScoresRewardReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TArenaHighOrderReceiveScoresRewardReq)
  // optional uint32 Tid = 1;
  if (has_tid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->tid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TArenaHighOrderReceiveScoresRewardReq)
  return target;
}

int TArenaHighOrderReceiveScoresRewardReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 Tid = 1;
    if (has_tid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->tid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TArenaHighOrderReceiveScoresRewardReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TArenaHighOrderReceiveScoresRewardReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TArenaHighOrderReceiveScoresRewardReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TArenaHighOrderReceiveScoresRewardReq::MergeFrom(const TArenaHighOrderReceiveScoresRewardReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_tid()) {
      set_tid(from.tid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TArenaHighOrderReceiveScoresRewardReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TArenaHighOrderReceiveScoresRewardReq::CopyFrom(const TArenaHighOrderReceiveScoresRewardReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TArenaHighOrderReceiveScoresRewardReq::IsInitialized() const {

  return true;
}

void TArenaHighOrderReceiveScoresRewardReq::Swap(TArenaHighOrderReceiveScoresRewardReq* other) {
  if (other != this) {
    std::swap(tid_, other->tid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TArenaHighOrderReceiveScoresRewardReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TArenaHighOrderReceiveScoresRewardReq_descriptor_;
  metadata.reflection = TArenaHighOrderReceiveScoresRewardReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TArenaHighOrderReceiveScoresRewardRsp::kRewardArrFieldNumber;
#endif  // !_MSC_VER

TArenaHighOrderReceiveScoresRewardRsp::TArenaHighOrderReceiveScoresRewardRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TArenaHighOrderReceiveScoresRewardRsp)
}

void TArenaHighOrderReceiveScoresRewardRsp::InitAsDefaultInstance() {
}

TArenaHighOrderReceiveScoresRewardRsp::TArenaHighOrderReceiveScoresRewardRsp(const TArenaHighOrderReceiveScoresRewardRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TArenaHighOrderReceiveScoresRewardRsp)
}

void TArenaHighOrderReceiveScoresRewardRsp::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TArenaHighOrderReceiveScoresRewardRsp::~TArenaHighOrderReceiveScoresRewardRsp() {
  // @@protoc_insertion_point(destructor:pb.TArenaHighOrderReceiveScoresRewardRsp)
  SharedDtor();
}

void TArenaHighOrderReceiveScoresRewardRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TArenaHighOrderReceiveScoresRewardRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TArenaHighOrderReceiveScoresRewardRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TArenaHighOrderReceiveScoresRewardRsp_descriptor_;
}

const TArenaHighOrderReceiveScoresRewardRsp& TArenaHighOrderReceiveScoresRewardRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fArenaHighOrder_2eproto();
  return *default_instance_;
}

TArenaHighOrderReceiveScoresRewardRsp* TArenaHighOrderReceiveScoresRewardRsp::default_instance_ = NULL;

TArenaHighOrderReceiveScoresRewardRsp* TArenaHighOrderReceiveScoresRewardRsp::New() const {
  return new TArenaHighOrderReceiveScoresRewardRsp;
}

void TArenaHighOrderReceiveScoresRewardRsp::Clear() {
  rewardarr_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TArenaHighOrderReceiveScoresRewardRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TArenaHighOrderReceiveScoresRewardRsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .pb.TCommonReward RewardArr = 1;
      case 1: {
        if (tag == 10) {
         parse_RewardArr:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_rewardarr()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_RewardArr;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TArenaHighOrderReceiveScoresRewardRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TArenaHighOrderReceiveScoresRewardRsp)
  return false;
#undef DO_
}

void TArenaHighOrderReceiveScoresRewardRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TArenaHighOrderReceiveScoresRewardRsp)
  // repeated .pb.TCommonReward RewardArr = 1;
  for (int i = 0; i < this->rewardarr_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->rewardarr(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TArenaHighOrderReceiveScoresRewardRsp)
}

::google::protobuf::uint8* TArenaHighOrderReceiveScoresRewardRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TArenaHighOrderReceiveScoresRewardRsp)
  // repeated .pb.TCommonReward RewardArr = 1;
  for (int i = 0; i < this->rewardarr_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->rewardarr(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TArenaHighOrderReceiveScoresRewardRsp)
  return target;
}

int TArenaHighOrderReceiveScoresRewardRsp::ByteSize() const {
  int total_size = 0;

  // repeated .pb.TCommonReward RewardArr = 1;
  total_size += 1 * this->rewardarr_size();
  for (int i = 0; i < this->rewardarr_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->rewardarr(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TArenaHighOrderReceiveScoresRewardRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TArenaHighOrderReceiveScoresRewardRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TArenaHighOrderReceiveScoresRewardRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TArenaHighOrderReceiveScoresRewardRsp::MergeFrom(const TArenaHighOrderReceiveScoresRewardRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  rewardarr_.MergeFrom(from.rewardarr_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TArenaHighOrderReceiveScoresRewardRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TArenaHighOrderReceiveScoresRewardRsp::CopyFrom(const TArenaHighOrderReceiveScoresRewardRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TArenaHighOrderReceiveScoresRewardRsp::IsInitialized() const {

  return true;
}

void TArenaHighOrderReceiveScoresRewardRsp::Swap(TArenaHighOrderReceiveScoresRewardRsp* other) {
  if (other != this) {
    rewardarr_.Swap(&other->rewardarr_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TArenaHighOrderReceiveScoresRewardRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TArenaHighOrderReceiveScoresRewardRsp_descriptor_;
  metadata.reflection = TArenaHighOrderReceiveScoresRewardRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TArenaHighOrderGetEnemyFormationByOtherServerReq::kUidFieldNumber;
#endif  // !_MSC_VER

TArenaHighOrderGetEnemyFormationByOtherServerReq::TArenaHighOrderGetEnemyFormationByOtherServerReq()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TArenaHighOrderGetEnemyFormationByOtherServerReq)
}

void TArenaHighOrderGetEnemyFormationByOtherServerReq::InitAsDefaultInstance() {
}

TArenaHighOrderGetEnemyFormationByOtherServerReq::TArenaHighOrderGetEnemyFormationByOtherServerReq(const TArenaHighOrderGetEnemyFormationByOtherServerReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TArenaHighOrderGetEnemyFormationByOtherServerReq)
}

void TArenaHighOrderGetEnemyFormationByOtherServerReq::SharedCtor() {
  _cached_size_ = 0;
  uid_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TArenaHighOrderGetEnemyFormationByOtherServerReq::~TArenaHighOrderGetEnemyFormationByOtherServerReq() {
  // @@protoc_insertion_point(destructor:pb.TArenaHighOrderGetEnemyFormationByOtherServerReq)
  SharedDtor();
}

void TArenaHighOrderGetEnemyFormationByOtherServerReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TArenaHighOrderGetEnemyFormationByOtherServerReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TArenaHighOrderGetEnemyFormationByOtherServerReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TArenaHighOrderGetEnemyFormationByOtherServerReq_descriptor_;
}

const TArenaHighOrderGetEnemyFormationByOtherServerReq& TArenaHighOrderGetEnemyFormationByOtherServerReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fArenaHighOrder_2eproto();
  return *default_instance_;
}

TArenaHighOrderGetEnemyFormationByOtherServerReq* TArenaHighOrderGetEnemyFormationByOtherServerReq::default_instance_ = NULL;

TArenaHighOrderGetEnemyFormationByOtherServerReq* TArenaHighOrderGetEnemyFormationByOtherServerReq::New() const {
  return new TArenaHighOrderGetEnemyFormationByOtherServerReq;
}

void TArenaHighOrderGetEnemyFormationByOtherServerReq::Clear() {
  uid_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TArenaHighOrderGetEnemyFormationByOtherServerReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TArenaHighOrderGetEnemyFormationByOtherServerReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 Uid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &uid_)));
          set_has_uid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TArenaHighOrderGetEnemyFormationByOtherServerReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TArenaHighOrderGetEnemyFormationByOtherServerReq)
  return false;
#undef DO_
}

void TArenaHighOrderGetEnemyFormationByOtherServerReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TArenaHighOrderGetEnemyFormationByOtherServerReq)
  // optional uint64 Uid = 1;
  if (has_uid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->uid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TArenaHighOrderGetEnemyFormationByOtherServerReq)
}

::google::protobuf::uint8* TArenaHighOrderGetEnemyFormationByOtherServerReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TArenaHighOrderGetEnemyFormationByOtherServerReq)
  // optional uint64 Uid = 1;
  if (has_uid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->uid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TArenaHighOrderGetEnemyFormationByOtherServerReq)
  return target;
}

int TArenaHighOrderGetEnemyFormationByOtherServerReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 Uid = 1;
    if (has_uid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->uid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TArenaHighOrderGetEnemyFormationByOtherServerReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TArenaHighOrderGetEnemyFormationByOtherServerReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TArenaHighOrderGetEnemyFormationByOtherServerReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TArenaHighOrderGetEnemyFormationByOtherServerReq::MergeFrom(const TArenaHighOrderGetEnemyFormationByOtherServerReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_uid()) {
      set_uid(from.uid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TArenaHighOrderGetEnemyFormationByOtherServerReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TArenaHighOrderGetEnemyFormationByOtherServerReq::CopyFrom(const TArenaHighOrderGetEnemyFormationByOtherServerReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TArenaHighOrderGetEnemyFormationByOtherServerReq::IsInitialized() const {

  return true;
}

void TArenaHighOrderGetEnemyFormationByOtherServerReq::Swap(TArenaHighOrderGetEnemyFormationByOtherServerReq* other) {
  if (other != this) {
    std::swap(uid_, other->uid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TArenaHighOrderGetEnemyFormationByOtherServerReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TArenaHighOrderGetEnemyFormationByOtherServerReq_descriptor_;
  metadata.reflection = TArenaHighOrderGetEnemyFormationByOtherServerReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TArenaHighOrderGetEnemyFormationByOtherServerRsp::kFormationArrayFieldNumber;
const int TArenaHighOrderGetEnemyFormationByOtherServerRsp::kRankArrFieldNumber;
const int TArenaHighOrderGetEnemyFormationByOtherServerRsp::kBeastSkillArrFieldNumber;
#endif  // !_MSC_VER

TArenaHighOrderGetEnemyFormationByOtherServerRsp::TArenaHighOrderGetEnemyFormationByOtherServerRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TArenaHighOrderGetEnemyFormationByOtherServerRsp)
}

void TArenaHighOrderGetEnemyFormationByOtherServerRsp::InitAsDefaultInstance() {
}

TArenaHighOrderGetEnemyFormationByOtherServerRsp::TArenaHighOrderGetEnemyFormationByOtherServerRsp(const TArenaHighOrderGetEnemyFormationByOtherServerRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TArenaHighOrderGetEnemyFormationByOtherServerRsp)
}

void TArenaHighOrderGetEnemyFormationByOtherServerRsp::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TArenaHighOrderGetEnemyFormationByOtherServerRsp::~TArenaHighOrderGetEnemyFormationByOtherServerRsp() {
  // @@protoc_insertion_point(destructor:pb.TArenaHighOrderGetEnemyFormationByOtherServerRsp)
  SharedDtor();
}

void TArenaHighOrderGetEnemyFormationByOtherServerRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TArenaHighOrderGetEnemyFormationByOtherServerRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TArenaHighOrderGetEnemyFormationByOtherServerRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TArenaHighOrderGetEnemyFormationByOtherServerRsp_descriptor_;
}

const TArenaHighOrderGetEnemyFormationByOtherServerRsp& TArenaHighOrderGetEnemyFormationByOtherServerRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fArenaHighOrder_2eproto();
  return *default_instance_;
}

TArenaHighOrderGetEnemyFormationByOtherServerRsp* TArenaHighOrderGetEnemyFormationByOtherServerRsp::default_instance_ = NULL;

TArenaHighOrderGetEnemyFormationByOtherServerRsp* TArenaHighOrderGetEnemyFormationByOtherServerRsp::New() const {
  return new TArenaHighOrderGetEnemyFormationByOtherServerRsp;
}

void TArenaHighOrderGetEnemyFormationByOtherServerRsp::Clear() {
  formationarray_.Clear();
  rankarr_.Clear();
  beastskillarr_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TArenaHighOrderGetEnemyFormationByOtherServerRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TArenaHighOrderGetEnemyFormationByOtherServerRsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .pb.TArenaHighOrderEnemyFormation FormationArray = 1;
      case 1: {
        if (tag == 10) {
         parse_FormationArray:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_formationarray()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_FormationArray;
        if (input->ExpectTag(18)) goto parse_RankArr;
        break;
      }

      // repeated .pb.TRankSingle RankArr = 2;
      case 2: {
        if (tag == 18) {
         parse_RankArr:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_rankarr()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_RankArr;
        if (input->ExpectTag(24)) goto parse_BeastSkillArr;
        break;
      }

      // repeated uint32 BeastSkillArr = 3;
      case 3: {
        if (tag == 24) {
         parse_BeastSkillArr:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 24, input, this->mutable_beastskillarr())));
        } else if (tag == 26) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_beastskillarr())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_BeastSkillArr;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TArenaHighOrderGetEnemyFormationByOtherServerRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TArenaHighOrderGetEnemyFormationByOtherServerRsp)
  return false;
#undef DO_
}

void TArenaHighOrderGetEnemyFormationByOtherServerRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TArenaHighOrderGetEnemyFormationByOtherServerRsp)
  // repeated .pb.TArenaHighOrderEnemyFormation FormationArray = 1;
  for (int i = 0; i < this->formationarray_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->formationarray(i), output);
  }

  // repeated .pb.TRankSingle RankArr = 2;
  for (int i = 0; i < this->rankarr_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->rankarr(i), output);
  }

  // repeated uint32 BeastSkillArr = 3;
  for (int i = 0; i < this->beastskillarr_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      3, this->beastskillarr(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TArenaHighOrderGetEnemyFormationByOtherServerRsp)
}

::google::protobuf::uint8* TArenaHighOrderGetEnemyFormationByOtherServerRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TArenaHighOrderGetEnemyFormationByOtherServerRsp)
  // repeated .pb.TArenaHighOrderEnemyFormation FormationArray = 1;
  for (int i = 0; i < this->formationarray_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->formationarray(i), target);
  }

  // repeated .pb.TRankSingle RankArr = 2;
  for (int i = 0; i < this->rankarr_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->rankarr(i), target);
  }

  // repeated uint32 BeastSkillArr = 3;
  for (int i = 0; i < this->beastskillarr_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(3, this->beastskillarr(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TArenaHighOrderGetEnemyFormationByOtherServerRsp)
  return target;
}

int TArenaHighOrderGetEnemyFormationByOtherServerRsp::ByteSize() const {
  int total_size = 0;

  // repeated .pb.TArenaHighOrderEnemyFormation FormationArray = 1;
  total_size += 1 * this->formationarray_size();
  for (int i = 0; i < this->formationarray_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->formationarray(i));
  }

  // repeated .pb.TRankSingle RankArr = 2;
  total_size += 1 * this->rankarr_size();
  for (int i = 0; i < this->rankarr_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->rankarr(i));
  }

  // repeated uint32 BeastSkillArr = 3;
  {
    int data_size = 0;
    for (int i = 0; i < this->beastskillarr_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->beastskillarr(i));
    }
    total_size += 1 * this->beastskillarr_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TArenaHighOrderGetEnemyFormationByOtherServerRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TArenaHighOrderGetEnemyFormationByOtherServerRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TArenaHighOrderGetEnemyFormationByOtherServerRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TArenaHighOrderGetEnemyFormationByOtherServerRsp::MergeFrom(const TArenaHighOrderGetEnemyFormationByOtherServerRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  formationarray_.MergeFrom(from.formationarray_);
  rankarr_.MergeFrom(from.rankarr_);
  beastskillarr_.MergeFrom(from.beastskillarr_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TArenaHighOrderGetEnemyFormationByOtherServerRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TArenaHighOrderGetEnemyFormationByOtherServerRsp::CopyFrom(const TArenaHighOrderGetEnemyFormationByOtherServerRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TArenaHighOrderGetEnemyFormationByOtherServerRsp::IsInitialized() const {

  if (!::google::protobuf::internal::AllAreInitialized(this->formationarray())) return false;
  return true;
}

void TArenaHighOrderGetEnemyFormationByOtherServerRsp::Swap(TArenaHighOrderGetEnemyFormationByOtherServerRsp* other) {
  if (other != this) {
    formationarray_.Swap(&other->formationarray_);
    rankarr_.Swap(&other->rankarr_);
    beastskillarr_.Swap(&other->beastskillarr_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TArenaHighOrderGetEnemyFormationByOtherServerRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TArenaHighOrderGetEnemyFormationByOtherServerRsp_descriptor_;
  metadata.reflection = TArenaHighOrderGetEnemyFormationByOtherServerRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TArenaHighOrderSetAttackedRecordByOtherServerReq::kUidFieldNumber;
const int TArenaHighOrderSetAttackedRecordByOtherServerReq::kScoresDeltaFieldNumber;
const int TArenaHighOrderSetAttackedRecordByOtherServerReq::kBattleRecordInfoFieldNumber;
#endif  // !_MSC_VER

TArenaHighOrderSetAttackedRecordByOtherServerReq::TArenaHighOrderSetAttackedRecordByOtherServerReq()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TArenaHighOrderSetAttackedRecordByOtherServerReq)
}

void TArenaHighOrderSetAttackedRecordByOtherServerReq::InitAsDefaultInstance() {
  battlerecordinfo_ = const_cast< ::pb::TArenaHighOrderRecordInfo*>(&::pb::TArenaHighOrderRecordInfo::default_instance());
}

TArenaHighOrderSetAttackedRecordByOtherServerReq::TArenaHighOrderSetAttackedRecordByOtherServerReq(const TArenaHighOrderSetAttackedRecordByOtherServerReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TArenaHighOrderSetAttackedRecordByOtherServerReq)
}

void TArenaHighOrderSetAttackedRecordByOtherServerReq::SharedCtor() {
  _cached_size_ = 0;
  uid_ = GOOGLE_ULONGLONG(0);
  scoresdelta_ = 0;
  battlerecordinfo_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TArenaHighOrderSetAttackedRecordByOtherServerReq::~TArenaHighOrderSetAttackedRecordByOtherServerReq() {
  // @@protoc_insertion_point(destructor:pb.TArenaHighOrderSetAttackedRecordByOtherServerReq)
  SharedDtor();
}

void TArenaHighOrderSetAttackedRecordByOtherServerReq::SharedDtor() {
  if (this != default_instance_) {
    delete battlerecordinfo_;
  }
}

void TArenaHighOrderSetAttackedRecordByOtherServerReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TArenaHighOrderSetAttackedRecordByOtherServerReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TArenaHighOrderSetAttackedRecordByOtherServerReq_descriptor_;
}

const TArenaHighOrderSetAttackedRecordByOtherServerReq& TArenaHighOrderSetAttackedRecordByOtherServerReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fArenaHighOrder_2eproto();
  return *default_instance_;
}

TArenaHighOrderSetAttackedRecordByOtherServerReq* TArenaHighOrderSetAttackedRecordByOtherServerReq::default_instance_ = NULL;

TArenaHighOrderSetAttackedRecordByOtherServerReq* TArenaHighOrderSetAttackedRecordByOtherServerReq::New() const {
  return new TArenaHighOrderSetAttackedRecordByOtherServerReq;
}

void TArenaHighOrderSetAttackedRecordByOtherServerReq::Clear() {
  if (_has_bits_[0 / 32] & 7) {
    uid_ = GOOGLE_ULONGLONG(0);
    scoresdelta_ = 0;
    if (has_battlerecordinfo()) {
      if (battlerecordinfo_ != NULL) battlerecordinfo_->::pb::TArenaHighOrderRecordInfo::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TArenaHighOrderSetAttackedRecordByOtherServerReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TArenaHighOrderSetAttackedRecordByOtherServerReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 Uid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &uid_)));
          set_has_uid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_ScoresDelta;
        break;
      }

      // optional int32 ScoresDelta = 2;
      case 2: {
        if (tag == 16) {
         parse_ScoresDelta:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &scoresdelta_)));
          set_has_scoresdelta();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_BattleRecordInfo;
        break;
      }

      // optional .pb.TArenaHighOrderRecordInfo BattleRecordInfo = 3;
      case 3: {
        if (tag == 26) {
         parse_BattleRecordInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_battlerecordinfo()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TArenaHighOrderSetAttackedRecordByOtherServerReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TArenaHighOrderSetAttackedRecordByOtherServerReq)
  return false;
#undef DO_
}

void TArenaHighOrderSetAttackedRecordByOtherServerReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TArenaHighOrderSetAttackedRecordByOtherServerReq)
  // optional uint64 Uid = 1;
  if (has_uid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->uid(), output);
  }

  // optional int32 ScoresDelta = 2;
  if (has_scoresdelta()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->scoresdelta(), output);
  }

  // optional .pb.TArenaHighOrderRecordInfo BattleRecordInfo = 3;
  if (has_battlerecordinfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->battlerecordinfo(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TArenaHighOrderSetAttackedRecordByOtherServerReq)
}

::google::protobuf::uint8* TArenaHighOrderSetAttackedRecordByOtherServerReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TArenaHighOrderSetAttackedRecordByOtherServerReq)
  // optional uint64 Uid = 1;
  if (has_uid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->uid(), target);
  }

  // optional int32 ScoresDelta = 2;
  if (has_scoresdelta()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->scoresdelta(), target);
  }

  // optional .pb.TArenaHighOrderRecordInfo BattleRecordInfo = 3;
  if (has_battlerecordinfo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->battlerecordinfo(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TArenaHighOrderSetAttackedRecordByOtherServerReq)
  return target;
}

int TArenaHighOrderSetAttackedRecordByOtherServerReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 Uid = 1;
    if (has_uid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->uid());
    }

    // optional int32 ScoresDelta = 2;
    if (has_scoresdelta()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->scoresdelta());
    }

    // optional .pb.TArenaHighOrderRecordInfo BattleRecordInfo = 3;
    if (has_battlerecordinfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->battlerecordinfo());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TArenaHighOrderSetAttackedRecordByOtherServerReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TArenaHighOrderSetAttackedRecordByOtherServerReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TArenaHighOrderSetAttackedRecordByOtherServerReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TArenaHighOrderSetAttackedRecordByOtherServerReq::MergeFrom(const TArenaHighOrderSetAttackedRecordByOtherServerReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_uid()) {
      set_uid(from.uid());
    }
    if (from.has_scoresdelta()) {
      set_scoresdelta(from.scoresdelta());
    }
    if (from.has_battlerecordinfo()) {
      mutable_battlerecordinfo()->::pb::TArenaHighOrderRecordInfo::MergeFrom(from.battlerecordinfo());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TArenaHighOrderSetAttackedRecordByOtherServerReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TArenaHighOrderSetAttackedRecordByOtherServerReq::CopyFrom(const TArenaHighOrderSetAttackedRecordByOtherServerReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TArenaHighOrderSetAttackedRecordByOtherServerReq::IsInitialized() const {

  if (has_battlerecordinfo()) {
    if (!this->battlerecordinfo().IsInitialized()) return false;
  }
  return true;
}

void TArenaHighOrderSetAttackedRecordByOtherServerReq::Swap(TArenaHighOrderSetAttackedRecordByOtherServerReq* other) {
  if (other != this) {
    std::swap(uid_, other->uid_);
    std::swap(scoresdelta_, other->scoresdelta_);
    std::swap(battlerecordinfo_, other->battlerecordinfo_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TArenaHighOrderSetAttackedRecordByOtherServerReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TArenaHighOrderSetAttackedRecordByOtherServerReq_descriptor_;
  metadata.reflection = TArenaHighOrderSetAttackedRecordByOtherServerReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TArenaHighOrderSetAttackedRecordByOtherServerRsp::kScoresFieldNumber;
const int TArenaHighOrderSetAttackedRecordByOtherServerRsp::kRankFieldNumber;
#endif  // !_MSC_VER

TArenaHighOrderSetAttackedRecordByOtherServerRsp::TArenaHighOrderSetAttackedRecordByOtherServerRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TArenaHighOrderSetAttackedRecordByOtherServerRsp)
}

void TArenaHighOrderSetAttackedRecordByOtherServerRsp::InitAsDefaultInstance() {
}

TArenaHighOrderSetAttackedRecordByOtherServerRsp::TArenaHighOrderSetAttackedRecordByOtherServerRsp(const TArenaHighOrderSetAttackedRecordByOtherServerRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TArenaHighOrderSetAttackedRecordByOtherServerRsp)
}

void TArenaHighOrderSetAttackedRecordByOtherServerRsp::SharedCtor() {
  _cached_size_ = 0;
  scores_ = 0u;
  rank_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TArenaHighOrderSetAttackedRecordByOtherServerRsp::~TArenaHighOrderSetAttackedRecordByOtherServerRsp() {
  // @@protoc_insertion_point(destructor:pb.TArenaHighOrderSetAttackedRecordByOtherServerRsp)
  SharedDtor();
}

void TArenaHighOrderSetAttackedRecordByOtherServerRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TArenaHighOrderSetAttackedRecordByOtherServerRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TArenaHighOrderSetAttackedRecordByOtherServerRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TArenaHighOrderSetAttackedRecordByOtherServerRsp_descriptor_;
}

const TArenaHighOrderSetAttackedRecordByOtherServerRsp& TArenaHighOrderSetAttackedRecordByOtherServerRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fArenaHighOrder_2eproto();
  return *default_instance_;
}

TArenaHighOrderSetAttackedRecordByOtherServerRsp* TArenaHighOrderSetAttackedRecordByOtherServerRsp::default_instance_ = NULL;

TArenaHighOrderSetAttackedRecordByOtherServerRsp* TArenaHighOrderSetAttackedRecordByOtherServerRsp::New() const {
  return new TArenaHighOrderSetAttackedRecordByOtherServerRsp;
}

void TArenaHighOrderSetAttackedRecordByOtherServerRsp::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<TArenaHighOrderSetAttackedRecordByOtherServerRsp*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(scores_, rank_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TArenaHighOrderSetAttackedRecordByOtherServerRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TArenaHighOrderSetAttackedRecordByOtherServerRsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 Scores = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &scores_)));
          set_has_scores();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_Rank;
        break;
      }

      // optional int32 Rank = 2;
      case 2: {
        if (tag == 16) {
         parse_Rank:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &rank_)));
          set_has_rank();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TArenaHighOrderSetAttackedRecordByOtherServerRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TArenaHighOrderSetAttackedRecordByOtherServerRsp)
  return false;
#undef DO_
}

void TArenaHighOrderSetAttackedRecordByOtherServerRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TArenaHighOrderSetAttackedRecordByOtherServerRsp)
  // optional uint32 Scores = 1;
  if (has_scores()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->scores(), output);
  }

  // optional int32 Rank = 2;
  if (has_rank()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->rank(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TArenaHighOrderSetAttackedRecordByOtherServerRsp)
}

::google::protobuf::uint8* TArenaHighOrderSetAttackedRecordByOtherServerRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TArenaHighOrderSetAttackedRecordByOtherServerRsp)
  // optional uint32 Scores = 1;
  if (has_scores()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->scores(), target);
  }

  // optional int32 Rank = 2;
  if (has_rank()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->rank(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TArenaHighOrderSetAttackedRecordByOtherServerRsp)
  return target;
}

int TArenaHighOrderSetAttackedRecordByOtherServerRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 Scores = 1;
    if (has_scores()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->scores());
    }

    // optional int32 Rank = 2;
    if (has_rank()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->rank());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TArenaHighOrderSetAttackedRecordByOtherServerRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TArenaHighOrderSetAttackedRecordByOtherServerRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TArenaHighOrderSetAttackedRecordByOtherServerRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TArenaHighOrderSetAttackedRecordByOtherServerRsp::MergeFrom(const TArenaHighOrderSetAttackedRecordByOtherServerRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_scores()) {
      set_scores(from.scores());
    }
    if (from.has_rank()) {
      set_rank(from.rank());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TArenaHighOrderSetAttackedRecordByOtherServerRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TArenaHighOrderSetAttackedRecordByOtherServerRsp::CopyFrom(const TArenaHighOrderSetAttackedRecordByOtherServerRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TArenaHighOrderSetAttackedRecordByOtherServerRsp::IsInitialized() const {

  return true;
}

void TArenaHighOrderSetAttackedRecordByOtherServerRsp::Swap(TArenaHighOrderSetAttackedRecordByOtherServerRsp* other) {
  if (other != this) {
    std::swap(scores_, other->scores_);
    std::swap(rank_, other->rank_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TArenaHighOrderSetAttackedRecordByOtherServerRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TArenaHighOrderSetAttackedRecordByOtherServerRsp_descriptor_;
  metadata.reflection = TArenaHighOrderSetAttackedRecordByOtherServerRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TArenaHighOrderGetTotalFightForceByOtherServerReq::kUidFieldNumber;
#endif  // !_MSC_VER

TArenaHighOrderGetTotalFightForceByOtherServerReq::TArenaHighOrderGetTotalFightForceByOtherServerReq()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TArenaHighOrderGetTotalFightForceByOtherServerReq)
}

void TArenaHighOrderGetTotalFightForceByOtherServerReq::InitAsDefaultInstance() {
}

TArenaHighOrderGetTotalFightForceByOtherServerReq::TArenaHighOrderGetTotalFightForceByOtherServerReq(const TArenaHighOrderGetTotalFightForceByOtherServerReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TArenaHighOrderGetTotalFightForceByOtherServerReq)
}

void TArenaHighOrderGetTotalFightForceByOtherServerReq::SharedCtor() {
  _cached_size_ = 0;
  uid_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TArenaHighOrderGetTotalFightForceByOtherServerReq::~TArenaHighOrderGetTotalFightForceByOtherServerReq() {
  // @@protoc_insertion_point(destructor:pb.TArenaHighOrderGetTotalFightForceByOtherServerReq)
  SharedDtor();
}

void TArenaHighOrderGetTotalFightForceByOtherServerReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TArenaHighOrderGetTotalFightForceByOtherServerReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TArenaHighOrderGetTotalFightForceByOtherServerReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TArenaHighOrderGetTotalFightForceByOtherServerReq_descriptor_;
}

const TArenaHighOrderGetTotalFightForceByOtherServerReq& TArenaHighOrderGetTotalFightForceByOtherServerReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fArenaHighOrder_2eproto();
  return *default_instance_;
}

TArenaHighOrderGetTotalFightForceByOtherServerReq* TArenaHighOrderGetTotalFightForceByOtherServerReq::default_instance_ = NULL;

TArenaHighOrderGetTotalFightForceByOtherServerReq* TArenaHighOrderGetTotalFightForceByOtherServerReq::New() const {
  return new TArenaHighOrderGetTotalFightForceByOtherServerReq;
}

void TArenaHighOrderGetTotalFightForceByOtherServerReq::Clear() {
  uid_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TArenaHighOrderGetTotalFightForceByOtherServerReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TArenaHighOrderGetTotalFightForceByOtherServerReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 Uid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &uid_)));
          set_has_uid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TArenaHighOrderGetTotalFightForceByOtherServerReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TArenaHighOrderGetTotalFightForceByOtherServerReq)
  return false;
#undef DO_
}

void TArenaHighOrderGetTotalFightForceByOtherServerReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TArenaHighOrderGetTotalFightForceByOtherServerReq)
  // optional uint64 Uid = 1;
  if (has_uid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->uid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TArenaHighOrderGetTotalFightForceByOtherServerReq)
}

::google::protobuf::uint8* TArenaHighOrderGetTotalFightForceByOtherServerReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TArenaHighOrderGetTotalFightForceByOtherServerReq)
  // optional uint64 Uid = 1;
  if (has_uid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->uid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TArenaHighOrderGetTotalFightForceByOtherServerReq)
  return target;
}

int TArenaHighOrderGetTotalFightForceByOtherServerReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 Uid = 1;
    if (has_uid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->uid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TArenaHighOrderGetTotalFightForceByOtherServerReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TArenaHighOrderGetTotalFightForceByOtherServerReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TArenaHighOrderGetTotalFightForceByOtherServerReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TArenaHighOrderGetTotalFightForceByOtherServerReq::MergeFrom(const TArenaHighOrderGetTotalFightForceByOtherServerReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_uid()) {
      set_uid(from.uid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TArenaHighOrderGetTotalFightForceByOtherServerReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TArenaHighOrderGetTotalFightForceByOtherServerReq::CopyFrom(const TArenaHighOrderGetTotalFightForceByOtherServerReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TArenaHighOrderGetTotalFightForceByOtherServerReq::IsInitialized() const {

  return true;
}

void TArenaHighOrderGetTotalFightForceByOtherServerReq::Swap(TArenaHighOrderGetTotalFightForceByOtherServerReq* other) {
  if (other != this) {
    std::swap(uid_, other->uid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TArenaHighOrderGetTotalFightForceByOtherServerReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TArenaHighOrderGetTotalFightForceByOtherServerReq_descriptor_;
  metadata.reflection = TArenaHighOrderGetTotalFightForceByOtherServerReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TArenaHighOrderGetTotalFightForceByOtherServerRsp::kFightForceFieldNumber;
#endif  // !_MSC_VER

TArenaHighOrderGetTotalFightForceByOtherServerRsp::TArenaHighOrderGetTotalFightForceByOtherServerRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TArenaHighOrderGetTotalFightForceByOtherServerRsp)
}

void TArenaHighOrderGetTotalFightForceByOtherServerRsp::InitAsDefaultInstance() {
}

TArenaHighOrderGetTotalFightForceByOtherServerRsp::TArenaHighOrderGetTotalFightForceByOtherServerRsp(const TArenaHighOrderGetTotalFightForceByOtherServerRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TArenaHighOrderGetTotalFightForceByOtherServerRsp)
}

void TArenaHighOrderGetTotalFightForceByOtherServerRsp::SharedCtor() {
  _cached_size_ = 0;
  fightforce_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TArenaHighOrderGetTotalFightForceByOtherServerRsp::~TArenaHighOrderGetTotalFightForceByOtherServerRsp() {
  // @@protoc_insertion_point(destructor:pb.TArenaHighOrderGetTotalFightForceByOtherServerRsp)
  SharedDtor();
}

void TArenaHighOrderGetTotalFightForceByOtherServerRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TArenaHighOrderGetTotalFightForceByOtherServerRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TArenaHighOrderGetTotalFightForceByOtherServerRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TArenaHighOrderGetTotalFightForceByOtherServerRsp_descriptor_;
}

const TArenaHighOrderGetTotalFightForceByOtherServerRsp& TArenaHighOrderGetTotalFightForceByOtherServerRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fArenaHighOrder_2eproto();
  return *default_instance_;
}

TArenaHighOrderGetTotalFightForceByOtherServerRsp* TArenaHighOrderGetTotalFightForceByOtherServerRsp::default_instance_ = NULL;

TArenaHighOrderGetTotalFightForceByOtherServerRsp* TArenaHighOrderGetTotalFightForceByOtherServerRsp::New() const {
  return new TArenaHighOrderGetTotalFightForceByOtherServerRsp;
}

void TArenaHighOrderGetTotalFightForceByOtherServerRsp::Clear() {
  fightforce_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TArenaHighOrderGetTotalFightForceByOtherServerRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TArenaHighOrderGetTotalFightForceByOtherServerRsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 FightForce = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &fightforce_)));
          set_has_fightforce();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TArenaHighOrderGetTotalFightForceByOtherServerRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TArenaHighOrderGetTotalFightForceByOtherServerRsp)
  return false;
#undef DO_
}

void TArenaHighOrderGetTotalFightForceByOtherServerRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TArenaHighOrderGetTotalFightForceByOtherServerRsp)
  // optional uint64 FightForce = 1;
  if (has_fightforce()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->fightforce(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TArenaHighOrderGetTotalFightForceByOtherServerRsp)
}

::google::protobuf::uint8* TArenaHighOrderGetTotalFightForceByOtherServerRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TArenaHighOrderGetTotalFightForceByOtherServerRsp)
  // optional uint64 FightForce = 1;
  if (has_fightforce()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->fightforce(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TArenaHighOrderGetTotalFightForceByOtherServerRsp)
  return target;
}

int TArenaHighOrderGetTotalFightForceByOtherServerRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 FightForce = 1;
    if (has_fightforce()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->fightforce());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TArenaHighOrderGetTotalFightForceByOtherServerRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TArenaHighOrderGetTotalFightForceByOtherServerRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TArenaHighOrderGetTotalFightForceByOtherServerRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TArenaHighOrderGetTotalFightForceByOtherServerRsp::MergeFrom(const TArenaHighOrderGetTotalFightForceByOtherServerRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_fightforce()) {
      set_fightforce(from.fightforce());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TArenaHighOrderGetTotalFightForceByOtherServerRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TArenaHighOrderGetTotalFightForceByOtherServerRsp::CopyFrom(const TArenaHighOrderGetTotalFightForceByOtherServerRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TArenaHighOrderGetTotalFightForceByOtherServerRsp::IsInitialized() const {

  return true;
}

void TArenaHighOrderGetTotalFightForceByOtherServerRsp::Swap(TArenaHighOrderGetTotalFightForceByOtherServerRsp* other) {
  if (other != this) {
    std::swap(fightforce_, other->fightforce_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TArenaHighOrderGetTotalFightForceByOtherServerRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TArenaHighOrderGetTotalFightForceByOtherServerRsp_descriptor_;
  metadata.reflection = TArenaHighOrderGetTotalFightForceByOtherServerRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TArenaHighOrderQuickChallengServerReq::kUidFieldNumber;
const int TArenaHighOrderQuickChallengServerReq::kNumFieldNumber;
#endif  // !_MSC_VER

TArenaHighOrderQuickChallengServerReq::TArenaHighOrderQuickChallengServerReq()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TArenaHighOrderQuickChallengServerReq)
}

void TArenaHighOrderQuickChallengServerReq::InitAsDefaultInstance() {
}

TArenaHighOrderQuickChallengServerReq::TArenaHighOrderQuickChallengServerReq(const TArenaHighOrderQuickChallengServerReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TArenaHighOrderQuickChallengServerReq)
}

void TArenaHighOrderQuickChallengServerReq::SharedCtor() {
  _cached_size_ = 0;
  uid_ = GOOGLE_ULONGLONG(0);
  num_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TArenaHighOrderQuickChallengServerReq::~TArenaHighOrderQuickChallengServerReq() {
  // @@protoc_insertion_point(destructor:pb.TArenaHighOrderQuickChallengServerReq)
  SharedDtor();
}

void TArenaHighOrderQuickChallengServerReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TArenaHighOrderQuickChallengServerReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TArenaHighOrderQuickChallengServerReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TArenaHighOrderQuickChallengServerReq_descriptor_;
}

const TArenaHighOrderQuickChallengServerReq& TArenaHighOrderQuickChallengServerReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fArenaHighOrder_2eproto();
  return *default_instance_;
}

TArenaHighOrderQuickChallengServerReq* TArenaHighOrderQuickChallengServerReq::default_instance_ = NULL;

TArenaHighOrderQuickChallengServerReq* TArenaHighOrderQuickChallengServerReq::New() const {
  return new TArenaHighOrderQuickChallengServerReq;
}

void TArenaHighOrderQuickChallengServerReq::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<TArenaHighOrderQuickChallengServerReq*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(uid_, num_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TArenaHighOrderQuickChallengServerReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TArenaHighOrderQuickChallengServerReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 Uid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &uid_)));
          set_has_uid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_Num;
        break;
      }

      // optional uint32 Num = 2;
      case 2: {
        if (tag == 16) {
         parse_Num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &num_)));
          set_has_num();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TArenaHighOrderQuickChallengServerReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TArenaHighOrderQuickChallengServerReq)
  return false;
#undef DO_
}

void TArenaHighOrderQuickChallengServerReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TArenaHighOrderQuickChallengServerReq)
  // optional uint64 Uid = 1;
  if (has_uid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->uid(), output);
  }

  // optional uint32 Num = 2;
  if (has_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->num(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TArenaHighOrderQuickChallengServerReq)
}

::google::protobuf::uint8* TArenaHighOrderQuickChallengServerReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TArenaHighOrderQuickChallengServerReq)
  // optional uint64 Uid = 1;
  if (has_uid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->uid(), target);
  }

  // optional uint32 Num = 2;
  if (has_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->num(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TArenaHighOrderQuickChallengServerReq)
  return target;
}

int TArenaHighOrderQuickChallengServerReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 Uid = 1;
    if (has_uid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->uid());
    }

    // optional uint32 Num = 2;
    if (has_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->num());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TArenaHighOrderQuickChallengServerReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TArenaHighOrderQuickChallengServerReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TArenaHighOrderQuickChallengServerReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TArenaHighOrderQuickChallengServerReq::MergeFrom(const TArenaHighOrderQuickChallengServerReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_uid()) {
      set_uid(from.uid());
    }
    if (from.has_num()) {
      set_num(from.num());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TArenaHighOrderQuickChallengServerReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TArenaHighOrderQuickChallengServerReq::CopyFrom(const TArenaHighOrderQuickChallengServerReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TArenaHighOrderQuickChallengServerReq::IsInitialized() const {

  return true;
}

void TArenaHighOrderQuickChallengServerReq::Swap(TArenaHighOrderQuickChallengServerReq* other) {
  if (other != this) {
    std::swap(uid_, other->uid_);
    std::swap(num_, other->num_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TArenaHighOrderQuickChallengServerReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TArenaHighOrderQuickChallengServerReq_descriptor_;
  metadata.reflection = TArenaHighOrderQuickChallengServerReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TArenaHighOrderQuickChallengSingle::kMyScoresFieldNumber;
const int TArenaHighOrderQuickChallengSingle::kMyRankFieldNumber;
#endif  // !_MSC_VER

TArenaHighOrderQuickChallengSingle::TArenaHighOrderQuickChallengSingle()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TArenaHighOrderQuickChallengSingle)
}

void TArenaHighOrderQuickChallengSingle::InitAsDefaultInstance() {
}

TArenaHighOrderQuickChallengSingle::TArenaHighOrderQuickChallengSingle(const TArenaHighOrderQuickChallengSingle& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TArenaHighOrderQuickChallengSingle)
}

void TArenaHighOrderQuickChallengSingle::SharedCtor() {
  _cached_size_ = 0;
  myscores_ = 0u;
  myrank_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TArenaHighOrderQuickChallengSingle::~TArenaHighOrderQuickChallengSingle() {
  // @@protoc_insertion_point(destructor:pb.TArenaHighOrderQuickChallengSingle)
  SharedDtor();
}

void TArenaHighOrderQuickChallengSingle::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TArenaHighOrderQuickChallengSingle::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TArenaHighOrderQuickChallengSingle::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TArenaHighOrderQuickChallengSingle_descriptor_;
}

const TArenaHighOrderQuickChallengSingle& TArenaHighOrderQuickChallengSingle::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fArenaHighOrder_2eproto();
  return *default_instance_;
}

TArenaHighOrderQuickChallengSingle* TArenaHighOrderQuickChallengSingle::default_instance_ = NULL;

TArenaHighOrderQuickChallengSingle* TArenaHighOrderQuickChallengSingle::New() const {
  return new TArenaHighOrderQuickChallengSingle;
}

void TArenaHighOrderQuickChallengSingle::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<TArenaHighOrderQuickChallengSingle*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(myscores_, myrank_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TArenaHighOrderQuickChallengSingle::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TArenaHighOrderQuickChallengSingle)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 MyScores = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &myscores_)));
          set_has_myscores();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_MyRank;
        break;
      }

      // optional int32 MyRank = 2;
      case 2: {
        if (tag == 16) {
         parse_MyRank:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &myrank_)));
          set_has_myrank();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TArenaHighOrderQuickChallengSingle)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TArenaHighOrderQuickChallengSingle)
  return false;
#undef DO_
}

void TArenaHighOrderQuickChallengSingle::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TArenaHighOrderQuickChallengSingle)
  // optional uint32 MyScores = 1;
  if (has_myscores()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->myscores(), output);
  }

  // optional int32 MyRank = 2;
  if (has_myrank()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->myrank(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TArenaHighOrderQuickChallengSingle)
}

::google::protobuf::uint8* TArenaHighOrderQuickChallengSingle::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TArenaHighOrderQuickChallengSingle)
  // optional uint32 MyScores = 1;
  if (has_myscores()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->myscores(), target);
  }

  // optional int32 MyRank = 2;
  if (has_myrank()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->myrank(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TArenaHighOrderQuickChallengSingle)
  return target;
}

int TArenaHighOrderQuickChallengSingle::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 MyScores = 1;
    if (has_myscores()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->myscores());
    }

    // optional int32 MyRank = 2;
    if (has_myrank()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->myrank());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TArenaHighOrderQuickChallengSingle::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TArenaHighOrderQuickChallengSingle* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TArenaHighOrderQuickChallengSingle*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TArenaHighOrderQuickChallengSingle::MergeFrom(const TArenaHighOrderQuickChallengSingle& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_myscores()) {
      set_myscores(from.myscores());
    }
    if (from.has_myrank()) {
      set_myrank(from.myrank());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TArenaHighOrderQuickChallengSingle::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TArenaHighOrderQuickChallengSingle::CopyFrom(const TArenaHighOrderQuickChallengSingle& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TArenaHighOrderQuickChallengSingle::IsInitialized() const {

  return true;
}

void TArenaHighOrderQuickChallengSingle::Swap(TArenaHighOrderQuickChallengSingle* other) {
  if (other != this) {
    std::swap(myscores_, other->myscores_);
    std::swap(myrank_, other->myrank_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TArenaHighOrderQuickChallengSingle::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TArenaHighOrderQuickChallengSingle_descriptor_;
  metadata.reflection = TArenaHighOrderQuickChallengSingle_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TArenaHighOrderQuickChallengServerRsp::kResultArrFieldNumber;
#endif  // !_MSC_VER

TArenaHighOrderQuickChallengServerRsp::TArenaHighOrderQuickChallengServerRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TArenaHighOrderQuickChallengServerRsp)
}

void TArenaHighOrderQuickChallengServerRsp::InitAsDefaultInstance() {
}

TArenaHighOrderQuickChallengServerRsp::TArenaHighOrderQuickChallengServerRsp(const TArenaHighOrderQuickChallengServerRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TArenaHighOrderQuickChallengServerRsp)
}

void TArenaHighOrderQuickChallengServerRsp::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TArenaHighOrderQuickChallengServerRsp::~TArenaHighOrderQuickChallengServerRsp() {
  // @@protoc_insertion_point(destructor:pb.TArenaHighOrderQuickChallengServerRsp)
  SharedDtor();
}

void TArenaHighOrderQuickChallengServerRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TArenaHighOrderQuickChallengServerRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TArenaHighOrderQuickChallengServerRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TArenaHighOrderQuickChallengServerRsp_descriptor_;
}

const TArenaHighOrderQuickChallengServerRsp& TArenaHighOrderQuickChallengServerRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fArenaHighOrder_2eproto();
  return *default_instance_;
}

TArenaHighOrderQuickChallengServerRsp* TArenaHighOrderQuickChallengServerRsp::default_instance_ = NULL;

TArenaHighOrderQuickChallengServerRsp* TArenaHighOrderQuickChallengServerRsp::New() const {
  return new TArenaHighOrderQuickChallengServerRsp;
}

void TArenaHighOrderQuickChallengServerRsp::Clear() {
  resultarr_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TArenaHighOrderQuickChallengServerRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TArenaHighOrderQuickChallengServerRsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .pb.TArenaHighOrderQuickChallengSingle ResultArr = 1;
      case 1: {
        if (tag == 10) {
         parse_ResultArr:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_resultarr()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_ResultArr;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TArenaHighOrderQuickChallengServerRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TArenaHighOrderQuickChallengServerRsp)
  return false;
#undef DO_
}

void TArenaHighOrderQuickChallengServerRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TArenaHighOrderQuickChallengServerRsp)
  // repeated .pb.TArenaHighOrderQuickChallengSingle ResultArr = 1;
  for (int i = 0; i < this->resultarr_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->resultarr(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TArenaHighOrderQuickChallengServerRsp)
}

::google::protobuf::uint8* TArenaHighOrderQuickChallengServerRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TArenaHighOrderQuickChallengServerRsp)
  // repeated .pb.TArenaHighOrderQuickChallengSingle ResultArr = 1;
  for (int i = 0; i < this->resultarr_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->resultarr(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TArenaHighOrderQuickChallengServerRsp)
  return target;
}

int TArenaHighOrderQuickChallengServerRsp::ByteSize() const {
  int total_size = 0;

  // repeated .pb.TArenaHighOrderQuickChallengSingle ResultArr = 1;
  total_size += 1 * this->resultarr_size();
  for (int i = 0; i < this->resultarr_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->resultarr(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TArenaHighOrderQuickChallengServerRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TArenaHighOrderQuickChallengServerRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TArenaHighOrderQuickChallengServerRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TArenaHighOrderQuickChallengServerRsp::MergeFrom(const TArenaHighOrderQuickChallengServerRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  resultarr_.MergeFrom(from.resultarr_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TArenaHighOrderQuickChallengServerRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TArenaHighOrderQuickChallengServerRsp::CopyFrom(const TArenaHighOrderQuickChallengServerRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TArenaHighOrderQuickChallengServerRsp::IsInitialized() const {

  return true;
}

void TArenaHighOrderQuickChallengServerRsp::Swap(TArenaHighOrderQuickChallengServerRsp* other) {
  if (other != this) {
    resultarr_.Swap(&other->resultarr_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TArenaHighOrderQuickChallengServerRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TArenaHighOrderQuickChallengServerRsp_descriptor_;
  metadata.reflection = TArenaHighOrderQuickChallengServerRsp_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace pb

// @@protoc_insertion_point(global_scope)
