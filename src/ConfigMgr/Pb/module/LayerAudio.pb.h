// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: module/LayerAudio.proto

#ifndef PROTOBUF_module_2fLayerAudio_2eproto__INCLUDED
#define PROTOBUF_module_2fLayerAudio_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
#include "module/AudioDefine.pb.h"
// @@protoc_insertion_point(includes)

namespace pb {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_module_2fLayerAudio_2eproto();
void protobuf_AssignDesc_module_2fLayerAudio_2eproto();
void protobuf_ShutdownFile_module_2fLayerAudio_2eproto();

class InteractiveObjectAudioInfo;
class SvInteractiveObjectAudioInfo;
class SvGruopAudio;
class SvItemComponentAudio;
class LayerAudio;

// ===================================================================

/*FOR2LUA
<Record>
	<name>InteractiveObjectAudioInfo</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>module/LayerAudio.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class InteractiveObjectAudioInfo : public ::google::protobuf::Message {
 public:
  InteractiveObjectAudioInfo();
  virtual ~InteractiveObjectAudioInfo();

  InteractiveObjectAudioInfo(const InteractiveObjectAudioInfo& from);

  inline InteractiveObjectAudioInfo& operator=(const InteractiveObjectAudioInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const InteractiveObjectAudioInfo& default_instance();

  void Swap(InteractiveObjectAudioInfo* other);

  // implements Message ----------------------------------------------

  InteractiveObjectAudioInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const InteractiveObjectAudioInfo& from);
  void MergeFrom(const InteractiveObjectAudioInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string ComponentName = 1;
  inline bool has_componentname() const;
  inline void clear_componentname();
  static const int kComponentNameFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>InteractiveObjectAudioInfo</name>
  	<Function>
  		<name>componentname</name>
  		<replaceName>ComponentName</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_componentname</name>
  		<replaceName>ComponentName</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_componentname</name>
  		<replaceName>ComponentName</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::std::string& componentname() const;
  inline void set_componentname(const ::std::string& value);
  inline void set_componentname(const char* value);
  inline void set_componentname(const char* value, size_t size);
  inline ::std::string* mutable_componentname();
  inline ::std::string* release_componentname();
  inline void set_allocated_componentname(::std::string* componentname);

  // optional .pb.AudioInfo DownAduioInfo = 2;
  inline bool has_downaduioinfo() const;
  inline void clear_downaduioinfo();
  static const int kDownAduioInfoFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>InteractiveObjectAudioInfo</name>
  	<Function>
  		<name>downaduioinfo</name>
  		<replaceName>DownAduioInfo</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_downaduioinfo</name>
  		<replaceName>DownAduioInfo</replaceName>
  		<handler>descripter = pb_set_message_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_allocated_downaduioinfo</name>
  		<replaceName>DownAduioInfo</replaceName>
  		<handler>descripter = pb_set_message_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_downaduioinfo</name>
  		<replaceName>DownAduioInfo</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::AudioInfo& downaduioinfo() const;
  inline ::pb::AudioInfo* mutable_downaduioinfo();
  inline ::pb::AudioInfo* release_downaduioinfo();
  inline void set_allocated_downaduioinfo(::pb::AudioInfo* downaduioinfo);

  // optional .pb.AudioInfo UpAudioInfo = 3;
  inline bool has_upaudioinfo() const;
  inline void clear_upaudioinfo();
  static const int kUpAudioInfoFieldNumber = 3;
  /*FOR2LUA
  <Record>
  	<name>InteractiveObjectAudioInfo</name>
  	<Function>
  		<name>upaudioinfo</name>
  		<replaceName>UpAudioInfo</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_upaudioinfo</name>
  		<replaceName>UpAudioInfo</replaceName>
  		<handler>descripter = pb_set_message_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_allocated_upaudioinfo</name>
  		<replaceName>UpAudioInfo</replaceName>
  		<handler>descripter = pb_set_message_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_upaudioinfo</name>
  		<replaceName>UpAudioInfo</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::AudioInfo& upaudioinfo() const;
  inline ::pb::AudioInfo* mutable_upaudioinfo();
  inline ::pb::AudioInfo* release_upaudioinfo();
  inline void set_allocated_upaudioinfo(::pb::AudioInfo* upaudioinfo);

  // @@protoc_insertion_point(class_scope:pb.InteractiveObjectAudioInfo)
 private:
  inline void set_has_componentname();
  inline void clear_has_componentname();
  inline void set_has_downaduioinfo();
  inline void clear_has_downaduioinfo();
  inline void set_has_upaudioinfo();
  inline void clear_has_upaudioinfo();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* componentname_;
  ::pb::AudioInfo* downaduioinfo_;
  ::pb::AudioInfo* upaudioinfo_;
  friend void  protobuf_AddDesc_module_2fLayerAudio_2eproto();
  friend void protobuf_AssignDesc_module_2fLayerAudio_2eproto();
  friend void protobuf_ShutdownFile_module_2fLayerAudio_2eproto();

  void InitAsDefaultInstance();
  static InteractiveObjectAudioInfo* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>SvInteractiveObjectAudioInfo</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>module/LayerAudio.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class SvInteractiveObjectAudioInfo : public ::google::protobuf::Message {
 public:
  SvInteractiveObjectAudioInfo();
  virtual ~SvInteractiveObjectAudioInfo();

  SvInteractiveObjectAudioInfo(const SvInteractiveObjectAudioInfo& from);

  inline SvInteractiveObjectAudioInfo& operator=(const SvInteractiveObjectAudioInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SvInteractiveObjectAudioInfo& default_instance();

  void Swap(SvInteractiveObjectAudioInfo* other);

  // implements Message ----------------------------------------------

  SvInteractiveObjectAudioInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SvInteractiveObjectAudioInfo& from);
  void MergeFrom(const SvInteractiveObjectAudioInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string SvName = 1;
  inline bool has_svname() const;
  inline void clear_svname();
  static const int kSvNameFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>SvInteractiveObjectAudioInfo</name>
  	<Function>
  		<name>svname</name>
  		<replaceName>SvName</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_svname</name>
  		<replaceName>SvName</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_svname</name>
  		<replaceName>SvName</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::std::string& svname() const;
  inline void set_svname(const ::std::string& value);
  inline void set_svname(const char* value);
  inline void set_svname(const char* value, size_t size);
  inline ::std::string* mutable_svname();
  inline ::std::string* release_svname();
  inline void set_allocated_svname(::std::string* svname);

  // repeated .pb.SvGruopAudio SvGruopAudioInfo = 2;
  inline int svgruopaudioinfo_size() const;
  inline void clear_svgruopaudioinfo();
  static const int kSvGruopAudioInfoFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>SvInteractiveObjectAudioInfo</name>
  	<Function>
  		<name>svgruopaudioinfo</name>
  		<replaceName>SvGruopAudioInfo</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_svgruopaudioinfo</name>
  		<replaceName>SvGruopAudioInfo</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_svgruopaudioinfo</name>
  		<replaceName>SvGruopAudioInfo</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_svgruopaudioinfo</name>
  		<replaceName>SvGruopAudioInfo</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>svgruopaudioinfo_size</name>
  		<replaceName>SvGruopAudioInfo</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::SvGruopAudio& svgruopaudioinfo(int index) const;
  inline ::pb::SvGruopAudio* mutable_svgruopaudioinfo(int index);
  inline ::pb::SvGruopAudio* add_svgruopaudioinfo();
  inline const ::google::protobuf::RepeatedPtrField< ::pb::SvGruopAudio >&
      svgruopaudioinfo() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb::SvGruopAudio >*
      mutable_svgruopaudioinfo();

  // @@protoc_insertion_point(class_scope:pb.SvInteractiveObjectAudioInfo)
 private:
  inline void set_has_svname();
  inline void clear_has_svname();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* svname_;
  ::google::protobuf::RepeatedPtrField< ::pb::SvGruopAudio > svgruopaudioinfo_;
  friend void  protobuf_AddDesc_module_2fLayerAudio_2eproto();
  friend void protobuf_AssignDesc_module_2fLayerAudio_2eproto();
  friend void protobuf_ShutdownFile_module_2fLayerAudio_2eproto();

  void InitAsDefaultInstance();
  static SvInteractiveObjectAudioInfo* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>SvGruopAudio</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>module/LayerAudio.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class SvGruopAudio : public ::google::protobuf::Message {
 public:
  SvGruopAudio();
  virtual ~SvGruopAudio();

  SvGruopAudio(const SvGruopAudio& from);

  inline SvGruopAudio& operator=(const SvGruopAudio& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SvGruopAudio& default_instance();

  void Swap(SvGruopAudio* other);

  // implements Message ----------------------------------------------

  SvGruopAudio* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SvGruopAudio& from);
  void MergeFrom(const SvGruopAudio& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 GroupIndex = 1;
  inline bool has_groupindex() const;
  inline void clear_groupindex();
  static const int kGroupIndexFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>SvGruopAudio</name>
  	<Function>
  		<name>groupindex</name>
  		<replaceName>GroupIndex</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_groupindex</name>
  		<replaceName>GroupIndex</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_groupindex</name>
  		<replaceName>GroupIndex</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::int32 groupindex() const;
  inline void set_groupindex(::google::protobuf::int32 value);

  // optional .pb.AudioInfo SvItemFadeInAduio = 2;
  inline bool has_svitemfadeinaduio() const;
  inline void clear_svitemfadeinaduio();
  static const int kSvItemFadeInAduioFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>SvGruopAudio</name>
  	<Function>
  		<name>svitemfadeinaduio</name>
  		<replaceName>SvItemFadeInAduio</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_svitemfadeinaduio</name>
  		<replaceName>SvItemFadeInAduio</replaceName>
  		<handler>descripter = pb_set_message_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_allocated_svitemfadeinaduio</name>
  		<replaceName>SvItemFadeInAduio</replaceName>
  		<handler>descripter = pb_set_message_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_svitemfadeinaduio</name>
  		<replaceName>SvItemFadeInAduio</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::AudioInfo& svitemfadeinaduio() const;
  inline ::pb::AudioInfo* mutable_svitemfadeinaduio();
  inline ::pb::AudioInfo* release_svitemfadeinaduio();
  inline void set_allocated_svitemfadeinaduio(::pb::AudioInfo* svitemfadeinaduio);

  // @@protoc_insertion_point(class_scope:pb.SvGruopAudio)
 private:
  inline void set_has_groupindex();
  inline void clear_has_groupindex();
  inline void set_has_svitemfadeinaduio();
  inline void clear_has_svitemfadeinaduio();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::pb::AudioInfo* svitemfadeinaduio_;
  ::google::protobuf::int32 groupindex_;
  friend void  protobuf_AddDesc_module_2fLayerAudio_2eproto();
  friend void protobuf_AssignDesc_module_2fLayerAudio_2eproto();
  friend void protobuf_ShutdownFile_module_2fLayerAudio_2eproto();

  void InitAsDefaultInstance();
  static SvGruopAudio* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>SvItemComponentAudio</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>module/LayerAudio.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class SvItemComponentAudio : public ::google::protobuf::Message {
 public:
  SvItemComponentAudio();
  virtual ~SvItemComponentAudio();

  SvItemComponentAudio(const SvItemComponentAudio& from);

  inline SvItemComponentAudio& operator=(const SvItemComponentAudio& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SvItemComponentAudio& default_instance();

  void Swap(SvItemComponentAudio* other);

  // implements Message ----------------------------------------------

  SvItemComponentAudio* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SvItemComponentAudio& from);
  void MergeFrom(const SvItemComponentAudio& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string ComponentName = 1;
  inline bool has_componentname() const;
  inline void clear_componentname();
  static const int kComponentNameFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>SvItemComponentAudio</name>
  	<Function>
  		<name>componentname</name>
  		<replaceName>ComponentName</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_componentname</name>
  		<replaceName>ComponentName</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_componentname</name>
  		<replaceName>ComponentName</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::std::string& componentname() const;
  inline void set_componentname(const ::std::string& value);
  inline void set_componentname(const char* value);
  inline void set_componentname(const char* value, size_t size);
  inline ::std::string* mutable_componentname();
  inline ::std::string* release_componentname();
  inline void set_allocated_componentname(::std::string* componentname);

  // optional .pb.AudioInfo DownAduioInfo = 2;
  inline bool has_downaduioinfo() const;
  inline void clear_downaduioinfo();
  static const int kDownAduioInfoFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>SvItemComponentAudio</name>
  	<Function>
  		<name>downaduioinfo</name>
  		<replaceName>DownAduioInfo</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_downaduioinfo</name>
  		<replaceName>DownAduioInfo</replaceName>
  		<handler>descripter = pb_set_message_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_allocated_downaduioinfo</name>
  		<replaceName>DownAduioInfo</replaceName>
  		<handler>descripter = pb_set_message_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_downaduioinfo</name>
  		<replaceName>DownAduioInfo</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::AudioInfo& downaduioinfo() const;
  inline ::pb::AudioInfo* mutable_downaduioinfo();
  inline ::pb::AudioInfo* release_downaduioinfo();
  inline void set_allocated_downaduioinfo(::pb::AudioInfo* downaduioinfo);

  // optional .pb.AudioInfo UpAudioInfo = 3;
  inline bool has_upaudioinfo() const;
  inline void clear_upaudioinfo();
  static const int kUpAudioInfoFieldNumber = 3;
  /*FOR2LUA
  <Record>
  	<name>SvItemComponentAudio</name>
  	<Function>
  		<name>upaudioinfo</name>
  		<replaceName>UpAudioInfo</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_upaudioinfo</name>
  		<replaceName>UpAudioInfo</replaceName>
  		<handler>descripter = pb_set_message_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_allocated_upaudioinfo</name>
  		<replaceName>UpAudioInfo</replaceName>
  		<handler>descripter = pb_set_message_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_upaudioinfo</name>
  		<replaceName>UpAudioInfo</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::AudioInfo& upaudioinfo() const;
  inline ::pb::AudioInfo* mutable_upaudioinfo();
  inline ::pb::AudioInfo* release_upaudioinfo();
  inline void set_allocated_upaudioinfo(::pb::AudioInfo* upaudioinfo);

  // @@protoc_insertion_point(class_scope:pb.SvItemComponentAudio)
 private:
  inline void set_has_componentname();
  inline void clear_has_componentname();
  inline void set_has_downaduioinfo();
  inline void clear_has_downaduioinfo();
  inline void set_has_upaudioinfo();
  inline void clear_has_upaudioinfo();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* componentname_;
  ::pb::AudioInfo* downaduioinfo_;
  ::pb::AudioInfo* upaudioinfo_;
  friend void  protobuf_AddDesc_module_2fLayerAudio_2eproto();
  friend void protobuf_AssignDesc_module_2fLayerAudio_2eproto();
  friend void protobuf_ShutdownFile_module_2fLayerAudio_2eproto();

  void InitAsDefaultInstance();
  static SvItemComponentAudio* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>LayerAudio</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>module/LayerAudio.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class LayerAudio : public ::google::protobuf::Message {
 public:
  LayerAudio();
  virtual ~LayerAudio();

  LayerAudio(const LayerAudio& from);

  inline LayerAudio& operator=(const LayerAudio& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const LayerAudio& default_instance();

  void Swap(LayerAudio* other);

  // implements Message ----------------------------------------------

  LayerAudio* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const LayerAudio& from);
  void MergeFrom(const LayerAudio& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 Id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>LayerAudio</name>
  	<Function>
  		<name>id</name>
  		<replaceName>Id</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_id</name>
  		<replaceName>Id</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_id</name>
  		<replaceName>Id</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::int32 id() const;
  inline void set_id(::google::protobuf::int32 value);

  // optional string LayerName = 2;
  inline bool has_layername() const;
  inline void clear_layername();
  static const int kLayerNameFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>LayerAudio</name>
  	<Function>
  		<name>layername</name>
  		<replaceName>LayerName</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_layername</name>
  		<replaceName>LayerName</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_layername</name>
  		<replaceName>LayerName</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::std::string& layername() const;
  inline void set_layername(const ::std::string& value);
  inline void set_layername(const char* value);
  inline void set_layername(const char* value, size_t size);
  inline ::std::string* mutable_layername();
  inline ::std::string* release_layername();
  inline void set_allocated_layername(::std::string* layername);

  // repeated .pb.AudioInfo OpenAudioInfo = 3;
  inline int openaudioinfo_size() const;
  inline void clear_openaudioinfo();
  static const int kOpenAudioInfoFieldNumber = 3;
  /*FOR2LUA
  <Record>
  	<name>LayerAudio</name>
  	<Function>
  		<name>openaudioinfo</name>
  		<replaceName>OpenAudioInfo</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_openaudioinfo</name>
  		<replaceName>OpenAudioInfo</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_openaudioinfo</name>
  		<replaceName>OpenAudioInfo</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_openaudioinfo</name>
  		<replaceName>OpenAudioInfo</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>openaudioinfo_size</name>
  		<replaceName>OpenAudioInfo</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::AudioInfo& openaudioinfo(int index) const;
  inline ::pb::AudioInfo* mutable_openaudioinfo(int index);
  inline ::pb::AudioInfo* add_openaudioinfo();
  inline const ::google::protobuf::RepeatedPtrField< ::pb::AudioInfo >&
      openaudioinfo() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb::AudioInfo >*
      mutable_openaudioinfo();

  // repeated .pb.AudioInfo CloseAudioInfo = 4;
  inline int closeaudioinfo_size() const;
  inline void clear_closeaudioinfo();
  static const int kCloseAudioInfoFieldNumber = 4;
  /*FOR2LUA
  <Record>
  	<name>LayerAudio</name>
  	<Function>
  		<name>closeaudioinfo</name>
  		<replaceName>CloseAudioInfo</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_closeaudioinfo</name>
  		<replaceName>CloseAudioInfo</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_closeaudioinfo</name>
  		<replaceName>CloseAudioInfo</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_closeaudioinfo</name>
  		<replaceName>CloseAudioInfo</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>closeaudioinfo_size</name>
  		<replaceName>CloseAudioInfo</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::AudioInfo& closeaudioinfo(int index) const;
  inline ::pb::AudioInfo* mutable_closeaudioinfo(int index);
  inline ::pb::AudioInfo* add_closeaudioinfo();
  inline const ::google::protobuf::RepeatedPtrField< ::pb::AudioInfo >&
      closeaudioinfo() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb::AudioInfo >*
      mutable_closeaudioinfo();

  // repeated .pb.AudioInfo AriariAudioInfo = 5;
  inline int ariariaudioinfo_size() const;
  inline void clear_ariariaudioinfo();
  static const int kAriariAudioInfoFieldNumber = 5;
  /*FOR2LUA
  <Record>
  	<name>LayerAudio</name>
  	<Function>
  		<name>ariariaudioinfo</name>
  		<replaceName>AriariAudioInfo</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_ariariaudioinfo</name>
  		<replaceName>AriariAudioInfo</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_ariariaudioinfo</name>
  		<replaceName>AriariAudioInfo</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_ariariaudioinfo</name>
  		<replaceName>AriariAudioInfo</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>ariariaudioinfo_size</name>
  		<replaceName>AriariAudioInfo</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::AudioInfo& ariariaudioinfo(int index) const;
  inline ::pb::AudioInfo* mutable_ariariaudioinfo(int index);
  inline ::pb::AudioInfo* add_ariariaudioinfo();
  inline const ::google::protobuf::RepeatedPtrField< ::pb::AudioInfo >&
      ariariaudioinfo() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb::AudioInfo >*
      mutable_ariariaudioinfo();

  // repeated .pb.AudioInfo AmbientAudioInfo = 6;
  inline int ambientaudioinfo_size() const;
  inline void clear_ambientaudioinfo();
  static const int kAmbientAudioInfoFieldNumber = 6;
  /*FOR2LUA
  <Record>
  	<name>LayerAudio</name>
  	<Function>
  		<name>ambientaudioinfo</name>
  		<replaceName>AmbientAudioInfo</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_ambientaudioinfo</name>
  		<replaceName>AmbientAudioInfo</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_ambientaudioinfo</name>
  		<replaceName>AmbientAudioInfo</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_ambientaudioinfo</name>
  		<replaceName>AmbientAudioInfo</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>ambientaudioinfo_size</name>
  		<replaceName>AmbientAudioInfo</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::AudioInfo& ambientaudioinfo(int index) const;
  inline ::pb::AudioInfo* mutable_ambientaudioinfo(int index);
  inline ::pb::AudioInfo* add_ambientaudioinfo();
  inline const ::google::protobuf::RepeatedPtrField< ::pb::AudioInfo >&
      ambientaudioinfo() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb::AudioInfo >*
      mutable_ambientaudioinfo();

  // repeated .pb.InteractiveObjectAudioInfo InteractiveObjectAduioInfo = 7;
  inline int interactiveobjectaduioinfo_size() const;
  inline void clear_interactiveobjectaduioinfo();
  static const int kInteractiveObjectAduioInfoFieldNumber = 7;
  /*FOR2LUA
  <Record>
  	<name>LayerAudio</name>
  	<Function>
  		<name>interactiveobjectaduioinfo</name>
  		<replaceName>InteractiveObjectAduioInfo</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_interactiveobjectaduioinfo</name>
  		<replaceName>InteractiveObjectAduioInfo</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_interactiveobjectaduioinfo</name>
  		<replaceName>InteractiveObjectAduioInfo</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_interactiveobjectaduioinfo</name>
  		<replaceName>InteractiveObjectAduioInfo</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>interactiveobjectaduioinfo_size</name>
  		<replaceName>InteractiveObjectAduioInfo</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::InteractiveObjectAudioInfo& interactiveobjectaduioinfo(int index) const;
  inline ::pb::InteractiveObjectAudioInfo* mutable_interactiveobjectaduioinfo(int index);
  inline ::pb::InteractiveObjectAudioInfo* add_interactiveobjectaduioinfo();
  inline const ::google::protobuf::RepeatedPtrField< ::pb::InteractiveObjectAudioInfo >&
      interactiveobjectaduioinfo() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb::InteractiveObjectAudioInfo >*
      mutable_interactiveobjectaduioinfo();

  // repeated .pb.SvInteractiveObjectAudioInfo SvInteractiveObjectAudioInfoInfo = 8;
  inline int svinteractiveobjectaudioinfoinfo_size() const;
  inline void clear_svinteractiveobjectaudioinfoinfo();
  static const int kSvInteractiveObjectAudioInfoInfoFieldNumber = 8;
  /*FOR2LUA
  <Record>
  	<name>LayerAudio</name>
  	<Function>
  		<name>svinteractiveobjectaudioinfoinfo</name>
  		<replaceName>SvInteractiveObjectAudioInfoInfo</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_svinteractiveobjectaudioinfoinfo</name>
  		<replaceName>SvInteractiveObjectAudioInfoInfo</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_svinteractiveobjectaudioinfoinfo</name>
  		<replaceName>SvInteractiveObjectAudioInfoInfo</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_svinteractiveobjectaudioinfoinfo</name>
  		<replaceName>SvInteractiveObjectAudioInfoInfo</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>svinteractiveobjectaudioinfoinfo_size</name>
  		<replaceName>SvInteractiveObjectAudioInfoInfo</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::SvInteractiveObjectAudioInfo& svinteractiveobjectaudioinfoinfo(int index) const;
  inline ::pb::SvInteractiveObjectAudioInfo* mutable_svinteractiveobjectaudioinfoinfo(int index);
  inline ::pb::SvInteractiveObjectAudioInfo* add_svinteractiveobjectaudioinfoinfo();
  inline const ::google::protobuf::RepeatedPtrField< ::pb::SvInteractiveObjectAudioInfo >&
      svinteractiveobjectaudioinfoinfo() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb::SvInteractiveObjectAudioInfo >*
      mutable_svinteractiveobjectaudioinfoinfo();

  // @@protoc_insertion_point(class_scope:pb.LayerAudio)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_layername();
  inline void clear_has_layername();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* layername_;
  ::google::protobuf::RepeatedPtrField< ::pb::AudioInfo > openaudioinfo_;
  ::google::protobuf::RepeatedPtrField< ::pb::AudioInfo > closeaudioinfo_;
  ::google::protobuf::RepeatedPtrField< ::pb::AudioInfo > ariariaudioinfo_;
  ::google::protobuf::RepeatedPtrField< ::pb::AudioInfo > ambientaudioinfo_;
  ::google::protobuf::RepeatedPtrField< ::pb::InteractiveObjectAudioInfo > interactiveobjectaduioinfo_;
  ::google::protobuf::RepeatedPtrField< ::pb::SvInteractiveObjectAudioInfo > svinteractiveobjectaudioinfoinfo_;
  ::google::protobuf::int32 id_;
  friend void  protobuf_AddDesc_module_2fLayerAudio_2eproto();
  friend void protobuf_AssignDesc_module_2fLayerAudio_2eproto();
  friend void protobuf_ShutdownFile_module_2fLayerAudio_2eproto();

  void InitAsDefaultInstance();
  static LayerAudio* default_instance_;
};
// ===================================================================


// ===================================================================

// InteractiveObjectAudioInfo

// optional string ComponentName = 1;
inline bool InteractiveObjectAudioInfo::has_componentname() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void InteractiveObjectAudioInfo::set_has_componentname() {
  _has_bits_[0] |= 0x00000001u;
}
inline void InteractiveObjectAudioInfo::clear_has_componentname() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void InteractiveObjectAudioInfo::clear_componentname() {
  if (componentname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    componentname_->clear();
  }
  clear_has_componentname();
}
inline const ::std::string& InteractiveObjectAudioInfo::componentname() const {
  // @@protoc_insertion_point(field_get:pb.InteractiveObjectAudioInfo.ComponentName)
  return *componentname_;
}
inline void InteractiveObjectAudioInfo::set_componentname(const ::std::string& value) {
  set_has_componentname();
  if (componentname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    componentname_ = new ::std::string;
  }
  componentname_->assign(value);
  // @@protoc_insertion_point(field_set:pb.InteractiveObjectAudioInfo.ComponentName)
}
inline void InteractiveObjectAudioInfo::set_componentname(const char* value) {
  set_has_componentname();
  if (componentname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    componentname_ = new ::std::string;
  }
  componentname_->assign(value);
  // @@protoc_insertion_point(field_set_char:pb.InteractiveObjectAudioInfo.ComponentName)
}
inline void InteractiveObjectAudioInfo::set_componentname(const char* value, size_t size) {
  set_has_componentname();
  if (componentname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    componentname_ = new ::std::string;
  }
  componentname_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:pb.InteractiveObjectAudioInfo.ComponentName)
}
inline ::std::string* InteractiveObjectAudioInfo::mutable_componentname() {
  set_has_componentname();
  if (componentname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    componentname_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:pb.InteractiveObjectAudioInfo.ComponentName)
  return componentname_;
}
inline ::std::string* InteractiveObjectAudioInfo::release_componentname() {
  clear_has_componentname();
  if (componentname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = componentname_;
    componentname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void InteractiveObjectAudioInfo::set_allocated_componentname(::std::string* componentname) {
  if (componentname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete componentname_;
  }
  if (componentname) {
    set_has_componentname();
    componentname_ = componentname;
  } else {
    clear_has_componentname();
    componentname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:pb.InteractiveObjectAudioInfo.ComponentName)
}

// optional .pb.AudioInfo DownAduioInfo = 2;
inline bool InteractiveObjectAudioInfo::has_downaduioinfo() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void InteractiveObjectAudioInfo::set_has_downaduioinfo() {
  _has_bits_[0] |= 0x00000002u;
}
inline void InteractiveObjectAudioInfo::clear_has_downaduioinfo() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void InteractiveObjectAudioInfo::clear_downaduioinfo() {
  if (downaduioinfo_ != NULL) downaduioinfo_->::pb::AudioInfo::Clear();
  clear_has_downaduioinfo();
}
inline const ::pb::AudioInfo& InteractiveObjectAudioInfo::downaduioinfo() const {
  // @@protoc_insertion_point(field_get:pb.InteractiveObjectAudioInfo.DownAduioInfo)
  return downaduioinfo_ != NULL ? *downaduioinfo_ : *default_instance_->downaduioinfo_;
}
inline ::pb::AudioInfo* InteractiveObjectAudioInfo::mutable_downaduioinfo() {
  set_has_downaduioinfo();
  if (downaduioinfo_ == NULL) downaduioinfo_ = new ::pb::AudioInfo;
  // @@protoc_insertion_point(field_mutable:pb.InteractiveObjectAudioInfo.DownAduioInfo)
  return downaduioinfo_;
}
inline ::pb::AudioInfo* InteractiveObjectAudioInfo::release_downaduioinfo() {
  clear_has_downaduioinfo();
  ::pb::AudioInfo* temp = downaduioinfo_;
  downaduioinfo_ = NULL;
  return temp;
}
inline void InteractiveObjectAudioInfo::set_allocated_downaduioinfo(::pb::AudioInfo* downaduioinfo) {
  delete downaduioinfo_;
  downaduioinfo_ = downaduioinfo;
  if (downaduioinfo) {
    set_has_downaduioinfo();
  } else {
    clear_has_downaduioinfo();
  }
  // @@protoc_insertion_point(field_set_allocated:pb.InteractiveObjectAudioInfo.DownAduioInfo)
}

// optional .pb.AudioInfo UpAudioInfo = 3;
inline bool InteractiveObjectAudioInfo::has_upaudioinfo() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void InteractiveObjectAudioInfo::set_has_upaudioinfo() {
  _has_bits_[0] |= 0x00000004u;
}
inline void InteractiveObjectAudioInfo::clear_has_upaudioinfo() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void InteractiveObjectAudioInfo::clear_upaudioinfo() {
  if (upaudioinfo_ != NULL) upaudioinfo_->::pb::AudioInfo::Clear();
  clear_has_upaudioinfo();
}
inline const ::pb::AudioInfo& InteractiveObjectAudioInfo::upaudioinfo() const {
  // @@protoc_insertion_point(field_get:pb.InteractiveObjectAudioInfo.UpAudioInfo)
  return upaudioinfo_ != NULL ? *upaudioinfo_ : *default_instance_->upaudioinfo_;
}
inline ::pb::AudioInfo* InteractiveObjectAudioInfo::mutable_upaudioinfo() {
  set_has_upaudioinfo();
  if (upaudioinfo_ == NULL) upaudioinfo_ = new ::pb::AudioInfo;
  // @@protoc_insertion_point(field_mutable:pb.InteractiveObjectAudioInfo.UpAudioInfo)
  return upaudioinfo_;
}
inline ::pb::AudioInfo* InteractiveObjectAudioInfo::release_upaudioinfo() {
  clear_has_upaudioinfo();
  ::pb::AudioInfo* temp = upaudioinfo_;
  upaudioinfo_ = NULL;
  return temp;
}
inline void InteractiveObjectAudioInfo::set_allocated_upaudioinfo(::pb::AudioInfo* upaudioinfo) {
  delete upaudioinfo_;
  upaudioinfo_ = upaudioinfo;
  if (upaudioinfo) {
    set_has_upaudioinfo();
  } else {
    clear_has_upaudioinfo();
  }
  // @@protoc_insertion_point(field_set_allocated:pb.InteractiveObjectAudioInfo.UpAudioInfo)
}

// -------------------------------------------------------------------

// SvInteractiveObjectAudioInfo

// optional string SvName = 1;
inline bool SvInteractiveObjectAudioInfo::has_svname() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SvInteractiveObjectAudioInfo::set_has_svname() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SvInteractiveObjectAudioInfo::clear_has_svname() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SvInteractiveObjectAudioInfo::clear_svname() {
  if (svname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    svname_->clear();
  }
  clear_has_svname();
}
inline const ::std::string& SvInteractiveObjectAudioInfo::svname() const {
  // @@protoc_insertion_point(field_get:pb.SvInteractiveObjectAudioInfo.SvName)
  return *svname_;
}
inline void SvInteractiveObjectAudioInfo::set_svname(const ::std::string& value) {
  set_has_svname();
  if (svname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    svname_ = new ::std::string;
  }
  svname_->assign(value);
  // @@protoc_insertion_point(field_set:pb.SvInteractiveObjectAudioInfo.SvName)
}
inline void SvInteractiveObjectAudioInfo::set_svname(const char* value) {
  set_has_svname();
  if (svname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    svname_ = new ::std::string;
  }
  svname_->assign(value);
  // @@protoc_insertion_point(field_set_char:pb.SvInteractiveObjectAudioInfo.SvName)
}
inline void SvInteractiveObjectAudioInfo::set_svname(const char* value, size_t size) {
  set_has_svname();
  if (svname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    svname_ = new ::std::string;
  }
  svname_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:pb.SvInteractiveObjectAudioInfo.SvName)
}
inline ::std::string* SvInteractiveObjectAudioInfo::mutable_svname() {
  set_has_svname();
  if (svname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    svname_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:pb.SvInteractiveObjectAudioInfo.SvName)
  return svname_;
}
inline ::std::string* SvInteractiveObjectAudioInfo::release_svname() {
  clear_has_svname();
  if (svname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = svname_;
    svname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void SvInteractiveObjectAudioInfo::set_allocated_svname(::std::string* svname) {
  if (svname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete svname_;
  }
  if (svname) {
    set_has_svname();
    svname_ = svname;
  } else {
    clear_has_svname();
    svname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:pb.SvInteractiveObjectAudioInfo.SvName)
}

// repeated .pb.SvGruopAudio SvGruopAudioInfo = 2;
inline int SvInteractiveObjectAudioInfo::svgruopaudioinfo_size() const {
  return svgruopaudioinfo_.size();
}
inline void SvInteractiveObjectAudioInfo::clear_svgruopaudioinfo() {
  svgruopaudioinfo_.Clear();
}
inline const ::pb::SvGruopAudio& SvInteractiveObjectAudioInfo::svgruopaudioinfo(int index) const {
  // @@protoc_insertion_point(field_get:pb.SvInteractiveObjectAudioInfo.SvGruopAudioInfo)
  return svgruopaudioinfo_.Get(index);
}
inline ::pb::SvGruopAudio* SvInteractiveObjectAudioInfo::mutable_svgruopaudioinfo(int index) {
  // @@protoc_insertion_point(field_mutable:pb.SvInteractiveObjectAudioInfo.SvGruopAudioInfo)
  return svgruopaudioinfo_.Mutable(index);
}
inline ::pb::SvGruopAudio* SvInteractiveObjectAudioInfo::add_svgruopaudioinfo() {
  // @@protoc_insertion_point(field_add:pb.SvInteractiveObjectAudioInfo.SvGruopAudioInfo)
  return svgruopaudioinfo_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::SvGruopAudio >&
SvInteractiveObjectAudioInfo::svgruopaudioinfo() const {
  // @@protoc_insertion_point(field_list:pb.SvInteractiveObjectAudioInfo.SvGruopAudioInfo)
  return svgruopaudioinfo_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb::SvGruopAudio >*
SvInteractiveObjectAudioInfo::mutable_svgruopaudioinfo() {
  // @@protoc_insertion_point(field_mutable_list:pb.SvInteractiveObjectAudioInfo.SvGruopAudioInfo)
  return &svgruopaudioinfo_;
}

// -------------------------------------------------------------------

// SvGruopAudio

// optional int32 GroupIndex = 1;
inline bool SvGruopAudio::has_groupindex() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SvGruopAudio::set_has_groupindex() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SvGruopAudio::clear_has_groupindex() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SvGruopAudio::clear_groupindex() {
  groupindex_ = 0;
  clear_has_groupindex();
}
inline ::google::protobuf::int32 SvGruopAudio::groupindex() const {
  // @@protoc_insertion_point(field_get:pb.SvGruopAudio.GroupIndex)
  return groupindex_;
}
inline void SvGruopAudio::set_groupindex(::google::protobuf::int32 value) {
  set_has_groupindex();
  groupindex_ = value;
  // @@protoc_insertion_point(field_set:pb.SvGruopAudio.GroupIndex)
}

// optional .pb.AudioInfo SvItemFadeInAduio = 2;
inline bool SvGruopAudio::has_svitemfadeinaduio() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SvGruopAudio::set_has_svitemfadeinaduio() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SvGruopAudio::clear_has_svitemfadeinaduio() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SvGruopAudio::clear_svitemfadeinaduio() {
  if (svitemfadeinaduio_ != NULL) svitemfadeinaduio_->::pb::AudioInfo::Clear();
  clear_has_svitemfadeinaduio();
}
inline const ::pb::AudioInfo& SvGruopAudio::svitemfadeinaduio() const {
  // @@protoc_insertion_point(field_get:pb.SvGruopAudio.SvItemFadeInAduio)
  return svitemfadeinaduio_ != NULL ? *svitemfadeinaduio_ : *default_instance_->svitemfadeinaduio_;
}
inline ::pb::AudioInfo* SvGruopAudio::mutable_svitemfadeinaduio() {
  set_has_svitemfadeinaduio();
  if (svitemfadeinaduio_ == NULL) svitemfadeinaduio_ = new ::pb::AudioInfo;
  // @@protoc_insertion_point(field_mutable:pb.SvGruopAudio.SvItemFadeInAduio)
  return svitemfadeinaduio_;
}
inline ::pb::AudioInfo* SvGruopAudio::release_svitemfadeinaduio() {
  clear_has_svitemfadeinaduio();
  ::pb::AudioInfo* temp = svitemfadeinaduio_;
  svitemfadeinaduio_ = NULL;
  return temp;
}
inline void SvGruopAudio::set_allocated_svitemfadeinaduio(::pb::AudioInfo* svitemfadeinaduio) {
  delete svitemfadeinaduio_;
  svitemfadeinaduio_ = svitemfadeinaduio;
  if (svitemfadeinaduio) {
    set_has_svitemfadeinaduio();
  } else {
    clear_has_svitemfadeinaduio();
  }
  // @@protoc_insertion_point(field_set_allocated:pb.SvGruopAudio.SvItemFadeInAduio)
}

// -------------------------------------------------------------------

// SvItemComponentAudio

// optional string ComponentName = 1;
inline bool SvItemComponentAudio::has_componentname() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SvItemComponentAudio::set_has_componentname() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SvItemComponentAudio::clear_has_componentname() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SvItemComponentAudio::clear_componentname() {
  if (componentname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    componentname_->clear();
  }
  clear_has_componentname();
}
inline const ::std::string& SvItemComponentAudio::componentname() const {
  // @@protoc_insertion_point(field_get:pb.SvItemComponentAudio.ComponentName)
  return *componentname_;
}
inline void SvItemComponentAudio::set_componentname(const ::std::string& value) {
  set_has_componentname();
  if (componentname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    componentname_ = new ::std::string;
  }
  componentname_->assign(value);
  // @@protoc_insertion_point(field_set:pb.SvItemComponentAudio.ComponentName)
}
inline void SvItemComponentAudio::set_componentname(const char* value) {
  set_has_componentname();
  if (componentname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    componentname_ = new ::std::string;
  }
  componentname_->assign(value);
  // @@protoc_insertion_point(field_set_char:pb.SvItemComponentAudio.ComponentName)
}
inline void SvItemComponentAudio::set_componentname(const char* value, size_t size) {
  set_has_componentname();
  if (componentname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    componentname_ = new ::std::string;
  }
  componentname_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:pb.SvItemComponentAudio.ComponentName)
}
inline ::std::string* SvItemComponentAudio::mutable_componentname() {
  set_has_componentname();
  if (componentname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    componentname_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:pb.SvItemComponentAudio.ComponentName)
  return componentname_;
}
inline ::std::string* SvItemComponentAudio::release_componentname() {
  clear_has_componentname();
  if (componentname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = componentname_;
    componentname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void SvItemComponentAudio::set_allocated_componentname(::std::string* componentname) {
  if (componentname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete componentname_;
  }
  if (componentname) {
    set_has_componentname();
    componentname_ = componentname;
  } else {
    clear_has_componentname();
    componentname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:pb.SvItemComponentAudio.ComponentName)
}

// optional .pb.AudioInfo DownAduioInfo = 2;
inline bool SvItemComponentAudio::has_downaduioinfo() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SvItemComponentAudio::set_has_downaduioinfo() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SvItemComponentAudio::clear_has_downaduioinfo() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SvItemComponentAudio::clear_downaduioinfo() {
  if (downaduioinfo_ != NULL) downaduioinfo_->::pb::AudioInfo::Clear();
  clear_has_downaduioinfo();
}
inline const ::pb::AudioInfo& SvItemComponentAudio::downaduioinfo() const {
  // @@protoc_insertion_point(field_get:pb.SvItemComponentAudio.DownAduioInfo)
  return downaduioinfo_ != NULL ? *downaduioinfo_ : *default_instance_->downaduioinfo_;
}
inline ::pb::AudioInfo* SvItemComponentAudio::mutable_downaduioinfo() {
  set_has_downaduioinfo();
  if (downaduioinfo_ == NULL) downaduioinfo_ = new ::pb::AudioInfo;
  // @@protoc_insertion_point(field_mutable:pb.SvItemComponentAudio.DownAduioInfo)
  return downaduioinfo_;
}
inline ::pb::AudioInfo* SvItemComponentAudio::release_downaduioinfo() {
  clear_has_downaduioinfo();
  ::pb::AudioInfo* temp = downaduioinfo_;
  downaduioinfo_ = NULL;
  return temp;
}
inline void SvItemComponentAudio::set_allocated_downaduioinfo(::pb::AudioInfo* downaduioinfo) {
  delete downaduioinfo_;
  downaduioinfo_ = downaduioinfo;
  if (downaduioinfo) {
    set_has_downaduioinfo();
  } else {
    clear_has_downaduioinfo();
  }
  // @@protoc_insertion_point(field_set_allocated:pb.SvItemComponentAudio.DownAduioInfo)
}

// optional .pb.AudioInfo UpAudioInfo = 3;
inline bool SvItemComponentAudio::has_upaudioinfo() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void SvItemComponentAudio::set_has_upaudioinfo() {
  _has_bits_[0] |= 0x00000004u;
}
inline void SvItemComponentAudio::clear_has_upaudioinfo() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void SvItemComponentAudio::clear_upaudioinfo() {
  if (upaudioinfo_ != NULL) upaudioinfo_->::pb::AudioInfo::Clear();
  clear_has_upaudioinfo();
}
inline const ::pb::AudioInfo& SvItemComponentAudio::upaudioinfo() const {
  // @@protoc_insertion_point(field_get:pb.SvItemComponentAudio.UpAudioInfo)
  return upaudioinfo_ != NULL ? *upaudioinfo_ : *default_instance_->upaudioinfo_;
}
inline ::pb::AudioInfo* SvItemComponentAudio::mutable_upaudioinfo() {
  set_has_upaudioinfo();
  if (upaudioinfo_ == NULL) upaudioinfo_ = new ::pb::AudioInfo;
  // @@protoc_insertion_point(field_mutable:pb.SvItemComponentAudio.UpAudioInfo)
  return upaudioinfo_;
}
inline ::pb::AudioInfo* SvItemComponentAudio::release_upaudioinfo() {
  clear_has_upaudioinfo();
  ::pb::AudioInfo* temp = upaudioinfo_;
  upaudioinfo_ = NULL;
  return temp;
}
inline void SvItemComponentAudio::set_allocated_upaudioinfo(::pb::AudioInfo* upaudioinfo) {
  delete upaudioinfo_;
  upaudioinfo_ = upaudioinfo;
  if (upaudioinfo) {
    set_has_upaudioinfo();
  } else {
    clear_has_upaudioinfo();
  }
  // @@protoc_insertion_point(field_set_allocated:pb.SvItemComponentAudio.UpAudioInfo)
}

// -------------------------------------------------------------------

// LayerAudio

// optional int32 Id = 1;
inline bool LayerAudio::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void LayerAudio::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void LayerAudio::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void LayerAudio::clear_id() {
  id_ = 0;
  clear_has_id();
}
inline ::google::protobuf::int32 LayerAudio::id() const {
  // @@protoc_insertion_point(field_get:pb.LayerAudio.Id)
  return id_;
}
inline void LayerAudio::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:pb.LayerAudio.Id)
}

// optional string LayerName = 2;
inline bool LayerAudio::has_layername() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void LayerAudio::set_has_layername() {
  _has_bits_[0] |= 0x00000002u;
}
inline void LayerAudio::clear_has_layername() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void LayerAudio::clear_layername() {
  if (layername_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    layername_->clear();
  }
  clear_has_layername();
}
inline const ::std::string& LayerAudio::layername() const {
  // @@protoc_insertion_point(field_get:pb.LayerAudio.LayerName)
  return *layername_;
}
inline void LayerAudio::set_layername(const ::std::string& value) {
  set_has_layername();
  if (layername_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    layername_ = new ::std::string;
  }
  layername_->assign(value);
  // @@protoc_insertion_point(field_set:pb.LayerAudio.LayerName)
}
inline void LayerAudio::set_layername(const char* value) {
  set_has_layername();
  if (layername_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    layername_ = new ::std::string;
  }
  layername_->assign(value);
  // @@protoc_insertion_point(field_set_char:pb.LayerAudio.LayerName)
}
inline void LayerAudio::set_layername(const char* value, size_t size) {
  set_has_layername();
  if (layername_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    layername_ = new ::std::string;
  }
  layername_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:pb.LayerAudio.LayerName)
}
inline ::std::string* LayerAudio::mutable_layername() {
  set_has_layername();
  if (layername_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    layername_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:pb.LayerAudio.LayerName)
  return layername_;
}
inline ::std::string* LayerAudio::release_layername() {
  clear_has_layername();
  if (layername_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = layername_;
    layername_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void LayerAudio::set_allocated_layername(::std::string* layername) {
  if (layername_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete layername_;
  }
  if (layername) {
    set_has_layername();
    layername_ = layername;
  } else {
    clear_has_layername();
    layername_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:pb.LayerAudio.LayerName)
}

// repeated .pb.AudioInfo OpenAudioInfo = 3;
inline int LayerAudio::openaudioinfo_size() const {
  return openaudioinfo_.size();
}
inline void LayerAudio::clear_openaudioinfo() {
  openaudioinfo_.Clear();
}
inline const ::pb::AudioInfo& LayerAudio::openaudioinfo(int index) const {
  // @@protoc_insertion_point(field_get:pb.LayerAudio.OpenAudioInfo)
  return openaudioinfo_.Get(index);
}
inline ::pb::AudioInfo* LayerAudio::mutable_openaudioinfo(int index) {
  // @@protoc_insertion_point(field_mutable:pb.LayerAudio.OpenAudioInfo)
  return openaudioinfo_.Mutable(index);
}
inline ::pb::AudioInfo* LayerAudio::add_openaudioinfo() {
  // @@protoc_insertion_point(field_add:pb.LayerAudio.OpenAudioInfo)
  return openaudioinfo_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::AudioInfo >&
LayerAudio::openaudioinfo() const {
  // @@protoc_insertion_point(field_list:pb.LayerAudio.OpenAudioInfo)
  return openaudioinfo_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb::AudioInfo >*
LayerAudio::mutable_openaudioinfo() {
  // @@protoc_insertion_point(field_mutable_list:pb.LayerAudio.OpenAudioInfo)
  return &openaudioinfo_;
}

// repeated .pb.AudioInfo CloseAudioInfo = 4;
inline int LayerAudio::closeaudioinfo_size() const {
  return closeaudioinfo_.size();
}
inline void LayerAudio::clear_closeaudioinfo() {
  closeaudioinfo_.Clear();
}
inline const ::pb::AudioInfo& LayerAudio::closeaudioinfo(int index) const {
  // @@protoc_insertion_point(field_get:pb.LayerAudio.CloseAudioInfo)
  return closeaudioinfo_.Get(index);
}
inline ::pb::AudioInfo* LayerAudio::mutable_closeaudioinfo(int index) {
  // @@protoc_insertion_point(field_mutable:pb.LayerAudio.CloseAudioInfo)
  return closeaudioinfo_.Mutable(index);
}
inline ::pb::AudioInfo* LayerAudio::add_closeaudioinfo() {
  // @@protoc_insertion_point(field_add:pb.LayerAudio.CloseAudioInfo)
  return closeaudioinfo_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::AudioInfo >&
LayerAudio::closeaudioinfo() const {
  // @@protoc_insertion_point(field_list:pb.LayerAudio.CloseAudioInfo)
  return closeaudioinfo_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb::AudioInfo >*
LayerAudio::mutable_closeaudioinfo() {
  // @@protoc_insertion_point(field_mutable_list:pb.LayerAudio.CloseAudioInfo)
  return &closeaudioinfo_;
}

// repeated .pb.AudioInfo AriariAudioInfo = 5;
inline int LayerAudio::ariariaudioinfo_size() const {
  return ariariaudioinfo_.size();
}
inline void LayerAudio::clear_ariariaudioinfo() {
  ariariaudioinfo_.Clear();
}
inline const ::pb::AudioInfo& LayerAudio::ariariaudioinfo(int index) const {
  // @@protoc_insertion_point(field_get:pb.LayerAudio.AriariAudioInfo)
  return ariariaudioinfo_.Get(index);
}
inline ::pb::AudioInfo* LayerAudio::mutable_ariariaudioinfo(int index) {
  // @@protoc_insertion_point(field_mutable:pb.LayerAudio.AriariAudioInfo)
  return ariariaudioinfo_.Mutable(index);
}
inline ::pb::AudioInfo* LayerAudio::add_ariariaudioinfo() {
  // @@protoc_insertion_point(field_add:pb.LayerAudio.AriariAudioInfo)
  return ariariaudioinfo_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::AudioInfo >&
LayerAudio::ariariaudioinfo() const {
  // @@protoc_insertion_point(field_list:pb.LayerAudio.AriariAudioInfo)
  return ariariaudioinfo_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb::AudioInfo >*
LayerAudio::mutable_ariariaudioinfo() {
  // @@protoc_insertion_point(field_mutable_list:pb.LayerAudio.AriariAudioInfo)
  return &ariariaudioinfo_;
}

// repeated .pb.AudioInfo AmbientAudioInfo = 6;
inline int LayerAudio::ambientaudioinfo_size() const {
  return ambientaudioinfo_.size();
}
inline void LayerAudio::clear_ambientaudioinfo() {
  ambientaudioinfo_.Clear();
}
inline const ::pb::AudioInfo& LayerAudio::ambientaudioinfo(int index) const {
  // @@protoc_insertion_point(field_get:pb.LayerAudio.AmbientAudioInfo)
  return ambientaudioinfo_.Get(index);
}
inline ::pb::AudioInfo* LayerAudio::mutable_ambientaudioinfo(int index) {
  // @@protoc_insertion_point(field_mutable:pb.LayerAudio.AmbientAudioInfo)
  return ambientaudioinfo_.Mutable(index);
}
inline ::pb::AudioInfo* LayerAudio::add_ambientaudioinfo() {
  // @@protoc_insertion_point(field_add:pb.LayerAudio.AmbientAudioInfo)
  return ambientaudioinfo_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::AudioInfo >&
LayerAudio::ambientaudioinfo() const {
  // @@protoc_insertion_point(field_list:pb.LayerAudio.AmbientAudioInfo)
  return ambientaudioinfo_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb::AudioInfo >*
LayerAudio::mutable_ambientaudioinfo() {
  // @@protoc_insertion_point(field_mutable_list:pb.LayerAudio.AmbientAudioInfo)
  return &ambientaudioinfo_;
}

// repeated .pb.InteractiveObjectAudioInfo InteractiveObjectAduioInfo = 7;
inline int LayerAudio::interactiveobjectaduioinfo_size() const {
  return interactiveobjectaduioinfo_.size();
}
inline void LayerAudio::clear_interactiveobjectaduioinfo() {
  interactiveobjectaduioinfo_.Clear();
}
inline const ::pb::InteractiveObjectAudioInfo& LayerAudio::interactiveobjectaduioinfo(int index) const {
  // @@protoc_insertion_point(field_get:pb.LayerAudio.InteractiveObjectAduioInfo)
  return interactiveobjectaduioinfo_.Get(index);
}
inline ::pb::InteractiveObjectAudioInfo* LayerAudio::mutable_interactiveobjectaduioinfo(int index) {
  // @@protoc_insertion_point(field_mutable:pb.LayerAudio.InteractiveObjectAduioInfo)
  return interactiveobjectaduioinfo_.Mutable(index);
}
inline ::pb::InteractiveObjectAudioInfo* LayerAudio::add_interactiveobjectaduioinfo() {
  // @@protoc_insertion_point(field_add:pb.LayerAudio.InteractiveObjectAduioInfo)
  return interactiveobjectaduioinfo_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::InteractiveObjectAudioInfo >&
LayerAudio::interactiveobjectaduioinfo() const {
  // @@protoc_insertion_point(field_list:pb.LayerAudio.InteractiveObjectAduioInfo)
  return interactiveobjectaduioinfo_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb::InteractiveObjectAudioInfo >*
LayerAudio::mutable_interactiveobjectaduioinfo() {
  // @@protoc_insertion_point(field_mutable_list:pb.LayerAudio.InteractiveObjectAduioInfo)
  return &interactiveobjectaduioinfo_;
}

// repeated .pb.SvInteractiveObjectAudioInfo SvInteractiveObjectAudioInfoInfo = 8;
inline int LayerAudio::svinteractiveobjectaudioinfoinfo_size() const {
  return svinteractiveobjectaudioinfoinfo_.size();
}
inline void LayerAudio::clear_svinteractiveobjectaudioinfoinfo() {
  svinteractiveobjectaudioinfoinfo_.Clear();
}
inline const ::pb::SvInteractiveObjectAudioInfo& LayerAudio::svinteractiveobjectaudioinfoinfo(int index) const {
  // @@protoc_insertion_point(field_get:pb.LayerAudio.SvInteractiveObjectAudioInfoInfo)
  return svinteractiveobjectaudioinfoinfo_.Get(index);
}
inline ::pb::SvInteractiveObjectAudioInfo* LayerAudio::mutable_svinteractiveobjectaudioinfoinfo(int index) {
  // @@protoc_insertion_point(field_mutable:pb.LayerAudio.SvInteractiveObjectAudioInfoInfo)
  return svinteractiveobjectaudioinfoinfo_.Mutable(index);
}
inline ::pb::SvInteractiveObjectAudioInfo* LayerAudio::add_svinteractiveobjectaudioinfoinfo() {
  // @@protoc_insertion_point(field_add:pb.LayerAudio.SvInteractiveObjectAudioInfoInfo)
  return svinteractiveobjectaudioinfoinfo_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::SvInteractiveObjectAudioInfo >&
LayerAudio::svinteractiveobjectaudioinfoinfo() const {
  // @@protoc_insertion_point(field_list:pb.LayerAudio.SvInteractiveObjectAudioInfoInfo)
  return svinteractiveobjectaudioinfoinfo_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb::SvInteractiveObjectAudioInfo >*
LayerAudio::mutable_svinteractiveobjectaudioinfoinfo() {
  // @@protoc_insertion_point(field_mutable_list:pb.LayerAudio.SvInteractiveObjectAudioInfoInfo)
  return &svinteractiveobjectaudioinfoinfo_;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace pb

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_module_2fLayerAudio_2eproto__INCLUDED
