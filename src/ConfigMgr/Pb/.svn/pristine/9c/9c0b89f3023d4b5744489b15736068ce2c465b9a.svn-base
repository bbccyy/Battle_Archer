// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: net/Destiny.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "net/Destiny.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace pb {

namespace {

const ::google::protobuf::Descriptor* TDestinyStone_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TDestinyStone_reflection_ = NULL;
const ::google::protobuf::Descriptor* TDestinySlab_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TDestinySlab_reflection_ = NULL;
const ::google::protobuf::Descriptor* TDestinyInfoRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TDestinyInfoRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* TDestinyNotify_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TDestinyNotify_reflection_ = NULL;
const ::google::protobuf::Descriptor* TDestinyInlayReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TDestinyInlayReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* TDestinyActivateSlabReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TDestinyActivateSlabReq_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* EDestinySlabStatus_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_net_2fDestiny_2eproto() {
  protobuf_AddDesc_net_2fDestiny_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "net/Destiny.proto");
  GOOGLE_CHECK(file != NULL);
  TDestinyStone_descriptor_ = file->message_type(0);
  static const int TDestinyStone_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TDestinyStone, stoneid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TDestinyStone, status_),
  };
  TDestinyStone_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TDestinyStone_descriptor_,
      TDestinyStone::default_instance_,
      TDestinyStone_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TDestinyStone, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TDestinyStone, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TDestinyStone));
  TDestinySlab_descriptor_ = file->message_type(1);
  static const int TDestinySlab_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TDestinySlab, slabid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TDestinySlab, status_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TDestinySlab, stonearr_),
  };
  TDestinySlab_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TDestinySlab_descriptor_,
      TDestinySlab::default_instance_,
      TDestinySlab_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TDestinySlab, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TDestinySlab, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TDestinySlab));
  TDestinyInfoRsp_descriptor_ = file->message_type(2);
  static const int TDestinyInfoRsp_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TDestinyInfoRsp, destinyarr_),
  };
  TDestinyInfoRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TDestinyInfoRsp_descriptor_,
      TDestinyInfoRsp::default_instance_,
      TDestinyInfoRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TDestinyInfoRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TDestinyInfoRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TDestinyInfoRsp));
  TDestinyNotify_descriptor_ = file->message_type(3);
  static const int TDestinyNotify_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TDestinyNotify, destinyarr_),
  };
  TDestinyNotify_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TDestinyNotify_descriptor_,
      TDestinyNotify::default_instance_,
      TDestinyNotify_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TDestinyNotify, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TDestinyNotify, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TDestinyNotify));
  TDestinyInlayReq_descriptor_ = file->message_type(4);
  static const int TDestinyInlayReq_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TDestinyInlayReq, stoneid_),
  };
  TDestinyInlayReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TDestinyInlayReq_descriptor_,
      TDestinyInlayReq::default_instance_,
      TDestinyInlayReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TDestinyInlayReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TDestinyInlayReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TDestinyInlayReq));
  TDestinyActivateSlabReq_descriptor_ = file->message_type(5);
  static const int TDestinyActivateSlabReq_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TDestinyActivateSlabReq, slabid_),
  };
  TDestinyActivateSlabReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TDestinyActivateSlabReq_descriptor_,
      TDestinyActivateSlabReq::default_instance_,
      TDestinyActivateSlabReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TDestinyActivateSlabReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TDestinyActivateSlabReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TDestinyActivateSlabReq));
  EDestinySlabStatus_descriptor_ = file->enum_type(0);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_net_2fDestiny_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TDestinyStone_descriptor_, &TDestinyStone::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TDestinySlab_descriptor_, &TDestinySlab::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TDestinyInfoRsp_descriptor_, &TDestinyInfoRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TDestinyNotify_descriptor_, &TDestinyNotify::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TDestinyInlayReq_descriptor_, &TDestinyInlayReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TDestinyActivateSlabReq_descriptor_, &TDestinyActivateSlabReq::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_net_2fDestiny_2eproto() {
  delete TDestinyStone::default_instance_;
  delete TDestinyStone_reflection_;
  delete TDestinySlab::default_instance_;
  delete TDestinySlab_reflection_;
  delete TDestinyInfoRsp::default_instance_;
  delete TDestinyInfoRsp_reflection_;
  delete TDestinyNotify::default_instance_;
  delete TDestinyNotify_reflection_;
  delete TDestinyInlayReq::default_instance_;
  delete TDestinyInlayReq_reflection_;
  delete TDestinyActivateSlabReq::default_instance_;
  delete TDestinyActivateSlabReq_reflection_;
}

void protobuf_AddDesc_net_2fDestiny_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\021net/Destiny.proto\022\002pb\"0\n\rTDestinyStone"
    "\022\017\n\007StoneId\030\001 \001(\r\022\016\n\006Status\030\002 \001(\r\"S\n\014TDe"
    "stinySlab\022\016\n\006SlabId\030\001 \001(\r\022\016\n\006Status\030\002 \001("
    "\r\022#\n\010StoneArr\030\003 \003(\0132\021.pb.TDestinyStone\"7"
    "\n\017TDestinyInfoRsp\022$\n\nDestinyArr\030\001 \003(\0132\020."
    "pb.TDestinySlab\"6\n\016TDestinyNotify\022$\n\nDes"
    "tinyArr\030\001 \003(\0132\020.pb.TDestinySlab\"#\n\020TDest"
    "inyInlayReq\022\017\n\007StoneId\030\001 \001(\r\")\n\027TDestiny"
    "ActivateSlabReq\022\016\n\006SlabId\030\001 \001(\r*7\n\022EDest"
    "inySlabStatus\022\020\n\014SlabUnActive\020\000\022\017\n\013SlabA"
    "ctived\020\001", 408);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "net/Destiny.proto", &protobuf_RegisterTypes);
  TDestinyStone::default_instance_ = new TDestinyStone();
  TDestinySlab::default_instance_ = new TDestinySlab();
  TDestinyInfoRsp::default_instance_ = new TDestinyInfoRsp();
  TDestinyNotify::default_instance_ = new TDestinyNotify();
  TDestinyInlayReq::default_instance_ = new TDestinyInlayReq();
  TDestinyActivateSlabReq::default_instance_ = new TDestinyActivateSlabReq();
  TDestinyStone::default_instance_->InitAsDefaultInstance();
  TDestinySlab::default_instance_->InitAsDefaultInstance();
  TDestinyInfoRsp::default_instance_->InitAsDefaultInstance();
  TDestinyNotify::default_instance_->InitAsDefaultInstance();
  TDestinyInlayReq::default_instance_->InitAsDefaultInstance();
  TDestinyActivateSlabReq::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_net_2fDestiny_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_net_2fDestiny_2eproto {
  StaticDescriptorInitializer_net_2fDestiny_2eproto() {
    protobuf_AddDesc_net_2fDestiny_2eproto();
  }
} static_descriptor_initializer_net_2fDestiny_2eproto_;
const ::google::protobuf::EnumDescriptor* EDestinySlabStatus_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EDestinySlabStatus_descriptor_;
}
bool EDestinySlabStatus_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#ifndef _MSC_VER
const int TDestinyStone::kStoneIdFieldNumber;
const int TDestinyStone::kStatusFieldNumber;
#endif  // !_MSC_VER

TDestinyStone::TDestinyStone()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TDestinyStone)
}

void TDestinyStone::InitAsDefaultInstance() {
}

TDestinyStone::TDestinyStone(const TDestinyStone& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TDestinyStone)
}

void TDestinyStone::SharedCtor() {
  _cached_size_ = 0;
  stoneid_ = 0u;
  status_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TDestinyStone::~TDestinyStone() {
  // @@protoc_insertion_point(destructor:pb.TDestinyStone)
  SharedDtor();
}

void TDestinyStone::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TDestinyStone::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TDestinyStone::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TDestinyStone_descriptor_;
}

const TDestinyStone& TDestinyStone::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fDestiny_2eproto();
  return *default_instance_;
}

TDestinyStone* TDestinyStone::default_instance_ = NULL;

TDestinyStone* TDestinyStone::New() const {
  return new TDestinyStone;
}

void TDestinyStone::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<TDestinyStone*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(stoneid_, status_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TDestinyStone::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TDestinyStone)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 StoneId = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &stoneid_)));
          set_has_stoneid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_Status;
        break;
      }

      // optional uint32 Status = 2;
      case 2: {
        if (tag == 16) {
         parse_Status:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &status_)));
          set_has_status();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TDestinyStone)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TDestinyStone)
  return false;
#undef DO_
}

void TDestinyStone::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TDestinyStone)
  // optional uint32 StoneId = 1;
  if (has_stoneid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->stoneid(), output);
  }

  // optional uint32 Status = 2;
  if (has_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->status(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TDestinyStone)
}

::google::protobuf::uint8* TDestinyStone::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TDestinyStone)
  // optional uint32 StoneId = 1;
  if (has_stoneid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->stoneid(), target);
  }

  // optional uint32 Status = 2;
  if (has_status()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->status(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TDestinyStone)
  return target;
}

int TDestinyStone::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 StoneId = 1;
    if (has_stoneid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->stoneid());
    }

    // optional uint32 Status = 2;
    if (has_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->status());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TDestinyStone::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TDestinyStone* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TDestinyStone*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TDestinyStone::MergeFrom(const TDestinyStone& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_stoneid()) {
      set_stoneid(from.stoneid());
    }
    if (from.has_status()) {
      set_status(from.status());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TDestinyStone::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TDestinyStone::CopyFrom(const TDestinyStone& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TDestinyStone::IsInitialized() const {

  return true;
}

void TDestinyStone::Swap(TDestinyStone* other) {
  if (other != this) {
    std::swap(stoneid_, other->stoneid_);
    std::swap(status_, other->status_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TDestinyStone::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TDestinyStone_descriptor_;
  metadata.reflection = TDestinyStone_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TDestinySlab::kSlabIdFieldNumber;
const int TDestinySlab::kStatusFieldNumber;
const int TDestinySlab::kStoneArrFieldNumber;
#endif  // !_MSC_VER

TDestinySlab::TDestinySlab()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TDestinySlab)
}

void TDestinySlab::InitAsDefaultInstance() {
}

TDestinySlab::TDestinySlab(const TDestinySlab& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TDestinySlab)
}

void TDestinySlab::SharedCtor() {
  _cached_size_ = 0;
  slabid_ = 0u;
  status_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TDestinySlab::~TDestinySlab() {
  // @@protoc_insertion_point(destructor:pb.TDestinySlab)
  SharedDtor();
}

void TDestinySlab::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TDestinySlab::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TDestinySlab::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TDestinySlab_descriptor_;
}

const TDestinySlab& TDestinySlab::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fDestiny_2eproto();
  return *default_instance_;
}

TDestinySlab* TDestinySlab::default_instance_ = NULL;

TDestinySlab* TDestinySlab::New() const {
  return new TDestinySlab;
}

void TDestinySlab::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<TDestinySlab*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(slabid_, status_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  stonearr_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TDestinySlab::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TDestinySlab)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 SlabId = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &slabid_)));
          set_has_slabid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_Status;
        break;
      }

      // optional uint32 Status = 2;
      case 2: {
        if (tag == 16) {
         parse_Status:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &status_)));
          set_has_status();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_StoneArr;
        break;
      }

      // repeated .pb.TDestinyStone StoneArr = 3;
      case 3: {
        if (tag == 26) {
         parse_StoneArr:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_stonearr()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_StoneArr;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TDestinySlab)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TDestinySlab)
  return false;
#undef DO_
}

void TDestinySlab::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TDestinySlab)
  // optional uint32 SlabId = 1;
  if (has_slabid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->slabid(), output);
  }

  // optional uint32 Status = 2;
  if (has_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->status(), output);
  }

  // repeated .pb.TDestinyStone StoneArr = 3;
  for (int i = 0; i < this->stonearr_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->stonearr(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TDestinySlab)
}

::google::protobuf::uint8* TDestinySlab::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TDestinySlab)
  // optional uint32 SlabId = 1;
  if (has_slabid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->slabid(), target);
  }

  // optional uint32 Status = 2;
  if (has_status()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->status(), target);
  }

  // repeated .pb.TDestinyStone StoneArr = 3;
  for (int i = 0; i < this->stonearr_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->stonearr(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TDestinySlab)
  return target;
}

int TDestinySlab::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 SlabId = 1;
    if (has_slabid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->slabid());
    }

    // optional uint32 Status = 2;
    if (has_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->status());
    }

  }
  // repeated .pb.TDestinyStone StoneArr = 3;
  total_size += 1 * this->stonearr_size();
  for (int i = 0; i < this->stonearr_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->stonearr(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TDestinySlab::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TDestinySlab* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TDestinySlab*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TDestinySlab::MergeFrom(const TDestinySlab& from) {
  GOOGLE_CHECK_NE(&from, this);
  stonearr_.MergeFrom(from.stonearr_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_slabid()) {
      set_slabid(from.slabid());
    }
    if (from.has_status()) {
      set_status(from.status());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TDestinySlab::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TDestinySlab::CopyFrom(const TDestinySlab& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TDestinySlab::IsInitialized() const {

  return true;
}

void TDestinySlab::Swap(TDestinySlab* other) {
  if (other != this) {
    std::swap(slabid_, other->slabid_);
    std::swap(status_, other->status_);
    stonearr_.Swap(&other->stonearr_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TDestinySlab::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TDestinySlab_descriptor_;
  metadata.reflection = TDestinySlab_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TDestinyInfoRsp::kDestinyArrFieldNumber;
#endif  // !_MSC_VER

TDestinyInfoRsp::TDestinyInfoRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TDestinyInfoRsp)
}

void TDestinyInfoRsp::InitAsDefaultInstance() {
}

TDestinyInfoRsp::TDestinyInfoRsp(const TDestinyInfoRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TDestinyInfoRsp)
}

void TDestinyInfoRsp::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TDestinyInfoRsp::~TDestinyInfoRsp() {
  // @@protoc_insertion_point(destructor:pb.TDestinyInfoRsp)
  SharedDtor();
}

void TDestinyInfoRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TDestinyInfoRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TDestinyInfoRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TDestinyInfoRsp_descriptor_;
}

const TDestinyInfoRsp& TDestinyInfoRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fDestiny_2eproto();
  return *default_instance_;
}

TDestinyInfoRsp* TDestinyInfoRsp::default_instance_ = NULL;

TDestinyInfoRsp* TDestinyInfoRsp::New() const {
  return new TDestinyInfoRsp;
}

void TDestinyInfoRsp::Clear() {
  destinyarr_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TDestinyInfoRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TDestinyInfoRsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .pb.TDestinySlab DestinyArr = 1;
      case 1: {
        if (tag == 10) {
         parse_DestinyArr:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_destinyarr()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_DestinyArr;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TDestinyInfoRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TDestinyInfoRsp)
  return false;
#undef DO_
}

void TDestinyInfoRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TDestinyInfoRsp)
  // repeated .pb.TDestinySlab DestinyArr = 1;
  for (int i = 0; i < this->destinyarr_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->destinyarr(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TDestinyInfoRsp)
}

::google::protobuf::uint8* TDestinyInfoRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TDestinyInfoRsp)
  // repeated .pb.TDestinySlab DestinyArr = 1;
  for (int i = 0; i < this->destinyarr_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->destinyarr(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TDestinyInfoRsp)
  return target;
}

int TDestinyInfoRsp::ByteSize() const {
  int total_size = 0;

  // repeated .pb.TDestinySlab DestinyArr = 1;
  total_size += 1 * this->destinyarr_size();
  for (int i = 0; i < this->destinyarr_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->destinyarr(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TDestinyInfoRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TDestinyInfoRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TDestinyInfoRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TDestinyInfoRsp::MergeFrom(const TDestinyInfoRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  destinyarr_.MergeFrom(from.destinyarr_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TDestinyInfoRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TDestinyInfoRsp::CopyFrom(const TDestinyInfoRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TDestinyInfoRsp::IsInitialized() const {

  return true;
}

void TDestinyInfoRsp::Swap(TDestinyInfoRsp* other) {
  if (other != this) {
    destinyarr_.Swap(&other->destinyarr_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TDestinyInfoRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TDestinyInfoRsp_descriptor_;
  metadata.reflection = TDestinyInfoRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TDestinyNotify::kDestinyArrFieldNumber;
#endif  // !_MSC_VER

TDestinyNotify::TDestinyNotify()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TDestinyNotify)
}

void TDestinyNotify::InitAsDefaultInstance() {
}

TDestinyNotify::TDestinyNotify(const TDestinyNotify& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TDestinyNotify)
}

void TDestinyNotify::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TDestinyNotify::~TDestinyNotify() {
  // @@protoc_insertion_point(destructor:pb.TDestinyNotify)
  SharedDtor();
}

void TDestinyNotify::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TDestinyNotify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TDestinyNotify::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TDestinyNotify_descriptor_;
}

const TDestinyNotify& TDestinyNotify::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fDestiny_2eproto();
  return *default_instance_;
}

TDestinyNotify* TDestinyNotify::default_instance_ = NULL;

TDestinyNotify* TDestinyNotify::New() const {
  return new TDestinyNotify;
}

void TDestinyNotify::Clear() {
  destinyarr_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TDestinyNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TDestinyNotify)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .pb.TDestinySlab DestinyArr = 1;
      case 1: {
        if (tag == 10) {
         parse_DestinyArr:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_destinyarr()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_DestinyArr;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TDestinyNotify)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TDestinyNotify)
  return false;
#undef DO_
}

void TDestinyNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TDestinyNotify)
  // repeated .pb.TDestinySlab DestinyArr = 1;
  for (int i = 0; i < this->destinyarr_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->destinyarr(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TDestinyNotify)
}

::google::protobuf::uint8* TDestinyNotify::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TDestinyNotify)
  // repeated .pb.TDestinySlab DestinyArr = 1;
  for (int i = 0; i < this->destinyarr_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->destinyarr(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TDestinyNotify)
  return target;
}

int TDestinyNotify::ByteSize() const {
  int total_size = 0;

  // repeated .pb.TDestinySlab DestinyArr = 1;
  total_size += 1 * this->destinyarr_size();
  for (int i = 0; i < this->destinyarr_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->destinyarr(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TDestinyNotify::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TDestinyNotify* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TDestinyNotify*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TDestinyNotify::MergeFrom(const TDestinyNotify& from) {
  GOOGLE_CHECK_NE(&from, this);
  destinyarr_.MergeFrom(from.destinyarr_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TDestinyNotify::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TDestinyNotify::CopyFrom(const TDestinyNotify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TDestinyNotify::IsInitialized() const {

  return true;
}

void TDestinyNotify::Swap(TDestinyNotify* other) {
  if (other != this) {
    destinyarr_.Swap(&other->destinyarr_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TDestinyNotify::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TDestinyNotify_descriptor_;
  metadata.reflection = TDestinyNotify_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TDestinyInlayReq::kStoneIdFieldNumber;
#endif  // !_MSC_VER

TDestinyInlayReq::TDestinyInlayReq()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TDestinyInlayReq)
}

void TDestinyInlayReq::InitAsDefaultInstance() {
}

TDestinyInlayReq::TDestinyInlayReq(const TDestinyInlayReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TDestinyInlayReq)
}

void TDestinyInlayReq::SharedCtor() {
  _cached_size_ = 0;
  stoneid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TDestinyInlayReq::~TDestinyInlayReq() {
  // @@protoc_insertion_point(destructor:pb.TDestinyInlayReq)
  SharedDtor();
}

void TDestinyInlayReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TDestinyInlayReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TDestinyInlayReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TDestinyInlayReq_descriptor_;
}

const TDestinyInlayReq& TDestinyInlayReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fDestiny_2eproto();
  return *default_instance_;
}

TDestinyInlayReq* TDestinyInlayReq::default_instance_ = NULL;

TDestinyInlayReq* TDestinyInlayReq::New() const {
  return new TDestinyInlayReq;
}

void TDestinyInlayReq::Clear() {
  stoneid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TDestinyInlayReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TDestinyInlayReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 StoneId = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &stoneid_)));
          set_has_stoneid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TDestinyInlayReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TDestinyInlayReq)
  return false;
#undef DO_
}

void TDestinyInlayReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TDestinyInlayReq)
  // optional uint32 StoneId = 1;
  if (has_stoneid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->stoneid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TDestinyInlayReq)
}

::google::protobuf::uint8* TDestinyInlayReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TDestinyInlayReq)
  // optional uint32 StoneId = 1;
  if (has_stoneid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->stoneid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TDestinyInlayReq)
  return target;
}

int TDestinyInlayReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 StoneId = 1;
    if (has_stoneid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->stoneid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TDestinyInlayReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TDestinyInlayReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TDestinyInlayReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TDestinyInlayReq::MergeFrom(const TDestinyInlayReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_stoneid()) {
      set_stoneid(from.stoneid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TDestinyInlayReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TDestinyInlayReq::CopyFrom(const TDestinyInlayReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TDestinyInlayReq::IsInitialized() const {

  return true;
}

void TDestinyInlayReq::Swap(TDestinyInlayReq* other) {
  if (other != this) {
    std::swap(stoneid_, other->stoneid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TDestinyInlayReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TDestinyInlayReq_descriptor_;
  metadata.reflection = TDestinyInlayReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TDestinyActivateSlabReq::kSlabIdFieldNumber;
#endif  // !_MSC_VER

TDestinyActivateSlabReq::TDestinyActivateSlabReq()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TDestinyActivateSlabReq)
}

void TDestinyActivateSlabReq::InitAsDefaultInstance() {
}

TDestinyActivateSlabReq::TDestinyActivateSlabReq(const TDestinyActivateSlabReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TDestinyActivateSlabReq)
}

void TDestinyActivateSlabReq::SharedCtor() {
  _cached_size_ = 0;
  slabid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TDestinyActivateSlabReq::~TDestinyActivateSlabReq() {
  // @@protoc_insertion_point(destructor:pb.TDestinyActivateSlabReq)
  SharedDtor();
}

void TDestinyActivateSlabReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TDestinyActivateSlabReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TDestinyActivateSlabReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TDestinyActivateSlabReq_descriptor_;
}

const TDestinyActivateSlabReq& TDestinyActivateSlabReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fDestiny_2eproto();
  return *default_instance_;
}

TDestinyActivateSlabReq* TDestinyActivateSlabReq::default_instance_ = NULL;

TDestinyActivateSlabReq* TDestinyActivateSlabReq::New() const {
  return new TDestinyActivateSlabReq;
}

void TDestinyActivateSlabReq::Clear() {
  slabid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TDestinyActivateSlabReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TDestinyActivateSlabReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 SlabId = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &slabid_)));
          set_has_slabid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TDestinyActivateSlabReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TDestinyActivateSlabReq)
  return false;
#undef DO_
}

void TDestinyActivateSlabReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TDestinyActivateSlabReq)
  // optional uint32 SlabId = 1;
  if (has_slabid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->slabid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TDestinyActivateSlabReq)
}

::google::protobuf::uint8* TDestinyActivateSlabReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TDestinyActivateSlabReq)
  // optional uint32 SlabId = 1;
  if (has_slabid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->slabid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TDestinyActivateSlabReq)
  return target;
}

int TDestinyActivateSlabReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 SlabId = 1;
    if (has_slabid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->slabid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TDestinyActivateSlabReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TDestinyActivateSlabReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TDestinyActivateSlabReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TDestinyActivateSlabReq::MergeFrom(const TDestinyActivateSlabReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_slabid()) {
      set_slabid(from.slabid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TDestinyActivateSlabReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TDestinyActivateSlabReq::CopyFrom(const TDestinyActivateSlabReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TDestinyActivateSlabReq::IsInitialized() const {

  return true;
}

void TDestinyActivateSlabReq::Swap(TDestinyActivateSlabReq* other) {
  if (other != this) {
    std::swap(slabid_, other->slabid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TDestinyActivateSlabReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TDestinyActivateSlabReq_descriptor_;
  metadata.reflection = TDestinyActivateSlabReq_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace pb

// @@protoc_insertion_point(global_scope)
