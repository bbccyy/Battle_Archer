// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: net/Invite.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "net/Invite.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace pb {

namespace {

const ::google::protobuf::Descriptor* TInviteGetInfoRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TInviteGetInfoRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* TInviteAchvItem_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TInviteAchvItem_reflection_ = NULL;
const ::google::protobuf::Descriptor* TInviteGetInviteAchvReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TInviteGetInviteAchvReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* TInviteGetShopPageGetInfoReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TInviteGetShopPageGetInfoReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* TInviteGetShopPageGetInfoRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TInviteGetShopPageGetInfoRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* TInviteShopItem_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TInviteShopItem_reflection_ = NULL;
const ::google::protobuf::Descriptor* TInviteBuyItemReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TInviteBuyItemReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* TInviteBuyItemRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TInviteBuyItemRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* TInviteInviteByOtherReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TInviteInviteByOtherReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* TInviteNotify_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TInviteNotify_reflection_ = NULL;
const ::google::protobuf::Descriptor* TInviteSendInfoToInviterReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TInviteSendInfoToInviterReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* TInviteSendInfoToInviterRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TInviteSendInfoToInviterRsp_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* EInviteErrCode_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_net_2fInvite_2eproto() {
  protobuf_AddDesc_net_2fInvite_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "net/Invite.proto");
  GOOGLE_CHECK(file != NULL);
  TInviteGetInfoRsp_descriptor_ = file->message_type(0);
  static const int TInviteGetInfoRsp_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TInviteGetInfoRsp, invitecode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TInviteGetInfoRsp, invitenum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TInviteGetInfoRsp, powerachvarr_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TInviteGetInfoRsp, vipachvarr_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TInviteGetInfoRsp, invitenumachvarr_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TInviteGetInfoRsp, invitedtime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TInviteGetInfoRsp, cangetinvitepoint_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TInviteGetInfoRsp, historyinvitepoint_),
  };
  TInviteGetInfoRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TInviteGetInfoRsp_descriptor_,
      TInviteGetInfoRsp::default_instance_,
      TInviteGetInfoRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TInviteGetInfoRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TInviteGetInfoRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TInviteGetInfoRsp));
  TInviteAchvItem_descriptor_ = file->message_type(1);
  static const int TInviteAchvItem_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TInviteAchvItem, inviteachvid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TInviteAchvItem, getnum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TInviteAchvItem, cangettimes_),
  };
  TInviteAchvItem_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TInviteAchvItem_descriptor_,
      TInviteAchvItem::default_instance_,
      TInviteAchvItem_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TInviteAchvItem, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TInviteAchvItem, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TInviteAchvItem));
  TInviteGetInviteAchvReq_descriptor_ = file->message_type(2);
  static const int TInviteGetInviteAchvReq_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TInviteGetInviteAchvReq, inviteachvid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TInviteGetInviteAchvReq, num_),
  };
  TInviteGetInviteAchvReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TInviteGetInviteAchvReq_descriptor_,
      TInviteGetInviteAchvReq::default_instance_,
      TInviteGetInviteAchvReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TInviteGetInviteAchvReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TInviteGetInviteAchvReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TInviteGetInviteAchvReq));
  TInviteGetShopPageGetInfoReq_descriptor_ = file->message_type(3);
  static const int TInviteGetShopPageGetInfoReq_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TInviteGetShopPageGetInfoReq, shopid_),
  };
  TInviteGetShopPageGetInfoReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TInviteGetShopPageGetInfoReq_descriptor_,
      TInviteGetShopPageGetInfoReq::default_instance_,
      TInviteGetShopPageGetInfoReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TInviteGetShopPageGetInfoReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TInviteGetShopPageGetInfoReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TInviteGetShopPageGetInfoReq));
  TInviteGetShopPageGetInfoRsp_descriptor_ = file->message_type(4);
  static const int TInviteGetShopPageGetInfoRsp_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TInviteGetShopPageGetInfoRsp, refreshtime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TInviteGetShopPageGetInfoRsp, shopiteminfoarr_),
  };
  TInviteGetShopPageGetInfoRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TInviteGetShopPageGetInfoRsp_descriptor_,
      TInviteGetShopPageGetInfoRsp::default_instance_,
      TInviteGetShopPageGetInfoRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TInviteGetShopPageGetInfoRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TInviteGetShopPageGetInfoRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TInviteGetShopPageGetInfoRsp));
  TInviteShopItem_descriptor_ = file->message_type(5);
  static const int TInviteShopItem_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TInviteShopItem, shopitemid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TInviteShopItem, buytimes_),
  };
  TInviteShopItem_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TInviteShopItem_descriptor_,
      TInviteShopItem::default_instance_,
      TInviteShopItem_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TInviteShopItem, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TInviteShopItem, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TInviteShopItem));
  TInviteBuyItemReq_descriptor_ = file->message_type(6);
  static const int TInviteBuyItemReq_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TInviteBuyItemReq, shopiteminfo_),
  };
  TInviteBuyItemReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TInviteBuyItemReq_descriptor_,
      TInviteBuyItemReq::default_instance_,
      TInviteBuyItemReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TInviteBuyItemReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TInviteBuyItemReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TInviteBuyItemReq));
  TInviteBuyItemRsp_descriptor_ = file->message_type(7);
  static const int TInviteBuyItemRsp_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TInviteBuyItemRsp, shopitemarr_),
  };
  TInviteBuyItemRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TInviteBuyItemRsp_descriptor_,
      TInviteBuyItemRsp::default_instance_,
      TInviteBuyItemRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TInviteBuyItemRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TInviteBuyItemRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TInviteBuyItemRsp));
  TInviteInviteByOtherReq_descriptor_ = file->message_type(8);
  static const int TInviteInviteByOtherReq_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TInviteInviteByOtherReq, invitecode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TInviteInviteByOtherReq, inviteeuid_),
  };
  TInviteInviteByOtherReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TInviteInviteByOtherReq_descriptor_,
      TInviteInviteByOtherReq::default_instance_,
      TInviteInviteByOtherReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TInviteInviteByOtherReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TInviteInviteByOtherReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TInviteInviteByOtherReq));
  TInviteNotify_descriptor_ = file->message_type(9);
  static const int TInviteNotify_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TInviteNotify, invitenum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TInviteNotify, powerachvarr_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TInviteNotify, vipachvarr_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TInviteNotify, invitenumachvarr_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TInviteNotify, cangetinvitepoint_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TInviteNotify, historyinvitepoint_),
  };
  TInviteNotify_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TInviteNotify_descriptor_,
      TInviteNotify::default_instance_,
      TInviteNotify_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TInviteNotify, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TInviteNotify, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TInviteNotify));
  TInviteSendInfoToInviterReq_descriptor_ = file->message_type(10);
  static const int TInviteSendInfoToInviterReq_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TInviteSendInfoToInviterReq, inviteruid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TInviteSendInfoToInviterReq, inviteeuid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TInviteSendInfoToInviterReq, power_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TInviteSendInfoToInviterReq, vip_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TInviteSendInfoToInviterReq, pay_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TInviteSendInfoToInviterReq, currlevel_),
  };
  TInviteSendInfoToInviterReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TInviteSendInfoToInviterReq_descriptor_,
      TInviteSendInfoToInviterReq::default_instance_,
      TInviteSendInfoToInviterReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TInviteSendInfoToInviterReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TInviteSendInfoToInviterReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TInviteSendInfoToInviterReq));
  TInviteSendInfoToInviterRsp_descriptor_ = file->message_type(11);
  static const int TInviteSendInfoToInviterRsp_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TInviteSendInfoToInviterRsp, errcode_),
  };
  TInviteSendInfoToInviterRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TInviteSendInfoToInviterRsp_descriptor_,
      TInviteSendInfoToInviterRsp::default_instance_,
      TInviteSendInfoToInviterRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TInviteSendInfoToInviterRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TInviteSendInfoToInviterRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TInviteSendInfoToInviterRsp));
  EInviteErrCode_descriptor_ = file->enum_type(0);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_net_2fInvite_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TInviteGetInfoRsp_descriptor_, &TInviteGetInfoRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TInviteAchvItem_descriptor_, &TInviteAchvItem::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TInviteGetInviteAchvReq_descriptor_, &TInviteGetInviteAchvReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TInviteGetShopPageGetInfoReq_descriptor_, &TInviteGetShopPageGetInfoReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TInviteGetShopPageGetInfoRsp_descriptor_, &TInviteGetShopPageGetInfoRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TInviteShopItem_descriptor_, &TInviteShopItem::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TInviteBuyItemReq_descriptor_, &TInviteBuyItemReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TInviteBuyItemRsp_descriptor_, &TInviteBuyItemRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TInviteInviteByOtherReq_descriptor_, &TInviteInviteByOtherReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TInviteNotify_descriptor_, &TInviteNotify::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TInviteSendInfoToInviterReq_descriptor_, &TInviteSendInfoToInviterReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TInviteSendInfoToInviterRsp_descriptor_, &TInviteSendInfoToInviterRsp::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_net_2fInvite_2eproto() {
  delete TInviteGetInfoRsp::default_instance_;
  delete TInviteGetInfoRsp_reflection_;
  delete TInviteAchvItem::default_instance_;
  delete TInviteAchvItem_reflection_;
  delete TInviteGetInviteAchvReq::default_instance_;
  delete TInviteGetInviteAchvReq_reflection_;
  delete TInviteGetShopPageGetInfoReq::default_instance_;
  delete TInviteGetShopPageGetInfoReq_reflection_;
  delete TInviteGetShopPageGetInfoRsp::default_instance_;
  delete TInviteGetShopPageGetInfoRsp_reflection_;
  delete TInviteShopItem::default_instance_;
  delete TInviteShopItem_reflection_;
  delete TInviteBuyItemReq::default_instance_;
  delete TInviteBuyItemReq_reflection_;
  delete TInviteBuyItemRsp::default_instance_;
  delete TInviteBuyItemRsp_reflection_;
  delete TInviteInviteByOtherReq::default_instance_;
  delete TInviteInviteByOtherReq_reflection_;
  delete TInviteNotify::default_instance_;
  delete TInviteNotify_reflection_;
  delete TInviteSendInfoToInviterReq::default_instance_;
  delete TInviteSendInfoToInviterReq_reflection_;
  delete TInviteSendInfoToInviterRsp::default_instance_;
  delete TInviteSendInfoToInviterRsp_reflection_;
}

void protobuf_AddDesc_net_2fInvite_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::pb::protobuf_AddDesc_net_2fCommonReward_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\020net/Invite.proto\022\002pb\032\026net/CommonReward"
    ".proto\"\211\002\n\021TInviteGetInfoRsp\022\022\n\nInviteCo"
    "de\030\001 \001(\t\022\021\n\tInviteNum\030\002 \001(\r\022)\n\014PowerAchv"
    "Arr\030\003 \003(\0132\023.pb.TInviteAchvItem\022\'\n\nVIPAch"
    "vArr\030\004 \003(\0132\023.pb.TInviteAchvItem\022-\n\020Invit"
    "eNumAchvArr\030\005 \003(\0132\023.pb.TInviteAchvItem\022\023"
    "\n\013InvitedTime\030\006 \001(\004\022\031\n\021CanGetInvitePoint"
    "\030\007 \001(\004\022\032\n\022HistoryInvitePoint\030\010 \001(\004\"L\n\017TI"
    "nviteAchvItem\022\024\n\014InviteAchvId\030\001 \001(\r\022\016\n\006G"
    "etNum\030\002 \001(\r\022\023\n\013CanGetTimes\030\003 \001(\r\"<\n\027TInv"
    "iteGetInviteAchvReq\022\024\n\014InviteAchvId\030\001 \001("
    "\r\022\013\n\003Num\030\002 \001(\r\".\n\034TInviteGetShopPageGetI"
    "nfoReq\022\016\n\006ShopId\030\001 \001(\r\"a\n\034TInviteGetShop"
    "PageGetInfoRsp\022\023\n\013RefreshTime\030\001 \001(\004\022,\n\017S"
    "hopItemInfoArr\030\002 \003(\0132\023.pb.TInviteShopIte"
    "m\"7\n\017TInviteShopItem\022\022\n\nShopItemId\030\001 \001(\r"
    "\022\020\n\010BuyTimes\030\002 \001(\r\">\n\021TInviteBuyItemReq\022"
    ")\n\014ShopItemInfo\030\001 \001(\0132\023.pb.TInviteShopIt"
    "em\";\n\021TInviteBuyItemRsp\022&\n\013ShopItemArr\030\001"
    " \003(\0132\021.pb.TCommonReward\"A\n\027TInviteInvite"
    "ByOtherReq\022\022\n\nInviteCode\030\001 \001(\t\022\022\n\nInvite"
    "eUid\030\002 \001(\004\"\334\001\n\rTInviteNotify\022\021\n\tInviteNu"
    "m\030\001 \001(\r\022)\n\014PowerAchvArr\030\002 \003(\0132\023.pb.TInvi"
    "teAchvItem\022\'\n\nVIPAchvArr\030\003 \003(\0132\023.pb.TInv"
    "iteAchvItem\022-\n\020InviteNumAchvArr\030\004 \003(\0132\023."
    "pb.TInviteAchvItem\022\031\n\021CanGetInvitePoint\030"
    "\005 \001(\004\022\032\n\022HistoryInvitePoint\030\006 \001(\004\"\201\001\n\033TI"
    "nviteSendInfoToInviterReq\022\022\n\nInviterUid\030"
    "\001 \001(\004\022\022\n\nInviteeUid\030\002 \001(\004\022\r\n\005Power\030\003 \001(\004"
    "\022\013\n\003VIP\030\004 \001(\r\022\013\n\003Pay\030\005 \001(\004\022\021\n\tCurrLevel\030"
    "\006 \001(\r\"B\n\033TInviteSendInfoToInviterRsp\022#\n\007"
    "ErrCode\030\001 \001(\0162\022.pb.EInviteErrCode*\222\001\n\016EI"
    "nviteErrCode\022\026\n\022INVITE_ERR_CODE_OK\020\000\022 \n\034"
    "INVITE_ERR_CODE_INVALID_CODE\020\001\022\034\n\030INVITE"
    "_ERR_CODE_TIME_OUT\020\002\022(\n$INVITE_ERR_CODE_"
    "INVITEE_NUM_TO_LIMIT\020\003", 1422);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "net/Invite.proto", &protobuf_RegisterTypes);
  TInviteGetInfoRsp::default_instance_ = new TInviteGetInfoRsp();
  TInviteAchvItem::default_instance_ = new TInviteAchvItem();
  TInviteGetInviteAchvReq::default_instance_ = new TInviteGetInviteAchvReq();
  TInviteGetShopPageGetInfoReq::default_instance_ = new TInviteGetShopPageGetInfoReq();
  TInviteGetShopPageGetInfoRsp::default_instance_ = new TInviteGetShopPageGetInfoRsp();
  TInviteShopItem::default_instance_ = new TInviteShopItem();
  TInviteBuyItemReq::default_instance_ = new TInviteBuyItemReq();
  TInviteBuyItemRsp::default_instance_ = new TInviteBuyItemRsp();
  TInviteInviteByOtherReq::default_instance_ = new TInviteInviteByOtherReq();
  TInviteNotify::default_instance_ = new TInviteNotify();
  TInviteSendInfoToInviterReq::default_instance_ = new TInviteSendInfoToInviterReq();
  TInviteSendInfoToInviterRsp::default_instance_ = new TInviteSendInfoToInviterRsp();
  TInviteGetInfoRsp::default_instance_->InitAsDefaultInstance();
  TInviteAchvItem::default_instance_->InitAsDefaultInstance();
  TInviteGetInviteAchvReq::default_instance_->InitAsDefaultInstance();
  TInviteGetShopPageGetInfoReq::default_instance_->InitAsDefaultInstance();
  TInviteGetShopPageGetInfoRsp::default_instance_->InitAsDefaultInstance();
  TInviteShopItem::default_instance_->InitAsDefaultInstance();
  TInviteBuyItemReq::default_instance_->InitAsDefaultInstance();
  TInviteBuyItemRsp::default_instance_->InitAsDefaultInstance();
  TInviteInviteByOtherReq::default_instance_->InitAsDefaultInstance();
  TInviteNotify::default_instance_->InitAsDefaultInstance();
  TInviteSendInfoToInviterReq::default_instance_->InitAsDefaultInstance();
  TInviteSendInfoToInviterRsp::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_net_2fInvite_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_net_2fInvite_2eproto {
  StaticDescriptorInitializer_net_2fInvite_2eproto() {
    protobuf_AddDesc_net_2fInvite_2eproto();
  }
} static_descriptor_initializer_net_2fInvite_2eproto_;
const ::google::protobuf::EnumDescriptor* EInviteErrCode_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EInviteErrCode_descriptor_;
}
bool EInviteErrCode_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#ifndef _MSC_VER
const int TInviteGetInfoRsp::kInviteCodeFieldNumber;
const int TInviteGetInfoRsp::kInviteNumFieldNumber;
const int TInviteGetInfoRsp::kPowerAchvArrFieldNumber;
const int TInviteGetInfoRsp::kVIPAchvArrFieldNumber;
const int TInviteGetInfoRsp::kInviteNumAchvArrFieldNumber;
const int TInviteGetInfoRsp::kInvitedTimeFieldNumber;
const int TInviteGetInfoRsp::kCanGetInvitePointFieldNumber;
const int TInviteGetInfoRsp::kHistoryInvitePointFieldNumber;
#endif  // !_MSC_VER

TInviteGetInfoRsp::TInviteGetInfoRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TInviteGetInfoRsp)
}

void TInviteGetInfoRsp::InitAsDefaultInstance() {
}

TInviteGetInfoRsp::TInviteGetInfoRsp(const TInviteGetInfoRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TInviteGetInfoRsp)
}

void TInviteGetInfoRsp::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  invitecode_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  invitenum_ = 0u;
  invitedtime_ = GOOGLE_ULONGLONG(0);
  cangetinvitepoint_ = GOOGLE_ULONGLONG(0);
  historyinvitepoint_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TInviteGetInfoRsp::~TInviteGetInfoRsp() {
  // @@protoc_insertion_point(destructor:pb.TInviteGetInfoRsp)
  SharedDtor();
}

void TInviteGetInfoRsp::SharedDtor() {
  if (invitecode_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete invitecode_;
  }
  if (this != default_instance_) {
  }
}

void TInviteGetInfoRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TInviteGetInfoRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TInviteGetInfoRsp_descriptor_;
}

const TInviteGetInfoRsp& TInviteGetInfoRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fInvite_2eproto();
  return *default_instance_;
}

TInviteGetInfoRsp* TInviteGetInfoRsp::default_instance_ = NULL;

TInviteGetInfoRsp* TInviteGetInfoRsp::New() const {
  return new TInviteGetInfoRsp;
}

void TInviteGetInfoRsp::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<TInviteGetInfoRsp*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 227) {
    ZR_(invitedtime_, invitenum_);
    if (has_invitecode()) {
      if (invitecode_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        invitecode_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  powerachvarr_.Clear();
  vipachvarr_.Clear();
  invitenumachvarr_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TInviteGetInfoRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TInviteGetInfoRsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string InviteCode = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_invitecode()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->invitecode().data(), this->invitecode().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "invitecode");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_InviteNum;
        break;
      }

      // optional uint32 InviteNum = 2;
      case 2: {
        if (tag == 16) {
         parse_InviteNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &invitenum_)));
          set_has_invitenum();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_PowerAchvArr;
        break;
      }

      // repeated .pb.TInviteAchvItem PowerAchvArr = 3;
      case 3: {
        if (tag == 26) {
         parse_PowerAchvArr:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_powerachvarr()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_PowerAchvArr;
        if (input->ExpectTag(34)) goto parse_VIPAchvArr;
        break;
      }

      // repeated .pb.TInviteAchvItem VIPAchvArr = 4;
      case 4: {
        if (tag == 34) {
         parse_VIPAchvArr:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_vipachvarr()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_VIPAchvArr;
        if (input->ExpectTag(42)) goto parse_InviteNumAchvArr;
        break;
      }

      // repeated .pb.TInviteAchvItem InviteNumAchvArr = 5;
      case 5: {
        if (tag == 42) {
         parse_InviteNumAchvArr:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_invitenumachvarr()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_InviteNumAchvArr;
        if (input->ExpectTag(48)) goto parse_InvitedTime;
        break;
      }

      // optional uint64 InvitedTime = 6;
      case 6: {
        if (tag == 48) {
         parse_InvitedTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &invitedtime_)));
          set_has_invitedtime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_CanGetInvitePoint;
        break;
      }

      // optional uint64 CanGetInvitePoint = 7;
      case 7: {
        if (tag == 56) {
         parse_CanGetInvitePoint:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &cangetinvitepoint_)));
          set_has_cangetinvitepoint();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_HistoryInvitePoint;
        break;
      }

      // optional uint64 HistoryInvitePoint = 8;
      case 8: {
        if (tag == 64) {
         parse_HistoryInvitePoint:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &historyinvitepoint_)));
          set_has_historyinvitepoint();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TInviteGetInfoRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TInviteGetInfoRsp)
  return false;
#undef DO_
}

void TInviteGetInfoRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TInviteGetInfoRsp)
  // optional string InviteCode = 1;
  if (has_invitecode()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->invitecode().data(), this->invitecode().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "invitecode");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->invitecode(), output);
  }

  // optional uint32 InviteNum = 2;
  if (has_invitenum()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->invitenum(), output);
  }

  // repeated .pb.TInviteAchvItem PowerAchvArr = 3;
  for (int i = 0; i < this->powerachvarr_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->powerachvarr(i), output);
  }

  // repeated .pb.TInviteAchvItem VIPAchvArr = 4;
  for (int i = 0; i < this->vipachvarr_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->vipachvarr(i), output);
  }

  // repeated .pb.TInviteAchvItem InviteNumAchvArr = 5;
  for (int i = 0; i < this->invitenumachvarr_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->invitenumachvarr(i), output);
  }

  // optional uint64 InvitedTime = 6;
  if (has_invitedtime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(6, this->invitedtime(), output);
  }

  // optional uint64 CanGetInvitePoint = 7;
  if (has_cangetinvitepoint()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(7, this->cangetinvitepoint(), output);
  }

  // optional uint64 HistoryInvitePoint = 8;
  if (has_historyinvitepoint()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(8, this->historyinvitepoint(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TInviteGetInfoRsp)
}

::google::protobuf::uint8* TInviteGetInfoRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TInviteGetInfoRsp)
  // optional string InviteCode = 1;
  if (has_invitecode()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->invitecode().data(), this->invitecode().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "invitecode");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->invitecode(), target);
  }

  // optional uint32 InviteNum = 2;
  if (has_invitenum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->invitenum(), target);
  }

  // repeated .pb.TInviteAchvItem PowerAchvArr = 3;
  for (int i = 0; i < this->powerachvarr_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->powerachvarr(i), target);
  }

  // repeated .pb.TInviteAchvItem VIPAchvArr = 4;
  for (int i = 0; i < this->vipachvarr_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->vipachvarr(i), target);
  }

  // repeated .pb.TInviteAchvItem InviteNumAchvArr = 5;
  for (int i = 0; i < this->invitenumachvarr_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->invitenumachvarr(i), target);
  }

  // optional uint64 InvitedTime = 6;
  if (has_invitedtime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(6, this->invitedtime(), target);
  }

  // optional uint64 CanGetInvitePoint = 7;
  if (has_cangetinvitepoint()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(7, this->cangetinvitepoint(), target);
  }

  // optional uint64 HistoryInvitePoint = 8;
  if (has_historyinvitepoint()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(8, this->historyinvitepoint(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TInviteGetInfoRsp)
  return target;
}

int TInviteGetInfoRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string InviteCode = 1;
    if (has_invitecode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->invitecode());
    }

    // optional uint32 InviteNum = 2;
    if (has_invitenum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->invitenum());
    }

    // optional uint64 InvitedTime = 6;
    if (has_invitedtime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->invitedtime());
    }

    // optional uint64 CanGetInvitePoint = 7;
    if (has_cangetinvitepoint()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->cangetinvitepoint());
    }

    // optional uint64 HistoryInvitePoint = 8;
    if (has_historyinvitepoint()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->historyinvitepoint());
    }

  }
  // repeated .pb.TInviteAchvItem PowerAchvArr = 3;
  total_size += 1 * this->powerachvarr_size();
  for (int i = 0; i < this->powerachvarr_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->powerachvarr(i));
  }

  // repeated .pb.TInviteAchvItem VIPAchvArr = 4;
  total_size += 1 * this->vipachvarr_size();
  for (int i = 0; i < this->vipachvarr_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->vipachvarr(i));
  }

  // repeated .pb.TInviteAchvItem InviteNumAchvArr = 5;
  total_size += 1 * this->invitenumachvarr_size();
  for (int i = 0; i < this->invitenumachvarr_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->invitenumachvarr(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TInviteGetInfoRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TInviteGetInfoRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TInviteGetInfoRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TInviteGetInfoRsp::MergeFrom(const TInviteGetInfoRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  powerachvarr_.MergeFrom(from.powerachvarr_);
  vipachvarr_.MergeFrom(from.vipachvarr_);
  invitenumachvarr_.MergeFrom(from.invitenumachvarr_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_invitecode()) {
      set_invitecode(from.invitecode());
    }
    if (from.has_invitenum()) {
      set_invitenum(from.invitenum());
    }
    if (from.has_invitedtime()) {
      set_invitedtime(from.invitedtime());
    }
    if (from.has_cangetinvitepoint()) {
      set_cangetinvitepoint(from.cangetinvitepoint());
    }
    if (from.has_historyinvitepoint()) {
      set_historyinvitepoint(from.historyinvitepoint());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TInviteGetInfoRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TInviteGetInfoRsp::CopyFrom(const TInviteGetInfoRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TInviteGetInfoRsp::IsInitialized() const {

  return true;
}

void TInviteGetInfoRsp::Swap(TInviteGetInfoRsp* other) {
  if (other != this) {
    std::swap(invitecode_, other->invitecode_);
    std::swap(invitenum_, other->invitenum_);
    powerachvarr_.Swap(&other->powerachvarr_);
    vipachvarr_.Swap(&other->vipachvarr_);
    invitenumachvarr_.Swap(&other->invitenumachvarr_);
    std::swap(invitedtime_, other->invitedtime_);
    std::swap(cangetinvitepoint_, other->cangetinvitepoint_);
    std::swap(historyinvitepoint_, other->historyinvitepoint_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TInviteGetInfoRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TInviteGetInfoRsp_descriptor_;
  metadata.reflection = TInviteGetInfoRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TInviteAchvItem::kInviteAchvIdFieldNumber;
const int TInviteAchvItem::kGetNumFieldNumber;
const int TInviteAchvItem::kCanGetTimesFieldNumber;
#endif  // !_MSC_VER

TInviteAchvItem::TInviteAchvItem()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TInviteAchvItem)
}

void TInviteAchvItem::InitAsDefaultInstance() {
}

TInviteAchvItem::TInviteAchvItem(const TInviteAchvItem& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TInviteAchvItem)
}

void TInviteAchvItem::SharedCtor() {
  _cached_size_ = 0;
  inviteachvid_ = 0u;
  getnum_ = 0u;
  cangettimes_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TInviteAchvItem::~TInviteAchvItem() {
  // @@protoc_insertion_point(destructor:pb.TInviteAchvItem)
  SharedDtor();
}

void TInviteAchvItem::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TInviteAchvItem::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TInviteAchvItem::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TInviteAchvItem_descriptor_;
}

const TInviteAchvItem& TInviteAchvItem::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fInvite_2eproto();
  return *default_instance_;
}

TInviteAchvItem* TInviteAchvItem::default_instance_ = NULL;

TInviteAchvItem* TInviteAchvItem::New() const {
  return new TInviteAchvItem;
}

void TInviteAchvItem::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<TInviteAchvItem*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(inviteachvid_, cangettimes_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TInviteAchvItem::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TInviteAchvItem)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 InviteAchvId = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &inviteachvid_)));
          set_has_inviteachvid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_GetNum;
        break;
      }

      // optional uint32 GetNum = 2;
      case 2: {
        if (tag == 16) {
         parse_GetNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &getnum_)));
          set_has_getnum();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_CanGetTimes;
        break;
      }

      // optional uint32 CanGetTimes = 3;
      case 3: {
        if (tag == 24) {
         parse_CanGetTimes:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &cangettimes_)));
          set_has_cangettimes();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TInviteAchvItem)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TInviteAchvItem)
  return false;
#undef DO_
}

void TInviteAchvItem::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TInviteAchvItem)
  // optional uint32 InviteAchvId = 1;
  if (has_inviteachvid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->inviteachvid(), output);
  }

  // optional uint32 GetNum = 2;
  if (has_getnum()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->getnum(), output);
  }

  // optional uint32 CanGetTimes = 3;
  if (has_cangettimes()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->cangettimes(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TInviteAchvItem)
}

::google::protobuf::uint8* TInviteAchvItem::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TInviteAchvItem)
  // optional uint32 InviteAchvId = 1;
  if (has_inviteachvid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->inviteachvid(), target);
  }

  // optional uint32 GetNum = 2;
  if (has_getnum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->getnum(), target);
  }

  // optional uint32 CanGetTimes = 3;
  if (has_cangettimes()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->cangettimes(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TInviteAchvItem)
  return target;
}

int TInviteAchvItem::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 InviteAchvId = 1;
    if (has_inviteachvid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->inviteachvid());
    }

    // optional uint32 GetNum = 2;
    if (has_getnum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->getnum());
    }

    // optional uint32 CanGetTimes = 3;
    if (has_cangettimes()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->cangettimes());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TInviteAchvItem::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TInviteAchvItem* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TInviteAchvItem*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TInviteAchvItem::MergeFrom(const TInviteAchvItem& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_inviteachvid()) {
      set_inviteachvid(from.inviteachvid());
    }
    if (from.has_getnum()) {
      set_getnum(from.getnum());
    }
    if (from.has_cangettimes()) {
      set_cangettimes(from.cangettimes());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TInviteAchvItem::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TInviteAchvItem::CopyFrom(const TInviteAchvItem& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TInviteAchvItem::IsInitialized() const {

  return true;
}

void TInviteAchvItem::Swap(TInviteAchvItem* other) {
  if (other != this) {
    std::swap(inviteachvid_, other->inviteachvid_);
    std::swap(getnum_, other->getnum_);
    std::swap(cangettimes_, other->cangettimes_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TInviteAchvItem::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TInviteAchvItem_descriptor_;
  metadata.reflection = TInviteAchvItem_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TInviteGetInviteAchvReq::kInviteAchvIdFieldNumber;
const int TInviteGetInviteAchvReq::kNumFieldNumber;
#endif  // !_MSC_VER

TInviteGetInviteAchvReq::TInviteGetInviteAchvReq()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TInviteGetInviteAchvReq)
}

void TInviteGetInviteAchvReq::InitAsDefaultInstance() {
}

TInviteGetInviteAchvReq::TInviteGetInviteAchvReq(const TInviteGetInviteAchvReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TInviteGetInviteAchvReq)
}

void TInviteGetInviteAchvReq::SharedCtor() {
  _cached_size_ = 0;
  inviteachvid_ = 0u;
  num_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TInviteGetInviteAchvReq::~TInviteGetInviteAchvReq() {
  // @@protoc_insertion_point(destructor:pb.TInviteGetInviteAchvReq)
  SharedDtor();
}

void TInviteGetInviteAchvReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TInviteGetInviteAchvReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TInviteGetInviteAchvReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TInviteGetInviteAchvReq_descriptor_;
}

const TInviteGetInviteAchvReq& TInviteGetInviteAchvReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fInvite_2eproto();
  return *default_instance_;
}

TInviteGetInviteAchvReq* TInviteGetInviteAchvReq::default_instance_ = NULL;

TInviteGetInviteAchvReq* TInviteGetInviteAchvReq::New() const {
  return new TInviteGetInviteAchvReq;
}

void TInviteGetInviteAchvReq::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<TInviteGetInviteAchvReq*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(inviteachvid_, num_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TInviteGetInviteAchvReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TInviteGetInviteAchvReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 InviteAchvId = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &inviteachvid_)));
          set_has_inviteachvid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_Num;
        break;
      }

      // optional uint32 Num = 2;
      case 2: {
        if (tag == 16) {
         parse_Num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &num_)));
          set_has_num();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TInviteGetInviteAchvReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TInviteGetInviteAchvReq)
  return false;
#undef DO_
}

void TInviteGetInviteAchvReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TInviteGetInviteAchvReq)
  // optional uint32 InviteAchvId = 1;
  if (has_inviteachvid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->inviteachvid(), output);
  }

  // optional uint32 Num = 2;
  if (has_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->num(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TInviteGetInviteAchvReq)
}

::google::protobuf::uint8* TInviteGetInviteAchvReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TInviteGetInviteAchvReq)
  // optional uint32 InviteAchvId = 1;
  if (has_inviteachvid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->inviteachvid(), target);
  }

  // optional uint32 Num = 2;
  if (has_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->num(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TInviteGetInviteAchvReq)
  return target;
}

int TInviteGetInviteAchvReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 InviteAchvId = 1;
    if (has_inviteachvid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->inviteachvid());
    }

    // optional uint32 Num = 2;
    if (has_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->num());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TInviteGetInviteAchvReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TInviteGetInviteAchvReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TInviteGetInviteAchvReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TInviteGetInviteAchvReq::MergeFrom(const TInviteGetInviteAchvReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_inviteachvid()) {
      set_inviteachvid(from.inviteachvid());
    }
    if (from.has_num()) {
      set_num(from.num());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TInviteGetInviteAchvReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TInviteGetInviteAchvReq::CopyFrom(const TInviteGetInviteAchvReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TInviteGetInviteAchvReq::IsInitialized() const {

  return true;
}

void TInviteGetInviteAchvReq::Swap(TInviteGetInviteAchvReq* other) {
  if (other != this) {
    std::swap(inviteachvid_, other->inviteachvid_);
    std::swap(num_, other->num_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TInviteGetInviteAchvReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TInviteGetInviteAchvReq_descriptor_;
  metadata.reflection = TInviteGetInviteAchvReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TInviteGetShopPageGetInfoReq::kShopIdFieldNumber;
#endif  // !_MSC_VER

TInviteGetShopPageGetInfoReq::TInviteGetShopPageGetInfoReq()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TInviteGetShopPageGetInfoReq)
}

void TInviteGetShopPageGetInfoReq::InitAsDefaultInstance() {
}

TInviteGetShopPageGetInfoReq::TInviteGetShopPageGetInfoReq(const TInviteGetShopPageGetInfoReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TInviteGetShopPageGetInfoReq)
}

void TInviteGetShopPageGetInfoReq::SharedCtor() {
  _cached_size_ = 0;
  shopid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TInviteGetShopPageGetInfoReq::~TInviteGetShopPageGetInfoReq() {
  // @@protoc_insertion_point(destructor:pb.TInviteGetShopPageGetInfoReq)
  SharedDtor();
}

void TInviteGetShopPageGetInfoReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TInviteGetShopPageGetInfoReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TInviteGetShopPageGetInfoReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TInviteGetShopPageGetInfoReq_descriptor_;
}

const TInviteGetShopPageGetInfoReq& TInviteGetShopPageGetInfoReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fInvite_2eproto();
  return *default_instance_;
}

TInviteGetShopPageGetInfoReq* TInviteGetShopPageGetInfoReq::default_instance_ = NULL;

TInviteGetShopPageGetInfoReq* TInviteGetShopPageGetInfoReq::New() const {
  return new TInviteGetShopPageGetInfoReq;
}

void TInviteGetShopPageGetInfoReq::Clear() {
  shopid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TInviteGetShopPageGetInfoReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TInviteGetShopPageGetInfoReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 ShopId = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &shopid_)));
          set_has_shopid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TInviteGetShopPageGetInfoReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TInviteGetShopPageGetInfoReq)
  return false;
#undef DO_
}

void TInviteGetShopPageGetInfoReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TInviteGetShopPageGetInfoReq)
  // optional uint32 ShopId = 1;
  if (has_shopid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->shopid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TInviteGetShopPageGetInfoReq)
}

::google::protobuf::uint8* TInviteGetShopPageGetInfoReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TInviteGetShopPageGetInfoReq)
  // optional uint32 ShopId = 1;
  if (has_shopid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->shopid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TInviteGetShopPageGetInfoReq)
  return target;
}

int TInviteGetShopPageGetInfoReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 ShopId = 1;
    if (has_shopid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->shopid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TInviteGetShopPageGetInfoReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TInviteGetShopPageGetInfoReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TInviteGetShopPageGetInfoReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TInviteGetShopPageGetInfoReq::MergeFrom(const TInviteGetShopPageGetInfoReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_shopid()) {
      set_shopid(from.shopid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TInviteGetShopPageGetInfoReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TInviteGetShopPageGetInfoReq::CopyFrom(const TInviteGetShopPageGetInfoReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TInviteGetShopPageGetInfoReq::IsInitialized() const {

  return true;
}

void TInviteGetShopPageGetInfoReq::Swap(TInviteGetShopPageGetInfoReq* other) {
  if (other != this) {
    std::swap(shopid_, other->shopid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TInviteGetShopPageGetInfoReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TInviteGetShopPageGetInfoReq_descriptor_;
  metadata.reflection = TInviteGetShopPageGetInfoReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TInviteGetShopPageGetInfoRsp::kRefreshTimeFieldNumber;
const int TInviteGetShopPageGetInfoRsp::kShopItemInfoArrFieldNumber;
#endif  // !_MSC_VER

TInviteGetShopPageGetInfoRsp::TInviteGetShopPageGetInfoRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TInviteGetShopPageGetInfoRsp)
}

void TInviteGetShopPageGetInfoRsp::InitAsDefaultInstance() {
}

TInviteGetShopPageGetInfoRsp::TInviteGetShopPageGetInfoRsp(const TInviteGetShopPageGetInfoRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TInviteGetShopPageGetInfoRsp)
}

void TInviteGetShopPageGetInfoRsp::SharedCtor() {
  _cached_size_ = 0;
  refreshtime_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TInviteGetShopPageGetInfoRsp::~TInviteGetShopPageGetInfoRsp() {
  // @@protoc_insertion_point(destructor:pb.TInviteGetShopPageGetInfoRsp)
  SharedDtor();
}

void TInviteGetShopPageGetInfoRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TInviteGetShopPageGetInfoRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TInviteGetShopPageGetInfoRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TInviteGetShopPageGetInfoRsp_descriptor_;
}

const TInviteGetShopPageGetInfoRsp& TInviteGetShopPageGetInfoRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fInvite_2eproto();
  return *default_instance_;
}

TInviteGetShopPageGetInfoRsp* TInviteGetShopPageGetInfoRsp::default_instance_ = NULL;

TInviteGetShopPageGetInfoRsp* TInviteGetShopPageGetInfoRsp::New() const {
  return new TInviteGetShopPageGetInfoRsp;
}

void TInviteGetShopPageGetInfoRsp::Clear() {
  refreshtime_ = GOOGLE_ULONGLONG(0);
  shopiteminfoarr_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TInviteGetShopPageGetInfoRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TInviteGetShopPageGetInfoRsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 RefreshTime = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &refreshtime_)));
          set_has_refreshtime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_ShopItemInfoArr;
        break;
      }

      // repeated .pb.TInviteShopItem ShopItemInfoArr = 2;
      case 2: {
        if (tag == 18) {
         parse_ShopItemInfoArr:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_shopiteminfoarr()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_ShopItemInfoArr;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TInviteGetShopPageGetInfoRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TInviteGetShopPageGetInfoRsp)
  return false;
#undef DO_
}

void TInviteGetShopPageGetInfoRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TInviteGetShopPageGetInfoRsp)
  // optional uint64 RefreshTime = 1;
  if (has_refreshtime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->refreshtime(), output);
  }

  // repeated .pb.TInviteShopItem ShopItemInfoArr = 2;
  for (int i = 0; i < this->shopiteminfoarr_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->shopiteminfoarr(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TInviteGetShopPageGetInfoRsp)
}

::google::protobuf::uint8* TInviteGetShopPageGetInfoRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TInviteGetShopPageGetInfoRsp)
  // optional uint64 RefreshTime = 1;
  if (has_refreshtime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->refreshtime(), target);
  }

  // repeated .pb.TInviteShopItem ShopItemInfoArr = 2;
  for (int i = 0; i < this->shopiteminfoarr_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->shopiteminfoarr(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TInviteGetShopPageGetInfoRsp)
  return target;
}

int TInviteGetShopPageGetInfoRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 RefreshTime = 1;
    if (has_refreshtime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->refreshtime());
    }

  }
  // repeated .pb.TInviteShopItem ShopItemInfoArr = 2;
  total_size += 1 * this->shopiteminfoarr_size();
  for (int i = 0; i < this->shopiteminfoarr_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->shopiteminfoarr(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TInviteGetShopPageGetInfoRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TInviteGetShopPageGetInfoRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TInviteGetShopPageGetInfoRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TInviteGetShopPageGetInfoRsp::MergeFrom(const TInviteGetShopPageGetInfoRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  shopiteminfoarr_.MergeFrom(from.shopiteminfoarr_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_refreshtime()) {
      set_refreshtime(from.refreshtime());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TInviteGetShopPageGetInfoRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TInviteGetShopPageGetInfoRsp::CopyFrom(const TInviteGetShopPageGetInfoRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TInviteGetShopPageGetInfoRsp::IsInitialized() const {

  return true;
}

void TInviteGetShopPageGetInfoRsp::Swap(TInviteGetShopPageGetInfoRsp* other) {
  if (other != this) {
    std::swap(refreshtime_, other->refreshtime_);
    shopiteminfoarr_.Swap(&other->shopiteminfoarr_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TInviteGetShopPageGetInfoRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TInviteGetShopPageGetInfoRsp_descriptor_;
  metadata.reflection = TInviteGetShopPageGetInfoRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TInviteShopItem::kShopItemIdFieldNumber;
const int TInviteShopItem::kBuyTimesFieldNumber;
#endif  // !_MSC_VER

TInviteShopItem::TInviteShopItem()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TInviteShopItem)
}

void TInviteShopItem::InitAsDefaultInstance() {
}

TInviteShopItem::TInviteShopItem(const TInviteShopItem& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TInviteShopItem)
}

void TInviteShopItem::SharedCtor() {
  _cached_size_ = 0;
  shopitemid_ = 0u;
  buytimes_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TInviteShopItem::~TInviteShopItem() {
  // @@protoc_insertion_point(destructor:pb.TInviteShopItem)
  SharedDtor();
}

void TInviteShopItem::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TInviteShopItem::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TInviteShopItem::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TInviteShopItem_descriptor_;
}

const TInviteShopItem& TInviteShopItem::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fInvite_2eproto();
  return *default_instance_;
}

TInviteShopItem* TInviteShopItem::default_instance_ = NULL;

TInviteShopItem* TInviteShopItem::New() const {
  return new TInviteShopItem;
}

void TInviteShopItem::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<TInviteShopItem*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(shopitemid_, buytimes_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TInviteShopItem::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TInviteShopItem)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 ShopItemId = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &shopitemid_)));
          set_has_shopitemid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_BuyTimes;
        break;
      }

      // optional uint32 BuyTimes = 2;
      case 2: {
        if (tag == 16) {
         parse_BuyTimes:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &buytimes_)));
          set_has_buytimes();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TInviteShopItem)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TInviteShopItem)
  return false;
#undef DO_
}

void TInviteShopItem::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TInviteShopItem)
  // optional uint32 ShopItemId = 1;
  if (has_shopitemid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->shopitemid(), output);
  }

  // optional uint32 BuyTimes = 2;
  if (has_buytimes()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->buytimes(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TInviteShopItem)
}

::google::protobuf::uint8* TInviteShopItem::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TInviteShopItem)
  // optional uint32 ShopItemId = 1;
  if (has_shopitemid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->shopitemid(), target);
  }

  // optional uint32 BuyTimes = 2;
  if (has_buytimes()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->buytimes(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TInviteShopItem)
  return target;
}

int TInviteShopItem::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 ShopItemId = 1;
    if (has_shopitemid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->shopitemid());
    }

    // optional uint32 BuyTimes = 2;
    if (has_buytimes()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->buytimes());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TInviteShopItem::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TInviteShopItem* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TInviteShopItem*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TInviteShopItem::MergeFrom(const TInviteShopItem& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_shopitemid()) {
      set_shopitemid(from.shopitemid());
    }
    if (from.has_buytimes()) {
      set_buytimes(from.buytimes());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TInviteShopItem::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TInviteShopItem::CopyFrom(const TInviteShopItem& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TInviteShopItem::IsInitialized() const {

  return true;
}

void TInviteShopItem::Swap(TInviteShopItem* other) {
  if (other != this) {
    std::swap(shopitemid_, other->shopitemid_);
    std::swap(buytimes_, other->buytimes_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TInviteShopItem::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TInviteShopItem_descriptor_;
  metadata.reflection = TInviteShopItem_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TInviteBuyItemReq::kShopItemInfoFieldNumber;
#endif  // !_MSC_VER

TInviteBuyItemReq::TInviteBuyItemReq()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TInviteBuyItemReq)
}

void TInviteBuyItemReq::InitAsDefaultInstance() {
  shopiteminfo_ = const_cast< ::pb::TInviteShopItem*>(&::pb::TInviteShopItem::default_instance());
}

TInviteBuyItemReq::TInviteBuyItemReq(const TInviteBuyItemReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TInviteBuyItemReq)
}

void TInviteBuyItemReq::SharedCtor() {
  _cached_size_ = 0;
  shopiteminfo_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TInviteBuyItemReq::~TInviteBuyItemReq() {
  // @@protoc_insertion_point(destructor:pb.TInviteBuyItemReq)
  SharedDtor();
}

void TInviteBuyItemReq::SharedDtor() {
  if (this != default_instance_) {
    delete shopiteminfo_;
  }
}

void TInviteBuyItemReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TInviteBuyItemReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TInviteBuyItemReq_descriptor_;
}

const TInviteBuyItemReq& TInviteBuyItemReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fInvite_2eproto();
  return *default_instance_;
}

TInviteBuyItemReq* TInviteBuyItemReq::default_instance_ = NULL;

TInviteBuyItemReq* TInviteBuyItemReq::New() const {
  return new TInviteBuyItemReq;
}

void TInviteBuyItemReq::Clear() {
  if (has_shopiteminfo()) {
    if (shopiteminfo_ != NULL) shopiteminfo_->::pb::TInviteShopItem::Clear();
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TInviteBuyItemReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TInviteBuyItemReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .pb.TInviteShopItem ShopItemInfo = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_shopiteminfo()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TInviteBuyItemReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TInviteBuyItemReq)
  return false;
#undef DO_
}

void TInviteBuyItemReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TInviteBuyItemReq)
  // optional .pb.TInviteShopItem ShopItemInfo = 1;
  if (has_shopiteminfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->shopiteminfo(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TInviteBuyItemReq)
}

::google::protobuf::uint8* TInviteBuyItemReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TInviteBuyItemReq)
  // optional .pb.TInviteShopItem ShopItemInfo = 1;
  if (has_shopiteminfo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->shopiteminfo(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TInviteBuyItemReq)
  return target;
}

int TInviteBuyItemReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .pb.TInviteShopItem ShopItemInfo = 1;
    if (has_shopiteminfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->shopiteminfo());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TInviteBuyItemReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TInviteBuyItemReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TInviteBuyItemReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TInviteBuyItemReq::MergeFrom(const TInviteBuyItemReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_shopiteminfo()) {
      mutable_shopiteminfo()->::pb::TInviteShopItem::MergeFrom(from.shopiteminfo());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TInviteBuyItemReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TInviteBuyItemReq::CopyFrom(const TInviteBuyItemReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TInviteBuyItemReq::IsInitialized() const {

  return true;
}

void TInviteBuyItemReq::Swap(TInviteBuyItemReq* other) {
  if (other != this) {
    std::swap(shopiteminfo_, other->shopiteminfo_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TInviteBuyItemReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TInviteBuyItemReq_descriptor_;
  metadata.reflection = TInviteBuyItemReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TInviteBuyItemRsp::kShopItemArrFieldNumber;
#endif  // !_MSC_VER

TInviteBuyItemRsp::TInviteBuyItemRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TInviteBuyItemRsp)
}

void TInviteBuyItemRsp::InitAsDefaultInstance() {
}

TInviteBuyItemRsp::TInviteBuyItemRsp(const TInviteBuyItemRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TInviteBuyItemRsp)
}

void TInviteBuyItemRsp::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TInviteBuyItemRsp::~TInviteBuyItemRsp() {
  // @@protoc_insertion_point(destructor:pb.TInviteBuyItemRsp)
  SharedDtor();
}

void TInviteBuyItemRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TInviteBuyItemRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TInviteBuyItemRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TInviteBuyItemRsp_descriptor_;
}

const TInviteBuyItemRsp& TInviteBuyItemRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fInvite_2eproto();
  return *default_instance_;
}

TInviteBuyItemRsp* TInviteBuyItemRsp::default_instance_ = NULL;

TInviteBuyItemRsp* TInviteBuyItemRsp::New() const {
  return new TInviteBuyItemRsp;
}

void TInviteBuyItemRsp::Clear() {
  shopitemarr_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TInviteBuyItemRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TInviteBuyItemRsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .pb.TCommonReward ShopItemArr = 1;
      case 1: {
        if (tag == 10) {
         parse_ShopItemArr:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_shopitemarr()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_ShopItemArr;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TInviteBuyItemRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TInviteBuyItemRsp)
  return false;
#undef DO_
}

void TInviteBuyItemRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TInviteBuyItemRsp)
  // repeated .pb.TCommonReward ShopItemArr = 1;
  for (int i = 0; i < this->shopitemarr_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->shopitemarr(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TInviteBuyItemRsp)
}

::google::protobuf::uint8* TInviteBuyItemRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TInviteBuyItemRsp)
  // repeated .pb.TCommonReward ShopItemArr = 1;
  for (int i = 0; i < this->shopitemarr_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->shopitemarr(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TInviteBuyItemRsp)
  return target;
}

int TInviteBuyItemRsp::ByteSize() const {
  int total_size = 0;

  // repeated .pb.TCommonReward ShopItemArr = 1;
  total_size += 1 * this->shopitemarr_size();
  for (int i = 0; i < this->shopitemarr_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->shopitemarr(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TInviteBuyItemRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TInviteBuyItemRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TInviteBuyItemRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TInviteBuyItemRsp::MergeFrom(const TInviteBuyItemRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  shopitemarr_.MergeFrom(from.shopitemarr_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TInviteBuyItemRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TInviteBuyItemRsp::CopyFrom(const TInviteBuyItemRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TInviteBuyItemRsp::IsInitialized() const {

  return true;
}

void TInviteBuyItemRsp::Swap(TInviteBuyItemRsp* other) {
  if (other != this) {
    shopitemarr_.Swap(&other->shopitemarr_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TInviteBuyItemRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TInviteBuyItemRsp_descriptor_;
  metadata.reflection = TInviteBuyItemRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TInviteInviteByOtherReq::kInviteCodeFieldNumber;
const int TInviteInviteByOtherReq::kInviteeUidFieldNumber;
#endif  // !_MSC_VER

TInviteInviteByOtherReq::TInviteInviteByOtherReq()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TInviteInviteByOtherReq)
}

void TInviteInviteByOtherReq::InitAsDefaultInstance() {
}

TInviteInviteByOtherReq::TInviteInviteByOtherReq(const TInviteInviteByOtherReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TInviteInviteByOtherReq)
}

void TInviteInviteByOtherReq::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  invitecode_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  inviteeuid_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TInviteInviteByOtherReq::~TInviteInviteByOtherReq() {
  // @@protoc_insertion_point(destructor:pb.TInviteInviteByOtherReq)
  SharedDtor();
}

void TInviteInviteByOtherReq::SharedDtor() {
  if (invitecode_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete invitecode_;
  }
  if (this != default_instance_) {
  }
}

void TInviteInviteByOtherReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TInviteInviteByOtherReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TInviteInviteByOtherReq_descriptor_;
}

const TInviteInviteByOtherReq& TInviteInviteByOtherReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fInvite_2eproto();
  return *default_instance_;
}

TInviteInviteByOtherReq* TInviteInviteByOtherReq::default_instance_ = NULL;

TInviteInviteByOtherReq* TInviteInviteByOtherReq::New() const {
  return new TInviteInviteByOtherReq;
}

void TInviteInviteByOtherReq::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    if (has_invitecode()) {
      if (invitecode_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        invitecode_->clear();
      }
    }
    inviteeuid_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TInviteInviteByOtherReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TInviteInviteByOtherReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string InviteCode = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_invitecode()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->invitecode().data(), this->invitecode().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "invitecode");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_InviteeUid;
        break;
      }

      // optional uint64 InviteeUid = 2;
      case 2: {
        if (tag == 16) {
         parse_InviteeUid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &inviteeuid_)));
          set_has_inviteeuid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TInviteInviteByOtherReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TInviteInviteByOtherReq)
  return false;
#undef DO_
}

void TInviteInviteByOtherReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TInviteInviteByOtherReq)
  // optional string InviteCode = 1;
  if (has_invitecode()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->invitecode().data(), this->invitecode().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "invitecode");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->invitecode(), output);
  }

  // optional uint64 InviteeUid = 2;
  if (has_inviteeuid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->inviteeuid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TInviteInviteByOtherReq)
}

::google::protobuf::uint8* TInviteInviteByOtherReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TInviteInviteByOtherReq)
  // optional string InviteCode = 1;
  if (has_invitecode()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->invitecode().data(), this->invitecode().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "invitecode");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->invitecode(), target);
  }

  // optional uint64 InviteeUid = 2;
  if (has_inviteeuid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->inviteeuid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TInviteInviteByOtherReq)
  return target;
}

int TInviteInviteByOtherReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string InviteCode = 1;
    if (has_invitecode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->invitecode());
    }

    // optional uint64 InviteeUid = 2;
    if (has_inviteeuid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->inviteeuid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TInviteInviteByOtherReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TInviteInviteByOtherReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TInviteInviteByOtherReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TInviteInviteByOtherReq::MergeFrom(const TInviteInviteByOtherReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_invitecode()) {
      set_invitecode(from.invitecode());
    }
    if (from.has_inviteeuid()) {
      set_inviteeuid(from.inviteeuid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TInviteInviteByOtherReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TInviteInviteByOtherReq::CopyFrom(const TInviteInviteByOtherReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TInviteInviteByOtherReq::IsInitialized() const {

  return true;
}

void TInviteInviteByOtherReq::Swap(TInviteInviteByOtherReq* other) {
  if (other != this) {
    std::swap(invitecode_, other->invitecode_);
    std::swap(inviteeuid_, other->inviteeuid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TInviteInviteByOtherReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TInviteInviteByOtherReq_descriptor_;
  metadata.reflection = TInviteInviteByOtherReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TInviteNotify::kInviteNumFieldNumber;
const int TInviteNotify::kPowerAchvArrFieldNumber;
const int TInviteNotify::kVIPAchvArrFieldNumber;
const int TInviteNotify::kInviteNumAchvArrFieldNumber;
const int TInviteNotify::kCanGetInvitePointFieldNumber;
const int TInviteNotify::kHistoryInvitePointFieldNumber;
#endif  // !_MSC_VER

TInviteNotify::TInviteNotify()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TInviteNotify)
}

void TInviteNotify::InitAsDefaultInstance() {
}

TInviteNotify::TInviteNotify(const TInviteNotify& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TInviteNotify)
}

void TInviteNotify::SharedCtor() {
  _cached_size_ = 0;
  invitenum_ = 0u;
  cangetinvitepoint_ = GOOGLE_ULONGLONG(0);
  historyinvitepoint_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TInviteNotify::~TInviteNotify() {
  // @@protoc_insertion_point(destructor:pb.TInviteNotify)
  SharedDtor();
}

void TInviteNotify::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TInviteNotify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TInviteNotify::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TInviteNotify_descriptor_;
}

const TInviteNotify& TInviteNotify::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fInvite_2eproto();
  return *default_instance_;
}

TInviteNotify* TInviteNotify::default_instance_ = NULL;

TInviteNotify* TInviteNotify::New() const {
  return new TInviteNotify;
}

void TInviteNotify::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<TInviteNotify*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(cangetinvitepoint_, invitenum_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  powerachvarr_.Clear();
  vipachvarr_.Clear();
  invitenumachvarr_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TInviteNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TInviteNotify)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 InviteNum = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &invitenum_)));
          set_has_invitenum();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_PowerAchvArr;
        break;
      }

      // repeated .pb.TInviteAchvItem PowerAchvArr = 2;
      case 2: {
        if (tag == 18) {
         parse_PowerAchvArr:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_powerachvarr()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_PowerAchvArr;
        if (input->ExpectTag(26)) goto parse_VIPAchvArr;
        break;
      }

      // repeated .pb.TInviteAchvItem VIPAchvArr = 3;
      case 3: {
        if (tag == 26) {
         parse_VIPAchvArr:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_vipachvarr()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_VIPAchvArr;
        if (input->ExpectTag(34)) goto parse_InviteNumAchvArr;
        break;
      }

      // repeated .pb.TInviteAchvItem InviteNumAchvArr = 4;
      case 4: {
        if (tag == 34) {
         parse_InviteNumAchvArr:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_invitenumachvarr()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_InviteNumAchvArr;
        if (input->ExpectTag(40)) goto parse_CanGetInvitePoint;
        break;
      }

      // optional uint64 CanGetInvitePoint = 5;
      case 5: {
        if (tag == 40) {
         parse_CanGetInvitePoint:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &cangetinvitepoint_)));
          set_has_cangetinvitepoint();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_HistoryInvitePoint;
        break;
      }

      // optional uint64 HistoryInvitePoint = 6;
      case 6: {
        if (tag == 48) {
         parse_HistoryInvitePoint:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &historyinvitepoint_)));
          set_has_historyinvitepoint();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TInviteNotify)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TInviteNotify)
  return false;
#undef DO_
}

void TInviteNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TInviteNotify)
  // optional uint32 InviteNum = 1;
  if (has_invitenum()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->invitenum(), output);
  }

  // repeated .pb.TInviteAchvItem PowerAchvArr = 2;
  for (int i = 0; i < this->powerachvarr_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->powerachvarr(i), output);
  }

  // repeated .pb.TInviteAchvItem VIPAchvArr = 3;
  for (int i = 0; i < this->vipachvarr_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->vipachvarr(i), output);
  }

  // repeated .pb.TInviteAchvItem InviteNumAchvArr = 4;
  for (int i = 0; i < this->invitenumachvarr_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->invitenumachvarr(i), output);
  }

  // optional uint64 CanGetInvitePoint = 5;
  if (has_cangetinvitepoint()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(5, this->cangetinvitepoint(), output);
  }

  // optional uint64 HistoryInvitePoint = 6;
  if (has_historyinvitepoint()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(6, this->historyinvitepoint(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TInviteNotify)
}

::google::protobuf::uint8* TInviteNotify::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TInviteNotify)
  // optional uint32 InviteNum = 1;
  if (has_invitenum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->invitenum(), target);
  }

  // repeated .pb.TInviteAchvItem PowerAchvArr = 2;
  for (int i = 0; i < this->powerachvarr_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->powerachvarr(i), target);
  }

  // repeated .pb.TInviteAchvItem VIPAchvArr = 3;
  for (int i = 0; i < this->vipachvarr_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->vipachvarr(i), target);
  }

  // repeated .pb.TInviteAchvItem InviteNumAchvArr = 4;
  for (int i = 0; i < this->invitenumachvarr_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->invitenumachvarr(i), target);
  }

  // optional uint64 CanGetInvitePoint = 5;
  if (has_cangetinvitepoint()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(5, this->cangetinvitepoint(), target);
  }

  // optional uint64 HistoryInvitePoint = 6;
  if (has_historyinvitepoint()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(6, this->historyinvitepoint(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TInviteNotify)
  return target;
}

int TInviteNotify::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 InviteNum = 1;
    if (has_invitenum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->invitenum());
    }

    // optional uint64 CanGetInvitePoint = 5;
    if (has_cangetinvitepoint()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->cangetinvitepoint());
    }

    // optional uint64 HistoryInvitePoint = 6;
    if (has_historyinvitepoint()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->historyinvitepoint());
    }

  }
  // repeated .pb.TInviteAchvItem PowerAchvArr = 2;
  total_size += 1 * this->powerachvarr_size();
  for (int i = 0; i < this->powerachvarr_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->powerachvarr(i));
  }

  // repeated .pb.TInviteAchvItem VIPAchvArr = 3;
  total_size += 1 * this->vipachvarr_size();
  for (int i = 0; i < this->vipachvarr_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->vipachvarr(i));
  }

  // repeated .pb.TInviteAchvItem InviteNumAchvArr = 4;
  total_size += 1 * this->invitenumachvarr_size();
  for (int i = 0; i < this->invitenumachvarr_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->invitenumachvarr(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TInviteNotify::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TInviteNotify* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TInviteNotify*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TInviteNotify::MergeFrom(const TInviteNotify& from) {
  GOOGLE_CHECK_NE(&from, this);
  powerachvarr_.MergeFrom(from.powerachvarr_);
  vipachvarr_.MergeFrom(from.vipachvarr_);
  invitenumachvarr_.MergeFrom(from.invitenumachvarr_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_invitenum()) {
      set_invitenum(from.invitenum());
    }
    if (from.has_cangetinvitepoint()) {
      set_cangetinvitepoint(from.cangetinvitepoint());
    }
    if (from.has_historyinvitepoint()) {
      set_historyinvitepoint(from.historyinvitepoint());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TInviteNotify::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TInviteNotify::CopyFrom(const TInviteNotify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TInviteNotify::IsInitialized() const {

  return true;
}

void TInviteNotify::Swap(TInviteNotify* other) {
  if (other != this) {
    std::swap(invitenum_, other->invitenum_);
    powerachvarr_.Swap(&other->powerachvarr_);
    vipachvarr_.Swap(&other->vipachvarr_);
    invitenumachvarr_.Swap(&other->invitenumachvarr_);
    std::swap(cangetinvitepoint_, other->cangetinvitepoint_);
    std::swap(historyinvitepoint_, other->historyinvitepoint_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TInviteNotify::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TInviteNotify_descriptor_;
  metadata.reflection = TInviteNotify_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TInviteSendInfoToInviterReq::kInviterUidFieldNumber;
const int TInviteSendInfoToInviterReq::kInviteeUidFieldNumber;
const int TInviteSendInfoToInviterReq::kPowerFieldNumber;
const int TInviteSendInfoToInviterReq::kVIPFieldNumber;
const int TInviteSendInfoToInviterReq::kPayFieldNumber;
const int TInviteSendInfoToInviterReq::kCurrLevelFieldNumber;
#endif  // !_MSC_VER

TInviteSendInfoToInviterReq::TInviteSendInfoToInviterReq()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TInviteSendInfoToInviterReq)
}

void TInviteSendInfoToInviterReq::InitAsDefaultInstance() {
}

TInviteSendInfoToInviterReq::TInviteSendInfoToInviterReq(const TInviteSendInfoToInviterReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TInviteSendInfoToInviterReq)
}

void TInviteSendInfoToInviterReq::SharedCtor() {
  _cached_size_ = 0;
  inviteruid_ = GOOGLE_ULONGLONG(0);
  inviteeuid_ = GOOGLE_ULONGLONG(0);
  power_ = GOOGLE_ULONGLONG(0);
  vip_ = 0u;
  pay_ = GOOGLE_ULONGLONG(0);
  currlevel_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TInviteSendInfoToInviterReq::~TInviteSendInfoToInviterReq() {
  // @@protoc_insertion_point(destructor:pb.TInviteSendInfoToInviterReq)
  SharedDtor();
}

void TInviteSendInfoToInviterReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TInviteSendInfoToInviterReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TInviteSendInfoToInviterReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TInviteSendInfoToInviterReq_descriptor_;
}

const TInviteSendInfoToInviterReq& TInviteSendInfoToInviterReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fInvite_2eproto();
  return *default_instance_;
}

TInviteSendInfoToInviterReq* TInviteSendInfoToInviterReq::default_instance_ = NULL;

TInviteSendInfoToInviterReq* TInviteSendInfoToInviterReq::New() const {
  return new TInviteSendInfoToInviterReq;
}

void TInviteSendInfoToInviterReq::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<TInviteSendInfoToInviterReq*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 63) {
    ZR_(inviteruid_, currlevel_);
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TInviteSendInfoToInviterReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TInviteSendInfoToInviterReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 InviterUid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &inviteruid_)));
          set_has_inviteruid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_InviteeUid;
        break;
      }

      // optional uint64 InviteeUid = 2;
      case 2: {
        if (tag == 16) {
         parse_InviteeUid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &inviteeuid_)));
          set_has_inviteeuid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_Power;
        break;
      }

      // optional uint64 Power = 3;
      case 3: {
        if (tag == 24) {
         parse_Power:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &power_)));
          set_has_power();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_VIP;
        break;
      }

      // optional uint32 VIP = 4;
      case 4: {
        if (tag == 32) {
         parse_VIP:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &vip_)));
          set_has_vip();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_Pay;
        break;
      }

      // optional uint64 Pay = 5;
      case 5: {
        if (tag == 40) {
         parse_Pay:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &pay_)));
          set_has_pay();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_CurrLevel;
        break;
      }

      // optional uint32 CurrLevel = 6;
      case 6: {
        if (tag == 48) {
         parse_CurrLevel:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &currlevel_)));
          set_has_currlevel();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TInviteSendInfoToInviterReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TInviteSendInfoToInviterReq)
  return false;
#undef DO_
}

void TInviteSendInfoToInviterReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TInviteSendInfoToInviterReq)
  // optional uint64 InviterUid = 1;
  if (has_inviteruid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->inviteruid(), output);
  }

  // optional uint64 InviteeUid = 2;
  if (has_inviteeuid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->inviteeuid(), output);
  }

  // optional uint64 Power = 3;
  if (has_power()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->power(), output);
  }

  // optional uint32 VIP = 4;
  if (has_vip()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->vip(), output);
  }

  // optional uint64 Pay = 5;
  if (has_pay()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(5, this->pay(), output);
  }

  // optional uint32 CurrLevel = 6;
  if (has_currlevel()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->currlevel(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TInviteSendInfoToInviterReq)
}

::google::protobuf::uint8* TInviteSendInfoToInviterReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TInviteSendInfoToInviterReq)
  // optional uint64 InviterUid = 1;
  if (has_inviteruid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->inviteruid(), target);
  }

  // optional uint64 InviteeUid = 2;
  if (has_inviteeuid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->inviteeuid(), target);
  }

  // optional uint64 Power = 3;
  if (has_power()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->power(), target);
  }

  // optional uint32 VIP = 4;
  if (has_vip()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->vip(), target);
  }

  // optional uint64 Pay = 5;
  if (has_pay()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(5, this->pay(), target);
  }

  // optional uint32 CurrLevel = 6;
  if (has_currlevel()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->currlevel(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TInviteSendInfoToInviterReq)
  return target;
}

int TInviteSendInfoToInviterReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 InviterUid = 1;
    if (has_inviteruid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->inviteruid());
    }

    // optional uint64 InviteeUid = 2;
    if (has_inviteeuid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->inviteeuid());
    }

    // optional uint64 Power = 3;
    if (has_power()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->power());
    }

    // optional uint32 VIP = 4;
    if (has_vip()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->vip());
    }

    // optional uint64 Pay = 5;
    if (has_pay()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->pay());
    }

    // optional uint32 CurrLevel = 6;
    if (has_currlevel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->currlevel());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TInviteSendInfoToInviterReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TInviteSendInfoToInviterReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TInviteSendInfoToInviterReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TInviteSendInfoToInviterReq::MergeFrom(const TInviteSendInfoToInviterReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_inviteruid()) {
      set_inviteruid(from.inviteruid());
    }
    if (from.has_inviteeuid()) {
      set_inviteeuid(from.inviteeuid());
    }
    if (from.has_power()) {
      set_power(from.power());
    }
    if (from.has_vip()) {
      set_vip(from.vip());
    }
    if (from.has_pay()) {
      set_pay(from.pay());
    }
    if (from.has_currlevel()) {
      set_currlevel(from.currlevel());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TInviteSendInfoToInviterReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TInviteSendInfoToInviterReq::CopyFrom(const TInviteSendInfoToInviterReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TInviteSendInfoToInviterReq::IsInitialized() const {

  return true;
}

void TInviteSendInfoToInviterReq::Swap(TInviteSendInfoToInviterReq* other) {
  if (other != this) {
    std::swap(inviteruid_, other->inviteruid_);
    std::swap(inviteeuid_, other->inviteeuid_);
    std::swap(power_, other->power_);
    std::swap(vip_, other->vip_);
    std::swap(pay_, other->pay_);
    std::swap(currlevel_, other->currlevel_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TInviteSendInfoToInviterReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TInviteSendInfoToInviterReq_descriptor_;
  metadata.reflection = TInviteSendInfoToInviterReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TInviteSendInfoToInviterRsp::kErrCodeFieldNumber;
#endif  // !_MSC_VER

TInviteSendInfoToInviterRsp::TInviteSendInfoToInviterRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TInviteSendInfoToInviterRsp)
}

void TInviteSendInfoToInviterRsp::InitAsDefaultInstance() {
}

TInviteSendInfoToInviterRsp::TInviteSendInfoToInviterRsp(const TInviteSendInfoToInviterRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TInviteSendInfoToInviterRsp)
}

void TInviteSendInfoToInviterRsp::SharedCtor() {
  _cached_size_ = 0;
  errcode_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TInviteSendInfoToInviterRsp::~TInviteSendInfoToInviterRsp() {
  // @@protoc_insertion_point(destructor:pb.TInviteSendInfoToInviterRsp)
  SharedDtor();
}

void TInviteSendInfoToInviterRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TInviteSendInfoToInviterRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TInviteSendInfoToInviterRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TInviteSendInfoToInviterRsp_descriptor_;
}

const TInviteSendInfoToInviterRsp& TInviteSendInfoToInviterRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fInvite_2eproto();
  return *default_instance_;
}

TInviteSendInfoToInviterRsp* TInviteSendInfoToInviterRsp::default_instance_ = NULL;

TInviteSendInfoToInviterRsp* TInviteSendInfoToInviterRsp::New() const {
  return new TInviteSendInfoToInviterRsp;
}

void TInviteSendInfoToInviterRsp::Clear() {
  errcode_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TInviteSendInfoToInviterRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TInviteSendInfoToInviterRsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .pb.EInviteErrCode ErrCode = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::pb::EInviteErrCode_IsValid(value)) {
            set_errcode(static_cast< ::pb::EInviteErrCode >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TInviteSendInfoToInviterRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TInviteSendInfoToInviterRsp)
  return false;
#undef DO_
}

void TInviteSendInfoToInviterRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TInviteSendInfoToInviterRsp)
  // optional .pb.EInviteErrCode ErrCode = 1;
  if (has_errcode()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->errcode(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TInviteSendInfoToInviterRsp)
}

::google::protobuf::uint8* TInviteSendInfoToInviterRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TInviteSendInfoToInviterRsp)
  // optional .pb.EInviteErrCode ErrCode = 1;
  if (has_errcode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->errcode(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TInviteSendInfoToInviterRsp)
  return target;
}

int TInviteSendInfoToInviterRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .pb.EInviteErrCode ErrCode = 1;
    if (has_errcode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->errcode());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TInviteSendInfoToInviterRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TInviteSendInfoToInviterRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TInviteSendInfoToInviterRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TInviteSendInfoToInviterRsp::MergeFrom(const TInviteSendInfoToInviterRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_errcode()) {
      set_errcode(from.errcode());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TInviteSendInfoToInviterRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TInviteSendInfoToInviterRsp::CopyFrom(const TInviteSendInfoToInviterRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TInviteSendInfoToInviterRsp::IsInitialized() const {

  return true;
}

void TInviteSendInfoToInviterRsp::Swap(TInviteSendInfoToInviterRsp* other) {
  if (other != this) {
    std::swap(errcode_, other->errcode_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TInviteSendInfoToInviterRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TInviteSendInfoToInviterRsp_descriptor_;
  metadata.reflection = TInviteSendInfoToInviterRsp_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace pb

// @@protoc_insertion_point(global_scope)
