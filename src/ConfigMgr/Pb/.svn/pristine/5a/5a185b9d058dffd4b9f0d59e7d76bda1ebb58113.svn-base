// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: net/Mirror.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "net/Mirror.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace pb {

namespace {

const ::google::protobuf::Descriptor* TMirrorInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TMirrorInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* TMirrorUnitInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TMirrorUnitInfo_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_net_2fMirror_2eproto() {
  protobuf_AddDesc_net_2fMirror_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "net/Mirror.proto");
  GOOGLE_CHECK(file != NULL);
  TMirrorInfo_descriptor_ = file->message_type(0);
  static const int TMirrorInfo_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TMirrorInfo, uname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TMirrorInfo, guild_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TMirrorInfo, userlevel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TMirrorInfo, avatarid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TMirrorInfo, viplevel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TMirrorInfo, fightforce_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TMirrorInfo, unitarr_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TMirrorInfo, avatarframeid_),
  };
  TMirrorInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TMirrorInfo_descriptor_,
      TMirrorInfo::default_instance_,
      TMirrorInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TMirrorInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TMirrorInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TMirrorInfo));
  TMirrorUnitInfo_descriptor_ = file->message_type(1);
  static const int TMirrorUnitInfo_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TMirrorUnitInfo, unitinfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TMirrorUnitInfo, heroinfo_),
  };
  TMirrorUnitInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TMirrorUnitInfo_descriptor_,
      TMirrorUnitInfo::default_instance_,
      TMirrorUnitInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TMirrorUnitInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TMirrorUnitInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TMirrorUnitInfo));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_net_2fMirror_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TMirrorInfo_descriptor_, &TMirrorInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TMirrorUnitInfo_descriptor_, &TMirrorUnitInfo::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_net_2fMirror_2eproto() {
  delete TMirrorInfo::default_instance_;
  delete TMirrorInfo_reflection_;
  delete TMirrorUnitInfo::default_instance_;
  delete TMirrorUnitInfo_reflection_;
}

void protobuf_AddDesc_net_2fMirror_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::pb::protobuf_AddDesc_net_2fBattle_2eproto();
  ::pb::protobuf_AddDesc_net_2fHero_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\020net/Mirror.proto\022\002pb\032\020net/Battle.proto"
    "\032\016net/Hero.proto\"\263\001\n\013TMirrorInfo\022\r\n\005Unam"
    "e\030\001 \001(\t\022\r\n\005Guild\030\002 \001(\t\022\021\n\tUserLevel\030\003 \001("
    "\r\022\020\n\010AvatarId\030\004 \001(\r\022\020\n\010VipLevel\030\005 \001(\r\022\022\n"
    "\nFightForce\030\006 \001(\004\022$\n\007UnitArr\030\007 \003(\0132\023.pb."
    "TMirrorUnitInfo\022\025\n\rAvatarFrameId\030\010 \001(\r\"S"
    "\n\017TMirrorUnitInfo\022\037\n\010UnitInfo\030\001 \001(\0132\r.pb"
    ".TUnitInfo\022\037\n\010HeroInfo\030\002 \001(\0132\r.pb.THeroI"
    "nfo", 323);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "net/Mirror.proto", &protobuf_RegisterTypes);
  TMirrorInfo::default_instance_ = new TMirrorInfo();
  TMirrorUnitInfo::default_instance_ = new TMirrorUnitInfo();
  TMirrorInfo::default_instance_->InitAsDefaultInstance();
  TMirrorUnitInfo::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_net_2fMirror_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_net_2fMirror_2eproto {
  StaticDescriptorInitializer_net_2fMirror_2eproto() {
    protobuf_AddDesc_net_2fMirror_2eproto();
  }
} static_descriptor_initializer_net_2fMirror_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int TMirrorInfo::kUnameFieldNumber;
const int TMirrorInfo::kGuildFieldNumber;
const int TMirrorInfo::kUserLevelFieldNumber;
const int TMirrorInfo::kAvatarIdFieldNumber;
const int TMirrorInfo::kVipLevelFieldNumber;
const int TMirrorInfo::kFightForceFieldNumber;
const int TMirrorInfo::kUnitArrFieldNumber;
const int TMirrorInfo::kAvatarFrameIdFieldNumber;
#endif  // !_MSC_VER

TMirrorInfo::TMirrorInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TMirrorInfo)
}

void TMirrorInfo::InitAsDefaultInstance() {
}

TMirrorInfo::TMirrorInfo(const TMirrorInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TMirrorInfo)
}

void TMirrorInfo::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  uname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  guild_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  userlevel_ = 0u;
  avatarid_ = 0u;
  viplevel_ = 0u;
  fightforce_ = GOOGLE_ULONGLONG(0);
  avatarframeid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TMirrorInfo::~TMirrorInfo() {
  // @@protoc_insertion_point(destructor:pb.TMirrorInfo)
  SharedDtor();
}

void TMirrorInfo::SharedDtor() {
  if (uname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete uname_;
  }
  if (guild_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete guild_;
  }
  if (this != default_instance_) {
  }
}

void TMirrorInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TMirrorInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TMirrorInfo_descriptor_;
}

const TMirrorInfo& TMirrorInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fMirror_2eproto();
  return *default_instance_;
}

TMirrorInfo* TMirrorInfo::default_instance_ = NULL;

TMirrorInfo* TMirrorInfo::New() const {
  return new TMirrorInfo;
}

void TMirrorInfo::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<TMirrorInfo*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 191) {
    ZR_(userlevel_, avatarframeid_);
    if (has_uname()) {
      if (uname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        uname_->clear();
      }
    }
    if (has_guild()) {
      if (guild_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        guild_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  unitarr_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TMirrorInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TMirrorInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string Uname = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_uname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->uname().data(), this->uname().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "uname");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_Guild;
        break;
      }

      // optional string Guild = 2;
      case 2: {
        if (tag == 18) {
         parse_Guild:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_guild()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->guild().data(), this->guild().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "guild");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_UserLevel;
        break;
      }

      // optional uint32 UserLevel = 3;
      case 3: {
        if (tag == 24) {
         parse_UserLevel:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &userlevel_)));
          set_has_userlevel();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_AvatarId;
        break;
      }

      // optional uint32 AvatarId = 4;
      case 4: {
        if (tag == 32) {
         parse_AvatarId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &avatarid_)));
          set_has_avatarid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_VipLevel;
        break;
      }

      // optional uint32 VipLevel = 5;
      case 5: {
        if (tag == 40) {
         parse_VipLevel:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &viplevel_)));
          set_has_viplevel();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_FightForce;
        break;
      }

      // optional uint64 FightForce = 6;
      case 6: {
        if (tag == 48) {
         parse_FightForce:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &fightforce_)));
          set_has_fightforce();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_UnitArr;
        break;
      }

      // repeated .pb.TMirrorUnitInfo UnitArr = 7;
      case 7: {
        if (tag == 58) {
         parse_UnitArr:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_unitarr()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_UnitArr;
        if (input->ExpectTag(64)) goto parse_AvatarFrameId;
        break;
      }

      // optional uint32 AvatarFrameId = 8;
      case 8: {
        if (tag == 64) {
         parse_AvatarFrameId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &avatarframeid_)));
          set_has_avatarframeid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TMirrorInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TMirrorInfo)
  return false;
#undef DO_
}

void TMirrorInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TMirrorInfo)
  // optional string Uname = 1;
  if (has_uname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->uname().data(), this->uname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "uname");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->uname(), output);
  }

  // optional string Guild = 2;
  if (has_guild()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->guild().data(), this->guild().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "guild");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->guild(), output);
  }

  // optional uint32 UserLevel = 3;
  if (has_userlevel()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->userlevel(), output);
  }

  // optional uint32 AvatarId = 4;
  if (has_avatarid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->avatarid(), output);
  }

  // optional uint32 VipLevel = 5;
  if (has_viplevel()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->viplevel(), output);
  }

  // optional uint64 FightForce = 6;
  if (has_fightforce()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(6, this->fightforce(), output);
  }

  // repeated .pb.TMirrorUnitInfo UnitArr = 7;
  for (int i = 0; i < this->unitarr_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->unitarr(i), output);
  }

  // optional uint32 AvatarFrameId = 8;
  if (has_avatarframeid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->avatarframeid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TMirrorInfo)
}

::google::protobuf::uint8* TMirrorInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TMirrorInfo)
  // optional string Uname = 1;
  if (has_uname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->uname().data(), this->uname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "uname");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->uname(), target);
  }

  // optional string Guild = 2;
  if (has_guild()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->guild().data(), this->guild().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "guild");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->guild(), target);
  }

  // optional uint32 UserLevel = 3;
  if (has_userlevel()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->userlevel(), target);
  }

  // optional uint32 AvatarId = 4;
  if (has_avatarid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->avatarid(), target);
  }

  // optional uint32 VipLevel = 5;
  if (has_viplevel()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->viplevel(), target);
  }

  // optional uint64 FightForce = 6;
  if (has_fightforce()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(6, this->fightforce(), target);
  }

  // repeated .pb.TMirrorUnitInfo UnitArr = 7;
  for (int i = 0; i < this->unitarr_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->unitarr(i), target);
  }

  // optional uint32 AvatarFrameId = 8;
  if (has_avatarframeid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->avatarframeid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TMirrorInfo)
  return target;
}

int TMirrorInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string Uname = 1;
    if (has_uname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->uname());
    }

    // optional string Guild = 2;
    if (has_guild()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->guild());
    }

    // optional uint32 UserLevel = 3;
    if (has_userlevel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->userlevel());
    }

    // optional uint32 AvatarId = 4;
    if (has_avatarid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->avatarid());
    }

    // optional uint32 VipLevel = 5;
    if (has_viplevel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->viplevel());
    }

    // optional uint64 FightForce = 6;
    if (has_fightforce()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->fightforce());
    }

    // optional uint32 AvatarFrameId = 8;
    if (has_avatarframeid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->avatarframeid());
    }

  }
  // repeated .pb.TMirrorUnitInfo UnitArr = 7;
  total_size += 1 * this->unitarr_size();
  for (int i = 0; i < this->unitarr_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->unitarr(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TMirrorInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TMirrorInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TMirrorInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TMirrorInfo::MergeFrom(const TMirrorInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  unitarr_.MergeFrom(from.unitarr_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_uname()) {
      set_uname(from.uname());
    }
    if (from.has_guild()) {
      set_guild(from.guild());
    }
    if (from.has_userlevel()) {
      set_userlevel(from.userlevel());
    }
    if (from.has_avatarid()) {
      set_avatarid(from.avatarid());
    }
    if (from.has_viplevel()) {
      set_viplevel(from.viplevel());
    }
    if (from.has_fightforce()) {
      set_fightforce(from.fightforce());
    }
    if (from.has_avatarframeid()) {
      set_avatarframeid(from.avatarframeid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TMirrorInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TMirrorInfo::CopyFrom(const TMirrorInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TMirrorInfo::IsInitialized() const {

  if (!::google::protobuf::internal::AllAreInitialized(this->unitarr())) return false;
  return true;
}

void TMirrorInfo::Swap(TMirrorInfo* other) {
  if (other != this) {
    std::swap(uname_, other->uname_);
    std::swap(guild_, other->guild_);
    std::swap(userlevel_, other->userlevel_);
    std::swap(avatarid_, other->avatarid_);
    std::swap(viplevel_, other->viplevel_);
    std::swap(fightforce_, other->fightforce_);
    unitarr_.Swap(&other->unitarr_);
    std::swap(avatarframeid_, other->avatarframeid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TMirrorInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TMirrorInfo_descriptor_;
  metadata.reflection = TMirrorInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TMirrorUnitInfo::kUnitInfoFieldNumber;
const int TMirrorUnitInfo::kHeroInfoFieldNumber;
#endif  // !_MSC_VER

TMirrorUnitInfo::TMirrorUnitInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TMirrorUnitInfo)
}

void TMirrorUnitInfo::InitAsDefaultInstance() {
  unitinfo_ = const_cast< ::pb::TUnitInfo*>(&::pb::TUnitInfo::default_instance());
  heroinfo_ = const_cast< ::pb::THeroInfo*>(&::pb::THeroInfo::default_instance());
}

TMirrorUnitInfo::TMirrorUnitInfo(const TMirrorUnitInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TMirrorUnitInfo)
}

void TMirrorUnitInfo::SharedCtor() {
  _cached_size_ = 0;
  unitinfo_ = NULL;
  heroinfo_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TMirrorUnitInfo::~TMirrorUnitInfo() {
  // @@protoc_insertion_point(destructor:pb.TMirrorUnitInfo)
  SharedDtor();
}

void TMirrorUnitInfo::SharedDtor() {
  if (this != default_instance_) {
    delete unitinfo_;
    delete heroinfo_;
  }
}

void TMirrorUnitInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TMirrorUnitInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TMirrorUnitInfo_descriptor_;
}

const TMirrorUnitInfo& TMirrorUnitInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fMirror_2eproto();
  return *default_instance_;
}

TMirrorUnitInfo* TMirrorUnitInfo::default_instance_ = NULL;

TMirrorUnitInfo* TMirrorUnitInfo::New() const {
  return new TMirrorUnitInfo;
}

void TMirrorUnitInfo::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    if (has_unitinfo()) {
      if (unitinfo_ != NULL) unitinfo_->::pb::TUnitInfo::Clear();
    }
    if (has_heroinfo()) {
      if (heroinfo_ != NULL) heroinfo_->::pb::THeroInfo::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TMirrorUnitInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TMirrorUnitInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .pb.TUnitInfo UnitInfo = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_unitinfo()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_HeroInfo;
        break;
      }

      // optional .pb.THeroInfo HeroInfo = 2;
      case 2: {
        if (tag == 18) {
         parse_HeroInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_heroinfo()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TMirrorUnitInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TMirrorUnitInfo)
  return false;
#undef DO_
}

void TMirrorUnitInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TMirrorUnitInfo)
  // optional .pb.TUnitInfo UnitInfo = 1;
  if (has_unitinfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->unitinfo(), output);
  }

  // optional .pb.THeroInfo HeroInfo = 2;
  if (has_heroinfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->heroinfo(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TMirrorUnitInfo)
}

::google::protobuf::uint8* TMirrorUnitInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TMirrorUnitInfo)
  // optional .pb.TUnitInfo UnitInfo = 1;
  if (has_unitinfo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->unitinfo(), target);
  }

  // optional .pb.THeroInfo HeroInfo = 2;
  if (has_heroinfo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->heroinfo(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TMirrorUnitInfo)
  return target;
}

int TMirrorUnitInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .pb.TUnitInfo UnitInfo = 1;
    if (has_unitinfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->unitinfo());
    }

    // optional .pb.THeroInfo HeroInfo = 2;
    if (has_heroinfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->heroinfo());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TMirrorUnitInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TMirrorUnitInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TMirrorUnitInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TMirrorUnitInfo::MergeFrom(const TMirrorUnitInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_unitinfo()) {
      mutable_unitinfo()->::pb::TUnitInfo::MergeFrom(from.unitinfo());
    }
    if (from.has_heroinfo()) {
      mutable_heroinfo()->::pb::THeroInfo::MergeFrom(from.heroinfo());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TMirrorUnitInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TMirrorUnitInfo::CopyFrom(const TMirrorUnitInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TMirrorUnitInfo::IsInitialized() const {

  if (has_unitinfo()) {
    if (!this->unitinfo().IsInitialized()) return false;
  }
  return true;
}

void TMirrorUnitInfo::Swap(TMirrorUnitInfo* other) {
  if (other != this) {
    std::swap(unitinfo_, other->unitinfo_);
    std::swap(heroinfo_, other->heroinfo_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TMirrorUnitInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TMirrorUnitInfo_descriptor_;
  metadata.reflection = TMirrorUnitInfo_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace pb

// @@protoc_insertion_point(global_scope)
