// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: net/FightForceRanking.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "net/FightForceRanking.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace pb {

namespace {

const ::google::protobuf::Descriptor* TFightForceRankingRankItem_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TFightForceRankingRankItem_reflection_ = NULL;
const ::google::protobuf::Descriptor* TFightForceRankingTakeRewardRecordRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TFightForceRankingTakeRewardRecordRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* TFightForceRankingTakeRewardReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TFightForceRankingTakeRewardReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* TFightForceRankingRankRewardInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TFightForceRankingRankRewardInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* TFightForceRankingGetRankRewardRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TFightForceRankingGetRankRewardRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* TFightForceRankingEntranceCloseReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TFightForceRankingEntranceCloseReq_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_net_2fFightForceRanking_2eproto() {
  protobuf_AddDesc_net_2fFightForceRanking_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "net/FightForceRanking.proto");
  GOOGLE_CHECK(file != NULL);
  TFightForceRankingRankItem_descriptor_ = file->message_type(0);
  static const int TFightForceRankingRankItem_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TFightForceRankingRankItem, userinfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TFightForceRankingRankItem, fightforce_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TFightForceRankingRankItem, changetime_),
  };
  TFightForceRankingRankItem_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TFightForceRankingRankItem_descriptor_,
      TFightForceRankingRankItem::default_instance_,
      TFightForceRankingRankItem_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TFightForceRankingRankItem, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TFightForceRankingRankItem, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TFightForceRankingRankItem));
  TFightForceRankingTakeRewardRecordRsp_descriptor_ = file->message_type(1);
  static const int TFightForceRankingTakeRewardRecordRsp_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TFightForceRankingTakeRewardRecordRsp, takearr_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TFightForceRankingTakeRewardRecordRsp, fightforce_),
  };
  TFightForceRankingTakeRewardRecordRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TFightForceRankingTakeRewardRecordRsp_descriptor_,
      TFightForceRankingTakeRewardRecordRsp::default_instance_,
      TFightForceRankingTakeRewardRecordRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TFightForceRankingTakeRewardRecordRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TFightForceRankingTakeRewardRecordRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TFightForceRankingTakeRewardRecordRsp));
  TFightForceRankingTakeRewardReq_descriptor_ = file->message_type(2);
  static const int TFightForceRankingTakeRewardReq_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TFightForceRankingTakeRewardReq, rewardid_),
  };
  TFightForceRankingTakeRewardReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TFightForceRankingTakeRewardReq_descriptor_,
      TFightForceRankingTakeRewardReq::default_instance_,
      TFightForceRankingTakeRewardReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TFightForceRankingTakeRewardReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TFightForceRankingTakeRewardReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TFightForceRankingTakeRewardReq));
  TFightForceRankingRankRewardInfo_descriptor_ = file->message_type(3);
  static const int TFightForceRankingRankRewardInfo_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TFightForceRankingRankRewardInfo, rankinfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TFightForceRankingRankRewardInfo, rank_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TFightForceRankingRankRewardInfo, count_),
  };
  TFightForceRankingRankRewardInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TFightForceRankingRankRewardInfo_descriptor_,
      TFightForceRankingRankRewardInfo::default_instance_,
      TFightForceRankingRankRewardInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TFightForceRankingRankRewardInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TFightForceRankingRankRewardInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TFightForceRankingRankRewardInfo));
  TFightForceRankingGetRankRewardRsp_descriptor_ = file->message_type(4);
  static const int TFightForceRankingGetRankRewardRsp_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TFightForceRankingGetRankRewardRsp, rank_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TFightForceRankingGetRankRewardRsp, rankrewardarr_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TFightForceRankingGetRankRewardRsp, fightforce_),
  };
  TFightForceRankingGetRankRewardRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TFightForceRankingGetRankRewardRsp_descriptor_,
      TFightForceRankingGetRankRewardRsp::default_instance_,
      TFightForceRankingGetRankRewardRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TFightForceRankingGetRankRewardRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TFightForceRankingGetRankRewardRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TFightForceRankingGetRankRewardRsp));
  TFightForceRankingEntranceCloseReq_descriptor_ = file->message_type(5);
  static const int TFightForceRankingEntranceCloseReq_offsets_[1] = {
  };
  TFightForceRankingEntranceCloseReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TFightForceRankingEntranceCloseReq_descriptor_,
      TFightForceRankingEntranceCloseReq::default_instance_,
      TFightForceRankingEntranceCloseReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TFightForceRankingEntranceCloseReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TFightForceRankingEntranceCloseReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TFightForceRankingEntranceCloseReq));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_net_2fFightForceRanking_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TFightForceRankingRankItem_descriptor_, &TFightForceRankingRankItem::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TFightForceRankingTakeRewardRecordRsp_descriptor_, &TFightForceRankingTakeRewardRecordRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TFightForceRankingTakeRewardReq_descriptor_, &TFightForceRankingTakeRewardReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TFightForceRankingRankRewardInfo_descriptor_, &TFightForceRankingRankRewardInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TFightForceRankingGetRankRewardRsp_descriptor_, &TFightForceRankingGetRankRewardRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TFightForceRankingEntranceCloseReq_descriptor_, &TFightForceRankingEntranceCloseReq::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_net_2fFightForceRanking_2eproto() {
  delete TFightForceRankingRankItem::default_instance_;
  delete TFightForceRankingRankItem_reflection_;
  delete TFightForceRankingTakeRewardRecordRsp::default_instance_;
  delete TFightForceRankingTakeRewardRecordRsp_reflection_;
  delete TFightForceRankingTakeRewardReq::default_instance_;
  delete TFightForceRankingTakeRewardReq_reflection_;
  delete TFightForceRankingRankRewardInfo::default_instance_;
  delete TFightForceRankingRankRewardInfo_reflection_;
  delete TFightForceRankingGetRankRewardRsp::default_instance_;
  delete TFightForceRankingGetRankRewardRsp_reflection_;
  delete TFightForceRankingEntranceCloseReq::default_instance_;
  delete TFightForceRankingEntranceCloseReq_reflection_;
}

void protobuf_AddDesc_net_2fFightForceRanking_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::pb::protobuf_AddDesc_net_2fUser_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\033net/FightForceRanking.proto\022\002pb\032\016net/U"
    "ser.proto\"k\n\032TFightForceRankingRankItem\022"
    "%\n\010UserInfo\030\001 \001(\0132\023.pb.TUserSimpleInfo\022\022"
    "\n\nFightForce\030\002 \001(\004\022\022\n\nChangeTime\030\003 \001(\004\"L"
    "\n%TFightForceRankingTakeRewardRecordRsp\022"
    "\017\n\007TakeArr\030\001 \003(\005\022\022\n\nFightForce\030\002 \001(\004\"3\n\037"
    "TFightForceRankingTakeRewardReq\022\020\n\010Rewar"
    "dId\030\001 \001(\005\"q\n TFightForceRankingRankRewar"
    "dInfo\0220\n\010RankInfo\030\001 \001(\0132\036.pb.TFightForce"
    "RankingRankItem\022\014\n\004Rank\030\002 \001(\005\022\r\n\005Count\030\003"
    " \001(\005\"\203\001\n\"TFightForceRankingGetRankReward"
    "Rsp\022\014\n\004Rank\030\001 \001(\005\022;\n\rRankRewardArr\030\002 \003(\013"
    "2$.pb.TFightForceRankingRankRewardInfo\022\022"
    "\n\nFightForce\030\003 \001(\004\"$\n\"TFightForceRanking"
    "EntranceCloseReq", 576);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "net/FightForceRanking.proto", &protobuf_RegisterTypes);
  TFightForceRankingRankItem::default_instance_ = new TFightForceRankingRankItem();
  TFightForceRankingTakeRewardRecordRsp::default_instance_ = new TFightForceRankingTakeRewardRecordRsp();
  TFightForceRankingTakeRewardReq::default_instance_ = new TFightForceRankingTakeRewardReq();
  TFightForceRankingRankRewardInfo::default_instance_ = new TFightForceRankingRankRewardInfo();
  TFightForceRankingGetRankRewardRsp::default_instance_ = new TFightForceRankingGetRankRewardRsp();
  TFightForceRankingEntranceCloseReq::default_instance_ = new TFightForceRankingEntranceCloseReq();
  TFightForceRankingRankItem::default_instance_->InitAsDefaultInstance();
  TFightForceRankingTakeRewardRecordRsp::default_instance_->InitAsDefaultInstance();
  TFightForceRankingTakeRewardReq::default_instance_->InitAsDefaultInstance();
  TFightForceRankingRankRewardInfo::default_instance_->InitAsDefaultInstance();
  TFightForceRankingGetRankRewardRsp::default_instance_->InitAsDefaultInstance();
  TFightForceRankingEntranceCloseReq::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_net_2fFightForceRanking_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_net_2fFightForceRanking_2eproto {
  StaticDescriptorInitializer_net_2fFightForceRanking_2eproto() {
    protobuf_AddDesc_net_2fFightForceRanking_2eproto();
  }
} static_descriptor_initializer_net_2fFightForceRanking_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int TFightForceRankingRankItem::kUserInfoFieldNumber;
const int TFightForceRankingRankItem::kFightForceFieldNumber;
const int TFightForceRankingRankItem::kChangeTimeFieldNumber;
#endif  // !_MSC_VER

TFightForceRankingRankItem::TFightForceRankingRankItem()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TFightForceRankingRankItem)
}

void TFightForceRankingRankItem::InitAsDefaultInstance() {
  userinfo_ = const_cast< ::pb::TUserSimpleInfo*>(&::pb::TUserSimpleInfo::default_instance());
}

TFightForceRankingRankItem::TFightForceRankingRankItem(const TFightForceRankingRankItem& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TFightForceRankingRankItem)
}

void TFightForceRankingRankItem::SharedCtor() {
  _cached_size_ = 0;
  userinfo_ = NULL;
  fightforce_ = GOOGLE_ULONGLONG(0);
  changetime_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TFightForceRankingRankItem::~TFightForceRankingRankItem() {
  // @@protoc_insertion_point(destructor:pb.TFightForceRankingRankItem)
  SharedDtor();
}

void TFightForceRankingRankItem::SharedDtor() {
  if (this != default_instance_) {
    delete userinfo_;
  }
}

void TFightForceRankingRankItem::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TFightForceRankingRankItem::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TFightForceRankingRankItem_descriptor_;
}

const TFightForceRankingRankItem& TFightForceRankingRankItem::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fFightForceRanking_2eproto();
  return *default_instance_;
}

TFightForceRankingRankItem* TFightForceRankingRankItem::default_instance_ = NULL;

TFightForceRankingRankItem* TFightForceRankingRankItem::New() const {
  return new TFightForceRankingRankItem;
}

void TFightForceRankingRankItem::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<TFightForceRankingRankItem*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 7) {
    ZR_(fightforce_, changetime_);
    if (has_userinfo()) {
      if (userinfo_ != NULL) userinfo_->::pb::TUserSimpleInfo::Clear();
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TFightForceRankingRankItem::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TFightForceRankingRankItem)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .pb.TUserSimpleInfo UserInfo = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_userinfo()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_FightForce;
        break;
      }

      // optional uint64 FightForce = 2;
      case 2: {
        if (tag == 16) {
         parse_FightForce:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &fightforce_)));
          set_has_fightforce();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_ChangeTime;
        break;
      }

      // optional uint64 ChangeTime = 3;
      case 3: {
        if (tag == 24) {
         parse_ChangeTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &changetime_)));
          set_has_changetime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TFightForceRankingRankItem)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TFightForceRankingRankItem)
  return false;
#undef DO_
}

void TFightForceRankingRankItem::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TFightForceRankingRankItem)
  // optional .pb.TUserSimpleInfo UserInfo = 1;
  if (has_userinfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->userinfo(), output);
  }

  // optional uint64 FightForce = 2;
  if (has_fightforce()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->fightforce(), output);
  }

  // optional uint64 ChangeTime = 3;
  if (has_changetime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->changetime(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TFightForceRankingRankItem)
}

::google::protobuf::uint8* TFightForceRankingRankItem::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TFightForceRankingRankItem)
  // optional .pb.TUserSimpleInfo UserInfo = 1;
  if (has_userinfo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->userinfo(), target);
  }

  // optional uint64 FightForce = 2;
  if (has_fightforce()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->fightforce(), target);
  }

  // optional uint64 ChangeTime = 3;
  if (has_changetime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->changetime(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TFightForceRankingRankItem)
  return target;
}

int TFightForceRankingRankItem::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .pb.TUserSimpleInfo UserInfo = 1;
    if (has_userinfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->userinfo());
    }

    // optional uint64 FightForce = 2;
    if (has_fightforce()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->fightforce());
    }

    // optional uint64 ChangeTime = 3;
    if (has_changetime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->changetime());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TFightForceRankingRankItem::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TFightForceRankingRankItem* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TFightForceRankingRankItem*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TFightForceRankingRankItem::MergeFrom(const TFightForceRankingRankItem& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_userinfo()) {
      mutable_userinfo()->::pb::TUserSimpleInfo::MergeFrom(from.userinfo());
    }
    if (from.has_fightforce()) {
      set_fightforce(from.fightforce());
    }
    if (from.has_changetime()) {
      set_changetime(from.changetime());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TFightForceRankingRankItem::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TFightForceRankingRankItem::CopyFrom(const TFightForceRankingRankItem& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TFightForceRankingRankItem::IsInitialized() const {

  return true;
}

void TFightForceRankingRankItem::Swap(TFightForceRankingRankItem* other) {
  if (other != this) {
    std::swap(userinfo_, other->userinfo_);
    std::swap(fightforce_, other->fightforce_);
    std::swap(changetime_, other->changetime_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TFightForceRankingRankItem::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TFightForceRankingRankItem_descriptor_;
  metadata.reflection = TFightForceRankingRankItem_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TFightForceRankingTakeRewardRecordRsp::kTakeArrFieldNumber;
const int TFightForceRankingTakeRewardRecordRsp::kFightForceFieldNumber;
#endif  // !_MSC_VER

TFightForceRankingTakeRewardRecordRsp::TFightForceRankingTakeRewardRecordRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TFightForceRankingTakeRewardRecordRsp)
}

void TFightForceRankingTakeRewardRecordRsp::InitAsDefaultInstance() {
}

TFightForceRankingTakeRewardRecordRsp::TFightForceRankingTakeRewardRecordRsp(const TFightForceRankingTakeRewardRecordRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TFightForceRankingTakeRewardRecordRsp)
}

void TFightForceRankingTakeRewardRecordRsp::SharedCtor() {
  _cached_size_ = 0;
  fightforce_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TFightForceRankingTakeRewardRecordRsp::~TFightForceRankingTakeRewardRecordRsp() {
  // @@protoc_insertion_point(destructor:pb.TFightForceRankingTakeRewardRecordRsp)
  SharedDtor();
}

void TFightForceRankingTakeRewardRecordRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TFightForceRankingTakeRewardRecordRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TFightForceRankingTakeRewardRecordRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TFightForceRankingTakeRewardRecordRsp_descriptor_;
}

const TFightForceRankingTakeRewardRecordRsp& TFightForceRankingTakeRewardRecordRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fFightForceRanking_2eproto();
  return *default_instance_;
}

TFightForceRankingTakeRewardRecordRsp* TFightForceRankingTakeRewardRecordRsp::default_instance_ = NULL;

TFightForceRankingTakeRewardRecordRsp* TFightForceRankingTakeRewardRecordRsp::New() const {
  return new TFightForceRankingTakeRewardRecordRsp;
}

void TFightForceRankingTakeRewardRecordRsp::Clear() {
  fightforce_ = GOOGLE_ULONGLONG(0);
  takearr_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TFightForceRankingTakeRewardRecordRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TFightForceRankingTakeRewardRecordRsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated int32 TakeArr = 1;
      case 1: {
        if (tag == 8) {
         parse_TakeArr:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 8, input, this->mutable_takearr())));
        } else if (tag == 10) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_takearr())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(8)) goto parse_TakeArr;
        if (input->ExpectTag(16)) goto parse_FightForce;
        break;
      }

      // optional uint64 FightForce = 2;
      case 2: {
        if (tag == 16) {
         parse_FightForce:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &fightforce_)));
          set_has_fightforce();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TFightForceRankingTakeRewardRecordRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TFightForceRankingTakeRewardRecordRsp)
  return false;
#undef DO_
}

void TFightForceRankingTakeRewardRecordRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TFightForceRankingTakeRewardRecordRsp)
  // repeated int32 TakeArr = 1;
  for (int i = 0; i < this->takearr_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      1, this->takearr(i), output);
  }

  // optional uint64 FightForce = 2;
  if (has_fightforce()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->fightforce(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TFightForceRankingTakeRewardRecordRsp)
}

::google::protobuf::uint8* TFightForceRankingTakeRewardRecordRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TFightForceRankingTakeRewardRecordRsp)
  // repeated int32 TakeArr = 1;
  for (int i = 0; i < this->takearr_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(1, this->takearr(i), target);
  }

  // optional uint64 FightForce = 2;
  if (has_fightforce()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->fightforce(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TFightForceRankingTakeRewardRecordRsp)
  return target;
}

int TFightForceRankingTakeRewardRecordRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // optional uint64 FightForce = 2;
    if (has_fightforce()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->fightforce());
    }

  }
  // repeated int32 TakeArr = 1;
  {
    int data_size = 0;
    for (int i = 0; i < this->takearr_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->takearr(i));
    }
    total_size += 1 * this->takearr_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TFightForceRankingTakeRewardRecordRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TFightForceRankingTakeRewardRecordRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TFightForceRankingTakeRewardRecordRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TFightForceRankingTakeRewardRecordRsp::MergeFrom(const TFightForceRankingTakeRewardRecordRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  takearr_.MergeFrom(from.takearr_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_fightforce()) {
      set_fightforce(from.fightforce());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TFightForceRankingTakeRewardRecordRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TFightForceRankingTakeRewardRecordRsp::CopyFrom(const TFightForceRankingTakeRewardRecordRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TFightForceRankingTakeRewardRecordRsp::IsInitialized() const {

  return true;
}

void TFightForceRankingTakeRewardRecordRsp::Swap(TFightForceRankingTakeRewardRecordRsp* other) {
  if (other != this) {
    takearr_.Swap(&other->takearr_);
    std::swap(fightforce_, other->fightforce_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TFightForceRankingTakeRewardRecordRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TFightForceRankingTakeRewardRecordRsp_descriptor_;
  metadata.reflection = TFightForceRankingTakeRewardRecordRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TFightForceRankingTakeRewardReq::kRewardIdFieldNumber;
#endif  // !_MSC_VER

TFightForceRankingTakeRewardReq::TFightForceRankingTakeRewardReq()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TFightForceRankingTakeRewardReq)
}

void TFightForceRankingTakeRewardReq::InitAsDefaultInstance() {
}

TFightForceRankingTakeRewardReq::TFightForceRankingTakeRewardReq(const TFightForceRankingTakeRewardReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TFightForceRankingTakeRewardReq)
}

void TFightForceRankingTakeRewardReq::SharedCtor() {
  _cached_size_ = 0;
  rewardid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TFightForceRankingTakeRewardReq::~TFightForceRankingTakeRewardReq() {
  // @@protoc_insertion_point(destructor:pb.TFightForceRankingTakeRewardReq)
  SharedDtor();
}

void TFightForceRankingTakeRewardReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TFightForceRankingTakeRewardReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TFightForceRankingTakeRewardReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TFightForceRankingTakeRewardReq_descriptor_;
}

const TFightForceRankingTakeRewardReq& TFightForceRankingTakeRewardReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fFightForceRanking_2eproto();
  return *default_instance_;
}

TFightForceRankingTakeRewardReq* TFightForceRankingTakeRewardReq::default_instance_ = NULL;

TFightForceRankingTakeRewardReq* TFightForceRankingTakeRewardReq::New() const {
  return new TFightForceRankingTakeRewardReq;
}

void TFightForceRankingTakeRewardReq::Clear() {
  rewardid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TFightForceRankingTakeRewardReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TFightForceRankingTakeRewardReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 RewardId = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &rewardid_)));
          set_has_rewardid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TFightForceRankingTakeRewardReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TFightForceRankingTakeRewardReq)
  return false;
#undef DO_
}

void TFightForceRankingTakeRewardReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TFightForceRankingTakeRewardReq)
  // optional int32 RewardId = 1;
  if (has_rewardid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->rewardid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TFightForceRankingTakeRewardReq)
}

::google::protobuf::uint8* TFightForceRankingTakeRewardReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TFightForceRankingTakeRewardReq)
  // optional int32 RewardId = 1;
  if (has_rewardid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->rewardid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TFightForceRankingTakeRewardReq)
  return target;
}

int TFightForceRankingTakeRewardReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 RewardId = 1;
    if (has_rewardid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->rewardid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TFightForceRankingTakeRewardReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TFightForceRankingTakeRewardReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TFightForceRankingTakeRewardReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TFightForceRankingTakeRewardReq::MergeFrom(const TFightForceRankingTakeRewardReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_rewardid()) {
      set_rewardid(from.rewardid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TFightForceRankingTakeRewardReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TFightForceRankingTakeRewardReq::CopyFrom(const TFightForceRankingTakeRewardReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TFightForceRankingTakeRewardReq::IsInitialized() const {

  return true;
}

void TFightForceRankingTakeRewardReq::Swap(TFightForceRankingTakeRewardReq* other) {
  if (other != this) {
    std::swap(rewardid_, other->rewardid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TFightForceRankingTakeRewardReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TFightForceRankingTakeRewardReq_descriptor_;
  metadata.reflection = TFightForceRankingTakeRewardReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TFightForceRankingRankRewardInfo::kRankInfoFieldNumber;
const int TFightForceRankingRankRewardInfo::kRankFieldNumber;
const int TFightForceRankingRankRewardInfo::kCountFieldNumber;
#endif  // !_MSC_VER

TFightForceRankingRankRewardInfo::TFightForceRankingRankRewardInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TFightForceRankingRankRewardInfo)
}

void TFightForceRankingRankRewardInfo::InitAsDefaultInstance() {
  rankinfo_ = const_cast< ::pb::TFightForceRankingRankItem*>(&::pb::TFightForceRankingRankItem::default_instance());
}

TFightForceRankingRankRewardInfo::TFightForceRankingRankRewardInfo(const TFightForceRankingRankRewardInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TFightForceRankingRankRewardInfo)
}

void TFightForceRankingRankRewardInfo::SharedCtor() {
  _cached_size_ = 0;
  rankinfo_ = NULL;
  rank_ = 0;
  count_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TFightForceRankingRankRewardInfo::~TFightForceRankingRankRewardInfo() {
  // @@protoc_insertion_point(destructor:pb.TFightForceRankingRankRewardInfo)
  SharedDtor();
}

void TFightForceRankingRankRewardInfo::SharedDtor() {
  if (this != default_instance_) {
    delete rankinfo_;
  }
}

void TFightForceRankingRankRewardInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TFightForceRankingRankRewardInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TFightForceRankingRankRewardInfo_descriptor_;
}

const TFightForceRankingRankRewardInfo& TFightForceRankingRankRewardInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fFightForceRanking_2eproto();
  return *default_instance_;
}

TFightForceRankingRankRewardInfo* TFightForceRankingRankRewardInfo::default_instance_ = NULL;

TFightForceRankingRankRewardInfo* TFightForceRankingRankRewardInfo::New() const {
  return new TFightForceRankingRankRewardInfo;
}

void TFightForceRankingRankRewardInfo::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<TFightForceRankingRankRewardInfo*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 7) {
    ZR_(rank_, count_);
    if (has_rankinfo()) {
      if (rankinfo_ != NULL) rankinfo_->::pb::TFightForceRankingRankItem::Clear();
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TFightForceRankingRankRewardInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TFightForceRankingRankRewardInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .pb.TFightForceRankingRankItem RankInfo = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_rankinfo()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_Rank;
        break;
      }

      // optional int32 Rank = 2;
      case 2: {
        if (tag == 16) {
         parse_Rank:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &rank_)));
          set_has_rank();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_Count;
        break;
      }

      // optional int32 Count = 3;
      case 3: {
        if (tag == 24) {
         parse_Count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &count_)));
          set_has_count();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TFightForceRankingRankRewardInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TFightForceRankingRankRewardInfo)
  return false;
#undef DO_
}

void TFightForceRankingRankRewardInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TFightForceRankingRankRewardInfo)
  // optional .pb.TFightForceRankingRankItem RankInfo = 1;
  if (has_rankinfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->rankinfo(), output);
  }

  // optional int32 Rank = 2;
  if (has_rank()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->rank(), output);
  }

  // optional int32 Count = 3;
  if (has_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->count(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TFightForceRankingRankRewardInfo)
}

::google::protobuf::uint8* TFightForceRankingRankRewardInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TFightForceRankingRankRewardInfo)
  // optional .pb.TFightForceRankingRankItem RankInfo = 1;
  if (has_rankinfo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->rankinfo(), target);
  }

  // optional int32 Rank = 2;
  if (has_rank()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->rank(), target);
  }

  // optional int32 Count = 3;
  if (has_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->count(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TFightForceRankingRankRewardInfo)
  return target;
}

int TFightForceRankingRankRewardInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .pb.TFightForceRankingRankItem RankInfo = 1;
    if (has_rankinfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->rankinfo());
    }

    // optional int32 Rank = 2;
    if (has_rank()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->rank());
    }

    // optional int32 Count = 3;
    if (has_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->count());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TFightForceRankingRankRewardInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TFightForceRankingRankRewardInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TFightForceRankingRankRewardInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TFightForceRankingRankRewardInfo::MergeFrom(const TFightForceRankingRankRewardInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_rankinfo()) {
      mutable_rankinfo()->::pb::TFightForceRankingRankItem::MergeFrom(from.rankinfo());
    }
    if (from.has_rank()) {
      set_rank(from.rank());
    }
    if (from.has_count()) {
      set_count(from.count());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TFightForceRankingRankRewardInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TFightForceRankingRankRewardInfo::CopyFrom(const TFightForceRankingRankRewardInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TFightForceRankingRankRewardInfo::IsInitialized() const {

  return true;
}

void TFightForceRankingRankRewardInfo::Swap(TFightForceRankingRankRewardInfo* other) {
  if (other != this) {
    std::swap(rankinfo_, other->rankinfo_);
    std::swap(rank_, other->rank_);
    std::swap(count_, other->count_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TFightForceRankingRankRewardInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TFightForceRankingRankRewardInfo_descriptor_;
  metadata.reflection = TFightForceRankingRankRewardInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TFightForceRankingGetRankRewardRsp::kRankFieldNumber;
const int TFightForceRankingGetRankRewardRsp::kRankRewardArrFieldNumber;
const int TFightForceRankingGetRankRewardRsp::kFightForceFieldNumber;
#endif  // !_MSC_VER

TFightForceRankingGetRankRewardRsp::TFightForceRankingGetRankRewardRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TFightForceRankingGetRankRewardRsp)
}

void TFightForceRankingGetRankRewardRsp::InitAsDefaultInstance() {
}

TFightForceRankingGetRankRewardRsp::TFightForceRankingGetRankRewardRsp(const TFightForceRankingGetRankRewardRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TFightForceRankingGetRankRewardRsp)
}

void TFightForceRankingGetRankRewardRsp::SharedCtor() {
  _cached_size_ = 0;
  rank_ = 0;
  fightforce_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TFightForceRankingGetRankRewardRsp::~TFightForceRankingGetRankRewardRsp() {
  // @@protoc_insertion_point(destructor:pb.TFightForceRankingGetRankRewardRsp)
  SharedDtor();
}

void TFightForceRankingGetRankRewardRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TFightForceRankingGetRankRewardRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TFightForceRankingGetRankRewardRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TFightForceRankingGetRankRewardRsp_descriptor_;
}

const TFightForceRankingGetRankRewardRsp& TFightForceRankingGetRankRewardRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fFightForceRanking_2eproto();
  return *default_instance_;
}

TFightForceRankingGetRankRewardRsp* TFightForceRankingGetRankRewardRsp::default_instance_ = NULL;

TFightForceRankingGetRankRewardRsp* TFightForceRankingGetRankRewardRsp::New() const {
  return new TFightForceRankingGetRankRewardRsp;
}

void TFightForceRankingGetRankRewardRsp::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<TFightForceRankingGetRankRewardRsp*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(fightforce_, rank_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  rankrewardarr_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TFightForceRankingGetRankRewardRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TFightForceRankingGetRankRewardRsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 Rank = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &rank_)));
          set_has_rank();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_RankRewardArr;
        break;
      }

      // repeated .pb.TFightForceRankingRankRewardInfo RankRewardArr = 2;
      case 2: {
        if (tag == 18) {
         parse_RankRewardArr:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_rankrewardarr()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_RankRewardArr;
        if (input->ExpectTag(24)) goto parse_FightForce;
        break;
      }

      // optional uint64 FightForce = 3;
      case 3: {
        if (tag == 24) {
         parse_FightForce:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &fightforce_)));
          set_has_fightforce();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TFightForceRankingGetRankRewardRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TFightForceRankingGetRankRewardRsp)
  return false;
#undef DO_
}

void TFightForceRankingGetRankRewardRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TFightForceRankingGetRankRewardRsp)
  // optional int32 Rank = 1;
  if (has_rank()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->rank(), output);
  }

  // repeated .pb.TFightForceRankingRankRewardInfo RankRewardArr = 2;
  for (int i = 0; i < this->rankrewardarr_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->rankrewardarr(i), output);
  }

  // optional uint64 FightForce = 3;
  if (has_fightforce()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->fightforce(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TFightForceRankingGetRankRewardRsp)
}

::google::protobuf::uint8* TFightForceRankingGetRankRewardRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TFightForceRankingGetRankRewardRsp)
  // optional int32 Rank = 1;
  if (has_rank()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->rank(), target);
  }

  // repeated .pb.TFightForceRankingRankRewardInfo RankRewardArr = 2;
  for (int i = 0; i < this->rankrewardarr_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->rankrewardarr(i), target);
  }

  // optional uint64 FightForce = 3;
  if (has_fightforce()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->fightforce(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TFightForceRankingGetRankRewardRsp)
  return target;
}

int TFightForceRankingGetRankRewardRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 Rank = 1;
    if (has_rank()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->rank());
    }

    // optional uint64 FightForce = 3;
    if (has_fightforce()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->fightforce());
    }

  }
  // repeated .pb.TFightForceRankingRankRewardInfo RankRewardArr = 2;
  total_size += 1 * this->rankrewardarr_size();
  for (int i = 0; i < this->rankrewardarr_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->rankrewardarr(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TFightForceRankingGetRankRewardRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TFightForceRankingGetRankRewardRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TFightForceRankingGetRankRewardRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TFightForceRankingGetRankRewardRsp::MergeFrom(const TFightForceRankingGetRankRewardRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  rankrewardarr_.MergeFrom(from.rankrewardarr_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_rank()) {
      set_rank(from.rank());
    }
    if (from.has_fightforce()) {
      set_fightforce(from.fightforce());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TFightForceRankingGetRankRewardRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TFightForceRankingGetRankRewardRsp::CopyFrom(const TFightForceRankingGetRankRewardRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TFightForceRankingGetRankRewardRsp::IsInitialized() const {

  return true;
}

void TFightForceRankingGetRankRewardRsp::Swap(TFightForceRankingGetRankRewardRsp* other) {
  if (other != this) {
    std::swap(rank_, other->rank_);
    rankrewardarr_.Swap(&other->rankrewardarr_);
    std::swap(fightforce_, other->fightforce_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TFightForceRankingGetRankRewardRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TFightForceRankingGetRankRewardRsp_descriptor_;
  metadata.reflection = TFightForceRankingGetRankRewardRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

TFightForceRankingEntranceCloseReq::TFightForceRankingEntranceCloseReq()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TFightForceRankingEntranceCloseReq)
}

void TFightForceRankingEntranceCloseReq::InitAsDefaultInstance() {
}

TFightForceRankingEntranceCloseReq::TFightForceRankingEntranceCloseReq(const TFightForceRankingEntranceCloseReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TFightForceRankingEntranceCloseReq)
}

void TFightForceRankingEntranceCloseReq::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TFightForceRankingEntranceCloseReq::~TFightForceRankingEntranceCloseReq() {
  // @@protoc_insertion_point(destructor:pb.TFightForceRankingEntranceCloseReq)
  SharedDtor();
}

void TFightForceRankingEntranceCloseReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TFightForceRankingEntranceCloseReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TFightForceRankingEntranceCloseReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TFightForceRankingEntranceCloseReq_descriptor_;
}

const TFightForceRankingEntranceCloseReq& TFightForceRankingEntranceCloseReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fFightForceRanking_2eproto();
  return *default_instance_;
}

TFightForceRankingEntranceCloseReq* TFightForceRankingEntranceCloseReq::default_instance_ = NULL;

TFightForceRankingEntranceCloseReq* TFightForceRankingEntranceCloseReq::New() const {
  return new TFightForceRankingEntranceCloseReq;
}

void TFightForceRankingEntranceCloseReq::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TFightForceRankingEntranceCloseReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TFightForceRankingEntranceCloseReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TFightForceRankingEntranceCloseReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TFightForceRankingEntranceCloseReq)
  return false;
#undef DO_
}

void TFightForceRankingEntranceCloseReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TFightForceRankingEntranceCloseReq)
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TFightForceRankingEntranceCloseReq)
}

::google::protobuf::uint8* TFightForceRankingEntranceCloseReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TFightForceRankingEntranceCloseReq)
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TFightForceRankingEntranceCloseReq)
  return target;
}

int TFightForceRankingEntranceCloseReq::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TFightForceRankingEntranceCloseReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TFightForceRankingEntranceCloseReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TFightForceRankingEntranceCloseReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TFightForceRankingEntranceCloseReq::MergeFrom(const TFightForceRankingEntranceCloseReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TFightForceRankingEntranceCloseReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TFightForceRankingEntranceCloseReq::CopyFrom(const TFightForceRankingEntranceCloseReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TFightForceRankingEntranceCloseReq::IsInitialized() const {

  return true;
}

void TFightForceRankingEntranceCloseReq::Swap(TFightForceRankingEntranceCloseReq* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TFightForceRankingEntranceCloseReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TFightForceRankingEntranceCloseReq_descriptor_;
  metadata.reflection = TFightForceRankingEntranceCloseReq_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace pb

// @@protoc_insertion_point(global_scope)
