// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: net/CrossCollaborate.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "net/CrossCollaborate.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace pb {

namespace {

const ::google::protobuf::Descriptor* TCrossCollaborateStageInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TCrossCollaborateStageInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* TCrossCollaboratePosInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TCrossCollaboratePosInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* TCrossCollaborateFormationInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TCrossCollaborateFormationInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* TCrossCollaborateEnemyFormation_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TCrossCollaborateEnemyFormation_reflection_ = NULL;
const ::google::protobuf::Descriptor* TCrossCollaborateInviteUserInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TCrossCollaborateInviteUserInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* TCrossCollaborateUserInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TCrossCollaborateUserInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* TCrossCollaborateTeamInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TCrossCollaborateTeamInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* TCrossCollaborateUnitViewInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TCrossCollaborateUnitViewInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* TCrossCollaborateArmyViewInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TCrossCollaborateArmyViewInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* TCrossCollaborateRecordInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TCrossCollaborateRecordInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* TCrossCollaborateBattleRecord_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TCrossCollaborateBattleRecord_reflection_ = NULL;
const ::google::protobuf::Descriptor* TCrossCollaborateSimpleRecordInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TCrossCollaborateSimpleRecordInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* TCrossCollaborateSimpleBattleRecord_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TCrossCollaborateSimpleBattleRecord_reflection_ = NULL;
const ::google::protobuf::Descriptor* TCrossCollaborateGetStageInfoRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TCrossCollaborateGetStageInfoRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* TAdventureGetTeamListReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TAdventureGetTeamListReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* TCrossCollaborateGetTeamListRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TCrossCollaborateGetTeamListRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* TCrossCollaborateCreateTeamRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TCrossCollaborateCreateTeamRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* TCrossCollaborateSetTeamReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TCrossCollaborateSetTeamReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* TCrossCollaborateJoinTeamReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TCrossCollaborateJoinTeamReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* TCrossCollaborateJoinTeamRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TCrossCollaborateJoinTeamRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* TCrossCollaborateQuitTeamReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TCrossCollaborateQuitTeamReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* TCrossCollaborateGetInviteListReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TCrossCollaborateGetInviteListReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* TCrossCollaborateGetInviteListRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TCrossCollaborateGetInviteListRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* TCrossCollaborateInviteMemberReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TCrossCollaborateInviteMemberReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* TCrossCollaborateInviteMemberRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TCrossCollaborateInviteMemberRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* TCrossCollaborateKickMemberReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TCrossCollaborateKickMemberReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* TCrossCollaborateGetMyFormationRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TCrossCollaborateGetMyFormationRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* TCrossCollaborateSetFormationReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TCrossCollaborateSetFormationReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* TCrossCollaborateGetEnemyFormationReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TCrossCollaborateGetEnemyFormationReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* TCrossCollaborateGetEnemyFormationRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TCrossCollaborateGetEnemyFormationRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* TCrossCollaborateSwapFightOrderReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TCrossCollaborateSwapFightOrderReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* TCrossCollaborateGetBattleRecordReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TCrossCollaborateGetBattleRecordReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* TCrossCollaborateGetBattleRecordRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TCrossCollaborateGetBattleRecordRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* TCrossCollaborateGetSimpleBattleRecordReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TCrossCollaborateGetSimpleBattleRecordReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* TCrossCollaborateGetSimpleBattleRecordRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TCrossCollaborateGetSimpleBattleRecordRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* TCrossCollaborateGetRankListRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TCrossCollaborateGetRankListRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* TCrossCollaborateReceiveBattleRewardReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TCrossCollaborateReceiveBattleRewardReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* TCrossCollaborateReceiveRankRewardReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TCrossCollaborateReceiveRankRewardReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* TCrossCollaborateTeamNotify_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TCrossCollaborateTeamNotify_reflection_ = NULL;
const ::google::protobuf::Descriptor* TCrossCollaborateUserRankRewardNotify_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TCrossCollaborateUserRankRewardNotify_reflection_ = NULL;
const ::google::protobuf::Descriptor* TCrossCollaborateBattleReportArrReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TCrossCollaborateBattleReportArrReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* TCrossCollaborateBattleReportArrRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TCrossCollaborateBattleReportArrRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* TCrossCollaborateGetServerGroupInfoRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TCrossCollaborateGetServerGroupInfoRsp_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* ECrossCollaborateStage_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* ECrossCollaborateStatus_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* ECrossCollaborateErrorCode_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* ECrossCollaborateInviteType_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_net_2fCrossCollaborate_2eproto() {
  protobuf_AddDesc_net_2fCrossCollaborate_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "net/CrossCollaborate.proto");
  GOOGLE_CHECK(file != NULL);
  TCrossCollaborateStageInfo_descriptor_ = file->message_type(0);
  static const int TCrossCollaborateStageInfo_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCrossCollaborateStageInfo, stage_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCrossCollaborateStageInfo, begintime_),
  };
  TCrossCollaborateStageInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TCrossCollaborateStageInfo_descriptor_,
      TCrossCollaborateStageInfo::default_instance_,
      TCrossCollaborateStageInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCrossCollaborateStageInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCrossCollaborateStageInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TCrossCollaborateStageInfo));
  TCrossCollaboratePosInfo_descriptor_ = file->message_type(1);
  static const int TCrossCollaboratePosInfo_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCrossCollaboratePosInfo, pos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCrossCollaboratePosInfo, hid_),
  };
  TCrossCollaboratePosInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TCrossCollaboratePosInfo_descriptor_,
      TCrossCollaboratePosInfo::default_instance_,
      TCrossCollaboratePosInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCrossCollaboratePosInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCrossCollaboratePosInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TCrossCollaboratePosInfo));
  TCrossCollaborateFormationInfo_descriptor_ = file->message_type(2);
  static const int TCrossCollaborateFormationInfo_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCrossCollaborateFormationInfo, formationid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCrossCollaborateFormationInfo, posarr_),
  };
  TCrossCollaborateFormationInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TCrossCollaborateFormationInfo_descriptor_,
      TCrossCollaborateFormationInfo::default_instance_,
      TCrossCollaborateFormationInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCrossCollaborateFormationInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCrossCollaborateFormationInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TCrossCollaborateFormationInfo));
  TCrossCollaborateEnemyFormation_descriptor_ = file->message_type(3);
  static const int TCrossCollaborateEnemyFormation_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCrossCollaborateEnemyFormation, formationid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCrossCollaborateEnemyFormation, unitarr_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCrossCollaborateEnemyFormation, fightforce_),
  };
  TCrossCollaborateEnemyFormation_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TCrossCollaborateEnemyFormation_descriptor_,
      TCrossCollaborateEnemyFormation::default_instance_,
      TCrossCollaborateEnemyFormation_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCrossCollaborateEnemyFormation, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCrossCollaborateEnemyFormation, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TCrossCollaborateEnemyFormation));
  TCrossCollaborateInviteUserInfo_descriptor_ = file->message_type(4);
  static const int TCrossCollaborateInviteUserInfo_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCrossCollaborateInviteUserInfo, userinfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCrossCollaborateInviteUserInfo, teamid_),
  };
  TCrossCollaborateInviteUserInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TCrossCollaborateInviteUserInfo_descriptor_,
      TCrossCollaborateInviteUserInfo::default_instance_,
      TCrossCollaborateInviteUserInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCrossCollaborateInviteUserInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCrossCollaborateInviteUserInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TCrossCollaborateInviteUserInfo));
  TCrossCollaborateUserInfo_descriptor_ = file->message_type(5);
  static const int TCrossCollaborateUserInfo_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCrossCollaborateUserInfo, userinfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCrossCollaborateUserInfo, order_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCrossCollaborateUserInfo, score_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCrossCollaborateUserInfo, totalfightforce_),
  };
  TCrossCollaborateUserInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TCrossCollaborateUserInfo_descriptor_,
      TCrossCollaborateUserInfo::default_instance_,
      TCrossCollaborateUserInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCrossCollaborateUserInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCrossCollaborateUserInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TCrossCollaborateUserInfo));
  TCrossCollaborateTeamInfo_descriptor_ = file->message_type(6);
  static const int TCrossCollaborateTeamInfo_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCrossCollaborateTeamInfo, teamid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCrossCollaborateTeamInfo, leaderuid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCrossCollaborateTeamInfo, needfightforce_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCrossCollaborateTeamInfo, teamstatus_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCrossCollaborateTeamInfo, userarr_),
  };
  TCrossCollaborateTeamInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TCrossCollaborateTeamInfo_descriptor_,
      TCrossCollaborateTeamInfo::default_instance_,
      TCrossCollaborateTeamInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCrossCollaborateTeamInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCrossCollaborateTeamInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TCrossCollaborateTeamInfo));
  TCrossCollaborateUnitViewInfo_descriptor_ = file->message_type(7);
  static const int TCrossCollaborateUnitViewInfo_offsets_[10] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCrossCollaborateUnitViewInfo, hid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCrossCollaborateUnitViewInfo, pos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCrossCollaborateUnitViewInfo, level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCrossCollaborateUnitViewInfo, star_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCrossCollaborateUnitViewInfo, curhp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCrossCollaborateUnitViewInfo, maxhp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCrossCollaborateUnitViewInfo, damageout_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCrossCollaborateUnitViewInfo, damagein_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCrossCollaborateUnitViewInfo, htid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCrossCollaborateUnitViewInfo, healout_),
  };
  TCrossCollaborateUnitViewInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TCrossCollaborateUnitViewInfo_descriptor_,
      TCrossCollaborateUnitViewInfo::default_instance_,
      TCrossCollaborateUnitViewInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCrossCollaborateUnitViewInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCrossCollaborateUnitViewInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TCrossCollaborateUnitViewInfo));
  TCrossCollaborateArmyViewInfo_descriptor_ = file->message_type(8);
  static const int TCrossCollaborateArmyViewInfo_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCrossCollaborateArmyViewInfo, unitarr_),
  };
  TCrossCollaborateArmyViewInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TCrossCollaborateArmyViewInfo_descriptor_,
      TCrossCollaborateArmyViewInfo::default_instance_,
      TCrossCollaborateArmyViewInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCrossCollaborateArmyViewInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCrossCollaborateArmyViewInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TCrossCollaborateArmyViewInfo));
  TCrossCollaborateRecordInfo_descriptor_ = file->message_type(9);
  static const int TCrossCollaborateRecordInfo_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCrossCollaborateRecordInfo, formationid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCrossCollaborateRecordInfo, recordid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCrossCollaborateRecordInfo, iswin_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCrossCollaborateRecordInfo, attackarmyarr_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCrossCollaborateRecordInfo, defendarmyarr_),
  };
  TCrossCollaborateRecordInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TCrossCollaborateRecordInfo_descriptor_,
      TCrossCollaborateRecordInfo::default_instance_,
      TCrossCollaborateRecordInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCrossCollaborateRecordInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCrossCollaborateRecordInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TCrossCollaborateRecordInfo));
  TCrossCollaborateBattleRecord_descriptor_ = file->message_type(10);
  static const int TCrossCollaborateBattleRecord_offsets_[9] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCrossCollaborateBattleRecord, attackuserinfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCrossCollaborateBattleRecord, defenduserinfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCrossCollaborateBattleRecord, attackcontinuewin_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCrossCollaborateBattleRecord, attackscorebefore_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCrossCollaborateBattleRecord, attackscoreafter_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCrossCollaborateBattleRecord, defendscorebefore_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCrossCollaborateBattleRecord, defendscoreafter_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCrossCollaborateBattleRecord, recordtime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCrossCollaborateBattleRecord, recordarr_),
  };
  TCrossCollaborateBattleRecord_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TCrossCollaborateBattleRecord_descriptor_,
      TCrossCollaborateBattleRecord::default_instance_,
      TCrossCollaborateBattleRecord_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCrossCollaborateBattleRecord, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCrossCollaborateBattleRecord, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TCrossCollaborateBattleRecord));
  TCrossCollaborateSimpleRecordInfo_descriptor_ = file->message_type(11);
  static const int TCrossCollaborateSimpleRecordInfo_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCrossCollaborateSimpleRecordInfo, userinfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCrossCollaborateSimpleRecordInfo, winnum_),
  };
  TCrossCollaborateSimpleRecordInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TCrossCollaborateSimpleRecordInfo_descriptor_,
      TCrossCollaborateSimpleRecordInfo::default_instance_,
      TCrossCollaborateSimpleRecordInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCrossCollaborateSimpleRecordInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCrossCollaborateSimpleRecordInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TCrossCollaborateSimpleRecordInfo));
  TCrossCollaborateSimpleBattleRecord_descriptor_ = file->message_type(12);
  static const int TCrossCollaborateSimpleBattleRecord_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCrossCollaborateSimpleBattleRecord, attackuserinfoarr_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCrossCollaborateSimpleBattleRecord, defenduserinfoarr_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCrossCollaborateSimpleBattleRecord, recordtime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCrossCollaborateSimpleBattleRecord, teamid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCrossCollaborateSimpleBattleRecord, round_),
  };
  TCrossCollaborateSimpleBattleRecord_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TCrossCollaborateSimpleBattleRecord_descriptor_,
      TCrossCollaborateSimpleBattleRecord::default_instance_,
      TCrossCollaborateSimpleBattleRecord_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCrossCollaborateSimpleBattleRecord, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCrossCollaborateSimpleBattleRecord, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TCrossCollaborateSimpleBattleRecord));
  TCrossCollaborateGetStageInfoRsp_descriptor_ = file->message_type(13);
  static const int TCrossCollaborateGetStageInfoRsp_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCrossCollaborateGetStageInfoRsp, stagearr_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCrossCollaborateGetStageInfoRsp, userinfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCrossCollaborateGetStageInfoRsp, teaminfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCrossCollaborateGetStageInfoRsp, rivalteaminfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCrossCollaborateGetStageInfoRsp, battlerewardtime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCrossCollaborateGetStageInfoRsp, rankrewardconfid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCrossCollaborateGetStageInfoRsp, rankrewardidarr_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCrossCollaborateGetStageInfoRsp, groupserveridarr_),
  };
  TCrossCollaborateGetStageInfoRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TCrossCollaborateGetStageInfoRsp_descriptor_,
      TCrossCollaborateGetStageInfoRsp::default_instance_,
      TCrossCollaborateGetStageInfoRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCrossCollaborateGetStageInfoRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCrossCollaborateGetStageInfoRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TCrossCollaborateGetStageInfoRsp));
  TAdventureGetTeamListReq_descriptor_ = file->message_type(14);
  static const int TAdventureGetTeamListReq_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TAdventureGetTeamListReq, offset_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TAdventureGetTeamListReq, limit_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TAdventureGetTeamListReq, canjoin_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TAdventureGetTeamListReq, invitetype_),
  };
  TAdventureGetTeamListReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TAdventureGetTeamListReq_descriptor_,
      TAdventureGetTeamListReq::default_instance_,
      TAdventureGetTeamListReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TAdventureGetTeamListReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TAdventureGetTeamListReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TAdventureGetTeamListReq));
  TCrossCollaborateGetTeamListRsp_descriptor_ = file->message_type(15);
  static const int TCrossCollaborateGetTeamListRsp_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCrossCollaborateGetTeamListRsp, teamarr_),
  };
  TCrossCollaborateGetTeamListRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TCrossCollaborateGetTeamListRsp_descriptor_,
      TCrossCollaborateGetTeamListRsp::default_instance_,
      TCrossCollaborateGetTeamListRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCrossCollaborateGetTeamListRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCrossCollaborateGetTeamListRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TCrossCollaborateGetTeamListRsp));
  TCrossCollaborateCreateTeamRsp_descriptor_ = file->message_type(16);
  static const int TCrossCollaborateCreateTeamRsp_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCrossCollaborateCreateTeamRsp, teaminfo_),
  };
  TCrossCollaborateCreateTeamRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TCrossCollaborateCreateTeamRsp_descriptor_,
      TCrossCollaborateCreateTeamRsp::default_instance_,
      TCrossCollaborateCreateTeamRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCrossCollaborateCreateTeamRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCrossCollaborateCreateTeamRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TCrossCollaborateCreateTeamRsp));
  TCrossCollaborateSetTeamReq_descriptor_ = file->message_type(17);
  static const int TCrossCollaborateSetTeamReq_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCrossCollaborateSetTeamReq, teamid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCrossCollaborateSetTeamReq, needfightforce_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCrossCollaborateSetTeamReq, teamstatus_),
  };
  TCrossCollaborateSetTeamReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TCrossCollaborateSetTeamReq_descriptor_,
      TCrossCollaborateSetTeamReq::default_instance_,
      TCrossCollaborateSetTeamReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCrossCollaborateSetTeamReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCrossCollaborateSetTeamReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TCrossCollaborateSetTeamReq));
  TCrossCollaborateJoinTeamReq_descriptor_ = file->message_type(18);
  static const int TCrossCollaborateJoinTeamReq_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCrossCollaborateJoinTeamReq, teamid_),
  };
  TCrossCollaborateJoinTeamReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TCrossCollaborateJoinTeamReq_descriptor_,
      TCrossCollaborateJoinTeamReq::default_instance_,
      TCrossCollaborateJoinTeamReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCrossCollaborateJoinTeamReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCrossCollaborateJoinTeamReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TCrossCollaborateJoinTeamReq));
  TCrossCollaborateJoinTeamRsp_descriptor_ = file->message_type(19);
  static const int TCrossCollaborateJoinTeamRsp_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCrossCollaborateJoinTeamRsp, errorcode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCrossCollaborateJoinTeamRsp, teaminfo_),
  };
  TCrossCollaborateJoinTeamRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TCrossCollaborateJoinTeamRsp_descriptor_,
      TCrossCollaborateJoinTeamRsp::default_instance_,
      TCrossCollaborateJoinTeamRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCrossCollaborateJoinTeamRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCrossCollaborateJoinTeamRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TCrossCollaborateJoinTeamRsp));
  TCrossCollaborateQuitTeamReq_descriptor_ = file->message_type(20);
  static const int TCrossCollaborateQuitTeamReq_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCrossCollaborateQuitTeamReq, teamid_),
  };
  TCrossCollaborateQuitTeamReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TCrossCollaborateQuitTeamReq_descriptor_,
      TCrossCollaborateQuitTeamReq::default_instance_,
      TCrossCollaborateQuitTeamReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCrossCollaborateQuitTeamReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCrossCollaborateQuitTeamReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TCrossCollaborateQuitTeamReq));
  TCrossCollaborateGetInviteListReq_descriptor_ = file->message_type(21);
  static const int TCrossCollaborateGetInviteListReq_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCrossCollaborateGetInviteListReq, invitetype_),
  };
  TCrossCollaborateGetInviteListReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TCrossCollaborateGetInviteListReq_descriptor_,
      TCrossCollaborateGetInviteListReq::default_instance_,
      TCrossCollaborateGetInviteListReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCrossCollaborateGetInviteListReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCrossCollaborateGetInviteListReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TCrossCollaborateGetInviteListReq));
  TCrossCollaborateGetInviteListRsp_descriptor_ = file->message_type(22);
  static const int TCrossCollaborateGetInviteListRsp_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCrossCollaborateGetInviteListRsp, userarr_),
  };
  TCrossCollaborateGetInviteListRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TCrossCollaborateGetInviteListRsp_descriptor_,
      TCrossCollaborateGetInviteListRsp::default_instance_,
      TCrossCollaborateGetInviteListRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCrossCollaborateGetInviteListRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCrossCollaborateGetInviteListRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TCrossCollaborateGetInviteListRsp));
  TCrossCollaborateInviteMemberReq_descriptor_ = file->message_type(23);
  static const int TCrossCollaborateInviteMemberReq_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCrossCollaborateInviteMemberReq, inviteuid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCrossCollaborateInviteMemberReq, inviteserverid_),
  };
  TCrossCollaborateInviteMemberReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TCrossCollaborateInviteMemberReq_descriptor_,
      TCrossCollaborateInviteMemberReq::default_instance_,
      TCrossCollaborateInviteMemberReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCrossCollaborateInviteMemberReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCrossCollaborateInviteMemberReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TCrossCollaborateInviteMemberReq));
  TCrossCollaborateInviteMemberRsp_descriptor_ = file->message_type(24);
  static const int TCrossCollaborateInviteMemberRsp_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCrossCollaborateInviteMemberRsp, teamid_),
  };
  TCrossCollaborateInviteMemberRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TCrossCollaborateInviteMemberRsp_descriptor_,
      TCrossCollaborateInviteMemberRsp::default_instance_,
      TCrossCollaborateInviteMemberRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCrossCollaborateInviteMemberRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCrossCollaborateInviteMemberRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TCrossCollaborateInviteMemberRsp));
  TCrossCollaborateKickMemberReq_descriptor_ = file->message_type(25);
  static const int TCrossCollaborateKickMemberReq_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCrossCollaborateKickMemberReq, teamid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCrossCollaborateKickMemberReq, kickuid_),
  };
  TCrossCollaborateKickMemberReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TCrossCollaborateKickMemberReq_descriptor_,
      TCrossCollaborateKickMemberReq::default_instance_,
      TCrossCollaborateKickMemberReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCrossCollaborateKickMemberReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCrossCollaborateKickMemberReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TCrossCollaborateKickMemberReq));
  TCrossCollaborateGetMyFormationRsp_descriptor_ = file->message_type(26);
  static const int TCrossCollaborateGetMyFormationRsp_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCrossCollaborateGetMyFormationRsp, formationarr_),
  };
  TCrossCollaborateGetMyFormationRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TCrossCollaborateGetMyFormationRsp_descriptor_,
      TCrossCollaborateGetMyFormationRsp::default_instance_,
      TCrossCollaborateGetMyFormationRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCrossCollaborateGetMyFormationRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCrossCollaborateGetMyFormationRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TCrossCollaborateGetMyFormationRsp));
  TCrossCollaborateSetFormationReq_descriptor_ = file->message_type(27);
  static const int TCrossCollaborateSetFormationReq_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCrossCollaborateSetFormationReq, formationarr_),
  };
  TCrossCollaborateSetFormationReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TCrossCollaborateSetFormationReq_descriptor_,
      TCrossCollaborateSetFormationReq::default_instance_,
      TCrossCollaborateSetFormationReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCrossCollaborateSetFormationReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCrossCollaborateSetFormationReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TCrossCollaborateSetFormationReq));
  TCrossCollaborateGetEnemyFormationReq_descriptor_ = file->message_type(28);
  static const int TCrossCollaborateGetEnemyFormationReq_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCrossCollaborateGetEnemyFormationReq, enemyuid_),
  };
  TCrossCollaborateGetEnemyFormationReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TCrossCollaborateGetEnemyFormationReq_descriptor_,
      TCrossCollaborateGetEnemyFormationReq::default_instance_,
      TCrossCollaborateGetEnemyFormationReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCrossCollaborateGetEnemyFormationReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCrossCollaborateGetEnemyFormationReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TCrossCollaborateGetEnemyFormationReq));
  TCrossCollaborateGetEnemyFormationRsp_descriptor_ = file->message_type(29);
  static const int TCrossCollaborateGetEnemyFormationRsp_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCrossCollaborateGetEnemyFormationRsp, formationarr_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCrossCollaborateGetEnemyFormationRsp, rankarr_),
  };
  TCrossCollaborateGetEnemyFormationRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TCrossCollaborateGetEnemyFormationRsp_descriptor_,
      TCrossCollaborateGetEnemyFormationRsp::default_instance_,
      TCrossCollaborateGetEnemyFormationRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCrossCollaborateGetEnemyFormationRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCrossCollaborateGetEnemyFormationRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TCrossCollaborateGetEnemyFormationRsp));
  TCrossCollaborateSwapFightOrderReq_descriptor_ = file->message_type(30);
  static const int TCrossCollaborateSwapFightOrderReq_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCrossCollaborateSwapFightOrderReq, teamid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCrossCollaborateSwapFightOrderReq, uidarr_),
  };
  TCrossCollaborateSwapFightOrderReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TCrossCollaborateSwapFightOrderReq_descriptor_,
      TCrossCollaborateSwapFightOrderReq::default_instance_,
      TCrossCollaborateSwapFightOrderReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCrossCollaborateSwapFightOrderReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCrossCollaborateSwapFightOrderReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TCrossCollaborateSwapFightOrderReq));
  TCrossCollaborateGetBattleRecordReq_descriptor_ = file->message_type(31);
  static const int TCrossCollaborateGetBattleRecordReq_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCrossCollaborateGetBattleRecordReq, teamid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCrossCollaborateGetBattleRecordReq, recordtime_),
  };
  TCrossCollaborateGetBattleRecordReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TCrossCollaborateGetBattleRecordReq_descriptor_,
      TCrossCollaborateGetBattleRecordReq::default_instance_,
      TCrossCollaborateGetBattleRecordReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCrossCollaborateGetBattleRecordReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCrossCollaborateGetBattleRecordReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TCrossCollaborateGetBattleRecordReq));
  TCrossCollaborateGetBattleRecordRsp_descriptor_ = file->message_type(32);
  static const int TCrossCollaborateGetBattleRecordRsp_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCrossCollaborateGetBattleRecordRsp, battlerecordarr_),
  };
  TCrossCollaborateGetBattleRecordRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TCrossCollaborateGetBattleRecordRsp_descriptor_,
      TCrossCollaborateGetBattleRecordRsp::default_instance_,
      TCrossCollaborateGetBattleRecordRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCrossCollaborateGetBattleRecordRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCrossCollaborateGetBattleRecordRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TCrossCollaborateGetBattleRecordRsp));
  TCrossCollaborateGetSimpleBattleRecordReq_descriptor_ = file->message_type(33);
  static const int TCrossCollaborateGetSimpleBattleRecordReq_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCrossCollaborateGetSimpleBattleRecordReq, offset_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCrossCollaborateGetSimpleBattleRecordReq, limit_),
  };
  TCrossCollaborateGetSimpleBattleRecordReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TCrossCollaborateGetSimpleBattleRecordReq_descriptor_,
      TCrossCollaborateGetSimpleBattleRecordReq::default_instance_,
      TCrossCollaborateGetSimpleBattleRecordReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCrossCollaborateGetSimpleBattleRecordReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCrossCollaborateGetSimpleBattleRecordReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TCrossCollaborateGetSimpleBattleRecordReq));
  TCrossCollaborateGetSimpleBattleRecordRsp_descriptor_ = file->message_type(34);
  static const int TCrossCollaborateGetSimpleBattleRecordRsp_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCrossCollaborateGetSimpleBattleRecordRsp, simplebattlerecordarr_),
  };
  TCrossCollaborateGetSimpleBattleRecordRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TCrossCollaborateGetSimpleBattleRecordRsp_descriptor_,
      TCrossCollaborateGetSimpleBattleRecordRsp::default_instance_,
      TCrossCollaborateGetSimpleBattleRecordRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCrossCollaborateGetSimpleBattleRecordRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCrossCollaborateGetSimpleBattleRecordRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TCrossCollaborateGetSimpleBattleRecordRsp));
  TCrossCollaborateGetRankListRsp_descriptor_ = file->message_type(35);
  static const int TCrossCollaborateGetRankListRsp_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCrossCollaborateGetRankListRsp, myrank_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCrossCollaborateGetRankListRsp, rankarr_),
  };
  TCrossCollaborateGetRankListRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TCrossCollaborateGetRankListRsp_descriptor_,
      TCrossCollaborateGetRankListRsp::default_instance_,
      TCrossCollaborateGetRankListRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCrossCollaborateGetRankListRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCrossCollaborateGetRankListRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TCrossCollaborateGetRankListRsp));
  TCrossCollaborateReceiveBattleRewardReq_descriptor_ = file->message_type(36);
  static const int TCrossCollaborateReceiveBattleRewardReq_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCrossCollaborateReceiveBattleRewardReq, round_),
  };
  TCrossCollaborateReceiveBattleRewardReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TCrossCollaborateReceiveBattleRewardReq_descriptor_,
      TCrossCollaborateReceiveBattleRewardReq::default_instance_,
      TCrossCollaborateReceiveBattleRewardReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCrossCollaborateReceiveBattleRewardReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCrossCollaborateReceiveBattleRewardReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TCrossCollaborateReceiveBattleRewardReq));
  TCrossCollaborateReceiveRankRewardReq_descriptor_ = file->message_type(37);
  static const int TCrossCollaborateReceiveRankRewardReq_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCrossCollaborateReceiveRankRewardReq, rankid_),
  };
  TCrossCollaborateReceiveRankRewardReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TCrossCollaborateReceiveRankRewardReq_descriptor_,
      TCrossCollaborateReceiveRankRewardReq::default_instance_,
      TCrossCollaborateReceiveRankRewardReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCrossCollaborateReceiveRankRewardReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCrossCollaborateReceiveRankRewardReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TCrossCollaborateReceiveRankRewardReq));
  TCrossCollaborateTeamNotify_descriptor_ = file->message_type(38);
  static const int TCrossCollaborateTeamNotify_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCrossCollaborateTeamNotify, teaminfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCrossCollaborateTeamNotify, pushtime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCrossCollaborateTeamNotify, isinvite_),
  };
  TCrossCollaborateTeamNotify_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TCrossCollaborateTeamNotify_descriptor_,
      TCrossCollaborateTeamNotify::default_instance_,
      TCrossCollaborateTeamNotify_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCrossCollaborateTeamNotify, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCrossCollaborateTeamNotify, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TCrossCollaborateTeamNotify));
  TCrossCollaborateUserRankRewardNotify_descriptor_ = file->message_type(39);
  static const int TCrossCollaborateUserRankRewardNotify_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCrossCollaborateUserRankRewardNotify, rankrewardidarr_),
  };
  TCrossCollaborateUserRankRewardNotify_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TCrossCollaborateUserRankRewardNotify_descriptor_,
      TCrossCollaborateUserRankRewardNotify::default_instance_,
      TCrossCollaborateUserRankRewardNotify_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCrossCollaborateUserRankRewardNotify, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCrossCollaborateUserRankRewardNotify, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TCrossCollaborateUserRankRewardNotify));
  TCrossCollaborateBattleReportArrReq_descriptor_ = file->message_type(40);
  static const int TCrossCollaborateBattleReportArrReq_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCrossCollaborateBattleReportArrReq, ridarr_),
  };
  TCrossCollaborateBattleReportArrReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TCrossCollaborateBattleReportArrReq_descriptor_,
      TCrossCollaborateBattleReportArrReq::default_instance_,
      TCrossCollaborateBattleReportArrReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCrossCollaborateBattleReportArrReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCrossCollaborateBattleReportArrReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TCrossCollaborateBattleReportArrReq));
  TCrossCollaborateBattleReportArrRsp_descriptor_ = file->message_type(41);
  static const int TCrossCollaborateBattleReportArrRsp_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCrossCollaborateBattleReportArrRsp, result_),
  };
  TCrossCollaborateBattleReportArrRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TCrossCollaborateBattleReportArrRsp_descriptor_,
      TCrossCollaborateBattleReportArrRsp::default_instance_,
      TCrossCollaborateBattleReportArrRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCrossCollaborateBattleReportArrRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCrossCollaborateBattleReportArrRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TCrossCollaborateBattleReportArrRsp));
  TCrossCollaborateGetServerGroupInfoRsp_descriptor_ = file->message_type(42);
  static const int TCrossCollaborateGetServerGroupInfoRsp_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCrossCollaborateGetServerGroupInfoRsp, groupid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCrossCollaborateGetServerGroupInfoRsp, serverid_),
  };
  TCrossCollaborateGetServerGroupInfoRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TCrossCollaborateGetServerGroupInfoRsp_descriptor_,
      TCrossCollaborateGetServerGroupInfoRsp::default_instance_,
      TCrossCollaborateGetServerGroupInfoRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCrossCollaborateGetServerGroupInfoRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCrossCollaborateGetServerGroupInfoRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TCrossCollaborateGetServerGroupInfoRsp));
  ECrossCollaborateStage_descriptor_ = file->enum_type(0);
  ECrossCollaborateStatus_descriptor_ = file->enum_type(1);
  ECrossCollaborateErrorCode_descriptor_ = file->enum_type(2);
  ECrossCollaborateInviteType_descriptor_ = file->enum_type(3);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_net_2fCrossCollaborate_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TCrossCollaborateStageInfo_descriptor_, &TCrossCollaborateStageInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TCrossCollaboratePosInfo_descriptor_, &TCrossCollaboratePosInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TCrossCollaborateFormationInfo_descriptor_, &TCrossCollaborateFormationInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TCrossCollaborateEnemyFormation_descriptor_, &TCrossCollaborateEnemyFormation::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TCrossCollaborateInviteUserInfo_descriptor_, &TCrossCollaborateInviteUserInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TCrossCollaborateUserInfo_descriptor_, &TCrossCollaborateUserInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TCrossCollaborateTeamInfo_descriptor_, &TCrossCollaborateTeamInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TCrossCollaborateUnitViewInfo_descriptor_, &TCrossCollaborateUnitViewInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TCrossCollaborateArmyViewInfo_descriptor_, &TCrossCollaborateArmyViewInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TCrossCollaborateRecordInfo_descriptor_, &TCrossCollaborateRecordInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TCrossCollaborateBattleRecord_descriptor_, &TCrossCollaborateBattleRecord::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TCrossCollaborateSimpleRecordInfo_descriptor_, &TCrossCollaborateSimpleRecordInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TCrossCollaborateSimpleBattleRecord_descriptor_, &TCrossCollaborateSimpleBattleRecord::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TCrossCollaborateGetStageInfoRsp_descriptor_, &TCrossCollaborateGetStageInfoRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TAdventureGetTeamListReq_descriptor_, &TAdventureGetTeamListReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TCrossCollaborateGetTeamListRsp_descriptor_, &TCrossCollaborateGetTeamListRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TCrossCollaborateCreateTeamRsp_descriptor_, &TCrossCollaborateCreateTeamRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TCrossCollaborateSetTeamReq_descriptor_, &TCrossCollaborateSetTeamReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TCrossCollaborateJoinTeamReq_descriptor_, &TCrossCollaborateJoinTeamReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TCrossCollaborateJoinTeamRsp_descriptor_, &TCrossCollaborateJoinTeamRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TCrossCollaborateQuitTeamReq_descriptor_, &TCrossCollaborateQuitTeamReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TCrossCollaborateGetInviteListReq_descriptor_, &TCrossCollaborateGetInviteListReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TCrossCollaborateGetInviteListRsp_descriptor_, &TCrossCollaborateGetInviteListRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TCrossCollaborateInviteMemberReq_descriptor_, &TCrossCollaborateInviteMemberReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TCrossCollaborateInviteMemberRsp_descriptor_, &TCrossCollaborateInviteMemberRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TCrossCollaborateKickMemberReq_descriptor_, &TCrossCollaborateKickMemberReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TCrossCollaborateGetMyFormationRsp_descriptor_, &TCrossCollaborateGetMyFormationRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TCrossCollaborateSetFormationReq_descriptor_, &TCrossCollaborateSetFormationReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TCrossCollaborateGetEnemyFormationReq_descriptor_, &TCrossCollaborateGetEnemyFormationReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TCrossCollaborateGetEnemyFormationRsp_descriptor_, &TCrossCollaborateGetEnemyFormationRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TCrossCollaborateSwapFightOrderReq_descriptor_, &TCrossCollaborateSwapFightOrderReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TCrossCollaborateGetBattleRecordReq_descriptor_, &TCrossCollaborateGetBattleRecordReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TCrossCollaborateGetBattleRecordRsp_descriptor_, &TCrossCollaborateGetBattleRecordRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TCrossCollaborateGetSimpleBattleRecordReq_descriptor_, &TCrossCollaborateGetSimpleBattleRecordReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TCrossCollaborateGetSimpleBattleRecordRsp_descriptor_, &TCrossCollaborateGetSimpleBattleRecordRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TCrossCollaborateGetRankListRsp_descriptor_, &TCrossCollaborateGetRankListRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TCrossCollaborateReceiveBattleRewardReq_descriptor_, &TCrossCollaborateReceiveBattleRewardReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TCrossCollaborateReceiveRankRewardReq_descriptor_, &TCrossCollaborateReceiveRankRewardReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TCrossCollaborateTeamNotify_descriptor_, &TCrossCollaborateTeamNotify::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TCrossCollaborateUserRankRewardNotify_descriptor_, &TCrossCollaborateUserRankRewardNotify::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TCrossCollaborateBattleReportArrReq_descriptor_, &TCrossCollaborateBattleReportArrReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TCrossCollaborateBattleReportArrRsp_descriptor_, &TCrossCollaborateBattleReportArrRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TCrossCollaborateGetServerGroupInfoRsp_descriptor_, &TCrossCollaborateGetServerGroupInfoRsp::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_net_2fCrossCollaborate_2eproto() {
  delete TCrossCollaborateStageInfo::default_instance_;
  delete TCrossCollaborateStageInfo_reflection_;
  delete TCrossCollaboratePosInfo::default_instance_;
  delete TCrossCollaboratePosInfo_reflection_;
  delete TCrossCollaborateFormationInfo::default_instance_;
  delete TCrossCollaborateFormationInfo_reflection_;
  delete TCrossCollaborateEnemyFormation::default_instance_;
  delete TCrossCollaborateEnemyFormation_reflection_;
  delete TCrossCollaborateInviteUserInfo::default_instance_;
  delete TCrossCollaborateInviteUserInfo_reflection_;
  delete TCrossCollaborateUserInfo::default_instance_;
  delete TCrossCollaborateUserInfo_reflection_;
  delete TCrossCollaborateTeamInfo::default_instance_;
  delete TCrossCollaborateTeamInfo_reflection_;
  delete TCrossCollaborateUnitViewInfo::default_instance_;
  delete TCrossCollaborateUnitViewInfo_reflection_;
  delete TCrossCollaborateArmyViewInfo::default_instance_;
  delete TCrossCollaborateArmyViewInfo_reflection_;
  delete TCrossCollaborateRecordInfo::default_instance_;
  delete TCrossCollaborateRecordInfo_reflection_;
  delete TCrossCollaborateBattleRecord::default_instance_;
  delete TCrossCollaborateBattleRecord_reflection_;
  delete TCrossCollaborateSimpleRecordInfo::default_instance_;
  delete TCrossCollaborateSimpleRecordInfo_reflection_;
  delete TCrossCollaborateSimpleBattleRecord::default_instance_;
  delete TCrossCollaborateSimpleBattleRecord_reflection_;
  delete TCrossCollaborateGetStageInfoRsp::default_instance_;
  delete TCrossCollaborateGetStageInfoRsp_reflection_;
  delete TAdventureGetTeamListReq::default_instance_;
  delete TAdventureGetTeamListReq_reflection_;
  delete TCrossCollaborateGetTeamListRsp::default_instance_;
  delete TCrossCollaborateGetTeamListRsp_reflection_;
  delete TCrossCollaborateCreateTeamRsp::default_instance_;
  delete TCrossCollaborateCreateTeamRsp_reflection_;
  delete TCrossCollaborateSetTeamReq::default_instance_;
  delete TCrossCollaborateSetTeamReq_reflection_;
  delete TCrossCollaborateJoinTeamReq::default_instance_;
  delete TCrossCollaborateJoinTeamReq_reflection_;
  delete TCrossCollaborateJoinTeamRsp::default_instance_;
  delete TCrossCollaborateJoinTeamRsp_reflection_;
  delete TCrossCollaborateQuitTeamReq::default_instance_;
  delete TCrossCollaborateQuitTeamReq_reflection_;
  delete TCrossCollaborateGetInviteListReq::default_instance_;
  delete TCrossCollaborateGetInviteListReq_reflection_;
  delete TCrossCollaborateGetInviteListRsp::default_instance_;
  delete TCrossCollaborateGetInviteListRsp_reflection_;
  delete TCrossCollaborateInviteMemberReq::default_instance_;
  delete TCrossCollaborateInviteMemberReq_reflection_;
  delete TCrossCollaborateInviteMemberRsp::default_instance_;
  delete TCrossCollaborateInviteMemberRsp_reflection_;
  delete TCrossCollaborateKickMemberReq::default_instance_;
  delete TCrossCollaborateKickMemberReq_reflection_;
  delete TCrossCollaborateGetMyFormationRsp::default_instance_;
  delete TCrossCollaborateGetMyFormationRsp_reflection_;
  delete TCrossCollaborateSetFormationReq::default_instance_;
  delete TCrossCollaborateSetFormationReq_reflection_;
  delete TCrossCollaborateGetEnemyFormationReq::default_instance_;
  delete TCrossCollaborateGetEnemyFormationReq_reflection_;
  delete TCrossCollaborateGetEnemyFormationRsp::default_instance_;
  delete TCrossCollaborateGetEnemyFormationRsp_reflection_;
  delete TCrossCollaborateSwapFightOrderReq::default_instance_;
  delete TCrossCollaborateSwapFightOrderReq_reflection_;
  delete TCrossCollaborateGetBattleRecordReq::default_instance_;
  delete TCrossCollaborateGetBattleRecordReq_reflection_;
  delete TCrossCollaborateGetBattleRecordRsp::default_instance_;
  delete TCrossCollaborateGetBattleRecordRsp_reflection_;
  delete TCrossCollaborateGetSimpleBattleRecordReq::default_instance_;
  delete TCrossCollaborateGetSimpleBattleRecordReq_reflection_;
  delete TCrossCollaborateGetSimpleBattleRecordRsp::default_instance_;
  delete TCrossCollaborateGetSimpleBattleRecordRsp_reflection_;
  delete TCrossCollaborateGetRankListRsp::default_instance_;
  delete TCrossCollaborateGetRankListRsp_reflection_;
  delete TCrossCollaborateReceiveBattleRewardReq::default_instance_;
  delete TCrossCollaborateReceiveBattleRewardReq_reflection_;
  delete TCrossCollaborateReceiveRankRewardReq::default_instance_;
  delete TCrossCollaborateReceiveRankRewardReq_reflection_;
  delete TCrossCollaborateTeamNotify::default_instance_;
  delete TCrossCollaborateTeamNotify_reflection_;
  delete TCrossCollaborateUserRankRewardNotify::default_instance_;
  delete TCrossCollaborateUserRankRewardNotify_reflection_;
  delete TCrossCollaborateBattleReportArrReq::default_instance_;
  delete TCrossCollaborateBattleReportArrReq_reflection_;
  delete TCrossCollaborateBattleReportArrRsp::default_instance_;
  delete TCrossCollaborateBattleReportArrRsp_reflection_;
  delete TCrossCollaborateGetServerGroupInfoRsp::default_instance_;
  delete TCrossCollaborateGetServerGroupInfoRsp_reflection_;
}

void protobuf_AddDesc_net_2fCrossCollaborate_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::pb::protobuf_AddDesc_net_2fBattle_2eproto();
  ::pb::protobuf_AddDesc_net_2fUser_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\032net/CrossCollaborate.proto\022\002pb\032\020net/Ba"
    "ttle.proto\032\016net/User.proto\"Z\n\032TCrossColl"
    "aborateStageInfo\022)\n\005Stage\030\001 \001(\0162\032.pb.ECr"
    "ossCollaborateStage\022\021\n\tBeginTime\030\002 \001(\004\"4"
    "\n\030TCrossCollaboratePosInfo\022\013\n\003Pos\030\001 \001(\r\022"
    "\013\n\003Hid\030\002 \001(\r\"c\n\036TCrossCollaborateFormati"
    "onInfo\022\023\n\013FormationId\030\001 \001(\r\022,\n\006PosArr\030\002 "
    "\003(\0132\034.pb.TCrossCollaboratePosInfo\"j\n\037TCr"
    "ossCollaborateEnemyFormation\022\023\n\013Formatio"
    "nId\030\001 \001(\r\022\036\n\007UnitArr\030\002 \003(\0132\r.pb.TUnitInf"
    "o\022\022\n\nFightForce\030\003 \001(\004\"b\n\037TCrossCollabora"
    "teInviteUserInfo\022/\n\010UserInfo\030\001 \001(\0132\035.pb."
    "TUserSimpleInfoWithStatus\022\016\n\006TeamId\030\002 \001("
    "\004\"y\n\031TCrossCollaborateUserInfo\022%\n\010UserIn"
    "fo\030\001 \001(\0132\023.pb.TUserSimpleInfo\022\r\n\005Order\030\002"
    " \001(\r\022\r\n\005Score\030\003 \001(\r\022\027\n\017TotalFightForce\030\004"
    " \001(\004\"\267\001\n\031TCrossCollaborateTeamInfo\022\016\n\006Te"
    "amId\030\001 \001(\004\022\021\n\tLeaderUid\030\002 \001(\004\022\026\n\016NeedFig"
    "htForce\030\003 \001(\004\022/\n\nTeamStatus\030\004 \001(\0162\033.pb.E"
    "CrossCollaborateStatus\022.\n\007UserArr\030\005 \003(\0132"
    "\035.pb.TCrossCollaborateUserInfo\"\270\001\n\035TCros"
    "sCollaborateUnitViewInfo\022\013\n\003Hid\030\001 \002(\r\022\013\n"
    "\003Pos\030\002 \002(\r\022\r\n\005Level\030\003 \002(\r\022\014\n\004Star\030\004 \001(\r\022"
    "\r\n\005CurHp\030\005 \001(\004\022\r\n\005MaxHp\030\006 \001(\004\022\021\n\tDamageO"
    "ut\030\007 \001(\004\022\020\n\010DamageIn\030\010 \001(\004\022\014\n\004Htid\030\t \001(\r"
    "\022\017\n\007HealOut\030\n \001(\004\"S\n\035TCrossCollaborateAr"
    "myViewInfo\0222\n\007UnitArr\030\001 \003(\0132!.pb.TCrossC"
    "ollaborateUnitViewInfo\"\307\001\n\033TCrossCollabo"
    "rateRecordInfo\022\023\n\013FormationId\030\001 \001(\r\022\020\n\010R"
    "ecordId\030\002 \001(\004\022\r\n\005IsWin\030\003 \001(\010\0228\n\rAttackAr"
    "myArr\030\004 \003(\0132!.pb.TCrossCollaborateArmyVi"
    "ewInfo\0228\n\rDefendArmyArr\030\005 \003(\0132!.pb.TCros"
    "sCollaborateArmyViewInfo\"\306\002\n\035TCrossColla"
    "borateBattleRecord\022+\n\016AttackUserInfo\030\001 \001"
    "(\0132\023.pb.TUserSimpleInfo\022+\n\016DefendUserInf"
    "o\030\002 \001(\0132\023.pb.TUserSimpleInfo\022\031\n\021AttackCo"
    "ntinueWin\030\003 \001(\r\022\031\n\021AttackScoreBefore\030\004 \001"
    "(\r\022\030\n\020AttackScoreAfter\030\005 \001(\r\022\031\n\021DefendSc"
    "oreBefore\030\006 \001(\r\022\030\n\020DefendScoreAfter\030\007 \001("
    "\r\022\022\n\nRecordTime\030\010 \001(\004\0222\n\tRecordArr\030\t \003(\013"
    "2\037.pb.TCrossCollaborateRecordInfo\"Z\n!TCr"
    "ossCollaborateSimpleRecordInfo\022%\n\010UserIn"
    "fo\030\001 \001(\0132\023.pb.TUserSimpleInfo\022\016\n\006WinNum\030"
    "\002 \001(\r\"\334\001\n#TCrossCollaborateSimpleBattleR"
    "ecord\022@\n\021AttackUserInfoArr\030\001 \003(\0132%.pb.TC"
    "rossCollaborateSimpleRecordInfo\022@\n\021Defen"
    "dUserInfoArr\030\002 \003(\0132%.pb.TCrossCollaborat"
    "eSimpleRecordInfo\022\022\n\nRecordTime\030\003 \001(\004\022\016\n"
    "\006TeamId\030\004 \001(\004\022\r\n\005Round\030\005 \001(\r\"\323\002\n TCrossC"
    "ollaborateGetStageInfoRsp\0220\n\010StageArr\030\001 "
    "\003(\0132\036.pb.TCrossCollaborateStageInfo\022/\n\010U"
    "serInfo\030\002 \001(\0132\035.pb.TCrossCollaborateUser"
    "Info\022/\n\010TeamInfo\030\003 \001(\0132\035.pb.TCrossCollab"
    "orateTeamInfo\0224\n\rRivalTeamInfo\030\004 \001(\0132\035.p"
    "b.TCrossCollaborateTeamInfo\022\030\n\020BattleRew"
    "ardTime\030\005 \001(\004\022\030\n\020RankRewardConfId\030\006 \001(\r\022"
    "\027\n\017RankRewardIdArr\030\007 \003(\r\022\030\n\020GroupServerI"
    "dArr\030\010 \003(\t\"\177\n\030TAdventureGetTeamListReq\022\016"
    "\n\006Offset\030\001 \001(\r\022\r\n\005Limit\030\002 \001(\r\022\017\n\007CanJoin"
    "\030\003 \001(\r\0223\n\nInviteType\030\004 \001(\0162\037.pb.ECrossCo"
    "llaborateInviteType\"Q\n\037TCrossCollaborate"
    "GetTeamListRsp\022.\n\007TeamArr\030\001 \003(\0132\035.pb.TCr"
    "ossCollaborateTeamInfo\"Q\n\036TCrossCollabor"
    "ateCreateTeamRsp\022/\n\010TeamInfo\030\001 \001(\0132\035.pb."
    "TCrossCollaborateTeamInfo\"v\n\033TCrossColla"
    "borateSetTeamReq\022\016\n\006TeamId\030\001 \001(\004\022\026\n\016Need"
    "FightForce\030\002 \001(\004\022/\n\nTeamStatus\030\003 \001(\0162\033.p"
    "b.ECrossCollaborateStatus\".\n\034TCrossColla"
    "borateJoinTeamReq\022\016\n\006TeamId\030\001 \001(\004\"\202\001\n\034TC"
    "rossCollaborateJoinTeamRsp\0221\n\tErrorCode\030"
    "\001 \001(\0162\036.pb.ECrossCollaborateErrorCode\022/\n"
    "\010TeamInfo\030\002 \001(\0132\035.pb.TCrossCollaborateTe"
    "amInfo\".\n\034TCrossCollaborateQuitTeamReq\022\016"
    "\n\006TeamId\030\001 \001(\004\"X\n!TCrossCollaborateGetIn"
    "viteListReq\0223\n\nInviteType\030\001 \001(\0162\037.pb.ECr"
    "ossCollaborateInviteType\"Y\n!TCrossCollab"
    "orateGetInviteListRsp\0224\n\007UserArr\030\001 \003(\0132#"
    ".pb.TCrossCollaborateInviteUserInfo\"M\n T"
    "CrossCollaborateInviteMemberReq\022\021\n\tInvit"
    "eUid\030\001 \001(\004\022\026\n\016InviteServerId\030\002 \001(\t\"2\n TC"
    "rossCollaborateInviteMemberRsp\022\016\n\006TeamId"
    "\030\001 \001(\004\"A\n\036TCrossCollaborateKickMemberReq"
    "\022\016\n\006TeamId\030\001 \001(\004\022\017\n\007KickUid\030\002 \001(\004\"^\n\"TCr"
    "ossCollaborateGetMyFormationRsp\0228\n\014Forma"
    "tionArr\030\001 \003(\0132\".pb.TCrossCollaborateForm"
    "ationInfo\"\\\n TCrossCollaborateSetFormati"
    "onReq\0228\n\014FormationArr\030\001 \003(\0132\".pb.TCrossC"
    "ollaborateFormationInfo\"9\n%TCrossCollabo"
    "rateGetEnemyFormationReq\022\020\n\010EnemyUid\030\001 \001"
    "(\004\"\204\001\n%TCrossCollaborateGetEnemyFormatio"
    "nRsp\0229\n\014FormationArr\030\001 \003(\0132#.pb.TCrossCo"
    "llaborateEnemyFormation\022 \n\007RankArr\030\002 \003(\013"
    "2\017.pb.TRankSingle\"D\n\"TCrossCollaborateSw"
    "apFightOrderReq\022\016\n\006TeamId\030\001 \001(\004\022\016\n\006UidAr"
    "r\030\002 \003(\004\"I\n#TCrossCollaborateGetBattleRec"
    "ordReq\022\016\n\006TeamId\030\001 \001(\004\022\022\n\nRecordTime\030\002 \001"
    "(\004\"a\n#TCrossCollaborateGetBattleRecordRs"
    "p\022:\n\017BattleRecordArr\030\001 \003(\0132!.pb.TCrossCo"
    "llaborateBattleRecord\"J\n)TCrossCollabora"
    "teGetSimpleBattleRecordReq\022\016\n\006Offset\030\001 \001"
    "(\r\022\r\n\005Limit\030\002 \001(\r\"s\n)TCrossCollaborateGe"
    "tSimpleBattleRecordRsp\022F\n\025SimpleBattleRe"
    "cordArr\030\001 \003(\0132\'.pb.TCrossCollaborateSimp"
    "leBattleRecord\"a\n\037TCrossCollaborateGetRa"
    "nkListRsp\022\016\n\006MyRank\030\001 \001(\005\022.\n\007RankArr\030\002 \003"
    "(\0132\035.pb.TCrossCollaborateUserInfo\"8\n\'TCr"
    "ossCollaborateReceiveBattleRewardReq\022\r\n\005"
    "Round\030\001 \001(\r\"7\n%TCrossCollaborateReceiveR"
    "ankRewardReq\022\016\n\006RankId\030\001 \001(\r\"r\n\033TCrossCo"
    "llaborateTeamNotify\022/\n\010TeamInfo\030\001 \001(\0132\035."
    "pb.TCrossCollaborateTeamInfo\022\020\n\010PushTime"
    "\030\002 \001(\004\022\020\n\010IsInvite\030\003 \001(\r\"@\n%TCrossCollab"
    "orateUserRankRewardNotify\022\027\n\017RankRewardI"
    "dArr\030\001 \003(\r\"5\n#TCrossCollaborateBattleRep"
    "ortArrReq\022\016\n\006ridArr\030\001 \003(\004\"5\n#TCrossColla"
    "borateBattleReportArrRsp\022\016\n\006Result\030\001 \003(\014"
    "\"K\n&TCrossCollaborateGetServerGroupInfoR"
    "sp\022\017\n\007GroupId\030\001 \001(\r\022\020\n\010ServerId\030\002 \001(\t*\261\001"
    "\n\026ECrossCollaborateStage\022\023\n\017ECCO_STAGE_I"
    "DLE\020\000\022\024\n\020ECCO_STAGE_GROUP\020\001\022\024\n\020ECCO_STAG"
    "E_MERGE\020\002\022\024\n\020ECCO_STAGE_MATCH\020\003\022\025\n\021ECCO_"
    "STAGE_BATTLE\020\004\022\025\n\021ECCO_STAGE_REWARD\020\005\022\022\n"
    "\016ECCO_STAGE_END\020\006*J\n\027ECrossCollaborateSt"
    "atus\022\027\n\023ECCO_STATUS_PRIVATE\020\000\022\026\n\022ECCO_ST"
    "ATUS_PUBLIC\020\001*\264\001\n\032ECrossCollaborateError"
    "Code\022\026\n\022ECCO_ERROR_CODE_OK\020\000\022\030\n\024ECCO_ERR"
    "OR_CODE_FULL\020\001\022\034\n\030ECCO_ERROR_CODE_NOTEXI"
    "ST\020\002\022\"\n\036ECCO_ERROR_CODE_NEEDFIGHTFORCE\020\003"
    "\022\"\n\036ECCO_ERROR_CODE_NOTINSAMEGROUP\020\004*w\n\033"
    "ECrossCollaborateInviteType\022\035\n\031ECCO_INVI"
    "ITE_TYPE_DEFAULT\020\000\022\033\n\027ECCO_INVIITE_TYPE_"
    "GUILD\020\001\022\034\n\030ECCO_INVIITE_TYPE_FRIEND\020\002", 5277);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "net/CrossCollaborate.proto", &protobuf_RegisterTypes);
  TCrossCollaborateStageInfo::default_instance_ = new TCrossCollaborateStageInfo();
  TCrossCollaboratePosInfo::default_instance_ = new TCrossCollaboratePosInfo();
  TCrossCollaborateFormationInfo::default_instance_ = new TCrossCollaborateFormationInfo();
  TCrossCollaborateEnemyFormation::default_instance_ = new TCrossCollaborateEnemyFormation();
  TCrossCollaborateInviteUserInfo::default_instance_ = new TCrossCollaborateInviteUserInfo();
  TCrossCollaborateUserInfo::default_instance_ = new TCrossCollaborateUserInfo();
  TCrossCollaborateTeamInfo::default_instance_ = new TCrossCollaborateTeamInfo();
  TCrossCollaborateUnitViewInfo::default_instance_ = new TCrossCollaborateUnitViewInfo();
  TCrossCollaborateArmyViewInfo::default_instance_ = new TCrossCollaborateArmyViewInfo();
  TCrossCollaborateRecordInfo::default_instance_ = new TCrossCollaborateRecordInfo();
  TCrossCollaborateBattleRecord::default_instance_ = new TCrossCollaborateBattleRecord();
  TCrossCollaborateSimpleRecordInfo::default_instance_ = new TCrossCollaborateSimpleRecordInfo();
  TCrossCollaborateSimpleBattleRecord::default_instance_ = new TCrossCollaborateSimpleBattleRecord();
  TCrossCollaborateGetStageInfoRsp::default_instance_ = new TCrossCollaborateGetStageInfoRsp();
  TAdventureGetTeamListReq::default_instance_ = new TAdventureGetTeamListReq();
  TCrossCollaborateGetTeamListRsp::default_instance_ = new TCrossCollaborateGetTeamListRsp();
  TCrossCollaborateCreateTeamRsp::default_instance_ = new TCrossCollaborateCreateTeamRsp();
  TCrossCollaborateSetTeamReq::default_instance_ = new TCrossCollaborateSetTeamReq();
  TCrossCollaborateJoinTeamReq::default_instance_ = new TCrossCollaborateJoinTeamReq();
  TCrossCollaborateJoinTeamRsp::default_instance_ = new TCrossCollaborateJoinTeamRsp();
  TCrossCollaborateQuitTeamReq::default_instance_ = new TCrossCollaborateQuitTeamReq();
  TCrossCollaborateGetInviteListReq::default_instance_ = new TCrossCollaborateGetInviteListReq();
  TCrossCollaborateGetInviteListRsp::default_instance_ = new TCrossCollaborateGetInviteListRsp();
  TCrossCollaborateInviteMemberReq::default_instance_ = new TCrossCollaborateInviteMemberReq();
  TCrossCollaborateInviteMemberRsp::default_instance_ = new TCrossCollaborateInviteMemberRsp();
  TCrossCollaborateKickMemberReq::default_instance_ = new TCrossCollaborateKickMemberReq();
  TCrossCollaborateGetMyFormationRsp::default_instance_ = new TCrossCollaborateGetMyFormationRsp();
  TCrossCollaborateSetFormationReq::default_instance_ = new TCrossCollaborateSetFormationReq();
  TCrossCollaborateGetEnemyFormationReq::default_instance_ = new TCrossCollaborateGetEnemyFormationReq();
  TCrossCollaborateGetEnemyFormationRsp::default_instance_ = new TCrossCollaborateGetEnemyFormationRsp();
  TCrossCollaborateSwapFightOrderReq::default_instance_ = new TCrossCollaborateSwapFightOrderReq();
  TCrossCollaborateGetBattleRecordReq::default_instance_ = new TCrossCollaborateGetBattleRecordReq();
  TCrossCollaborateGetBattleRecordRsp::default_instance_ = new TCrossCollaborateGetBattleRecordRsp();
  TCrossCollaborateGetSimpleBattleRecordReq::default_instance_ = new TCrossCollaborateGetSimpleBattleRecordReq();
  TCrossCollaborateGetSimpleBattleRecordRsp::default_instance_ = new TCrossCollaborateGetSimpleBattleRecordRsp();
  TCrossCollaborateGetRankListRsp::default_instance_ = new TCrossCollaborateGetRankListRsp();
  TCrossCollaborateReceiveBattleRewardReq::default_instance_ = new TCrossCollaborateReceiveBattleRewardReq();
  TCrossCollaborateReceiveRankRewardReq::default_instance_ = new TCrossCollaborateReceiveRankRewardReq();
  TCrossCollaborateTeamNotify::default_instance_ = new TCrossCollaborateTeamNotify();
  TCrossCollaborateUserRankRewardNotify::default_instance_ = new TCrossCollaborateUserRankRewardNotify();
  TCrossCollaborateBattleReportArrReq::default_instance_ = new TCrossCollaborateBattleReportArrReq();
  TCrossCollaborateBattleReportArrRsp::default_instance_ = new TCrossCollaborateBattleReportArrRsp();
  TCrossCollaborateGetServerGroupInfoRsp::default_instance_ = new TCrossCollaborateGetServerGroupInfoRsp();
  TCrossCollaborateStageInfo::default_instance_->InitAsDefaultInstance();
  TCrossCollaboratePosInfo::default_instance_->InitAsDefaultInstance();
  TCrossCollaborateFormationInfo::default_instance_->InitAsDefaultInstance();
  TCrossCollaborateEnemyFormation::default_instance_->InitAsDefaultInstance();
  TCrossCollaborateInviteUserInfo::default_instance_->InitAsDefaultInstance();
  TCrossCollaborateUserInfo::default_instance_->InitAsDefaultInstance();
  TCrossCollaborateTeamInfo::default_instance_->InitAsDefaultInstance();
  TCrossCollaborateUnitViewInfo::default_instance_->InitAsDefaultInstance();
  TCrossCollaborateArmyViewInfo::default_instance_->InitAsDefaultInstance();
  TCrossCollaborateRecordInfo::default_instance_->InitAsDefaultInstance();
  TCrossCollaborateBattleRecord::default_instance_->InitAsDefaultInstance();
  TCrossCollaborateSimpleRecordInfo::default_instance_->InitAsDefaultInstance();
  TCrossCollaborateSimpleBattleRecord::default_instance_->InitAsDefaultInstance();
  TCrossCollaborateGetStageInfoRsp::default_instance_->InitAsDefaultInstance();
  TAdventureGetTeamListReq::default_instance_->InitAsDefaultInstance();
  TCrossCollaborateGetTeamListRsp::default_instance_->InitAsDefaultInstance();
  TCrossCollaborateCreateTeamRsp::default_instance_->InitAsDefaultInstance();
  TCrossCollaborateSetTeamReq::default_instance_->InitAsDefaultInstance();
  TCrossCollaborateJoinTeamReq::default_instance_->InitAsDefaultInstance();
  TCrossCollaborateJoinTeamRsp::default_instance_->InitAsDefaultInstance();
  TCrossCollaborateQuitTeamReq::default_instance_->InitAsDefaultInstance();
  TCrossCollaborateGetInviteListReq::default_instance_->InitAsDefaultInstance();
  TCrossCollaborateGetInviteListRsp::default_instance_->InitAsDefaultInstance();
  TCrossCollaborateInviteMemberReq::default_instance_->InitAsDefaultInstance();
  TCrossCollaborateInviteMemberRsp::default_instance_->InitAsDefaultInstance();
  TCrossCollaborateKickMemberReq::default_instance_->InitAsDefaultInstance();
  TCrossCollaborateGetMyFormationRsp::default_instance_->InitAsDefaultInstance();
  TCrossCollaborateSetFormationReq::default_instance_->InitAsDefaultInstance();
  TCrossCollaborateGetEnemyFormationReq::default_instance_->InitAsDefaultInstance();
  TCrossCollaborateGetEnemyFormationRsp::default_instance_->InitAsDefaultInstance();
  TCrossCollaborateSwapFightOrderReq::default_instance_->InitAsDefaultInstance();
  TCrossCollaborateGetBattleRecordReq::default_instance_->InitAsDefaultInstance();
  TCrossCollaborateGetBattleRecordRsp::default_instance_->InitAsDefaultInstance();
  TCrossCollaborateGetSimpleBattleRecordReq::default_instance_->InitAsDefaultInstance();
  TCrossCollaborateGetSimpleBattleRecordRsp::default_instance_->InitAsDefaultInstance();
  TCrossCollaborateGetRankListRsp::default_instance_->InitAsDefaultInstance();
  TCrossCollaborateReceiveBattleRewardReq::default_instance_->InitAsDefaultInstance();
  TCrossCollaborateReceiveRankRewardReq::default_instance_->InitAsDefaultInstance();
  TCrossCollaborateTeamNotify::default_instance_->InitAsDefaultInstance();
  TCrossCollaborateUserRankRewardNotify::default_instance_->InitAsDefaultInstance();
  TCrossCollaborateBattleReportArrReq::default_instance_->InitAsDefaultInstance();
  TCrossCollaborateBattleReportArrRsp::default_instance_->InitAsDefaultInstance();
  TCrossCollaborateGetServerGroupInfoRsp::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_net_2fCrossCollaborate_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_net_2fCrossCollaborate_2eproto {
  StaticDescriptorInitializer_net_2fCrossCollaborate_2eproto() {
    protobuf_AddDesc_net_2fCrossCollaborate_2eproto();
  }
} static_descriptor_initializer_net_2fCrossCollaborate_2eproto_;
const ::google::protobuf::EnumDescriptor* ECrossCollaborateStage_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ECrossCollaborateStage_descriptor_;
}
bool ECrossCollaborateStage_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* ECrossCollaborateStatus_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ECrossCollaborateStatus_descriptor_;
}
bool ECrossCollaborateStatus_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* ECrossCollaborateErrorCode_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ECrossCollaborateErrorCode_descriptor_;
}
bool ECrossCollaborateErrorCode_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* ECrossCollaborateInviteType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ECrossCollaborateInviteType_descriptor_;
}
bool ECrossCollaborateInviteType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#ifndef _MSC_VER
const int TCrossCollaborateStageInfo::kStageFieldNumber;
const int TCrossCollaborateStageInfo::kBeginTimeFieldNumber;
#endif  // !_MSC_VER

TCrossCollaborateStageInfo::TCrossCollaborateStageInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TCrossCollaborateStageInfo)
}

void TCrossCollaborateStageInfo::InitAsDefaultInstance() {
}

TCrossCollaborateStageInfo::TCrossCollaborateStageInfo(const TCrossCollaborateStageInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TCrossCollaborateStageInfo)
}

void TCrossCollaborateStageInfo::SharedCtor() {
  _cached_size_ = 0;
  stage_ = 0;
  begintime_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TCrossCollaborateStageInfo::~TCrossCollaborateStageInfo() {
  // @@protoc_insertion_point(destructor:pb.TCrossCollaborateStageInfo)
  SharedDtor();
}

void TCrossCollaborateStageInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TCrossCollaborateStageInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TCrossCollaborateStageInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TCrossCollaborateStageInfo_descriptor_;
}

const TCrossCollaborateStageInfo& TCrossCollaborateStageInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fCrossCollaborate_2eproto();
  return *default_instance_;
}

TCrossCollaborateStageInfo* TCrossCollaborateStageInfo::default_instance_ = NULL;

TCrossCollaborateStageInfo* TCrossCollaborateStageInfo::New() const {
  return new TCrossCollaborateStageInfo;
}

void TCrossCollaborateStageInfo::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<TCrossCollaborateStageInfo*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(begintime_, stage_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TCrossCollaborateStageInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TCrossCollaborateStageInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .pb.ECrossCollaborateStage Stage = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::pb::ECrossCollaborateStage_IsValid(value)) {
            set_stage(static_cast< ::pb::ECrossCollaborateStage >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_BeginTime;
        break;
      }

      // optional uint64 BeginTime = 2;
      case 2: {
        if (tag == 16) {
         parse_BeginTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &begintime_)));
          set_has_begintime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TCrossCollaborateStageInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TCrossCollaborateStageInfo)
  return false;
#undef DO_
}

void TCrossCollaborateStageInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TCrossCollaborateStageInfo)
  // optional .pb.ECrossCollaborateStage Stage = 1;
  if (has_stage()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->stage(), output);
  }

  // optional uint64 BeginTime = 2;
  if (has_begintime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->begintime(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TCrossCollaborateStageInfo)
}

::google::protobuf::uint8* TCrossCollaborateStageInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TCrossCollaborateStageInfo)
  // optional .pb.ECrossCollaborateStage Stage = 1;
  if (has_stage()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->stage(), target);
  }

  // optional uint64 BeginTime = 2;
  if (has_begintime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->begintime(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TCrossCollaborateStageInfo)
  return target;
}

int TCrossCollaborateStageInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .pb.ECrossCollaborateStage Stage = 1;
    if (has_stage()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->stage());
    }

    // optional uint64 BeginTime = 2;
    if (has_begintime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->begintime());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TCrossCollaborateStageInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TCrossCollaborateStageInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TCrossCollaborateStageInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TCrossCollaborateStageInfo::MergeFrom(const TCrossCollaborateStageInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_stage()) {
      set_stage(from.stage());
    }
    if (from.has_begintime()) {
      set_begintime(from.begintime());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TCrossCollaborateStageInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TCrossCollaborateStageInfo::CopyFrom(const TCrossCollaborateStageInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TCrossCollaborateStageInfo::IsInitialized() const {

  return true;
}

void TCrossCollaborateStageInfo::Swap(TCrossCollaborateStageInfo* other) {
  if (other != this) {
    std::swap(stage_, other->stage_);
    std::swap(begintime_, other->begintime_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TCrossCollaborateStageInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TCrossCollaborateStageInfo_descriptor_;
  metadata.reflection = TCrossCollaborateStageInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TCrossCollaboratePosInfo::kPosFieldNumber;
const int TCrossCollaboratePosInfo::kHidFieldNumber;
#endif  // !_MSC_VER

TCrossCollaboratePosInfo::TCrossCollaboratePosInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TCrossCollaboratePosInfo)
}

void TCrossCollaboratePosInfo::InitAsDefaultInstance() {
}

TCrossCollaboratePosInfo::TCrossCollaboratePosInfo(const TCrossCollaboratePosInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TCrossCollaboratePosInfo)
}

void TCrossCollaboratePosInfo::SharedCtor() {
  _cached_size_ = 0;
  pos_ = 0u;
  hid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TCrossCollaboratePosInfo::~TCrossCollaboratePosInfo() {
  // @@protoc_insertion_point(destructor:pb.TCrossCollaboratePosInfo)
  SharedDtor();
}

void TCrossCollaboratePosInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TCrossCollaboratePosInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TCrossCollaboratePosInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TCrossCollaboratePosInfo_descriptor_;
}

const TCrossCollaboratePosInfo& TCrossCollaboratePosInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fCrossCollaborate_2eproto();
  return *default_instance_;
}

TCrossCollaboratePosInfo* TCrossCollaboratePosInfo::default_instance_ = NULL;

TCrossCollaboratePosInfo* TCrossCollaboratePosInfo::New() const {
  return new TCrossCollaboratePosInfo;
}

void TCrossCollaboratePosInfo::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<TCrossCollaboratePosInfo*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(pos_, hid_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TCrossCollaboratePosInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TCrossCollaboratePosInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 Pos = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &pos_)));
          set_has_pos();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_Hid;
        break;
      }

      // optional uint32 Hid = 2;
      case 2: {
        if (tag == 16) {
         parse_Hid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &hid_)));
          set_has_hid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TCrossCollaboratePosInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TCrossCollaboratePosInfo)
  return false;
#undef DO_
}

void TCrossCollaboratePosInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TCrossCollaboratePosInfo)
  // optional uint32 Pos = 1;
  if (has_pos()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->pos(), output);
  }

  // optional uint32 Hid = 2;
  if (has_hid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->hid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TCrossCollaboratePosInfo)
}

::google::protobuf::uint8* TCrossCollaboratePosInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TCrossCollaboratePosInfo)
  // optional uint32 Pos = 1;
  if (has_pos()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->pos(), target);
  }

  // optional uint32 Hid = 2;
  if (has_hid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->hid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TCrossCollaboratePosInfo)
  return target;
}

int TCrossCollaboratePosInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 Pos = 1;
    if (has_pos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->pos());
    }

    // optional uint32 Hid = 2;
    if (has_hid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->hid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TCrossCollaboratePosInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TCrossCollaboratePosInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TCrossCollaboratePosInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TCrossCollaboratePosInfo::MergeFrom(const TCrossCollaboratePosInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_pos()) {
      set_pos(from.pos());
    }
    if (from.has_hid()) {
      set_hid(from.hid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TCrossCollaboratePosInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TCrossCollaboratePosInfo::CopyFrom(const TCrossCollaboratePosInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TCrossCollaboratePosInfo::IsInitialized() const {

  return true;
}

void TCrossCollaboratePosInfo::Swap(TCrossCollaboratePosInfo* other) {
  if (other != this) {
    std::swap(pos_, other->pos_);
    std::swap(hid_, other->hid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TCrossCollaboratePosInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TCrossCollaboratePosInfo_descriptor_;
  metadata.reflection = TCrossCollaboratePosInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TCrossCollaborateFormationInfo::kFormationIdFieldNumber;
const int TCrossCollaborateFormationInfo::kPosArrFieldNumber;
#endif  // !_MSC_VER

TCrossCollaborateFormationInfo::TCrossCollaborateFormationInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TCrossCollaborateFormationInfo)
}

void TCrossCollaborateFormationInfo::InitAsDefaultInstance() {
}

TCrossCollaborateFormationInfo::TCrossCollaborateFormationInfo(const TCrossCollaborateFormationInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TCrossCollaborateFormationInfo)
}

void TCrossCollaborateFormationInfo::SharedCtor() {
  _cached_size_ = 0;
  formationid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TCrossCollaborateFormationInfo::~TCrossCollaborateFormationInfo() {
  // @@protoc_insertion_point(destructor:pb.TCrossCollaborateFormationInfo)
  SharedDtor();
}

void TCrossCollaborateFormationInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TCrossCollaborateFormationInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TCrossCollaborateFormationInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TCrossCollaborateFormationInfo_descriptor_;
}

const TCrossCollaborateFormationInfo& TCrossCollaborateFormationInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fCrossCollaborate_2eproto();
  return *default_instance_;
}

TCrossCollaborateFormationInfo* TCrossCollaborateFormationInfo::default_instance_ = NULL;

TCrossCollaborateFormationInfo* TCrossCollaborateFormationInfo::New() const {
  return new TCrossCollaborateFormationInfo;
}

void TCrossCollaborateFormationInfo::Clear() {
  formationid_ = 0u;
  posarr_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TCrossCollaborateFormationInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TCrossCollaborateFormationInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 FormationId = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &formationid_)));
          set_has_formationid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_PosArr;
        break;
      }

      // repeated .pb.TCrossCollaboratePosInfo PosArr = 2;
      case 2: {
        if (tag == 18) {
         parse_PosArr:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_posarr()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_PosArr;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TCrossCollaborateFormationInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TCrossCollaborateFormationInfo)
  return false;
#undef DO_
}

void TCrossCollaborateFormationInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TCrossCollaborateFormationInfo)
  // optional uint32 FormationId = 1;
  if (has_formationid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->formationid(), output);
  }

  // repeated .pb.TCrossCollaboratePosInfo PosArr = 2;
  for (int i = 0; i < this->posarr_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->posarr(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TCrossCollaborateFormationInfo)
}

::google::protobuf::uint8* TCrossCollaborateFormationInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TCrossCollaborateFormationInfo)
  // optional uint32 FormationId = 1;
  if (has_formationid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->formationid(), target);
  }

  // repeated .pb.TCrossCollaboratePosInfo PosArr = 2;
  for (int i = 0; i < this->posarr_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->posarr(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TCrossCollaborateFormationInfo)
  return target;
}

int TCrossCollaborateFormationInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 FormationId = 1;
    if (has_formationid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->formationid());
    }

  }
  // repeated .pb.TCrossCollaboratePosInfo PosArr = 2;
  total_size += 1 * this->posarr_size();
  for (int i = 0; i < this->posarr_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->posarr(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TCrossCollaborateFormationInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TCrossCollaborateFormationInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TCrossCollaborateFormationInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TCrossCollaborateFormationInfo::MergeFrom(const TCrossCollaborateFormationInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  posarr_.MergeFrom(from.posarr_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_formationid()) {
      set_formationid(from.formationid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TCrossCollaborateFormationInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TCrossCollaborateFormationInfo::CopyFrom(const TCrossCollaborateFormationInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TCrossCollaborateFormationInfo::IsInitialized() const {

  return true;
}

void TCrossCollaborateFormationInfo::Swap(TCrossCollaborateFormationInfo* other) {
  if (other != this) {
    std::swap(formationid_, other->formationid_);
    posarr_.Swap(&other->posarr_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TCrossCollaborateFormationInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TCrossCollaborateFormationInfo_descriptor_;
  metadata.reflection = TCrossCollaborateFormationInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TCrossCollaborateEnemyFormation::kFormationIdFieldNumber;
const int TCrossCollaborateEnemyFormation::kUnitArrFieldNumber;
const int TCrossCollaborateEnemyFormation::kFightForceFieldNumber;
#endif  // !_MSC_VER

TCrossCollaborateEnemyFormation::TCrossCollaborateEnemyFormation()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TCrossCollaborateEnemyFormation)
}

void TCrossCollaborateEnemyFormation::InitAsDefaultInstance() {
}

TCrossCollaborateEnemyFormation::TCrossCollaborateEnemyFormation(const TCrossCollaborateEnemyFormation& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TCrossCollaborateEnemyFormation)
}

void TCrossCollaborateEnemyFormation::SharedCtor() {
  _cached_size_ = 0;
  formationid_ = 0u;
  fightforce_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TCrossCollaborateEnemyFormation::~TCrossCollaborateEnemyFormation() {
  // @@protoc_insertion_point(destructor:pb.TCrossCollaborateEnemyFormation)
  SharedDtor();
}

void TCrossCollaborateEnemyFormation::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TCrossCollaborateEnemyFormation::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TCrossCollaborateEnemyFormation::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TCrossCollaborateEnemyFormation_descriptor_;
}

const TCrossCollaborateEnemyFormation& TCrossCollaborateEnemyFormation::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fCrossCollaborate_2eproto();
  return *default_instance_;
}

TCrossCollaborateEnemyFormation* TCrossCollaborateEnemyFormation::default_instance_ = NULL;

TCrossCollaborateEnemyFormation* TCrossCollaborateEnemyFormation::New() const {
  return new TCrossCollaborateEnemyFormation;
}

void TCrossCollaborateEnemyFormation::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<TCrossCollaborateEnemyFormation*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(fightforce_, formationid_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  unitarr_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TCrossCollaborateEnemyFormation::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TCrossCollaborateEnemyFormation)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 FormationId = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &formationid_)));
          set_has_formationid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_UnitArr;
        break;
      }

      // repeated .pb.TUnitInfo UnitArr = 2;
      case 2: {
        if (tag == 18) {
         parse_UnitArr:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_unitarr()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_UnitArr;
        if (input->ExpectTag(24)) goto parse_FightForce;
        break;
      }

      // optional uint64 FightForce = 3;
      case 3: {
        if (tag == 24) {
         parse_FightForce:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &fightforce_)));
          set_has_fightforce();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TCrossCollaborateEnemyFormation)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TCrossCollaborateEnemyFormation)
  return false;
#undef DO_
}

void TCrossCollaborateEnemyFormation::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TCrossCollaborateEnemyFormation)
  // optional uint32 FormationId = 1;
  if (has_formationid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->formationid(), output);
  }

  // repeated .pb.TUnitInfo UnitArr = 2;
  for (int i = 0; i < this->unitarr_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->unitarr(i), output);
  }

  // optional uint64 FightForce = 3;
  if (has_fightforce()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->fightforce(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TCrossCollaborateEnemyFormation)
}

::google::protobuf::uint8* TCrossCollaborateEnemyFormation::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TCrossCollaborateEnemyFormation)
  // optional uint32 FormationId = 1;
  if (has_formationid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->formationid(), target);
  }

  // repeated .pb.TUnitInfo UnitArr = 2;
  for (int i = 0; i < this->unitarr_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->unitarr(i), target);
  }

  // optional uint64 FightForce = 3;
  if (has_fightforce()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->fightforce(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TCrossCollaborateEnemyFormation)
  return target;
}

int TCrossCollaborateEnemyFormation::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 FormationId = 1;
    if (has_formationid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->formationid());
    }

    // optional uint64 FightForce = 3;
    if (has_fightforce()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->fightforce());
    }

  }
  // repeated .pb.TUnitInfo UnitArr = 2;
  total_size += 1 * this->unitarr_size();
  for (int i = 0; i < this->unitarr_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->unitarr(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TCrossCollaborateEnemyFormation::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TCrossCollaborateEnemyFormation* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TCrossCollaborateEnemyFormation*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TCrossCollaborateEnemyFormation::MergeFrom(const TCrossCollaborateEnemyFormation& from) {
  GOOGLE_CHECK_NE(&from, this);
  unitarr_.MergeFrom(from.unitarr_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_formationid()) {
      set_formationid(from.formationid());
    }
    if (from.has_fightforce()) {
      set_fightforce(from.fightforce());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TCrossCollaborateEnemyFormation::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TCrossCollaborateEnemyFormation::CopyFrom(const TCrossCollaborateEnemyFormation& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TCrossCollaborateEnemyFormation::IsInitialized() const {

  if (!::google::protobuf::internal::AllAreInitialized(this->unitarr())) return false;
  return true;
}

void TCrossCollaborateEnemyFormation::Swap(TCrossCollaborateEnemyFormation* other) {
  if (other != this) {
    std::swap(formationid_, other->formationid_);
    unitarr_.Swap(&other->unitarr_);
    std::swap(fightforce_, other->fightforce_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TCrossCollaborateEnemyFormation::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TCrossCollaborateEnemyFormation_descriptor_;
  metadata.reflection = TCrossCollaborateEnemyFormation_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TCrossCollaborateInviteUserInfo::kUserInfoFieldNumber;
const int TCrossCollaborateInviteUserInfo::kTeamIdFieldNumber;
#endif  // !_MSC_VER

TCrossCollaborateInviteUserInfo::TCrossCollaborateInviteUserInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TCrossCollaborateInviteUserInfo)
}

void TCrossCollaborateInviteUserInfo::InitAsDefaultInstance() {
  userinfo_ = const_cast< ::pb::TUserSimpleInfoWithStatus*>(&::pb::TUserSimpleInfoWithStatus::default_instance());
}

TCrossCollaborateInviteUserInfo::TCrossCollaborateInviteUserInfo(const TCrossCollaborateInviteUserInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TCrossCollaborateInviteUserInfo)
}

void TCrossCollaborateInviteUserInfo::SharedCtor() {
  _cached_size_ = 0;
  userinfo_ = NULL;
  teamid_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TCrossCollaborateInviteUserInfo::~TCrossCollaborateInviteUserInfo() {
  // @@protoc_insertion_point(destructor:pb.TCrossCollaborateInviteUserInfo)
  SharedDtor();
}

void TCrossCollaborateInviteUserInfo::SharedDtor() {
  if (this != default_instance_) {
    delete userinfo_;
  }
}

void TCrossCollaborateInviteUserInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TCrossCollaborateInviteUserInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TCrossCollaborateInviteUserInfo_descriptor_;
}

const TCrossCollaborateInviteUserInfo& TCrossCollaborateInviteUserInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fCrossCollaborate_2eproto();
  return *default_instance_;
}

TCrossCollaborateInviteUserInfo* TCrossCollaborateInviteUserInfo::default_instance_ = NULL;

TCrossCollaborateInviteUserInfo* TCrossCollaborateInviteUserInfo::New() const {
  return new TCrossCollaborateInviteUserInfo;
}

void TCrossCollaborateInviteUserInfo::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    if (has_userinfo()) {
      if (userinfo_ != NULL) userinfo_->::pb::TUserSimpleInfoWithStatus::Clear();
    }
    teamid_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TCrossCollaborateInviteUserInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TCrossCollaborateInviteUserInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .pb.TUserSimpleInfoWithStatus UserInfo = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_userinfo()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_TeamId;
        break;
      }

      // optional uint64 TeamId = 2;
      case 2: {
        if (tag == 16) {
         parse_TeamId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &teamid_)));
          set_has_teamid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TCrossCollaborateInviteUserInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TCrossCollaborateInviteUserInfo)
  return false;
#undef DO_
}

void TCrossCollaborateInviteUserInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TCrossCollaborateInviteUserInfo)
  // optional .pb.TUserSimpleInfoWithStatus UserInfo = 1;
  if (has_userinfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->userinfo(), output);
  }

  // optional uint64 TeamId = 2;
  if (has_teamid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->teamid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TCrossCollaborateInviteUserInfo)
}

::google::protobuf::uint8* TCrossCollaborateInviteUserInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TCrossCollaborateInviteUserInfo)
  // optional .pb.TUserSimpleInfoWithStatus UserInfo = 1;
  if (has_userinfo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->userinfo(), target);
  }

  // optional uint64 TeamId = 2;
  if (has_teamid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->teamid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TCrossCollaborateInviteUserInfo)
  return target;
}

int TCrossCollaborateInviteUserInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .pb.TUserSimpleInfoWithStatus UserInfo = 1;
    if (has_userinfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->userinfo());
    }

    // optional uint64 TeamId = 2;
    if (has_teamid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->teamid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TCrossCollaborateInviteUserInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TCrossCollaborateInviteUserInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TCrossCollaborateInviteUserInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TCrossCollaborateInviteUserInfo::MergeFrom(const TCrossCollaborateInviteUserInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_userinfo()) {
      mutable_userinfo()->::pb::TUserSimpleInfoWithStatus::MergeFrom(from.userinfo());
    }
    if (from.has_teamid()) {
      set_teamid(from.teamid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TCrossCollaborateInviteUserInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TCrossCollaborateInviteUserInfo::CopyFrom(const TCrossCollaborateInviteUserInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TCrossCollaborateInviteUserInfo::IsInitialized() const {

  return true;
}

void TCrossCollaborateInviteUserInfo::Swap(TCrossCollaborateInviteUserInfo* other) {
  if (other != this) {
    std::swap(userinfo_, other->userinfo_);
    std::swap(teamid_, other->teamid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TCrossCollaborateInviteUserInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TCrossCollaborateInviteUserInfo_descriptor_;
  metadata.reflection = TCrossCollaborateInviteUserInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TCrossCollaborateUserInfo::kUserInfoFieldNumber;
const int TCrossCollaborateUserInfo::kOrderFieldNumber;
const int TCrossCollaborateUserInfo::kScoreFieldNumber;
const int TCrossCollaborateUserInfo::kTotalFightForceFieldNumber;
#endif  // !_MSC_VER

TCrossCollaborateUserInfo::TCrossCollaborateUserInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TCrossCollaborateUserInfo)
}

void TCrossCollaborateUserInfo::InitAsDefaultInstance() {
  userinfo_ = const_cast< ::pb::TUserSimpleInfo*>(&::pb::TUserSimpleInfo::default_instance());
}

TCrossCollaborateUserInfo::TCrossCollaborateUserInfo(const TCrossCollaborateUserInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TCrossCollaborateUserInfo)
}

void TCrossCollaborateUserInfo::SharedCtor() {
  _cached_size_ = 0;
  userinfo_ = NULL;
  order_ = 0u;
  score_ = 0u;
  totalfightforce_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TCrossCollaborateUserInfo::~TCrossCollaborateUserInfo() {
  // @@protoc_insertion_point(destructor:pb.TCrossCollaborateUserInfo)
  SharedDtor();
}

void TCrossCollaborateUserInfo::SharedDtor() {
  if (this != default_instance_) {
    delete userinfo_;
  }
}

void TCrossCollaborateUserInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TCrossCollaborateUserInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TCrossCollaborateUserInfo_descriptor_;
}

const TCrossCollaborateUserInfo& TCrossCollaborateUserInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fCrossCollaborate_2eproto();
  return *default_instance_;
}

TCrossCollaborateUserInfo* TCrossCollaborateUserInfo::default_instance_ = NULL;

TCrossCollaborateUserInfo* TCrossCollaborateUserInfo::New() const {
  return new TCrossCollaborateUserInfo;
}

void TCrossCollaborateUserInfo::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<TCrossCollaborateUserInfo*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 15) {
    ZR_(order_, totalfightforce_);
    if (has_userinfo()) {
      if (userinfo_ != NULL) userinfo_->::pb::TUserSimpleInfo::Clear();
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TCrossCollaborateUserInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TCrossCollaborateUserInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .pb.TUserSimpleInfo UserInfo = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_userinfo()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_Order;
        break;
      }

      // optional uint32 Order = 2;
      case 2: {
        if (tag == 16) {
         parse_Order:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &order_)));
          set_has_order();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_Score;
        break;
      }

      // optional uint32 Score = 3;
      case 3: {
        if (tag == 24) {
         parse_Score:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &score_)));
          set_has_score();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_TotalFightForce;
        break;
      }

      // optional uint64 TotalFightForce = 4;
      case 4: {
        if (tag == 32) {
         parse_TotalFightForce:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &totalfightforce_)));
          set_has_totalfightforce();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TCrossCollaborateUserInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TCrossCollaborateUserInfo)
  return false;
#undef DO_
}

void TCrossCollaborateUserInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TCrossCollaborateUserInfo)
  // optional .pb.TUserSimpleInfo UserInfo = 1;
  if (has_userinfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->userinfo(), output);
  }

  // optional uint32 Order = 2;
  if (has_order()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->order(), output);
  }

  // optional uint32 Score = 3;
  if (has_score()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->score(), output);
  }

  // optional uint64 TotalFightForce = 4;
  if (has_totalfightforce()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->totalfightforce(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TCrossCollaborateUserInfo)
}

::google::protobuf::uint8* TCrossCollaborateUserInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TCrossCollaborateUserInfo)
  // optional .pb.TUserSimpleInfo UserInfo = 1;
  if (has_userinfo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->userinfo(), target);
  }

  // optional uint32 Order = 2;
  if (has_order()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->order(), target);
  }

  // optional uint32 Score = 3;
  if (has_score()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->score(), target);
  }

  // optional uint64 TotalFightForce = 4;
  if (has_totalfightforce()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->totalfightforce(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TCrossCollaborateUserInfo)
  return target;
}

int TCrossCollaborateUserInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .pb.TUserSimpleInfo UserInfo = 1;
    if (has_userinfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->userinfo());
    }

    // optional uint32 Order = 2;
    if (has_order()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->order());
    }

    // optional uint32 Score = 3;
    if (has_score()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->score());
    }

    // optional uint64 TotalFightForce = 4;
    if (has_totalfightforce()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->totalfightforce());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TCrossCollaborateUserInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TCrossCollaborateUserInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TCrossCollaborateUserInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TCrossCollaborateUserInfo::MergeFrom(const TCrossCollaborateUserInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_userinfo()) {
      mutable_userinfo()->::pb::TUserSimpleInfo::MergeFrom(from.userinfo());
    }
    if (from.has_order()) {
      set_order(from.order());
    }
    if (from.has_score()) {
      set_score(from.score());
    }
    if (from.has_totalfightforce()) {
      set_totalfightforce(from.totalfightforce());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TCrossCollaborateUserInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TCrossCollaborateUserInfo::CopyFrom(const TCrossCollaborateUserInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TCrossCollaborateUserInfo::IsInitialized() const {

  return true;
}

void TCrossCollaborateUserInfo::Swap(TCrossCollaborateUserInfo* other) {
  if (other != this) {
    std::swap(userinfo_, other->userinfo_);
    std::swap(order_, other->order_);
    std::swap(score_, other->score_);
    std::swap(totalfightforce_, other->totalfightforce_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TCrossCollaborateUserInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TCrossCollaborateUserInfo_descriptor_;
  metadata.reflection = TCrossCollaborateUserInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TCrossCollaborateTeamInfo::kTeamIdFieldNumber;
const int TCrossCollaborateTeamInfo::kLeaderUidFieldNumber;
const int TCrossCollaborateTeamInfo::kNeedFightForceFieldNumber;
const int TCrossCollaborateTeamInfo::kTeamStatusFieldNumber;
const int TCrossCollaborateTeamInfo::kUserArrFieldNumber;
#endif  // !_MSC_VER

TCrossCollaborateTeamInfo::TCrossCollaborateTeamInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TCrossCollaborateTeamInfo)
}

void TCrossCollaborateTeamInfo::InitAsDefaultInstance() {
}

TCrossCollaborateTeamInfo::TCrossCollaborateTeamInfo(const TCrossCollaborateTeamInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TCrossCollaborateTeamInfo)
}

void TCrossCollaborateTeamInfo::SharedCtor() {
  _cached_size_ = 0;
  teamid_ = GOOGLE_ULONGLONG(0);
  leaderuid_ = GOOGLE_ULONGLONG(0);
  needfightforce_ = GOOGLE_ULONGLONG(0);
  teamstatus_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TCrossCollaborateTeamInfo::~TCrossCollaborateTeamInfo() {
  // @@protoc_insertion_point(destructor:pb.TCrossCollaborateTeamInfo)
  SharedDtor();
}

void TCrossCollaborateTeamInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TCrossCollaborateTeamInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TCrossCollaborateTeamInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TCrossCollaborateTeamInfo_descriptor_;
}

const TCrossCollaborateTeamInfo& TCrossCollaborateTeamInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fCrossCollaborate_2eproto();
  return *default_instance_;
}

TCrossCollaborateTeamInfo* TCrossCollaborateTeamInfo::default_instance_ = NULL;

TCrossCollaborateTeamInfo* TCrossCollaborateTeamInfo::New() const {
  return new TCrossCollaborateTeamInfo;
}

void TCrossCollaborateTeamInfo::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<TCrossCollaborateTeamInfo*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 15) {
    ZR_(teamid_, needfightforce_);
    teamstatus_ = 0;
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  userarr_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TCrossCollaborateTeamInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TCrossCollaborateTeamInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 TeamId = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &teamid_)));
          set_has_teamid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_LeaderUid;
        break;
      }

      // optional uint64 LeaderUid = 2;
      case 2: {
        if (tag == 16) {
         parse_LeaderUid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &leaderuid_)));
          set_has_leaderuid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_NeedFightForce;
        break;
      }

      // optional uint64 NeedFightForce = 3;
      case 3: {
        if (tag == 24) {
         parse_NeedFightForce:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &needfightforce_)));
          set_has_needfightforce();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_TeamStatus;
        break;
      }

      // optional .pb.ECrossCollaborateStatus TeamStatus = 4;
      case 4: {
        if (tag == 32) {
         parse_TeamStatus:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::pb::ECrossCollaborateStatus_IsValid(value)) {
            set_teamstatus(static_cast< ::pb::ECrossCollaborateStatus >(value));
          } else {
            mutable_unknown_fields()->AddVarint(4, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_UserArr;
        break;
      }

      // repeated .pb.TCrossCollaborateUserInfo UserArr = 5;
      case 5: {
        if (tag == 42) {
         parse_UserArr:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_userarr()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_UserArr;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TCrossCollaborateTeamInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TCrossCollaborateTeamInfo)
  return false;
#undef DO_
}

void TCrossCollaborateTeamInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TCrossCollaborateTeamInfo)
  // optional uint64 TeamId = 1;
  if (has_teamid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->teamid(), output);
  }

  // optional uint64 LeaderUid = 2;
  if (has_leaderuid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->leaderuid(), output);
  }

  // optional uint64 NeedFightForce = 3;
  if (has_needfightforce()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->needfightforce(), output);
  }

  // optional .pb.ECrossCollaborateStatus TeamStatus = 4;
  if (has_teamstatus()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->teamstatus(), output);
  }

  // repeated .pb.TCrossCollaborateUserInfo UserArr = 5;
  for (int i = 0; i < this->userarr_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->userarr(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TCrossCollaborateTeamInfo)
}

::google::protobuf::uint8* TCrossCollaborateTeamInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TCrossCollaborateTeamInfo)
  // optional uint64 TeamId = 1;
  if (has_teamid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->teamid(), target);
  }

  // optional uint64 LeaderUid = 2;
  if (has_leaderuid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->leaderuid(), target);
  }

  // optional uint64 NeedFightForce = 3;
  if (has_needfightforce()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->needfightforce(), target);
  }

  // optional .pb.ECrossCollaborateStatus TeamStatus = 4;
  if (has_teamstatus()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      4, this->teamstatus(), target);
  }

  // repeated .pb.TCrossCollaborateUserInfo UserArr = 5;
  for (int i = 0; i < this->userarr_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->userarr(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TCrossCollaborateTeamInfo)
  return target;
}

int TCrossCollaborateTeamInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 TeamId = 1;
    if (has_teamid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->teamid());
    }

    // optional uint64 LeaderUid = 2;
    if (has_leaderuid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->leaderuid());
    }

    // optional uint64 NeedFightForce = 3;
    if (has_needfightforce()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->needfightforce());
    }

    // optional .pb.ECrossCollaborateStatus TeamStatus = 4;
    if (has_teamstatus()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->teamstatus());
    }

  }
  // repeated .pb.TCrossCollaborateUserInfo UserArr = 5;
  total_size += 1 * this->userarr_size();
  for (int i = 0; i < this->userarr_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->userarr(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TCrossCollaborateTeamInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TCrossCollaborateTeamInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TCrossCollaborateTeamInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TCrossCollaborateTeamInfo::MergeFrom(const TCrossCollaborateTeamInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  userarr_.MergeFrom(from.userarr_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_teamid()) {
      set_teamid(from.teamid());
    }
    if (from.has_leaderuid()) {
      set_leaderuid(from.leaderuid());
    }
    if (from.has_needfightforce()) {
      set_needfightforce(from.needfightforce());
    }
    if (from.has_teamstatus()) {
      set_teamstatus(from.teamstatus());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TCrossCollaborateTeamInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TCrossCollaborateTeamInfo::CopyFrom(const TCrossCollaborateTeamInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TCrossCollaborateTeamInfo::IsInitialized() const {

  return true;
}

void TCrossCollaborateTeamInfo::Swap(TCrossCollaborateTeamInfo* other) {
  if (other != this) {
    std::swap(teamid_, other->teamid_);
    std::swap(leaderuid_, other->leaderuid_);
    std::swap(needfightforce_, other->needfightforce_);
    std::swap(teamstatus_, other->teamstatus_);
    userarr_.Swap(&other->userarr_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TCrossCollaborateTeamInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TCrossCollaborateTeamInfo_descriptor_;
  metadata.reflection = TCrossCollaborateTeamInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TCrossCollaborateUnitViewInfo::kHidFieldNumber;
const int TCrossCollaborateUnitViewInfo::kPosFieldNumber;
const int TCrossCollaborateUnitViewInfo::kLevelFieldNumber;
const int TCrossCollaborateUnitViewInfo::kStarFieldNumber;
const int TCrossCollaborateUnitViewInfo::kCurHpFieldNumber;
const int TCrossCollaborateUnitViewInfo::kMaxHpFieldNumber;
const int TCrossCollaborateUnitViewInfo::kDamageOutFieldNumber;
const int TCrossCollaborateUnitViewInfo::kDamageInFieldNumber;
const int TCrossCollaborateUnitViewInfo::kHtidFieldNumber;
const int TCrossCollaborateUnitViewInfo::kHealOutFieldNumber;
#endif  // !_MSC_VER

TCrossCollaborateUnitViewInfo::TCrossCollaborateUnitViewInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TCrossCollaborateUnitViewInfo)
}

void TCrossCollaborateUnitViewInfo::InitAsDefaultInstance() {
}

TCrossCollaborateUnitViewInfo::TCrossCollaborateUnitViewInfo(const TCrossCollaborateUnitViewInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TCrossCollaborateUnitViewInfo)
}

void TCrossCollaborateUnitViewInfo::SharedCtor() {
  _cached_size_ = 0;
  hid_ = 0u;
  pos_ = 0u;
  level_ = 0u;
  star_ = 0u;
  curhp_ = GOOGLE_ULONGLONG(0);
  maxhp_ = GOOGLE_ULONGLONG(0);
  damageout_ = GOOGLE_ULONGLONG(0);
  damagein_ = GOOGLE_ULONGLONG(0);
  htid_ = 0u;
  healout_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TCrossCollaborateUnitViewInfo::~TCrossCollaborateUnitViewInfo() {
  // @@protoc_insertion_point(destructor:pb.TCrossCollaborateUnitViewInfo)
  SharedDtor();
}

void TCrossCollaborateUnitViewInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TCrossCollaborateUnitViewInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TCrossCollaborateUnitViewInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TCrossCollaborateUnitViewInfo_descriptor_;
}

const TCrossCollaborateUnitViewInfo& TCrossCollaborateUnitViewInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fCrossCollaborate_2eproto();
  return *default_instance_;
}

TCrossCollaborateUnitViewInfo* TCrossCollaborateUnitViewInfo::default_instance_ = NULL;

TCrossCollaborateUnitViewInfo* TCrossCollaborateUnitViewInfo::New() const {
  return new TCrossCollaborateUnitViewInfo;
}

void TCrossCollaborateUnitViewInfo::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<TCrossCollaborateUnitViewInfo*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(hid_, damagein_);
  }
  ZR_(healout_, htid_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TCrossCollaborateUnitViewInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TCrossCollaborateUnitViewInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 Hid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &hid_)));
          set_has_hid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_Pos;
        break;
      }

      // required uint32 Pos = 2;
      case 2: {
        if (tag == 16) {
         parse_Pos:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &pos_)));
          set_has_pos();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_Level;
        break;
      }

      // required uint32 Level = 3;
      case 3: {
        if (tag == 24) {
         parse_Level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &level_)));
          set_has_level();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_Star;
        break;
      }

      // optional uint32 Star = 4;
      case 4: {
        if (tag == 32) {
         parse_Star:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &star_)));
          set_has_star();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_CurHp;
        break;
      }

      // optional uint64 CurHp = 5;
      case 5: {
        if (tag == 40) {
         parse_CurHp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &curhp_)));
          set_has_curhp();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_MaxHp;
        break;
      }

      // optional uint64 MaxHp = 6;
      case 6: {
        if (tag == 48) {
         parse_MaxHp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &maxhp_)));
          set_has_maxhp();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_DamageOut;
        break;
      }

      // optional uint64 DamageOut = 7;
      case 7: {
        if (tag == 56) {
         parse_DamageOut:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &damageout_)));
          set_has_damageout();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_DamageIn;
        break;
      }

      // optional uint64 DamageIn = 8;
      case 8: {
        if (tag == 64) {
         parse_DamageIn:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &damagein_)));
          set_has_damagein();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_Htid;
        break;
      }

      // optional uint32 Htid = 9;
      case 9: {
        if (tag == 72) {
         parse_Htid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &htid_)));
          set_has_htid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(80)) goto parse_HealOut;
        break;
      }

      // optional uint64 HealOut = 10;
      case 10: {
        if (tag == 80) {
         parse_HealOut:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &healout_)));
          set_has_healout();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TCrossCollaborateUnitViewInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TCrossCollaborateUnitViewInfo)
  return false;
#undef DO_
}

void TCrossCollaborateUnitViewInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TCrossCollaborateUnitViewInfo)
  // required uint32 Hid = 1;
  if (has_hid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->hid(), output);
  }

  // required uint32 Pos = 2;
  if (has_pos()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->pos(), output);
  }

  // required uint32 Level = 3;
  if (has_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->level(), output);
  }

  // optional uint32 Star = 4;
  if (has_star()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->star(), output);
  }

  // optional uint64 CurHp = 5;
  if (has_curhp()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(5, this->curhp(), output);
  }

  // optional uint64 MaxHp = 6;
  if (has_maxhp()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(6, this->maxhp(), output);
  }

  // optional uint64 DamageOut = 7;
  if (has_damageout()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(7, this->damageout(), output);
  }

  // optional uint64 DamageIn = 8;
  if (has_damagein()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(8, this->damagein(), output);
  }

  // optional uint32 Htid = 9;
  if (has_htid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->htid(), output);
  }

  // optional uint64 HealOut = 10;
  if (has_healout()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(10, this->healout(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TCrossCollaborateUnitViewInfo)
}

::google::protobuf::uint8* TCrossCollaborateUnitViewInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TCrossCollaborateUnitViewInfo)
  // required uint32 Hid = 1;
  if (has_hid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->hid(), target);
  }

  // required uint32 Pos = 2;
  if (has_pos()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->pos(), target);
  }

  // required uint32 Level = 3;
  if (has_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->level(), target);
  }

  // optional uint32 Star = 4;
  if (has_star()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->star(), target);
  }

  // optional uint64 CurHp = 5;
  if (has_curhp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(5, this->curhp(), target);
  }

  // optional uint64 MaxHp = 6;
  if (has_maxhp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(6, this->maxhp(), target);
  }

  // optional uint64 DamageOut = 7;
  if (has_damageout()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(7, this->damageout(), target);
  }

  // optional uint64 DamageIn = 8;
  if (has_damagein()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(8, this->damagein(), target);
  }

  // optional uint32 Htid = 9;
  if (has_htid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->htid(), target);
  }

  // optional uint64 HealOut = 10;
  if (has_healout()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(10, this->healout(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TCrossCollaborateUnitViewInfo)
  return target;
}

int TCrossCollaborateUnitViewInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 Hid = 1;
    if (has_hid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->hid());
    }

    // required uint32 Pos = 2;
    if (has_pos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->pos());
    }

    // required uint32 Level = 3;
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->level());
    }

    // optional uint32 Star = 4;
    if (has_star()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->star());
    }

    // optional uint64 CurHp = 5;
    if (has_curhp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->curhp());
    }

    // optional uint64 MaxHp = 6;
    if (has_maxhp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->maxhp());
    }

    // optional uint64 DamageOut = 7;
    if (has_damageout()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->damageout());
    }

    // optional uint64 DamageIn = 8;
    if (has_damagein()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->damagein());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional uint32 Htid = 9;
    if (has_htid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->htid());
    }

    // optional uint64 HealOut = 10;
    if (has_healout()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->healout());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TCrossCollaborateUnitViewInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TCrossCollaborateUnitViewInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TCrossCollaborateUnitViewInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TCrossCollaborateUnitViewInfo::MergeFrom(const TCrossCollaborateUnitViewInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_hid()) {
      set_hid(from.hid());
    }
    if (from.has_pos()) {
      set_pos(from.pos());
    }
    if (from.has_level()) {
      set_level(from.level());
    }
    if (from.has_star()) {
      set_star(from.star());
    }
    if (from.has_curhp()) {
      set_curhp(from.curhp());
    }
    if (from.has_maxhp()) {
      set_maxhp(from.maxhp());
    }
    if (from.has_damageout()) {
      set_damageout(from.damageout());
    }
    if (from.has_damagein()) {
      set_damagein(from.damagein());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_htid()) {
      set_htid(from.htid());
    }
    if (from.has_healout()) {
      set_healout(from.healout());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TCrossCollaborateUnitViewInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TCrossCollaborateUnitViewInfo::CopyFrom(const TCrossCollaborateUnitViewInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TCrossCollaborateUnitViewInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void TCrossCollaborateUnitViewInfo::Swap(TCrossCollaborateUnitViewInfo* other) {
  if (other != this) {
    std::swap(hid_, other->hid_);
    std::swap(pos_, other->pos_);
    std::swap(level_, other->level_);
    std::swap(star_, other->star_);
    std::swap(curhp_, other->curhp_);
    std::swap(maxhp_, other->maxhp_);
    std::swap(damageout_, other->damageout_);
    std::swap(damagein_, other->damagein_);
    std::swap(htid_, other->htid_);
    std::swap(healout_, other->healout_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TCrossCollaborateUnitViewInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TCrossCollaborateUnitViewInfo_descriptor_;
  metadata.reflection = TCrossCollaborateUnitViewInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TCrossCollaborateArmyViewInfo::kUnitArrFieldNumber;
#endif  // !_MSC_VER

TCrossCollaborateArmyViewInfo::TCrossCollaborateArmyViewInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TCrossCollaborateArmyViewInfo)
}

void TCrossCollaborateArmyViewInfo::InitAsDefaultInstance() {
}

TCrossCollaborateArmyViewInfo::TCrossCollaborateArmyViewInfo(const TCrossCollaborateArmyViewInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TCrossCollaborateArmyViewInfo)
}

void TCrossCollaborateArmyViewInfo::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TCrossCollaborateArmyViewInfo::~TCrossCollaborateArmyViewInfo() {
  // @@protoc_insertion_point(destructor:pb.TCrossCollaborateArmyViewInfo)
  SharedDtor();
}

void TCrossCollaborateArmyViewInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TCrossCollaborateArmyViewInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TCrossCollaborateArmyViewInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TCrossCollaborateArmyViewInfo_descriptor_;
}

const TCrossCollaborateArmyViewInfo& TCrossCollaborateArmyViewInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fCrossCollaborate_2eproto();
  return *default_instance_;
}

TCrossCollaborateArmyViewInfo* TCrossCollaborateArmyViewInfo::default_instance_ = NULL;

TCrossCollaborateArmyViewInfo* TCrossCollaborateArmyViewInfo::New() const {
  return new TCrossCollaborateArmyViewInfo;
}

void TCrossCollaborateArmyViewInfo::Clear() {
  unitarr_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TCrossCollaborateArmyViewInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TCrossCollaborateArmyViewInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .pb.TCrossCollaborateUnitViewInfo UnitArr = 1;
      case 1: {
        if (tag == 10) {
         parse_UnitArr:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_unitarr()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_UnitArr;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TCrossCollaborateArmyViewInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TCrossCollaborateArmyViewInfo)
  return false;
#undef DO_
}

void TCrossCollaborateArmyViewInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TCrossCollaborateArmyViewInfo)
  // repeated .pb.TCrossCollaborateUnitViewInfo UnitArr = 1;
  for (int i = 0; i < this->unitarr_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->unitarr(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TCrossCollaborateArmyViewInfo)
}

::google::protobuf::uint8* TCrossCollaborateArmyViewInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TCrossCollaborateArmyViewInfo)
  // repeated .pb.TCrossCollaborateUnitViewInfo UnitArr = 1;
  for (int i = 0; i < this->unitarr_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->unitarr(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TCrossCollaborateArmyViewInfo)
  return target;
}

int TCrossCollaborateArmyViewInfo::ByteSize() const {
  int total_size = 0;

  // repeated .pb.TCrossCollaborateUnitViewInfo UnitArr = 1;
  total_size += 1 * this->unitarr_size();
  for (int i = 0; i < this->unitarr_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->unitarr(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TCrossCollaborateArmyViewInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TCrossCollaborateArmyViewInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TCrossCollaborateArmyViewInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TCrossCollaborateArmyViewInfo::MergeFrom(const TCrossCollaborateArmyViewInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  unitarr_.MergeFrom(from.unitarr_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TCrossCollaborateArmyViewInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TCrossCollaborateArmyViewInfo::CopyFrom(const TCrossCollaborateArmyViewInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TCrossCollaborateArmyViewInfo::IsInitialized() const {

  if (!::google::protobuf::internal::AllAreInitialized(this->unitarr())) return false;
  return true;
}

void TCrossCollaborateArmyViewInfo::Swap(TCrossCollaborateArmyViewInfo* other) {
  if (other != this) {
    unitarr_.Swap(&other->unitarr_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TCrossCollaborateArmyViewInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TCrossCollaborateArmyViewInfo_descriptor_;
  metadata.reflection = TCrossCollaborateArmyViewInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TCrossCollaborateRecordInfo::kFormationIdFieldNumber;
const int TCrossCollaborateRecordInfo::kRecordIdFieldNumber;
const int TCrossCollaborateRecordInfo::kIsWinFieldNumber;
const int TCrossCollaborateRecordInfo::kAttackArmyArrFieldNumber;
const int TCrossCollaborateRecordInfo::kDefendArmyArrFieldNumber;
#endif  // !_MSC_VER

TCrossCollaborateRecordInfo::TCrossCollaborateRecordInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TCrossCollaborateRecordInfo)
}

void TCrossCollaborateRecordInfo::InitAsDefaultInstance() {
}

TCrossCollaborateRecordInfo::TCrossCollaborateRecordInfo(const TCrossCollaborateRecordInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TCrossCollaborateRecordInfo)
}

void TCrossCollaborateRecordInfo::SharedCtor() {
  _cached_size_ = 0;
  formationid_ = 0u;
  recordid_ = GOOGLE_ULONGLONG(0);
  iswin_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TCrossCollaborateRecordInfo::~TCrossCollaborateRecordInfo() {
  // @@protoc_insertion_point(destructor:pb.TCrossCollaborateRecordInfo)
  SharedDtor();
}

void TCrossCollaborateRecordInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TCrossCollaborateRecordInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TCrossCollaborateRecordInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TCrossCollaborateRecordInfo_descriptor_;
}

const TCrossCollaborateRecordInfo& TCrossCollaborateRecordInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fCrossCollaborate_2eproto();
  return *default_instance_;
}

TCrossCollaborateRecordInfo* TCrossCollaborateRecordInfo::default_instance_ = NULL;

TCrossCollaborateRecordInfo* TCrossCollaborateRecordInfo::New() const {
  return new TCrossCollaborateRecordInfo;
}

void TCrossCollaborateRecordInfo::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<TCrossCollaborateRecordInfo*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(recordid_, iswin_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  attackarmyarr_.Clear();
  defendarmyarr_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TCrossCollaborateRecordInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TCrossCollaborateRecordInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 FormationId = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &formationid_)));
          set_has_formationid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_RecordId;
        break;
      }

      // optional uint64 RecordId = 2;
      case 2: {
        if (tag == 16) {
         parse_RecordId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &recordid_)));
          set_has_recordid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_IsWin;
        break;
      }

      // optional bool IsWin = 3;
      case 3: {
        if (tag == 24) {
         parse_IsWin:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &iswin_)));
          set_has_iswin();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_AttackArmyArr;
        break;
      }

      // repeated .pb.TCrossCollaborateArmyViewInfo AttackArmyArr = 4;
      case 4: {
        if (tag == 34) {
         parse_AttackArmyArr:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_attackarmyarr()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_AttackArmyArr;
        if (input->ExpectTag(42)) goto parse_DefendArmyArr;
        break;
      }

      // repeated .pb.TCrossCollaborateArmyViewInfo DefendArmyArr = 5;
      case 5: {
        if (tag == 42) {
         parse_DefendArmyArr:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_defendarmyarr()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_DefendArmyArr;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TCrossCollaborateRecordInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TCrossCollaborateRecordInfo)
  return false;
#undef DO_
}

void TCrossCollaborateRecordInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TCrossCollaborateRecordInfo)
  // optional uint32 FormationId = 1;
  if (has_formationid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->formationid(), output);
  }

  // optional uint64 RecordId = 2;
  if (has_recordid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->recordid(), output);
  }

  // optional bool IsWin = 3;
  if (has_iswin()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->iswin(), output);
  }

  // repeated .pb.TCrossCollaborateArmyViewInfo AttackArmyArr = 4;
  for (int i = 0; i < this->attackarmyarr_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->attackarmyarr(i), output);
  }

  // repeated .pb.TCrossCollaborateArmyViewInfo DefendArmyArr = 5;
  for (int i = 0; i < this->defendarmyarr_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->defendarmyarr(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TCrossCollaborateRecordInfo)
}

::google::protobuf::uint8* TCrossCollaborateRecordInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TCrossCollaborateRecordInfo)
  // optional uint32 FormationId = 1;
  if (has_formationid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->formationid(), target);
  }

  // optional uint64 RecordId = 2;
  if (has_recordid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->recordid(), target);
  }

  // optional bool IsWin = 3;
  if (has_iswin()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->iswin(), target);
  }

  // repeated .pb.TCrossCollaborateArmyViewInfo AttackArmyArr = 4;
  for (int i = 0; i < this->attackarmyarr_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->attackarmyarr(i), target);
  }

  // repeated .pb.TCrossCollaborateArmyViewInfo DefendArmyArr = 5;
  for (int i = 0; i < this->defendarmyarr_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->defendarmyarr(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TCrossCollaborateRecordInfo)
  return target;
}

int TCrossCollaborateRecordInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 FormationId = 1;
    if (has_formationid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->formationid());
    }

    // optional uint64 RecordId = 2;
    if (has_recordid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->recordid());
    }

    // optional bool IsWin = 3;
    if (has_iswin()) {
      total_size += 1 + 1;
    }

  }
  // repeated .pb.TCrossCollaborateArmyViewInfo AttackArmyArr = 4;
  total_size += 1 * this->attackarmyarr_size();
  for (int i = 0; i < this->attackarmyarr_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->attackarmyarr(i));
  }

  // repeated .pb.TCrossCollaborateArmyViewInfo DefendArmyArr = 5;
  total_size += 1 * this->defendarmyarr_size();
  for (int i = 0; i < this->defendarmyarr_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->defendarmyarr(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TCrossCollaborateRecordInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TCrossCollaborateRecordInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TCrossCollaborateRecordInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TCrossCollaborateRecordInfo::MergeFrom(const TCrossCollaborateRecordInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  attackarmyarr_.MergeFrom(from.attackarmyarr_);
  defendarmyarr_.MergeFrom(from.defendarmyarr_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_formationid()) {
      set_formationid(from.formationid());
    }
    if (from.has_recordid()) {
      set_recordid(from.recordid());
    }
    if (from.has_iswin()) {
      set_iswin(from.iswin());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TCrossCollaborateRecordInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TCrossCollaborateRecordInfo::CopyFrom(const TCrossCollaborateRecordInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TCrossCollaborateRecordInfo::IsInitialized() const {

  if (!::google::protobuf::internal::AllAreInitialized(this->attackarmyarr())) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->defendarmyarr())) return false;
  return true;
}

void TCrossCollaborateRecordInfo::Swap(TCrossCollaborateRecordInfo* other) {
  if (other != this) {
    std::swap(formationid_, other->formationid_);
    std::swap(recordid_, other->recordid_);
    std::swap(iswin_, other->iswin_);
    attackarmyarr_.Swap(&other->attackarmyarr_);
    defendarmyarr_.Swap(&other->defendarmyarr_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TCrossCollaborateRecordInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TCrossCollaborateRecordInfo_descriptor_;
  metadata.reflection = TCrossCollaborateRecordInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TCrossCollaborateBattleRecord::kAttackUserInfoFieldNumber;
const int TCrossCollaborateBattleRecord::kDefendUserInfoFieldNumber;
const int TCrossCollaborateBattleRecord::kAttackContinueWinFieldNumber;
const int TCrossCollaborateBattleRecord::kAttackScoreBeforeFieldNumber;
const int TCrossCollaborateBattleRecord::kAttackScoreAfterFieldNumber;
const int TCrossCollaborateBattleRecord::kDefendScoreBeforeFieldNumber;
const int TCrossCollaborateBattleRecord::kDefendScoreAfterFieldNumber;
const int TCrossCollaborateBattleRecord::kRecordTimeFieldNumber;
const int TCrossCollaborateBattleRecord::kRecordArrFieldNumber;
#endif  // !_MSC_VER

TCrossCollaborateBattleRecord::TCrossCollaborateBattleRecord()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TCrossCollaborateBattleRecord)
}

void TCrossCollaborateBattleRecord::InitAsDefaultInstance() {
  attackuserinfo_ = const_cast< ::pb::TUserSimpleInfo*>(&::pb::TUserSimpleInfo::default_instance());
  defenduserinfo_ = const_cast< ::pb::TUserSimpleInfo*>(&::pb::TUserSimpleInfo::default_instance());
}

TCrossCollaborateBattleRecord::TCrossCollaborateBattleRecord(const TCrossCollaborateBattleRecord& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TCrossCollaborateBattleRecord)
}

void TCrossCollaborateBattleRecord::SharedCtor() {
  _cached_size_ = 0;
  attackuserinfo_ = NULL;
  defenduserinfo_ = NULL;
  attackcontinuewin_ = 0u;
  attackscorebefore_ = 0u;
  attackscoreafter_ = 0u;
  defendscorebefore_ = 0u;
  defendscoreafter_ = 0u;
  recordtime_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TCrossCollaborateBattleRecord::~TCrossCollaborateBattleRecord() {
  // @@protoc_insertion_point(destructor:pb.TCrossCollaborateBattleRecord)
  SharedDtor();
}

void TCrossCollaborateBattleRecord::SharedDtor() {
  if (this != default_instance_) {
    delete attackuserinfo_;
    delete defenduserinfo_;
  }
}

void TCrossCollaborateBattleRecord::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TCrossCollaborateBattleRecord::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TCrossCollaborateBattleRecord_descriptor_;
}

const TCrossCollaborateBattleRecord& TCrossCollaborateBattleRecord::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fCrossCollaborate_2eproto();
  return *default_instance_;
}

TCrossCollaborateBattleRecord* TCrossCollaborateBattleRecord::default_instance_ = NULL;

TCrossCollaborateBattleRecord* TCrossCollaborateBattleRecord::New() const {
  return new TCrossCollaborateBattleRecord;
}

void TCrossCollaborateBattleRecord::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<TCrossCollaborateBattleRecord*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(attackcontinuewin_, recordtime_);
    if (has_attackuserinfo()) {
      if (attackuserinfo_ != NULL) attackuserinfo_->::pb::TUserSimpleInfo::Clear();
    }
    if (has_defenduserinfo()) {
      if (defenduserinfo_ != NULL) defenduserinfo_->::pb::TUserSimpleInfo::Clear();
    }
    defendscoreafter_ = 0u;
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  recordarr_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TCrossCollaborateBattleRecord::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TCrossCollaborateBattleRecord)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .pb.TUserSimpleInfo AttackUserInfo = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_attackuserinfo()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_DefendUserInfo;
        break;
      }

      // optional .pb.TUserSimpleInfo DefendUserInfo = 2;
      case 2: {
        if (tag == 18) {
         parse_DefendUserInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_defenduserinfo()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_AttackContinueWin;
        break;
      }

      // optional uint32 AttackContinueWin = 3;
      case 3: {
        if (tag == 24) {
         parse_AttackContinueWin:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &attackcontinuewin_)));
          set_has_attackcontinuewin();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_AttackScoreBefore;
        break;
      }

      // optional uint32 AttackScoreBefore = 4;
      case 4: {
        if (tag == 32) {
         parse_AttackScoreBefore:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &attackscorebefore_)));
          set_has_attackscorebefore();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_AttackScoreAfter;
        break;
      }

      // optional uint32 AttackScoreAfter = 5;
      case 5: {
        if (tag == 40) {
         parse_AttackScoreAfter:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &attackscoreafter_)));
          set_has_attackscoreafter();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_DefendScoreBefore;
        break;
      }

      // optional uint32 DefendScoreBefore = 6;
      case 6: {
        if (tag == 48) {
         parse_DefendScoreBefore:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &defendscorebefore_)));
          set_has_defendscorebefore();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_DefendScoreAfter;
        break;
      }

      // optional uint32 DefendScoreAfter = 7;
      case 7: {
        if (tag == 56) {
         parse_DefendScoreAfter:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &defendscoreafter_)));
          set_has_defendscoreafter();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_RecordTime;
        break;
      }

      // optional uint64 RecordTime = 8;
      case 8: {
        if (tag == 64) {
         parse_RecordTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &recordtime_)));
          set_has_recordtime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(74)) goto parse_RecordArr;
        break;
      }

      // repeated .pb.TCrossCollaborateRecordInfo RecordArr = 9;
      case 9: {
        if (tag == 74) {
         parse_RecordArr:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_recordarr()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(74)) goto parse_RecordArr;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TCrossCollaborateBattleRecord)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TCrossCollaborateBattleRecord)
  return false;
#undef DO_
}

void TCrossCollaborateBattleRecord::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TCrossCollaborateBattleRecord)
  // optional .pb.TUserSimpleInfo AttackUserInfo = 1;
  if (has_attackuserinfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->attackuserinfo(), output);
  }

  // optional .pb.TUserSimpleInfo DefendUserInfo = 2;
  if (has_defenduserinfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->defenduserinfo(), output);
  }

  // optional uint32 AttackContinueWin = 3;
  if (has_attackcontinuewin()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->attackcontinuewin(), output);
  }

  // optional uint32 AttackScoreBefore = 4;
  if (has_attackscorebefore()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->attackscorebefore(), output);
  }

  // optional uint32 AttackScoreAfter = 5;
  if (has_attackscoreafter()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->attackscoreafter(), output);
  }

  // optional uint32 DefendScoreBefore = 6;
  if (has_defendscorebefore()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->defendscorebefore(), output);
  }

  // optional uint32 DefendScoreAfter = 7;
  if (has_defendscoreafter()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->defendscoreafter(), output);
  }

  // optional uint64 RecordTime = 8;
  if (has_recordtime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(8, this->recordtime(), output);
  }

  // repeated .pb.TCrossCollaborateRecordInfo RecordArr = 9;
  for (int i = 0; i < this->recordarr_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, this->recordarr(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TCrossCollaborateBattleRecord)
}

::google::protobuf::uint8* TCrossCollaborateBattleRecord::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TCrossCollaborateBattleRecord)
  // optional .pb.TUserSimpleInfo AttackUserInfo = 1;
  if (has_attackuserinfo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->attackuserinfo(), target);
  }

  // optional .pb.TUserSimpleInfo DefendUserInfo = 2;
  if (has_defenduserinfo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->defenduserinfo(), target);
  }

  // optional uint32 AttackContinueWin = 3;
  if (has_attackcontinuewin()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->attackcontinuewin(), target);
  }

  // optional uint32 AttackScoreBefore = 4;
  if (has_attackscorebefore()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->attackscorebefore(), target);
  }

  // optional uint32 AttackScoreAfter = 5;
  if (has_attackscoreafter()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->attackscoreafter(), target);
  }

  // optional uint32 DefendScoreBefore = 6;
  if (has_defendscorebefore()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->defendscorebefore(), target);
  }

  // optional uint32 DefendScoreAfter = 7;
  if (has_defendscoreafter()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->defendscoreafter(), target);
  }

  // optional uint64 RecordTime = 8;
  if (has_recordtime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(8, this->recordtime(), target);
  }

  // repeated .pb.TCrossCollaborateRecordInfo RecordArr = 9;
  for (int i = 0; i < this->recordarr_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        9, this->recordarr(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TCrossCollaborateBattleRecord)
  return target;
}

int TCrossCollaborateBattleRecord::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .pb.TUserSimpleInfo AttackUserInfo = 1;
    if (has_attackuserinfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->attackuserinfo());
    }

    // optional .pb.TUserSimpleInfo DefendUserInfo = 2;
    if (has_defenduserinfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->defenduserinfo());
    }

    // optional uint32 AttackContinueWin = 3;
    if (has_attackcontinuewin()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->attackcontinuewin());
    }

    // optional uint32 AttackScoreBefore = 4;
    if (has_attackscorebefore()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->attackscorebefore());
    }

    // optional uint32 AttackScoreAfter = 5;
    if (has_attackscoreafter()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->attackscoreafter());
    }

    // optional uint32 DefendScoreBefore = 6;
    if (has_defendscorebefore()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->defendscorebefore());
    }

    // optional uint32 DefendScoreAfter = 7;
    if (has_defendscoreafter()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->defendscoreafter());
    }

    // optional uint64 RecordTime = 8;
    if (has_recordtime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->recordtime());
    }

  }
  // repeated .pb.TCrossCollaborateRecordInfo RecordArr = 9;
  total_size += 1 * this->recordarr_size();
  for (int i = 0; i < this->recordarr_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->recordarr(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TCrossCollaborateBattleRecord::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TCrossCollaborateBattleRecord* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TCrossCollaborateBattleRecord*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TCrossCollaborateBattleRecord::MergeFrom(const TCrossCollaborateBattleRecord& from) {
  GOOGLE_CHECK_NE(&from, this);
  recordarr_.MergeFrom(from.recordarr_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_attackuserinfo()) {
      mutable_attackuserinfo()->::pb::TUserSimpleInfo::MergeFrom(from.attackuserinfo());
    }
    if (from.has_defenduserinfo()) {
      mutable_defenduserinfo()->::pb::TUserSimpleInfo::MergeFrom(from.defenduserinfo());
    }
    if (from.has_attackcontinuewin()) {
      set_attackcontinuewin(from.attackcontinuewin());
    }
    if (from.has_attackscorebefore()) {
      set_attackscorebefore(from.attackscorebefore());
    }
    if (from.has_attackscoreafter()) {
      set_attackscoreafter(from.attackscoreafter());
    }
    if (from.has_defendscorebefore()) {
      set_defendscorebefore(from.defendscorebefore());
    }
    if (from.has_defendscoreafter()) {
      set_defendscoreafter(from.defendscoreafter());
    }
    if (from.has_recordtime()) {
      set_recordtime(from.recordtime());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TCrossCollaborateBattleRecord::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TCrossCollaborateBattleRecord::CopyFrom(const TCrossCollaborateBattleRecord& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TCrossCollaborateBattleRecord::IsInitialized() const {

  if (!::google::protobuf::internal::AllAreInitialized(this->recordarr())) return false;
  return true;
}

void TCrossCollaborateBattleRecord::Swap(TCrossCollaborateBattleRecord* other) {
  if (other != this) {
    std::swap(attackuserinfo_, other->attackuserinfo_);
    std::swap(defenduserinfo_, other->defenduserinfo_);
    std::swap(attackcontinuewin_, other->attackcontinuewin_);
    std::swap(attackscorebefore_, other->attackscorebefore_);
    std::swap(attackscoreafter_, other->attackscoreafter_);
    std::swap(defendscorebefore_, other->defendscorebefore_);
    std::swap(defendscoreafter_, other->defendscoreafter_);
    std::swap(recordtime_, other->recordtime_);
    recordarr_.Swap(&other->recordarr_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TCrossCollaborateBattleRecord::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TCrossCollaborateBattleRecord_descriptor_;
  metadata.reflection = TCrossCollaborateBattleRecord_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TCrossCollaborateSimpleRecordInfo::kUserInfoFieldNumber;
const int TCrossCollaborateSimpleRecordInfo::kWinNumFieldNumber;
#endif  // !_MSC_VER

TCrossCollaborateSimpleRecordInfo::TCrossCollaborateSimpleRecordInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TCrossCollaborateSimpleRecordInfo)
}

void TCrossCollaborateSimpleRecordInfo::InitAsDefaultInstance() {
  userinfo_ = const_cast< ::pb::TUserSimpleInfo*>(&::pb::TUserSimpleInfo::default_instance());
}

TCrossCollaborateSimpleRecordInfo::TCrossCollaborateSimpleRecordInfo(const TCrossCollaborateSimpleRecordInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TCrossCollaborateSimpleRecordInfo)
}

void TCrossCollaborateSimpleRecordInfo::SharedCtor() {
  _cached_size_ = 0;
  userinfo_ = NULL;
  winnum_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TCrossCollaborateSimpleRecordInfo::~TCrossCollaborateSimpleRecordInfo() {
  // @@protoc_insertion_point(destructor:pb.TCrossCollaborateSimpleRecordInfo)
  SharedDtor();
}

void TCrossCollaborateSimpleRecordInfo::SharedDtor() {
  if (this != default_instance_) {
    delete userinfo_;
  }
}

void TCrossCollaborateSimpleRecordInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TCrossCollaborateSimpleRecordInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TCrossCollaborateSimpleRecordInfo_descriptor_;
}

const TCrossCollaborateSimpleRecordInfo& TCrossCollaborateSimpleRecordInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fCrossCollaborate_2eproto();
  return *default_instance_;
}

TCrossCollaborateSimpleRecordInfo* TCrossCollaborateSimpleRecordInfo::default_instance_ = NULL;

TCrossCollaborateSimpleRecordInfo* TCrossCollaborateSimpleRecordInfo::New() const {
  return new TCrossCollaborateSimpleRecordInfo;
}

void TCrossCollaborateSimpleRecordInfo::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    if (has_userinfo()) {
      if (userinfo_ != NULL) userinfo_->::pb::TUserSimpleInfo::Clear();
    }
    winnum_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TCrossCollaborateSimpleRecordInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TCrossCollaborateSimpleRecordInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .pb.TUserSimpleInfo UserInfo = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_userinfo()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_WinNum;
        break;
      }

      // optional uint32 WinNum = 2;
      case 2: {
        if (tag == 16) {
         parse_WinNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &winnum_)));
          set_has_winnum();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TCrossCollaborateSimpleRecordInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TCrossCollaborateSimpleRecordInfo)
  return false;
#undef DO_
}

void TCrossCollaborateSimpleRecordInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TCrossCollaborateSimpleRecordInfo)
  // optional .pb.TUserSimpleInfo UserInfo = 1;
  if (has_userinfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->userinfo(), output);
  }

  // optional uint32 WinNum = 2;
  if (has_winnum()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->winnum(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TCrossCollaborateSimpleRecordInfo)
}

::google::protobuf::uint8* TCrossCollaborateSimpleRecordInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TCrossCollaborateSimpleRecordInfo)
  // optional .pb.TUserSimpleInfo UserInfo = 1;
  if (has_userinfo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->userinfo(), target);
  }

  // optional uint32 WinNum = 2;
  if (has_winnum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->winnum(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TCrossCollaborateSimpleRecordInfo)
  return target;
}

int TCrossCollaborateSimpleRecordInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .pb.TUserSimpleInfo UserInfo = 1;
    if (has_userinfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->userinfo());
    }

    // optional uint32 WinNum = 2;
    if (has_winnum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->winnum());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TCrossCollaborateSimpleRecordInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TCrossCollaborateSimpleRecordInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TCrossCollaborateSimpleRecordInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TCrossCollaborateSimpleRecordInfo::MergeFrom(const TCrossCollaborateSimpleRecordInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_userinfo()) {
      mutable_userinfo()->::pb::TUserSimpleInfo::MergeFrom(from.userinfo());
    }
    if (from.has_winnum()) {
      set_winnum(from.winnum());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TCrossCollaborateSimpleRecordInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TCrossCollaborateSimpleRecordInfo::CopyFrom(const TCrossCollaborateSimpleRecordInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TCrossCollaborateSimpleRecordInfo::IsInitialized() const {

  return true;
}

void TCrossCollaborateSimpleRecordInfo::Swap(TCrossCollaborateSimpleRecordInfo* other) {
  if (other != this) {
    std::swap(userinfo_, other->userinfo_);
    std::swap(winnum_, other->winnum_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TCrossCollaborateSimpleRecordInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TCrossCollaborateSimpleRecordInfo_descriptor_;
  metadata.reflection = TCrossCollaborateSimpleRecordInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TCrossCollaborateSimpleBattleRecord::kAttackUserInfoArrFieldNumber;
const int TCrossCollaborateSimpleBattleRecord::kDefendUserInfoArrFieldNumber;
const int TCrossCollaborateSimpleBattleRecord::kRecordTimeFieldNumber;
const int TCrossCollaborateSimpleBattleRecord::kTeamIdFieldNumber;
const int TCrossCollaborateSimpleBattleRecord::kRoundFieldNumber;
#endif  // !_MSC_VER

TCrossCollaborateSimpleBattleRecord::TCrossCollaborateSimpleBattleRecord()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TCrossCollaborateSimpleBattleRecord)
}

void TCrossCollaborateSimpleBattleRecord::InitAsDefaultInstance() {
}

TCrossCollaborateSimpleBattleRecord::TCrossCollaborateSimpleBattleRecord(const TCrossCollaborateSimpleBattleRecord& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TCrossCollaborateSimpleBattleRecord)
}

void TCrossCollaborateSimpleBattleRecord::SharedCtor() {
  _cached_size_ = 0;
  recordtime_ = GOOGLE_ULONGLONG(0);
  teamid_ = GOOGLE_ULONGLONG(0);
  round_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TCrossCollaborateSimpleBattleRecord::~TCrossCollaborateSimpleBattleRecord() {
  // @@protoc_insertion_point(destructor:pb.TCrossCollaborateSimpleBattleRecord)
  SharedDtor();
}

void TCrossCollaborateSimpleBattleRecord::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TCrossCollaborateSimpleBattleRecord::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TCrossCollaborateSimpleBattleRecord::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TCrossCollaborateSimpleBattleRecord_descriptor_;
}

const TCrossCollaborateSimpleBattleRecord& TCrossCollaborateSimpleBattleRecord::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fCrossCollaborate_2eproto();
  return *default_instance_;
}

TCrossCollaborateSimpleBattleRecord* TCrossCollaborateSimpleBattleRecord::default_instance_ = NULL;

TCrossCollaborateSimpleBattleRecord* TCrossCollaborateSimpleBattleRecord::New() const {
  return new TCrossCollaborateSimpleBattleRecord;
}

void TCrossCollaborateSimpleBattleRecord::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<TCrossCollaborateSimpleBattleRecord*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(recordtime_, round_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  attackuserinfoarr_.Clear();
  defenduserinfoarr_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TCrossCollaborateSimpleBattleRecord::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TCrossCollaborateSimpleBattleRecord)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .pb.TCrossCollaborateSimpleRecordInfo AttackUserInfoArr = 1;
      case 1: {
        if (tag == 10) {
         parse_AttackUserInfoArr:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_attackuserinfoarr()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_AttackUserInfoArr;
        if (input->ExpectTag(18)) goto parse_DefendUserInfoArr;
        break;
      }

      // repeated .pb.TCrossCollaborateSimpleRecordInfo DefendUserInfoArr = 2;
      case 2: {
        if (tag == 18) {
         parse_DefendUserInfoArr:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_defenduserinfoarr()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_DefendUserInfoArr;
        if (input->ExpectTag(24)) goto parse_RecordTime;
        break;
      }

      // optional uint64 RecordTime = 3;
      case 3: {
        if (tag == 24) {
         parse_RecordTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &recordtime_)));
          set_has_recordtime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_TeamId;
        break;
      }

      // optional uint64 TeamId = 4;
      case 4: {
        if (tag == 32) {
         parse_TeamId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &teamid_)));
          set_has_teamid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_Round;
        break;
      }

      // optional uint32 Round = 5;
      case 5: {
        if (tag == 40) {
         parse_Round:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &round_)));
          set_has_round();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TCrossCollaborateSimpleBattleRecord)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TCrossCollaborateSimpleBattleRecord)
  return false;
#undef DO_
}

void TCrossCollaborateSimpleBattleRecord::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TCrossCollaborateSimpleBattleRecord)
  // repeated .pb.TCrossCollaborateSimpleRecordInfo AttackUserInfoArr = 1;
  for (int i = 0; i < this->attackuserinfoarr_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->attackuserinfoarr(i), output);
  }

  // repeated .pb.TCrossCollaborateSimpleRecordInfo DefendUserInfoArr = 2;
  for (int i = 0; i < this->defenduserinfoarr_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->defenduserinfoarr(i), output);
  }

  // optional uint64 RecordTime = 3;
  if (has_recordtime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->recordtime(), output);
  }

  // optional uint64 TeamId = 4;
  if (has_teamid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->teamid(), output);
  }

  // optional uint32 Round = 5;
  if (has_round()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->round(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TCrossCollaborateSimpleBattleRecord)
}

::google::protobuf::uint8* TCrossCollaborateSimpleBattleRecord::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TCrossCollaborateSimpleBattleRecord)
  // repeated .pb.TCrossCollaborateSimpleRecordInfo AttackUserInfoArr = 1;
  for (int i = 0; i < this->attackuserinfoarr_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->attackuserinfoarr(i), target);
  }

  // repeated .pb.TCrossCollaborateSimpleRecordInfo DefendUserInfoArr = 2;
  for (int i = 0; i < this->defenduserinfoarr_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->defenduserinfoarr(i), target);
  }

  // optional uint64 RecordTime = 3;
  if (has_recordtime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->recordtime(), target);
  }

  // optional uint64 TeamId = 4;
  if (has_teamid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->teamid(), target);
  }

  // optional uint32 Round = 5;
  if (has_round()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->round(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TCrossCollaborateSimpleBattleRecord)
  return target;
}

int TCrossCollaborateSimpleBattleRecord::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[2 / 32] & (0xffu << (2 % 32))) {
    // optional uint64 RecordTime = 3;
    if (has_recordtime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->recordtime());
    }

    // optional uint64 TeamId = 4;
    if (has_teamid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->teamid());
    }

    // optional uint32 Round = 5;
    if (has_round()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->round());
    }

  }
  // repeated .pb.TCrossCollaborateSimpleRecordInfo AttackUserInfoArr = 1;
  total_size += 1 * this->attackuserinfoarr_size();
  for (int i = 0; i < this->attackuserinfoarr_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->attackuserinfoarr(i));
  }

  // repeated .pb.TCrossCollaborateSimpleRecordInfo DefendUserInfoArr = 2;
  total_size += 1 * this->defenduserinfoarr_size();
  for (int i = 0; i < this->defenduserinfoarr_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->defenduserinfoarr(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TCrossCollaborateSimpleBattleRecord::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TCrossCollaborateSimpleBattleRecord* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TCrossCollaborateSimpleBattleRecord*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TCrossCollaborateSimpleBattleRecord::MergeFrom(const TCrossCollaborateSimpleBattleRecord& from) {
  GOOGLE_CHECK_NE(&from, this);
  attackuserinfoarr_.MergeFrom(from.attackuserinfoarr_);
  defenduserinfoarr_.MergeFrom(from.defenduserinfoarr_);
  if (from._has_bits_[2 / 32] & (0xffu << (2 % 32))) {
    if (from.has_recordtime()) {
      set_recordtime(from.recordtime());
    }
    if (from.has_teamid()) {
      set_teamid(from.teamid());
    }
    if (from.has_round()) {
      set_round(from.round());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TCrossCollaborateSimpleBattleRecord::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TCrossCollaborateSimpleBattleRecord::CopyFrom(const TCrossCollaborateSimpleBattleRecord& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TCrossCollaborateSimpleBattleRecord::IsInitialized() const {

  return true;
}

void TCrossCollaborateSimpleBattleRecord::Swap(TCrossCollaborateSimpleBattleRecord* other) {
  if (other != this) {
    attackuserinfoarr_.Swap(&other->attackuserinfoarr_);
    defenduserinfoarr_.Swap(&other->defenduserinfoarr_);
    std::swap(recordtime_, other->recordtime_);
    std::swap(teamid_, other->teamid_);
    std::swap(round_, other->round_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TCrossCollaborateSimpleBattleRecord::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TCrossCollaborateSimpleBattleRecord_descriptor_;
  metadata.reflection = TCrossCollaborateSimpleBattleRecord_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TCrossCollaborateGetStageInfoRsp::kStageArrFieldNumber;
const int TCrossCollaborateGetStageInfoRsp::kUserInfoFieldNumber;
const int TCrossCollaborateGetStageInfoRsp::kTeamInfoFieldNumber;
const int TCrossCollaborateGetStageInfoRsp::kRivalTeamInfoFieldNumber;
const int TCrossCollaborateGetStageInfoRsp::kBattleRewardTimeFieldNumber;
const int TCrossCollaborateGetStageInfoRsp::kRankRewardConfIdFieldNumber;
const int TCrossCollaborateGetStageInfoRsp::kRankRewardIdArrFieldNumber;
const int TCrossCollaborateGetStageInfoRsp::kGroupServerIdArrFieldNumber;
#endif  // !_MSC_VER

TCrossCollaborateGetStageInfoRsp::TCrossCollaborateGetStageInfoRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TCrossCollaborateGetStageInfoRsp)
}

void TCrossCollaborateGetStageInfoRsp::InitAsDefaultInstance() {
  userinfo_ = const_cast< ::pb::TCrossCollaborateUserInfo*>(&::pb::TCrossCollaborateUserInfo::default_instance());
  teaminfo_ = const_cast< ::pb::TCrossCollaborateTeamInfo*>(&::pb::TCrossCollaborateTeamInfo::default_instance());
  rivalteaminfo_ = const_cast< ::pb::TCrossCollaborateTeamInfo*>(&::pb::TCrossCollaborateTeamInfo::default_instance());
}

TCrossCollaborateGetStageInfoRsp::TCrossCollaborateGetStageInfoRsp(const TCrossCollaborateGetStageInfoRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TCrossCollaborateGetStageInfoRsp)
}

void TCrossCollaborateGetStageInfoRsp::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  userinfo_ = NULL;
  teaminfo_ = NULL;
  rivalteaminfo_ = NULL;
  battlerewardtime_ = GOOGLE_ULONGLONG(0);
  rankrewardconfid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TCrossCollaborateGetStageInfoRsp::~TCrossCollaborateGetStageInfoRsp() {
  // @@protoc_insertion_point(destructor:pb.TCrossCollaborateGetStageInfoRsp)
  SharedDtor();
}

void TCrossCollaborateGetStageInfoRsp::SharedDtor() {
  if (this != default_instance_) {
    delete userinfo_;
    delete teaminfo_;
    delete rivalteaminfo_;
  }
}

void TCrossCollaborateGetStageInfoRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TCrossCollaborateGetStageInfoRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TCrossCollaborateGetStageInfoRsp_descriptor_;
}

const TCrossCollaborateGetStageInfoRsp& TCrossCollaborateGetStageInfoRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fCrossCollaborate_2eproto();
  return *default_instance_;
}

TCrossCollaborateGetStageInfoRsp* TCrossCollaborateGetStageInfoRsp::default_instance_ = NULL;

TCrossCollaborateGetStageInfoRsp* TCrossCollaborateGetStageInfoRsp::New() const {
  return new TCrossCollaborateGetStageInfoRsp;
}

void TCrossCollaborateGetStageInfoRsp::Clear() {
  if (_has_bits_[0 / 32] & 62) {
    if (has_userinfo()) {
      if (userinfo_ != NULL) userinfo_->::pb::TCrossCollaborateUserInfo::Clear();
    }
    if (has_teaminfo()) {
      if (teaminfo_ != NULL) teaminfo_->::pb::TCrossCollaborateTeamInfo::Clear();
    }
    if (has_rivalteaminfo()) {
      if (rivalteaminfo_ != NULL) rivalteaminfo_->::pb::TCrossCollaborateTeamInfo::Clear();
    }
    battlerewardtime_ = GOOGLE_ULONGLONG(0);
    rankrewardconfid_ = 0u;
  }
  stagearr_.Clear();
  rankrewardidarr_.Clear();
  groupserveridarr_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TCrossCollaborateGetStageInfoRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TCrossCollaborateGetStageInfoRsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .pb.TCrossCollaborateStageInfo StageArr = 1;
      case 1: {
        if (tag == 10) {
         parse_StageArr:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_stagearr()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_StageArr;
        if (input->ExpectTag(18)) goto parse_UserInfo;
        break;
      }

      // optional .pb.TCrossCollaborateUserInfo UserInfo = 2;
      case 2: {
        if (tag == 18) {
         parse_UserInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_userinfo()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_TeamInfo;
        break;
      }

      // optional .pb.TCrossCollaborateTeamInfo TeamInfo = 3;
      case 3: {
        if (tag == 26) {
         parse_TeamInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_teaminfo()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_RivalTeamInfo;
        break;
      }

      // optional .pb.TCrossCollaborateTeamInfo RivalTeamInfo = 4;
      case 4: {
        if (tag == 34) {
         parse_RivalTeamInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_rivalteaminfo()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_BattleRewardTime;
        break;
      }

      // optional uint64 BattleRewardTime = 5;
      case 5: {
        if (tag == 40) {
         parse_BattleRewardTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &battlerewardtime_)));
          set_has_battlerewardtime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_RankRewardConfId;
        break;
      }

      // optional uint32 RankRewardConfId = 6;
      case 6: {
        if (tag == 48) {
         parse_RankRewardConfId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &rankrewardconfid_)));
          set_has_rankrewardconfid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_RankRewardIdArr;
        break;
      }

      // repeated uint32 RankRewardIdArr = 7;
      case 7: {
        if (tag == 56) {
         parse_RankRewardIdArr:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 56, input, this->mutable_rankrewardidarr())));
        } else if (tag == 58) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_rankrewardidarr())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_RankRewardIdArr;
        if (input->ExpectTag(66)) goto parse_GroupServerIdArr;
        break;
      }

      // repeated string GroupServerIdArr = 8;
      case 8: {
        if (tag == 66) {
         parse_GroupServerIdArr:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_groupserveridarr()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->groupserveridarr(this->groupserveridarr_size() - 1).data(),
            this->groupserveridarr(this->groupserveridarr_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "groupserveridarr");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_GroupServerIdArr;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TCrossCollaborateGetStageInfoRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TCrossCollaborateGetStageInfoRsp)
  return false;
#undef DO_
}

void TCrossCollaborateGetStageInfoRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TCrossCollaborateGetStageInfoRsp)
  // repeated .pb.TCrossCollaborateStageInfo StageArr = 1;
  for (int i = 0; i < this->stagearr_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->stagearr(i), output);
  }

  // optional .pb.TCrossCollaborateUserInfo UserInfo = 2;
  if (has_userinfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->userinfo(), output);
  }

  // optional .pb.TCrossCollaborateTeamInfo TeamInfo = 3;
  if (has_teaminfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->teaminfo(), output);
  }

  // optional .pb.TCrossCollaborateTeamInfo RivalTeamInfo = 4;
  if (has_rivalteaminfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->rivalteaminfo(), output);
  }

  // optional uint64 BattleRewardTime = 5;
  if (has_battlerewardtime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(5, this->battlerewardtime(), output);
  }

  // optional uint32 RankRewardConfId = 6;
  if (has_rankrewardconfid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->rankrewardconfid(), output);
  }

  // repeated uint32 RankRewardIdArr = 7;
  for (int i = 0; i < this->rankrewardidarr_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      7, this->rankrewardidarr(i), output);
  }

  // repeated string GroupServerIdArr = 8;
  for (int i = 0; i < this->groupserveridarr_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
    this->groupserveridarr(i).data(), this->groupserveridarr(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE,
    "groupserveridarr");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      8, this->groupserveridarr(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TCrossCollaborateGetStageInfoRsp)
}

::google::protobuf::uint8* TCrossCollaborateGetStageInfoRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TCrossCollaborateGetStageInfoRsp)
  // repeated .pb.TCrossCollaborateStageInfo StageArr = 1;
  for (int i = 0; i < this->stagearr_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->stagearr(i), target);
  }

  // optional .pb.TCrossCollaborateUserInfo UserInfo = 2;
  if (has_userinfo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->userinfo(), target);
  }

  // optional .pb.TCrossCollaborateTeamInfo TeamInfo = 3;
  if (has_teaminfo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->teaminfo(), target);
  }

  // optional .pb.TCrossCollaborateTeamInfo RivalTeamInfo = 4;
  if (has_rivalteaminfo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->rivalteaminfo(), target);
  }

  // optional uint64 BattleRewardTime = 5;
  if (has_battlerewardtime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(5, this->battlerewardtime(), target);
  }

  // optional uint32 RankRewardConfId = 6;
  if (has_rankrewardconfid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->rankrewardconfid(), target);
  }

  // repeated uint32 RankRewardIdArr = 7;
  for (int i = 0; i < this->rankrewardidarr_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(7, this->rankrewardidarr(i), target);
  }

  // repeated string GroupServerIdArr = 8;
  for (int i = 0; i < this->groupserveridarr_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->groupserveridarr(i).data(), this->groupserveridarr(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "groupserveridarr");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(8, this->groupserveridarr(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TCrossCollaborateGetStageInfoRsp)
  return target;
}

int TCrossCollaborateGetStageInfoRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // optional .pb.TCrossCollaborateUserInfo UserInfo = 2;
    if (has_userinfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->userinfo());
    }

    // optional .pb.TCrossCollaborateTeamInfo TeamInfo = 3;
    if (has_teaminfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->teaminfo());
    }

    // optional .pb.TCrossCollaborateTeamInfo RivalTeamInfo = 4;
    if (has_rivalteaminfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->rivalteaminfo());
    }

    // optional uint64 BattleRewardTime = 5;
    if (has_battlerewardtime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->battlerewardtime());
    }

    // optional uint32 RankRewardConfId = 6;
    if (has_rankrewardconfid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->rankrewardconfid());
    }

  }
  // repeated .pb.TCrossCollaborateStageInfo StageArr = 1;
  total_size += 1 * this->stagearr_size();
  for (int i = 0; i < this->stagearr_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->stagearr(i));
  }

  // repeated uint32 RankRewardIdArr = 7;
  {
    int data_size = 0;
    for (int i = 0; i < this->rankrewardidarr_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->rankrewardidarr(i));
    }
    total_size += 1 * this->rankrewardidarr_size() + data_size;
  }

  // repeated string GroupServerIdArr = 8;
  total_size += 1 * this->groupserveridarr_size();
  for (int i = 0; i < this->groupserveridarr_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->groupserveridarr(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TCrossCollaborateGetStageInfoRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TCrossCollaborateGetStageInfoRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TCrossCollaborateGetStageInfoRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TCrossCollaborateGetStageInfoRsp::MergeFrom(const TCrossCollaborateGetStageInfoRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  stagearr_.MergeFrom(from.stagearr_);
  rankrewardidarr_.MergeFrom(from.rankrewardidarr_);
  groupserveridarr_.MergeFrom(from.groupserveridarr_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_userinfo()) {
      mutable_userinfo()->::pb::TCrossCollaborateUserInfo::MergeFrom(from.userinfo());
    }
    if (from.has_teaminfo()) {
      mutable_teaminfo()->::pb::TCrossCollaborateTeamInfo::MergeFrom(from.teaminfo());
    }
    if (from.has_rivalteaminfo()) {
      mutable_rivalteaminfo()->::pb::TCrossCollaborateTeamInfo::MergeFrom(from.rivalteaminfo());
    }
    if (from.has_battlerewardtime()) {
      set_battlerewardtime(from.battlerewardtime());
    }
    if (from.has_rankrewardconfid()) {
      set_rankrewardconfid(from.rankrewardconfid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TCrossCollaborateGetStageInfoRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TCrossCollaborateGetStageInfoRsp::CopyFrom(const TCrossCollaborateGetStageInfoRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TCrossCollaborateGetStageInfoRsp::IsInitialized() const {

  return true;
}

void TCrossCollaborateGetStageInfoRsp::Swap(TCrossCollaborateGetStageInfoRsp* other) {
  if (other != this) {
    stagearr_.Swap(&other->stagearr_);
    std::swap(userinfo_, other->userinfo_);
    std::swap(teaminfo_, other->teaminfo_);
    std::swap(rivalteaminfo_, other->rivalteaminfo_);
    std::swap(battlerewardtime_, other->battlerewardtime_);
    std::swap(rankrewardconfid_, other->rankrewardconfid_);
    rankrewardidarr_.Swap(&other->rankrewardidarr_);
    groupserveridarr_.Swap(&other->groupserveridarr_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TCrossCollaborateGetStageInfoRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TCrossCollaborateGetStageInfoRsp_descriptor_;
  metadata.reflection = TCrossCollaborateGetStageInfoRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TAdventureGetTeamListReq::kOffsetFieldNumber;
const int TAdventureGetTeamListReq::kLimitFieldNumber;
const int TAdventureGetTeamListReq::kCanJoinFieldNumber;
const int TAdventureGetTeamListReq::kInviteTypeFieldNumber;
#endif  // !_MSC_VER

TAdventureGetTeamListReq::TAdventureGetTeamListReq()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TAdventureGetTeamListReq)
}

void TAdventureGetTeamListReq::InitAsDefaultInstance() {
}

TAdventureGetTeamListReq::TAdventureGetTeamListReq(const TAdventureGetTeamListReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TAdventureGetTeamListReq)
}

void TAdventureGetTeamListReq::SharedCtor() {
  _cached_size_ = 0;
  offset_ = 0u;
  limit_ = 0u;
  canjoin_ = 0u;
  invitetype_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TAdventureGetTeamListReq::~TAdventureGetTeamListReq() {
  // @@protoc_insertion_point(destructor:pb.TAdventureGetTeamListReq)
  SharedDtor();
}

void TAdventureGetTeamListReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TAdventureGetTeamListReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TAdventureGetTeamListReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TAdventureGetTeamListReq_descriptor_;
}

const TAdventureGetTeamListReq& TAdventureGetTeamListReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fCrossCollaborate_2eproto();
  return *default_instance_;
}

TAdventureGetTeamListReq* TAdventureGetTeamListReq::default_instance_ = NULL;

TAdventureGetTeamListReq* TAdventureGetTeamListReq::New() const {
  return new TAdventureGetTeamListReq;
}

void TAdventureGetTeamListReq::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<TAdventureGetTeamListReq*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(offset_, invitetype_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TAdventureGetTeamListReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TAdventureGetTeamListReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 Offset = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &offset_)));
          set_has_offset();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_Limit;
        break;
      }

      // optional uint32 Limit = 2;
      case 2: {
        if (tag == 16) {
         parse_Limit:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &limit_)));
          set_has_limit();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_CanJoin;
        break;
      }

      // optional uint32 CanJoin = 3;
      case 3: {
        if (tag == 24) {
         parse_CanJoin:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &canjoin_)));
          set_has_canjoin();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_InviteType;
        break;
      }

      // optional .pb.ECrossCollaborateInviteType InviteType = 4;
      case 4: {
        if (tag == 32) {
         parse_InviteType:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::pb::ECrossCollaborateInviteType_IsValid(value)) {
            set_invitetype(static_cast< ::pb::ECrossCollaborateInviteType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(4, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TAdventureGetTeamListReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TAdventureGetTeamListReq)
  return false;
#undef DO_
}

void TAdventureGetTeamListReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TAdventureGetTeamListReq)
  // optional uint32 Offset = 1;
  if (has_offset()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->offset(), output);
  }

  // optional uint32 Limit = 2;
  if (has_limit()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->limit(), output);
  }

  // optional uint32 CanJoin = 3;
  if (has_canjoin()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->canjoin(), output);
  }

  // optional .pb.ECrossCollaborateInviteType InviteType = 4;
  if (has_invitetype()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->invitetype(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TAdventureGetTeamListReq)
}

::google::protobuf::uint8* TAdventureGetTeamListReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TAdventureGetTeamListReq)
  // optional uint32 Offset = 1;
  if (has_offset()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->offset(), target);
  }

  // optional uint32 Limit = 2;
  if (has_limit()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->limit(), target);
  }

  // optional uint32 CanJoin = 3;
  if (has_canjoin()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->canjoin(), target);
  }

  // optional .pb.ECrossCollaborateInviteType InviteType = 4;
  if (has_invitetype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      4, this->invitetype(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TAdventureGetTeamListReq)
  return target;
}

int TAdventureGetTeamListReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 Offset = 1;
    if (has_offset()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->offset());
    }

    // optional uint32 Limit = 2;
    if (has_limit()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->limit());
    }

    // optional uint32 CanJoin = 3;
    if (has_canjoin()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->canjoin());
    }

    // optional .pb.ECrossCollaborateInviteType InviteType = 4;
    if (has_invitetype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->invitetype());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TAdventureGetTeamListReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TAdventureGetTeamListReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TAdventureGetTeamListReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TAdventureGetTeamListReq::MergeFrom(const TAdventureGetTeamListReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_offset()) {
      set_offset(from.offset());
    }
    if (from.has_limit()) {
      set_limit(from.limit());
    }
    if (from.has_canjoin()) {
      set_canjoin(from.canjoin());
    }
    if (from.has_invitetype()) {
      set_invitetype(from.invitetype());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TAdventureGetTeamListReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TAdventureGetTeamListReq::CopyFrom(const TAdventureGetTeamListReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TAdventureGetTeamListReq::IsInitialized() const {

  return true;
}

void TAdventureGetTeamListReq::Swap(TAdventureGetTeamListReq* other) {
  if (other != this) {
    std::swap(offset_, other->offset_);
    std::swap(limit_, other->limit_);
    std::swap(canjoin_, other->canjoin_);
    std::swap(invitetype_, other->invitetype_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TAdventureGetTeamListReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TAdventureGetTeamListReq_descriptor_;
  metadata.reflection = TAdventureGetTeamListReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TCrossCollaborateGetTeamListRsp::kTeamArrFieldNumber;
#endif  // !_MSC_VER

TCrossCollaborateGetTeamListRsp::TCrossCollaborateGetTeamListRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TCrossCollaborateGetTeamListRsp)
}

void TCrossCollaborateGetTeamListRsp::InitAsDefaultInstance() {
}

TCrossCollaborateGetTeamListRsp::TCrossCollaborateGetTeamListRsp(const TCrossCollaborateGetTeamListRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TCrossCollaborateGetTeamListRsp)
}

void TCrossCollaborateGetTeamListRsp::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TCrossCollaborateGetTeamListRsp::~TCrossCollaborateGetTeamListRsp() {
  // @@protoc_insertion_point(destructor:pb.TCrossCollaborateGetTeamListRsp)
  SharedDtor();
}

void TCrossCollaborateGetTeamListRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TCrossCollaborateGetTeamListRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TCrossCollaborateGetTeamListRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TCrossCollaborateGetTeamListRsp_descriptor_;
}

const TCrossCollaborateGetTeamListRsp& TCrossCollaborateGetTeamListRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fCrossCollaborate_2eproto();
  return *default_instance_;
}

TCrossCollaborateGetTeamListRsp* TCrossCollaborateGetTeamListRsp::default_instance_ = NULL;

TCrossCollaborateGetTeamListRsp* TCrossCollaborateGetTeamListRsp::New() const {
  return new TCrossCollaborateGetTeamListRsp;
}

void TCrossCollaborateGetTeamListRsp::Clear() {
  teamarr_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TCrossCollaborateGetTeamListRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TCrossCollaborateGetTeamListRsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .pb.TCrossCollaborateTeamInfo TeamArr = 1;
      case 1: {
        if (tag == 10) {
         parse_TeamArr:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_teamarr()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_TeamArr;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TCrossCollaborateGetTeamListRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TCrossCollaborateGetTeamListRsp)
  return false;
#undef DO_
}

void TCrossCollaborateGetTeamListRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TCrossCollaborateGetTeamListRsp)
  // repeated .pb.TCrossCollaborateTeamInfo TeamArr = 1;
  for (int i = 0; i < this->teamarr_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->teamarr(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TCrossCollaborateGetTeamListRsp)
}

::google::protobuf::uint8* TCrossCollaborateGetTeamListRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TCrossCollaborateGetTeamListRsp)
  // repeated .pb.TCrossCollaborateTeamInfo TeamArr = 1;
  for (int i = 0; i < this->teamarr_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->teamarr(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TCrossCollaborateGetTeamListRsp)
  return target;
}

int TCrossCollaborateGetTeamListRsp::ByteSize() const {
  int total_size = 0;

  // repeated .pb.TCrossCollaborateTeamInfo TeamArr = 1;
  total_size += 1 * this->teamarr_size();
  for (int i = 0; i < this->teamarr_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->teamarr(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TCrossCollaborateGetTeamListRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TCrossCollaborateGetTeamListRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TCrossCollaborateGetTeamListRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TCrossCollaborateGetTeamListRsp::MergeFrom(const TCrossCollaborateGetTeamListRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  teamarr_.MergeFrom(from.teamarr_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TCrossCollaborateGetTeamListRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TCrossCollaborateGetTeamListRsp::CopyFrom(const TCrossCollaborateGetTeamListRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TCrossCollaborateGetTeamListRsp::IsInitialized() const {

  return true;
}

void TCrossCollaborateGetTeamListRsp::Swap(TCrossCollaborateGetTeamListRsp* other) {
  if (other != this) {
    teamarr_.Swap(&other->teamarr_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TCrossCollaborateGetTeamListRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TCrossCollaborateGetTeamListRsp_descriptor_;
  metadata.reflection = TCrossCollaborateGetTeamListRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TCrossCollaborateCreateTeamRsp::kTeamInfoFieldNumber;
#endif  // !_MSC_VER

TCrossCollaborateCreateTeamRsp::TCrossCollaborateCreateTeamRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TCrossCollaborateCreateTeamRsp)
}

void TCrossCollaborateCreateTeamRsp::InitAsDefaultInstance() {
  teaminfo_ = const_cast< ::pb::TCrossCollaborateTeamInfo*>(&::pb::TCrossCollaborateTeamInfo::default_instance());
}

TCrossCollaborateCreateTeamRsp::TCrossCollaborateCreateTeamRsp(const TCrossCollaborateCreateTeamRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TCrossCollaborateCreateTeamRsp)
}

void TCrossCollaborateCreateTeamRsp::SharedCtor() {
  _cached_size_ = 0;
  teaminfo_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TCrossCollaborateCreateTeamRsp::~TCrossCollaborateCreateTeamRsp() {
  // @@protoc_insertion_point(destructor:pb.TCrossCollaborateCreateTeamRsp)
  SharedDtor();
}

void TCrossCollaborateCreateTeamRsp::SharedDtor() {
  if (this != default_instance_) {
    delete teaminfo_;
  }
}

void TCrossCollaborateCreateTeamRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TCrossCollaborateCreateTeamRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TCrossCollaborateCreateTeamRsp_descriptor_;
}

const TCrossCollaborateCreateTeamRsp& TCrossCollaborateCreateTeamRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fCrossCollaborate_2eproto();
  return *default_instance_;
}

TCrossCollaborateCreateTeamRsp* TCrossCollaborateCreateTeamRsp::default_instance_ = NULL;

TCrossCollaborateCreateTeamRsp* TCrossCollaborateCreateTeamRsp::New() const {
  return new TCrossCollaborateCreateTeamRsp;
}

void TCrossCollaborateCreateTeamRsp::Clear() {
  if (has_teaminfo()) {
    if (teaminfo_ != NULL) teaminfo_->::pb::TCrossCollaborateTeamInfo::Clear();
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TCrossCollaborateCreateTeamRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TCrossCollaborateCreateTeamRsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .pb.TCrossCollaborateTeamInfo TeamInfo = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_teaminfo()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TCrossCollaborateCreateTeamRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TCrossCollaborateCreateTeamRsp)
  return false;
#undef DO_
}

void TCrossCollaborateCreateTeamRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TCrossCollaborateCreateTeamRsp)
  // optional .pb.TCrossCollaborateTeamInfo TeamInfo = 1;
  if (has_teaminfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->teaminfo(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TCrossCollaborateCreateTeamRsp)
}

::google::protobuf::uint8* TCrossCollaborateCreateTeamRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TCrossCollaborateCreateTeamRsp)
  // optional .pb.TCrossCollaborateTeamInfo TeamInfo = 1;
  if (has_teaminfo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->teaminfo(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TCrossCollaborateCreateTeamRsp)
  return target;
}

int TCrossCollaborateCreateTeamRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .pb.TCrossCollaborateTeamInfo TeamInfo = 1;
    if (has_teaminfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->teaminfo());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TCrossCollaborateCreateTeamRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TCrossCollaborateCreateTeamRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TCrossCollaborateCreateTeamRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TCrossCollaborateCreateTeamRsp::MergeFrom(const TCrossCollaborateCreateTeamRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_teaminfo()) {
      mutable_teaminfo()->::pb::TCrossCollaborateTeamInfo::MergeFrom(from.teaminfo());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TCrossCollaborateCreateTeamRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TCrossCollaborateCreateTeamRsp::CopyFrom(const TCrossCollaborateCreateTeamRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TCrossCollaborateCreateTeamRsp::IsInitialized() const {

  return true;
}

void TCrossCollaborateCreateTeamRsp::Swap(TCrossCollaborateCreateTeamRsp* other) {
  if (other != this) {
    std::swap(teaminfo_, other->teaminfo_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TCrossCollaborateCreateTeamRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TCrossCollaborateCreateTeamRsp_descriptor_;
  metadata.reflection = TCrossCollaborateCreateTeamRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TCrossCollaborateSetTeamReq::kTeamIdFieldNumber;
const int TCrossCollaborateSetTeamReq::kNeedFightForceFieldNumber;
const int TCrossCollaborateSetTeamReq::kTeamStatusFieldNumber;
#endif  // !_MSC_VER

TCrossCollaborateSetTeamReq::TCrossCollaborateSetTeamReq()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TCrossCollaborateSetTeamReq)
}

void TCrossCollaborateSetTeamReq::InitAsDefaultInstance() {
}

TCrossCollaborateSetTeamReq::TCrossCollaborateSetTeamReq(const TCrossCollaborateSetTeamReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TCrossCollaborateSetTeamReq)
}

void TCrossCollaborateSetTeamReq::SharedCtor() {
  _cached_size_ = 0;
  teamid_ = GOOGLE_ULONGLONG(0);
  needfightforce_ = GOOGLE_ULONGLONG(0);
  teamstatus_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TCrossCollaborateSetTeamReq::~TCrossCollaborateSetTeamReq() {
  // @@protoc_insertion_point(destructor:pb.TCrossCollaborateSetTeamReq)
  SharedDtor();
}

void TCrossCollaborateSetTeamReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TCrossCollaborateSetTeamReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TCrossCollaborateSetTeamReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TCrossCollaborateSetTeamReq_descriptor_;
}

const TCrossCollaborateSetTeamReq& TCrossCollaborateSetTeamReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fCrossCollaborate_2eproto();
  return *default_instance_;
}

TCrossCollaborateSetTeamReq* TCrossCollaborateSetTeamReq::default_instance_ = NULL;

TCrossCollaborateSetTeamReq* TCrossCollaborateSetTeamReq::New() const {
  return new TCrossCollaborateSetTeamReq;
}

void TCrossCollaborateSetTeamReq::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<TCrossCollaborateSetTeamReq*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(teamid_, teamstatus_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TCrossCollaborateSetTeamReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TCrossCollaborateSetTeamReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 TeamId = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &teamid_)));
          set_has_teamid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_NeedFightForce;
        break;
      }

      // optional uint64 NeedFightForce = 2;
      case 2: {
        if (tag == 16) {
         parse_NeedFightForce:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &needfightforce_)));
          set_has_needfightforce();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_TeamStatus;
        break;
      }

      // optional .pb.ECrossCollaborateStatus TeamStatus = 3;
      case 3: {
        if (tag == 24) {
         parse_TeamStatus:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::pb::ECrossCollaborateStatus_IsValid(value)) {
            set_teamstatus(static_cast< ::pb::ECrossCollaborateStatus >(value));
          } else {
            mutable_unknown_fields()->AddVarint(3, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TCrossCollaborateSetTeamReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TCrossCollaborateSetTeamReq)
  return false;
#undef DO_
}

void TCrossCollaborateSetTeamReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TCrossCollaborateSetTeamReq)
  // optional uint64 TeamId = 1;
  if (has_teamid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->teamid(), output);
  }

  // optional uint64 NeedFightForce = 2;
  if (has_needfightforce()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->needfightforce(), output);
  }

  // optional .pb.ECrossCollaborateStatus TeamStatus = 3;
  if (has_teamstatus()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->teamstatus(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TCrossCollaborateSetTeamReq)
}

::google::protobuf::uint8* TCrossCollaborateSetTeamReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TCrossCollaborateSetTeamReq)
  // optional uint64 TeamId = 1;
  if (has_teamid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->teamid(), target);
  }

  // optional uint64 NeedFightForce = 2;
  if (has_needfightforce()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->needfightforce(), target);
  }

  // optional .pb.ECrossCollaborateStatus TeamStatus = 3;
  if (has_teamstatus()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->teamstatus(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TCrossCollaborateSetTeamReq)
  return target;
}

int TCrossCollaborateSetTeamReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 TeamId = 1;
    if (has_teamid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->teamid());
    }

    // optional uint64 NeedFightForce = 2;
    if (has_needfightforce()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->needfightforce());
    }

    // optional .pb.ECrossCollaborateStatus TeamStatus = 3;
    if (has_teamstatus()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->teamstatus());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TCrossCollaborateSetTeamReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TCrossCollaborateSetTeamReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TCrossCollaborateSetTeamReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TCrossCollaborateSetTeamReq::MergeFrom(const TCrossCollaborateSetTeamReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_teamid()) {
      set_teamid(from.teamid());
    }
    if (from.has_needfightforce()) {
      set_needfightforce(from.needfightforce());
    }
    if (from.has_teamstatus()) {
      set_teamstatus(from.teamstatus());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TCrossCollaborateSetTeamReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TCrossCollaborateSetTeamReq::CopyFrom(const TCrossCollaborateSetTeamReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TCrossCollaborateSetTeamReq::IsInitialized() const {

  return true;
}

void TCrossCollaborateSetTeamReq::Swap(TCrossCollaborateSetTeamReq* other) {
  if (other != this) {
    std::swap(teamid_, other->teamid_);
    std::swap(needfightforce_, other->needfightforce_);
    std::swap(teamstatus_, other->teamstatus_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TCrossCollaborateSetTeamReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TCrossCollaborateSetTeamReq_descriptor_;
  metadata.reflection = TCrossCollaborateSetTeamReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TCrossCollaborateJoinTeamReq::kTeamIdFieldNumber;
#endif  // !_MSC_VER

TCrossCollaborateJoinTeamReq::TCrossCollaborateJoinTeamReq()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TCrossCollaborateJoinTeamReq)
}

void TCrossCollaborateJoinTeamReq::InitAsDefaultInstance() {
}

TCrossCollaborateJoinTeamReq::TCrossCollaborateJoinTeamReq(const TCrossCollaborateJoinTeamReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TCrossCollaborateJoinTeamReq)
}

void TCrossCollaborateJoinTeamReq::SharedCtor() {
  _cached_size_ = 0;
  teamid_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TCrossCollaborateJoinTeamReq::~TCrossCollaborateJoinTeamReq() {
  // @@protoc_insertion_point(destructor:pb.TCrossCollaborateJoinTeamReq)
  SharedDtor();
}

void TCrossCollaborateJoinTeamReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TCrossCollaborateJoinTeamReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TCrossCollaborateJoinTeamReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TCrossCollaborateJoinTeamReq_descriptor_;
}

const TCrossCollaborateJoinTeamReq& TCrossCollaborateJoinTeamReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fCrossCollaborate_2eproto();
  return *default_instance_;
}

TCrossCollaborateJoinTeamReq* TCrossCollaborateJoinTeamReq::default_instance_ = NULL;

TCrossCollaborateJoinTeamReq* TCrossCollaborateJoinTeamReq::New() const {
  return new TCrossCollaborateJoinTeamReq;
}

void TCrossCollaborateJoinTeamReq::Clear() {
  teamid_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TCrossCollaborateJoinTeamReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TCrossCollaborateJoinTeamReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 TeamId = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &teamid_)));
          set_has_teamid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TCrossCollaborateJoinTeamReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TCrossCollaborateJoinTeamReq)
  return false;
#undef DO_
}

void TCrossCollaborateJoinTeamReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TCrossCollaborateJoinTeamReq)
  // optional uint64 TeamId = 1;
  if (has_teamid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->teamid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TCrossCollaborateJoinTeamReq)
}

::google::protobuf::uint8* TCrossCollaborateJoinTeamReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TCrossCollaborateJoinTeamReq)
  // optional uint64 TeamId = 1;
  if (has_teamid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->teamid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TCrossCollaborateJoinTeamReq)
  return target;
}

int TCrossCollaborateJoinTeamReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 TeamId = 1;
    if (has_teamid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->teamid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TCrossCollaborateJoinTeamReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TCrossCollaborateJoinTeamReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TCrossCollaborateJoinTeamReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TCrossCollaborateJoinTeamReq::MergeFrom(const TCrossCollaborateJoinTeamReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_teamid()) {
      set_teamid(from.teamid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TCrossCollaborateJoinTeamReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TCrossCollaborateJoinTeamReq::CopyFrom(const TCrossCollaborateJoinTeamReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TCrossCollaborateJoinTeamReq::IsInitialized() const {

  return true;
}

void TCrossCollaborateJoinTeamReq::Swap(TCrossCollaborateJoinTeamReq* other) {
  if (other != this) {
    std::swap(teamid_, other->teamid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TCrossCollaborateJoinTeamReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TCrossCollaborateJoinTeamReq_descriptor_;
  metadata.reflection = TCrossCollaborateJoinTeamReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TCrossCollaborateJoinTeamRsp::kErrorCodeFieldNumber;
const int TCrossCollaborateJoinTeamRsp::kTeamInfoFieldNumber;
#endif  // !_MSC_VER

TCrossCollaborateJoinTeamRsp::TCrossCollaborateJoinTeamRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TCrossCollaborateJoinTeamRsp)
}

void TCrossCollaborateJoinTeamRsp::InitAsDefaultInstance() {
  teaminfo_ = const_cast< ::pb::TCrossCollaborateTeamInfo*>(&::pb::TCrossCollaborateTeamInfo::default_instance());
}

TCrossCollaborateJoinTeamRsp::TCrossCollaborateJoinTeamRsp(const TCrossCollaborateJoinTeamRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TCrossCollaborateJoinTeamRsp)
}

void TCrossCollaborateJoinTeamRsp::SharedCtor() {
  _cached_size_ = 0;
  errorcode_ = 0;
  teaminfo_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TCrossCollaborateJoinTeamRsp::~TCrossCollaborateJoinTeamRsp() {
  // @@protoc_insertion_point(destructor:pb.TCrossCollaborateJoinTeamRsp)
  SharedDtor();
}

void TCrossCollaborateJoinTeamRsp::SharedDtor() {
  if (this != default_instance_) {
    delete teaminfo_;
  }
}

void TCrossCollaborateJoinTeamRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TCrossCollaborateJoinTeamRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TCrossCollaborateJoinTeamRsp_descriptor_;
}

const TCrossCollaborateJoinTeamRsp& TCrossCollaborateJoinTeamRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fCrossCollaborate_2eproto();
  return *default_instance_;
}

TCrossCollaborateJoinTeamRsp* TCrossCollaborateJoinTeamRsp::default_instance_ = NULL;

TCrossCollaborateJoinTeamRsp* TCrossCollaborateJoinTeamRsp::New() const {
  return new TCrossCollaborateJoinTeamRsp;
}

void TCrossCollaborateJoinTeamRsp::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    errorcode_ = 0;
    if (has_teaminfo()) {
      if (teaminfo_ != NULL) teaminfo_->::pb::TCrossCollaborateTeamInfo::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TCrossCollaborateJoinTeamRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TCrossCollaborateJoinTeamRsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .pb.ECrossCollaborateErrorCode ErrorCode = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::pb::ECrossCollaborateErrorCode_IsValid(value)) {
            set_errorcode(static_cast< ::pb::ECrossCollaborateErrorCode >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_TeamInfo;
        break;
      }

      // optional .pb.TCrossCollaborateTeamInfo TeamInfo = 2;
      case 2: {
        if (tag == 18) {
         parse_TeamInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_teaminfo()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TCrossCollaborateJoinTeamRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TCrossCollaborateJoinTeamRsp)
  return false;
#undef DO_
}

void TCrossCollaborateJoinTeamRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TCrossCollaborateJoinTeamRsp)
  // optional .pb.ECrossCollaborateErrorCode ErrorCode = 1;
  if (has_errorcode()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->errorcode(), output);
  }

  // optional .pb.TCrossCollaborateTeamInfo TeamInfo = 2;
  if (has_teaminfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->teaminfo(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TCrossCollaborateJoinTeamRsp)
}

::google::protobuf::uint8* TCrossCollaborateJoinTeamRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TCrossCollaborateJoinTeamRsp)
  // optional .pb.ECrossCollaborateErrorCode ErrorCode = 1;
  if (has_errorcode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->errorcode(), target);
  }

  // optional .pb.TCrossCollaborateTeamInfo TeamInfo = 2;
  if (has_teaminfo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->teaminfo(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TCrossCollaborateJoinTeamRsp)
  return target;
}

int TCrossCollaborateJoinTeamRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .pb.ECrossCollaborateErrorCode ErrorCode = 1;
    if (has_errorcode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->errorcode());
    }

    // optional .pb.TCrossCollaborateTeamInfo TeamInfo = 2;
    if (has_teaminfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->teaminfo());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TCrossCollaborateJoinTeamRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TCrossCollaborateJoinTeamRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TCrossCollaborateJoinTeamRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TCrossCollaborateJoinTeamRsp::MergeFrom(const TCrossCollaborateJoinTeamRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_errorcode()) {
      set_errorcode(from.errorcode());
    }
    if (from.has_teaminfo()) {
      mutable_teaminfo()->::pb::TCrossCollaborateTeamInfo::MergeFrom(from.teaminfo());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TCrossCollaborateJoinTeamRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TCrossCollaborateJoinTeamRsp::CopyFrom(const TCrossCollaborateJoinTeamRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TCrossCollaborateJoinTeamRsp::IsInitialized() const {

  return true;
}

void TCrossCollaborateJoinTeamRsp::Swap(TCrossCollaborateJoinTeamRsp* other) {
  if (other != this) {
    std::swap(errorcode_, other->errorcode_);
    std::swap(teaminfo_, other->teaminfo_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TCrossCollaborateJoinTeamRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TCrossCollaborateJoinTeamRsp_descriptor_;
  metadata.reflection = TCrossCollaborateJoinTeamRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TCrossCollaborateQuitTeamReq::kTeamIdFieldNumber;
#endif  // !_MSC_VER

TCrossCollaborateQuitTeamReq::TCrossCollaborateQuitTeamReq()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TCrossCollaborateQuitTeamReq)
}

void TCrossCollaborateQuitTeamReq::InitAsDefaultInstance() {
}

TCrossCollaborateQuitTeamReq::TCrossCollaborateQuitTeamReq(const TCrossCollaborateQuitTeamReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TCrossCollaborateQuitTeamReq)
}

void TCrossCollaborateQuitTeamReq::SharedCtor() {
  _cached_size_ = 0;
  teamid_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TCrossCollaborateQuitTeamReq::~TCrossCollaborateQuitTeamReq() {
  // @@protoc_insertion_point(destructor:pb.TCrossCollaborateQuitTeamReq)
  SharedDtor();
}

void TCrossCollaborateQuitTeamReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TCrossCollaborateQuitTeamReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TCrossCollaborateQuitTeamReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TCrossCollaborateQuitTeamReq_descriptor_;
}

const TCrossCollaborateQuitTeamReq& TCrossCollaborateQuitTeamReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fCrossCollaborate_2eproto();
  return *default_instance_;
}

TCrossCollaborateQuitTeamReq* TCrossCollaborateQuitTeamReq::default_instance_ = NULL;

TCrossCollaborateQuitTeamReq* TCrossCollaborateQuitTeamReq::New() const {
  return new TCrossCollaborateQuitTeamReq;
}

void TCrossCollaborateQuitTeamReq::Clear() {
  teamid_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TCrossCollaborateQuitTeamReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TCrossCollaborateQuitTeamReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 TeamId = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &teamid_)));
          set_has_teamid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TCrossCollaborateQuitTeamReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TCrossCollaborateQuitTeamReq)
  return false;
#undef DO_
}

void TCrossCollaborateQuitTeamReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TCrossCollaborateQuitTeamReq)
  // optional uint64 TeamId = 1;
  if (has_teamid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->teamid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TCrossCollaborateQuitTeamReq)
}

::google::protobuf::uint8* TCrossCollaborateQuitTeamReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TCrossCollaborateQuitTeamReq)
  // optional uint64 TeamId = 1;
  if (has_teamid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->teamid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TCrossCollaborateQuitTeamReq)
  return target;
}

int TCrossCollaborateQuitTeamReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 TeamId = 1;
    if (has_teamid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->teamid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TCrossCollaborateQuitTeamReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TCrossCollaborateQuitTeamReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TCrossCollaborateQuitTeamReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TCrossCollaborateQuitTeamReq::MergeFrom(const TCrossCollaborateQuitTeamReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_teamid()) {
      set_teamid(from.teamid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TCrossCollaborateQuitTeamReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TCrossCollaborateQuitTeamReq::CopyFrom(const TCrossCollaborateQuitTeamReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TCrossCollaborateQuitTeamReq::IsInitialized() const {

  return true;
}

void TCrossCollaborateQuitTeamReq::Swap(TCrossCollaborateQuitTeamReq* other) {
  if (other != this) {
    std::swap(teamid_, other->teamid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TCrossCollaborateQuitTeamReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TCrossCollaborateQuitTeamReq_descriptor_;
  metadata.reflection = TCrossCollaborateQuitTeamReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TCrossCollaborateGetInviteListReq::kInviteTypeFieldNumber;
#endif  // !_MSC_VER

TCrossCollaborateGetInviteListReq::TCrossCollaborateGetInviteListReq()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TCrossCollaborateGetInviteListReq)
}

void TCrossCollaborateGetInviteListReq::InitAsDefaultInstance() {
}

TCrossCollaborateGetInviteListReq::TCrossCollaborateGetInviteListReq(const TCrossCollaborateGetInviteListReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TCrossCollaborateGetInviteListReq)
}

void TCrossCollaborateGetInviteListReq::SharedCtor() {
  _cached_size_ = 0;
  invitetype_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TCrossCollaborateGetInviteListReq::~TCrossCollaborateGetInviteListReq() {
  // @@protoc_insertion_point(destructor:pb.TCrossCollaborateGetInviteListReq)
  SharedDtor();
}

void TCrossCollaborateGetInviteListReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TCrossCollaborateGetInviteListReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TCrossCollaborateGetInviteListReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TCrossCollaborateGetInviteListReq_descriptor_;
}

const TCrossCollaborateGetInviteListReq& TCrossCollaborateGetInviteListReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fCrossCollaborate_2eproto();
  return *default_instance_;
}

TCrossCollaborateGetInviteListReq* TCrossCollaborateGetInviteListReq::default_instance_ = NULL;

TCrossCollaborateGetInviteListReq* TCrossCollaborateGetInviteListReq::New() const {
  return new TCrossCollaborateGetInviteListReq;
}

void TCrossCollaborateGetInviteListReq::Clear() {
  invitetype_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TCrossCollaborateGetInviteListReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TCrossCollaborateGetInviteListReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .pb.ECrossCollaborateInviteType InviteType = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::pb::ECrossCollaborateInviteType_IsValid(value)) {
            set_invitetype(static_cast< ::pb::ECrossCollaborateInviteType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TCrossCollaborateGetInviteListReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TCrossCollaborateGetInviteListReq)
  return false;
#undef DO_
}

void TCrossCollaborateGetInviteListReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TCrossCollaborateGetInviteListReq)
  // optional .pb.ECrossCollaborateInviteType InviteType = 1;
  if (has_invitetype()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->invitetype(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TCrossCollaborateGetInviteListReq)
}

::google::protobuf::uint8* TCrossCollaborateGetInviteListReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TCrossCollaborateGetInviteListReq)
  // optional .pb.ECrossCollaborateInviteType InviteType = 1;
  if (has_invitetype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->invitetype(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TCrossCollaborateGetInviteListReq)
  return target;
}

int TCrossCollaborateGetInviteListReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .pb.ECrossCollaborateInviteType InviteType = 1;
    if (has_invitetype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->invitetype());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TCrossCollaborateGetInviteListReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TCrossCollaborateGetInviteListReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TCrossCollaborateGetInviteListReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TCrossCollaborateGetInviteListReq::MergeFrom(const TCrossCollaborateGetInviteListReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_invitetype()) {
      set_invitetype(from.invitetype());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TCrossCollaborateGetInviteListReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TCrossCollaborateGetInviteListReq::CopyFrom(const TCrossCollaborateGetInviteListReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TCrossCollaborateGetInviteListReq::IsInitialized() const {

  return true;
}

void TCrossCollaborateGetInviteListReq::Swap(TCrossCollaborateGetInviteListReq* other) {
  if (other != this) {
    std::swap(invitetype_, other->invitetype_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TCrossCollaborateGetInviteListReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TCrossCollaborateGetInviteListReq_descriptor_;
  metadata.reflection = TCrossCollaborateGetInviteListReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TCrossCollaborateGetInviteListRsp::kUserArrFieldNumber;
#endif  // !_MSC_VER

TCrossCollaborateGetInviteListRsp::TCrossCollaborateGetInviteListRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TCrossCollaborateGetInviteListRsp)
}

void TCrossCollaborateGetInviteListRsp::InitAsDefaultInstance() {
}

TCrossCollaborateGetInviteListRsp::TCrossCollaborateGetInviteListRsp(const TCrossCollaborateGetInviteListRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TCrossCollaborateGetInviteListRsp)
}

void TCrossCollaborateGetInviteListRsp::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TCrossCollaborateGetInviteListRsp::~TCrossCollaborateGetInviteListRsp() {
  // @@protoc_insertion_point(destructor:pb.TCrossCollaborateGetInviteListRsp)
  SharedDtor();
}

void TCrossCollaborateGetInviteListRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TCrossCollaborateGetInviteListRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TCrossCollaborateGetInviteListRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TCrossCollaborateGetInviteListRsp_descriptor_;
}

const TCrossCollaborateGetInviteListRsp& TCrossCollaborateGetInviteListRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fCrossCollaborate_2eproto();
  return *default_instance_;
}

TCrossCollaborateGetInviteListRsp* TCrossCollaborateGetInviteListRsp::default_instance_ = NULL;

TCrossCollaborateGetInviteListRsp* TCrossCollaborateGetInviteListRsp::New() const {
  return new TCrossCollaborateGetInviteListRsp;
}

void TCrossCollaborateGetInviteListRsp::Clear() {
  userarr_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TCrossCollaborateGetInviteListRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TCrossCollaborateGetInviteListRsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .pb.TCrossCollaborateInviteUserInfo UserArr = 1;
      case 1: {
        if (tag == 10) {
         parse_UserArr:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_userarr()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_UserArr;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TCrossCollaborateGetInviteListRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TCrossCollaborateGetInviteListRsp)
  return false;
#undef DO_
}

void TCrossCollaborateGetInviteListRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TCrossCollaborateGetInviteListRsp)
  // repeated .pb.TCrossCollaborateInviteUserInfo UserArr = 1;
  for (int i = 0; i < this->userarr_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->userarr(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TCrossCollaborateGetInviteListRsp)
}

::google::protobuf::uint8* TCrossCollaborateGetInviteListRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TCrossCollaborateGetInviteListRsp)
  // repeated .pb.TCrossCollaborateInviteUserInfo UserArr = 1;
  for (int i = 0; i < this->userarr_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->userarr(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TCrossCollaborateGetInviteListRsp)
  return target;
}

int TCrossCollaborateGetInviteListRsp::ByteSize() const {
  int total_size = 0;

  // repeated .pb.TCrossCollaborateInviteUserInfo UserArr = 1;
  total_size += 1 * this->userarr_size();
  for (int i = 0; i < this->userarr_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->userarr(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TCrossCollaborateGetInviteListRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TCrossCollaborateGetInviteListRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TCrossCollaborateGetInviteListRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TCrossCollaborateGetInviteListRsp::MergeFrom(const TCrossCollaborateGetInviteListRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  userarr_.MergeFrom(from.userarr_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TCrossCollaborateGetInviteListRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TCrossCollaborateGetInviteListRsp::CopyFrom(const TCrossCollaborateGetInviteListRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TCrossCollaborateGetInviteListRsp::IsInitialized() const {

  return true;
}

void TCrossCollaborateGetInviteListRsp::Swap(TCrossCollaborateGetInviteListRsp* other) {
  if (other != this) {
    userarr_.Swap(&other->userarr_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TCrossCollaborateGetInviteListRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TCrossCollaborateGetInviteListRsp_descriptor_;
  metadata.reflection = TCrossCollaborateGetInviteListRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TCrossCollaborateInviteMemberReq::kInviteUidFieldNumber;
const int TCrossCollaborateInviteMemberReq::kInviteServerIdFieldNumber;
#endif  // !_MSC_VER

TCrossCollaborateInviteMemberReq::TCrossCollaborateInviteMemberReq()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TCrossCollaborateInviteMemberReq)
}

void TCrossCollaborateInviteMemberReq::InitAsDefaultInstance() {
}

TCrossCollaborateInviteMemberReq::TCrossCollaborateInviteMemberReq(const TCrossCollaborateInviteMemberReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TCrossCollaborateInviteMemberReq)
}

void TCrossCollaborateInviteMemberReq::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  inviteuid_ = GOOGLE_ULONGLONG(0);
  inviteserverid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TCrossCollaborateInviteMemberReq::~TCrossCollaborateInviteMemberReq() {
  // @@protoc_insertion_point(destructor:pb.TCrossCollaborateInviteMemberReq)
  SharedDtor();
}

void TCrossCollaborateInviteMemberReq::SharedDtor() {
  if (inviteserverid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete inviteserverid_;
  }
  if (this != default_instance_) {
  }
}

void TCrossCollaborateInviteMemberReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TCrossCollaborateInviteMemberReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TCrossCollaborateInviteMemberReq_descriptor_;
}

const TCrossCollaborateInviteMemberReq& TCrossCollaborateInviteMemberReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fCrossCollaborate_2eproto();
  return *default_instance_;
}

TCrossCollaborateInviteMemberReq* TCrossCollaborateInviteMemberReq::default_instance_ = NULL;

TCrossCollaborateInviteMemberReq* TCrossCollaborateInviteMemberReq::New() const {
  return new TCrossCollaborateInviteMemberReq;
}

void TCrossCollaborateInviteMemberReq::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    inviteuid_ = GOOGLE_ULONGLONG(0);
    if (has_inviteserverid()) {
      if (inviteserverid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        inviteserverid_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TCrossCollaborateInviteMemberReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TCrossCollaborateInviteMemberReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 InviteUid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &inviteuid_)));
          set_has_inviteuid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_InviteServerId;
        break;
      }

      // optional string InviteServerId = 2;
      case 2: {
        if (tag == 18) {
         parse_InviteServerId:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_inviteserverid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->inviteserverid().data(), this->inviteserverid().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "inviteserverid");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TCrossCollaborateInviteMemberReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TCrossCollaborateInviteMemberReq)
  return false;
#undef DO_
}

void TCrossCollaborateInviteMemberReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TCrossCollaborateInviteMemberReq)
  // optional uint64 InviteUid = 1;
  if (has_inviteuid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->inviteuid(), output);
  }

  // optional string InviteServerId = 2;
  if (has_inviteserverid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->inviteserverid().data(), this->inviteserverid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "inviteserverid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->inviteserverid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TCrossCollaborateInviteMemberReq)
}

::google::protobuf::uint8* TCrossCollaborateInviteMemberReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TCrossCollaborateInviteMemberReq)
  // optional uint64 InviteUid = 1;
  if (has_inviteuid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->inviteuid(), target);
  }

  // optional string InviteServerId = 2;
  if (has_inviteserverid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->inviteserverid().data(), this->inviteserverid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "inviteserverid");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->inviteserverid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TCrossCollaborateInviteMemberReq)
  return target;
}

int TCrossCollaborateInviteMemberReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 InviteUid = 1;
    if (has_inviteuid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->inviteuid());
    }

    // optional string InviteServerId = 2;
    if (has_inviteserverid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->inviteserverid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TCrossCollaborateInviteMemberReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TCrossCollaborateInviteMemberReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TCrossCollaborateInviteMemberReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TCrossCollaborateInviteMemberReq::MergeFrom(const TCrossCollaborateInviteMemberReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_inviteuid()) {
      set_inviteuid(from.inviteuid());
    }
    if (from.has_inviteserverid()) {
      set_inviteserverid(from.inviteserverid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TCrossCollaborateInviteMemberReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TCrossCollaborateInviteMemberReq::CopyFrom(const TCrossCollaborateInviteMemberReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TCrossCollaborateInviteMemberReq::IsInitialized() const {

  return true;
}

void TCrossCollaborateInviteMemberReq::Swap(TCrossCollaborateInviteMemberReq* other) {
  if (other != this) {
    std::swap(inviteuid_, other->inviteuid_);
    std::swap(inviteserverid_, other->inviteserverid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TCrossCollaborateInviteMemberReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TCrossCollaborateInviteMemberReq_descriptor_;
  metadata.reflection = TCrossCollaborateInviteMemberReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TCrossCollaborateInviteMemberRsp::kTeamIdFieldNumber;
#endif  // !_MSC_VER

TCrossCollaborateInviteMemberRsp::TCrossCollaborateInviteMemberRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TCrossCollaborateInviteMemberRsp)
}

void TCrossCollaborateInviteMemberRsp::InitAsDefaultInstance() {
}

TCrossCollaborateInviteMemberRsp::TCrossCollaborateInviteMemberRsp(const TCrossCollaborateInviteMemberRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TCrossCollaborateInviteMemberRsp)
}

void TCrossCollaborateInviteMemberRsp::SharedCtor() {
  _cached_size_ = 0;
  teamid_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TCrossCollaborateInviteMemberRsp::~TCrossCollaborateInviteMemberRsp() {
  // @@protoc_insertion_point(destructor:pb.TCrossCollaborateInviteMemberRsp)
  SharedDtor();
}

void TCrossCollaborateInviteMemberRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TCrossCollaborateInviteMemberRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TCrossCollaborateInviteMemberRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TCrossCollaborateInviteMemberRsp_descriptor_;
}

const TCrossCollaborateInviteMemberRsp& TCrossCollaborateInviteMemberRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fCrossCollaborate_2eproto();
  return *default_instance_;
}

TCrossCollaborateInviteMemberRsp* TCrossCollaborateInviteMemberRsp::default_instance_ = NULL;

TCrossCollaborateInviteMemberRsp* TCrossCollaborateInviteMemberRsp::New() const {
  return new TCrossCollaborateInviteMemberRsp;
}

void TCrossCollaborateInviteMemberRsp::Clear() {
  teamid_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TCrossCollaborateInviteMemberRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TCrossCollaborateInviteMemberRsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 TeamId = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &teamid_)));
          set_has_teamid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TCrossCollaborateInviteMemberRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TCrossCollaborateInviteMemberRsp)
  return false;
#undef DO_
}

void TCrossCollaborateInviteMemberRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TCrossCollaborateInviteMemberRsp)
  // optional uint64 TeamId = 1;
  if (has_teamid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->teamid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TCrossCollaborateInviteMemberRsp)
}

::google::protobuf::uint8* TCrossCollaborateInviteMemberRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TCrossCollaborateInviteMemberRsp)
  // optional uint64 TeamId = 1;
  if (has_teamid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->teamid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TCrossCollaborateInviteMemberRsp)
  return target;
}

int TCrossCollaborateInviteMemberRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 TeamId = 1;
    if (has_teamid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->teamid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TCrossCollaborateInviteMemberRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TCrossCollaborateInviteMemberRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TCrossCollaborateInviteMemberRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TCrossCollaborateInviteMemberRsp::MergeFrom(const TCrossCollaborateInviteMemberRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_teamid()) {
      set_teamid(from.teamid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TCrossCollaborateInviteMemberRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TCrossCollaborateInviteMemberRsp::CopyFrom(const TCrossCollaborateInviteMemberRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TCrossCollaborateInviteMemberRsp::IsInitialized() const {

  return true;
}

void TCrossCollaborateInviteMemberRsp::Swap(TCrossCollaborateInviteMemberRsp* other) {
  if (other != this) {
    std::swap(teamid_, other->teamid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TCrossCollaborateInviteMemberRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TCrossCollaborateInviteMemberRsp_descriptor_;
  metadata.reflection = TCrossCollaborateInviteMemberRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TCrossCollaborateKickMemberReq::kTeamIdFieldNumber;
const int TCrossCollaborateKickMemberReq::kKickUidFieldNumber;
#endif  // !_MSC_VER

TCrossCollaborateKickMemberReq::TCrossCollaborateKickMemberReq()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TCrossCollaborateKickMemberReq)
}

void TCrossCollaborateKickMemberReq::InitAsDefaultInstance() {
}

TCrossCollaborateKickMemberReq::TCrossCollaborateKickMemberReq(const TCrossCollaborateKickMemberReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TCrossCollaborateKickMemberReq)
}

void TCrossCollaborateKickMemberReq::SharedCtor() {
  _cached_size_ = 0;
  teamid_ = GOOGLE_ULONGLONG(0);
  kickuid_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TCrossCollaborateKickMemberReq::~TCrossCollaborateKickMemberReq() {
  // @@protoc_insertion_point(destructor:pb.TCrossCollaborateKickMemberReq)
  SharedDtor();
}

void TCrossCollaborateKickMemberReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TCrossCollaborateKickMemberReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TCrossCollaborateKickMemberReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TCrossCollaborateKickMemberReq_descriptor_;
}

const TCrossCollaborateKickMemberReq& TCrossCollaborateKickMemberReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fCrossCollaborate_2eproto();
  return *default_instance_;
}

TCrossCollaborateKickMemberReq* TCrossCollaborateKickMemberReq::default_instance_ = NULL;

TCrossCollaborateKickMemberReq* TCrossCollaborateKickMemberReq::New() const {
  return new TCrossCollaborateKickMemberReq;
}

void TCrossCollaborateKickMemberReq::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<TCrossCollaborateKickMemberReq*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(teamid_, kickuid_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TCrossCollaborateKickMemberReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TCrossCollaborateKickMemberReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 TeamId = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &teamid_)));
          set_has_teamid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_KickUid;
        break;
      }

      // optional uint64 KickUid = 2;
      case 2: {
        if (tag == 16) {
         parse_KickUid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &kickuid_)));
          set_has_kickuid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TCrossCollaborateKickMemberReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TCrossCollaborateKickMemberReq)
  return false;
#undef DO_
}

void TCrossCollaborateKickMemberReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TCrossCollaborateKickMemberReq)
  // optional uint64 TeamId = 1;
  if (has_teamid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->teamid(), output);
  }

  // optional uint64 KickUid = 2;
  if (has_kickuid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->kickuid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TCrossCollaborateKickMemberReq)
}

::google::protobuf::uint8* TCrossCollaborateKickMemberReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TCrossCollaborateKickMemberReq)
  // optional uint64 TeamId = 1;
  if (has_teamid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->teamid(), target);
  }

  // optional uint64 KickUid = 2;
  if (has_kickuid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->kickuid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TCrossCollaborateKickMemberReq)
  return target;
}

int TCrossCollaborateKickMemberReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 TeamId = 1;
    if (has_teamid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->teamid());
    }

    // optional uint64 KickUid = 2;
    if (has_kickuid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->kickuid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TCrossCollaborateKickMemberReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TCrossCollaborateKickMemberReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TCrossCollaborateKickMemberReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TCrossCollaborateKickMemberReq::MergeFrom(const TCrossCollaborateKickMemberReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_teamid()) {
      set_teamid(from.teamid());
    }
    if (from.has_kickuid()) {
      set_kickuid(from.kickuid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TCrossCollaborateKickMemberReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TCrossCollaborateKickMemberReq::CopyFrom(const TCrossCollaborateKickMemberReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TCrossCollaborateKickMemberReq::IsInitialized() const {

  return true;
}

void TCrossCollaborateKickMemberReq::Swap(TCrossCollaborateKickMemberReq* other) {
  if (other != this) {
    std::swap(teamid_, other->teamid_);
    std::swap(kickuid_, other->kickuid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TCrossCollaborateKickMemberReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TCrossCollaborateKickMemberReq_descriptor_;
  metadata.reflection = TCrossCollaborateKickMemberReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TCrossCollaborateGetMyFormationRsp::kFormationArrFieldNumber;
#endif  // !_MSC_VER

TCrossCollaborateGetMyFormationRsp::TCrossCollaborateGetMyFormationRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TCrossCollaborateGetMyFormationRsp)
}

void TCrossCollaborateGetMyFormationRsp::InitAsDefaultInstance() {
}

TCrossCollaborateGetMyFormationRsp::TCrossCollaborateGetMyFormationRsp(const TCrossCollaborateGetMyFormationRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TCrossCollaborateGetMyFormationRsp)
}

void TCrossCollaborateGetMyFormationRsp::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TCrossCollaborateGetMyFormationRsp::~TCrossCollaborateGetMyFormationRsp() {
  // @@protoc_insertion_point(destructor:pb.TCrossCollaborateGetMyFormationRsp)
  SharedDtor();
}

void TCrossCollaborateGetMyFormationRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TCrossCollaborateGetMyFormationRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TCrossCollaborateGetMyFormationRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TCrossCollaborateGetMyFormationRsp_descriptor_;
}

const TCrossCollaborateGetMyFormationRsp& TCrossCollaborateGetMyFormationRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fCrossCollaborate_2eproto();
  return *default_instance_;
}

TCrossCollaborateGetMyFormationRsp* TCrossCollaborateGetMyFormationRsp::default_instance_ = NULL;

TCrossCollaborateGetMyFormationRsp* TCrossCollaborateGetMyFormationRsp::New() const {
  return new TCrossCollaborateGetMyFormationRsp;
}

void TCrossCollaborateGetMyFormationRsp::Clear() {
  formationarr_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TCrossCollaborateGetMyFormationRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TCrossCollaborateGetMyFormationRsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .pb.TCrossCollaborateFormationInfo FormationArr = 1;
      case 1: {
        if (tag == 10) {
         parse_FormationArr:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_formationarr()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_FormationArr;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TCrossCollaborateGetMyFormationRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TCrossCollaborateGetMyFormationRsp)
  return false;
#undef DO_
}

void TCrossCollaborateGetMyFormationRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TCrossCollaborateGetMyFormationRsp)
  // repeated .pb.TCrossCollaborateFormationInfo FormationArr = 1;
  for (int i = 0; i < this->formationarr_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->formationarr(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TCrossCollaborateGetMyFormationRsp)
}

::google::protobuf::uint8* TCrossCollaborateGetMyFormationRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TCrossCollaborateGetMyFormationRsp)
  // repeated .pb.TCrossCollaborateFormationInfo FormationArr = 1;
  for (int i = 0; i < this->formationarr_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->formationarr(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TCrossCollaborateGetMyFormationRsp)
  return target;
}

int TCrossCollaborateGetMyFormationRsp::ByteSize() const {
  int total_size = 0;

  // repeated .pb.TCrossCollaborateFormationInfo FormationArr = 1;
  total_size += 1 * this->formationarr_size();
  for (int i = 0; i < this->formationarr_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->formationarr(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TCrossCollaborateGetMyFormationRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TCrossCollaborateGetMyFormationRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TCrossCollaborateGetMyFormationRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TCrossCollaborateGetMyFormationRsp::MergeFrom(const TCrossCollaborateGetMyFormationRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  formationarr_.MergeFrom(from.formationarr_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TCrossCollaborateGetMyFormationRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TCrossCollaborateGetMyFormationRsp::CopyFrom(const TCrossCollaborateGetMyFormationRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TCrossCollaborateGetMyFormationRsp::IsInitialized() const {

  return true;
}

void TCrossCollaborateGetMyFormationRsp::Swap(TCrossCollaborateGetMyFormationRsp* other) {
  if (other != this) {
    formationarr_.Swap(&other->formationarr_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TCrossCollaborateGetMyFormationRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TCrossCollaborateGetMyFormationRsp_descriptor_;
  metadata.reflection = TCrossCollaborateGetMyFormationRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TCrossCollaborateSetFormationReq::kFormationArrFieldNumber;
#endif  // !_MSC_VER

TCrossCollaborateSetFormationReq::TCrossCollaborateSetFormationReq()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TCrossCollaborateSetFormationReq)
}

void TCrossCollaborateSetFormationReq::InitAsDefaultInstance() {
}

TCrossCollaborateSetFormationReq::TCrossCollaborateSetFormationReq(const TCrossCollaborateSetFormationReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TCrossCollaborateSetFormationReq)
}

void TCrossCollaborateSetFormationReq::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TCrossCollaborateSetFormationReq::~TCrossCollaborateSetFormationReq() {
  // @@protoc_insertion_point(destructor:pb.TCrossCollaborateSetFormationReq)
  SharedDtor();
}

void TCrossCollaborateSetFormationReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TCrossCollaborateSetFormationReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TCrossCollaborateSetFormationReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TCrossCollaborateSetFormationReq_descriptor_;
}

const TCrossCollaborateSetFormationReq& TCrossCollaborateSetFormationReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fCrossCollaborate_2eproto();
  return *default_instance_;
}

TCrossCollaborateSetFormationReq* TCrossCollaborateSetFormationReq::default_instance_ = NULL;

TCrossCollaborateSetFormationReq* TCrossCollaborateSetFormationReq::New() const {
  return new TCrossCollaborateSetFormationReq;
}

void TCrossCollaborateSetFormationReq::Clear() {
  formationarr_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TCrossCollaborateSetFormationReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TCrossCollaborateSetFormationReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .pb.TCrossCollaborateFormationInfo FormationArr = 1;
      case 1: {
        if (tag == 10) {
         parse_FormationArr:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_formationarr()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_FormationArr;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TCrossCollaborateSetFormationReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TCrossCollaborateSetFormationReq)
  return false;
#undef DO_
}

void TCrossCollaborateSetFormationReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TCrossCollaborateSetFormationReq)
  // repeated .pb.TCrossCollaborateFormationInfo FormationArr = 1;
  for (int i = 0; i < this->formationarr_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->formationarr(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TCrossCollaborateSetFormationReq)
}

::google::protobuf::uint8* TCrossCollaborateSetFormationReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TCrossCollaborateSetFormationReq)
  // repeated .pb.TCrossCollaborateFormationInfo FormationArr = 1;
  for (int i = 0; i < this->formationarr_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->formationarr(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TCrossCollaborateSetFormationReq)
  return target;
}

int TCrossCollaborateSetFormationReq::ByteSize() const {
  int total_size = 0;

  // repeated .pb.TCrossCollaborateFormationInfo FormationArr = 1;
  total_size += 1 * this->formationarr_size();
  for (int i = 0; i < this->formationarr_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->formationarr(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TCrossCollaborateSetFormationReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TCrossCollaborateSetFormationReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TCrossCollaborateSetFormationReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TCrossCollaborateSetFormationReq::MergeFrom(const TCrossCollaborateSetFormationReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  formationarr_.MergeFrom(from.formationarr_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TCrossCollaborateSetFormationReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TCrossCollaborateSetFormationReq::CopyFrom(const TCrossCollaborateSetFormationReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TCrossCollaborateSetFormationReq::IsInitialized() const {

  return true;
}

void TCrossCollaborateSetFormationReq::Swap(TCrossCollaborateSetFormationReq* other) {
  if (other != this) {
    formationarr_.Swap(&other->formationarr_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TCrossCollaborateSetFormationReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TCrossCollaborateSetFormationReq_descriptor_;
  metadata.reflection = TCrossCollaborateSetFormationReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TCrossCollaborateGetEnemyFormationReq::kEnemyUidFieldNumber;
#endif  // !_MSC_VER

TCrossCollaborateGetEnemyFormationReq::TCrossCollaborateGetEnemyFormationReq()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TCrossCollaborateGetEnemyFormationReq)
}

void TCrossCollaborateGetEnemyFormationReq::InitAsDefaultInstance() {
}

TCrossCollaborateGetEnemyFormationReq::TCrossCollaborateGetEnemyFormationReq(const TCrossCollaborateGetEnemyFormationReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TCrossCollaborateGetEnemyFormationReq)
}

void TCrossCollaborateGetEnemyFormationReq::SharedCtor() {
  _cached_size_ = 0;
  enemyuid_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TCrossCollaborateGetEnemyFormationReq::~TCrossCollaborateGetEnemyFormationReq() {
  // @@protoc_insertion_point(destructor:pb.TCrossCollaborateGetEnemyFormationReq)
  SharedDtor();
}

void TCrossCollaborateGetEnemyFormationReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TCrossCollaborateGetEnemyFormationReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TCrossCollaborateGetEnemyFormationReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TCrossCollaborateGetEnemyFormationReq_descriptor_;
}

const TCrossCollaborateGetEnemyFormationReq& TCrossCollaborateGetEnemyFormationReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fCrossCollaborate_2eproto();
  return *default_instance_;
}

TCrossCollaborateGetEnemyFormationReq* TCrossCollaborateGetEnemyFormationReq::default_instance_ = NULL;

TCrossCollaborateGetEnemyFormationReq* TCrossCollaborateGetEnemyFormationReq::New() const {
  return new TCrossCollaborateGetEnemyFormationReq;
}

void TCrossCollaborateGetEnemyFormationReq::Clear() {
  enemyuid_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TCrossCollaborateGetEnemyFormationReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TCrossCollaborateGetEnemyFormationReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 EnemyUid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &enemyuid_)));
          set_has_enemyuid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TCrossCollaborateGetEnemyFormationReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TCrossCollaborateGetEnemyFormationReq)
  return false;
#undef DO_
}

void TCrossCollaborateGetEnemyFormationReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TCrossCollaborateGetEnemyFormationReq)
  // optional uint64 EnemyUid = 1;
  if (has_enemyuid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->enemyuid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TCrossCollaborateGetEnemyFormationReq)
}

::google::protobuf::uint8* TCrossCollaborateGetEnemyFormationReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TCrossCollaborateGetEnemyFormationReq)
  // optional uint64 EnemyUid = 1;
  if (has_enemyuid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->enemyuid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TCrossCollaborateGetEnemyFormationReq)
  return target;
}

int TCrossCollaborateGetEnemyFormationReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 EnemyUid = 1;
    if (has_enemyuid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->enemyuid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TCrossCollaborateGetEnemyFormationReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TCrossCollaborateGetEnemyFormationReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TCrossCollaborateGetEnemyFormationReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TCrossCollaborateGetEnemyFormationReq::MergeFrom(const TCrossCollaborateGetEnemyFormationReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_enemyuid()) {
      set_enemyuid(from.enemyuid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TCrossCollaborateGetEnemyFormationReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TCrossCollaborateGetEnemyFormationReq::CopyFrom(const TCrossCollaborateGetEnemyFormationReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TCrossCollaborateGetEnemyFormationReq::IsInitialized() const {

  return true;
}

void TCrossCollaborateGetEnemyFormationReq::Swap(TCrossCollaborateGetEnemyFormationReq* other) {
  if (other != this) {
    std::swap(enemyuid_, other->enemyuid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TCrossCollaborateGetEnemyFormationReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TCrossCollaborateGetEnemyFormationReq_descriptor_;
  metadata.reflection = TCrossCollaborateGetEnemyFormationReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TCrossCollaborateGetEnemyFormationRsp::kFormationArrFieldNumber;
const int TCrossCollaborateGetEnemyFormationRsp::kRankArrFieldNumber;
#endif  // !_MSC_VER

TCrossCollaborateGetEnemyFormationRsp::TCrossCollaborateGetEnemyFormationRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TCrossCollaborateGetEnemyFormationRsp)
}

void TCrossCollaborateGetEnemyFormationRsp::InitAsDefaultInstance() {
}

TCrossCollaborateGetEnemyFormationRsp::TCrossCollaborateGetEnemyFormationRsp(const TCrossCollaborateGetEnemyFormationRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TCrossCollaborateGetEnemyFormationRsp)
}

void TCrossCollaborateGetEnemyFormationRsp::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TCrossCollaborateGetEnemyFormationRsp::~TCrossCollaborateGetEnemyFormationRsp() {
  // @@protoc_insertion_point(destructor:pb.TCrossCollaborateGetEnemyFormationRsp)
  SharedDtor();
}

void TCrossCollaborateGetEnemyFormationRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TCrossCollaborateGetEnemyFormationRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TCrossCollaborateGetEnemyFormationRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TCrossCollaborateGetEnemyFormationRsp_descriptor_;
}

const TCrossCollaborateGetEnemyFormationRsp& TCrossCollaborateGetEnemyFormationRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fCrossCollaborate_2eproto();
  return *default_instance_;
}

TCrossCollaborateGetEnemyFormationRsp* TCrossCollaborateGetEnemyFormationRsp::default_instance_ = NULL;

TCrossCollaborateGetEnemyFormationRsp* TCrossCollaborateGetEnemyFormationRsp::New() const {
  return new TCrossCollaborateGetEnemyFormationRsp;
}

void TCrossCollaborateGetEnemyFormationRsp::Clear() {
  formationarr_.Clear();
  rankarr_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TCrossCollaborateGetEnemyFormationRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TCrossCollaborateGetEnemyFormationRsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .pb.TCrossCollaborateEnemyFormation FormationArr = 1;
      case 1: {
        if (tag == 10) {
         parse_FormationArr:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_formationarr()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_FormationArr;
        if (input->ExpectTag(18)) goto parse_RankArr;
        break;
      }

      // repeated .pb.TRankSingle RankArr = 2;
      case 2: {
        if (tag == 18) {
         parse_RankArr:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_rankarr()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_RankArr;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TCrossCollaborateGetEnemyFormationRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TCrossCollaborateGetEnemyFormationRsp)
  return false;
#undef DO_
}

void TCrossCollaborateGetEnemyFormationRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TCrossCollaborateGetEnemyFormationRsp)
  // repeated .pb.TCrossCollaborateEnemyFormation FormationArr = 1;
  for (int i = 0; i < this->formationarr_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->formationarr(i), output);
  }

  // repeated .pb.TRankSingle RankArr = 2;
  for (int i = 0; i < this->rankarr_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->rankarr(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TCrossCollaborateGetEnemyFormationRsp)
}

::google::protobuf::uint8* TCrossCollaborateGetEnemyFormationRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TCrossCollaborateGetEnemyFormationRsp)
  // repeated .pb.TCrossCollaborateEnemyFormation FormationArr = 1;
  for (int i = 0; i < this->formationarr_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->formationarr(i), target);
  }

  // repeated .pb.TRankSingle RankArr = 2;
  for (int i = 0; i < this->rankarr_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->rankarr(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TCrossCollaborateGetEnemyFormationRsp)
  return target;
}

int TCrossCollaborateGetEnemyFormationRsp::ByteSize() const {
  int total_size = 0;

  // repeated .pb.TCrossCollaborateEnemyFormation FormationArr = 1;
  total_size += 1 * this->formationarr_size();
  for (int i = 0; i < this->formationarr_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->formationarr(i));
  }

  // repeated .pb.TRankSingle RankArr = 2;
  total_size += 1 * this->rankarr_size();
  for (int i = 0; i < this->rankarr_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->rankarr(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TCrossCollaborateGetEnemyFormationRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TCrossCollaborateGetEnemyFormationRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TCrossCollaborateGetEnemyFormationRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TCrossCollaborateGetEnemyFormationRsp::MergeFrom(const TCrossCollaborateGetEnemyFormationRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  formationarr_.MergeFrom(from.formationarr_);
  rankarr_.MergeFrom(from.rankarr_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TCrossCollaborateGetEnemyFormationRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TCrossCollaborateGetEnemyFormationRsp::CopyFrom(const TCrossCollaborateGetEnemyFormationRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TCrossCollaborateGetEnemyFormationRsp::IsInitialized() const {

  if (!::google::protobuf::internal::AllAreInitialized(this->formationarr())) return false;
  return true;
}

void TCrossCollaborateGetEnemyFormationRsp::Swap(TCrossCollaborateGetEnemyFormationRsp* other) {
  if (other != this) {
    formationarr_.Swap(&other->formationarr_);
    rankarr_.Swap(&other->rankarr_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TCrossCollaborateGetEnemyFormationRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TCrossCollaborateGetEnemyFormationRsp_descriptor_;
  metadata.reflection = TCrossCollaborateGetEnemyFormationRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TCrossCollaborateSwapFightOrderReq::kTeamIdFieldNumber;
const int TCrossCollaborateSwapFightOrderReq::kUidArrFieldNumber;
#endif  // !_MSC_VER

TCrossCollaborateSwapFightOrderReq::TCrossCollaborateSwapFightOrderReq()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TCrossCollaborateSwapFightOrderReq)
}

void TCrossCollaborateSwapFightOrderReq::InitAsDefaultInstance() {
}

TCrossCollaborateSwapFightOrderReq::TCrossCollaborateSwapFightOrderReq(const TCrossCollaborateSwapFightOrderReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TCrossCollaborateSwapFightOrderReq)
}

void TCrossCollaborateSwapFightOrderReq::SharedCtor() {
  _cached_size_ = 0;
  teamid_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TCrossCollaborateSwapFightOrderReq::~TCrossCollaborateSwapFightOrderReq() {
  // @@protoc_insertion_point(destructor:pb.TCrossCollaborateSwapFightOrderReq)
  SharedDtor();
}

void TCrossCollaborateSwapFightOrderReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TCrossCollaborateSwapFightOrderReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TCrossCollaborateSwapFightOrderReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TCrossCollaborateSwapFightOrderReq_descriptor_;
}

const TCrossCollaborateSwapFightOrderReq& TCrossCollaborateSwapFightOrderReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fCrossCollaborate_2eproto();
  return *default_instance_;
}

TCrossCollaborateSwapFightOrderReq* TCrossCollaborateSwapFightOrderReq::default_instance_ = NULL;

TCrossCollaborateSwapFightOrderReq* TCrossCollaborateSwapFightOrderReq::New() const {
  return new TCrossCollaborateSwapFightOrderReq;
}

void TCrossCollaborateSwapFightOrderReq::Clear() {
  teamid_ = GOOGLE_ULONGLONG(0);
  uidarr_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TCrossCollaborateSwapFightOrderReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TCrossCollaborateSwapFightOrderReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 TeamId = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &teamid_)));
          set_has_teamid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_UidArr;
        break;
      }

      // repeated uint64 UidArr = 2;
      case 2: {
        if (tag == 16) {
         parse_UidArr:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 1, 16, input, this->mutable_uidarr())));
        } else if (tag == 18) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, this->mutable_uidarr())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_UidArr;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TCrossCollaborateSwapFightOrderReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TCrossCollaborateSwapFightOrderReq)
  return false;
#undef DO_
}

void TCrossCollaborateSwapFightOrderReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TCrossCollaborateSwapFightOrderReq)
  // optional uint64 TeamId = 1;
  if (has_teamid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->teamid(), output);
  }

  // repeated uint64 UidArr = 2;
  for (int i = 0; i < this->uidarr_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(
      2, this->uidarr(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TCrossCollaborateSwapFightOrderReq)
}

::google::protobuf::uint8* TCrossCollaborateSwapFightOrderReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TCrossCollaborateSwapFightOrderReq)
  // optional uint64 TeamId = 1;
  if (has_teamid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->teamid(), target);
  }

  // repeated uint64 UidArr = 2;
  for (int i = 0; i < this->uidarr_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt64ToArray(2, this->uidarr(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TCrossCollaborateSwapFightOrderReq)
  return target;
}

int TCrossCollaborateSwapFightOrderReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 TeamId = 1;
    if (has_teamid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->teamid());
    }

  }
  // repeated uint64 UidArr = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->uidarr_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt64Size(this->uidarr(i));
    }
    total_size += 1 * this->uidarr_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TCrossCollaborateSwapFightOrderReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TCrossCollaborateSwapFightOrderReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TCrossCollaborateSwapFightOrderReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TCrossCollaborateSwapFightOrderReq::MergeFrom(const TCrossCollaborateSwapFightOrderReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  uidarr_.MergeFrom(from.uidarr_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_teamid()) {
      set_teamid(from.teamid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TCrossCollaborateSwapFightOrderReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TCrossCollaborateSwapFightOrderReq::CopyFrom(const TCrossCollaborateSwapFightOrderReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TCrossCollaborateSwapFightOrderReq::IsInitialized() const {

  return true;
}

void TCrossCollaborateSwapFightOrderReq::Swap(TCrossCollaborateSwapFightOrderReq* other) {
  if (other != this) {
    std::swap(teamid_, other->teamid_);
    uidarr_.Swap(&other->uidarr_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TCrossCollaborateSwapFightOrderReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TCrossCollaborateSwapFightOrderReq_descriptor_;
  metadata.reflection = TCrossCollaborateSwapFightOrderReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TCrossCollaborateGetBattleRecordReq::kTeamIdFieldNumber;
const int TCrossCollaborateGetBattleRecordReq::kRecordTimeFieldNumber;
#endif  // !_MSC_VER

TCrossCollaborateGetBattleRecordReq::TCrossCollaborateGetBattleRecordReq()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TCrossCollaborateGetBattleRecordReq)
}

void TCrossCollaborateGetBattleRecordReq::InitAsDefaultInstance() {
}

TCrossCollaborateGetBattleRecordReq::TCrossCollaborateGetBattleRecordReq(const TCrossCollaborateGetBattleRecordReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TCrossCollaborateGetBattleRecordReq)
}

void TCrossCollaborateGetBattleRecordReq::SharedCtor() {
  _cached_size_ = 0;
  teamid_ = GOOGLE_ULONGLONG(0);
  recordtime_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TCrossCollaborateGetBattleRecordReq::~TCrossCollaborateGetBattleRecordReq() {
  // @@protoc_insertion_point(destructor:pb.TCrossCollaborateGetBattleRecordReq)
  SharedDtor();
}

void TCrossCollaborateGetBattleRecordReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TCrossCollaborateGetBattleRecordReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TCrossCollaborateGetBattleRecordReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TCrossCollaborateGetBattleRecordReq_descriptor_;
}

const TCrossCollaborateGetBattleRecordReq& TCrossCollaborateGetBattleRecordReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fCrossCollaborate_2eproto();
  return *default_instance_;
}

TCrossCollaborateGetBattleRecordReq* TCrossCollaborateGetBattleRecordReq::default_instance_ = NULL;

TCrossCollaborateGetBattleRecordReq* TCrossCollaborateGetBattleRecordReq::New() const {
  return new TCrossCollaborateGetBattleRecordReq;
}

void TCrossCollaborateGetBattleRecordReq::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<TCrossCollaborateGetBattleRecordReq*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(teamid_, recordtime_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TCrossCollaborateGetBattleRecordReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TCrossCollaborateGetBattleRecordReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 TeamId = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &teamid_)));
          set_has_teamid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_RecordTime;
        break;
      }

      // optional uint64 RecordTime = 2;
      case 2: {
        if (tag == 16) {
         parse_RecordTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &recordtime_)));
          set_has_recordtime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TCrossCollaborateGetBattleRecordReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TCrossCollaborateGetBattleRecordReq)
  return false;
#undef DO_
}

void TCrossCollaborateGetBattleRecordReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TCrossCollaborateGetBattleRecordReq)
  // optional uint64 TeamId = 1;
  if (has_teamid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->teamid(), output);
  }

  // optional uint64 RecordTime = 2;
  if (has_recordtime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->recordtime(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TCrossCollaborateGetBattleRecordReq)
}

::google::protobuf::uint8* TCrossCollaborateGetBattleRecordReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TCrossCollaborateGetBattleRecordReq)
  // optional uint64 TeamId = 1;
  if (has_teamid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->teamid(), target);
  }

  // optional uint64 RecordTime = 2;
  if (has_recordtime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->recordtime(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TCrossCollaborateGetBattleRecordReq)
  return target;
}

int TCrossCollaborateGetBattleRecordReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 TeamId = 1;
    if (has_teamid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->teamid());
    }

    // optional uint64 RecordTime = 2;
    if (has_recordtime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->recordtime());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TCrossCollaborateGetBattleRecordReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TCrossCollaborateGetBattleRecordReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TCrossCollaborateGetBattleRecordReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TCrossCollaborateGetBattleRecordReq::MergeFrom(const TCrossCollaborateGetBattleRecordReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_teamid()) {
      set_teamid(from.teamid());
    }
    if (from.has_recordtime()) {
      set_recordtime(from.recordtime());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TCrossCollaborateGetBattleRecordReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TCrossCollaborateGetBattleRecordReq::CopyFrom(const TCrossCollaborateGetBattleRecordReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TCrossCollaborateGetBattleRecordReq::IsInitialized() const {

  return true;
}

void TCrossCollaborateGetBattleRecordReq::Swap(TCrossCollaborateGetBattleRecordReq* other) {
  if (other != this) {
    std::swap(teamid_, other->teamid_);
    std::swap(recordtime_, other->recordtime_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TCrossCollaborateGetBattleRecordReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TCrossCollaborateGetBattleRecordReq_descriptor_;
  metadata.reflection = TCrossCollaborateGetBattleRecordReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TCrossCollaborateGetBattleRecordRsp::kBattleRecordArrFieldNumber;
#endif  // !_MSC_VER

TCrossCollaborateGetBattleRecordRsp::TCrossCollaborateGetBattleRecordRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TCrossCollaborateGetBattleRecordRsp)
}

void TCrossCollaborateGetBattleRecordRsp::InitAsDefaultInstance() {
}

TCrossCollaborateGetBattleRecordRsp::TCrossCollaborateGetBattleRecordRsp(const TCrossCollaborateGetBattleRecordRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TCrossCollaborateGetBattleRecordRsp)
}

void TCrossCollaborateGetBattleRecordRsp::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TCrossCollaborateGetBattleRecordRsp::~TCrossCollaborateGetBattleRecordRsp() {
  // @@protoc_insertion_point(destructor:pb.TCrossCollaborateGetBattleRecordRsp)
  SharedDtor();
}

void TCrossCollaborateGetBattleRecordRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TCrossCollaborateGetBattleRecordRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TCrossCollaborateGetBattleRecordRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TCrossCollaborateGetBattleRecordRsp_descriptor_;
}

const TCrossCollaborateGetBattleRecordRsp& TCrossCollaborateGetBattleRecordRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fCrossCollaborate_2eproto();
  return *default_instance_;
}

TCrossCollaborateGetBattleRecordRsp* TCrossCollaborateGetBattleRecordRsp::default_instance_ = NULL;

TCrossCollaborateGetBattleRecordRsp* TCrossCollaborateGetBattleRecordRsp::New() const {
  return new TCrossCollaborateGetBattleRecordRsp;
}

void TCrossCollaborateGetBattleRecordRsp::Clear() {
  battlerecordarr_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TCrossCollaborateGetBattleRecordRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TCrossCollaborateGetBattleRecordRsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .pb.TCrossCollaborateBattleRecord BattleRecordArr = 1;
      case 1: {
        if (tag == 10) {
         parse_BattleRecordArr:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_battlerecordarr()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_BattleRecordArr;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TCrossCollaborateGetBattleRecordRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TCrossCollaborateGetBattleRecordRsp)
  return false;
#undef DO_
}

void TCrossCollaborateGetBattleRecordRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TCrossCollaborateGetBattleRecordRsp)
  // repeated .pb.TCrossCollaborateBattleRecord BattleRecordArr = 1;
  for (int i = 0; i < this->battlerecordarr_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->battlerecordarr(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TCrossCollaborateGetBattleRecordRsp)
}

::google::protobuf::uint8* TCrossCollaborateGetBattleRecordRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TCrossCollaborateGetBattleRecordRsp)
  // repeated .pb.TCrossCollaborateBattleRecord BattleRecordArr = 1;
  for (int i = 0; i < this->battlerecordarr_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->battlerecordarr(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TCrossCollaborateGetBattleRecordRsp)
  return target;
}

int TCrossCollaborateGetBattleRecordRsp::ByteSize() const {
  int total_size = 0;

  // repeated .pb.TCrossCollaborateBattleRecord BattleRecordArr = 1;
  total_size += 1 * this->battlerecordarr_size();
  for (int i = 0; i < this->battlerecordarr_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->battlerecordarr(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TCrossCollaborateGetBattleRecordRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TCrossCollaborateGetBattleRecordRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TCrossCollaborateGetBattleRecordRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TCrossCollaborateGetBattleRecordRsp::MergeFrom(const TCrossCollaborateGetBattleRecordRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  battlerecordarr_.MergeFrom(from.battlerecordarr_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TCrossCollaborateGetBattleRecordRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TCrossCollaborateGetBattleRecordRsp::CopyFrom(const TCrossCollaborateGetBattleRecordRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TCrossCollaborateGetBattleRecordRsp::IsInitialized() const {

  if (!::google::protobuf::internal::AllAreInitialized(this->battlerecordarr())) return false;
  return true;
}

void TCrossCollaborateGetBattleRecordRsp::Swap(TCrossCollaborateGetBattleRecordRsp* other) {
  if (other != this) {
    battlerecordarr_.Swap(&other->battlerecordarr_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TCrossCollaborateGetBattleRecordRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TCrossCollaborateGetBattleRecordRsp_descriptor_;
  metadata.reflection = TCrossCollaborateGetBattleRecordRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TCrossCollaborateGetSimpleBattleRecordReq::kOffsetFieldNumber;
const int TCrossCollaborateGetSimpleBattleRecordReq::kLimitFieldNumber;
#endif  // !_MSC_VER

TCrossCollaborateGetSimpleBattleRecordReq::TCrossCollaborateGetSimpleBattleRecordReq()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TCrossCollaborateGetSimpleBattleRecordReq)
}

void TCrossCollaborateGetSimpleBattleRecordReq::InitAsDefaultInstance() {
}

TCrossCollaborateGetSimpleBattleRecordReq::TCrossCollaborateGetSimpleBattleRecordReq(const TCrossCollaborateGetSimpleBattleRecordReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TCrossCollaborateGetSimpleBattleRecordReq)
}

void TCrossCollaborateGetSimpleBattleRecordReq::SharedCtor() {
  _cached_size_ = 0;
  offset_ = 0u;
  limit_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TCrossCollaborateGetSimpleBattleRecordReq::~TCrossCollaborateGetSimpleBattleRecordReq() {
  // @@protoc_insertion_point(destructor:pb.TCrossCollaborateGetSimpleBattleRecordReq)
  SharedDtor();
}

void TCrossCollaborateGetSimpleBattleRecordReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TCrossCollaborateGetSimpleBattleRecordReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TCrossCollaborateGetSimpleBattleRecordReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TCrossCollaborateGetSimpleBattleRecordReq_descriptor_;
}

const TCrossCollaborateGetSimpleBattleRecordReq& TCrossCollaborateGetSimpleBattleRecordReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fCrossCollaborate_2eproto();
  return *default_instance_;
}

TCrossCollaborateGetSimpleBattleRecordReq* TCrossCollaborateGetSimpleBattleRecordReq::default_instance_ = NULL;

TCrossCollaborateGetSimpleBattleRecordReq* TCrossCollaborateGetSimpleBattleRecordReq::New() const {
  return new TCrossCollaborateGetSimpleBattleRecordReq;
}

void TCrossCollaborateGetSimpleBattleRecordReq::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<TCrossCollaborateGetSimpleBattleRecordReq*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(offset_, limit_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TCrossCollaborateGetSimpleBattleRecordReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TCrossCollaborateGetSimpleBattleRecordReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 Offset = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &offset_)));
          set_has_offset();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_Limit;
        break;
      }

      // optional uint32 Limit = 2;
      case 2: {
        if (tag == 16) {
         parse_Limit:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &limit_)));
          set_has_limit();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TCrossCollaborateGetSimpleBattleRecordReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TCrossCollaborateGetSimpleBattleRecordReq)
  return false;
#undef DO_
}

void TCrossCollaborateGetSimpleBattleRecordReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TCrossCollaborateGetSimpleBattleRecordReq)
  // optional uint32 Offset = 1;
  if (has_offset()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->offset(), output);
  }

  // optional uint32 Limit = 2;
  if (has_limit()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->limit(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TCrossCollaborateGetSimpleBattleRecordReq)
}

::google::protobuf::uint8* TCrossCollaborateGetSimpleBattleRecordReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TCrossCollaborateGetSimpleBattleRecordReq)
  // optional uint32 Offset = 1;
  if (has_offset()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->offset(), target);
  }

  // optional uint32 Limit = 2;
  if (has_limit()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->limit(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TCrossCollaborateGetSimpleBattleRecordReq)
  return target;
}

int TCrossCollaborateGetSimpleBattleRecordReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 Offset = 1;
    if (has_offset()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->offset());
    }

    // optional uint32 Limit = 2;
    if (has_limit()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->limit());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TCrossCollaborateGetSimpleBattleRecordReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TCrossCollaborateGetSimpleBattleRecordReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TCrossCollaborateGetSimpleBattleRecordReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TCrossCollaborateGetSimpleBattleRecordReq::MergeFrom(const TCrossCollaborateGetSimpleBattleRecordReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_offset()) {
      set_offset(from.offset());
    }
    if (from.has_limit()) {
      set_limit(from.limit());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TCrossCollaborateGetSimpleBattleRecordReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TCrossCollaborateGetSimpleBattleRecordReq::CopyFrom(const TCrossCollaborateGetSimpleBattleRecordReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TCrossCollaborateGetSimpleBattleRecordReq::IsInitialized() const {

  return true;
}

void TCrossCollaborateGetSimpleBattleRecordReq::Swap(TCrossCollaborateGetSimpleBattleRecordReq* other) {
  if (other != this) {
    std::swap(offset_, other->offset_);
    std::swap(limit_, other->limit_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TCrossCollaborateGetSimpleBattleRecordReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TCrossCollaborateGetSimpleBattleRecordReq_descriptor_;
  metadata.reflection = TCrossCollaborateGetSimpleBattleRecordReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TCrossCollaborateGetSimpleBattleRecordRsp::kSimpleBattleRecordArrFieldNumber;
#endif  // !_MSC_VER

TCrossCollaborateGetSimpleBattleRecordRsp::TCrossCollaborateGetSimpleBattleRecordRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TCrossCollaborateGetSimpleBattleRecordRsp)
}

void TCrossCollaborateGetSimpleBattleRecordRsp::InitAsDefaultInstance() {
}

TCrossCollaborateGetSimpleBattleRecordRsp::TCrossCollaborateGetSimpleBattleRecordRsp(const TCrossCollaborateGetSimpleBattleRecordRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TCrossCollaborateGetSimpleBattleRecordRsp)
}

void TCrossCollaborateGetSimpleBattleRecordRsp::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TCrossCollaborateGetSimpleBattleRecordRsp::~TCrossCollaborateGetSimpleBattleRecordRsp() {
  // @@protoc_insertion_point(destructor:pb.TCrossCollaborateGetSimpleBattleRecordRsp)
  SharedDtor();
}

void TCrossCollaborateGetSimpleBattleRecordRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TCrossCollaborateGetSimpleBattleRecordRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TCrossCollaborateGetSimpleBattleRecordRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TCrossCollaborateGetSimpleBattleRecordRsp_descriptor_;
}

const TCrossCollaborateGetSimpleBattleRecordRsp& TCrossCollaborateGetSimpleBattleRecordRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fCrossCollaborate_2eproto();
  return *default_instance_;
}

TCrossCollaborateGetSimpleBattleRecordRsp* TCrossCollaborateGetSimpleBattleRecordRsp::default_instance_ = NULL;

TCrossCollaborateGetSimpleBattleRecordRsp* TCrossCollaborateGetSimpleBattleRecordRsp::New() const {
  return new TCrossCollaborateGetSimpleBattleRecordRsp;
}

void TCrossCollaborateGetSimpleBattleRecordRsp::Clear() {
  simplebattlerecordarr_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TCrossCollaborateGetSimpleBattleRecordRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TCrossCollaborateGetSimpleBattleRecordRsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .pb.TCrossCollaborateSimpleBattleRecord SimpleBattleRecordArr = 1;
      case 1: {
        if (tag == 10) {
         parse_SimpleBattleRecordArr:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_simplebattlerecordarr()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_SimpleBattleRecordArr;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TCrossCollaborateGetSimpleBattleRecordRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TCrossCollaborateGetSimpleBattleRecordRsp)
  return false;
#undef DO_
}

void TCrossCollaborateGetSimpleBattleRecordRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TCrossCollaborateGetSimpleBattleRecordRsp)
  // repeated .pb.TCrossCollaborateSimpleBattleRecord SimpleBattleRecordArr = 1;
  for (int i = 0; i < this->simplebattlerecordarr_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->simplebattlerecordarr(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TCrossCollaborateGetSimpleBattleRecordRsp)
}

::google::protobuf::uint8* TCrossCollaborateGetSimpleBattleRecordRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TCrossCollaborateGetSimpleBattleRecordRsp)
  // repeated .pb.TCrossCollaborateSimpleBattleRecord SimpleBattleRecordArr = 1;
  for (int i = 0; i < this->simplebattlerecordarr_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->simplebattlerecordarr(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TCrossCollaborateGetSimpleBattleRecordRsp)
  return target;
}

int TCrossCollaborateGetSimpleBattleRecordRsp::ByteSize() const {
  int total_size = 0;

  // repeated .pb.TCrossCollaborateSimpleBattleRecord SimpleBattleRecordArr = 1;
  total_size += 1 * this->simplebattlerecordarr_size();
  for (int i = 0; i < this->simplebattlerecordarr_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->simplebattlerecordarr(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TCrossCollaborateGetSimpleBattleRecordRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TCrossCollaborateGetSimpleBattleRecordRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TCrossCollaborateGetSimpleBattleRecordRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TCrossCollaborateGetSimpleBattleRecordRsp::MergeFrom(const TCrossCollaborateGetSimpleBattleRecordRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  simplebattlerecordarr_.MergeFrom(from.simplebattlerecordarr_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TCrossCollaborateGetSimpleBattleRecordRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TCrossCollaborateGetSimpleBattleRecordRsp::CopyFrom(const TCrossCollaborateGetSimpleBattleRecordRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TCrossCollaborateGetSimpleBattleRecordRsp::IsInitialized() const {

  return true;
}

void TCrossCollaborateGetSimpleBattleRecordRsp::Swap(TCrossCollaborateGetSimpleBattleRecordRsp* other) {
  if (other != this) {
    simplebattlerecordarr_.Swap(&other->simplebattlerecordarr_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TCrossCollaborateGetSimpleBattleRecordRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TCrossCollaborateGetSimpleBattleRecordRsp_descriptor_;
  metadata.reflection = TCrossCollaborateGetSimpleBattleRecordRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TCrossCollaborateGetRankListRsp::kMyRankFieldNumber;
const int TCrossCollaborateGetRankListRsp::kRankArrFieldNumber;
#endif  // !_MSC_VER

TCrossCollaborateGetRankListRsp::TCrossCollaborateGetRankListRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TCrossCollaborateGetRankListRsp)
}

void TCrossCollaborateGetRankListRsp::InitAsDefaultInstance() {
}

TCrossCollaborateGetRankListRsp::TCrossCollaborateGetRankListRsp(const TCrossCollaborateGetRankListRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TCrossCollaborateGetRankListRsp)
}

void TCrossCollaborateGetRankListRsp::SharedCtor() {
  _cached_size_ = 0;
  myrank_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TCrossCollaborateGetRankListRsp::~TCrossCollaborateGetRankListRsp() {
  // @@protoc_insertion_point(destructor:pb.TCrossCollaborateGetRankListRsp)
  SharedDtor();
}

void TCrossCollaborateGetRankListRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TCrossCollaborateGetRankListRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TCrossCollaborateGetRankListRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TCrossCollaborateGetRankListRsp_descriptor_;
}

const TCrossCollaborateGetRankListRsp& TCrossCollaborateGetRankListRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fCrossCollaborate_2eproto();
  return *default_instance_;
}

TCrossCollaborateGetRankListRsp* TCrossCollaborateGetRankListRsp::default_instance_ = NULL;

TCrossCollaborateGetRankListRsp* TCrossCollaborateGetRankListRsp::New() const {
  return new TCrossCollaborateGetRankListRsp;
}

void TCrossCollaborateGetRankListRsp::Clear() {
  myrank_ = 0;
  rankarr_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TCrossCollaborateGetRankListRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TCrossCollaborateGetRankListRsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 MyRank = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &myrank_)));
          set_has_myrank();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_RankArr;
        break;
      }

      // repeated .pb.TCrossCollaborateUserInfo RankArr = 2;
      case 2: {
        if (tag == 18) {
         parse_RankArr:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_rankarr()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_RankArr;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TCrossCollaborateGetRankListRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TCrossCollaborateGetRankListRsp)
  return false;
#undef DO_
}

void TCrossCollaborateGetRankListRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TCrossCollaborateGetRankListRsp)
  // optional int32 MyRank = 1;
  if (has_myrank()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->myrank(), output);
  }

  // repeated .pb.TCrossCollaborateUserInfo RankArr = 2;
  for (int i = 0; i < this->rankarr_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->rankarr(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TCrossCollaborateGetRankListRsp)
}

::google::protobuf::uint8* TCrossCollaborateGetRankListRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TCrossCollaborateGetRankListRsp)
  // optional int32 MyRank = 1;
  if (has_myrank()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->myrank(), target);
  }

  // repeated .pb.TCrossCollaborateUserInfo RankArr = 2;
  for (int i = 0; i < this->rankarr_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->rankarr(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TCrossCollaborateGetRankListRsp)
  return target;
}

int TCrossCollaborateGetRankListRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 MyRank = 1;
    if (has_myrank()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->myrank());
    }

  }
  // repeated .pb.TCrossCollaborateUserInfo RankArr = 2;
  total_size += 1 * this->rankarr_size();
  for (int i = 0; i < this->rankarr_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->rankarr(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TCrossCollaborateGetRankListRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TCrossCollaborateGetRankListRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TCrossCollaborateGetRankListRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TCrossCollaborateGetRankListRsp::MergeFrom(const TCrossCollaborateGetRankListRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  rankarr_.MergeFrom(from.rankarr_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_myrank()) {
      set_myrank(from.myrank());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TCrossCollaborateGetRankListRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TCrossCollaborateGetRankListRsp::CopyFrom(const TCrossCollaborateGetRankListRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TCrossCollaborateGetRankListRsp::IsInitialized() const {

  return true;
}

void TCrossCollaborateGetRankListRsp::Swap(TCrossCollaborateGetRankListRsp* other) {
  if (other != this) {
    std::swap(myrank_, other->myrank_);
    rankarr_.Swap(&other->rankarr_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TCrossCollaborateGetRankListRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TCrossCollaborateGetRankListRsp_descriptor_;
  metadata.reflection = TCrossCollaborateGetRankListRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TCrossCollaborateReceiveBattleRewardReq::kRoundFieldNumber;
#endif  // !_MSC_VER

TCrossCollaborateReceiveBattleRewardReq::TCrossCollaborateReceiveBattleRewardReq()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TCrossCollaborateReceiveBattleRewardReq)
}

void TCrossCollaborateReceiveBattleRewardReq::InitAsDefaultInstance() {
}

TCrossCollaborateReceiveBattleRewardReq::TCrossCollaborateReceiveBattleRewardReq(const TCrossCollaborateReceiveBattleRewardReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TCrossCollaborateReceiveBattleRewardReq)
}

void TCrossCollaborateReceiveBattleRewardReq::SharedCtor() {
  _cached_size_ = 0;
  round_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TCrossCollaborateReceiveBattleRewardReq::~TCrossCollaborateReceiveBattleRewardReq() {
  // @@protoc_insertion_point(destructor:pb.TCrossCollaborateReceiveBattleRewardReq)
  SharedDtor();
}

void TCrossCollaborateReceiveBattleRewardReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TCrossCollaborateReceiveBattleRewardReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TCrossCollaborateReceiveBattleRewardReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TCrossCollaborateReceiveBattleRewardReq_descriptor_;
}

const TCrossCollaborateReceiveBattleRewardReq& TCrossCollaborateReceiveBattleRewardReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fCrossCollaborate_2eproto();
  return *default_instance_;
}

TCrossCollaborateReceiveBattleRewardReq* TCrossCollaborateReceiveBattleRewardReq::default_instance_ = NULL;

TCrossCollaborateReceiveBattleRewardReq* TCrossCollaborateReceiveBattleRewardReq::New() const {
  return new TCrossCollaborateReceiveBattleRewardReq;
}

void TCrossCollaborateReceiveBattleRewardReq::Clear() {
  round_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TCrossCollaborateReceiveBattleRewardReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TCrossCollaborateReceiveBattleRewardReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 Round = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &round_)));
          set_has_round();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TCrossCollaborateReceiveBattleRewardReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TCrossCollaborateReceiveBattleRewardReq)
  return false;
#undef DO_
}

void TCrossCollaborateReceiveBattleRewardReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TCrossCollaborateReceiveBattleRewardReq)
  // optional uint32 Round = 1;
  if (has_round()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->round(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TCrossCollaborateReceiveBattleRewardReq)
}

::google::protobuf::uint8* TCrossCollaborateReceiveBattleRewardReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TCrossCollaborateReceiveBattleRewardReq)
  // optional uint32 Round = 1;
  if (has_round()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->round(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TCrossCollaborateReceiveBattleRewardReq)
  return target;
}

int TCrossCollaborateReceiveBattleRewardReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 Round = 1;
    if (has_round()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->round());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TCrossCollaborateReceiveBattleRewardReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TCrossCollaborateReceiveBattleRewardReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TCrossCollaborateReceiveBattleRewardReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TCrossCollaborateReceiveBattleRewardReq::MergeFrom(const TCrossCollaborateReceiveBattleRewardReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_round()) {
      set_round(from.round());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TCrossCollaborateReceiveBattleRewardReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TCrossCollaborateReceiveBattleRewardReq::CopyFrom(const TCrossCollaborateReceiveBattleRewardReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TCrossCollaborateReceiveBattleRewardReq::IsInitialized() const {

  return true;
}

void TCrossCollaborateReceiveBattleRewardReq::Swap(TCrossCollaborateReceiveBattleRewardReq* other) {
  if (other != this) {
    std::swap(round_, other->round_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TCrossCollaborateReceiveBattleRewardReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TCrossCollaborateReceiveBattleRewardReq_descriptor_;
  metadata.reflection = TCrossCollaborateReceiveBattleRewardReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TCrossCollaborateReceiveRankRewardReq::kRankIdFieldNumber;
#endif  // !_MSC_VER

TCrossCollaborateReceiveRankRewardReq::TCrossCollaborateReceiveRankRewardReq()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TCrossCollaborateReceiveRankRewardReq)
}

void TCrossCollaborateReceiveRankRewardReq::InitAsDefaultInstance() {
}

TCrossCollaborateReceiveRankRewardReq::TCrossCollaborateReceiveRankRewardReq(const TCrossCollaborateReceiveRankRewardReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TCrossCollaborateReceiveRankRewardReq)
}

void TCrossCollaborateReceiveRankRewardReq::SharedCtor() {
  _cached_size_ = 0;
  rankid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TCrossCollaborateReceiveRankRewardReq::~TCrossCollaborateReceiveRankRewardReq() {
  // @@protoc_insertion_point(destructor:pb.TCrossCollaborateReceiveRankRewardReq)
  SharedDtor();
}

void TCrossCollaborateReceiveRankRewardReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TCrossCollaborateReceiveRankRewardReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TCrossCollaborateReceiveRankRewardReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TCrossCollaborateReceiveRankRewardReq_descriptor_;
}

const TCrossCollaborateReceiveRankRewardReq& TCrossCollaborateReceiveRankRewardReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fCrossCollaborate_2eproto();
  return *default_instance_;
}

TCrossCollaborateReceiveRankRewardReq* TCrossCollaborateReceiveRankRewardReq::default_instance_ = NULL;

TCrossCollaborateReceiveRankRewardReq* TCrossCollaborateReceiveRankRewardReq::New() const {
  return new TCrossCollaborateReceiveRankRewardReq;
}

void TCrossCollaborateReceiveRankRewardReq::Clear() {
  rankid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TCrossCollaborateReceiveRankRewardReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TCrossCollaborateReceiveRankRewardReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 RankId = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &rankid_)));
          set_has_rankid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TCrossCollaborateReceiveRankRewardReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TCrossCollaborateReceiveRankRewardReq)
  return false;
#undef DO_
}

void TCrossCollaborateReceiveRankRewardReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TCrossCollaborateReceiveRankRewardReq)
  // optional uint32 RankId = 1;
  if (has_rankid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->rankid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TCrossCollaborateReceiveRankRewardReq)
}

::google::protobuf::uint8* TCrossCollaborateReceiveRankRewardReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TCrossCollaborateReceiveRankRewardReq)
  // optional uint32 RankId = 1;
  if (has_rankid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->rankid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TCrossCollaborateReceiveRankRewardReq)
  return target;
}

int TCrossCollaborateReceiveRankRewardReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 RankId = 1;
    if (has_rankid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->rankid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TCrossCollaborateReceiveRankRewardReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TCrossCollaborateReceiveRankRewardReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TCrossCollaborateReceiveRankRewardReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TCrossCollaborateReceiveRankRewardReq::MergeFrom(const TCrossCollaborateReceiveRankRewardReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_rankid()) {
      set_rankid(from.rankid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TCrossCollaborateReceiveRankRewardReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TCrossCollaborateReceiveRankRewardReq::CopyFrom(const TCrossCollaborateReceiveRankRewardReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TCrossCollaborateReceiveRankRewardReq::IsInitialized() const {

  return true;
}

void TCrossCollaborateReceiveRankRewardReq::Swap(TCrossCollaborateReceiveRankRewardReq* other) {
  if (other != this) {
    std::swap(rankid_, other->rankid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TCrossCollaborateReceiveRankRewardReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TCrossCollaborateReceiveRankRewardReq_descriptor_;
  metadata.reflection = TCrossCollaborateReceiveRankRewardReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TCrossCollaborateTeamNotify::kTeamInfoFieldNumber;
const int TCrossCollaborateTeamNotify::kPushTimeFieldNumber;
const int TCrossCollaborateTeamNotify::kIsInviteFieldNumber;
#endif  // !_MSC_VER

TCrossCollaborateTeamNotify::TCrossCollaborateTeamNotify()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TCrossCollaborateTeamNotify)
}

void TCrossCollaborateTeamNotify::InitAsDefaultInstance() {
  teaminfo_ = const_cast< ::pb::TCrossCollaborateTeamInfo*>(&::pb::TCrossCollaborateTeamInfo::default_instance());
}

TCrossCollaborateTeamNotify::TCrossCollaborateTeamNotify(const TCrossCollaborateTeamNotify& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TCrossCollaborateTeamNotify)
}

void TCrossCollaborateTeamNotify::SharedCtor() {
  _cached_size_ = 0;
  teaminfo_ = NULL;
  pushtime_ = GOOGLE_ULONGLONG(0);
  isinvite_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TCrossCollaborateTeamNotify::~TCrossCollaborateTeamNotify() {
  // @@protoc_insertion_point(destructor:pb.TCrossCollaborateTeamNotify)
  SharedDtor();
}

void TCrossCollaborateTeamNotify::SharedDtor() {
  if (this != default_instance_) {
    delete teaminfo_;
  }
}

void TCrossCollaborateTeamNotify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TCrossCollaborateTeamNotify::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TCrossCollaborateTeamNotify_descriptor_;
}

const TCrossCollaborateTeamNotify& TCrossCollaborateTeamNotify::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fCrossCollaborate_2eproto();
  return *default_instance_;
}

TCrossCollaborateTeamNotify* TCrossCollaborateTeamNotify::default_instance_ = NULL;

TCrossCollaborateTeamNotify* TCrossCollaborateTeamNotify::New() const {
  return new TCrossCollaborateTeamNotify;
}

void TCrossCollaborateTeamNotify::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<TCrossCollaborateTeamNotify*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 7) {
    ZR_(pushtime_, isinvite_);
    if (has_teaminfo()) {
      if (teaminfo_ != NULL) teaminfo_->::pb::TCrossCollaborateTeamInfo::Clear();
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TCrossCollaborateTeamNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TCrossCollaborateTeamNotify)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .pb.TCrossCollaborateTeamInfo TeamInfo = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_teaminfo()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_PushTime;
        break;
      }

      // optional uint64 PushTime = 2;
      case 2: {
        if (tag == 16) {
         parse_PushTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &pushtime_)));
          set_has_pushtime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_IsInvite;
        break;
      }

      // optional uint32 IsInvite = 3;
      case 3: {
        if (tag == 24) {
         parse_IsInvite:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &isinvite_)));
          set_has_isinvite();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TCrossCollaborateTeamNotify)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TCrossCollaborateTeamNotify)
  return false;
#undef DO_
}

void TCrossCollaborateTeamNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TCrossCollaborateTeamNotify)
  // optional .pb.TCrossCollaborateTeamInfo TeamInfo = 1;
  if (has_teaminfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->teaminfo(), output);
  }

  // optional uint64 PushTime = 2;
  if (has_pushtime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->pushtime(), output);
  }

  // optional uint32 IsInvite = 3;
  if (has_isinvite()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->isinvite(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TCrossCollaborateTeamNotify)
}

::google::protobuf::uint8* TCrossCollaborateTeamNotify::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TCrossCollaborateTeamNotify)
  // optional .pb.TCrossCollaborateTeamInfo TeamInfo = 1;
  if (has_teaminfo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->teaminfo(), target);
  }

  // optional uint64 PushTime = 2;
  if (has_pushtime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->pushtime(), target);
  }

  // optional uint32 IsInvite = 3;
  if (has_isinvite()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->isinvite(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TCrossCollaborateTeamNotify)
  return target;
}

int TCrossCollaborateTeamNotify::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .pb.TCrossCollaborateTeamInfo TeamInfo = 1;
    if (has_teaminfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->teaminfo());
    }

    // optional uint64 PushTime = 2;
    if (has_pushtime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->pushtime());
    }

    // optional uint32 IsInvite = 3;
    if (has_isinvite()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->isinvite());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TCrossCollaborateTeamNotify::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TCrossCollaborateTeamNotify* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TCrossCollaborateTeamNotify*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TCrossCollaborateTeamNotify::MergeFrom(const TCrossCollaborateTeamNotify& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_teaminfo()) {
      mutable_teaminfo()->::pb::TCrossCollaborateTeamInfo::MergeFrom(from.teaminfo());
    }
    if (from.has_pushtime()) {
      set_pushtime(from.pushtime());
    }
    if (from.has_isinvite()) {
      set_isinvite(from.isinvite());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TCrossCollaborateTeamNotify::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TCrossCollaborateTeamNotify::CopyFrom(const TCrossCollaborateTeamNotify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TCrossCollaborateTeamNotify::IsInitialized() const {

  return true;
}

void TCrossCollaborateTeamNotify::Swap(TCrossCollaborateTeamNotify* other) {
  if (other != this) {
    std::swap(teaminfo_, other->teaminfo_);
    std::swap(pushtime_, other->pushtime_);
    std::swap(isinvite_, other->isinvite_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TCrossCollaborateTeamNotify::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TCrossCollaborateTeamNotify_descriptor_;
  metadata.reflection = TCrossCollaborateTeamNotify_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TCrossCollaborateUserRankRewardNotify::kRankRewardIdArrFieldNumber;
#endif  // !_MSC_VER

TCrossCollaborateUserRankRewardNotify::TCrossCollaborateUserRankRewardNotify()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TCrossCollaborateUserRankRewardNotify)
}

void TCrossCollaborateUserRankRewardNotify::InitAsDefaultInstance() {
}

TCrossCollaborateUserRankRewardNotify::TCrossCollaborateUserRankRewardNotify(const TCrossCollaborateUserRankRewardNotify& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TCrossCollaborateUserRankRewardNotify)
}

void TCrossCollaborateUserRankRewardNotify::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TCrossCollaborateUserRankRewardNotify::~TCrossCollaborateUserRankRewardNotify() {
  // @@protoc_insertion_point(destructor:pb.TCrossCollaborateUserRankRewardNotify)
  SharedDtor();
}

void TCrossCollaborateUserRankRewardNotify::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TCrossCollaborateUserRankRewardNotify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TCrossCollaborateUserRankRewardNotify::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TCrossCollaborateUserRankRewardNotify_descriptor_;
}

const TCrossCollaborateUserRankRewardNotify& TCrossCollaborateUserRankRewardNotify::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fCrossCollaborate_2eproto();
  return *default_instance_;
}

TCrossCollaborateUserRankRewardNotify* TCrossCollaborateUserRankRewardNotify::default_instance_ = NULL;

TCrossCollaborateUserRankRewardNotify* TCrossCollaborateUserRankRewardNotify::New() const {
  return new TCrossCollaborateUserRankRewardNotify;
}

void TCrossCollaborateUserRankRewardNotify::Clear() {
  rankrewardidarr_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TCrossCollaborateUserRankRewardNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TCrossCollaborateUserRankRewardNotify)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated uint32 RankRewardIdArr = 1;
      case 1: {
        if (tag == 8) {
         parse_RankRewardIdArr:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 8, input, this->mutable_rankrewardidarr())));
        } else if (tag == 10) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_rankrewardidarr())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(8)) goto parse_RankRewardIdArr;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TCrossCollaborateUserRankRewardNotify)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TCrossCollaborateUserRankRewardNotify)
  return false;
#undef DO_
}

void TCrossCollaborateUserRankRewardNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TCrossCollaborateUserRankRewardNotify)
  // repeated uint32 RankRewardIdArr = 1;
  for (int i = 0; i < this->rankrewardidarr_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      1, this->rankrewardidarr(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TCrossCollaborateUserRankRewardNotify)
}

::google::protobuf::uint8* TCrossCollaborateUserRankRewardNotify::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TCrossCollaborateUserRankRewardNotify)
  // repeated uint32 RankRewardIdArr = 1;
  for (int i = 0; i < this->rankrewardidarr_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(1, this->rankrewardidarr(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TCrossCollaborateUserRankRewardNotify)
  return target;
}

int TCrossCollaborateUserRankRewardNotify::ByteSize() const {
  int total_size = 0;

  // repeated uint32 RankRewardIdArr = 1;
  {
    int data_size = 0;
    for (int i = 0; i < this->rankrewardidarr_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->rankrewardidarr(i));
    }
    total_size += 1 * this->rankrewardidarr_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TCrossCollaborateUserRankRewardNotify::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TCrossCollaborateUserRankRewardNotify* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TCrossCollaborateUserRankRewardNotify*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TCrossCollaborateUserRankRewardNotify::MergeFrom(const TCrossCollaborateUserRankRewardNotify& from) {
  GOOGLE_CHECK_NE(&from, this);
  rankrewardidarr_.MergeFrom(from.rankrewardidarr_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TCrossCollaborateUserRankRewardNotify::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TCrossCollaborateUserRankRewardNotify::CopyFrom(const TCrossCollaborateUserRankRewardNotify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TCrossCollaborateUserRankRewardNotify::IsInitialized() const {

  return true;
}

void TCrossCollaborateUserRankRewardNotify::Swap(TCrossCollaborateUserRankRewardNotify* other) {
  if (other != this) {
    rankrewardidarr_.Swap(&other->rankrewardidarr_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TCrossCollaborateUserRankRewardNotify::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TCrossCollaborateUserRankRewardNotify_descriptor_;
  metadata.reflection = TCrossCollaborateUserRankRewardNotify_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TCrossCollaborateBattleReportArrReq::kRidArrFieldNumber;
#endif  // !_MSC_VER

TCrossCollaborateBattleReportArrReq::TCrossCollaborateBattleReportArrReq()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TCrossCollaborateBattleReportArrReq)
}

void TCrossCollaborateBattleReportArrReq::InitAsDefaultInstance() {
}

TCrossCollaborateBattleReportArrReq::TCrossCollaborateBattleReportArrReq(const TCrossCollaborateBattleReportArrReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TCrossCollaborateBattleReportArrReq)
}

void TCrossCollaborateBattleReportArrReq::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TCrossCollaborateBattleReportArrReq::~TCrossCollaborateBattleReportArrReq() {
  // @@protoc_insertion_point(destructor:pb.TCrossCollaborateBattleReportArrReq)
  SharedDtor();
}

void TCrossCollaborateBattleReportArrReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TCrossCollaborateBattleReportArrReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TCrossCollaborateBattleReportArrReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TCrossCollaborateBattleReportArrReq_descriptor_;
}

const TCrossCollaborateBattleReportArrReq& TCrossCollaborateBattleReportArrReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fCrossCollaborate_2eproto();
  return *default_instance_;
}

TCrossCollaborateBattleReportArrReq* TCrossCollaborateBattleReportArrReq::default_instance_ = NULL;

TCrossCollaborateBattleReportArrReq* TCrossCollaborateBattleReportArrReq::New() const {
  return new TCrossCollaborateBattleReportArrReq;
}

void TCrossCollaborateBattleReportArrReq::Clear() {
  ridarr_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TCrossCollaborateBattleReportArrReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TCrossCollaborateBattleReportArrReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated uint64 ridArr = 1;
      case 1: {
        if (tag == 8) {
         parse_ridArr:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 1, 8, input, this->mutable_ridarr())));
        } else if (tag == 10) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, this->mutable_ridarr())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(8)) goto parse_ridArr;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TCrossCollaborateBattleReportArrReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TCrossCollaborateBattleReportArrReq)
  return false;
#undef DO_
}

void TCrossCollaborateBattleReportArrReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TCrossCollaborateBattleReportArrReq)
  // repeated uint64 ridArr = 1;
  for (int i = 0; i < this->ridarr_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(
      1, this->ridarr(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TCrossCollaborateBattleReportArrReq)
}

::google::protobuf::uint8* TCrossCollaborateBattleReportArrReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TCrossCollaborateBattleReportArrReq)
  // repeated uint64 ridArr = 1;
  for (int i = 0; i < this->ridarr_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt64ToArray(1, this->ridarr(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TCrossCollaborateBattleReportArrReq)
  return target;
}

int TCrossCollaborateBattleReportArrReq::ByteSize() const {
  int total_size = 0;

  // repeated uint64 ridArr = 1;
  {
    int data_size = 0;
    for (int i = 0; i < this->ridarr_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt64Size(this->ridarr(i));
    }
    total_size += 1 * this->ridarr_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TCrossCollaborateBattleReportArrReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TCrossCollaborateBattleReportArrReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TCrossCollaborateBattleReportArrReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TCrossCollaborateBattleReportArrReq::MergeFrom(const TCrossCollaborateBattleReportArrReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  ridarr_.MergeFrom(from.ridarr_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TCrossCollaborateBattleReportArrReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TCrossCollaborateBattleReportArrReq::CopyFrom(const TCrossCollaborateBattleReportArrReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TCrossCollaborateBattleReportArrReq::IsInitialized() const {

  return true;
}

void TCrossCollaborateBattleReportArrReq::Swap(TCrossCollaborateBattleReportArrReq* other) {
  if (other != this) {
    ridarr_.Swap(&other->ridarr_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TCrossCollaborateBattleReportArrReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TCrossCollaborateBattleReportArrReq_descriptor_;
  metadata.reflection = TCrossCollaborateBattleReportArrReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TCrossCollaborateBattleReportArrRsp::kResultFieldNumber;
#endif  // !_MSC_VER

TCrossCollaborateBattleReportArrRsp::TCrossCollaborateBattleReportArrRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TCrossCollaborateBattleReportArrRsp)
}

void TCrossCollaborateBattleReportArrRsp::InitAsDefaultInstance() {
}

TCrossCollaborateBattleReportArrRsp::TCrossCollaborateBattleReportArrRsp(const TCrossCollaborateBattleReportArrRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TCrossCollaborateBattleReportArrRsp)
}

void TCrossCollaborateBattleReportArrRsp::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TCrossCollaborateBattleReportArrRsp::~TCrossCollaborateBattleReportArrRsp() {
  // @@protoc_insertion_point(destructor:pb.TCrossCollaborateBattleReportArrRsp)
  SharedDtor();
}

void TCrossCollaborateBattleReportArrRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TCrossCollaborateBattleReportArrRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TCrossCollaborateBattleReportArrRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TCrossCollaborateBattleReportArrRsp_descriptor_;
}

const TCrossCollaborateBattleReportArrRsp& TCrossCollaborateBattleReportArrRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fCrossCollaborate_2eproto();
  return *default_instance_;
}

TCrossCollaborateBattleReportArrRsp* TCrossCollaborateBattleReportArrRsp::default_instance_ = NULL;

TCrossCollaborateBattleReportArrRsp* TCrossCollaborateBattleReportArrRsp::New() const {
  return new TCrossCollaborateBattleReportArrRsp;
}

void TCrossCollaborateBattleReportArrRsp::Clear() {
  result_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TCrossCollaborateBattleReportArrRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TCrossCollaborateBattleReportArrRsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated bytes Result = 1;
      case 1: {
        if (tag == 10) {
         parse_Result:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->add_result()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_Result;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TCrossCollaborateBattleReportArrRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TCrossCollaborateBattleReportArrRsp)
  return false;
#undef DO_
}

void TCrossCollaborateBattleReportArrRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TCrossCollaborateBattleReportArrRsp)
  // repeated bytes Result = 1;
  for (int i = 0; i < this->result_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      1, this->result(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TCrossCollaborateBattleReportArrRsp)
}

::google::protobuf::uint8* TCrossCollaborateBattleReportArrRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TCrossCollaborateBattleReportArrRsp)
  // repeated bytes Result = 1;
  for (int i = 0; i < this->result_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteBytesToArray(1, this->result(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TCrossCollaborateBattleReportArrRsp)
  return target;
}

int TCrossCollaborateBattleReportArrRsp::ByteSize() const {
  int total_size = 0;

  // repeated bytes Result = 1;
  total_size += 1 * this->result_size();
  for (int i = 0; i < this->result_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::BytesSize(
      this->result(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TCrossCollaborateBattleReportArrRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TCrossCollaborateBattleReportArrRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TCrossCollaborateBattleReportArrRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TCrossCollaborateBattleReportArrRsp::MergeFrom(const TCrossCollaborateBattleReportArrRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  result_.MergeFrom(from.result_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TCrossCollaborateBattleReportArrRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TCrossCollaborateBattleReportArrRsp::CopyFrom(const TCrossCollaborateBattleReportArrRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TCrossCollaborateBattleReportArrRsp::IsInitialized() const {

  return true;
}

void TCrossCollaborateBattleReportArrRsp::Swap(TCrossCollaborateBattleReportArrRsp* other) {
  if (other != this) {
    result_.Swap(&other->result_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TCrossCollaborateBattleReportArrRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TCrossCollaborateBattleReportArrRsp_descriptor_;
  metadata.reflection = TCrossCollaborateBattleReportArrRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TCrossCollaborateGetServerGroupInfoRsp::kGroupIdFieldNumber;
const int TCrossCollaborateGetServerGroupInfoRsp::kServerIdFieldNumber;
#endif  // !_MSC_VER

TCrossCollaborateGetServerGroupInfoRsp::TCrossCollaborateGetServerGroupInfoRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TCrossCollaborateGetServerGroupInfoRsp)
}

void TCrossCollaborateGetServerGroupInfoRsp::InitAsDefaultInstance() {
}

TCrossCollaborateGetServerGroupInfoRsp::TCrossCollaborateGetServerGroupInfoRsp(const TCrossCollaborateGetServerGroupInfoRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TCrossCollaborateGetServerGroupInfoRsp)
}

void TCrossCollaborateGetServerGroupInfoRsp::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  groupid_ = 0u;
  serverid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TCrossCollaborateGetServerGroupInfoRsp::~TCrossCollaborateGetServerGroupInfoRsp() {
  // @@protoc_insertion_point(destructor:pb.TCrossCollaborateGetServerGroupInfoRsp)
  SharedDtor();
}

void TCrossCollaborateGetServerGroupInfoRsp::SharedDtor() {
  if (serverid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete serverid_;
  }
  if (this != default_instance_) {
  }
}

void TCrossCollaborateGetServerGroupInfoRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TCrossCollaborateGetServerGroupInfoRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TCrossCollaborateGetServerGroupInfoRsp_descriptor_;
}

const TCrossCollaborateGetServerGroupInfoRsp& TCrossCollaborateGetServerGroupInfoRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fCrossCollaborate_2eproto();
  return *default_instance_;
}

TCrossCollaborateGetServerGroupInfoRsp* TCrossCollaborateGetServerGroupInfoRsp::default_instance_ = NULL;

TCrossCollaborateGetServerGroupInfoRsp* TCrossCollaborateGetServerGroupInfoRsp::New() const {
  return new TCrossCollaborateGetServerGroupInfoRsp;
}

void TCrossCollaborateGetServerGroupInfoRsp::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    groupid_ = 0u;
    if (has_serverid()) {
      if (serverid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        serverid_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TCrossCollaborateGetServerGroupInfoRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TCrossCollaborateGetServerGroupInfoRsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 GroupId = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &groupid_)));
          set_has_groupid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_ServerId;
        break;
      }

      // optional string ServerId = 2;
      case 2: {
        if (tag == 18) {
         parse_ServerId:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_serverid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->serverid().data(), this->serverid().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "serverid");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TCrossCollaborateGetServerGroupInfoRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TCrossCollaborateGetServerGroupInfoRsp)
  return false;
#undef DO_
}

void TCrossCollaborateGetServerGroupInfoRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TCrossCollaborateGetServerGroupInfoRsp)
  // optional uint32 GroupId = 1;
  if (has_groupid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->groupid(), output);
  }

  // optional string ServerId = 2;
  if (has_serverid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->serverid().data(), this->serverid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "serverid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->serverid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TCrossCollaborateGetServerGroupInfoRsp)
}

::google::protobuf::uint8* TCrossCollaborateGetServerGroupInfoRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TCrossCollaborateGetServerGroupInfoRsp)
  // optional uint32 GroupId = 1;
  if (has_groupid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->groupid(), target);
  }

  // optional string ServerId = 2;
  if (has_serverid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->serverid().data(), this->serverid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "serverid");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->serverid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TCrossCollaborateGetServerGroupInfoRsp)
  return target;
}

int TCrossCollaborateGetServerGroupInfoRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 GroupId = 1;
    if (has_groupid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->groupid());
    }

    // optional string ServerId = 2;
    if (has_serverid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->serverid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TCrossCollaborateGetServerGroupInfoRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TCrossCollaborateGetServerGroupInfoRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TCrossCollaborateGetServerGroupInfoRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TCrossCollaborateGetServerGroupInfoRsp::MergeFrom(const TCrossCollaborateGetServerGroupInfoRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_groupid()) {
      set_groupid(from.groupid());
    }
    if (from.has_serverid()) {
      set_serverid(from.serverid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TCrossCollaborateGetServerGroupInfoRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TCrossCollaborateGetServerGroupInfoRsp::CopyFrom(const TCrossCollaborateGetServerGroupInfoRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TCrossCollaborateGetServerGroupInfoRsp::IsInitialized() const {

  return true;
}

void TCrossCollaborateGetServerGroupInfoRsp::Swap(TCrossCollaborateGetServerGroupInfoRsp* other) {
  if (other != this) {
    std::swap(groupid_, other->groupid_);
    std::swap(serverid_, other->serverid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TCrossCollaborateGetServerGroupInfoRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TCrossCollaborateGetServerGroupInfoRsp_descriptor_;
  metadata.reflection = TCrossCollaborateGetServerGroupInfoRsp_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace pb

// @@protoc_insertion_point(global_scope)
