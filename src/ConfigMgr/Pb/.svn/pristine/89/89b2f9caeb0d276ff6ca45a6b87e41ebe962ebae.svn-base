// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: net/SquadStats.proto

#ifndef PROTOBUF_net_2fSquadStats_2eproto__INCLUDED
#define PROTOBUF_net_2fSquadStats_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "net/BattleStarter.pb.h"
// @@protoc_insertion_point(includes)

namespace pb {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_net_2fSquadStats_2eproto();
void protobuf_AssignDesc_net_2fSquadStats_2eproto();
void protobuf_ShutdownFile_net_2fSquadStats_2eproto();

class TSquadStats;
class TSquadStatsGetSquadStatsReq;
class TSquadStatsGetSquadStatsRsp;

enum ESquadSortType {
  TotalNum = 1,
  WinNum = 2,
  WinPercentage = 3,
  DamageOut = 4
};
bool ESquadSortType_IsValid(int value);
const ESquadSortType ESquadSortType_MIN = TotalNum;
const ESquadSortType ESquadSortType_MAX = DamageOut;
const int ESquadSortType_ARRAYSIZE = ESquadSortType_MAX + 1;

const ::google::protobuf::EnumDescriptor* ESquadSortType_descriptor();
inline const ::std::string& ESquadSortType_Name(ESquadSortType value) {
  return ::google::protobuf::internal::NameOfEnum(
    ESquadSortType_descriptor(), value);
}
inline bool ESquadSortType_Parse(
    const ::std::string& name, ESquadSortType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ESquadSortType>(
    ESquadSortType_descriptor(), name, value);
}
// ===================================================================

/*FOR2LUA
<Record>
	<name>TSquadStats</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/SquadStats.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TSquadStats : public ::google::protobuf::Message {
 public:
  TSquadStats();
  virtual ~TSquadStats();

  TSquadStats(const TSquadStats& from);

  inline TSquadStats& operator=(const TSquadStats& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TSquadStats& default_instance();

  void Swap(TSquadStats* other);

  // implements Message ----------------------------------------------

  TSquadStats* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TSquadStats& from);
  void MergeFrom(const TSquadStats& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string Squad = 1;
  inline bool has_squad() const;
  inline void clear_squad();
  static const int kSquadFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TSquadStats</name>
  	<Function>
  		<name>squad</name>
  		<replaceName>Squad</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_squad</name>
  		<replaceName>Squad</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_squad</name>
  		<replaceName>Squad</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::std::string& squad() const;
  inline void set_squad(const ::std::string& value);
  inline void set_squad(const char* value);
  inline void set_squad(const char* value, size_t size);
  inline ::std::string* mutable_squad();
  inline ::std::string* release_squad();
  inline void set_allocated_squad(::std::string* squad);

  // optional uint64 TotalNum = 2;
  inline bool has_totalnum() const;
  inline void clear_totalnum();
  static const int kTotalNumFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TSquadStats</name>
  	<Function>
  		<name>totalnum</name>
  		<replaceName>TotalNum</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_totalnum</name>
  		<replaceName>TotalNum</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_totalnum</name>
  		<replaceName>TotalNum</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint64 totalnum() const;
  inline void set_totalnum(::google::protobuf::uint64 value);

  // optional uint64 WinNum = 3;
  inline bool has_winnum() const;
  inline void clear_winnum();
  static const int kWinNumFieldNumber = 3;
  /*FOR2LUA
  <Record>
  	<name>TSquadStats</name>
  	<Function>
  		<name>winnum</name>
  		<replaceName>WinNum</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_winnum</name>
  		<replaceName>WinNum</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_winnum</name>
  		<replaceName>WinNum</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint64 winnum() const;
  inline void set_winnum(::google::protobuf::uint64 value);

  // optional uint64 WinPercentage = 4;
  inline bool has_winpercentage() const;
  inline void clear_winpercentage();
  static const int kWinPercentageFieldNumber = 4;
  /*FOR2LUA
  <Record>
  	<name>TSquadStats</name>
  	<Function>
  		<name>winpercentage</name>
  		<replaceName>WinPercentage</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_winpercentage</name>
  		<replaceName>WinPercentage</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_winpercentage</name>
  		<replaceName>WinPercentage</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint64 winpercentage() const;
  inline void set_winpercentage(::google::protobuf::uint64 value);

  // optional uint64 DamageOut = 5;
  inline bool has_damageout() const;
  inline void clear_damageout();
  static const int kDamageOutFieldNumber = 5;
  /*FOR2LUA
  <Record>
  	<name>TSquadStats</name>
  	<Function>
  		<name>damageout</name>
  		<replaceName>DamageOut</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_damageout</name>
  		<replaceName>DamageOut</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_damageout</name>
  		<replaceName>DamageOut</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint64 damageout() const;
  inline void set_damageout(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:pb.TSquadStats)
 private:
  inline void set_has_squad();
  inline void clear_has_squad();
  inline void set_has_totalnum();
  inline void clear_has_totalnum();
  inline void set_has_winnum();
  inline void clear_has_winnum();
  inline void set_has_winpercentage();
  inline void clear_has_winpercentage();
  inline void set_has_damageout();
  inline void clear_has_damageout();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* squad_;
  ::google::protobuf::uint64 totalnum_;
  ::google::protobuf::uint64 winnum_;
  ::google::protobuf::uint64 winpercentage_;
  ::google::protobuf::uint64 damageout_;
  friend void  protobuf_AddDesc_net_2fSquadStats_2eproto();
  friend void protobuf_AssignDesc_net_2fSquadStats_2eproto();
  friend void protobuf_ShutdownFile_net_2fSquadStats_2eproto();

  void InitAsDefaultInstance();
  static TSquadStats* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TSquadStatsGetSquadStatsReq</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/SquadStats.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TSquadStatsGetSquadStatsReq : public ::google::protobuf::Message {
 public:
  TSquadStatsGetSquadStatsReq();
  virtual ~TSquadStatsGetSquadStatsReq();

  TSquadStatsGetSquadStatsReq(const TSquadStatsGetSquadStatsReq& from);

  inline TSquadStatsGetSquadStatsReq& operator=(const TSquadStatsGetSquadStatsReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TSquadStatsGetSquadStatsReq& default_instance();

  void Swap(TSquadStatsGetSquadStatsReq* other);

  // implements Message ----------------------------------------------

  TSquadStatsGetSquadStatsReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TSquadStatsGetSquadStatsReq& from);
  void MergeFrom(const TSquadStatsGetSquadStatsReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 Htid = 1;
  inline bool has_htid() const;
  inline void clear_htid();
  static const int kHtidFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TSquadStatsGetSquadStatsReq</name>
  	<Function>
  		<name>htid</name>
  		<replaceName>Htid</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_htid</name>
  		<replaceName>Htid</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_htid</name>
  		<replaceName>Htid</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 htid() const;
  inline void set_htid(::google::protobuf::uint32 value);

  // optional .pb.EBattleStarter Starter = 2;
  inline bool has_starter() const;
  inline void clear_starter();
  static const int kStarterFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TSquadStatsGetSquadStatsReq</name>
  	<Function>
  		<name>starter</name>
  		<replaceName>Starter</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_starter</name>
  		<replaceName>Starter</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_starter</name>
  		<replaceName>Starter</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::pb::EBattleStarter starter() const;
  inline void set_starter(::pb::EBattleStarter value);

  // optional .pb.ESquadSortType SortType = 3;
  inline bool has_sorttype() const;
  inline void clear_sorttype();
  static const int kSortTypeFieldNumber = 3;
  /*FOR2LUA
  <Record>
  	<name>TSquadStatsGetSquadStatsReq</name>
  	<Function>
  		<name>sorttype</name>
  		<replaceName>SortType</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_sorttype</name>
  		<replaceName>SortType</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_sorttype</name>
  		<replaceName>SortType</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::pb::ESquadSortType sorttype() const;
  inline void set_sorttype(::pb::ESquadSortType value);

  // @@protoc_insertion_point(class_scope:pb.TSquadStatsGetSquadStatsReq)
 private:
  inline void set_has_htid();
  inline void clear_has_htid();
  inline void set_has_starter();
  inline void clear_has_starter();
  inline void set_has_sorttype();
  inline void clear_has_sorttype();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 htid_;
  int starter_;
  int sorttype_;
  friend void  protobuf_AddDesc_net_2fSquadStats_2eproto();
  friend void protobuf_AssignDesc_net_2fSquadStats_2eproto();
  friend void protobuf_ShutdownFile_net_2fSquadStats_2eproto();

  void InitAsDefaultInstance();
  static TSquadStatsGetSquadStatsReq* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TSquadStatsGetSquadStatsRsp</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/SquadStats.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TSquadStatsGetSquadStatsRsp : public ::google::protobuf::Message {
 public:
  TSquadStatsGetSquadStatsRsp();
  virtual ~TSquadStatsGetSquadStatsRsp();

  TSquadStatsGetSquadStatsRsp(const TSquadStatsGetSquadStatsRsp& from);

  inline TSquadStatsGetSquadStatsRsp& operator=(const TSquadStatsGetSquadStatsRsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TSquadStatsGetSquadStatsRsp& default_instance();

  void Swap(TSquadStatsGetSquadStatsRsp* other);

  // implements Message ----------------------------------------------

  TSquadStatsGetSquadStatsRsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TSquadStatsGetSquadStatsRsp& from);
  void MergeFrom(const TSquadStatsGetSquadStatsRsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .pb.TSquadStats ArraySquadStats = 1;
  inline int arraysquadstats_size() const;
  inline void clear_arraysquadstats();
  static const int kArraySquadStatsFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TSquadStatsGetSquadStatsRsp</name>
  	<Function>
  		<name>arraysquadstats</name>
  		<replaceName>ArraySquadStats</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_arraysquadstats</name>
  		<replaceName>ArraySquadStats</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_arraysquadstats</name>
  		<replaceName>ArraySquadStats</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_arraysquadstats</name>
  		<replaceName>ArraySquadStats</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>arraysquadstats_size</name>
  		<replaceName>ArraySquadStats</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TSquadStats& arraysquadstats(int index) const;
  inline ::pb::TSquadStats* mutable_arraysquadstats(int index);
  inline ::pb::TSquadStats* add_arraysquadstats();
  inline const ::google::protobuf::RepeatedPtrField< ::pb::TSquadStats >&
      arraysquadstats() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb::TSquadStats >*
      mutable_arraysquadstats();

  // @@protoc_insertion_point(class_scope:pb.TSquadStatsGetSquadStatsRsp)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::pb::TSquadStats > arraysquadstats_;
  friend void  protobuf_AddDesc_net_2fSquadStats_2eproto();
  friend void protobuf_AssignDesc_net_2fSquadStats_2eproto();
  friend void protobuf_ShutdownFile_net_2fSquadStats_2eproto();

  void InitAsDefaultInstance();
  static TSquadStatsGetSquadStatsRsp* default_instance_;
};
// ===================================================================


// ===================================================================

// TSquadStats

// optional string Squad = 1;
inline bool TSquadStats::has_squad() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TSquadStats::set_has_squad() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TSquadStats::clear_has_squad() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TSquadStats::clear_squad() {
  if (squad_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    squad_->clear();
  }
  clear_has_squad();
}
inline const ::std::string& TSquadStats::squad() const {
  // @@protoc_insertion_point(field_get:pb.TSquadStats.Squad)
  return *squad_;
}
inline void TSquadStats::set_squad(const ::std::string& value) {
  set_has_squad();
  if (squad_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    squad_ = new ::std::string;
  }
  squad_->assign(value);
  // @@protoc_insertion_point(field_set:pb.TSquadStats.Squad)
}
inline void TSquadStats::set_squad(const char* value) {
  set_has_squad();
  if (squad_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    squad_ = new ::std::string;
  }
  squad_->assign(value);
  // @@protoc_insertion_point(field_set_char:pb.TSquadStats.Squad)
}
inline void TSquadStats::set_squad(const char* value, size_t size) {
  set_has_squad();
  if (squad_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    squad_ = new ::std::string;
  }
  squad_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:pb.TSquadStats.Squad)
}
inline ::std::string* TSquadStats::mutable_squad() {
  set_has_squad();
  if (squad_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    squad_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:pb.TSquadStats.Squad)
  return squad_;
}
inline ::std::string* TSquadStats::release_squad() {
  clear_has_squad();
  if (squad_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = squad_;
    squad_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void TSquadStats::set_allocated_squad(::std::string* squad) {
  if (squad_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete squad_;
  }
  if (squad) {
    set_has_squad();
    squad_ = squad;
  } else {
    clear_has_squad();
    squad_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:pb.TSquadStats.Squad)
}

// optional uint64 TotalNum = 2;
inline bool TSquadStats::has_totalnum() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TSquadStats::set_has_totalnum() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TSquadStats::clear_has_totalnum() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TSquadStats::clear_totalnum() {
  totalnum_ = GOOGLE_ULONGLONG(0);
  clear_has_totalnum();
}
inline ::google::protobuf::uint64 TSquadStats::totalnum() const {
  // @@protoc_insertion_point(field_get:pb.TSquadStats.TotalNum)
  return totalnum_;
}
inline void TSquadStats::set_totalnum(::google::protobuf::uint64 value) {
  set_has_totalnum();
  totalnum_ = value;
  // @@protoc_insertion_point(field_set:pb.TSquadStats.TotalNum)
}

// optional uint64 WinNum = 3;
inline bool TSquadStats::has_winnum() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void TSquadStats::set_has_winnum() {
  _has_bits_[0] |= 0x00000004u;
}
inline void TSquadStats::clear_has_winnum() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void TSquadStats::clear_winnum() {
  winnum_ = GOOGLE_ULONGLONG(0);
  clear_has_winnum();
}
inline ::google::protobuf::uint64 TSquadStats::winnum() const {
  // @@protoc_insertion_point(field_get:pb.TSquadStats.WinNum)
  return winnum_;
}
inline void TSquadStats::set_winnum(::google::protobuf::uint64 value) {
  set_has_winnum();
  winnum_ = value;
  // @@protoc_insertion_point(field_set:pb.TSquadStats.WinNum)
}

// optional uint64 WinPercentage = 4;
inline bool TSquadStats::has_winpercentage() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void TSquadStats::set_has_winpercentage() {
  _has_bits_[0] |= 0x00000008u;
}
inline void TSquadStats::clear_has_winpercentage() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void TSquadStats::clear_winpercentage() {
  winpercentage_ = GOOGLE_ULONGLONG(0);
  clear_has_winpercentage();
}
inline ::google::protobuf::uint64 TSquadStats::winpercentage() const {
  // @@protoc_insertion_point(field_get:pb.TSquadStats.WinPercentage)
  return winpercentage_;
}
inline void TSquadStats::set_winpercentage(::google::protobuf::uint64 value) {
  set_has_winpercentage();
  winpercentage_ = value;
  // @@protoc_insertion_point(field_set:pb.TSquadStats.WinPercentage)
}

// optional uint64 DamageOut = 5;
inline bool TSquadStats::has_damageout() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void TSquadStats::set_has_damageout() {
  _has_bits_[0] |= 0x00000010u;
}
inline void TSquadStats::clear_has_damageout() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void TSquadStats::clear_damageout() {
  damageout_ = GOOGLE_ULONGLONG(0);
  clear_has_damageout();
}
inline ::google::protobuf::uint64 TSquadStats::damageout() const {
  // @@protoc_insertion_point(field_get:pb.TSquadStats.DamageOut)
  return damageout_;
}
inline void TSquadStats::set_damageout(::google::protobuf::uint64 value) {
  set_has_damageout();
  damageout_ = value;
  // @@protoc_insertion_point(field_set:pb.TSquadStats.DamageOut)
}

// -------------------------------------------------------------------

// TSquadStatsGetSquadStatsReq

// optional uint32 Htid = 1;
inline bool TSquadStatsGetSquadStatsReq::has_htid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TSquadStatsGetSquadStatsReq::set_has_htid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TSquadStatsGetSquadStatsReq::clear_has_htid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TSquadStatsGetSquadStatsReq::clear_htid() {
  htid_ = 0u;
  clear_has_htid();
}
inline ::google::protobuf::uint32 TSquadStatsGetSquadStatsReq::htid() const {
  // @@protoc_insertion_point(field_get:pb.TSquadStatsGetSquadStatsReq.Htid)
  return htid_;
}
inline void TSquadStatsGetSquadStatsReq::set_htid(::google::protobuf::uint32 value) {
  set_has_htid();
  htid_ = value;
  // @@protoc_insertion_point(field_set:pb.TSquadStatsGetSquadStatsReq.Htid)
}

// optional .pb.EBattleStarter Starter = 2;
inline bool TSquadStatsGetSquadStatsReq::has_starter() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TSquadStatsGetSquadStatsReq::set_has_starter() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TSquadStatsGetSquadStatsReq::clear_has_starter() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TSquadStatsGetSquadStatsReq::clear_starter() {
  starter_ = 0;
  clear_has_starter();
}
inline ::pb::EBattleStarter TSquadStatsGetSquadStatsReq::starter() const {
  // @@protoc_insertion_point(field_get:pb.TSquadStatsGetSquadStatsReq.Starter)
  return static_cast< ::pb::EBattleStarter >(starter_);
}
inline void TSquadStatsGetSquadStatsReq::set_starter(::pb::EBattleStarter value) {
  assert(::pb::EBattleStarter_IsValid(value));
  set_has_starter();
  starter_ = value;
  // @@protoc_insertion_point(field_set:pb.TSquadStatsGetSquadStatsReq.Starter)
}

// optional .pb.ESquadSortType SortType = 3;
inline bool TSquadStatsGetSquadStatsReq::has_sorttype() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void TSquadStatsGetSquadStatsReq::set_has_sorttype() {
  _has_bits_[0] |= 0x00000004u;
}
inline void TSquadStatsGetSquadStatsReq::clear_has_sorttype() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void TSquadStatsGetSquadStatsReq::clear_sorttype() {
  sorttype_ = 1;
  clear_has_sorttype();
}
inline ::pb::ESquadSortType TSquadStatsGetSquadStatsReq::sorttype() const {
  // @@protoc_insertion_point(field_get:pb.TSquadStatsGetSquadStatsReq.SortType)
  return static_cast< ::pb::ESquadSortType >(sorttype_);
}
inline void TSquadStatsGetSquadStatsReq::set_sorttype(::pb::ESquadSortType value) {
  assert(::pb::ESquadSortType_IsValid(value));
  set_has_sorttype();
  sorttype_ = value;
  // @@protoc_insertion_point(field_set:pb.TSquadStatsGetSquadStatsReq.SortType)
}

// -------------------------------------------------------------------

// TSquadStatsGetSquadStatsRsp

// repeated .pb.TSquadStats ArraySquadStats = 1;
inline int TSquadStatsGetSquadStatsRsp::arraysquadstats_size() const {
  return arraysquadstats_.size();
}
inline void TSquadStatsGetSquadStatsRsp::clear_arraysquadstats() {
  arraysquadstats_.Clear();
}
inline const ::pb::TSquadStats& TSquadStatsGetSquadStatsRsp::arraysquadstats(int index) const {
  // @@protoc_insertion_point(field_get:pb.TSquadStatsGetSquadStatsRsp.ArraySquadStats)
  return arraysquadstats_.Get(index);
}
inline ::pb::TSquadStats* TSquadStatsGetSquadStatsRsp::mutable_arraysquadstats(int index) {
  // @@protoc_insertion_point(field_mutable:pb.TSquadStatsGetSquadStatsRsp.ArraySquadStats)
  return arraysquadstats_.Mutable(index);
}
inline ::pb::TSquadStats* TSquadStatsGetSquadStatsRsp::add_arraysquadstats() {
  // @@protoc_insertion_point(field_add:pb.TSquadStatsGetSquadStatsRsp.ArraySquadStats)
  return arraysquadstats_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::TSquadStats >&
TSquadStatsGetSquadStatsRsp::arraysquadstats() const {
  // @@protoc_insertion_point(field_list:pb.TSquadStatsGetSquadStatsRsp.ArraySquadStats)
  return arraysquadstats_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb::TSquadStats >*
TSquadStatsGetSquadStatsRsp::mutable_arraysquadstats() {
  // @@protoc_insertion_point(field_mutable_list:pb.TSquadStatsGetSquadStatsRsp.ArraySquadStats)
  return &arraysquadstats_;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace pb

#ifndef SWIG
namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::pb::ESquadSortType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::pb::ESquadSortType>() {
  return ::pb::ESquadSortType_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_net_2fSquadStats_2eproto__INCLUDED
