// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: net/Pubg.proto

#ifndef PROTOBUF_net_2fPubg_2eproto__INCLUDED
#define PROTOBUF_net_2fPubg_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "net/Battle.pb.h"
#include "net/User.pb.h"
#include "net/CommonReward.pb.h"
// @@protoc_insertion_point(includes)

namespace pb {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_net_2fPubg_2eproto();
void protobuf_AssignDesc_net_2fPubg_2eproto();
void protobuf_ShutdownFile_net_2fPubg_2eproto();

class TPubgUserInfo;
class TPubgOwnerInfo;
class TPubgChickenEaterInfo;
class TPubgCampInfo;
class TPubgCityInfo;
class TPubgAreaInfo;
class TPubgFieldInfo;
class TPubgProcessInfo;
class TPubgPosInfo;
class TPubgFmtInfo;
class TPubgFmtDetail;
class TPubgBattleSimple;
class TPubgBattleDetail;
class TPubgBattleRecord;
class TPubgLocation;
class TPubgGetInfoRsp;
class TPubgEnterReq;
class TPubgGetCampListReq;
class TPubgGetCampListRsp;
class TPubgSignRsp;
class TPubgGetMyFmtRsp;
class TPubgSetMyFmtReq;
class TPubgAttackReq;
class TPubgAttackRsp;
class TPubgGetEnemyInfoReq;
class TPubgGetEnemyInfoRsp;
class TPubgBuyTokenReq;
class TPubgBuyTokenRsp;
class TPubgGetBattleRecordReq;
class TPubgGetBattleRecordRsp;
class TPubgGetServerTeamInfoRsp;
class TPubgBattleNotify;
class TPubgOutOwner;
class TPubgOutNotify;
class TPubgWinnerNotify;

enum EPubgStage {
  EPUBG_STAGE_INVALID = 0,
  EPUBG_STAGE_GROUP = 1,
  EPUBG_STAGE_SIGN = 2,
  EPUBG_STAGE_ALLOC = 3,
  EPUBG_STAGE_DAILY_WINNER_NORMAL_FIGHT = 4,
  EPUBG_STAGE_DAILY_WINNER_BUFFER_FIGHT = 5,
  EPUBG_STAGE_DAILY_WINNER_SETTLE = 6,
  EPUBG_STAGE_DAILY_LOSER_NORMAL_FIGHT = 7,
  EPUBG_STAGE_DAILY_LOSER_SETTLE = 8,
  EPUBG_STAGE_OFF_SEASON = 100
};
bool EPubgStage_IsValid(int value);
const EPubgStage EPubgStage_MIN = EPUBG_STAGE_INVALID;
const EPubgStage EPubgStage_MAX = EPUBG_STAGE_OFF_SEASON;
const int EPubgStage_ARRAYSIZE = EPubgStage_MAX + 1;

const ::google::protobuf::EnumDescriptor* EPubgStage_descriptor();
inline const ::std::string& EPubgStage_Name(EPubgStage value) {
  return ::google::protobuf::internal::NameOfEnum(
    EPubgStage_descriptor(), value);
}
inline bool EPubgStage_Parse(
    const ::std::string& name, EPubgStage* value) {
  return ::google::protobuf::internal::ParseNamedEnum<EPubgStage>(
    EPubgStage_descriptor(), name, value);
}
enum EPubgStatus {
  EPUBG_STATUS_NORMAL = 0,
  EPUBG_STATUS_REWARD = 1,
  EPUBG_STATUS_DANGER = 2,
  EPUBG_STATUS_REMOVE = 3
};
bool EPubgStatus_IsValid(int value);
const EPubgStatus EPubgStatus_MIN = EPUBG_STATUS_NORMAL;
const EPubgStatus EPubgStatus_MAX = EPUBG_STATUS_REMOVE;
const int EPubgStatus_ARRAYSIZE = EPubgStatus_MAX + 1;

const ::google::protobuf::EnumDescriptor* EPubgStatus_descriptor();
inline const ::std::string& EPubgStatus_Name(EPubgStatus value) {
  return ::google::protobuf::internal::NameOfEnum(
    EPubgStatus_descriptor(), value);
}
inline bool EPubgStatus_Parse(
    const ::std::string& name, EPubgStatus* value) {
  return ::google::protobuf::internal::ParseNamedEnum<EPubgStatus>(
    EPubgStatus_descriptor(), name, value);
}
enum EPubgFieldType {
  EPUBG_FIELD_TYPE_WINNER = 0,
  EPUBG_FIELD_TYPE_LOSER = 1
};
bool EPubgFieldType_IsValid(int value);
const EPubgFieldType EPubgFieldType_MIN = EPUBG_FIELD_TYPE_WINNER;
const EPubgFieldType EPubgFieldType_MAX = EPUBG_FIELD_TYPE_LOSER;
const int EPubgFieldType_ARRAYSIZE = EPubgFieldType_MAX + 1;

const ::google::protobuf::EnumDescriptor* EPubgFieldType_descriptor();
inline const ::std::string& EPubgFieldType_Name(EPubgFieldType value) {
  return ::google::protobuf::internal::NameOfEnum(
    EPubgFieldType_descriptor(), value);
}
inline bool EPubgFieldType_Parse(
    const ::std::string& name, EPubgFieldType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<EPubgFieldType>(
    EPubgFieldType_descriptor(), name, value);
}
enum EPubgSettleType {
  EPUBG_SETTLE_TYPE_SURVIVE = 0,
  EPUBG_SETTLE_TYPE_OUT = 1,
  EPUBG_SETTLE_TYPE_HANGUP = 2
};
bool EPubgSettleType_IsValid(int value);
const EPubgSettleType EPubgSettleType_MIN = EPUBG_SETTLE_TYPE_SURVIVE;
const EPubgSettleType EPubgSettleType_MAX = EPUBG_SETTLE_TYPE_HANGUP;
const int EPubgSettleType_ARRAYSIZE = EPubgSettleType_MAX + 1;

const ::google::protobuf::EnumDescriptor* EPubgSettleType_descriptor();
inline const ::std::string& EPubgSettleType_Name(EPubgSettleType value) {
  return ::google::protobuf::internal::NameOfEnum(
    EPubgSettleType_descriptor(), value);
}
inline bool EPubgSettleType_Parse(
    const ::std::string& name, EPubgSettleType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<EPubgSettleType>(
    EPubgSettleType_descriptor(), name, value);
}
// ===================================================================

/*FOR2LUA
<Record>
	<name>TPubgUserInfo</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/Pubg.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TPubgUserInfo : public ::google::protobuf::Message {
 public:
  TPubgUserInfo();
  virtual ~TPubgUserInfo();

  TPubgUserInfo(const TPubgUserInfo& from);

  inline TPubgUserInfo& operator=(const TPubgUserInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TPubgUserInfo& default_instance();

  void Swap(TPubgUserInfo* other);

  // implements Message ----------------------------------------------

  TPubgUserInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TPubgUserInfo& from);
  void MergeFrom(const TPubgUserInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint64 Uid = 1;
  inline bool has_uid() const;
  inline void clear_uid();
  static const int kUidFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TPubgUserInfo</name>
  	<Function>
  		<name>uid</name>
  		<replaceName>Uid</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_uid</name>
  		<replaceName>Uid</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_uid</name>
  		<replaceName>Uid</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint64 uid() const;
  inline void set_uid(::google::protobuf::uint64 value);

  // optional string ServerId = 2;
  inline bool has_serverid() const;
  inline void clear_serverid();
  static const int kServerIdFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TPubgUserInfo</name>
  	<Function>
  		<name>serverid</name>
  		<replaceName>ServerId</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_serverid</name>
  		<replaceName>ServerId</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_serverid</name>
  		<replaceName>ServerId</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::std::string& serverid() const;
  inline void set_serverid(const ::std::string& value);
  inline void set_serverid(const char* value);
  inline void set_serverid(const char* value, size_t size);
  inline ::std::string* mutable_serverid();
  inline ::std::string* release_serverid();
  inline void set_allocated_serverid(::std::string* serverid);

  // optional uint32 ServerTeamId = 3;
  inline bool has_serverteamid() const;
  inline void clear_serverteamid();
  static const int kServerTeamIdFieldNumber = 3;
  /*FOR2LUA
  <Record>
  	<name>TPubgUserInfo</name>
  	<Function>
  		<name>serverteamid</name>
  		<replaceName>ServerTeamId</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_serverteamid</name>
  		<replaceName>ServerTeamId</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_serverteamid</name>
  		<replaceName>ServerTeamId</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 serverteamid() const;
  inline void set_serverteamid(::google::protobuf::uint32 value);

  // optional uint64 SignTime = 4;
  inline bool has_signtime() const;
  inline void clear_signtime();
  static const int kSignTimeFieldNumber = 4;
  /*FOR2LUA
  <Record>
  	<name>TPubgUserInfo</name>
  	<Function>
  		<name>signtime</name>
  		<replaceName>SignTime</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_signtime</name>
  		<replaceName>SignTime</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_signtime</name>
  		<replaceName>SignTime</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint64 signtime() const;
  inline void set_signtime(::google::protobuf::uint64 value);

  // optional string FieldId = 5;
  inline bool has_fieldid() const;
  inline void clear_fieldid();
  static const int kFieldIdFieldNumber = 5;
  /*FOR2LUA
  <Record>
  	<name>TPubgUserInfo</name>
  	<Function>
  		<name>fieldid</name>
  		<replaceName>FieldId</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_fieldid</name>
  		<replaceName>FieldId</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_fieldid</name>
  		<replaceName>FieldId</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::std::string& fieldid() const;
  inline void set_fieldid(const ::std::string& value);
  inline void set_fieldid(const char* value);
  inline void set_fieldid(const char* value, size_t size);
  inline ::std::string* mutable_fieldid();
  inline ::std::string* release_fieldid();
  inline void set_allocated_fieldid(::std::string* fieldid);

  // optional .pb.TPubgLocation Location = 6;
  inline bool has_location() const;
  inline void clear_location();
  static const int kLocationFieldNumber = 6;
  /*FOR2LUA
  <Record>
  	<name>TPubgUserInfo</name>
  	<Function>
  		<name>location</name>
  		<replaceName>Location</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_location</name>
  		<replaceName>Location</replaceName>
  		<handler>descripter = pb_set_message_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_allocated_location</name>
  		<replaceName>Location</replaceName>
  		<handler>descripter = pb_set_message_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_location</name>
  		<replaceName>Location</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TPubgLocation& location() const;
  inline ::pb::TPubgLocation* mutable_location();
  inline ::pb::TPubgLocation* release_location();
  inline void set_allocated_location(::pb::TPubgLocation* location);

  // optional uint32 SurviveRound = 7;
  inline bool has_surviveround() const;
  inline void clear_surviveround();
  static const int kSurviveRoundFieldNumber = 7;
  /*FOR2LUA
  <Record>
  	<name>TPubgUserInfo</name>
  	<Function>
  		<name>surviveround</name>
  		<replaceName>SurviveRound</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_surviveround</name>
  		<replaceName>SurviveRound</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_surviveround</name>
  		<replaceName>SurviveRound</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 surviveround() const;
  inline void set_surviveround(::google::protobuf::uint32 value);

  // optional bool IsAlive = 8;
  inline bool has_isalive() const;
  inline void clear_isalive();
  static const int kIsAliveFieldNumber = 8;
  /*FOR2LUA
  <Record>
  	<name>TPubgUserInfo</name>
  	<Function>
  		<name>isalive</name>
  		<replaceName>IsAlive</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_isalive</name>
  		<replaceName>IsAlive</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_isalive</name>
  		<replaceName>IsAlive</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline bool isalive() const;
  inline void set_isalive(bool value);

  // optional uint32 TotalChickenNum = 9;
  inline bool has_totalchickennum() const;
  inline void clear_totalchickennum();
  static const int kTotalChickenNumFieldNumber = 9;
  /*FOR2LUA
  <Record>
  	<name>TPubgUserInfo</name>
  	<Function>
  		<name>totalchickennum</name>
  		<replaceName>TotalChickenNum</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_totalchickennum</name>
  		<replaceName>TotalChickenNum</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_totalchickennum</name>
  		<replaceName>TotalChickenNum</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 totalchickennum() const;
  inline void set_totalchickennum(::google::protobuf::uint32 value);

  // optional uint32 SeasonWinNum = 10;
  inline bool has_seasonwinnum() const;
  inline void clear_seasonwinnum();
  static const int kSeasonWinNumFieldNumber = 10;
  /*FOR2LUA
  <Record>
  	<name>TPubgUserInfo</name>
  	<Function>
  		<name>seasonwinnum</name>
  		<replaceName>SeasonWinNum</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_seasonwinnum</name>
  		<replaceName>SeasonWinNum</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_seasonwinnum</name>
  		<replaceName>SeasonWinNum</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 seasonwinnum() const;
  inline void set_seasonwinnum(::google::protobuf::uint32 value);

  // optional uint32 TokenNum = 11;
  inline bool has_tokennum() const;
  inline void clear_tokennum();
  static const int kTokenNumFieldNumber = 11;
  /*FOR2LUA
  <Record>
  	<name>TPubgUserInfo</name>
  	<Function>
  		<name>tokennum</name>
  		<replaceName>TokenNum</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_tokennum</name>
  		<replaceName>TokenNum</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_tokennum</name>
  		<replaceName>TokenNum</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 tokennum() const;
  inline void set_tokennum(::google::protobuf::uint32 value);

  // optional uint64 TokenRecoverTime = 12;
  inline bool has_tokenrecovertime() const;
  inline void clear_tokenrecovertime();
  static const int kTokenRecoverTimeFieldNumber = 12;
  /*FOR2LUA
  <Record>
  	<name>TPubgUserInfo</name>
  	<Function>
  		<name>tokenrecovertime</name>
  		<replaceName>TokenRecoverTime</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_tokenrecovertime</name>
  		<replaceName>TokenRecoverTime</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_tokenrecovertime</name>
  		<replaceName>TokenRecoverTime</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint64 tokenrecovertime() const;
  inline void set_tokenrecovertime(::google::protobuf::uint64 value);

  // optional uint32 BuyTokenNum = 13;
  inline bool has_buytokennum() const;
  inline void clear_buytokennum();
  static const int kBuyTokenNumFieldNumber = 13;
  /*FOR2LUA
  <Record>
  	<name>TPubgUserInfo</name>
  	<Function>
  		<name>buytokennum</name>
  		<replaceName>BuyTokenNum</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_buytokennum</name>
  		<replaceName>BuyTokenNum</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_buytokennum</name>
  		<replaceName>BuyTokenNum</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 buytokennum() const;
  inline void set_buytokennum(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:pb.TPubgUserInfo)
 private:
  inline void set_has_uid();
  inline void clear_has_uid();
  inline void set_has_serverid();
  inline void clear_has_serverid();
  inline void set_has_serverteamid();
  inline void clear_has_serverteamid();
  inline void set_has_signtime();
  inline void clear_has_signtime();
  inline void set_has_fieldid();
  inline void clear_has_fieldid();
  inline void set_has_location();
  inline void clear_has_location();
  inline void set_has_surviveround();
  inline void clear_has_surviveround();
  inline void set_has_isalive();
  inline void clear_has_isalive();
  inline void set_has_totalchickennum();
  inline void clear_has_totalchickennum();
  inline void set_has_seasonwinnum();
  inline void clear_has_seasonwinnum();
  inline void set_has_tokennum();
  inline void clear_has_tokennum();
  inline void set_has_tokenrecovertime();
  inline void clear_has_tokenrecovertime();
  inline void set_has_buytokennum();
  inline void clear_has_buytokennum();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint64 uid_;
  ::std::string* serverid_;
  ::google::protobuf::uint64 signtime_;
  ::std::string* fieldid_;
  ::google::protobuf::uint32 serverteamid_;
  ::google::protobuf::uint32 surviveround_;
  ::pb::TPubgLocation* location_;
  bool isalive_;
  ::google::protobuf::uint32 totalchickennum_;
  ::google::protobuf::uint32 seasonwinnum_;
  ::google::protobuf::uint32 tokennum_;
  ::google::protobuf::uint64 tokenrecovertime_;
  ::google::protobuf::uint32 buytokennum_;
  friend void  protobuf_AddDesc_net_2fPubg_2eproto();
  friend void protobuf_AssignDesc_net_2fPubg_2eproto();
  friend void protobuf_ShutdownFile_net_2fPubg_2eproto();

  void InitAsDefaultInstance();
  static TPubgUserInfo* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TPubgOwnerInfo</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/Pubg.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TPubgOwnerInfo : public ::google::protobuf::Message {
 public:
  TPubgOwnerInfo();
  virtual ~TPubgOwnerInfo();

  TPubgOwnerInfo(const TPubgOwnerInfo& from);

  inline TPubgOwnerInfo& operator=(const TPubgOwnerInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TPubgOwnerInfo& default_instance();

  void Swap(TPubgOwnerInfo* other);

  // implements Message ----------------------------------------------

  TPubgOwnerInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TPubgOwnerInfo& from);
  void MergeFrom(const TPubgOwnerInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint64 OwnerId = 1;
  inline bool has_ownerid() const;
  inline void clear_ownerid();
  static const int kOwnerIdFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TPubgOwnerInfo</name>
  	<Function>
  		<name>ownerid</name>
  		<replaceName>OwnerId</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_ownerid</name>
  		<replaceName>OwnerId</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_ownerid</name>
  		<replaceName>OwnerId</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint64 ownerid() const;
  inline void set_ownerid(::google::protobuf::uint64 value);

  // optional .pb.TUserSimpleInfo UserInfo = 2;
  inline bool has_userinfo() const;
  inline void clear_userinfo();
  static const int kUserInfoFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TPubgOwnerInfo</name>
  	<Function>
  		<name>userinfo</name>
  		<replaceName>UserInfo</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_userinfo</name>
  		<replaceName>UserInfo</replaceName>
  		<handler>descripter = pb_set_message_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_allocated_userinfo</name>
  		<replaceName>UserInfo</replaceName>
  		<handler>descripter = pb_set_message_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_userinfo</name>
  		<replaceName>UserInfo</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TUserSimpleInfo& userinfo() const;
  inline ::pb::TUserSimpleInfo* mutable_userinfo();
  inline ::pb::TUserSimpleInfo* release_userinfo();
  inline void set_allocated_userinfo(::pb::TUserSimpleInfo* userinfo);

  // optional uint64 Hp = 3;
  inline bool has_hp() const;
  inline void clear_hp();
  static const int kHpFieldNumber = 3;
  /*FOR2LUA
  <Record>
  	<name>TPubgOwnerInfo</name>
  	<Function>
  		<name>hp</name>
  		<replaceName>Hp</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_hp</name>
  		<replaceName>Hp</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_hp</name>
  		<replaceName>Hp</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint64 hp() const;
  inline void set_hp(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:pb.TPubgOwnerInfo)
 private:
  inline void set_has_ownerid();
  inline void clear_has_ownerid();
  inline void set_has_userinfo();
  inline void clear_has_userinfo();
  inline void set_has_hp();
  inline void clear_has_hp();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint64 ownerid_;
  ::pb::TUserSimpleInfo* userinfo_;
  ::google::protobuf::uint64 hp_;
  friend void  protobuf_AddDesc_net_2fPubg_2eproto();
  friend void protobuf_AssignDesc_net_2fPubg_2eproto();
  friend void protobuf_ShutdownFile_net_2fPubg_2eproto();

  void InitAsDefaultInstance();
  static TPubgOwnerInfo* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TPubgChickenEaterInfo</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/Pubg.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TPubgChickenEaterInfo : public ::google::protobuf::Message {
 public:
  TPubgChickenEaterInfo();
  virtual ~TPubgChickenEaterInfo();

  TPubgChickenEaterInfo(const TPubgChickenEaterInfo& from);

  inline TPubgChickenEaterInfo& operator=(const TPubgChickenEaterInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TPubgChickenEaterInfo& default_instance();

  void Swap(TPubgChickenEaterInfo* other);

  // implements Message ----------------------------------------------

  TPubgChickenEaterInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TPubgChickenEaterInfo& from);
  void MergeFrom(const TPubgChickenEaterInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .pb.TUserSimpleInfo UserInfo = 1;
  inline bool has_userinfo() const;
  inline void clear_userinfo();
  static const int kUserInfoFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TPubgChickenEaterInfo</name>
  	<Function>
  		<name>userinfo</name>
  		<replaceName>UserInfo</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_userinfo</name>
  		<replaceName>UserInfo</replaceName>
  		<handler>descripter = pb_set_message_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_allocated_userinfo</name>
  		<replaceName>UserInfo</replaceName>
  		<handler>descripter = pb_set_message_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_userinfo</name>
  		<replaceName>UserInfo</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TUserSimpleInfo& userinfo() const;
  inline ::pb::TUserSimpleInfo* mutable_userinfo();
  inline ::pb::TUserSimpleInfo* release_userinfo();
  inline void set_allocated_userinfo(::pb::TUserSimpleInfo* userinfo);

  // optional uint32 TotalChickenNum = 2;
  inline bool has_totalchickennum() const;
  inline void clear_totalchickennum();
  static const int kTotalChickenNumFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TPubgChickenEaterInfo</name>
  	<Function>
  		<name>totalchickennum</name>
  		<replaceName>TotalChickenNum</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_totalchickennum</name>
  		<replaceName>TotalChickenNum</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_totalchickennum</name>
  		<replaceName>TotalChickenNum</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 totalchickennum() const;
  inline void set_totalchickennum(::google::protobuf::uint32 value);

  // optional uint32 SeasonWinNum = 3;
  inline bool has_seasonwinnum() const;
  inline void clear_seasonwinnum();
  static const int kSeasonWinNumFieldNumber = 3;
  /*FOR2LUA
  <Record>
  	<name>TPubgChickenEaterInfo</name>
  	<Function>
  		<name>seasonwinnum</name>
  		<replaceName>SeasonWinNum</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_seasonwinnum</name>
  		<replaceName>SeasonWinNum</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_seasonwinnum</name>
  		<replaceName>SeasonWinNum</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 seasonwinnum() const;
  inline void set_seasonwinnum(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:pb.TPubgChickenEaterInfo)
 private:
  inline void set_has_userinfo();
  inline void clear_has_userinfo();
  inline void set_has_totalchickennum();
  inline void clear_has_totalchickennum();
  inline void set_has_seasonwinnum();
  inline void clear_has_seasonwinnum();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::pb::TUserSimpleInfo* userinfo_;
  ::google::protobuf::uint32 totalchickennum_;
  ::google::protobuf::uint32 seasonwinnum_;
  friend void  protobuf_AddDesc_net_2fPubg_2eproto();
  friend void protobuf_AssignDesc_net_2fPubg_2eproto();
  friend void protobuf_ShutdownFile_net_2fPubg_2eproto();

  void InitAsDefaultInstance();
  static TPubgChickenEaterInfo* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TPubgCampInfo</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/Pubg.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TPubgCampInfo : public ::google::protobuf::Message {
 public:
  TPubgCampInfo();
  virtual ~TPubgCampInfo();

  TPubgCampInfo(const TPubgCampInfo& from);

  inline TPubgCampInfo& operator=(const TPubgCampInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TPubgCampInfo& default_instance();

  void Swap(TPubgCampInfo* other);

  // implements Message ----------------------------------------------

  TPubgCampInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TPubgCampInfo& from);
  void MergeFrom(const TPubgCampInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 CampId = 1;
  inline bool has_campid() const;
  inline void clear_campid();
  static const int kCampIdFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TPubgCampInfo</name>
  	<Function>
  		<name>campid</name>
  		<replaceName>CampId</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_campid</name>
  		<replaceName>CampId</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_campid</name>
  		<replaceName>CampId</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 campid() const;
  inline void set_campid(::google::protobuf::uint32 value);

  // optional .pb.EPubgStatus Status = 2;
  inline bool has_status() const;
  inline void clear_status();
  static const int kStatusFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TPubgCampInfo</name>
  	<Function>
  		<name>status</name>
  		<replaceName>Status</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_status</name>
  		<replaceName>Status</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_status</name>
  		<replaceName>Status</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::pb::EPubgStatus status() const;
  inline void set_status(::pb::EPubgStatus value);

  // optional .pb.TPubgOwnerInfo Owner = 3;
  inline bool has_owner() const;
  inline void clear_owner();
  static const int kOwnerFieldNumber = 3;
  /*FOR2LUA
  <Record>
  	<name>TPubgCampInfo</name>
  	<Function>
  		<name>owner</name>
  		<replaceName>Owner</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_owner</name>
  		<replaceName>Owner</replaceName>
  		<handler>descripter = pb_set_message_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_allocated_owner</name>
  		<replaceName>Owner</replaceName>
  		<handler>descripter = pb_set_message_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_owner</name>
  		<replaceName>Owner</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TPubgOwnerInfo& owner() const;
  inline ::pb::TPubgOwnerInfo* mutable_owner();
  inline ::pb::TPubgOwnerInfo* release_owner();
  inline void set_allocated_owner(::pb::TPubgOwnerInfo* owner);

  // @@protoc_insertion_point(class_scope:pb.TPubgCampInfo)
 private:
  inline void set_has_campid();
  inline void clear_has_campid();
  inline void set_has_status();
  inline void clear_has_status();
  inline void set_has_owner();
  inline void clear_has_owner();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 campid_;
  int status_;
  ::pb::TPubgOwnerInfo* owner_;
  friend void  protobuf_AddDesc_net_2fPubg_2eproto();
  friend void protobuf_AssignDesc_net_2fPubg_2eproto();
  friend void protobuf_ShutdownFile_net_2fPubg_2eproto();

  void InitAsDefaultInstance();
  static TPubgCampInfo* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TPubgCityInfo</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/Pubg.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TPubgCityInfo : public ::google::protobuf::Message {
 public:
  TPubgCityInfo();
  virtual ~TPubgCityInfo();

  TPubgCityInfo(const TPubgCityInfo& from);

  inline TPubgCityInfo& operator=(const TPubgCityInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TPubgCityInfo& default_instance();

  void Swap(TPubgCityInfo* other);

  // implements Message ----------------------------------------------

  TPubgCityInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TPubgCityInfo& from);
  void MergeFrom(const TPubgCityInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 CityId = 1;
  inline bool has_cityid() const;
  inline void clear_cityid();
  static const int kCityIdFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TPubgCityInfo</name>
  	<Function>
  		<name>cityid</name>
  		<replaceName>CityId</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_cityid</name>
  		<replaceName>CityId</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_cityid</name>
  		<replaceName>CityId</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 cityid() const;
  inline void set_cityid(::google::protobuf::uint32 value);

  // optional .pb.EPubgStatus Status = 2;
  inline bool has_status() const;
  inline void clear_status();
  static const int kStatusFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TPubgCityInfo</name>
  	<Function>
  		<name>status</name>
  		<replaceName>Status</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_status</name>
  		<replaceName>Status</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_status</name>
  		<replaceName>Status</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::pb::EPubgStatus status() const;
  inline void set_status(::pb::EPubgStatus value);

  // optional uint32 OccupyNum = 3;
  inline bool has_occupynum() const;
  inline void clear_occupynum();
  static const int kOccupyNumFieldNumber = 3;
  /*FOR2LUA
  <Record>
  	<name>TPubgCityInfo</name>
  	<Function>
  		<name>occupynum</name>
  		<replaceName>OccupyNum</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_occupynum</name>
  		<replaceName>OccupyNum</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_occupynum</name>
  		<replaceName>OccupyNum</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 occupynum() const;
  inline void set_occupynum(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:pb.TPubgCityInfo)
 private:
  inline void set_has_cityid();
  inline void clear_has_cityid();
  inline void set_has_status();
  inline void clear_has_status();
  inline void set_has_occupynum();
  inline void clear_has_occupynum();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 cityid_;
  int status_;
  ::google::protobuf::uint32 occupynum_;
  friend void  protobuf_AddDesc_net_2fPubg_2eproto();
  friend void protobuf_AssignDesc_net_2fPubg_2eproto();
  friend void protobuf_ShutdownFile_net_2fPubg_2eproto();

  void InitAsDefaultInstance();
  static TPubgCityInfo* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TPubgAreaInfo</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/Pubg.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TPubgAreaInfo : public ::google::protobuf::Message {
 public:
  TPubgAreaInfo();
  virtual ~TPubgAreaInfo();

  TPubgAreaInfo(const TPubgAreaInfo& from);

  inline TPubgAreaInfo& operator=(const TPubgAreaInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TPubgAreaInfo& default_instance();

  void Swap(TPubgAreaInfo* other);

  // implements Message ----------------------------------------------

  TPubgAreaInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TPubgAreaInfo& from);
  void MergeFrom(const TPubgAreaInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 AreaId = 1;
  inline bool has_areaid() const;
  inline void clear_areaid();
  static const int kAreaIdFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TPubgAreaInfo</name>
  	<Function>
  		<name>areaid</name>
  		<replaceName>AreaId</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_areaid</name>
  		<replaceName>AreaId</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_areaid</name>
  		<replaceName>AreaId</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 areaid() const;
  inline void set_areaid(::google::protobuf::uint32 value);

  // optional .pb.EPubgStatus Status = 2;
  inline bool has_status() const;
  inline void clear_status();
  static const int kStatusFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TPubgAreaInfo</name>
  	<Function>
  		<name>status</name>
  		<replaceName>Status</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_status</name>
  		<replaceName>Status</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_status</name>
  		<replaceName>Status</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::pb::EPubgStatus status() const;
  inline void set_status(::pb::EPubgStatus value);

  // repeated .pb.TPubgCityInfo ArrCity = 3;
  inline int arrcity_size() const;
  inline void clear_arrcity();
  static const int kArrCityFieldNumber = 3;
  /*FOR2LUA
  <Record>
  	<name>TPubgAreaInfo</name>
  	<Function>
  		<name>arrcity</name>
  		<replaceName>ArrCity</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_arrcity</name>
  		<replaceName>ArrCity</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_arrcity</name>
  		<replaceName>ArrCity</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_arrcity</name>
  		<replaceName>ArrCity</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>arrcity_size</name>
  		<replaceName>ArrCity</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TPubgCityInfo& arrcity(int index) const;
  inline ::pb::TPubgCityInfo* mutable_arrcity(int index);
  inline ::pb::TPubgCityInfo* add_arrcity();
  inline const ::google::protobuf::RepeatedPtrField< ::pb::TPubgCityInfo >&
      arrcity() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb::TPubgCityInfo >*
      mutable_arrcity();

  // @@protoc_insertion_point(class_scope:pb.TPubgAreaInfo)
 private:
  inline void set_has_areaid();
  inline void clear_has_areaid();
  inline void set_has_status();
  inline void clear_has_status();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 areaid_;
  int status_;
  ::google::protobuf::RepeatedPtrField< ::pb::TPubgCityInfo > arrcity_;
  friend void  protobuf_AddDesc_net_2fPubg_2eproto();
  friend void protobuf_AssignDesc_net_2fPubg_2eproto();
  friend void protobuf_ShutdownFile_net_2fPubg_2eproto();

  void InitAsDefaultInstance();
  static TPubgAreaInfo* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TPubgFieldInfo</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/Pubg.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TPubgFieldInfo : public ::google::protobuf::Message {
 public:
  TPubgFieldInfo();
  virtual ~TPubgFieldInfo();

  TPubgFieldInfo(const TPubgFieldInfo& from);

  inline TPubgFieldInfo& operator=(const TPubgFieldInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TPubgFieldInfo& default_instance();

  void Swap(TPubgFieldInfo* other);

  // implements Message ----------------------------------------------

  TPubgFieldInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TPubgFieldInfo& from);
  void MergeFrom(const TPubgFieldInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string FieldId = 1;
  inline bool has_fieldid() const;
  inline void clear_fieldid();
  static const int kFieldIdFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TPubgFieldInfo</name>
  	<Function>
  		<name>fieldid</name>
  		<replaceName>FieldId</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_fieldid</name>
  		<replaceName>FieldId</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_fieldid</name>
  		<replaceName>FieldId</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::std::string& fieldid() const;
  inline void set_fieldid(const ::std::string& value);
  inline void set_fieldid(const char* value);
  inline void set_fieldid(const char* value, size_t size);
  inline ::std::string* mutable_fieldid();
  inline ::std::string* release_fieldid();
  inline void set_allocated_fieldid(::std::string* fieldid);

  // optional .pb.EPubgFieldType FieldType = 2;
  inline bool has_fieldtype() const;
  inline void clear_fieldtype();
  static const int kFieldTypeFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TPubgFieldInfo</name>
  	<Function>
  		<name>fieldtype</name>
  		<replaceName>FieldType</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_fieldtype</name>
  		<replaceName>FieldType</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_fieldtype</name>
  		<replaceName>FieldType</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::pb::EPubgFieldType fieldtype() const;
  inline void set_fieldtype(::pb::EPubgFieldType value);

  // repeated .pb.TPubgAreaInfo ArrArea = 3;
  inline int arrarea_size() const;
  inline void clear_arrarea();
  static const int kArrAreaFieldNumber = 3;
  /*FOR2LUA
  <Record>
  	<name>TPubgFieldInfo</name>
  	<Function>
  		<name>arrarea</name>
  		<replaceName>ArrArea</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_arrarea</name>
  		<replaceName>ArrArea</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_arrarea</name>
  		<replaceName>ArrArea</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_arrarea</name>
  		<replaceName>ArrArea</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>arrarea_size</name>
  		<replaceName>ArrArea</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TPubgAreaInfo& arrarea(int index) const;
  inline ::pb::TPubgAreaInfo* mutable_arrarea(int index);
  inline ::pb::TPubgAreaInfo* add_arrarea();
  inline const ::google::protobuf::RepeatedPtrField< ::pb::TPubgAreaInfo >&
      arrarea() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb::TPubgAreaInfo >*
      mutable_arrarea();

  // @@protoc_insertion_point(class_scope:pb.TPubgFieldInfo)
 private:
  inline void set_has_fieldid();
  inline void clear_has_fieldid();
  inline void set_has_fieldtype();
  inline void clear_has_fieldtype();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* fieldid_;
  ::google::protobuf::RepeatedPtrField< ::pb::TPubgAreaInfo > arrarea_;
  int fieldtype_;
  friend void  protobuf_AddDesc_net_2fPubg_2eproto();
  friend void protobuf_AssignDesc_net_2fPubg_2eproto();
  friend void protobuf_ShutdownFile_net_2fPubg_2eproto();

  void InitAsDefaultInstance();
  static TPubgFieldInfo* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TPubgProcessInfo</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/Pubg.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TPubgProcessInfo : public ::google::protobuf::Message {
 public:
  TPubgProcessInfo();
  virtual ~TPubgProcessInfo();

  TPubgProcessInfo(const TPubgProcessInfo& from);

  inline TPubgProcessInfo& operator=(const TPubgProcessInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TPubgProcessInfo& default_instance();

  void Swap(TPubgProcessInfo* other);

  // implements Message ----------------------------------------------

  TPubgProcessInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TPubgProcessInfo& from);
  void MergeFrom(const TPubgProcessInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 Round = 1;
  inline bool has_round() const;
  inline void clear_round();
  static const int kRoundFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TPubgProcessInfo</name>
  	<Function>
  		<name>round</name>
  		<replaceName>Round</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_round</name>
  		<replaceName>Round</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_round</name>
  		<replaceName>Round</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 round() const;
  inline void set_round(::google::protobuf::uint32 value);

  // optional .pb.EPubgStage Stage = 2;
  inline bool has_stage() const;
  inline void clear_stage();
  static const int kStageFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TPubgProcessInfo</name>
  	<Function>
  		<name>stage</name>
  		<replaceName>Stage</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_stage</name>
  		<replaceName>Stage</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_stage</name>
  		<replaceName>Stage</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::pb::EPubgStage stage() const;
  inline void set_stage(::pb::EPubgStage value);

  // optional uint64 BegTime = 3;
  inline bool has_begtime() const;
  inline void clear_begtime();
  static const int kBegTimeFieldNumber = 3;
  /*FOR2LUA
  <Record>
  	<name>TPubgProcessInfo</name>
  	<Function>
  		<name>begtime</name>
  		<replaceName>BegTime</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_begtime</name>
  		<replaceName>BegTime</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_begtime</name>
  		<replaceName>BegTime</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint64 begtime() const;
  inline void set_begtime(::google::protobuf::uint64 value);

  // optional uint64 EndTime = 4;
  inline bool has_endtime() const;
  inline void clear_endtime();
  static const int kEndTimeFieldNumber = 4;
  /*FOR2LUA
  <Record>
  	<name>TPubgProcessInfo</name>
  	<Function>
  		<name>endtime</name>
  		<replaceName>EndTime</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_endtime</name>
  		<replaceName>EndTime</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_endtime</name>
  		<replaceName>EndTime</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint64 endtime() const;
  inline void set_endtime(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:pb.TPubgProcessInfo)
 private:
  inline void set_has_round();
  inline void clear_has_round();
  inline void set_has_stage();
  inline void clear_has_stage();
  inline void set_has_begtime();
  inline void clear_has_begtime();
  inline void set_has_endtime();
  inline void clear_has_endtime();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 round_;
  int stage_;
  ::google::protobuf::uint64 begtime_;
  ::google::protobuf::uint64 endtime_;
  friend void  protobuf_AddDesc_net_2fPubg_2eproto();
  friend void protobuf_AssignDesc_net_2fPubg_2eproto();
  friend void protobuf_ShutdownFile_net_2fPubg_2eproto();

  void InitAsDefaultInstance();
  static TPubgProcessInfo* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TPubgPosInfo</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/Pubg.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TPubgPosInfo : public ::google::protobuf::Message {
 public:
  TPubgPosInfo();
  virtual ~TPubgPosInfo();

  TPubgPosInfo(const TPubgPosInfo& from);

  inline TPubgPosInfo& operator=(const TPubgPosInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TPubgPosInfo& default_instance();

  void Swap(TPubgPosInfo* other);

  // implements Message ----------------------------------------------

  TPubgPosInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TPubgPosInfo& from);
  void MergeFrom(const TPubgPosInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 Pos = 1;
  inline bool has_pos() const;
  inline void clear_pos();
  static const int kPosFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TPubgPosInfo</name>
  	<Function>
  		<name>pos</name>
  		<replaceName>Pos</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_pos</name>
  		<replaceName>Pos</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_pos</name>
  		<replaceName>Pos</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 pos() const;
  inline void set_pos(::google::protobuf::uint32 value);

  // optional uint32 Hid = 2;
  inline bool has_hid() const;
  inline void clear_hid();
  static const int kHidFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TPubgPosInfo</name>
  	<Function>
  		<name>hid</name>
  		<replaceName>Hid</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_hid</name>
  		<replaceName>Hid</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_hid</name>
  		<replaceName>Hid</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 hid() const;
  inline void set_hid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:pb.TPubgPosInfo)
 private:
  inline void set_has_pos();
  inline void clear_has_pos();
  inline void set_has_hid();
  inline void clear_has_hid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 pos_;
  ::google::protobuf::uint32 hid_;
  friend void  protobuf_AddDesc_net_2fPubg_2eproto();
  friend void protobuf_AssignDesc_net_2fPubg_2eproto();
  friend void protobuf_ShutdownFile_net_2fPubg_2eproto();

  void InitAsDefaultInstance();
  static TPubgPosInfo* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TPubgFmtInfo</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/Pubg.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TPubgFmtInfo : public ::google::protobuf::Message {
 public:
  TPubgFmtInfo();
  virtual ~TPubgFmtInfo();

  TPubgFmtInfo(const TPubgFmtInfo& from);

  inline TPubgFmtInfo& operator=(const TPubgFmtInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TPubgFmtInfo& default_instance();

  void Swap(TPubgFmtInfo* other);

  // implements Message ----------------------------------------------

  TPubgFmtInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TPubgFmtInfo& from);
  void MergeFrom(const TPubgFmtInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 FmtId = 1;
  inline bool has_fmtid() const;
  inline void clear_fmtid();
  static const int kFmtIdFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TPubgFmtInfo</name>
  	<Function>
  		<name>fmtid</name>
  		<replaceName>FmtId</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_fmtid</name>
  		<replaceName>FmtId</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_fmtid</name>
  		<replaceName>FmtId</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 fmtid() const;
  inline void set_fmtid(::google::protobuf::uint32 value);

  // repeated .pb.TPubgPosInfo ArrPos = 2;
  inline int arrpos_size() const;
  inline void clear_arrpos();
  static const int kArrPosFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TPubgFmtInfo</name>
  	<Function>
  		<name>arrpos</name>
  		<replaceName>ArrPos</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_arrpos</name>
  		<replaceName>ArrPos</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_arrpos</name>
  		<replaceName>ArrPos</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_arrpos</name>
  		<replaceName>ArrPos</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>arrpos_size</name>
  		<replaceName>ArrPos</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TPubgPosInfo& arrpos(int index) const;
  inline ::pb::TPubgPosInfo* mutable_arrpos(int index);
  inline ::pb::TPubgPosInfo* add_arrpos();
  inline const ::google::protobuf::RepeatedPtrField< ::pb::TPubgPosInfo >&
      arrpos() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb::TPubgPosInfo >*
      mutable_arrpos();

  // @@protoc_insertion_point(class_scope:pb.TPubgFmtInfo)
 private:
  inline void set_has_fmtid();
  inline void clear_has_fmtid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::pb::TPubgPosInfo > arrpos_;
  ::google::protobuf::uint32 fmtid_;
  friend void  protobuf_AddDesc_net_2fPubg_2eproto();
  friend void protobuf_AssignDesc_net_2fPubg_2eproto();
  friend void protobuf_ShutdownFile_net_2fPubg_2eproto();

  void InitAsDefaultInstance();
  static TPubgFmtInfo* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TPubgFmtDetail</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/Pubg.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TPubgFmtDetail : public ::google::protobuf::Message {
 public:
  TPubgFmtDetail();
  virtual ~TPubgFmtDetail();

  TPubgFmtDetail(const TPubgFmtDetail& from);

  inline TPubgFmtDetail& operator=(const TPubgFmtDetail& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TPubgFmtDetail& default_instance();

  void Swap(TPubgFmtDetail* other);

  // implements Message ----------------------------------------------

  TPubgFmtDetail* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TPubgFmtDetail& from);
  void MergeFrom(const TPubgFmtDetail& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 FmtId = 1;
  inline bool has_fmtid() const;
  inline void clear_fmtid();
  static const int kFmtIdFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TPubgFmtDetail</name>
  	<Function>
  		<name>fmtid</name>
  		<replaceName>FmtId</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_fmtid</name>
  		<replaceName>FmtId</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_fmtid</name>
  		<replaceName>FmtId</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 fmtid() const;
  inline void set_fmtid(::google::protobuf::uint32 value);

  // repeated .pb.TUnitInfo UnitArr = 2;
  inline int unitarr_size() const;
  inline void clear_unitarr();
  static const int kUnitArrFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TPubgFmtDetail</name>
  	<Function>
  		<name>unitarr</name>
  		<replaceName>UnitArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_unitarr</name>
  		<replaceName>UnitArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_unitarr</name>
  		<replaceName>UnitArr</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_unitarr</name>
  		<replaceName>UnitArr</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>unitarr_size</name>
  		<replaceName>UnitArr</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TUnitInfo& unitarr(int index) const;
  inline ::pb::TUnitInfo* mutable_unitarr(int index);
  inline ::pb::TUnitInfo* add_unitarr();
  inline const ::google::protobuf::RepeatedPtrField< ::pb::TUnitInfo >&
      unitarr() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb::TUnitInfo >*
      mutable_unitarr();

  // optional uint64 FightForce = 3;
  inline bool has_fightforce() const;
  inline void clear_fightforce();
  static const int kFightForceFieldNumber = 3;
  /*FOR2LUA
  <Record>
  	<name>TPubgFmtDetail</name>
  	<Function>
  		<name>fightforce</name>
  		<replaceName>FightForce</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_fightforce</name>
  		<replaceName>FightForce</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_fightforce</name>
  		<replaceName>FightForce</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint64 fightforce() const;
  inline void set_fightforce(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:pb.TPubgFmtDetail)
 private:
  inline void set_has_fmtid();
  inline void clear_has_fmtid();
  inline void set_has_fightforce();
  inline void clear_has_fightforce();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::pb::TUnitInfo > unitarr_;
  ::google::protobuf::uint64 fightforce_;
  ::google::protobuf::uint32 fmtid_;
  friend void  protobuf_AddDesc_net_2fPubg_2eproto();
  friend void protobuf_AssignDesc_net_2fPubg_2eproto();
  friend void protobuf_ShutdownFile_net_2fPubg_2eproto();

  void InitAsDefaultInstance();
  static TPubgFmtDetail* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TPubgBattleSimple</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/Pubg.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TPubgBattleSimple : public ::google::protobuf::Message {
 public:
  TPubgBattleSimple();
  virtual ~TPubgBattleSimple();

  TPubgBattleSimple(const TPubgBattleSimple& from);

  inline TPubgBattleSimple& operator=(const TPubgBattleSimple& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TPubgBattleSimple& default_instance();

  void Swap(TPubgBattleSimple* other);

  // implements Message ----------------------------------------------

  TPubgBattleSimple* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TPubgBattleSimple& from);
  void MergeFrom(const TPubgBattleSimple& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 FmtId = 1;
  inline bool has_fmtid() const;
  inline void clear_fmtid();
  static const int kFmtIdFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TPubgBattleSimple</name>
  	<Function>
  		<name>fmtid</name>
  		<replaceName>FmtId</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_fmtid</name>
  		<replaceName>FmtId</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_fmtid</name>
  		<replaceName>FmtId</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 fmtid() const;
  inline void set_fmtid(::google::protobuf::uint32 value);

  // optional bool Result = 2;
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TPubgBattleSimple</name>
  	<Function>
  		<name>result</name>
  		<replaceName>Result</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_result</name>
  		<replaceName>Result</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_result</name>
  		<replaceName>Result</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline bool result() const;
  inline void set_result(bool value);

  // optional uint64 Rid = 3;
  inline bool has_rid() const;
  inline void clear_rid();
  static const int kRidFieldNumber = 3;
  /*FOR2LUA
  <Record>
  	<name>TPubgBattleSimple</name>
  	<Function>
  		<name>rid</name>
  		<replaceName>Rid</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_rid</name>
  		<replaceName>Rid</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_rid</name>
  		<replaceName>Rid</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint64 rid() const;
  inline void set_rid(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:pb.TPubgBattleSimple)
 private:
  inline void set_has_fmtid();
  inline void clear_has_fmtid();
  inline void set_has_result();
  inline void clear_has_result();
  inline void set_has_rid();
  inline void clear_has_rid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 fmtid_;
  bool result_;
  ::google::protobuf::uint64 rid_;
  friend void  protobuf_AddDesc_net_2fPubg_2eproto();
  friend void protobuf_AssignDesc_net_2fPubg_2eproto();
  friend void protobuf_ShutdownFile_net_2fPubg_2eproto();

  void InitAsDefaultInstance();
  static TPubgBattleSimple* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TPubgBattleDetail</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/Pubg.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TPubgBattleDetail : public ::google::protobuf::Message {
 public:
  TPubgBattleDetail();
  virtual ~TPubgBattleDetail();

  TPubgBattleDetail(const TPubgBattleDetail& from);

  inline TPubgBattleDetail& operator=(const TPubgBattleDetail& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TPubgBattleDetail& default_instance();

  void Swap(TPubgBattleDetail* other);

  // implements Message ----------------------------------------------

  TPubgBattleDetail* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TPubgBattleDetail& from);
  void MergeFrom(const TPubgBattleDetail& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 FmtId = 1;
  inline bool has_fmtid() const;
  inline void clear_fmtid();
  static const int kFmtIdFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TPubgBattleDetail</name>
  	<Function>
  		<name>fmtid</name>
  		<replaceName>FmtId</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_fmtid</name>
  		<replaceName>FmtId</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_fmtid</name>
  		<replaceName>FmtId</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 fmtid() const;
  inline void set_fmtid(::google::protobuf::uint32 value);

  // optional bool Result = 2;
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TPubgBattleDetail</name>
  	<Function>
  		<name>result</name>
  		<replaceName>Result</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_result</name>
  		<replaceName>Result</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_result</name>
  		<replaceName>Result</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline bool result() const;
  inline void set_result(bool value);

  // optional uint64 Rid = 3;
  inline bool has_rid() const;
  inline void clear_rid();
  static const int kRidFieldNumber = 3;
  /*FOR2LUA
  <Record>
  	<name>TPubgBattleDetail</name>
  	<Function>
  		<name>rid</name>
  		<replaceName>Rid</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_rid</name>
  		<replaceName>Rid</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_rid</name>
  		<replaceName>Rid</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint64 rid() const;
  inline void set_rid(::google::protobuf::uint64 value);

  // optional bytes BattleResult = 4;
  inline bool has_battleresult() const;
  inline void clear_battleresult();
  static const int kBattleResultFieldNumber = 4;
  /*FOR2LUA
  <Record>
  	<name>TPubgBattleDetail</name>
  	<Function>
  		<name>battleresult</name>
  		<replaceName>BattleResult</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_battleresult</name>
  		<replaceName>BattleResult</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_battleresult</name>
  		<replaceName>BattleResult</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::std::string& battleresult() const;
  inline void set_battleresult(const ::std::string& value);
  inline void set_battleresult(const char* value);
  inline void set_battleresult(const void* value, size_t size);
  inline ::std::string* mutable_battleresult();
  inline ::std::string* release_battleresult();
  inline void set_allocated_battleresult(::std::string* battleresult);

  // @@protoc_insertion_point(class_scope:pb.TPubgBattleDetail)
 private:
  inline void set_has_fmtid();
  inline void clear_has_fmtid();
  inline void set_has_result();
  inline void clear_has_result();
  inline void set_has_rid();
  inline void clear_has_rid();
  inline void set_has_battleresult();
  inline void clear_has_battleresult();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 fmtid_;
  bool result_;
  ::google::protobuf::uint64 rid_;
  ::std::string* battleresult_;
  friend void  protobuf_AddDesc_net_2fPubg_2eproto();
  friend void protobuf_AssignDesc_net_2fPubg_2eproto();
  friend void protobuf_ShutdownFile_net_2fPubg_2eproto();

  void InitAsDefaultInstance();
  static TPubgBattleDetail* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TPubgBattleRecord</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/Pubg.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TPubgBattleRecord : public ::google::protobuf::Message {
 public:
  TPubgBattleRecord();
  virtual ~TPubgBattleRecord();

  TPubgBattleRecord(const TPubgBattleRecord& from);

  inline TPubgBattleRecord& operator=(const TPubgBattleRecord& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TPubgBattleRecord& default_instance();

  void Swap(TPubgBattleRecord* other);

  // implements Message ----------------------------------------------

  TPubgBattleRecord* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TPubgBattleRecord& from);
  void MergeFrom(const TPubgBattleRecord& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .pb.TPubgLocation AtkLocation = 1;
  inline bool has_atklocation() const;
  inline void clear_atklocation();
  static const int kAtkLocationFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TPubgBattleRecord</name>
  	<Function>
  		<name>atklocation</name>
  		<replaceName>AtkLocation</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_atklocation</name>
  		<replaceName>AtkLocation</replaceName>
  		<handler>descripter = pb_set_message_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_allocated_atklocation</name>
  		<replaceName>AtkLocation</replaceName>
  		<handler>descripter = pb_set_message_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_atklocation</name>
  		<replaceName>AtkLocation</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TPubgLocation& atklocation() const;
  inline ::pb::TPubgLocation* mutable_atklocation();
  inline ::pb::TPubgLocation* release_atklocation();
  inline void set_allocated_atklocation(::pb::TPubgLocation* atklocation);

  // optional uint64 AtkOwnerId = 2;
  inline bool has_atkownerid() const;
  inline void clear_atkownerid();
  static const int kAtkOwnerIdFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TPubgBattleRecord</name>
  	<Function>
  		<name>atkownerid</name>
  		<replaceName>AtkOwnerId</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_atkownerid</name>
  		<replaceName>AtkOwnerId</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_atkownerid</name>
  		<replaceName>AtkOwnerId</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint64 atkownerid() const;
  inline void set_atkownerid(::google::protobuf::uint64 value);

  // optional string AtkServerId = 3;
  inline bool has_atkserverid() const;
  inline void clear_atkserverid();
  static const int kAtkServerIdFieldNumber = 3;
  /*FOR2LUA
  <Record>
  	<name>TPubgBattleRecord</name>
  	<Function>
  		<name>atkserverid</name>
  		<replaceName>AtkServerId</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_atkserverid</name>
  		<replaceName>AtkServerId</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_atkserverid</name>
  		<replaceName>AtkServerId</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::std::string& atkserverid() const;
  inline void set_atkserverid(const ::std::string& value);
  inline void set_atkserverid(const char* value);
  inline void set_atkserverid(const char* value, size_t size);
  inline ::std::string* mutable_atkserverid();
  inline ::std::string* release_atkserverid();
  inline void set_allocated_atkserverid(::std::string* atkserverid);

  // optional string AtkUname = 4;
  inline bool has_atkuname() const;
  inline void clear_atkuname();
  static const int kAtkUnameFieldNumber = 4;
  /*FOR2LUA
  <Record>
  	<name>TPubgBattleRecord</name>
  	<Function>
  		<name>atkuname</name>
  		<replaceName>AtkUname</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_atkuname</name>
  		<replaceName>AtkUname</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_atkuname</name>
  		<replaceName>AtkUname</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::std::string& atkuname() const;
  inline void set_atkuname(const ::std::string& value);
  inline void set_atkuname(const char* value);
  inline void set_atkuname(const char* value, size_t size);
  inline ::std::string* mutable_atkuname();
  inline ::std::string* release_atkuname();
  inline void set_allocated_atkuname(::std::string* atkuname);

  // optional uint32 AtkHtid = 5;
  inline bool has_atkhtid() const;
  inline void clear_atkhtid();
  static const int kAtkHtidFieldNumber = 5;
  /*FOR2LUA
  <Record>
  	<name>TPubgBattleRecord</name>
  	<Function>
  		<name>atkhtid</name>
  		<replaceName>AtkHtid</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_atkhtid</name>
  		<replaceName>AtkHtid</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_atkhtid</name>
  		<replaceName>AtkHtid</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 atkhtid() const;
  inline void set_atkhtid(::google::protobuf::uint32 value);

  // optional .pb.TPubgLocation DefLocation = 6;
  inline bool has_deflocation() const;
  inline void clear_deflocation();
  static const int kDefLocationFieldNumber = 6;
  /*FOR2LUA
  <Record>
  	<name>TPubgBattleRecord</name>
  	<Function>
  		<name>deflocation</name>
  		<replaceName>DefLocation</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_deflocation</name>
  		<replaceName>DefLocation</replaceName>
  		<handler>descripter = pb_set_message_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_allocated_deflocation</name>
  		<replaceName>DefLocation</replaceName>
  		<handler>descripter = pb_set_message_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_deflocation</name>
  		<replaceName>DefLocation</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TPubgLocation& deflocation() const;
  inline ::pb::TPubgLocation* mutable_deflocation();
  inline ::pb::TPubgLocation* release_deflocation();
  inline void set_allocated_deflocation(::pb::TPubgLocation* deflocation);

  // optional uint64 DefOwnerId = 7;
  inline bool has_defownerid() const;
  inline void clear_defownerid();
  static const int kDefOwnerIdFieldNumber = 7;
  /*FOR2LUA
  <Record>
  	<name>TPubgBattleRecord</name>
  	<Function>
  		<name>defownerid</name>
  		<replaceName>DefOwnerId</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_defownerid</name>
  		<replaceName>DefOwnerId</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_defownerid</name>
  		<replaceName>DefOwnerId</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint64 defownerid() const;
  inline void set_defownerid(::google::protobuf::uint64 value);

  // optional string DefServerId = 8;
  inline bool has_defserverid() const;
  inline void clear_defserverid();
  static const int kDefServerIdFieldNumber = 8;
  /*FOR2LUA
  <Record>
  	<name>TPubgBattleRecord</name>
  	<Function>
  		<name>defserverid</name>
  		<replaceName>DefServerId</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_defserverid</name>
  		<replaceName>DefServerId</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_defserverid</name>
  		<replaceName>DefServerId</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::std::string& defserverid() const;
  inline void set_defserverid(const ::std::string& value);
  inline void set_defserverid(const char* value);
  inline void set_defserverid(const char* value, size_t size);
  inline ::std::string* mutable_defserverid();
  inline ::std::string* release_defserverid();
  inline void set_allocated_defserverid(::std::string* defserverid);

  // optional string DefUname = 9;
  inline bool has_defuname() const;
  inline void clear_defuname();
  static const int kDefUnameFieldNumber = 9;
  /*FOR2LUA
  <Record>
  	<name>TPubgBattleRecord</name>
  	<Function>
  		<name>defuname</name>
  		<replaceName>DefUname</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_defuname</name>
  		<replaceName>DefUname</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_defuname</name>
  		<replaceName>DefUname</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::std::string& defuname() const;
  inline void set_defuname(const ::std::string& value);
  inline void set_defuname(const char* value);
  inline void set_defuname(const char* value, size_t size);
  inline ::std::string* mutable_defuname();
  inline ::std::string* release_defuname();
  inline void set_allocated_defuname(::std::string* defuname);

  // optional uint32 DefHtid = 10;
  inline bool has_defhtid() const;
  inline void clear_defhtid();
  static const int kDefHtidFieldNumber = 10;
  /*FOR2LUA
  <Record>
  	<name>TPubgBattleRecord</name>
  	<Function>
  		<name>defhtid</name>
  		<replaceName>DefHtid</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_defhtid</name>
  		<replaceName>DefHtid</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_defhtid</name>
  		<replaceName>DefHtid</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 defhtid() const;
  inline void set_defhtid(::google::protobuf::uint32 value);

  // optional uint64 RecordTime = 11;
  inline bool has_recordtime() const;
  inline void clear_recordtime();
  static const int kRecordTimeFieldNumber = 11;
  /*FOR2LUA
  <Record>
  	<name>TPubgBattleRecord</name>
  	<Function>
  		<name>recordtime</name>
  		<replaceName>RecordTime</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_recordtime</name>
  		<replaceName>RecordTime</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_recordtime</name>
  		<replaceName>RecordTime</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint64 recordtime() const;
  inline void set_recordtime(::google::protobuf::uint64 value);

  // repeated .pb.TPubgBattleSimple ArrBattleSimple = 12;
  inline int arrbattlesimple_size() const;
  inline void clear_arrbattlesimple();
  static const int kArrBattleSimpleFieldNumber = 12;
  /*FOR2LUA
  <Record>
  	<name>TPubgBattleRecord</name>
  	<Function>
  		<name>arrbattlesimple</name>
  		<replaceName>ArrBattleSimple</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_arrbattlesimple</name>
  		<replaceName>ArrBattleSimple</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_arrbattlesimple</name>
  		<replaceName>ArrBattleSimple</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_arrbattlesimple</name>
  		<replaceName>ArrBattleSimple</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>arrbattlesimple_size</name>
  		<replaceName>ArrBattleSimple</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TPubgBattleSimple& arrbattlesimple(int index) const;
  inline ::pb::TPubgBattleSimple* mutable_arrbattlesimple(int index);
  inline ::pb::TPubgBattleSimple* add_arrbattlesimple();
  inline const ::google::protobuf::RepeatedPtrField< ::pb::TPubgBattleSimple >&
      arrbattlesimple() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb::TPubgBattleSimple >*
      mutable_arrbattlesimple();

  // @@protoc_insertion_point(class_scope:pb.TPubgBattleRecord)
 private:
  inline void set_has_atklocation();
  inline void clear_has_atklocation();
  inline void set_has_atkownerid();
  inline void clear_has_atkownerid();
  inline void set_has_atkserverid();
  inline void clear_has_atkserverid();
  inline void set_has_atkuname();
  inline void clear_has_atkuname();
  inline void set_has_atkhtid();
  inline void clear_has_atkhtid();
  inline void set_has_deflocation();
  inline void clear_has_deflocation();
  inline void set_has_defownerid();
  inline void clear_has_defownerid();
  inline void set_has_defserverid();
  inline void clear_has_defserverid();
  inline void set_has_defuname();
  inline void clear_has_defuname();
  inline void set_has_defhtid();
  inline void clear_has_defhtid();
  inline void set_has_recordtime();
  inline void clear_has_recordtime();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::pb::TPubgLocation* atklocation_;
  ::google::protobuf::uint64 atkownerid_;
  ::std::string* atkserverid_;
  ::std::string* atkuname_;
  ::pb::TPubgLocation* deflocation_;
  ::google::protobuf::uint64 defownerid_;
  ::google::protobuf::uint32 atkhtid_;
  ::google::protobuf::uint32 defhtid_;
  ::std::string* defserverid_;
  ::std::string* defuname_;
  ::google::protobuf::uint64 recordtime_;
  ::google::protobuf::RepeatedPtrField< ::pb::TPubgBattleSimple > arrbattlesimple_;
  friend void  protobuf_AddDesc_net_2fPubg_2eproto();
  friend void protobuf_AssignDesc_net_2fPubg_2eproto();
  friend void protobuf_ShutdownFile_net_2fPubg_2eproto();

  void InitAsDefaultInstance();
  static TPubgBattleRecord* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TPubgLocation</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/Pubg.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TPubgLocation : public ::google::protobuf::Message {
 public:
  TPubgLocation();
  virtual ~TPubgLocation();

  TPubgLocation(const TPubgLocation& from);

  inline TPubgLocation& operator=(const TPubgLocation& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TPubgLocation& default_instance();

  void Swap(TPubgLocation* other);

  // implements Message ----------------------------------------------

  TPubgLocation* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TPubgLocation& from);
  void MergeFrom(const TPubgLocation& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 AreaId = 1;
  inline bool has_areaid() const;
  inline void clear_areaid();
  static const int kAreaIdFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TPubgLocation</name>
  	<Function>
  		<name>areaid</name>
  		<replaceName>AreaId</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_areaid</name>
  		<replaceName>AreaId</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_areaid</name>
  		<replaceName>AreaId</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 areaid() const;
  inline void set_areaid(::google::protobuf::uint32 value);

  // optional uint32 CityId = 2;
  inline bool has_cityid() const;
  inline void clear_cityid();
  static const int kCityIdFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TPubgLocation</name>
  	<Function>
  		<name>cityid</name>
  		<replaceName>CityId</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_cityid</name>
  		<replaceName>CityId</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_cityid</name>
  		<replaceName>CityId</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 cityid() const;
  inline void set_cityid(::google::protobuf::uint32 value);

  // optional uint32 CampId = 3;
  inline bool has_campid() const;
  inline void clear_campid();
  static const int kCampIdFieldNumber = 3;
  /*FOR2LUA
  <Record>
  	<name>TPubgLocation</name>
  	<Function>
  		<name>campid</name>
  		<replaceName>CampId</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_campid</name>
  		<replaceName>CampId</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_campid</name>
  		<replaceName>CampId</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 campid() const;
  inline void set_campid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:pb.TPubgLocation)
 private:
  inline void set_has_areaid();
  inline void clear_has_areaid();
  inline void set_has_cityid();
  inline void clear_has_cityid();
  inline void set_has_campid();
  inline void clear_has_campid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 areaid_;
  ::google::protobuf::uint32 cityid_;
  ::google::protobuf::uint32 campid_;
  friend void  protobuf_AddDesc_net_2fPubg_2eproto();
  friend void protobuf_AssignDesc_net_2fPubg_2eproto();
  friend void protobuf_ShutdownFile_net_2fPubg_2eproto();

  void InitAsDefaultInstance();
  static TPubgLocation* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TPubgGetInfoRsp</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/Pubg.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TPubgGetInfoRsp : public ::google::protobuf::Message {
 public:
  TPubgGetInfoRsp();
  virtual ~TPubgGetInfoRsp();

  TPubgGetInfoRsp(const TPubgGetInfoRsp& from);

  inline TPubgGetInfoRsp& operator=(const TPubgGetInfoRsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TPubgGetInfoRsp& default_instance();

  void Swap(TPubgGetInfoRsp* other);

  // implements Message ----------------------------------------------

  TPubgGetInfoRsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TPubgGetInfoRsp& from);
  void MergeFrom(const TPubgGetInfoRsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .pb.TPubgProcessInfo ArrProcessInfo = 1;
  inline int arrprocessinfo_size() const;
  inline void clear_arrprocessinfo();
  static const int kArrProcessInfoFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TPubgGetInfoRsp</name>
  	<Function>
  		<name>arrprocessinfo</name>
  		<replaceName>ArrProcessInfo</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_arrprocessinfo</name>
  		<replaceName>ArrProcessInfo</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_arrprocessinfo</name>
  		<replaceName>ArrProcessInfo</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_arrprocessinfo</name>
  		<replaceName>ArrProcessInfo</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>arrprocessinfo_size</name>
  		<replaceName>ArrProcessInfo</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TPubgProcessInfo& arrprocessinfo(int index) const;
  inline ::pb::TPubgProcessInfo* mutable_arrprocessinfo(int index);
  inline ::pb::TPubgProcessInfo* add_arrprocessinfo();
  inline const ::google::protobuf::RepeatedPtrField< ::pb::TPubgProcessInfo >&
      arrprocessinfo() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb::TPubgProcessInfo >*
      mutable_arrprocessinfo();

  // optional bool ServerOpen = 2;
  inline bool has_serveropen() const;
  inline void clear_serveropen();
  static const int kServerOpenFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TPubgGetInfoRsp</name>
  	<Function>
  		<name>serveropen</name>
  		<replaceName>ServerOpen</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_serveropen</name>
  		<replaceName>ServerOpen</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_serveropen</name>
  		<replaceName>ServerOpen</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline bool serveropen() const;
  inline void set_serveropen(bool value);

  // optional uint32 CurRound = 3;
  inline bool has_curround() const;
  inline void clear_curround();
  static const int kCurRoundFieldNumber = 3;
  /*FOR2LUA
  <Record>
  	<name>TPubgGetInfoRsp</name>
  	<Function>
  		<name>curround</name>
  		<replaceName>CurRound</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_curround</name>
  		<replaceName>CurRound</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_curround</name>
  		<replaceName>CurRound</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 curround() const;
  inline void set_curround(::google::protobuf::uint32 value);

  // optional .pb.EPubgStage CurStage = 4;
  inline bool has_curstage() const;
  inline void clear_curstage();
  static const int kCurStageFieldNumber = 4;
  /*FOR2LUA
  <Record>
  	<name>TPubgGetInfoRsp</name>
  	<Function>
  		<name>curstage</name>
  		<replaceName>CurStage</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_curstage</name>
  		<replaceName>CurStage</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_curstage</name>
  		<replaceName>CurStage</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::pb::EPubgStage curstage() const;
  inline void set_curstage(::pb::EPubgStage value);

  // optional .pb.TPubgUserInfo UserInfo = 5;
  inline bool has_userinfo() const;
  inline void clear_userinfo();
  static const int kUserInfoFieldNumber = 5;
  /*FOR2LUA
  <Record>
  	<name>TPubgGetInfoRsp</name>
  	<Function>
  		<name>userinfo</name>
  		<replaceName>UserInfo</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_userinfo</name>
  		<replaceName>UserInfo</replaceName>
  		<handler>descripter = pb_set_message_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_allocated_userinfo</name>
  		<replaceName>UserInfo</replaceName>
  		<handler>descripter = pb_set_message_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_userinfo</name>
  		<replaceName>UserInfo</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TPubgUserInfo& userinfo() const;
  inline ::pb::TPubgUserInfo* mutable_userinfo();
  inline ::pb::TPubgUserInfo* release_userinfo();
  inline void set_allocated_userinfo(::pb::TPubgUserInfo* userinfo);

  // optional .pb.TPubgFieldInfo FieldInfo = 6;
  inline bool has_fieldinfo() const;
  inline void clear_fieldinfo();
  static const int kFieldInfoFieldNumber = 6;
  /*FOR2LUA
  <Record>
  	<name>TPubgGetInfoRsp</name>
  	<Function>
  		<name>fieldinfo</name>
  		<replaceName>FieldInfo</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_fieldinfo</name>
  		<replaceName>FieldInfo</replaceName>
  		<handler>descripter = pb_set_message_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_allocated_fieldinfo</name>
  		<replaceName>FieldInfo</replaceName>
  		<handler>descripter = pb_set_message_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_fieldinfo</name>
  		<replaceName>FieldInfo</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TPubgFieldInfo& fieldinfo() const;
  inline ::pb::TPubgFieldInfo* mutable_fieldinfo();
  inline ::pb::TPubgFieldInfo* release_fieldinfo();
  inline void set_allocated_fieldinfo(::pb::TPubgFieldInfo* fieldinfo);

  // optional .pb.TPubgChickenEaterInfo ChickenEaterInfo = 7;
  inline bool has_chickeneaterinfo() const;
  inline void clear_chickeneaterinfo();
  static const int kChickenEaterInfoFieldNumber = 7;
  /*FOR2LUA
  <Record>
  	<name>TPubgGetInfoRsp</name>
  	<Function>
  		<name>chickeneaterinfo</name>
  		<replaceName>ChickenEaterInfo</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_chickeneaterinfo</name>
  		<replaceName>ChickenEaterInfo</replaceName>
  		<handler>descripter = pb_set_message_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_allocated_chickeneaterinfo</name>
  		<replaceName>ChickenEaterInfo</replaceName>
  		<handler>descripter = pb_set_message_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_chickeneaterinfo</name>
  		<replaceName>ChickenEaterInfo</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TPubgChickenEaterInfo& chickeneaterinfo() const;
  inline ::pb::TPubgChickenEaterInfo* mutable_chickeneaterinfo();
  inline ::pb::TPubgChickenEaterInfo* release_chickeneaterinfo();
  inline void set_allocated_chickeneaterinfo(::pb::TPubgChickenEaterInfo* chickeneaterinfo);

  // optional string SceneId = 8;
  inline bool has_sceneid() const;
  inline void clear_sceneid();
  static const int kSceneIdFieldNumber = 8;
  /*FOR2LUA
  <Record>
  	<name>TPubgGetInfoRsp</name>
  	<Function>
  		<name>sceneid</name>
  		<replaceName>SceneId</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_sceneid</name>
  		<replaceName>SceneId</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_sceneid</name>
  		<replaceName>SceneId</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::std::string& sceneid() const;
  inline void set_sceneid(const ::std::string& value);
  inline void set_sceneid(const char* value);
  inline void set_sceneid(const char* value, size_t size);
  inline ::std::string* mutable_sceneid();
  inline ::std::string* release_sceneid();
  inline void set_allocated_sceneid(::std::string* sceneid);

  // optional uint64 WinnerOffseasonBegTime = 9;
  inline bool has_winneroffseasonbegtime() const;
  inline void clear_winneroffseasonbegtime();
  static const int kWinnerOffseasonBegTimeFieldNumber = 9;
  /*FOR2LUA
  <Record>
  	<name>TPubgGetInfoRsp</name>
  	<Function>
  		<name>winneroffseasonbegtime</name>
  		<replaceName>WinnerOffseasonBegTime</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_winneroffseasonbegtime</name>
  		<replaceName>WinnerOffseasonBegTime</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_winneroffseasonbegtime</name>
  		<replaceName>WinnerOffseasonBegTime</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint64 winneroffseasonbegtime() const;
  inline void set_winneroffseasonbegtime(::google::protobuf::uint64 value);

  // optional .pb.TPubgFieldInfo WinnerFieldInfo = 10;
  inline bool has_winnerfieldinfo() const;
  inline void clear_winnerfieldinfo();
  static const int kWinnerFieldInfoFieldNumber = 10;
  /*FOR2LUA
  <Record>
  	<name>TPubgGetInfoRsp</name>
  	<Function>
  		<name>winnerfieldinfo</name>
  		<replaceName>WinnerFieldInfo</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_winnerfieldinfo</name>
  		<replaceName>WinnerFieldInfo</replaceName>
  		<handler>descripter = pb_set_message_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_allocated_winnerfieldinfo</name>
  		<replaceName>WinnerFieldInfo</replaceName>
  		<handler>descripter = pb_set_message_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_winnerfieldinfo</name>
  		<replaceName>WinnerFieldInfo</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TPubgFieldInfo& winnerfieldinfo() const;
  inline ::pb::TPubgFieldInfo* mutable_winnerfieldinfo();
  inline ::pb::TPubgFieldInfo* release_winnerfieldinfo();
  inline void set_allocated_winnerfieldinfo(::pb::TPubgFieldInfo* winnerfieldinfo);

  // repeated .pb.TPubgProcessInfo WinnerArrProcessInfo = 11;
  inline int winnerarrprocessinfo_size() const;
  inline void clear_winnerarrprocessinfo();
  static const int kWinnerArrProcessInfoFieldNumber = 11;
  /*FOR2LUA
  <Record>
  	<name>TPubgGetInfoRsp</name>
  	<Function>
  		<name>winnerarrprocessinfo</name>
  		<replaceName>WinnerArrProcessInfo</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_winnerarrprocessinfo</name>
  		<replaceName>WinnerArrProcessInfo</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_winnerarrprocessinfo</name>
  		<replaceName>WinnerArrProcessInfo</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_winnerarrprocessinfo</name>
  		<replaceName>WinnerArrProcessInfo</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>winnerarrprocessinfo_size</name>
  		<replaceName>WinnerArrProcessInfo</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TPubgProcessInfo& winnerarrprocessinfo(int index) const;
  inline ::pb::TPubgProcessInfo* mutable_winnerarrprocessinfo(int index);
  inline ::pb::TPubgProcessInfo* add_winnerarrprocessinfo();
  inline const ::google::protobuf::RepeatedPtrField< ::pb::TPubgProcessInfo >&
      winnerarrprocessinfo() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb::TPubgProcessInfo >*
      mutable_winnerarrprocessinfo();

  // @@protoc_insertion_point(class_scope:pb.TPubgGetInfoRsp)
 private:
  inline void set_has_serveropen();
  inline void clear_has_serveropen();
  inline void set_has_curround();
  inline void clear_has_curround();
  inline void set_has_curstage();
  inline void clear_has_curstage();
  inline void set_has_userinfo();
  inline void clear_has_userinfo();
  inline void set_has_fieldinfo();
  inline void clear_has_fieldinfo();
  inline void set_has_chickeneaterinfo();
  inline void clear_has_chickeneaterinfo();
  inline void set_has_sceneid();
  inline void clear_has_sceneid();
  inline void set_has_winneroffseasonbegtime();
  inline void clear_has_winneroffseasonbegtime();
  inline void set_has_winnerfieldinfo();
  inline void clear_has_winnerfieldinfo();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::pb::TPubgProcessInfo > arrprocessinfo_;
  bool serveropen_;
  ::google::protobuf::uint32 curround_;
  ::pb::TPubgUserInfo* userinfo_;
  ::pb::TPubgFieldInfo* fieldinfo_;
  ::pb::TPubgChickenEaterInfo* chickeneaterinfo_;
  ::std::string* sceneid_;
  ::google::protobuf::uint64 winneroffseasonbegtime_;
  ::pb::TPubgFieldInfo* winnerfieldinfo_;
  ::google::protobuf::RepeatedPtrField< ::pb::TPubgProcessInfo > winnerarrprocessinfo_;
  int curstage_;
  friend void  protobuf_AddDesc_net_2fPubg_2eproto();
  friend void protobuf_AssignDesc_net_2fPubg_2eproto();
  friend void protobuf_ShutdownFile_net_2fPubg_2eproto();

  void InitAsDefaultInstance();
  static TPubgGetInfoRsp* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TPubgEnterReq</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/Pubg.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TPubgEnterReq : public ::google::protobuf::Message {
 public:
  TPubgEnterReq();
  virtual ~TPubgEnterReq();

  TPubgEnterReq(const TPubgEnterReq& from);

  inline TPubgEnterReq& operator=(const TPubgEnterReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TPubgEnterReq& default_instance();

  void Swap(TPubgEnterReq* other);

  // implements Message ----------------------------------------------

  TPubgEnterReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TPubgEnterReq& from);
  void MergeFrom(const TPubgEnterReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string FieldId = 1;
  inline bool has_fieldid() const;
  inline void clear_fieldid();
  static const int kFieldIdFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TPubgEnterReq</name>
  	<Function>
  		<name>fieldid</name>
  		<replaceName>FieldId</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_fieldid</name>
  		<replaceName>FieldId</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_fieldid</name>
  		<replaceName>FieldId</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::std::string& fieldid() const;
  inline void set_fieldid(const ::std::string& value);
  inline void set_fieldid(const char* value);
  inline void set_fieldid(const char* value, size_t size);
  inline ::std::string* mutable_fieldid();
  inline ::std::string* release_fieldid();
  inline void set_allocated_fieldid(::std::string* fieldid);

  // @@protoc_insertion_point(class_scope:pb.TPubgEnterReq)
 private:
  inline void set_has_fieldid();
  inline void clear_has_fieldid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* fieldid_;
  friend void  protobuf_AddDesc_net_2fPubg_2eproto();
  friend void protobuf_AssignDesc_net_2fPubg_2eproto();
  friend void protobuf_ShutdownFile_net_2fPubg_2eproto();

  void InitAsDefaultInstance();
  static TPubgEnterReq* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TPubgGetCampListReq</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/Pubg.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TPubgGetCampListReq : public ::google::protobuf::Message {
 public:
  TPubgGetCampListReq();
  virtual ~TPubgGetCampListReq();

  TPubgGetCampListReq(const TPubgGetCampListReq& from);

  inline TPubgGetCampListReq& operator=(const TPubgGetCampListReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TPubgGetCampListReq& default_instance();

  void Swap(TPubgGetCampListReq* other);

  // implements Message ----------------------------------------------

  TPubgGetCampListReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TPubgGetCampListReq& from);
  void MergeFrom(const TPubgGetCampListReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 AreaId = 1;
  inline bool has_areaid() const;
  inline void clear_areaid();
  static const int kAreaIdFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TPubgGetCampListReq</name>
  	<Function>
  		<name>areaid</name>
  		<replaceName>AreaId</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_areaid</name>
  		<replaceName>AreaId</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_areaid</name>
  		<replaceName>AreaId</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 areaid() const;
  inline void set_areaid(::google::protobuf::uint32 value);

  // optional uint32 CityId = 2;
  inline bool has_cityid() const;
  inline void clear_cityid();
  static const int kCityIdFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TPubgGetCampListReq</name>
  	<Function>
  		<name>cityid</name>
  		<replaceName>CityId</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_cityid</name>
  		<replaceName>CityId</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_cityid</name>
  		<replaceName>CityId</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 cityid() const;
  inline void set_cityid(::google::protobuf::uint32 value);

  // optional string FieldId = 3;
  inline bool has_fieldid() const;
  inline void clear_fieldid();
  static const int kFieldIdFieldNumber = 3;
  /*FOR2LUA
  <Record>
  	<name>TPubgGetCampListReq</name>
  	<Function>
  		<name>fieldid</name>
  		<replaceName>FieldId</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_fieldid</name>
  		<replaceName>FieldId</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_fieldid</name>
  		<replaceName>FieldId</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::std::string& fieldid() const;
  inline void set_fieldid(const ::std::string& value);
  inline void set_fieldid(const char* value);
  inline void set_fieldid(const char* value, size_t size);
  inline ::std::string* mutable_fieldid();
  inline ::std::string* release_fieldid();
  inline void set_allocated_fieldid(::std::string* fieldid);

  // @@protoc_insertion_point(class_scope:pb.TPubgGetCampListReq)
 private:
  inline void set_has_areaid();
  inline void clear_has_areaid();
  inline void set_has_cityid();
  inline void clear_has_cityid();
  inline void set_has_fieldid();
  inline void clear_has_fieldid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 areaid_;
  ::google::protobuf::uint32 cityid_;
  ::std::string* fieldid_;
  friend void  protobuf_AddDesc_net_2fPubg_2eproto();
  friend void protobuf_AssignDesc_net_2fPubg_2eproto();
  friend void protobuf_ShutdownFile_net_2fPubg_2eproto();

  void InitAsDefaultInstance();
  static TPubgGetCampListReq* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TPubgGetCampListRsp</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/Pubg.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TPubgGetCampListRsp : public ::google::protobuf::Message {
 public:
  TPubgGetCampListRsp();
  virtual ~TPubgGetCampListRsp();

  TPubgGetCampListRsp(const TPubgGetCampListRsp& from);

  inline TPubgGetCampListRsp& operator=(const TPubgGetCampListRsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TPubgGetCampListRsp& default_instance();

  void Swap(TPubgGetCampListRsp* other);

  // implements Message ----------------------------------------------

  TPubgGetCampListRsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TPubgGetCampListRsp& from);
  void MergeFrom(const TPubgGetCampListRsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .pb.TPubgCampInfo ArrCamp = 1;
  inline int arrcamp_size() const;
  inline void clear_arrcamp();
  static const int kArrCampFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TPubgGetCampListRsp</name>
  	<Function>
  		<name>arrcamp</name>
  		<replaceName>ArrCamp</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_arrcamp</name>
  		<replaceName>ArrCamp</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_arrcamp</name>
  		<replaceName>ArrCamp</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_arrcamp</name>
  		<replaceName>ArrCamp</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>arrcamp_size</name>
  		<replaceName>ArrCamp</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TPubgCampInfo& arrcamp(int index) const;
  inline ::pb::TPubgCampInfo* mutable_arrcamp(int index);
  inline ::pb::TPubgCampInfo* add_arrcamp();
  inline const ::google::protobuf::RepeatedPtrField< ::pb::TPubgCampInfo >&
      arrcamp() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb::TPubgCampInfo >*
      mutable_arrcamp();

  // @@protoc_insertion_point(class_scope:pb.TPubgGetCampListRsp)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::pb::TPubgCampInfo > arrcamp_;
  friend void  protobuf_AddDesc_net_2fPubg_2eproto();
  friend void protobuf_AssignDesc_net_2fPubg_2eproto();
  friend void protobuf_ShutdownFile_net_2fPubg_2eproto();

  void InitAsDefaultInstance();
  static TPubgGetCampListRsp* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TPubgSignRsp</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/Pubg.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TPubgSignRsp : public ::google::protobuf::Message {
 public:
  TPubgSignRsp();
  virtual ~TPubgSignRsp();

  TPubgSignRsp(const TPubgSignRsp& from);

  inline TPubgSignRsp& operator=(const TPubgSignRsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TPubgSignRsp& default_instance();

  void Swap(TPubgSignRsp* other);

  // implements Message ----------------------------------------------

  TPubgSignRsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TPubgSignRsp& from);
  void MergeFrom(const TPubgSignRsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint64 SignTime = 1;
  inline bool has_signtime() const;
  inline void clear_signtime();
  static const int kSignTimeFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TPubgSignRsp</name>
  	<Function>
  		<name>signtime</name>
  		<replaceName>SignTime</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_signtime</name>
  		<replaceName>SignTime</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_signtime</name>
  		<replaceName>SignTime</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint64 signtime() const;
  inline void set_signtime(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:pb.TPubgSignRsp)
 private:
  inline void set_has_signtime();
  inline void clear_has_signtime();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint64 signtime_;
  friend void  protobuf_AddDesc_net_2fPubg_2eproto();
  friend void protobuf_AssignDesc_net_2fPubg_2eproto();
  friend void protobuf_ShutdownFile_net_2fPubg_2eproto();

  void InitAsDefaultInstance();
  static TPubgSignRsp* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TPubgGetMyFmtRsp</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/Pubg.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TPubgGetMyFmtRsp : public ::google::protobuf::Message {
 public:
  TPubgGetMyFmtRsp();
  virtual ~TPubgGetMyFmtRsp();

  TPubgGetMyFmtRsp(const TPubgGetMyFmtRsp& from);

  inline TPubgGetMyFmtRsp& operator=(const TPubgGetMyFmtRsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TPubgGetMyFmtRsp& default_instance();

  void Swap(TPubgGetMyFmtRsp* other);

  // implements Message ----------------------------------------------

  TPubgGetMyFmtRsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TPubgGetMyFmtRsp& from);
  void MergeFrom(const TPubgGetMyFmtRsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .pb.TPubgFmtInfo ArrFmt = 1;
  inline int arrfmt_size() const;
  inline void clear_arrfmt();
  static const int kArrFmtFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TPubgGetMyFmtRsp</name>
  	<Function>
  		<name>arrfmt</name>
  		<replaceName>ArrFmt</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_arrfmt</name>
  		<replaceName>ArrFmt</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_arrfmt</name>
  		<replaceName>ArrFmt</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_arrfmt</name>
  		<replaceName>ArrFmt</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>arrfmt_size</name>
  		<replaceName>ArrFmt</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TPubgFmtInfo& arrfmt(int index) const;
  inline ::pb::TPubgFmtInfo* mutable_arrfmt(int index);
  inline ::pb::TPubgFmtInfo* add_arrfmt();
  inline const ::google::protobuf::RepeatedPtrField< ::pb::TPubgFmtInfo >&
      arrfmt() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb::TPubgFmtInfo >*
      mutable_arrfmt();

  // @@protoc_insertion_point(class_scope:pb.TPubgGetMyFmtRsp)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::pb::TPubgFmtInfo > arrfmt_;
  friend void  protobuf_AddDesc_net_2fPubg_2eproto();
  friend void protobuf_AssignDesc_net_2fPubg_2eproto();
  friend void protobuf_ShutdownFile_net_2fPubg_2eproto();

  void InitAsDefaultInstance();
  static TPubgGetMyFmtRsp* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TPubgSetMyFmtReq</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/Pubg.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TPubgSetMyFmtReq : public ::google::protobuf::Message {
 public:
  TPubgSetMyFmtReq();
  virtual ~TPubgSetMyFmtReq();

  TPubgSetMyFmtReq(const TPubgSetMyFmtReq& from);

  inline TPubgSetMyFmtReq& operator=(const TPubgSetMyFmtReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TPubgSetMyFmtReq& default_instance();

  void Swap(TPubgSetMyFmtReq* other);

  // implements Message ----------------------------------------------

  TPubgSetMyFmtReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TPubgSetMyFmtReq& from);
  void MergeFrom(const TPubgSetMyFmtReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .pb.TPubgFmtInfo ArrFmt = 1;
  inline int arrfmt_size() const;
  inline void clear_arrfmt();
  static const int kArrFmtFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TPubgSetMyFmtReq</name>
  	<Function>
  		<name>arrfmt</name>
  		<replaceName>ArrFmt</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_arrfmt</name>
  		<replaceName>ArrFmt</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_arrfmt</name>
  		<replaceName>ArrFmt</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_arrfmt</name>
  		<replaceName>ArrFmt</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>arrfmt_size</name>
  		<replaceName>ArrFmt</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TPubgFmtInfo& arrfmt(int index) const;
  inline ::pb::TPubgFmtInfo* mutable_arrfmt(int index);
  inline ::pb::TPubgFmtInfo* add_arrfmt();
  inline const ::google::protobuf::RepeatedPtrField< ::pb::TPubgFmtInfo >&
      arrfmt() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb::TPubgFmtInfo >*
      mutable_arrfmt();

  // @@protoc_insertion_point(class_scope:pb.TPubgSetMyFmtReq)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::pb::TPubgFmtInfo > arrfmt_;
  friend void  protobuf_AddDesc_net_2fPubg_2eproto();
  friend void protobuf_AssignDesc_net_2fPubg_2eproto();
  friend void protobuf_ShutdownFile_net_2fPubg_2eproto();

  void InitAsDefaultInstance();
  static TPubgSetMyFmtReq* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TPubgAttackReq</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/Pubg.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TPubgAttackReq : public ::google::protobuf::Message {
 public:
  TPubgAttackReq();
  virtual ~TPubgAttackReq();

  TPubgAttackReq(const TPubgAttackReq& from);

  inline TPubgAttackReq& operator=(const TPubgAttackReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TPubgAttackReq& default_instance();

  void Swap(TPubgAttackReq* other);

  // implements Message ----------------------------------------------

  TPubgAttackReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TPubgAttackReq& from);
  void MergeFrom(const TPubgAttackReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .pb.TPubgLocation MyLocation = 1;
  inline bool has_mylocation() const;
  inline void clear_mylocation();
  static const int kMyLocationFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TPubgAttackReq</name>
  	<Function>
  		<name>mylocation</name>
  		<replaceName>MyLocation</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_mylocation</name>
  		<replaceName>MyLocation</replaceName>
  		<handler>descripter = pb_set_message_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_allocated_mylocation</name>
  		<replaceName>MyLocation</replaceName>
  		<handler>descripter = pb_set_message_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_mylocation</name>
  		<replaceName>MyLocation</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TPubgLocation& mylocation() const;
  inline ::pb::TPubgLocation* mutable_mylocation();
  inline ::pb::TPubgLocation* release_mylocation();
  inline void set_allocated_mylocation(::pb::TPubgLocation* mylocation);

  // optional .pb.TPubgLocation EnemyLocation = 2;
  inline bool has_enemylocation() const;
  inline void clear_enemylocation();
  static const int kEnemyLocationFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TPubgAttackReq</name>
  	<Function>
  		<name>enemylocation</name>
  		<replaceName>EnemyLocation</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_enemylocation</name>
  		<replaceName>EnemyLocation</replaceName>
  		<handler>descripter = pb_set_message_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_allocated_enemylocation</name>
  		<replaceName>EnemyLocation</replaceName>
  		<handler>descripter = pb_set_message_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_enemylocation</name>
  		<replaceName>EnemyLocation</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TPubgLocation& enemylocation() const;
  inline ::pb::TPubgLocation* mutable_enemylocation();
  inline ::pb::TPubgLocation* release_enemylocation();
  inline void set_allocated_enemylocation(::pb::TPubgLocation* enemylocation);

  // optional uint64 EnemyId = 3;
  inline bool has_enemyid() const;
  inline void clear_enemyid();
  static const int kEnemyIdFieldNumber = 3;
  /*FOR2LUA
  <Record>
  	<name>TPubgAttackReq</name>
  	<Function>
  		<name>enemyid</name>
  		<replaceName>EnemyId</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_enemyid</name>
  		<replaceName>EnemyId</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_enemyid</name>
  		<replaceName>EnemyId</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint64 enemyid() const;
  inline void set_enemyid(::google::protobuf::uint64 value);

  // optional bool SkipBattle = 4;
  inline bool has_skipbattle() const;
  inline void clear_skipbattle();
  static const int kSkipBattleFieldNumber = 4;
  /*FOR2LUA
  <Record>
  	<name>TPubgAttackReq</name>
  	<Function>
  		<name>skipbattle</name>
  		<replaceName>SkipBattle</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_skipbattle</name>
  		<replaceName>SkipBattle</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_skipbattle</name>
  		<replaceName>SkipBattle</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline bool skipbattle() const;
  inline void set_skipbattle(bool value);

  // @@protoc_insertion_point(class_scope:pb.TPubgAttackReq)
 private:
  inline void set_has_mylocation();
  inline void clear_has_mylocation();
  inline void set_has_enemylocation();
  inline void clear_has_enemylocation();
  inline void set_has_enemyid();
  inline void clear_has_enemyid();
  inline void set_has_skipbattle();
  inline void clear_has_skipbattle();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::pb::TPubgLocation* mylocation_;
  ::pb::TPubgLocation* enemylocation_;
  ::google::protobuf::uint64 enemyid_;
  bool skipbattle_;
  friend void  protobuf_AddDesc_net_2fPubg_2eproto();
  friend void protobuf_AssignDesc_net_2fPubg_2eproto();
  friend void protobuf_ShutdownFile_net_2fPubg_2eproto();

  void InitAsDefaultInstance();
  static TPubgAttackReq* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TPubgAttackRsp</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/Pubg.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TPubgAttackRsp : public ::google::protobuf::Message {
 public:
  TPubgAttackRsp();
  virtual ~TPubgAttackRsp();

  TPubgAttackRsp(const TPubgAttackRsp& from);

  inline TPubgAttackRsp& operator=(const TPubgAttackRsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TPubgAttackRsp& default_instance();

  void Swap(TPubgAttackRsp* other);

  // implements Message ----------------------------------------------

  TPubgAttackRsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TPubgAttackRsp& from);
  void MergeFrom(const TPubgAttackRsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bool IsWin = 1;
  inline bool has_iswin() const;
  inline void clear_iswin();
  static const int kIsWinFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TPubgAttackRsp</name>
  	<Function>
  		<name>iswin</name>
  		<replaceName>IsWin</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_iswin</name>
  		<replaceName>IsWin</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_iswin</name>
  		<replaceName>IsWin</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline bool iswin() const;
  inline void set_iswin(bool value);

  // repeated .pb.TPubgBattleDetail ArrBattleDetail = 2;
  inline int arrbattledetail_size() const;
  inline void clear_arrbattledetail();
  static const int kArrBattleDetailFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TPubgAttackRsp</name>
  	<Function>
  		<name>arrbattledetail</name>
  		<replaceName>ArrBattleDetail</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_arrbattledetail</name>
  		<replaceName>ArrBattleDetail</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_arrbattledetail</name>
  		<replaceName>ArrBattleDetail</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_arrbattledetail</name>
  		<replaceName>ArrBattleDetail</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>arrbattledetail_size</name>
  		<replaceName>ArrBattleDetail</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TPubgBattleDetail& arrbattledetail(int index) const;
  inline ::pb::TPubgBattleDetail* mutable_arrbattledetail(int index);
  inline ::pb::TPubgBattleDetail* add_arrbattledetail();
  inline const ::google::protobuf::RepeatedPtrField< ::pb::TPubgBattleDetail >&
      arrbattledetail() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb::TPubgBattleDetail >*
      mutable_arrbattledetail();

  // repeated .pb.TCommonReward ArrReward = 3;
  inline int arrreward_size() const;
  inline void clear_arrreward();
  static const int kArrRewardFieldNumber = 3;
  /*FOR2LUA
  <Record>
  	<name>TPubgAttackRsp</name>
  	<Function>
  		<name>arrreward</name>
  		<replaceName>ArrReward</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_arrreward</name>
  		<replaceName>ArrReward</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_arrreward</name>
  		<replaceName>ArrReward</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_arrreward</name>
  		<replaceName>ArrReward</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>arrreward_size</name>
  		<replaceName>ArrReward</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TCommonReward& arrreward(int index) const;
  inline ::pb::TCommonReward* mutable_arrreward(int index);
  inline ::pb::TCommonReward* add_arrreward();
  inline const ::google::protobuf::RepeatedPtrField< ::pb::TCommonReward >&
      arrreward() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb::TCommonReward >*
      mutable_arrreward();

  // @@protoc_insertion_point(class_scope:pb.TPubgAttackRsp)
 private:
  inline void set_has_iswin();
  inline void clear_has_iswin();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::pb::TPubgBattleDetail > arrbattledetail_;
  ::google::protobuf::RepeatedPtrField< ::pb::TCommonReward > arrreward_;
  bool iswin_;
  friend void  protobuf_AddDesc_net_2fPubg_2eproto();
  friend void protobuf_AssignDesc_net_2fPubg_2eproto();
  friend void protobuf_ShutdownFile_net_2fPubg_2eproto();

  void InitAsDefaultInstance();
  static TPubgAttackRsp* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TPubgGetEnemyInfoReq</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/Pubg.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TPubgGetEnemyInfoReq : public ::google::protobuf::Message {
 public:
  TPubgGetEnemyInfoReq();
  virtual ~TPubgGetEnemyInfoReq();

  TPubgGetEnemyInfoReq(const TPubgGetEnemyInfoReq& from);

  inline TPubgGetEnemyInfoReq& operator=(const TPubgGetEnemyInfoReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TPubgGetEnemyInfoReq& default_instance();

  void Swap(TPubgGetEnemyInfoReq* other);

  // implements Message ----------------------------------------------

  TPubgGetEnemyInfoReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TPubgGetEnemyInfoReq& from);
  void MergeFrom(const TPubgGetEnemyInfoReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .pb.TPubgLocation EnemyLocation = 1;
  inline bool has_enemylocation() const;
  inline void clear_enemylocation();
  static const int kEnemyLocationFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TPubgGetEnemyInfoReq</name>
  	<Function>
  		<name>enemylocation</name>
  		<replaceName>EnemyLocation</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_enemylocation</name>
  		<replaceName>EnemyLocation</replaceName>
  		<handler>descripter = pb_set_message_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_allocated_enemylocation</name>
  		<replaceName>EnemyLocation</replaceName>
  		<handler>descripter = pb_set_message_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_enemylocation</name>
  		<replaceName>EnemyLocation</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TPubgLocation& enemylocation() const;
  inline ::pb::TPubgLocation* mutable_enemylocation();
  inline ::pb::TPubgLocation* release_enemylocation();
  inline void set_allocated_enemylocation(::pb::TPubgLocation* enemylocation);

  // optional uint64 EnemyId = 2;
  inline bool has_enemyid() const;
  inline void clear_enemyid();
  static const int kEnemyIdFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TPubgGetEnemyInfoReq</name>
  	<Function>
  		<name>enemyid</name>
  		<replaceName>EnemyId</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_enemyid</name>
  		<replaceName>EnemyId</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_enemyid</name>
  		<replaceName>EnemyId</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint64 enemyid() const;
  inline void set_enemyid(::google::protobuf::uint64 value);

  // optional string FieldId = 3;
  inline bool has_fieldid() const;
  inline void clear_fieldid();
  static const int kFieldIdFieldNumber = 3;
  /*FOR2LUA
  <Record>
  	<name>TPubgGetEnemyInfoReq</name>
  	<Function>
  		<name>fieldid</name>
  		<replaceName>FieldId</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_fieldid</name>
  		<replaceName>FieldId</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_fieldid</name>
  		<replaceName>FieldId</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::std::string& fieldid() const;
  inline void set_fieldid(const ::std::string& value);
  inline void set_fieldid(const char* value);
  inline void set_fieldid(const char* value, size_t size);
  inline ::std::string* mutable_fieldid();
  inline ::std::string* release_fieldid();
  inline void set_allocated_fieldid(::std::string* fieldid);

  // @@protoc_insertion_point(class_scope:pb.TPubgGetEnemyInfoReq)
 private:
  inline void set_has_enemylocation();
  inline void clear_has_enemylocation();
  inline void set_has_enemyid();
  inline void clear_has_enemyid();
  inline void set_has_fieldid();
  inline void clear_has_fieldid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::pb::TPubgLocation* enemylocation_;
  ::google::protobuf::uint64 enemyid_;
  ::std::string* fieldid_;
  friend void  protobuf_AddDesc_net_2fPubg_2eproto();
  friend void protobuf_AssignDesc_net_2fPubg_2eproto();
  friend void protobuf_ShutdownFile_net_2fPubg_2eproto();

  void InitAsDefaultInstance();
  static TPubgGetEnemyInfoReq* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TPubgGetEnemyInfoRsp</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/Pubg.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TPubgGetEnemyInfoRsp : public ::google::protobuf::Message {
 public:
  TPubgGetEnemyInfoRsp();
  virtual ~TPubgGetEnemyInfoRsp();

  TPubgGetEnemyInfoRsp(const TPubgGetEnemyInfoRsp& from);

  inline TPubgGetEnemyInfoRsp& operator=(const TPubgGetEnemyInfoRsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TPubgGetEnemyInfoRsp& default_instance();

  void Swap(TPubgGetEnemyInfoRsp* other);

  // implements Message ----------------------------------------------

  TPubgGetEnemyInfoRsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TPubgGetEnemyInfoRsp& from);
  void MergeFrom(const TPubgGetEnemyInfoRsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .pb.TPubgFmtDetail ArrFmt = 1;
  inline int arrfmt_size() const;
  inline void clear_arrfmt();
  static const int kArrFmtFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TPubgGetEnemyInfoRsp</name>
  	<Function>
  		<name>arrfmt</name>
  		<replaceName>ArrFmt</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_arrfmt</name>
  		<replaceName>ArrFmt</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_arrfmt</name>
  		<replaceName>ArrFmt</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_arrfmt</name>
  		<replaceName>ArrFmt</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>arrfmt_size</name>
  		<replaceName>ArrFmt</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TPubgFmtDetail& arrfmt(int index) const;
  inline ::pb::TPubgFmtDetail* mutable_arrfmt(int index);
  inline ::pb::TPubgFmtDetail* add_arrfmt();
  inline const ::google::protobuf::RepeatedPtrField< ::pb::TPubgFmtDetail >&
      arrfmt() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb::TPubgFmtDetail >*
      mutable_arrfmt();

  // optional uint32 Htid = 2;
  inline bool has_htid() const;
  inline void clear_htid();
  static const int kHtidFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TPubgGetEnemyInfoRsp</name>
  	<Function>
  		<name>htid</name>
  		<replaceName>Htid</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_htid</name>
  		<replaceName>Htid</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_htid</name>
  		<replaceName>Htid</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 htid() const;
  inline void set_htid(::google::protobuf::uint32 value);

  // optional uint64 FightForce = 3;
  inline bool has_fightforce() const;
  inline void clear_fightforce();
  static const int kFightForceFieldNumber = 3;
  /*FOR2LUA
  <Record>
  	<name>TPubgGetEnemyInfoRsp</name>
  	<Function>
  		<name>fightforce</name>
  		<replaceName>FightForce</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_fightforce</name>
  		<replaceName>FightForce</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_fightforce</name>
  		<replaceName>FightForce</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint64 fightforce() const;
  inline void set_fightforce(::google::protobuf::uint64 value);

  // optional uint32 PlayerImageFrameTid = 4;
  inline bool has_playerimageframetid() const;
  inline void clear_playerimageframetid();
  static const int kPlayerImageFrameTidFieldNumber = 4;
  /*FOR2LUA
  <Record>
  	<name>TPubgGetEnemyInfoRsp</name>
  	<Function>
  		<name>playerimageframetid</name>
  		<replaceName>PlayerImageFrameTid</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_playerimageframetid</name>
  		<replaceName>PlayerImageFrameTid</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_playerimageframetid</name>
  		<replaceName>PlayerImageFrameTid</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 playerimageframetid() const;
  inline void set_playerimageframetid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:pb.TPubgGetEnemyInfoRsp)
 private:
  inline void set_has_htid();
  inline void clear_has_htid();
  inline void set_has_fightforce();
  inline void clear_has_fightforce();
  inline void set_has_playerimageframetid();
  inline void clear_has_playerimageframetid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::pb::TPubgFmtDetail > arrfmt_;
  ::google::protobuf::uint64 fightforce_;
  ::google::protobuf::uint32 htid_;
  ::google::protobuf::uint32 playerimageframetid_;
  friend void  protobuf_AddDesc_net_2fPubg_2eproto();
  friend void protobuf_AssignDesc_net_2fPubg_2eproto();
  friend void protobuf_ShutdownFile_net_2fPubg_2eproto();

  void InitAsDefaultInstance();
  static TPubgGetEnemyInfoRsp* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TPubgBuyTokenReq</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/Pubg.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TPubgBuyTokenReq : public ::google::protobuf::Message {
 public:
  TPubgBuyTokenReq();
  virtual ~TPubgBuyTokenReq();

  TPubgBuyTokenReq(const TPubgBuyTokenReq& from);

  inline TPubgBuyTokenReq& operator=(const TPubgBuyTokenReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TPubgBuyTokenReq& default_instance();

  void Swap(TPubgBuyTokenReq* other);

  // implements Message ----------------------------------------------

  TPubgBuyTokenReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TPubgBuyTokenReq& from);
  void MergeFrom(const TPubgBuyTokenReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 BuyNum = 1;
  inline bool has_buynum() const;
  inline void clear_buynum();
  static const int kBuyNumFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TPubgBuyTokenReq</name>
  	<Function>
  		<name>buynum</name>
  		<replaceName>BuyNum</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_buynum</name>
  		<replaceName>BuyNum</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_buynum</name>
  		<replaceName>BuyNum</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 buynum() const;
  inline void set_buynum(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:pb.TPubgBuyTokenReq)
 private:
  inline void set_has_buynum();
  inline void clear_has_buynum();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 buynum_;
  friend void  protobuf_AddDesc_net_2fPubg_2eproto();
  friend void protobuf_AssignDesc_net_2fPubg_2eproto();
  friend void protobuf_ShutdownFile_net_2fPubg_2eproto();

  void InitAsDefaultInstance();
  static TPubgBuyTokenReq* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TPubgBuyTokenRsp</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/Pubg.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TPubgBuyTokenRsp : public ::google::protobuf::Message {
 public:
  TPubgBuyTokenRsp();
  virtual ~TPubgBuyTokenRsp();

  TPubgBuyTokenRsp(const TPubgBuyTokenRsp& from);

  inline TPubgBuyTokenRsp& operator=(const TPubgBuyTokenRsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TPubgBuyTokenRsp& default_instance();

  void Swap(TPubgBuyTokenRsp* other);

  // implements Message ----------------------------------------------

  TPubgBuyTokenRsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TPubgBuyTokenRsp& from);
  void MergeFrom(const TPubgBuyTokenRsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 TokenNum = 1;
  inline bool has_tokennum() const;
  inline void clear_tokennum();
  static const int kTokenNumFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TPubgBuyTokenRsp</name>
  	<Function>
  		<name>tokennum</name>
  		<replaceName>TokenNum</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_tokennum</name>
  		<replaceName>TokenNum</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_tokennum</name>
  		<replaceName>TokenNum</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 tokennum() const;
  inline void set_tokennum(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:pb.TPubgBuyTokenRsp)
 private:
  inline void set_has_tokennum();
  inline void clear_has_tokennum();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 tokennum_;
  friend void  protobuf_AddDesc_net_2fPubg_2eproto();
  friend void protobuf_AssignDesc_net_2fPubg_2eproto();
  friend void protobuf_ShutdownFile_net_2fPubg_2eproto();

  void InitAsDefaultInstance();
  static TPubgBuyTokenRsp* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TPubgGetBattleRecordReq</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/Pubg.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TPubgGetBattleRecordReq : public ::google::protobuf::Message {
 public:
  TPubgGetBattleRecordReq();
  virtual ~TPubgGetBattleRecordReq();

  TPubgGetBattleRecordReq(const TPubgGetBattleRecordReq& from);

  inline TPubgGetBattleRecordReq& operator=(const TPubgGetBattleRecordReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TPubgGetBattleRecordReq& default_instance();

  void Swap(TPubgGetBattleRecordReq* other);

  // implements Message ----------------------------------------------

  TPubgGetBattleRecordReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TPubgGetBattleRecordReq& from);
  void MergeFrom(const TPubgGetBattleRecordReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 Offset = 1;
  inline bool has_offset() const;
  inline void clear_offset();
  static const int kOffsetFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TPubgGetBattleRecordReq</name>
  	<Function>
  		<name>offset</name>
  		<replaceName>Offset</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_offset</name>
  		<replaceName>Offset</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_offset</name>
  		<replaceName>Offset</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 offset() const;
  inline void set_offset(::google::protobuf::uint32 value);

  // optional uint32 Limit = 2;
  inline bool has_limit() const;
  inline void clear_limit();
  static const int kLimitFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TPubgGetBattleRecordReq</name>
  	<Function>
  		<name>limit</name>
  		<replaceName>Limit</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_limit</name>
  		<replaceName>Limit</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_limit</name>
  		<replaceName>Limit</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 limit() const;
  inline void set_limit(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:pb.TPubgGetBattleRecordReq)
 private:
  inline void set_has_offset();
  inline void clear_has_offset();
  inline void set_has_limit();
  inline void clear_has_limit();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 offset_;
  ::google::protobuf::uint32 limit_;
  friend void  protobuf_AddDesc_net_2fPubg_2eproto();
  friend void protobuf_AssignDesc_net_2fPubg_2eproto();
  friend void protobuf_ShutdownFile_net_2fPubg_2eproto();

  void InitAsDefaultInstance();
  static TPubgGetBattleRecordReq* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TPubgGetBattleRecordRsp</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/Pubg.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TPubgGetBattleRecordRsp : public ::google::protobuf::Message {
 public:
  TPubgGetBattleRecordRsp();
  virtual ~TPubgGetBattleRecordRsp();

  TPubgGetBattleRecordRsp(const TPubgGetBattleRecordRsp& from);

  inline TPubgGetBattleRecordRsp& operator=(const TPubgGetBattleRecordRsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TPubgGetBattleRecordRsp& default_instance();

  void Swap(TPubgGetBattleRecordRsp* other);

  // implements Message ----------------------------------------------

  TPubgGetBattleRecordRsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TPubgGetBattleRecordRsp& from);
  void MergeFrom(const TPubgGetBattleRecordRsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .pb.TPubgBattleRecord BattleRecordArr = 1;
  inline int battlerecordarr_size() const;
  inline void clear_battlerecordarr();
  static const int kBattleRecordArrFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TPubgGetBattleRecordRsp</name>
  	<Function>
  		<name>battlerecordarr</name>
  		<replaceName>BattleRecordArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_battlerecordarr</name>
  		<replaceName>BattleRecordArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_battlerecordarr</name>
  		<replaceName>BattleRecordArr</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_battlerecordarr</name>
  		<replaceName>BattleRecordArr</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>battlerecordarr_size</name>
  		<replaceName>BattleRecordArr</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TPubgBattleRecord& battlerecordarr(int index) const;
  inline ::pb::TPubgBattleRecord* mutable_battlerecordarr(int index);
  inline ::pb::TPubgBattleRecord* add_battlerecordarr();
  inline const ::google::protobuf::RepeatedPtrField< ::pb::TPubgBattleRecord >&
      battlerecordarr() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb::TPubgBattleRecord >*
      mutable_battlerecordarr();

  // @@protoc_insertion_point(class_scope:pb.TPubgGetBattleRecordRsp)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::pb::TPubgBattleRecord > battlerecordarr_;
  friend void  protobuf_AddDesc_net_2fPubg_2eproto();
  friend void protobuf_AssignDesc_net_2fPubg_2eproto();
  friend void protobuf_ShutdownFile_net_2fPubg_2eproto();

  void InitAsDefaultInstance();
  static TPubgGetBattleRecordRsp* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TPubgGetServerTeamInfoRsp</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/Pubg.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TPubgGetServerTeamInfoRsp : public ::google::protobuf::Message {
 public:
  TPubgGetServerTeamInfoRsp();
  virtual ~TPubgGetServerTeamInfoRsp();

  TPubgGetServerTeamInfoRsp(const TPubgGetServerTeamInfoRsp& from);

  inline TPubgGetServerTeamInfoRsp& operator=(const TPubgGetServerTeamInfoRsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TPubgGetServerTeamInfoRsp& default_instance();

  void Swap(TPubgGetServerTeamInfoRsp* other);

  // implements Message ----------------------------------------------

  TPubgGetServerTeamInfoRsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TPubgGetServerTeamInfoRsp& from);
  void MergeFrom(const TPubgGetServerTeamInfoRsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 ServerTeamId = 1;
  inline bool has_serverteamid() const;
  inline void clear_serverteamid();
  static const int kServerTeamIdFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TPubgGetServerTeamInfoRsp</name>
  	<Function>
  		<name>serverteamid</name>
  		<replaceName>ServerTeamId</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_serverteamid</name>
  		<replaceName>ServerTeamId</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_serverteamid</name>
  		<replaceName>ServerTeamId</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 serverteamid() const;
  inline void set_serverteamid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:pb.TPubgGetServerTeamInfoRsp)
 private:
  inline void set_has_serverteamid();
  inline void clear_has_serverteamid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 serverteamid_;
  friend void  protobuf_AddDesc_net_2fPubg_2eproto();
  friend void protobuf_AssignDesc_net_2fPubg_2eproto();
  friend void protobuf_ShutdownFile_net_2fPubg_2eproto();

  void InitAsDefaultInstance();
  static TPubgGetServerTeamInfoRsp* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TPubgBattleNotify</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/Pubg.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TPubgBattleNotify : public ::google::protobuf::Message {
 public:
  TPubgBattleNotify();
  virtual ~TPubgBattleNotify();

  TPubgBattleNotify(const TPubgBattleNotify& from);

  inline TPubgBattleNotify& operator=(const TPubgBattleNotify& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TPubgBattleNotify& default_instance();

  void Swap(TPubgBattleNotify* other);

  // implements Message ----------------------------------------------

  TPubgBattleNotify* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TPubgBattleNotify& from);
  void MergeFrom(const TPubgBattleNotify& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .pb.TPubgBattleRecord Battle = 1;
  inline bool has_battle() const;
  inline void clear_battle();
  static const int kBattleFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TPubgBattleNotify</name>
  	<Function>
  		<name>battle</name>
  		<replaceName>Battle</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_battle</name>
  		<replaceName>Battle</replaceName>
  		<handler>descripter = pb_set_message_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_allocated_battle</name>
  		<replaceName>Battle</replaceName>
  		<handler>descripter = pb_set_message_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_battle</name>
  		<replaceName>Battle</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TPubgBattleRecord& battle() const;
  inline ::pb::TPubgBattleRecord* mutable_battle();
  inline ::pb::TPubgBattleRecord* release_battle();
  inline void set_allocated_battle(::pb::TPubgBattleRecord* battle);

  // optional string FieldId = 2;
  inline bool has_fieldid() const;
  inline void clear_fieldid();
  static const int kFieldIdFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TPubgBattleNotify</name>
  	<Function>
  		<name>fieldid</name>
  		<replaceName>FieldId</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_fieldid</name>
  		<replaceName>FieldId</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_fieldid</name>
  		<replaceName>FieldId</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::std::string& fieldid() const;
  inline void set_fieldid(const ::std::string& value);
  inline void set_fieldid(const char* value);
  inline void set_fieldid(const char* value, size_t size);
  inline ::std::string* mutable_fieldid();
  inline ::std::string* release_fieldid();
  inline void set_allocated_fieldid(::std::string* fieldid);

  // @@protoc_insertion_point(class_scope:pb.TPubgBattleNotify)
 private:
  inline void set_has_battle();
  inline void clear_has_battle();
  inline void set_has_fieldid();
  inline void clear_has_fieldid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::pb::TPubgBattleRecord* battle_;
  ::std::string* fieldid_;
  friend void  protobuf_AddDesc_net_2fPubg_2eproto();
  friend void protobuf_AssignDesc_net_2fPubg_2eproto();
  friend void protobuf_ShutdownFile_net_2fPubg_2eproto();

  void InitAsDefaultInstance();
  static TPubgBattleNotify* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TPubgOutOwner</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/Pubg.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TPubgOutOwner : public ::google::protobuf::Message {
 public:
  TPubgOutOwner();
  virtual ~TPubgOutOwner();

  TPubgOutOwner(const TPubgOutOwner& from);

  inline TPubgOutOwner& operator=(const TPubgOutOwner& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TPubgOutOwner& default_instance();

  void Swap(TPubgOutOwner* other);

  // implements Message ----------------------------------------------

  TPubgOutOwner* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TPubgOutOwner& from);
  void MergeFrom(const TPubgOutOwner& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .pb.TPubgLocation Location = 1;
  inline bool has_location() const;
  inline void clear_location();
  static const int kLocationFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TPubgOutOwner</name>
  	<Function>
  		<name>location</name>
  		<replaceName>Location</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_location</name>
  		<replaceName>Location</replaceName>
  		<handler>descripter = pb_set_message_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_allocated_location</name>
  		<replaceName>Location</replaceName>
  		<handler>descripter = pb_set_message_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_location</name>
  		<replaceName>Location</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TPubgLocation& location() const;
  inline ::pb::TPubgLocation* mutable_location();
  inline ::pb::TPubgLocation* release_location();
  inline void set_allocated_location(::pb::TPubgLocation* location);

  // optional uint64 OwnerId = 2;
  inline bool has_ownerid() const;
  inline void clear_ownerid();
  static const int kOwnerIdFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TPubgOutOwner</name>
  	<Function>
  		<name>ownerid</name>
  		<replaceName>OwnerId</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_ownerid</name>
  		<replaceName>OwnerId</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_ownerid</name>
  		<replaceName>OwnerId</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint64 ownerid() const;
  inline void set_ownerid(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:pb.TPubgOutOwner)
 private:
  inline void set_has_location();
  inline void clear_has_location();
  inline void set_has_ownerid();
  inline void clear_has_ownerid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::pb::TPubgLocation* location_;
  ::google::protobuf::uint64 ownerid_;
  friend void  protobuf_AddDesc_net_2fPubg_2eproto();
  friend void protobuf_AssignDesc_net_2fPubg_2eproto();
  friend void protobuf_ShutdownFile_net_2fPubg_2eproto();

  void InitAsDefaultInstance();
  static TPubgOutOwner* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TPubgOutNotify</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/Pubg.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TPubgOutNotify : public ::google::protobuf::Message {
 public:
  TPubgOutNotify();
  virtual ~TPubgOutNotify();

  TPubgOutNotify(const TPubgOutNotify& from);

  inline TPubgOutNotify& operator=(const TPubgOutNotify& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TPubgOutNotify& default_instance();

  void Swap(TPubgOutNotify* other);

  // implements Message ----------------------------------------------

  TPubgOutNotify* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TPubgOutNotify& from);
  void MergeFrom(const TPubgOutNotify& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .pb.TPubgOutOwner ArrOwner = 1;
  inline int arrowner_size() const;
  inline void clear_arrowner();
  static const int kArrOwnerFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TPubgOutNotify</name>
  	<Function>
  		<name>arrowner</name>
  		<replaceName>ArrOwner</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_arrowner</name>
  		<replaceName>ArrOwner</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_arrowner</name>
  		<replaceName>ArrOwner</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_arrowner</name>
  		<replaceName>ArrOwner</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>arrowner_size</name>
  		<replaceName>ArrOwner</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TPubgOutOwner& arrowner(int index) const;
  inline ::pb::TPubgOutOwner* mutable_arrowner(int index);
  inline ::pb::TPubgOutOwner* add_arrowner();
  inline const ::google::protobuf::RepeatedPtrField< ::pb::TPubgOutOwner >&
      arrowner() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb::TPubgOutOwner >*
      mutable_arrowner();

  // @@protoc_insertion_point(class_scope:pb.TPubgOutNotify)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::pb::TPubgOutOwner > arrowner_;
  friend void  protobuf_AddDesc_net_2fPubg_2eproto();
  friend void protobuf_AssignDesc_net_2fPubg_2eproto();
  friend void protobuf_ShutdownFile_net_2fPubg_2eproto();

  void InitAsDefaultInstance();
  static TPubgOutNotify* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TPubgWinnerNotify</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/Pubg.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TPubgWinnerNotify : public ::google::protobuf::Message {
 public:
  TPubgWinnerNotify();
  virtual ~TPubgWinnerNotify();

  TPubgWinnerNotify(const TPubgWinnerNotify& from);

  inline TPubgWinnerNotify& operator=(const TPubgWinnerNotify& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TPubgWinnerNotify& default_instance();

  void Swap(TPubgWinnerNotify* other);

  // implements Message ----------------------------------------------

  TPubgWinnerNotify* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TPubgWinnerNotify& from);
  void MergeFrom(const TPubgWinnerNotify& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .pb.TPubgChickenEaterInfo ChickenEaterInfo = 1;
  inline bool has_chickeneaterinfo() const;
  inline void clear_chickeneaterinfo();
  static const int kChickenEaterInfoFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TPubgWinnerNotify</name>
  	<Function>
  		<name>chickeneaterinfo</name>
  		<replaceName>ChickenEaterInfo</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_chickeneaterinfo</name>
  		<replaceName>ChickenEaterInfo</replaceName>
  		<handler>descripter = pb_set_message_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_allocated_chickeneaterinfo</name>
  		<replaceName>ChickenEaterInfo</replaceName>
  		<handler>descripter = pb_set_message_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_chickeneaterinfo</name>
  		<replaceName>ChickenEaterInfo</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TPubgChickenEaterInfo& chickeneaterinfo() const;
  inline ::pb::TPubgChickenEaterInfo* mutable_chickeneaterinfo();
  inline ::pb::TPubgChickenEaterInfo* release_chickeneaterinfo();
  inline void set_allocated_chickeneaterinfo(::pb::TPubgChickenEaterInfo* chickeneaterinfo);

  // @@protoc_insertion_point(class_scope:pb.TPubgWinnerNotify)
 private:
  inline void set_has_chickeneaterinfo();
  inline void clear_has_chickeneaterinfo();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::pb::TPubgChickenEaterInfo* chickeneaterinfo_;
  friend void  protobuf_AddDesc_net_2fPubg_2eproto();
  friend void protobuf_AssignDesc_net_2fPubg_2eproto();
  friend void protobuf_ShutdownFile_net_2fPubg_2eproto();

  void InitAsDefaultInstance();
  static TPubgWinnerNotify* default_instance_;
};
// ===================================================================


// ===================================================================

// TPubgUserInfo

// optional uint64 Uid = 1;
inline bool TPubgUserInfo::has_uid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TPubgUserInfo::set_has_uid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TPubgUserInfo::clear_has_uid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TPubgUserInfo::clear_uid() {
  uid_ = GOOGLE_ULONGLONG(0);
  clear_has_uid();
}
inline ::google::protobuf::uint64 TPubgUserInfo::uid() const {
  // @@protoc_insertion_point(field_get:pb.TPubgUserInfo.Uid)
  return uid_;
}
inline void TPubgUserInfo::set_uid(::google::protobuf::uint64 value) {
  set_has_uid();
  uid_ = value;
  // @@protoc_insertion_point(field_set:pb.TPubgUserInfo.Uid)
}

// optional string ServerId = 2;
inline bool TPubgUserInfo::has_serverid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TPubgUserInfo::set_has_serverid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TPubgUserInfo::clear_has_serverid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TPubgUserInfo::clear_serverid() {
  if (serverid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    serverid_->clear();
  }
  clear_has_serverid();
}
inline const ::std::string& TPubgUserInfo::serverid() const {
  // @@protoc_insertion_point(field_get:pb.TPubgUserInfo.ServerId)
  return *serverid_;
}
inline void TPubgUserInfo::set_serverid(const ::std::string& value) {
  set_has_serverid();
  if (serverid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    serverid_ = new ::std::string;
  }
  serverid_->assign(value);
  // @@protoc_insertion_point(field_set:pb.TPubgUserInfo.ServerId)
}
inline void TPubgUserInfo::set_serverid(const char* value) {
  set_has_serverid();
  if (serverid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    serverid_ = new ::std::string;
  }
  serverid_->assign(value);
  // @@protoc_insertion_point(field_set_char:pb.TPubgUserInfo.ServerId)
}
inline void TPubgUserInfo::set_serverid(const char* value, size_t size) {
  set_has_serverid();
  if (serverid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    serverid_ = new ::std::string;
  }
  serverid_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:pb.TPubgUserInfo.ServerId)
}
inline ::std::string* TPubgUserInfo::mutable_serverid() {
  set_has_serverid();
  if (serverid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    serverid_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:pb.TPubgUserInfo.ServerId)
  return serverid_;
}
inline ::std::string* TPubgUserInfo::release_serverid() {
  clear_has_serverid();
  if (serverid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = serverid_;
    serverid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void TPubgUserInfo::set_allocated_serverid(::std::string* serverid) {
  if (serverid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete serverid_;
  }
  if (serverid) {
    set_has_serverid();
    serverid_ = serverid;
  } else {
    clear_has_serverid();
    serverid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:pb.TPubgUserInfo.ServerId)
}

// optional uint32 ServerTeamId = 3;
inline bool TPubgUserInfo::has_serverteamid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void TPubgUserInfo::set_has_serverteamid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void TPubgUserInfo::clear_has_serverteamid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void TPubgUserInfo::clear_serverteamid() {
  serverteamid_ = 0u;
  clear_has_serverteamid();
}
inline ::google::protobuf::uint32 TPubgUserInfo::serverteamid() const {
  // @@protoc_insertion_point(field_get:pb.TPubgUserInfo.ServerTeamId)
  return serverteamid_;
}
inline void TPubgUserInfo::set_serverteamid(::google::protobuf::uint32 value) {
  set_has_serverteamid();
  serverteamid_ = value;
  // @@protoc_insertion_point(field_set:pb.TPubgUserInfo.ServerTeamId)
}

// optional uint64 SignTime = 4;
inline bool TPubgUserInfo::has_signtime() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void TPubgUserInfo::set_has_signtime() {
  _has_bits_[0] |= 0x00000008u;
}
inline void TPubgUserInfo::clear_has_signtime() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void TPubgUserInfo::clear_signtime() {
  signtime_ = GOOGLE_ULONGLONG(0);
  clear_has_signtime();
}
inline ::google::protobuf::uint64 TPubgUserInfo::signtime() const {
  // @@protoc_insertion_point(field_get:pb.TPubgUserInfo.SignTime)
  return signtime_;
}
inline void TPubgUserInfo::set_signtime(::google::protobuf::uint64 value) {
  set_has_signtime();
  signtime_ = value;
  // @@protoc_insertion_point(field_set:pb.TPubgUserInfo.SignTime)
}

// optional string FieldId = 5;
inline bool TPubgUserInfo::has_fieldid() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void TPubgUserInfo::set_has_fieldid() {
  _has_bits_[0] |= 0x00000010u;
}
inline void TPubgUserInfo::clear_has_fieldid() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void TPubgUserInfo::clear_fieldid() {
  if (fieldid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    fieldid_->clear();
  }
  clear_has_fieldid();
}
inline const ::std::string& TPubgUserInfo::fieldid() const {
  // @@protoc_insertion_point(field_get:pb.TPubgUserInfo.FieldId)
  return *fieldid_;
}
inline void TPubgUserInfo::set_fieldid(const ::std::string& value) {
  set_has_fieldid();
  if (fieldid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    fieldid_ = new ::std::string;
  }
  fieldid_->assign(value);
  // @@protoc_insertion_point(field_set:pb.TPubgUserInfo.FieldId)
}
inline void TPubgUserInfo::set_fieldid(const char* value) {
  set_has_fieldid();
  if (fieldid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    fieldid_ = new ::std::string;
  }
  fieldid_->assign(value);
  // @@protoc_insertion_point(field_set_char:pb.TPubgUserInfo.FieldId)
}
inline void TPubgUserInfo::set_fieldid(const char* value, size_t size) {
  set_has_fieldid();
  if (fieldid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    fieldid_ = new ::std::string;
  }
  fieldid_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:pb.TPubgUserInfo.FieldId)
}
inline ::std::string* TPubgUserInfo::mutable_fieldid() {
  set_has_fieldid();
  if (fieldid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    fieldid_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:pb.TPubgUserInfo.FieldId)
  return fieldid_;
}
inline ::std::string* TPubgUserInfo::release_fieldid() {
  clear_has_fieldid();
  if (fieldid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = fieldid_;
    fieldid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void TPubgUserInfo::set_allocated_fieldid(::std::string* fieldid) {
  if (fieldid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete fieldid_;
  }
  if (fieldid) {
    set_has_fieldid();
    fieldid_ = fieldid;
  } else {
    clear_has_fieldid();
    fieldid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:pb.TPubgUserInfo.FieldId)
}

// optional .pb.TPubgLocation Location = 6;
inline bool TPubgUserInfo::has_location() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void TPubgUserInfo::set_has_location() {
  _has_bits_[0] |= 0x00000020u;
}
inline void TPubgUserInfo::clear_has_location() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void TPubgUserInfo::clear_location() {
  if (location_ != NULL) location_->::pb::TPubgLocation::Clear();
  clear_has_location();
}
inline const ::pb::TPubgLocation& TPubgUserInfo::location() const {
  // @@protoc_insertion_point(field_get:pb.TPubgUserInfo.Location)
  return location_ != NULL ? *location_ : *default_instance_->location_;
}
inline ::pb::TPubgLocation* TPubgUserInfo::mutable_location() {
  set_has_location();
  if (location_ == NULL) location_ = new ::pb::TPubgLocation;
  // @@protoc_insertion_point(field_mutable:pb.TPubgUserInfo.Location)
  return location_;
}
inline ::pb::TPubgLocation* TPubgUserInfo::release_location() {
  clear_has_location();
  ::pb::TPubgLocation* temp = location_;
  location_ = NULL;
  return temp;
}
inline void TPubgUserInfo::set_allocated_location(::pb::TPubgLocation* location) {
  delete location_;
  location_ = location;
  if (location) {
    set_has_location();
  } else {
    clear_has_location();
  }
  // @@protoc_insertion_point(field_set_allocated:pb.TPubgUserInfo.Location)
}

// optional uint32 SurviveRound = 7;
inline bool TPubgUserInfo::has_surviveround() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void TPubgUserInfo::set_has_surviveround() {
  _has_bits_[0] |= 0x00000040u;
}
inline void TPubgUserInfo::clear_has_surviveround() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void TPubgUserInfo::clear_surviveround() {
  surviveround_ = 0u;
  clear_has_surviveround();
}
inline ::google::protobuf::uint32 TPubgUserInfo::surviveround() const {
  // @@protoc_insertion_point(field_get:pb.TPubgUserInfo.SurviveRound)
  return surviveround_;
}
inline void TPubgUserInfo::set_surviveround(::google::protobuf::uint32 value) {
  set_has_surviveround();
  surviveround_ = value;
  // @@protoc_insertion_point(field_set:pb.TPubgUserInfo.SurviveRound)
}

// optional bool IsAlive = 8;
inline bool TPubgUserInfo::has_isalive() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void TPubgUserInfo::set_has_isalive() {
  _has_bits_[0] |= 0x00000080u;
}
inline void TPubgUserInfo::clear_has_isalive() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void TPubgUserInfo::clear_isalive() {
  isalive_ = false;
  clear_has_isalive();
}
inline bool TPubgUserInfo::isalive() const {
  // @@protoc_insertion_point(field_get:pb.TPubgUserInfo.IsAlive)
  return isalive_;
}
inline void TPubgUserInfo::set_isalive(bool value) {
  set_has_isalive();
  isalive_ = value;
  // @@protoc_insertion_point(field_set:pb.TPubgUserInfo.IsAlive)
}

// optional uint32 TotalChickenNum = 9;
inline bool TPubgUserInfo::has_totalchickennum() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void TPubgUserInfo::set_has_totalchickennum() {
  _has_bits_[0] |= 0x00000100u;
}
inline void TPubgUserInfo::clear_has_totalchickennum() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void TPubgUserInfo::clear_totalchickennum() {
  totalchickennum_ = 0u;
  clear_has_totalchickennum();
}
inline ::google::protobuf::uint32 TPubgUserInfo::totalchickennum() const {
  // @@protoc_insertion_point(field_get:pb.TPubgUserInfo.TotalChickenNum)
  return totalchickennum_;
}
inline void TPubgUserInfo::set_totalchickennum(::google::protobuf::uint32 value) {
  set_has_totalchickennum();
  totalchickennum_ = value;
  // @@protoc_insertion_point(field_set:pb.TPubgUserInfo.TotalChickenNum)
}

// optional uint32 SeasonWinNum = 10;
inline bool TPubgUserInfo::has_seasonwinnum() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void TPubgUserInfo::set_has_seasonwinnum() {
  _has_bits_[0] |= 0x00000200u;
}
inline void TPubgUserInfo::clear_has_seasonwinnum() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void TPubgUserInfo::clear_seasonwinnum() {
  seasonwinnum_ = 0u;
  clear_has_seasonwinnum();
}
inline ::google::protobuf::uint32 TPubgUserInfo::seasonwinnum() const {
  // @@protoc_insertion_point(field_get:pb.TPubgUserInfo.SeasonWinNum)
  return seasonwinnum_;
}
inline void TPubgUserInfo::set_seasonwinnum(::google::protobuf::uint32 value) {
  set_has_seasonwinnum();
  seasonwinnum_ = value;
  // @@protoc_insertion_point(field_set:pb.TPubgUserInfo.SeasonWinNum)
}

// optional uint32 TokenNum = 11;
inline bool TPubgUserInfo::has_tokennum() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void TPubgUserInfo::set_has_tokennum() {
  _has_bits_[0] |= 0x00000400u;
}
inline void TPubgUserInfo::clear_has_tokennum() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void TPubgUserInfo::clear_tokennum() {
  tokennum_ = 0u;
  clear_has_tokennum();
}
inline ::google::protobuf::uint32 TPubgUserInfo::tokennum() const {
  // @@protoc_insertion_point(field_get:pb.TPubgUserInfo.TokenNum)
  return tokennum_;
}
inline void TPubgUserInfo::set_tokennum(::google::protobuf::uint32 value) {
  set_has_tokennum();
  tokennum_ = value;
  // @@protoc_insertion_point(field_set:pb.TPubgUserInfo.TokenNum)
}

// optional uint64 TokenRecoverTime = 12;
inline bool TPubgUserInfo::has_tokenrecovertime() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void TPubgUserInfo::set_has_tokenrecovertime() {
  _has_bits_[0] |= 0x00000800u;
}
inline void TPubgUserInfo::clear_has_tokenrecovertime() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void TPubgUserInfo::clear_tokenrecovertime() {
  tokenrecovertime_ = GOOGLE_ULONGLONG(0);
  clear_has_tokenrecovertime();
}
inline ::google::protobuf::uint64 TPubgUserInfo::tokenrecovertime() const {
  // @@protoc_insertion_point(field_get:pb.TPubgUserInfo.TokenRecoverTime)
  return tokenrecovertime_;
}
inline void TPubgUserInfo::set_tokenrecovertime(::google::protobuf::uint64 value) {
  set_has_tokenrecovertime();
  tokenrecovertime_ = value;
  // @@protoc_insertion_point(field_set:pb.TPubgUserInfo.TokenRecoverTime)
}

// optional uint32 BuyTokenNum = 13;
inline bool TPubgUserInfo::has_buytokennum() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void TPubgUserInfo::set_has_buytokennum() {
  _has_bits_[0] |= 0x00001000u;
}
inline void TPubgUserInfo::clear_has_buytokennum() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void TPubgUserInfo::clear_buytokennum() {
  buytokennum_ = 0u;
  clear_has_buytokennum();
}
inline ::google::protobuf::uint32 TPubgUserInfo::buytokennum() const {
  // @@protoc_insertion_point(field_get:pb.TPubgUserInfo.BuyTokenNum)
  return buytokennum_;
}
inline void TPubgUserInfo::set_buytokennum(::google::protobuf::uint32 value) {
  set_has_buytokennum();
  buytokennum_ = value;
  // @@protoc_insertion_point(field_set:pb.TPubgUserInfo.BuyTokenNum)
}

// -------------------------------------------------------------------

// TPubgOwnerInfo

// optional uint64 OwnerId = 1;
inline bool TPubgOwnerInfo::has_ownerid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TPubgOwnerInfo::set_has_ownerid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TPubgOwnerInfo::clear_has_ownerid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TPubgOwnerInfo::clear_ownerid() {
  ownerid_ = GOOGLE_ULONGLONG(0);
  clear_has_ownerid();
}
inline ::google::protobuf::uint64 TPubgOwnerInfo::ownerid() const {
  // @@protoc_insertion_point(field_get:pb.TPubgOwnerInfo.OwnerId)
  return ownerid_;
}
inline void TPubgOwnerInfo::set_ownerid(::google::protobuf::uint64 value) {
  set_has_ownerid();
  ownerid_ = value;
  // @@protoc_insertion_point(field_set:pb.TPubgOwnerInfo.OwnerId)
}

// optional .pb.TUserSimpleInfo UserInfo = 2;
inline bool TPubgOwnerInfo::has_userinfo() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TPubgOwnerInfo::set_has_userinfo() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TPubgOwnerInfo::clear_has_userinfo() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TPubgOwnerInfo::clear_userinfo() {
  if (userinfo_ != NULL) userinfo_->::pb::TUserSimpleInfo::Clear();
  clear_has_userinfo();
}
inline const ::pb::TUserSimpleInfo& TPubgOwnerInfo::userinfo() const {
  // @@protoc_insertion_point(field_get:pb.TPubgOwnerInfo.UserInfo)
  return userinfo_ != NULL ? *userinfo_ : *default_instance_->userinfo_;
}
inline ::pb::TUserSimpleInfo* TPubgOwnerInfo::mutable_userinfo() {
  set_has_userinfo();
  if (userinfo_ == NULL) userinfo_ = new ::pb::TUserSimpleInfo;
  // @@protoc_insertion_point(field_mutable:pb.TPubgOwnerInfo.UserInfo)
  return userinfo_;
}
inline ::pb::TUserSimpleInfo* TPubgOwnerInfo::release_userinfo() {
  clear_has_userinfo();
  ::pb::TUserSimpleInfo* temp = userinfo_;
  userinfo_ = NULL;
  return temp;
}
inline void TPubgOwnerInfo::set_allocated_userinfo(::pb::TUserSimpleInfo* userinfo) {
  delete userinfo_;
  userinfo_ = userinfo;
  if (userinfo) {
    set_has_userinfo();
  } else {
    clear_has_userinfo();
  }
  // @@protoc_insertion_point(field_set_allocated:pb.TPubgOwnerInfo.UserInfo)
}

// optional uint64 Hp = 3;
inline bool TPubgOwnerInfo::has_hp() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void TPubgOwnerInfo::set_has_hp() {
  _has_bits_[0] |= 0x00000004u;
}
inline void TPubgOwnerInfo::clear_has_hp() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void TPubgOwnerInfo::clear_hp() {
  hp_ = GOOGLE_ULONGLONG(0);
  clear_has_hp();
}
inline ::google::protobuf::uint64 TPubgOwnerInfo::hp() const {
  // @@protoc_insertion_point(field_get:pb.TPubgOwnerInfo.Hp)
  return hp_;
}
inline void TPubgOwnerInfo::set_hp(::google::protobuf::uint64 value) {
  set_has_hp();
  hp_ = value;
  // @@protoc_insertion_point(field_set:pb.TPubgOwnerInfo.Hp)
}

// -------------------------------------------------------------------

// TPubgChickenEaterInfo

// optional .pb.TUserSimpleInfo UserInfo = 1;
inline bool TPubgChickenEaterInfo::has_userinfo() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TPubgChickenEaterInfo::set_has_userinfo() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TPubgChickenEaterInfo::clear_has_userinfo() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TPubgChickenEaterInfo::clear_userinfo() {
  if (userinfo_ != NULL) userinfo_->::pb::TUserSimpleInfo::Clear();
  clear_has_userinfo();
}
inline const ::pb::TUserSimpleInfo& TPubgChickenEaterInfo::userinfo() const {
  // @@protoc_insertion_point(field_get:pb.TPubgChickenEaterInfo.UserInfo)
  return userinfo_ != NULL ? *userinfo_ : *default_instance_->userinfo_;
}
inline ::pb::TUserSimpleInfo* TPubgChickenEaterInfo::mutable_userinfo() {
  set_has_userinfo();
  if (userinfo_ == NULL) userinfo_ = new ::pb::TUserSimpleInfo;
  // @@protoc_insertion_point(field_mutable:pb.TPubgChickenEaterInfo.UserInfo)
  return userinfo_;
}
inline ::pb::TUserSimpleInfo* TPubgChickenEaterInfo::release_userinfo() {
  clear_has_userinfo();
  ::pb::TUserSimpleInfo* temp = userinfo_;
  userinfo_ = NULL;
  return temp;
}
inline void TPubgChickenEaterInfo::set_allocated_userinfo(::pb::TUserSimpleInfo* userinfo) {
  delete userinfo_;
  userinfo_ = userinfo;
  if (userinfo) {
    set_has_userinfo();
  } else {
    clear_has_userinfo();
  }
  // @@protoc_insertion_point(field_set_allocated:pb.TPubgChickenEaterInfo.UserInfo)
}

// optional uint32 TotalChickenNum = 2;
inline bool TPubgChickenEaterInfo::has_totalchickennum() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TPubgChickenEaterInfo::set_has_totalchickennum() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TPubgChickenEaterInfo::clear_has_totalchickennum() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TPubgChickenEaterInfo::clear_totalchickennum() {
  totalchickennum_ = 0u;
  clear_has_totalchickennum();
}
inline ::google::protobuf::uint32 TPubgChickenEaterInfo::totalchickennum() const {
  // @@protoc_insertion_point(field_get:pb.TPubgChickenEaterInfo.TotalChickenNum)
  return totalchickennum_;
}
inline void TPubgChickenEaterInfo::set_totalchickennum(::google::protobuf::uint32 value) {
  set_has_totalchickennum();
  totalchickennum_ = value;
  // @@protoc_insertion_point(field_set:pb.TPubgChickenEaterInfo.TotalChickenNum)
}

// optional uint32 SeasonWinNum = 3;
inline bool TPubgChickenEaterInfo::has_seasonwinnum() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void TPubgChickenEaterInfo::set_has_seasonwinnum() {
  _has_bits_[0] |= 0x00000004u;
}
inline void TPubgChickenEaterInfo::clear_has_seasonwinnum() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void TPubgChickenEaterInfo::clear_seasonwinnum() {
  seasonwinnum_ = 0u;
  clear_has_seasonwinnum();
}
inline ::google::protobuf::uint32 TPubgChickenEaterInfo::seasonwinnum() const {
  // @@protoc_insertion_point(field_get:pb.TPubgChickenEaterInfo.SeasonWinNum)
  return seasonwinnum_;
}
inline void TPubgChickenEaterInfo::set_seasonwinnum(::google::protobuf::uint32 value) {
  set_has_seasonwinnum();
  seasonwinnum_ = value;
  // @@protoc_insertion_point(field_set:pb.TPubgChickenEaterInfo.SeasonWinNum)
}

// -------------------------------------------------------------------

// TPubgCampInfo

// optional uint32 CampId = 1;
inline bool TPubgCampInfo::has_campid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TPubgCampInfo::set_has_campid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TPubgCampInfo::clear_has_campid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TPubgCampInfo::clear_campid() {
  campid_ = 0u;
  clear_has_campid();
}
inline ::google::protobuf::uint32 TPubgCampInfo::campid() const {
  // @@protoc_insertion_point(field_get:pb.TPubgCampInfo.CampId)
  return campid_;
}
inline void TPubgCampInfo::set_campid(::google::protobuf::uint32 value) {
  set_has_campid();
  campid_ = value;
  // @@protoc_insertion_point(field_set:pb.TPubgCampInfo.CampId)
}

// optional .pb.EPubgStatus Status = 2;
inline bool TPubgCampInfo::has_status() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TPubgCampInfo::set_has_status() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TPubgCampInfo::clear_has_status() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TPubgCampInfo::clear_status() {
  status_ = 0;
  clear_has_status();
}
inline ::pb::EPubgStatus TPubgCampInfo::status() const {
  // @@protoc_insertion_point(field_get:pb.TPubgCampInfo.Status)
  return static_cast< ::pb::EPubgStatus >(status_);
}
inline void TPubgCampInfo::set_status(::pb::EPubgStatus value) {
  assert(::pb::EPubgStatus_IsValid(value));
  set_has_status();
  status_ = value;
  // @@protoc_insertion_point(field_set:pb.TPubgCampInfo.Status)
}

// optional .pb.TPubgOwnerInfo Owner = 3;
inline bool TPubgCampInfo::has_owner() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void TPubgCampInfo::set_has_owner() {
  _has_bits_[0] |= 0x00000004u;
}
inline void TPubgCampInfo::clear_has_owner() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void TPubgCampInfo::clear_owner() {
  if (owner_ != NULL) owner_->::pb::TPubgOwnerInfo::Clear();
  clear_has_owner();
}
inline const ::pb::TPubgOwnerInfo& TPubgCampInfo::owner() const {
  // @@protoc_insertion_point(field_get:pb.TPubgCampInfo.Owner)
  return owner_ != NULL ? *owner_ : *default_instance_->owner_;
}
inline ::pb::TPubgOwnerInfo* TPubgCampInfo::mutable_owner() {
  set_has_owner();
  if (owner_ == NULL) owner_ = new ::pb::TPubgOwnerInfo;
  // @@protoc_insertion_point(field_mutable:pb.TPubgCampInfo.Owner)
  return owner_;
}
inline ::pb::TPubgOwnerInfo* TPubgCampInfo::release_owner() {
  clear_has_owner();
  ::pb::TPubgOwnerInfo* temp = owner_;
  owner_ = NULL;
  return temp;
}
inline void TPubgCampInfo::set_allocated_owner(::pb::TPubgOwnerInfo* owner) {
  delete owner_;
  owner_ = owner;
  if (owner) {
    set_has_owner();
  } else {
    clear_has_owner();
  }
  // @@protoc_insertion_point(field_set_allocated:pb.TPubgCampInfo.Owner)
}

// -------------------------------------------------------------------

// TPubgCityInfo

// optional uint32 CityId = 1;
inline bool TPubgCityInfo::has_cityid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TPubgCityInfo::set_has_cityid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TPubgCityInfo::clear_has_cityid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TPubgCityInfo::clear_cityid() {
  cityid_ = 0u;
  clear_has_cityid();
}
inline ::google::protobuf::uint32 TPubgCityInfo::cityid() const {
  // @@protoc_insertion_point(field_get:pb.TPubgCityInfo.CityId)
  return cityid_;
}
inline void TPubgCityInfo::set_cityid(::google::protobuf::uint32 value) {
  set_has_cityid();
  cityid_ = value;
  // @@protoc_insertion_point(field_set:pb.TPubgCityInfo.CityId)
}

// optional .pb.EPubgStatus Status = 2;
inline bool TPubgCityInfo::has_status() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TPubgCityInfo::set_has_status() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TPubgCityInfo::clear_has_status() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TPubgCityInfo::clear_status() {
  status_ = 0;
  clear_has_status();
}
inline ::pb::EPubgStatus TPubgCityInfo::status() const {
  // @@protoc_insertion_point(field_get:pb.TPubgCityInfo.Status)
  return static_cast< ::pb::EPubgStatus >(status_);
}
inline void TPubgCityInfo::set_status(::pb::EPubgStatus value) {
  assert(::pb::EPubgStatus_IsValid(value));
  set_has_status();
  status_ = value;
  // @@protoc_insertion_point(field_set:pb.TPubgCityInfo.Status)
}

// optional uint32 OccupyNum = 3;
inline bool TPubgCityInfo::has_occupynum() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void TPubgCityInfo::set_has_occupynum() {
  _has_bits_[0] |= 0x00000004u;
}
inline void TPubgCityInfo::clear_has_occupynum() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void TPubgCityInfo::clear_occupynum() {
  occupynum_ = 0u;
  clear_has_occupynum();
}
inline ::google::protobuf::uint32 TPubgCityInfo::occupynum() const {
  // @@protoc_insertion_point(field_get:pb.TPubgCityInfo.OccupyNum)
  return occupynum_;
}
inline void TPubgCityInfo::set_occupynum(::google::protobuf::uint32 value) {
  set_has_occupynum();
  occupynum_ = value;
  // @@protoc_insertion_point(field_set:pb.TPubgCityInfo.OccupyNum)
}

// -------------------------------------------------------------------

// TPubgAreaInfo

// optional uint32 AreaId = 1;
inline bool TPubgAreaInfo::has_areaid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TPubgAreaInfo::set_has_areaid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TPubgAreaInfo::clear_has_areaid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TPubgAreaInfo::clear_areaid() {
  areaid_ = 0u;
  clear_has_areaid();
}
inline ::google::protobuf::uint32 TPubgAreaInfo::areaid() const {
  // @@protoc_insertion_point(field_get:pb.TPubgAreaInfo.AreaId)
  return areaid_;
}
inline void TPubgAreaInfo::set_areaid(::google::protobuf::uint32 value) {
  set_has_areaid();
  areaid_ = value;
  // @@protoc_insertion_point(field_set:pb.TPubgAreaInfo.AreaId)
}

// optional .pb.EPubgStatus Status = 2;
inline bool TPubgAreaInfo::has_status() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TPubgAreaInfo::set_has_status() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TPubgAreaInfo::clear_has_status() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TPubgAreaInfo::clear_status() {
  status_ = 0;
  clear_has_status();
}
inline ::pb::EPubgStatus TPubgAreaInfo::status() const {
  // @@protoc_insertion_point(field_get:pb.TPubgAreaInfo.Status)
  return static_cast< ::pb::EPubgStatus >(status_);
}
inline void TPubgAreaInfo::set_status(::pb::EPubgStatus value) {
  assert(::pb::EPubgStatus_IsValid(value));
  set_has_status();
  status_ = value;
  // @@protoc_insertion_point(field_set:pb.TPubgAreaInfo.Status)
}

// repeated .pb.TPubgCityInfo ArrCity = 3;
inline int TPubgAreaInfo::arrcity_size() const {
  return arrcity_.size();
}
inline void TPubgAreaInfo::clear_arrcity() {
  arrcity_.Clear();
}
inline const ::pb::TPubgCityInfo& TPubgAreaInfo::arrcity(int index) const {
  // @@protoc_insertion_point(field_get:pb.TPubgAreaInfo.ArrCity)
  return arrcity_.Get(index);
}
inline ::pb::TPubgCityInfo* TPubgAreaInfo::mutable_arrcity(int index) {
  // @@protoc_insertion_point(field_mutable:pb.TPubgAreaInfo.ArrCity)
  return arrcity_.Mutable(index);
}
inline ::pb::TPubgCityInfo* TPubgAreaInfo::add_arrcity() {
  // @@protoc_insertion_point(field_add:pb.TPubgAreaInfo.ArrCity)
  return arrcity_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::TPubgCityInfo >&
TPubgAreaInfo::arrcity() const {
  // @@protoc_insertion_point(field_list:pb.TPubgAreaInfo.ArrCity)
  return arrcity_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb::TPubgCityInfo >*
TPubgAreaInfo::mutable_arrcity() {
  // @@protoc_insertion_point(field_mutable_list:pb.TPubgAreaInfo.ArrCity)
  return &arrcity_;
}

// -------------------------------------------------------------------

// TPubgFieldInfo

// optional string FieldId = 1;
inline bool TPubgFieldInfo::has_fieldid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TPubgFieldInfo::set_has_fieldid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TPubgFieldInfo::clear_has_fieldid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TPubgFieldInfo::clear_fieldid() {
  if (fieldid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    fieldid_->clear();
  }
  clear_has_fieldid();
}
inline const ::std::string& TPubgFieldInfo::fieldid() const {
  // @@protoc_insertion_point(field_get:pb.TPubgFieldInfo.FieldId)
  return *fieldid_;
}
inline void TPubgFieldInfo::set_fieldid(const ::std::string& value) {
  set_has_fieldid();
  if (fieldid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    fieldid_ = new ::std::string;
  }
  fieldid_->assign(value);
  // @@protoc_insertion_point(field_set:pb.TPubgFieldInfo.FieldId)
}
inline void TPubgFieldInfo::set_fieldid(const char* value) {
  set_has_fieldid();
  if (fieldid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    fieldid_ = new ::std::string;
  }
  fieldid_->assign(value);
  // @@protoc_insertion_point(field_set_char:pb.TPubgFieldInfo.FieldId)
}
inline void TPubgFieldInfo::set_fieldid(const char* value, size_t size) {
  set_has_fieldid();
  if (fieldid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    fieldid_ = new ::std::string;
  }
  fieldid_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:pb.TPubgFieldInfo.FieldId)
}
inline ::std::string* TPubgFieldInfo::mutable_fieldid() {
  set_has_fieldid();
  if (fieldid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    fieldid_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:pb.TPubgFieldInfo.FieldId)
  return fieldid_;
}
inline ::std::string* TPubgFieldInfo::release_fieldid() {
  clear_has_fieldid();
  if (fieldid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = fieldid_;
    fieldid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void TPubgFieldInfo::set_allocated_fieldid(::std::string* fieldid) {
  if (fieldid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete fieldid_;
  }
  if (fieldid) {
    set_has_fieldid();
    fieldid_ = fieldid;
  } else {
    clear_has_fieldid();
    fieldid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:pb.TPubgFieldInfo.FieldId)
}

// optional .pb.EPubgFieldType FieldType = 2;
inline bool TPubgFieldInfo::has_fieldtype() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TPubgFieldInfo::set_has_fieldtype() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TPubgFieldInfo::clear_has_fieldtype() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TPubgFieldInfo::clear_fieldtype() {
  fieldtype_ = 0;
  clear_has_fieldtype();
}
inline ::pb::EPubgFieldType TPubgFieldInfo::fieldtype() const {
  // @@protoc_insertion_point(field_get:pb.TPubgFieldInfo.FieldType)
  return static_cast< ::pb::EPubgFieldType >(fieldtype_);
}
inline void TPubgFieldInfo::set_fieldtype(::pb::EPubgFieldType value) {
  assert(::pb::EPubgFieldType_IsValid(value));
  set_has_fieldtype();
  fieldtype_ = value;
  // @@protoc_insertion_point(field_set:pb.TPubgFieldInfo.FieldType)
}

// repeated .pb.TPubgAreaInfo ArrArea = 3;
inline int TPubgFieldInfo::arrarea_size() const {
  return arrarea_.size();
}
inline void TPubgFieldInfo::clear_arrarea() {
  arrarea_.Clear();
}
inline const ::pb::TPubgAreaInfo& TPubgFieldInfo::arrarea(int index) const {
  // @@protoc_insertion_point(field_get:pb.TPubgFieldInfo.ArrArea)
  return arrarea_.Get(index);
}
inline ::pb::TPubgAreaInfo* TPubgFieldInfo::mutable_arrarea(int index) {
  // @@protoc_insertion_point(field_mutable:pb.TPubgFieldInfo.ArrArea)
  return arrarea_.Mutable(index);
}
inline ::pb::TPubgAreaInfo* TPubgFieldInfo::add_arrarea() {
  // @@protoc_insertion_point(field_add:pb.TPubgFieldInfo.ArrArea)
  return arrarea_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::TPubgAreaInfo >&
TPubgFieldInfo::arrarea() const {
  // @@protoc_insertion_point(field_list:pb.TPubgFieldInfo.ArrArea)
  return arrarea_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb::TPubgAreaInfo >*
TPubgFieldInfo::mutable_arrarea() {
  // @@protoc_insertion_point(field_mutable_list:pb.TPubgFieldInfo.ArrArea)
  return &arrarea_;
}

// -------------------------------------------------------------------

// TPubgProcessInfo

// optional uint32 Round = 1;
inline bool TPubgProcessInfo::has_round() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TPubgProcessInfo::set_has_round() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TPubgProcessInfo::clear_has_round() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TPubgProcessInfo::clear_round() {
  round_ = 0u;
  clear_has_round();
}
inline ::google::protobuf::uint32 TPubgProcessInfo::round() const {
  // @@protoc_insertion_point(field_get:pb.TPubgProcessInfo.Round)
  return round_;
}
inline void TPubgProcessInfo::set_round(::google::protobuf::uint32 value) {
  set_has_round();
  round_ = value;
  // @@protoc_insertion_point(field_set:pb.TPubgProcessInfo.Round)
}

// optional .pb.EPubgStage Stage = 2;
inline bool TPubgProcessInfo::has_stage() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TPubgProcessInfo::set_has_stage() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TPubgProcessInfo::clear_has_stage() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TPubgProcessInfo::clear_stage() {
  stage_ = 0;
  clear_has_stage();
}
inline ::pb::EPubgStage TPubgProcessInfo::stage() const {
  // @@protoc_insertion_point(field_get:pb.TPubgProcessInfo.Stage)
  return static_cast< ::pb::EPubgStage >(stage_);
}
inline void TPubgProcessInfo::set_stage(::pb::EPubgStage value) {
  assert(::pb::EPubgStage_IsValid(value));
  set_has_stage();
  stage_ = value;
  // @@protoc_insertion_point(field_set:pb.TPubgProcessInfo.Stage)
}

// optional uint64 BegTime = 3;
inline bool TPubgProcessInfo::has_begtime() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void TPubgProcessInfo::set_has_begtime() {
  _has_bits_[0] |= 0x00000004u;
}
inline void TPubgProcessInfo::clear_has_begtime() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void TPubgProcessInfo::clear_begtime() {
  begtime_ = GOOGLE_ULONGLONG(0);
  clear_has_begtime();
}
inline ::google::protobuf::uint64 TPubgProcessInfo::begtime() const {
  // @@protoc_insertion_point(field_get:pb.TPubgProcessInfo.BegTime)
  return begtime_;
}
inline void TPubgProcessInfo::set_begtime(::google::protobuf::uint64 value) {
  set_has_begtime();
  begtime_ = value;
  // @@protoc_insertion_point(field_set:pb.TPubgProcessInfo.BegTime)
}

// optional uint64 EndTime = 4;
inline bool TPubgProcessInfo::has_endtime() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void TPubgProcessInfo::set_has_endtime() {
  _has_bits_[0] |= 0x00000008u;
}
inline void TPubgProcessInfo::clear_has_endtime() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void TPubgProcessInfo::clear_endtime() {
  endtime_ = GOOGLE_ULONGLONG(0);
  clear_has_endtime();
}
inline ::google::protobuf::uint64 TPubgProcessInfo::endtime() const {
  // @@protoc_insertion_point(field_get:pb.TPubgProcessInfo.EndTime)
  return endtime_;
}
inline void TPubgProcessInfo::set_endtime(::google::protobuf::uint64 value) {
  set_has_endtime();
  endtime_ = value;
  // @@protoc_insertion_point(field_set:pb.TPubgProcessInfo.EndTime)
}

// -------------------------------------------------------------------

// TPubgPosInfo

// optional uint32 Pos = 1;
inline bool TPubgPosInfo::has_pos() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TPubgPosInfo::set_has_pos() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TPubgPosInfo::clear_has_pos() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TPubgPosInfo::clear_pos() {
  pos_ = 0u;
  clear_has_pos();
}
inline ::google::protobuf::uint32 TPubgPosInfo::pos() const {
  // @@protoc_insertion_point(field_get:pb.TPubgPosInfo.Pos)
  return pos_;
}
inline void TPubgPosInfo::set_pos(::google::protobuf::uint32 value) {
  set_has_pos();
  pos_ = value;
  // @@protoc_insertion_point(field_set:pb.TPubgPosInfo.Pos)
}

// optional uint32 Hid = 2;
inline bool TPubgPosInfo::has_hid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TPubgPosInfo::set_has_hid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TPubgPosInfo::clear_has_hid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TPubgPosInfo::clear_hid() {
  hid_ = 0u;
  clear_has_hid();
}
inline ::google::protobuf::uint32 TPubgPosInfo::hid() const {
  // @@protoc_insertion_point(field_get:pb.TPubgPosInfo.Hid)
  return hid_;
}
inline void TPubgPosInfo::set_hid(::google::protobuf::uint32 value) {
  set_has_hid();
  hid_ = value;
  // @@protoc_insertion_point(field_set:pb.TPubgPosInfo.Hid)
}

// -------------------------------------------------------------------

// TPubgFmtInfo

// optional uint32 FmtId = 1;
inline bool TPubgFmtInfo::has_fmtid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TPubgFmtInfo::set_has_fmtid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TPubgFmtInfo::clear_has_fmtid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TPubgFmtInfo::clear_fmtid() {
  fmtid_ = 0u;
  clear_has_fmtid();
}
inline ::google::protobuf::uint32 TPubgFmtInfo::fmtid() const {
  // @@protoc_insertion_point(field_get:pb.TPubgFmtInfo.FmtId)
  return fmtid_;
}
inline void TPubgFmtInfo::set_fmtid(::google::protobuf::uint32 value) {
  set_has_fmtid();
  fmtid_ = value;
  // @@protoc_insertion_point(field_set:pb.TPubgFmtInfo.FmtId)
}

// repeated .pb.TPubgPosInfo ArrPos = 2;
inline int TPubgFmtInfo::arrpos_size() const {
  return arrpos_.size();
}
inline void TPubgFmtInfo::clear_arrpos() {
  arrpos_.Clear();
}
inline const ::pb::TPubgPosInfo& TPubgFmtInfo::arrpos(int index) const {
  // @@protoc_insertion_point(field_get:pb.TPubgFmtInfo.ArrPos)
  return arrpos_.Get(index);
}
inline ::pb::TPubgPosInfo* TPubgFmtInfo::mutable_arrpos(int index) {
  // @@protoc_insertion_point(field_mutable:pb.TPubgFmtInfo.ArrPos)
  return arrpos_.Mutable(index);
}
inline ::pb::TPubgPosInfo* TPubgFmtInfo::add_arrpos() {
  // @@protoc_insertion_point(field_add:pb.TPubgFmtInfo.ArrPos)
  return arrpos_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::TPubgPosInfo >&
TPubgFmtInfo::arrpos() const {
  // @@protoc_insertion_point(field_list:pb.TPubgFmtInfo.ArrPos)
  return arrpos_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb::TPubgPosInfo >*
TPubgFmtInfo::mutable_arrpos() {
  // @@protoc_insertion_point(field_mutable_list:pb.TPubgFmtInfo.ArrPos)
  return &arrpos_;
}

// -------------------------------------------------------------------

// TPubgFmtDetail

// optional uint32 FmtId = 1;
inline bool TPubgFmtDetail::has_fmtid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TPubgFmtDetail::set_has_fmtid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TPubgFmtDetail::clear_has_fmtid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TPubgFmtDetail::clear_fmtid() {
  fmtid_ = 0u;
  clear_has_fmtid();
}
inline ::google::protobuf::uint32 TPubgFmtDetail::fmtid() const {
  // @@protoc_insertion_point(field_get:pb.TPubgFmtDetail.FmtId)
  return fmtid_;
}
inline void TPubgFmtDetail::set_fmtid(::google::protobuf::uint32 value) {
  set_has_fmtid();
  fmtid_ = value;
  // @@protoc_insertion_point(field_set:pb.TPubgFmtDetail.FmtId)
}

// repeated .pb.TUnitInfo UnitArr = 2;
inline int TPubgFmtDetail::unitarr_size() const {
  return unitarr_.size();
}
inline void TPubgFmtDetail::clear_unitarr() {
  unitarr_.Clear();
}
inline const ::pb::TUnitInfo& TPubgFmtDetail::unitarr(int index) const {
  // @@protoc_insertion_point(field_get:pb.TPubgFmtDetail.UnitArr)
  return unitarr_.Get(index);
}
inline ::pb::TUnitInfo* TPubgFmtDetail::mutable_unitarr(int index) {
  // @@protoc_insertion_point(field_mutable:pb.TPubgFmtDetail.UnitArr)
  return unitarr_.Mutable(index);
}
inline ::pb::TUnitInfo* TPubgFmtDetail::add_unitarr() {
  // @@protoc_insertion_point(field_add:pb.TPubgFmtDetail.UnitArr)
  return unitarr_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::TUnitInfo >&
TPubgFmtDetail::unitarr() const {
  // @@protoc_insertion_point(field_list:pb.TPubgFmtDetail.UnitArr)
  return unitarr_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb::TUnitInfo >*
TPubgFmtDetail::mutable_unitarr() {
  // @@protoc_insertion_point(field_mutable_list:pb.TPubgFmtDetail.UnitArr)
  return &unitarr_;
}

// optional uint64 FightForce = 3;
inline bool TPubgFmtDetail::has_fightforce() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void TPubgFmtDetail::set_has_fightforce() {
  _has_bits_[0] |= 0x00000004u;
}
inline void TPubgFmtDetail::clear_has_fightforce() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void TPubgFmtDetail::clear_fightforce() {
  fightforce_ = GOOGLE_ULONGLONG(0);
  clear_has_fightforce();
}
inline ::google::protobuf::uint64 TPubgFmtDetail::fightforce() const {
  // @@protoc_insertion_point(field_get:pb.TPubgFmtDetail.FightForce)
  return fightforce_;
}
inline void TPubgFmtDetail::set_fightforce(::google::protobuf::uint64 value) {
  set_has_fightforce();
  fightforce_ = value;
  // @@protoc_insertion_point(field_set:pb.TPubgFmtDetail.FightForce)
}

// -------------------------------------------------------------------

// TPubgBattleSimple

// optional uint32 FmtId = 1;
inline bool TPubgBattleSimple::has_fmtid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TPubgBattleSimple::set_has_fmtid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TPubgBattleSimple::clear_has_fmtid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TPubgBattleSimple::clear_fmtid() {
  fmtid_ = 0u;
  clear_has_fmtid();
}
inline ::google::protobuf::uint32 TPubgBattleSimple::fmtid() const {
  // @@protoc_insertion_point(field_get:pb.TPubgBattleSimple.FmtId)
  return fmtid_;
}
inline void TPubgBattleSimple::set_fmtid(::google::protobuf::uint32 value) {
  set_has_fmtid();
  fmtid_ = value;
  // @@protoc_insertion_point(field_set:pb.TPubgBattleSimple.FmtId)
}

// optional bool Result = 2;
inline bool TPubgBattleSimple::has_result() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TPubgBattleSimple::set_has_result() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TPubgBattleSimple::clear_has_result() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TPubgBattleSimple::clear_result() {
  result_ = false;
  clear_has_result();
}
inline bool TPubgBattleSimple::result() const {
  // @@protoc_insertion_point(field_get:pb.TPubgBattleSimple.Result)
  return result_;
}
inline void TPubgBattleSimple::set_result(bool value) {
  set_has_result();
  result_ = value;
  // @@protoc_insertion_point(field_set:pb.TPubgBattleSimple.Result)
}

// optional uint64 Rid = 3;
inline bool TPubgBattleSimple::has_rid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void TPubgBattleSimple::set_has_rid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void TPubgBattleSimple::clear_has_rid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void TPubgBattleSimple::clear_rid() {
  rid_ = GOOGLE_ULONGLONG(0);
  clear_has_rid();
}
inline ::google::protobuf::uint64 TPubgBattleSimple::rid() const {
  // @@protoc_insertion_point(field_get:pb.TPubgBattleSimple.Rid)
  return rid_;
}
inline void TPubgBattleSimple::set_rid(::google::protobuf::uint64 value) {
  set_has_rid();
  rid_ = value;
  // @@protoc_insertion_point(field_set:pb.TPubgBattleSimple.Rid)
}

// -------------------------------------------------------------------

// TPubgBattleDetail

// optional uint32 FmtId = 1;
inline bool TPubgBattleDetail::has_fmtid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TPubgBattleDetail::set_has_fmtid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TPubgBattleDetail::clear_has_fmtid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TPubgBattleDetail::clear_fmtid() {
  fmtid_ = 0u;
  clear_has_fmtid();
}
inline ::google::protobuf::uint32 TPubgBattleDetail::fmtid() const {
  // @@protoc_insertion_point(field_get:pb.TPubgBattleDetail.FmtId)
  return fmtid_;
}
inline void TPubgBattleDetail::set_fmtid(::google::protobuf::uint32 value) {
  set_has_fmtid();
  fmtid_ = value;
  // @@protoc_insertion_point(field_set:pb.TPubgBattleDetail.FmtId)
}

// optional bool Result = 2;
inline bool TPubgBattleDetail::has_result() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TPubgBattleDetail::set_has_result() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TPubgBattleDetail::clear_has_result() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TPubgBattleDetail::clear_result() {
  result_ = false;
  clear_has_result();
}
inline bool TPubgBattleDetail::result() const {
  // @@protoc_insertion_point(field_get:pb.TPubgBattleDetail.Result)
  return result_;
}
inline void TPubgBattleDetail::set_result(bool value) {
  set_has_result();
  result_ = value;
  // @@protoc_insertion_point(field_set:pb.TPubgBattleDetail.Result)
}

// optional uint64 Rid = 3;
inline bool TPubgBattleDetail::has_rid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void TPubgBattleDetail::set_has_rid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void TPubgBattleDetail::clear_has_rid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void TPubgBattleDetail::clear_rid() {
  rid_ = GOOGLE_ULONGLONG(0);
  clear_has_rid();
}
inline ::google::protobuf::uint64 TPubgBattleDetail::rid() const {
  // @@protoc_insertion_point(field_get:pb.TPubgBattleDetail.Rid)
  return rid_;
}
inline void TPubgBattleDetail::set_rid(::google::protobuf::uint64 value) {
  set_has_rid();
  rid_ = value;
  // @@protoc_insertion_point(field_set:pb.TPubgBattleDetail.Rid)
}

// optional bytes BattleResult = 4;
inline bool TPubgBattleDetail::has_battleresult() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void TPubgBattleDetail::set_has_battleresult() {
  _has_bits_[0] |= 0x00000008u;
}
inline void TPubgBattleDetail::clear_has_battleresult() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void TPubgBattleDetail::clear_battleresult() {
  if (battleresult_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    battleresult_->clear();
  }
  clear_has_battleresult();
}
inline const ::std::string& TPubgBattleDetail::battleresult() const {
  // @@protoc_insertion_point(field_get:pb.TPubgBattleDetail.BattleResult)
  return *battleresult_;
}
inline void TPubgBattleDetail::set_battleresult(const ::std::string& value) {
  set_has_battleresult();
  if (battleresult_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    battleresult_ = new ::std::string;
  }
  battleresult_->assign(value);
  // @@protoc_insertion_point(field_set:pb.TPubgBattleDetail.BattleResult)
}
inline void TPubgBattleDetail::set_battleresult(const char* value) {
  set_has_battleresult();
  if (battleresult_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    battleresult_ = new ::std::string;
  }
  battleresult_->assign(value);
  // @@protoc_insertion_point(field_set_char:pb.TPubgBattleDetail.BattleResult)
}
inline void TPubgBattleDetail::set_battleresult(const void* value, size_t size) {
  set_has_battleresult();
  if (battleresult_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    battleresult_ = new ::std::string;
  }
  battleresult_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:pb.TPubgBattleDetail.BattleResult)
}
inline ::std::string* TPubgBattleDetail::mutable_battleresult() {
  set_has_battleresult();
  if (battleresult_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    battleresult_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:pb.TPubgBattleDetail.BattleResult)
  return battleresult_;
}
inline ::std::string* TPubgBattleDetail::release_battleresult() {
  clear_has_battleresult();
  if (battleresult_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = battleresult_;
    battleresult_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void TPubgBattleDetail::set_allocated_battleresult(::std::string* battleresult) {
  if (battleresult_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete battleresult_;
  }
  if (battleresult) {
    set_has_battleresult();
    battleresult_ = battleresult;
  } else {
    clear_has_battleresult();
    battleresult_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:pb.TPubgBattleDetail.BattleResult)
}

// -------------------------------------------------------------------

// TPubgBattleRecord

// optional .pb.TPubgLocation AtkLocation = 1;
inline bool TPubgBattleRecord::has_atklocation() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TPubgBattleRecord::set_has_atklocation() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TPubgBattleRecord::clear_has_atklocation() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TPubgBattleRecord::clear_atklocation() {
  if (atklocation_ != NULL) atklocation_->::pb::TPubgLocation::Clear();
  clear_has_atklocation();
}
inline const ::pb::TPubgLocation& TPubgBattleRecord::atklocation() const {
  // @@protoc_insertion_point(field_get:pb.TPubgBattleRecord.AtkLocation)
  return atklocation_ != NULL ? *atklocation_ : *default_instance_->atklocation_;
}
inline ::pb::TPubgLocation* TPubgBattleRecord::mutable_atklocation() {
  set_has_atklocation();
  if (atklocation_ == NULL) atklocation_ = new ::pb::TPubgLocation;
  // @@protoc_insertion_point(field_mutable:pb.TPubgBattleRecord.AtkLocation)
  return atklocation_;
}
inline ::pb::TPubgLocation* TPubgBattleRecord::release_atklocation() {
  clear_has_atklocation();
  ::pb::TPubgLocation* temp = atklocation_;
  atklocation_ = NULL;
  return temp;
}
inline void TPubgBattleRecord::set_allocated_atklocation(::pb::TPubgLocation* atklocation) {
  delete atklocation_;
  atklocation_ = atklocation;
  if (atklocation) {
    set_has_atklocation();
  } else {
    clear_has_atklocation();
  }
  // @@protoc_insertion_point(field_set_allocated:pb.TPubgBattleRecord.AtkLocation)
}

// optional uint64 AtkOwnerId = 2;
inline bool TPubgBattleRecord::has_atkownerid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TPubgBattleRecord::set_has_atkownerid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TPubgBattleRecord::clear_has_atkownerid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TPubgBattleRecord::clear_atkownerid() {
  atkownerid_ = GOOGLE_ULONGLONG(0);
  clear_has_atkownerid();
}
inline ::google::protobuf::uint64 TPubgBattleRecord::atkownerid() const {
  // @@protoc_insertion_point(field_get:pb.TPubgBattleRecord.AtkOwnerId)
  return atkownerid_;
}
inline void TPubgBattleRecord::set_atkownerid(::google::protobuf::uint64 value) {
  set_has_atkownerid();
  atkownerid_ = value;
  // @@protoc_insertion_point(field_set:pb.TPubgBattleRecord.AtkOwnerId)
}

// optional string AtkServerId = 3;
inline bool TPubgBattleRecord::has_atkserverid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void TPubgBattleRecord::set_has_atkserverid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void TPubgBattleRecord::clear_has_atkserverid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void TPubgBattleRecord::clear_atkserverid() {
  if (atkserverid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    atkserverid_->clear();
  }
  clear_has_atkserverid();
}
inline const ::std::string& TPubgBattleRecord::atkserverid() const {
  // @@protoc_insertion_point(field_get:pb.TPubgBattleRecord.AtkServerId)
  return *atkserverid_;
}
inline void TPubgBattleRecord::set_atkserverid(const ::std::string& value) {
  set_has_atkserverid();
  if (atkserverid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    atkserverid_ = new ::std::string;
  }
  atkserverid_->assign(value);
  // @@protoc_insertion_point(field_set:pb.TPubgBattleRecord.AtkServerId)
}
inline void TPubgBattleRecord::set_atkserverid(const char* value) {
  set_has_atkserverid();
  if (atkserverid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    atkserverid_ = new ::std::string;
  }
  atkserverid_->assign(value);
  // @@protoc_insertion_point(field_set_char:pb.TPubgBattleRecord.AtkServerId)
}
inline void TPubgBattleRecord::set_atkserverid(const char* value, size_t size) {
  set_has_atkserverid();
  if (atkserverid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    atkserverid_ = new ::std::string;
  }
  atkserverid_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:pb.TPubgBattleRecord.AtkServerId)
}
inline ::std::string* TPubgBattleRecord::mutable_atkserverid() {
  set_has_atkserverid();
  if (atkserverid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    atkserverid_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:pb.TPubgBattleRecord.AtkServerId)
  return atkserverid_;
}
inline ::std::string* TPubgBattleRecord::release_atkserverid() {
  clear_has_atkserverid();
  if (atkserverid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = atkserverid_;
    atkserverid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void TPubgBattleRecord::set_allocated_atkserverid(::std::string* atkserverid) {
  if (atkserverid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete atkserverid_;
  }
  if (atkserverid) {
    set_has_atkserverid();
    atkserverid_ = atkserverid;
  } else {
    clear_has_atkserverid();
    atkserverid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:pb.TPubgBattleRecord.AtkServerId)
}

// optional string AtkUname = 4;
inline bool TPubgBattleRecord::has_atkuname() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void TPubgBattleRecord::set_has_atkuname() {
  _has_bits_[0] |= 0x00000008u;
}
inline void TPubgBattleRecord::clear_has_atkuname() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void TPubgBattleRecord::clear_atkuname() {
  if (atkuname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    atkuname_->clear();
  }
  clear_has_atkuname();
}
inline const ::std::string& TPubgBattleRecord::atkuname() const {
  // @@protoc_insertion_point(field_get:pb.TPubgBattleRecord.AtkUname)
  return *atkuname_;
}
inline void TPubgBattleRecord::set_atkuname(const ::std::string& value) {
  set_has_atkuname();
  if (atkuname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    atkuname_ = new ::std::string;
  }
  atkuname_->assign(value);
  // @@protoc_insertion_point(field_set:pb.TPubgBattleRecord.AtkUname)
}
inline void TPubgBattleRecord::set_atkuname(const char* value) {
  set_has_atkuname();
  if (atkuname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    atkuname_ = new ::std::string;
  }
  atkuname_->assign(value);
  // @@protoc_insertion_point(field_set_char:pb.TPubgBattleRecord.AtkUname)
}
inline void TPubgBattleRecord::set_atkuname(const char* value, size_t size) {
  set_has_atkuname();
  if (atkuname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    atkuname_ = new ::std::string;
  }
  atkuname_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:pb.TPubgBattleRecord.AtkUname)
}
inline ::std::string* TPubgBattleRecord::mutable_atkuname() {
  set_has_atkuname();
  if (atkuname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    atkuname_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:pb.TPubgBattleRecord.AtkUname)
  return atkuname_;
}
inline ::std::string* TPubgBattleRecord::release_atkuname() {
  clear_has_atkuname();
  if (atkuname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = atkuname_;
    atkuname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void TPubgBattleRecord::set_allocated_atkuname(::std::string* atkuname) {
  if (atkuname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete atkuname_;
  }
  if (atkuname) {
    set_has_atkuname();
    atkuname_ = atkuname;
  } else {
    clear_has_atkuname();
    atkuname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:pb.TPubgBattleRecord.AtkUname)
}

// optional uint32 AtkHtid = 5;
inline bool TPubgBattleRecord::has_atkhtid() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void TPubgBattleRecord::set_has_atkhtid() {
  _has_bits_[0] |= 0x00000010u;
}
inline void TPubgBattleRecord::clear_has_atkhtid() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void TPubgBattleRecord::clear_atkhtid() {
  atkhtid_ = 0u;
  clear_has_atkhtid();
}
inline ::google::protobuf::uint32 TPubgBattleRecord::atkhtid() const {
  // @@protoc_insertion_point(field_get:pb.TPubgBattleRecord.AtkHtid)
  return atkhtid_;
}
inline void TPubgBattleRecord::set_atkhtid(::google::protobuf::uint32 value) {
  set_has_atkhtid();
  atkhtid_ = value;
  // @@protoc_insertion_point(field_set:pb.TPubgBattleRecord.AtkHtid)
}

// optional .pb.TPubgLocation DefLocation = 6;
inline bool TPubgBattleRecord::has_deflocation() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void TPubgBattleRecord::set_has_deflocation() {
  _has_bits_[0] |= 0x00000020u;
}
inline void TPubgBattleRecord::clear_has_deflocation() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void TPubgBattleRecord::clear_deflocation() {
  if (deflocation_ != NULL) deflocation_->::pb::TPubgLocation::Clear();
  clear_has_deflocation();
}
inline const ::pb::TPubgLocation& TPubgBattleRecord::deflocation() const {
  // @@protoc_insertion_point(field_get:pb.TPubgBattleRecord.DefLocation)
  return deflocation_ != NULL ? *deflocation_ : *default_instance_->deflocation_;
}
inline ::pb::TPubgLocation* TPubgBattleRecord::mutable_deflocation() {
  set_has_deflocation();
  if (deflocation_ == NULL) deflocation_ = new ::pb::TPubgLocation;
  // @@protoc_insertion_point(field_mutable:pb.TPubgBattleRecord.DefLocation)
  return deflocation_;
}
inline ::pb::TPubgLocation* TPubgBattleRecord::release_deflocation() {
  clear_has_deflocation();
  ::pb::TPubgLocation* temp = deflocation_;
  deflocation_ = NULL;
  return temp;
}
inline void TPubgBattleRecord::set_allocated_deflocation(::pb::TPubgLocation* deflocation) {
  delete deflocation_;
  deflocation_ = deflocation;
  if (deflocation) {
    set_has_deflocation();
  } else {
    clear_has_deflocation();
  }
  // @@protoc_insertion_point(field_set_allocated:pb.TPubgBattleRecord.DefLocation)
}

// optional uint64 DefOwnerId = 7;
inline bool TPubgBattleRecord::has_defownerid() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void TPubgBattleRecord::set_has_defownerid() {
  _has_bits_[0] |= 0x00000040u;
}
inline void TPubgBattleRecord::clear_has_defownerid() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void TPubgBattleRecord::clear_defownerid() {
  defownerid_ = GOOGLE_ULONGLONG(0);
  clear_has_defownerid();
}
inline ::google::protobuf::uint64 TPubgBattleRecord::defownerid() const {
  // @@protoc_insertion_point(field_get:pb.TPubgBattleRecord.DefOwnerId)
  return defownerid_;
}
inline void TPubgBattleRecord::set_defownerid(::google::protobuf::uint64 value) {
  set_has_defownerid();
  defownerid_ = value;
  // @@protoc_insertion_point(field_set:pb.TPubgBattleRecord.DefOwnerId)
}

// optional string DefServerId = 8;
inline bool TPubgBattleRecord::has_defserverid() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void TPubgBattleRecord::set_has_defserverid() {
  _has_bits_[0] |= 0x00000080u;
}
inline void TPubgBattleRecord::clear_has_defserverid() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void TPubgBattleRecord::clear_defserverid() {
  if (defserverid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    defserverid_->clear();
  }
  clear_has_defserverid();
}
inline const ::std::string& TPubgBattleRecord::defserverid() const {
  // @@protoc_insertion_point(field_get:pb.TPubgBattleRecord.DefServerId)
  return *defserverid_;
}
inline void TPubgBattleRecord::set_defserverid(const ::std::string& value) {
  set_has_defserverid();
  if (defserverid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    defserverid_ = new ::std::string;
  }
  defserverid_->assign(value);
  // @@protoc_insertion_point(field_set:pb.TPubgBattleRecord.DefServerId)
}
inline void TPubgBattleRecord::set_defserverid(const char* value) {
  set_has_defserverid();
  if (defserverid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    defserverid_ = new ::std::string;
  }
  defserverid_->assign(value);
  // @@protoc_insertion_point(field_set_char:pb.TPubgBattleRecord.DefServerId)
}
inline void TPubgBattleRecord::set_defserverid(const char* value, size_t size) {
  set_has_defserverid();
  if (defserverid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    defserverid_ = new ::std::string;
  }
  defserverid_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:pb.TPubgBattleRecord.DefServerId)
}
inline ::std::string* TPubgBattleRecord::mutable_defserverid() {
  set_has_defserverid();
  if (defserverid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    defserverid_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:pb.TPubgBattleRecord.DefServerId)
  return defserverid_;
}
inline ::std::string* TPubgBattleRecord::release_defserverid() {
  clear_has_defserverid();
  if (defserverid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = defserverid_;
    defserverid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void TPubgBattleRecord::set_allocated_defserverid(::std::string* defserverid) {
  if (defserverid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete defserverid_;
  }
  if (defserverid) {
    set_has_defserverid();
    defserverid_ = defserverid;
  } else {
    clear_has_defserverid();
    defserverid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:pb.TPubgBattleRecord.DefServerId)
}

// optional string DefUname = 9;
inline bool TPubgBattleRecord::has_defuname() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void TPubgBattleRecord::set_has_defuname() {
  _has_bits_[0] |= 0x00000100u;
}
inline void TPubgBattleRecord::clear_has_defuname() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void TPubgBattleRecord::clear_defuname() {
  if (defuname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    defuname_->clear();
  }
  clear_has_defuname();
}
inline const ::std::string& TPubgBattleRecord::defuname() const {
  // @@protoc_insertion_point(field_get:pb.TPubgBattleRecord.DefUname)
  return *defuname_;
}
inline void TPubgBattleRecord::set_defuname(const ::std::string& value) {
  set_has_defuname();
  if (defuname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    defuname_ = new ::std::string;
  }
  defuname_->assign(value);
  // @@protoc_insertion_point(field_set:pb.TPubgBattleRecord.DefUname)
}
inline void TPubgBattleRecord::set_defuname(const char* value) {
  set_has_defuname();
  if (defuname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    defuname_ = new ::std::string;
  }
  defuname_->assign(value);
  // @@protoc_insertion_point(field_set_char:pb.TPubgBattleRecord.DefUname)
}
inline void TPubgBattleRecord::set_defuname(const char* value, size_t size) {
  set_has_defuname();
  if (defuname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    defuname_ = new ::std::string;
  }
  defuname_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:pb.TPubgBattleRecord.DefUname)
}
inline ::std::string* TPubgBattleRecord::mutable_defuname() {
  set_has_defuname();
  if (defuname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    defuname_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:pb.TPubgBattleRecord.DefUname)
  return defuname_;
}
inline ::std::string* TPubgBattleRecord::release_defuname() {
  clear_has_defuname();
  if (defuname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = defuname_;
    defuname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void TPubgBattleRecord::set_allocated_defuname(::std::string* defuname) {
  if (defuname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete defuname_;
  }
  if (defuname) {
    set_has_defuname();
    defuname_ = defuname;
  } else {
    clear_has_defuname();
    defuname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:pb.TPubgBattleRecord.DefUname)
}

// optional uint32 DefHtid = 10;
inline bool TPubgBattleRecord::has_defhtid() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void TPubgBattleRecord::set_has_defhtid() {
  _has_bits_[0] |= 0x00000200u;
}
inline void TPubgBattleRecord::clear_has_defhtid() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void TPubgBattleRecord::clear_defhtid() {
  defhtid_ = 0u;
  clear_has_defhtid();
}
inline ::google::protobuf::uint32 TPubgBattleRecord::defhtid() const {
  // @@protoc_insertion_point(field_get:pb.TPubgBattleRecord.DefHtid)
  return defhtid_;
}
inline void TPubgBattleRecord::set_defhtid(::google::protobuf::uint32 value) {
  set_has_defhtid();
  defhtid_ = value;
  // @@protoc_insertion_point(field_set:pb.TPubgBattleRecord.DefHtid)
}

// optional uint64 RecordTime = 11;
inline bool TPubgBattleRecord::has_recordtime() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void TPubgBattleRecord::set_has_recordtime() {
  _has_bits_[0] |= 0x00000400u;
}
inline void TPubgBattleRecord::clear_has_recordtime() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void TPubgBattleRecord::clear_recordtime() {
  recordtime_ = GOOGLE_ULONGLONG(0);
  clear_has_recordtime();
}
inline ::google::protobuf::uint64 TPubgBattleRecord::recordtime() const {
  // @@protoc_insertion_point(field_get:pb.TPubgBattleRecord.RecordTime)
  return recordtime_;
}
inline void TPubgBattleRecord::set_recordtime(::google::protobuf::uint64 value) {
  set_has_recordtime();
  recordtime_ = value;
  // @@protoc_insertion_point(field_set:pb.TPubgBattleRecord.RecordTime)
}

// repeated .pb.TPubgBattleSimple ArrBattleSimple = 12;
inline int TPubgBattleRecord::arrbattlesimple_size() const {
  return arrbattlesimple_.size();
}
inline void TPubgBattleRecord::clear_arrbattlesimple() {
  arrbattlesimple_.Clear();
}
inline const ::pb::TPubgBattleSimple& TPubgBattleRecord::arrbattlesimple(int index) const {
  // @@protoc_insertion_point(field_get:pb.TPubgBattleRecord.ArrBattleSimple)
  return arrbattlesimple_.Get(index);
}
inline ::pb::TPubgBattleSimple* TPubgBattleRecord::mutable_arrbattlesimple(int index) {
  // @@protoc_insertion_point(field_mutable:pb.TPubgBattleRecord.ArrBattleSimple)
  return arrbattlesimple_.Mutable(index);
}
inline ::pb::TPubgBattleSimple* TPubgBattleRecord::add_arrbattlesimple() {
  // @@protoc_insertion_point(field_add:pb.TPubgBattleRecord.ArrBattleSimple)
  return arrbattlesimple_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::TPubgBattleSimple >&
TPubgBattleRecord::arrbattlesimple() const {
  // @@protoc_insertion_point(field_list:pb.TPubgBattleRecord.ArrBattleSimple)
  return arrbattlesimple_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb::TPubgBattleSimple >*
TPubgBattleRecord::mutable_arrbattlesimple() {
  // @@protoc_insertion_point(field_mutable_list:pb.TPubgBattleRecord.ArrBattleSimple)
  return &arrbattlesimple_;
}

// -------------------------------------------------------------------

// TPubgLocation

// optional uint32 AreaId = 1;
inline bool TPubgLocation::has_areaid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TPubgLocation::set_has_areaid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TPubgLocation::clear_has_areaid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TPubgLocation::clear_areaid() {
  areaid_ = 0u;
  clear_has_areaid();
}
inline ::google::protobuf::uint32 TPubgLocation::areaid() const {
  // @@protoc_insertion_point(field_get:pb.TPubgLocation.AreaId)
  return areaid_;
}
inline void TPubgLocation::set_areaid(::google::protobuf::uint32 value) {
  set_has_areaid();
  areaid_ = value;
  // @@protoc_insertion_point(field_set:pb.TPubgLocation.AreaId)
}

// optional uint32 CityId = 2;
inline bool TPubgLocation::has_cityid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TPubgLocation::set_has_cityid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TPubgLocation::clear_has_cityid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TPubgLocation::clear_cityid() {
  cityid_ = 0u;
  clear_has_cityid();
}
inline ::google::protobuf::uint32 TPubgLocation::cityid() const {
  // @@protoc_insertion_point(field_get:pb.TPubgLocation.CityId)
  return cityid_;
}
inline void TPubgLocation::set_cityid(::google::protobuf::uint32 value) {
  set_has_cityid();
  cityid_ = value;
  // @@protoc_insertion_point(field_set:pb.TPubgLocation.CityId)
}

// optional uint32 CampId = 3;
inline bool TPubgLocation::has_campid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void TPubgLocation::set_has_campid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void TPubgLocation::clear_has_campid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void TPubgLocation::clear_campid() {
  campid_ = 0u;
  clear_has_campid();
}
inline ::google::protobuf::uint32 TPubgLocation::campid() const {
  // @@protoc_insertion_point(field_get:pb.TPubgLocation.CampId)
  return campid_;
}
inline void TPubgLocation::set_campid(::google::protobuf::uint32 value) {
  set_has_campid();
  campid_ = value;
  // @@protoc_insertion_point(field_set:pb.TPubgLocation.CampId)
}

// -------------------------------------------------------------------

// TPubgGetInfoRsp

// repeated .pb.TPubgProcessInfo ArrProcessInfo = 1;
inline int TPubgGetInfoRsp::arrprocessinfo_size() const {
  return arrprocessinfo_.size();
}
inline void TPubgGetInfoRsp::clear_arrprocessinfo() {
  arrprocessinfo_.Clear();
}
inline const ::pb::TPubgProcessInfo& TPubgGetInfoRsp::arrprocessinfo(int index) const {
  // @@protoc_insertion_point(field_get:pb.TPubgGetInfoRsp.ArrProcessInfo)
  return arrprocessinfo_.Get(index);
}
inline ::pb::TPubgProcessInfo* TPubgGetInfoRsp::mutable_arrprocessinfo(int index) {
  // @@protoc_insertion_point(field_mutable:pb.TPubgGetInfoRsp.ArrProcessInfo)
  return arrprocessinfo_.Mutable(index);
}
inline ::pb::TPubgProcessInfo* TPubgGetInfoRsp::add_arrprocessinfo() {
  // @@protoc_insertion_point(field_add:pb.TPubgGetInfoRsp.ArrProcessInfo)
  return arrprocessinfo_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::TPubgProcessInfo >&
TPubgGetInfoRsp::arrprocessinfo() const {
  // @@protoc_insertion_point(field_list:pb.TPubgGetInfoRsp.ArrProcessInfo)
  return arrprocessinfo_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb::TPubgProcessInfo >*
TPubgGetInfoRsp::mutable_arrprocessinfo() {
  // @@protoc_insertion_point(field_mutable_list:pb.TPubgGetInfoRsp.ArrProcessInfo)
  return &arrprocessinfo_;
}

// optional bool ServerOpen = 2;
inline bool TPubgGetInfoRsp::has_serveropen() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TPubgGetInfoRsp::set_has_serveropen() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TPubgGetInfoRsp::clear_has_serveropen() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TPubgGetInfoRsp::clear_serveropen() {
  serveropen_ = false;
  clear_has_serveropen();
}
inline bool TPubgGetInfoRsp::serveropen() const {
  // @@protoc_insertion_point(field_get:pb.TPubgGetInfoRsp.ServerOpen)
  return serveropen_;
}
inline void TPubgGetInfoRsp::set_serveropen(bool value) {
  set_has_serveropen();
  serveropen_ = value;
  // @@protoc_insertion_point(field_set:pb.TPubgGetInfoRsp.ServerOpen)
}

// optional uint32 CurRound = 3;
inline bool TPubgGetInfoRsp::has_curround() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void TPubgGetInfoRsp::set_has_curround() {
  _has_bits_[0] |= 0x00000004u;
}
inline void TPubgGetInfoRsp::clear_has_curround() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void TPubgGetInfoRsp::clear_curround() {
  curround_ = 0u;
  clear_has_curround();
}
inline ::google::protobuf::uint32 TPubgGetInfoRsp::curround() const {
  // @@protoc_insertion_point(field_get:pb.TPubgGetInfoRsp.CurRound)
  return curround_;
}
inline void TPubgGetInfoRsp::set_curround(::google::protobuf::uint32 value) {
  set_has_curround();
  curround_ = value;
  // @@protoc_insertion_point(field_set:pb.TPubgGetInfoRsp.CurRound)
}

// optional .pb.EPubgStage CurStage = 4;
inline bool TPubgGetInfoRsp::has_curstage() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void TPubgGetInfoRsp::set_has_curstage() {
  _has_bits_[0] |= 0x00000008u;
}
inline void TPubgGetInfoRsp::clear_has_curstage() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void TPubgGetInfoRsp::clear_curstage() {
  curstage_ = 0;
  clear_has_curstage();
}
inline ::pb::EPubgStage TPubgGetInfoRsp::curstage() const {
  // @@protoc_insertion_point(field_get:pb.TPubgGetInfoRsp.CurStage)
  return static_cast< ::pb::EPubgStage >(curstage_);
}
inline void TPubgGetInfoRsp::set_curstage(::pb::EPubgStage value) {
  assert(::pb::EPubgStage_IsValid(value));
  set_has_curstage();
  curstage_ = value;
  // @@protoc_insertion_point(field_set:pb.TPubgGetInfoRsp.CurStage)
}

// optional .pb.TPubgUserInfo UserInfo = 5;
inline bool TPubgGetInfoRsp::has_userinfo() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void TPubgGetInfoRsp::set_has_userinfo() {
  _has_bits_[0] |= 0x00000010u;
}
inline void TPubgGetInfoRsp::clear_has_userinfo() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void TPubgGetInfoRsp::clear_userinfo() {
  if (userinfo_ != NULL) userinfo_->::pb::TPubgUserInfo::Clear();
  clear_has_userinfo();
}
inline const ::pb::TPubgUserInfo& TPubgGetInfoRsp::userinfo() const {
  // @@protoc_insertion_point(field_get:pb.TPubgGetInfoRsp.UserInfo)
  return userinfo_ != NULL ? *userinfo_ : *default_instance_->userinfo_;
}
inline ::pb::TPubgUserInfo* TPubgGetInfoRsp::mutable_userinfo() {
  set_has_userinfo();
  if (userinfo_ == NULL) userinfo_ = new ::pb::TPubgUserInfo;
  // @@protoc_insertion_point(field_mutable:pb.TPubgGetInfoRsp.UserInfo)
  return userinfo_;
}
inline ::pb::TPubgUserInfo* TPubgGetInfoRsp::release_userinfo() {
  clear_has_userinfo();
  ::pb::TPubgUserInfo* temp = userinfo_;
  userinfo_ = NULL;
  return temp;
}
inline void TPubgGetInfoRsp::set_allocated_userinfo(::pb::TPubgUserInfo* userinfo) {
  delete userinfo_;
  userinfo_ = userinfo;
  if (userinfo) {
    set_has_userinfo();
  } else {
    clear_has_userinfo();
  }
  // @@protoc_insertion_point(field_set_allocated:pb.TPubgGetInfoRsp.UserInfo)
}

// optional .pb.TPubgFieldInfo FieldInfo = 6;
inline bool TPubgGetInfoRsp::has_fieldinfo() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void TPubgGetInfoRsp::set_has_fieldinfo() {
  _has_bits_[0] |= 0x00000020u;
}
inline void TPubgGetInfoRsp::clear_has_fieldinfo() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void TPubgGetInfoRsp::clear_fieldinfo() {
  if (fieldinfo_ != NULL) fieldinfo_->::pb::TPubgFieldInfo::Clear();
  clear_has_fieldinfo();
}
inline const ::pb::TPubgFieldInfo& TPubgGetInfoRsp::fieldinfo() const {
  // @@protoc_insertion_point(field_get:pb.TPubgGetInfoRsp.FieldInfo)
  return fieldinfo_ != NULL ? *fieldinfo_ : *default_instance_->fieldinfo_;
}
inline ::pb::TPubgFieldInfo* TPubgGetInfoRsp::mutable_fieldinfo() {
  set_has_fieldinfo();
  if (fieldinfo_ == NULL) fieldinfo_ = new ::pb::TPubgFieldInfo;
  // @@protoc_insertion_point(field_mutable:pb.TPubgGetInfoRsp.FieldInfo)
  return fieldinfo_;
}
inline ::pb::TPubgFieldInfo* TPubgGetInfoRsp::release_fieldinfo() {
  clear_has_fieldinfo();
  ::pb::TPubgFieldInfo* temp = fieldinfo_;
  fieldinfo_ = NULL;
  return temp;
}
inline void TPubgGetInfoRsp::set_allocated_fieldinfo(::pb::TPubgFieldInfo* fieldinfo) {
  delete fieldinfo_;
  fieldinfo_ = fieldinfo;
  if (fieldinfo) {
    set_has_fieldinfo();
  } else {
    clear_has_fieldinfo();
  }
  // @@protoc_insertion_point(field_set_allocated:pb.TPubgGetInfoRsp.FieldInfo)
}

// optional .pb.TPubgChickenEaterInfo ChickenEaterInfo = 7;
inline bool TPubgGetInfoRsp::has_chickeneaterinfo() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void TPubgGetInfoRsp::set_has_chickeneaterinfo() {
  _has_bits_[0] |= 0x00000040u;
}
inline void TPubgGetInfoRsp::clear_has_chickeneaterinfo() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void TPubgGetInfoRsp::clear_chickeneaterinfo() {
  if (chickeneaterinfo_ != NULL) chickeneaterinfo_->::pb::TPubgChickenEaterInfo::Clear();
  clear_has_chickeneaterinfo();
}
inline const ::pb::TPubgChickenEaterInfo& TPubgGetInfoRsp::chickeneaterinfo() const {
  // @@protoc_insertion_point(field_get:pb.TPubgGetInfoRsp.ChickenEaterInfo)
  return chickeneaterinfo_ != NULL ? *chickeneaterinfo_ : *default_instance_->chickeneaterinfo_;
}
inline ::pb::TPubgChickenEaterInfo* TPubgGetInfoRsp::mutable_chickeneaterinfo() {
  set_has_chickeneaterinfo();
  if (chickeneaterinfo_ == NULL) chickeneaterinfo_ = new ::pb::TPubgChickenEaterInfo;
  // @@protoc_insertion_point(field_mutable:pb.TPubgGetInfoRsp.ChickenEaterInfo)
  return chickeneaterinfo_;
}
inline ::pb::TPubgChickenEaterInfo* TPubgGetInfoRsp::release_chickeneaterinfo() {
  clear_has_chickeneaterinfo();
  ::pb::TPubgChickenEaterInfo* temp = chickeneaterinfo_;
  chickeneaterinfo_ = NULL;
  return temp;
}
inline void TPubgGetInfoRsp::set_allocated_chickeneaterinfo(::pb::TPubgChickenEaterInfo* chickeneaterinfo) {
  delete chickeneaterinfo_;
  chickeneaterinfo_ = chickeneaterinfo;
  if (chickeneaterinfo) {
    set_has_chickeneaterinfo();
  } else {
    clear_has_chickeneaterinfo();
  }
  // @@protoc_insertion_point(field_set_allocated:pb.TPubgGetInfoRsp.ChickenEaterInfo)
}

// optional string SceneId = 8;
inline bool TPubgGetInfoRsp::has_sceneid() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void TPubgGetInfoRsp::set_has_sceneid() {
  _has_bits_[0] |= 0x00000080u;
}
inline void TPubgGetInfoRsp::clear_has_sceneid() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void TPubgGetInfoRsp::clear_sceneid() {
  if (sceneid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    sceneid_->clear();
  }
  clear_has_sceneid();
}
inline const ::std::string& TPubgGetInfoRsp::sceneid() const {
  // @@protoc_insertion_point(field_get:pb.TPubgGetInfoRsp.SceneId)
  return *sceneid_;
}
inline void TPubgGetInfoRsp::set_sceneid(const ::std::string& value) {
  set_has_sceneid();
  if (sceneid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    sceneid_ = new ::std::string;
  }
  sceneid_->assign(value);
  // @@protoc_insertion_point(field_set:pb.TPubgGetInfoRsp.SceneId)
}
inline void TPubgGetInfoRsp::set_sceneid(const char* value) {
  set_has_sceneid();
  if (sceneid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    sceneid_ = new ::std::string;
  }
  sceneid_->assign(value);
  // @@protoc_insertion_point(field_set_char:pb.TPubgGetInfoRsp.SceneId)
}
inline void TPubgGetInfoRsp::set_sceneid(const char* value, size_t size) {
  set_has_sceneid();
  if (sceneid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    sceneid_ = new ::std::string;
  }
  sceneid_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:pb.TPubgGetInfoRsp.SceneId)
}
inline ::std::string* TPubgGetInfoRsp::mutable_sceneid() {
  set_has_sceneid();
  if (sceneid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    sceneid_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:pb.TPubgGetInfoRsp.SceneId)
  return sceneid_;
}
inline ::std::string* TPubgGetInfoRsp::release_sceneid() {
  clear_has_sceneid();
  if (sceneid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = sceneid_;
    sceneid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void TPubgGetInfoRsp::set_allocated_sceneid(::std::string* sceneid) {
  if (sceneid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete sceneid_;
  }
  if (sceneid) {
    set_has_sceneid();
    sceneid_ = sceneid;
  } else {
    clear_has_sceneid();
    sceneid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:pb.TPubgGetInfoRsp.SceneId)
}

// optional uint64 WinnerOffseasonBegTime = 9;
inline bool TPubgGetInfoRsp::has_winneroffseasonbegtime() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void TPubgGetInfoRsp::set_has_winneroffseasonbegtime() {
  _has_bits_[0] |= 0x00000100u;
}
inline void TPubgGetInfoRsp::clear_has_winneroffseasonbegtime() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void TPubgGetInfoRsp::clear_winneroffseasonbegtime() {
  winneroffseasonbegtime_ = GOOGLE_ULONGLONG(0);
  clear_has_winneroffseasonbegtime();
}
inline ::google::protobuf::uint64 TPubgGetInfoRsp::winneroffseasonbegtime() const {
  // @@protoc_insertion_point(field_get:pb.TPubgGetInfoRsp.WinnerOffseasonBegTime)
  return winneroffseasonbegtime_;
}
inline void TPubgGetInfoRsp::set_winneroffseasonbegtime(::google::protobuf::uint64 value) {
  set_has_winneroffseasonbegtime();
  winneroffseasonbegtime_ = value;
  // @@protoc_insertion_point(field_set:pb.TPubgGetInfoRsp.WinnerOffseasonBegTime)
}

// optional .pb.TPubgFieldInfo WinnerFieldInfo = 10;
inline bool TPubgGetInfoRsp::has_winnerfieldinfo() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void TPubgGetInfoRsp::set_has_winnerfieldinfo() {
  _has_bits_[0] |= 0x00000200u;
}
inline void TPubgGetInfoRsp::clear_has_winnerfieldinfo() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void TPubgGetInfoRsp::clear_winnerfieldinfo() {
  if (winnerfieldinfo_ != NULL) winnerfieldinfo_->::pb::TPubgFieldInfo::Clear();
  clear_has_winnerfieldinfo();
}
inline const ::pb::TPubgFieldInfo& TPubgGetInfoRsp::winnerfieldinfo() const {
  // @@protoc_insertion_point(field_get:pb.TPubgGetInfoRsp.WinnerFieldInfo)
  return winnerfieldinfo_ != NULL ? *winnerfieldinfo_ : *default_instance_->winnerfieldinfo_;
}
inline ::pb::TPubgFieldInfo* TPubgGetInfoRsp::mutable_winnerfieldinfo() {
  set_has_winnerfieldinfo();
  if (winnerfieldinfo_ == NULL) winnerfieldinfo_ = new ::pb::TPubgFieldInfo;
  // @@protoc_insertion_point(field_mutable:pb.TPubgGetInfoRsp.WinnerFieldInfo)
  return winnerfieldinfo_;
}
inline ::pb::TPubgFieldInfo* TPubgGetInfoRsp::release_winnerfieldinfo() {
  clear_has_winnerfieldinfo();
  ::pb::TPubgFieldInfo* temp = winnerfieldinfo_;
  winnerfieldinfo_ = NULL;
  return temp;
}
inline void TPubgGetInfoRsp::set_allocated_winnerfieldinfo(::pb::TPubgFieldInfo* winnerfieldinfo) {
  delete winnerfieldinfo_;
  winnerfieldinfo_ = winnerfieldinfo;
  if (winnerfieldinfo) {
    set_has_winnerfieldinfo();
  } else {
    clear_has_winnerfieldinfo();
  }
  // @@protoc_insertion_point(field_set_allocated:pb.TPubgGetInfoRsp.WinnerFieldInfo)
}

// repeated .pb.TPubgProcessInfo WinnerArrProcessInfo = 11;
inline int TPubgGetInfoRsp::winnerarrprocessinfo_size() const {
  return winnerarrprocessinfo_.size();
}
inline void TPubgGetInfoRsp::clear_winnerarrprocessinfo() {
  winnerarrprocessinfo_.Clear();
}
inline const ::pb::TPubgProcessInfo& TPubgGetInfoRsp::winnerarrprocessinfo(int index) const {
  // @@protoc_insertion_point(field_get:pb.TPubgGetInfoRsp.WinnerArrProcessInfo)
  return winnerarrprocessinfo_.Get(index);
}
inline ::pb::TPubgProcessInfo* TPubgGetInfoRsp::mutable_winnerarrprocessinfo(int index) {
  // @@protoc_insertion_point(field_mutable:pb.TPubgGetInfoRsp.WinnerArrProcessInfo)
  return winnerarrprocessinfo_.Mutable(index);
}
inline ::pb::TPubgProcessInfo* TPubgGetInfoRsp::add_winnerarrprocessinfo() {
  // @@protoc_insertion_point(field_add:pb.TPubgGetInfoRsp.WinnerArrProcessInfo)
  return winnerarrprocessinfo_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::TPubgProcessInfo >&
TPubgGetInfoRsp::winnerarrprocessinfo() const {
  // @@protoc_insertion_point(field_list:pb.TPubgGetInfoRsp.WinnerArrProcessInfo)
  return winnerarrprocessinfo_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb::TPubgProcessInfo >*
TPubgGetInfoRsp::mutable_winnerarrprocessinfo() {
  // @@protoc_insertion_point(field_mutable_list:pb.TPubgGetInfoRsp.WinnerArrProcessInfo)
  return &winnerarrprocessinfo_;
}

// -------------------------------------------------------------------

// TPubgEnterReq

// optional string FieldId = 1;
inline bool TPubgEnterReq::has_fieldid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TPubgEnterReq::set_has_fieldid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TPubgEnterReq::clear_has_fieldid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TPubgEnterReq::clear_fieldid() {
  if (fieldid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    fieldid_->clear();
  }
  clear_has_fieldid();
}
inline const ::std::string& TPubgEnterReq::fieldid() const {
  // @@protoc_insertion_point(field_get:pb.TPubgEnterReq.FieldId)
  return *fieldid_;
}
inline void TPubgEnterReq::set_fieldid(const ::std::string& value) {
  set_has_fieldid();
  if (fieldid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    fieldid_ = new ::std::string;
  }
  fieldid_->assign(value);
  // @@protoc_insertion_point(field_set:pb.TPubgEnterReq.FieldId)
}
inline void TPubgEnterReq::set_fieldid(const char* value) {
  set_has_fieldid();
  if (fieldid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    fieldid_ = new ::std::string;
  }
  fieldid_->assign(value);
  // @@protoc_insertion_point(field_set_char:pb.TPubgEnterReq.FieldId)
}
inline void TPubgEnterReq::set_fieldid(const char* value, size_t size) {
  set_has_fieldid();
  if (fieldid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    fieldid_ = new ::std::string;
  }
  fieldid_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:pb.TPubgEnterReq.FieldId)
}
inline ::std::string* TPubgEnterReq::mutable_fieldid() {
  set_has_fieldid();
  if (fieldid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    fieldid_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:pb.TPubgEnterReq.FieldId)
  return fieldid_;
}
inline ::std::string* TPubgEnterReq::release_fieldid() {
  clear_has_fieldid();
  if (fieldid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = fieldid_;
    fieldid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void TPubgEnterReq::set_allocated_fieldid(::std::string* fieldid) {
  if (fieldid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete fieldid_;
  }
  if (fieldid) {
    set_has_fieldid();
    fieldid_ = fieldid;
  } else {
    clear_has_fieldid();
    fieldid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:pb.TPubgEnterReq.FieldId)
}

// -------------------------------------------------------------------

// TPubgGetCampListReq

// optional uint32 AreaId = 1;
inline bool TPubgGetCampListReq::has_areaid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TPubgGetCampListReq::set_has_areaid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TPubgGetCampListReq::clear_has_areaid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TPubgGetCampListReq::clear_areaid() {
  areaid_ = 0u;
  clear_has_areaid();
}
inline ::google::protobuf::uint32 TPubgGetCampListReq::areaid() const {
  // @@protoc_insertion_point(field_get:pb.TPubgGetCampListReq.AreaId)
  return areaid_;
}
inline void TPubgGetCampListReq::set_areaid(::google::protobuf::uint32 value) {
  set_has_areaid();
  areaid_ = value;
  // @@protoc_insertion_point(field_set:pb.TPubgGetCampListReq.AreaId)
}

// optional uint32 CityId = 2;
inline bool TPubgGetCampListReq::has_cityid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TPubgGetCampListReq::set_has_cityid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TPubgGetCampListReq::clear_has_cityid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TPubgGetCampListReq::clear_cityid() {
  cityid_ = 0u;
  clear_has_cityid();
}
inline ::google::protobuf::uint32 TPubgGetCampListReq::cityid() const {
  // @@protoc_insertion_point(field_get:pb.TPubgGetCampListReq.CityId)
  return cityid_;
}
inline void TPubgGetCampListReq::set_cityid(::google::protobuf::uint32 value) {
  set_has_cityid();
  cityid_ = value;
  // @@protoc_insertion_point(field_set:pb.TPubgGetCampListReq.CityId)
}

// optional string FieldId = 3;
inline bool TPubgGetCampListReq::has_fieldid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void TPubgGetCampListReq::set_has_fieldid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void TPubgGetCampListReq::clear_has_fieldid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void TPubgGetCampListReq::clear_fieldid() {
  if (fieldid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    fieldid_->clear();
  }
  clear_has_fieldid();
}
inline const ::std::string& TPubgGetCampListReq::fieldid() const {
  // @@protoc_insertion_point(field_get:pb.TPubgGetCampListReq.FieldId)
  return *fieldid_;
}
inline void TPubgGetCampListReq::set_fieldid(const ::std::string& value) {
  set_has_fieldid();
  if (fieldid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    fieldid_ = new ::std::string;
  }
  fieldid_->assign(value);
  // @@protoc_insertion_point(field_set:pb.TPubgGetCampListReq.FieldId)
}
inline void TPubgGetCampListReq::set_fieldid(const char* value) {
  set_has_fieldid();
  if (fieldid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    fieldid_ = new ::std::string;
  }
  fieldid_->assign(value);
  // @@protoc_insertion_point(field_set_char:pb.TPubgGetCampListReq.FieldId)
}
inline void TPubgGetCampListReq::set_fieldid(const char* value, size_t size) {
  set_has_fieldid();
  if (fieldid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    fieldid_ = new ::std::string;
  }
  fieldid_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:pb.TPubgGetCampListReq.FieldId)
}
inline ::std::string* TPubgGetCampListReq::mutable_fieldid() {
  set_has_fieldid();
  if (fieldid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    fieldid_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:pb.TPubgGetCampListReq.FieldId)
  return fieldid_;
}
inline ::std::string* TPubgGetCampListReq::release_fieldid() {
  clear_has_fieldid();
  if (fieldid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = fieldid_;
    fieldid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void TPubgGetCampListReq::set_allocated_fieldid(::std::string* fieldid) {
  if (fieldid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete fieldid_;
  }
  if (fieldid) {
    set_has_fieldid();
    fieldid_ = fieldid;
  } else {
    clear_has_fieldid();
    fieldid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:pb.TPubgGetCampListReq.FieldId)
}

// -------------------------------------------------------------------

// TPubgGetCampListRsp

// repeated .pb.TPubgCampInfo ArrCamp = 1;
inline int TPubgGetCampListRsp::arrcamp_size() const {
  return arrcamp_.size();
}
inline void TPubgGetCampListRsp::clear_arrcamp() {
  arrcamp_.Clear();
}
inline const ::pb::TPubgCampInfo& TPubgGetCampListRsp::arrcamp(int index) const {
  // @@protoc_insertion_point(field_get:pb.TPubgGetCampListRsp.ArrCamp)
  return arrcamp_.Get(index);
}
inline ::pb::TPubgCampInfo* TPubgGetCampListRsp::mutable_arrcamp(int index) {
  // @@protoc_insertion_point(field_mutable:pb.TPubgGetCampListRsp.ArrCamp)
  return arrcamp_.Mutable(index);
}
inline ::pb::TPubgCampInfo* TPubgGetCampListRsp::add_arrcamp() {
  // @@protoc_insertion_point(field_add:pb.TPubgGetCampListRsp.ArrCamp)
  return arrcamp_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::TPubgCampInfo >&
TPubgGetCampListRsp::arrcamp() const {
  // @@protoc_insertion_point(field_list:pb.TPubgGetCampListRsp.ArrCamp)
  return arrcamp_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb::TPubgCampInfo >*
TPubgGetCampListRsp::mutable_arrcamp() {
  // @@protoc_insertion_point(field_mutable_list:pb.TPubgGetCampListRsp.ArrCamp)
  return &arrcamp_;
}

// -------------------------------------------------------------------

// TPubgSignRsp

// optional uint64 SignTime = 1;
inline bool TPubgSignRsp::has_signtime() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TPubgSignRsp::set_has_signtime() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TPubgSignRsp::clear_has_signtime() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TPubgSignRsp::clear_signtime() {
  signtime_ = GOOGLE_ULONGLONG(0);
  clear_has_signtime();
}
inline ::google::protobuf::uint64 TPubgSignRsp::signtime() const {
  // @@protoc_insertion_point(field_get:pb.TPubgSignRsp.SignTime)
  return signtime_;
}
inline void TPubgSignRsp::set_signtime(::google::protobuf::uint64 value) {
  set_has_signtime();
  signtime_ = value;
  // @@protoc_insertion_point(field_set:pb.TPubgSignRsp.SignTime)
}

// -------------------------------------------------------------------

// TPubgGetMyFmtRsp

// repeated .pb.TPubgFmtInfo ArrFmt = 1;
inline int TPubgGetMyFmtRsp::arrfmt_size() const {
  return arrfmt_.size();
}
inline void TPubgGetMyFmtRsp::clear_arrfmt() {
  arrfmt_.Clear();
}
inline const ::pb::TPubgFmtInfo& TPubgGetMyFmtRsp::arrfmt(int index) const {
  // @@protoc_insertion_point(field_get:pb.TPubgGetMyFmtRsp.ArrFmt)
  return arrfmt_.Get(index);
}
inline ::pb::TPubgFmtInfo* TPubgGetMyFmtRsp::mutable_arrfmt(int index) {
  // @@protoc_insertion_point(field_mutable:pb.TPubgGetMyFmtRsp.ArrFmt)
  return arrfmt_.Mutable(index);
}
inline ::pb::TPubgFmtInfo* TPubgGetMyFmtRsp::add_arrfmt() {
  // @@protoc_insertion_point(field_add:pb.TPubgGetMyFmtRsp.ArrFmt)
  return arrfmt_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::TPubgFmtInfo >&
TPubgGetMyFmtRsp::arrfmt() const {
  // @@protoc_insertion_point(field_list:pb.TPubgGetMyFmtRsp.ArrFmt)
  return arrfmt_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb::TPubgFmtInfo >*
TPubgGetMyFmtRsp::mutable_arrfmt() {
  // @@protoc_insertion_point(field_mutable_list:pb.TPubgGetMyFmtRsp.ArrFmt)
  return &arrfmt_;
}

// -------------------------------------------------------------------

// TPubgSetMyFmtReq

// repeated .pb.TPubgFmtInfo ArrFmt = 1;
inline int TPubgSetMyFmtReq::arrfmt_size() const {
  return arrfmt_.size();
}
inline void TPubgSetMyFmtReq::clear_arrfmt() {
  arrfmt_.Clear();
}
inline const ::pb::TPubgFmtInfo& TPubgSetMyFmtReq::arrfmt(int index) const {
  // @@protoc_insertion_point(field_get:pb.TPubgSetMyFmtReq.ArrFmt)
  return arrfmt_.Get(index);
}
inline ::pb::TPubgFmtInfo* TPubgSetMyFmtReq::mutable_arrfmt(int index) {
  // @@protoc_insertion_point(field_mutable:pb.TPubgSetMyFmtReq.ArrFmt)
  return arrfmt_.Mutable(index);
}
inline ::pb::TPubgFmtInfo* TPubgSetMyFmtReq::add_arrfmt() {
  // @@protoc_insertion_point(field_add:pb.TPubgSetMyFmtReq.ArrFmt)
  return arrfmt_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::TPubgFmtInfo >&
TPubgSetMyFmtReq::arrfmt() const {
  // @@protoc_insertion_point(field_list:pb.TPubgSetMyFmtReq.ArrFmt)
  return arrfmt_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb::TPubgFmtInfo >*
TPubgSetMyFmtReq::mutable_arrfmt() {
  // @@protoc_insertion_point(field_mutable_list:pb.TPubgSetMyFmtReq.ArrFmt)
  return &arrfmt_;
}

// -------------------------------------------------------------------

// TPubgAttackReq

// optional .pb.TPubgLocation MyLocation = 1;
inline bool TPubgAttackReq::has_mylocation() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TPubgAttackReq::set_has_mylocation() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TPubgAttackReq::clear_has_mylocation() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TPubgAttackReq::clear_mylocation() {
  if (mylocation_ != NULL) mylocation_->::pb::TPubgLocation::Clear();
  clear_has_mylocation();
}
inline const ::pb::TPubgLocation& TPubgAttackReq::mylocation() const {
  // @@protoc_insertion_point(field_get:pb.TPubgAttackReq.MyLocation)
  return mylocation_ != NULL ? *mylocation_ : *default_instance_->mylocation_;
}
inline ::pb::TPubgLocation* TPubgAttackReq::mutable_mylocation() {
  set_has_mylocation();
  if (mylocation_ == NULL) mylocation_ = new ::pb::TPubgLocation;
  // @@protoc_insertion_point(field_mutable:pb.TPubgAttackReq.MyLocation)
  return mylocation_;
}
inline ::pb::TPubgLocation* TPubgAttackReq::release_mylocation() {
  clear_has_mylocation();
  ::pb::TPubgLocation* temp = mylocation_;
  mylocation_ = NULL;
  return temp;
}
inline void TPubgAttackReq::set_allocated_mylocation(::pb::TPubgLocation* mylocation) {
  delete mylocation_;
  mylocation_ = mylocation;
  if (mylocation) {
    set_has_mylocation();
  } else {
    clear_has_mylocation();
  }
  // @@protoc_insertion_point(field_set_allocated:pb.TPubgAttackReq.MyLocation)
}

// optional .pb.TPubgLocation EnemyLocation = 2;
inline bool TPubgAttackReq::has_enemylocation() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TPubgAttackReq::set_has_enemylocation() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TPubgAttackReq::clear_has_enemylocation() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TPubgAttackReq::clear_enemylocation() {
  if (enemylocation_ != NULL) enemylocation_->::pb::TPubgLocation::Clear();
  clear_has_enemylocation();
}
inline const ::pb::TPubgLocation& TPubgAttackReq::enemylocation() const {
  // @@protoc_insertion_point(field_get:pb.TPubgAttackReq.EnemyLocation)
  return enemylocation_ != NULL ? *enemylocation_ : *default_instance_->enemylocation_;
}
inline ::pb::TPubgLocation* TPubgAttackReq::mutable_enemylocation() {
  set_has_enemylocation();
  if (enemylocation_ == NULL) enemylocation_ = new ::pb::TPubgLocation;
  // @@protoc_insertion_point(field_mutable:pb.TPubgAttackReq.EnemyLocation)
  return enemylocation_;
}
inline ::pb::TPubgLocation* TPubgAttackReq::release_enemylocation() {
  clear_has_enemylocation();
  ::pb::TPubgLocation* temp = enemylocation_;
  enemylocation_ = NULL;
  return temp;
}
inline void TPubgAttackReq::set_allocated_enemylocation(::pb::TPubgLocation* enemylocation) {
  delete enemylocation_;
  enemylocation_ = enemylocation;
  if (enemylocation) {
    set_has_enemylocation();
  } else {
    clear_has_enemylocation();
  }
  // @@protoc_insertion_point(field_set_allocated:pb.TPubgAttackReq.EnemyLocation)
}

// optional uint64 EnemyId = 3;
inline bool TPubgAttackReq::has_enemyid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void TPubgAttackReq::set_has_enemyid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void TPubgAttackReq::clear_has_enemyid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void TPubgAttackReq::clear_enemyid() {
  enemyid_ = GOOGLE_ULONGLONG(0);
  clear_has_enemyid();
}
inline ::google::protobuf::uint64 TPubgAttackReq::enemyid() const {
  // @@protoc_insertion_point(field_get:pb.TPubgAttackReq.EnemyId)
  return enemyid_;
}
inline void TPubgAttackReq::set_enemyid(::google::protobuf::uint64 value) {
  set_has_enemyid();
  enemyid_ = value;
  // @@protoc_insertion_point(field_set:pb.TPubgAttackReq.EnemyId)
}

// optional bool SkipBattle = 4;
inline bool TPubgAttackReq::has_skipbattle() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void TPubgAttackReq::set_has_skipbattle() {
  _has_bits_[0] |= 0x00000008u;
}
inline void TPubgAttackReq::clear_has_skipbattle() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void TPubgAttackReq::clear_skipbattle() {
  skipbattle_ = false;
  clear_has_skipbattle();
}
inline bool TPubgAttackReq::skipbattle() const {
  // @@protoc_insertion_point(field_get:pb.TPubgAttackReq.SkipBattle)
  return skipbattle_;
}
inline void TPubgAttackReq::set_skipbattle(bool value) {
  set_has_skipbattle();
  skipbattle_ = value;
  // @@protoc_insertion_point(field_set:pb.TPubgAttackReq.SkipBattle)
}

// -------------------------------------------------------------------

// TPubgAttackRsp

// optional bool IsWin = 1;
inline bool TPubgAttackRsp::has_iswin() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TPubgAttackRsp::set_has_iswin() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TPubgAttackRsp::clear_has_iswin() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TPubgAttackRsp::clear_iswin() {
  iswin_ = false;
  clear_has_iswin();
}
inline bool TPubgAttackRsp::iswin() const {
  // @@protoc_insertion_point(field_get:pb.TPubgAttackRsp.IsWin)
  return iswin_;
}
inline void TPubgAttackRsp::set_iswin(bool value) {
  set_has_iswin();
  iswin_ = value;
  // @@protoc_insertion_point(field_set:pb.TPubgAttackRsp.IsWin)
}

// repeated .pb.TPubgBattleDetail ArrBattleDetail = 2;
inline int TPubgAttackRsp::arrbattledetail_size() const {
  return arrbattledetail_.size();
}
inline void TPubgAttackRsp::clear_arrbattledetail() {
  arrbattledetail_.Clear();
}
inline const ::pb::TPubgBattleDetail& TPubgAttackRsp::arrbattledetail(int index) const {
  // @@protoc_insertion_point(field_get:pb.TPubgAttackRsp.ArrBattleDetail)
  return arrbattledetail_.Get(index);
}
inline ::pb::TPubgBattleDetail* TPubgAttackRsp::mutable_arrbattledetail(int index) {
  // @@protoc_insertion_point(field_mutable:pb.TPubgAttackRsp.ArrBattleDetail)
  return arrbattledetail_.Mutable(index);
}
inline ::pb::TPubgBattleDetail* TPubgAttackRsp::add_arrbattledetail() {
  // @@protoc_insertion_point(field_add:pb.TPubgAttackRsp.ArrBattleDetail)
  return arrbattledetail_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::TPubgBattleDetail >&
TPubgAttackRsp::arrbattledetail() const {
  // @@protoc_insertion_point(field_list:pb.TPubgAttackRsp.ArrBattleDetail)
  return arrbattledetail_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb::TPubgBattleDetail >*
TPubgAttackRsp::mutable_arrbattledetail() {
  // @@protoc_insertion_point(field_mutable_list:pb.TPubgAttackRsp.ArrBattleDetail)
  return &arrbattledetail_;
}

// repeated .pb.TCommonReward ArrReward = 3;
inline int TPubgAttackRsp::arrreward_size() const {
  return arrreward_.size();
}
inline void TPubgAttackRsp::clear_arrreward() {
  arrreward_.Clear();
}
inline const ::pb::TCommonReward& TPubgAttackRsp::arrreward(int index) const {
  // @@protoc_insertion_point(field_get:pb.TPubgAttackRsp.ArrReward)
  return arrreward_.Get(index);
}
inline ::pb::TCommonReward* TPubgAttackRsp::mutable_arrreward(int index) {
  // @@protoc_insertion_point(field_mutable:pb.TPubgAttackRsp.ArrReward)
  return arrreward_.Mutable(index);
}
inline ::pb::TCommonReward* TPubgAttackRsp::add_arrreward() {
  // @@protoc_insertion_point(field_add:pb.TPubgAttackRsp.ArrReward)
  return arrreward_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::TCommonReward >&
TPubgAttackRsp::arrreward() const {
  // @@protoc_insertion_point(field_list:pb.TPubgAttackRsp.ArrReward)
  return arrreward_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb::TCommonReward >*
TPubgAttackRsp::mutable_arrreward() {
  // @@protoc_insertion_point(field_mutable_list:pb.TPubgAttackRsp.ArrReward)
  return &arrreward_;
}

// -------------------------------------------------------------------

// TPubgGetEnemyInfoReq

// optional .pb.TPubgLocation EnemyLocation = 1;
inline bool TPubgGetEnemyInfoReq::has_enemylocation() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TPubgGetEnemyInfoReq::set_has_enemylocation() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TPubgGetEnemyInfoReq::clear_has_enemylocation() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TPubgGetEnemyInfoReq::clear_enemylocation() {
  if (enemylocation_ != NULL) enemylocation_->::pb::TPubgLocation::Clear();
  clear_has_enemylocation();
}
inline const ::pb::TPubgLocation& TPubgGetEnemyInfoReq::enemylocation() const {
  // @@protoc_insertion_point(field_get:pb.TPubgGetEnemyInfoReq.EnemyLocation)
  return enemylocation_ != NULL ? *enemylocation_ : *default_instance_->enemylocation_;
}
inline ::pb::TPubgLocation* TPubgGetEnemyInfoReq::mutable_enemylocation() {
  set_has_enemylocation();
  if (enemylocation_ == NULL) enemylocation_ = new ::pb::TPubgLocation;
  // @@protoc_insertion_point(field_mutable:pb.TPubgGetEnemyInfoReq.EnemyLocation)
  return enemylocation_;
}
inline ::pb::TPubgLocation* TPubgGetEnemyInfoReq::release_enemylocation() {
  clear_has_enemylocation();
  ::pb::TPubgLocation* temp = enemylocation_;
  enemylocation_ = NULL;
  return temp;
}
inline void TPubgGetEnemyInfoReq::set_allocated_enemylocation(::pb::TPubgLocation* enemylocation) {
  delete enemylocation_;
  enemylocation_ = enemylocation;
  if (enemylocation) {
    set_has_enemylocation();
  } else {
    clear_has_enemylocation();
  }
  // @@protoc_insertion_point(field_set_allocated:pb.TPubgGetEnemyInfoReq.EnemyLocation)
}

// optional uint64 EnemyId = 2;
inline bool TPubgGetEnemyInfoReq::has_enemyid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TPubgGetEnemyInfoReq::set_has_enemyid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TPubgGetEnemyInfoReq::clear_has_enemyid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TPubgGetEnemyInfoReq::clear_enemyid() {
  enemyid_ = GOOGLE_ULONGLONG(0);
  clear_has_enemyid();
}
inline ::google::protobuf::uint64 TPubgGetEnemyInfoReq::enemyid() const {
  // @@protoc_insertion_point(field_get:pb.TPubgGetEnemyInfoReq.EnemyId)
  return enemyid_;
}
inline void TPubgGetEnemyInfoReq::set_enemyid(::google::protobuf::uint64 value) {
  set_has_enemyid();
  enemyid_ = value;
  // @@protoc_insertion_point(field_set:pb.TPubgGetEnemyInfoReq.EnemyId)
}

// optional string FieldId = 3;
inline bool TPubgGetEnemyInfoReq::has_fieldid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void TPubgGetEnemyInfoReq::set_has_fieldid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void TPubgGetEnemyInfoReq::clear_has_fieldid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void TPubgGetEnemyInfoReq::clear_fieldid() {
  if (fieldid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    fieldid_->clear();
  }
  clear_has_fieldid();
}
inline const ::std::string& TPubgGetEnemyInfoReq::fieldid() const {
  // @@protoc_insertion_point(field_get:pb.TPubgGetEnemyInfoReq.FieldId)
  return *fieldid_;
}
inline void TPubgGetEnemyInfoReq::set_fieldid(const ::std::string& value) {
  set_has_fieldid();
  if (fieldid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    fieldid_ = new ::std::string;
  }
  fieldid_->assign(value);
  // @@protoc_insertion_point(field_set:pb.TPubgGetEnemyInfoReq.FieldId)
}
inline void TPubgGetEnemyInfoReq::set_fieldid(const char* value) {
  set_has_fieldid();
  if (fieldid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    fieldid_ = new ::std::string;
  }
  fieldid_->assign(value);
  // @@protoc_insertion_point(field_set_char:pb.TPubgGetEnemyInfoReq.FieldId)
}
inline void TPubgGetEnemyInfoReq::set_fieldid(const char* value, size_t size) {
  set_has_fieldid();
  if (fieldid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    fieldid_ = new ::std::string;
  }
  fieldid_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:pb.TPubgGetEnemyInfoReq.FieldId)
}
inline ::std::string* TPubgGetEnemyInfoReq::mutable_fieldid() {
  set_has_fieldid();
  if (fieldid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    fieldid_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:pb.TPubgGetEnemyInfoReq.FieldId)
  return fieldid_;
}
inline ::std::string* TPubgGetEnemyInfoReq::release_fieldid() {
  clear_has_fieldid();
  if (fieldid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = fieldid_;
    fieldid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void TPubgGetEnemyInfoReq::set_allocated_fieldid(::std::string* fieldid) {
  if (fieldid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete fieldid_;
  }
  if (fieldid) {
    set_has_fieldid();
    fieldid_ = fieldid;
  } else {
    clear_has_fieldid();
    fieldid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:pb.TPubgGetEnemyInfoReq.FieldId)
}

// -------------------------------------------------------------------

// TPubgGetEnemyInfoRsp

// repeated .pb.TPubgFmtDetail ArrFmt = 1;
inline int TPubgGetEnemyInfoRsp::arrfmt_size() const {
  return arrfmt_.size();
}
inline void TPubgGetEnemyInfoRsp::clear_arrfmt() {
  arrfmt_.Clear();
}
inline const ::pb::TPubgFmtDetail& TPubgGetEnemyInfoRsp::arrfmt(int index) const {
  // @@protoc_insertion_point(field_get:pb.TPubgGetEnemyInfoRsp.ArrFmt)
  return arrfmt_.Get(index);
}
inline ::pb::TPubgFmtDetail* TPubgGetEnemyInfoRsp::mutable_arrfmt(int index) {
  // @@protoc_insertion_point(field_mutable:pb.TPubgGetEnemyInfoRsp.ArrFmt)
  return arrfmt_.Mutable(index);
}
inline ::pb::TPubgFmtDetail* TPubgGetEnemyInfoRsp::add_arrfmt() {
  // @@protoc_insertion_point(field_add:pb.TPubgGetEnemyInfoRsp.ArrFmt)
  return arrfmt_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::TPubgFmtDetail >&
TPubgGetEnemyInfoRsp::arrfmt() const {
  // @@protoc_insertion_point(field_list:pb.TPubgGetEnemyInfoRsp.ArrFmt)
  return arrfmt_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb::TPubgFmtDetail >*
TPubgGetEnemyInfoRsp::mutable_arrfmt() {
  // @@protoc_insertion_point(field_mutable_list:pb.TPubgGetEnemyInfoRsp.ArrFmt)
  return &arrfmt_;
}

// optional uint32 Htid = 2;
inline bool TPubgGetEnemyInfoRsp::has_htid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TPubgGetEnemyInfoRsp::set_has_htid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TPubgGetEnemyInfoRsp::clear_has_htid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TPubgGetEnemyInfoRsp::clear_htid() {
  htid_ = 0u;
  clear_has_htid();
}
inline ::google::protobuf::uint32 TPubgGetEnemyInfoRsp::htid() const {
  // @@protoc_insertion_point(field_get:pb.TPubgGetEnemyInfoRsp.Htid)
  return htid_;
}
inline void TPubgGetEnemyInfoRsp::set_htid(::google::protobuf::uint32 value) {
  set_has_htid();
  htid_ = value;
  // @@protoc_insertion_point(field_set:pb.TPubgGetEnemyInfoRsp.Htid)
}

// optional uint64 FightForce = 3;
inline bool TPubgGetEnemyInfoRsp::has_fightforce() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void TPubgGetEnemyInfoRsp::set_has_fightforce() {
  _has_bits_[0] |= 0x00000004u;
}
inline void TPubgGetEnemyInfoRsp::clear_has_fightforce() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void TPubgGetEnemyInfoRsp::clear_fightforce() {
  fightforce_ = GOOGLE_ULONGLONG(0);
  clear_has_fightforce();
}
inline ::google::protobuf::uint64 TPubgGetEnemyInfoRsp::fightforce() const {
  // @@protoc_insertion_point(field_get:pb.TPubgGetEnemyInfoRsp.FightForce)
  return fightforce_;
}
inline void TPubgGetEnemyInfoRsp::set_fightforce(::google::protobuf::uint64 value) {
  set_has_fightforce();
  fightforce_ = value;
  // @@protoc_insertion_point(field_set:pb.TPubgGetEnemyInfoRsp.FightForce)
}

// optional uint32 PlayerImageFrameTid = 4;
inline bool TPubgGetEnemyInfoRsp::has_playerimageframetid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void TPubgGetEnemyInfoRsp::set_has_playerimageframetid() {
  _has_bits_[0] |= 0x00000008u;
}
inline void TPubgGetEnemyInfoRsp::clear_has_playerimageframetid() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void TPubgGetEnemyInfoRsp::clear_playerimageframetid() {
  playerimageframetid_ = 0u;
  clear_has_playerimageframetid();
}
inline ::google::protobuf::uint32 TPubgGetEnemyInfoRsp::playerimageframetid() const {
  // @@protoc_insertion_point(field_get:pb.TPubgGetEnemyInfoRsp.PlayerImageFrameTid)
  return playerimageframetid_;
}
inline void TPubgGetEnemyInfoRsp::set_playerimageframetid(::google::protobuf::uint32 value) {
  set_has_playerimageframetid();
  playerimageframetid_ = value;
  // @@protoc_insertion_point(field_set:pb.TPubgGetEnemyInfoRsp.PlayerImageFrameTid)
}

// -------------------------------------------------------------------

// TPubgBuyTokenReq

// optional uint32 BuyNum = 1;
inline bool TPubgBuyTokenReq::has_buynum() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TPubgBuyTokenReq::set_has_buynum() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TPubgBuyTokenReq::clear_has_buynum() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TPubgBuyTokenReq::clear_buynum() {
  buynum_ = 0u;
  clear_has_buynum();
}
inline ::google::protobuf::uint32 TPubgBuyTokenReq::buynum() const {
  // @@protoc_insertion_point(field_get:pb.TPubgBuyTokenReq.BuyNum)
  return buynum_;
}
inline void TPubgBuyTokenReq::set_buynum(::google::protobuf::uint32 value) {
  set_has_buynum();
  buynum_ = value;
  // @@protoc_insertion_point(field_set:pb.TPubgBuyTokenReq.BuyNum)
}

// -------------------------------------------------------------------

// TPubgBuyTokenRsp

// optional uint32 TokenNum = 1;
inline bool TPubgBuyTokenRsp::has_tokennum() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TPubgBuyTokenRsp::set_has_tokennum() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TPubgBuyTokenRsp::clear_has_tokennum() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TPubgBuyTokenRsp::clear_tokennum() {
  tokennum_ = 0u;
  clear_has_tokennum();
}
inline ::google::protobuf::uint32 TPubgBuyTokenRsp::tokennum() const {
  // @@protoc_insertion_point(field_get:pb.TPubgBuyTokenRsp.TokenNum)
  return tokennum_;
}
inline void TPubgBuyTokenRsp::set_tokennum(::google::protobuf::uint32 value) {
  set_has_tokennum();
  tokennum_ = value;
  // @@protoc_insertion_point(field_set:pb.TPubgBuyTokenRsp.TokenNum)
}

// -------------------------------------------------------------------

// TPubgGetBattleRecordReq

// optional uint32 Offset = 1;
inline bool TPubgGetBattleRecordReq::has_offset() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TPubgGetBattleRecordReq::set_has_offset() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TPubgGetBattleRecordReq::clear_has_offset() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TPubgGetBattleRecordReq::clear_offset() {
  offset_ = 0u;
  clear_has_offset();
}
inline ::google::protobuf::uint32 TPubgGetBattleRecordReq::offset() const {
  // @@protoc_insertion_point(field_get:pb.TPubgGetBattleRecordReq.Offset)
  return offset_;
}
inline void TPubgGetBattleRecordReq::set_offset(::google::protobuf::uint32 value) {
  set_has_offset();
  offset_ = value;
  // @@protoc_insertion_point(field_set:pb.TPubgGetBattleRecordReq.Offset)
}

// optional uint32 Limit = 2;
inline bool TPubgGetBattleRecordReq::has_limit() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TPubgGetBattleRecordReq::set_has_limit() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TPubgGetBattleRecordReq::clear_has_limit() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TPubgGetBattleRecordReq::clear_limit() {
  limit_ = 0u;
  clear_has_limit();
}
inline ::google::protobuf::uint32 TPubgGetBattleRecordReq::limit() const {
  // @@protoc_insertion_point(field_get:pb.TPubgGetBattleRecordReq.Limit)
  return limit_;
}
inline void TPubgGetBattleRecordReq::set_limit(::google::protobuf::uint32 value) {
  set_has_limit();
  limit_ = value;
  // @@protoc_insertion_point(field_set:pb.TPubgGetBattleRecordReq.Limit)
}

// -------------------------------------------------------------------

// TPubgGetBattleRecordRsp

// repeated .pb.TPubgBattleRecord BattleRecordArr = 1;
inline int TPubgGetBattleRecordRsp::battlerecordarr_size() const {
  return battlerecordarr_.size();
}
inline void TPubgGetBattleRecordRsp::clear_battlerecordarr() {
  battlerecordarr_.Clear();
}
inline const ::pb::TPubgBattleRecord& TPubgGetBattleRecordRsp::battlerecordarr(int index) const {
  // @@protoc_insertion_point(field_get:pb.TPubgGetBattleRecordRsp.BattleRecordArr)
  return battlerecordarr_.Get(index);
}
inline ::pb::TPubgBattleRecord* TPubgGetBattleRecordRsp::mutable_battlerecordarr(int index) {
  // @@protoc_insertion_point(field_mutable:pb.TPubgGetBattleRecordRsp.BattleRecordArr)
  return battlerecordarr_.Mutable(index);
}
inline ::pb::TPubgBattleRecord* TPubgGetBattleRecordRsp::add_battlerecordarr() {
  // @@protoc_insertion_point(field_add:pb.TPubgGetBattleRecordRsp.BattleRecordArr)
  return battlerecordarr_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::TPubgBattleRecord >&
TPubgGetBattleRecordRsp::battlerecordarr() const {
  // @@protoc_insertion_point(field_list:pb.TPubgGetBattleRecordRsp.BattleRecordArr)
  return battlerecordarr_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb::TPubgBattleRecord >*
TPubgGetBattleRecordRsp::mutable_battlerecordarr() {
  // @@protoc_insertion_point(field_mutable_list:pb.TPubgGetBattleRecordRsp.BattleRecordArr)
  return &battlerecordarr_;
}

// -------------------------------------------------------------------

// TPubgGetServerTeamInfoRsp

// optional uint32 ServerTeamId = 1;
inline bool TPubgGetServerTeamInfoRsp::has_serverteamid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TPubgGetServerTeamInfoRsp::set_has_serverteamid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TPubgGetServerTeamInfoRsp::clear_has_serverteamid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TPubgGetServerTeamInfoRsp::clear_serverteamid() {
  serverteamid_ = 0u;
  clear_has_serverteamid();
}
inline ::google::protobuf::uint32 TPubgGetServerTeamInfoRsp::serverteamid() const {
  // @@protoc_insertion_point(field_get:pb.TPubgGetServerTeamInfoRsp.ServerTeamId)
  return serverteamid_;
}
inline void TPubgGetServerTeamInfoRsp::set_serverteamid(::google::protobuf::uint32 value) {
  set_has_serverteamid();
  serverteamid_ = value;
  // @@protoc_insertion_point(field_set:pb.TPubgGetServerTeamInfoRsp.ServerTeamId)
}

// -------------------------------------------------------------------

// TPubgBattleNotify

// optional .pb.TPubgBattleRecord Battle = 1;
inline bool TPubgBattleNotify::has_battle() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TPubgBattleNotify::set_has_battle() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TPubgBattleNotify::clear_has_battle() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TPubgBattleNotify::clear_battle() {
  if (battle_ != NULL) battle_->::pb::TPubgBattleRecord::Clear();
  clear_has_battle();
}
inline const ::pb::TPubgBattleRecord& TPubgBattleNotify::battle() const {
  // @@protoc_insertion_point(field_get:pb.TPubgBattleNotify.Battle)
  return battle_ != NULL ? *battle_ : *default_instance_->battle_;
}
inline ::pb::TPubgBattleRecord* TPubgBattleNotify::mutable_battle() {
  set_has_battle();
  if (battle_ == NULL) battle_ = new ::pb::TPubgBattleRecord;
  // @@protoc_insertion_point(field_mutable:pb.TPubgBattleNotify.Battle)
  return battle_;
}
inline ::pb::TPubgBattleRecord* TPubgBattleNotify::release_battle() {
  clear_has_battle();
  ::pb::TPubgBattleRecord* temp = battle_;
  battle_ = NULL;
  return temp;
}
inline void TPubgBattleNotify::set_allocated_battle(::pb::TPubgBattleRecord* battle) {
  delete battle_;
  battle_ = battle;
  if (battle) {
    set_has_battle();
  } else {
    clear_has_battle();
  }
  // @@protoc_insertion_point(field_set_allocated:pb.TPubgBattleNotify.Battle)
}

// optional string FieldId = 2;
inline bool TPubgBattleNotify::has_fieldid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TPubgBattleNotify::set_has_fieldid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TPubgBattleNotify::clear_has_fieldid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TPubgBattleNotify::clear_fieldid() {
  if (fieldid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    fieldid_->clear();
  }
  clear_has_fieldid();
}
inline const ::std::string& TPubgBattleNotify::fieldid() const {
  // @@protoc_insertion_point(field_get:pb.TPubgBattleNotify.FieldId)
  return *fieldid_;
}
inline void TPubgBattleNotify::set_fieldid(const ::std::string& value) {
  set_has_fieldid();
  if (fieldid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    fieldid_ = new ::std::string;
  }
  fieldid_->assign(value);
  // @@protoc_insertion_point(field_set:pb.TPubgBattleNotify.FieldId)
}
inline void TPubgBattleNotify::set_fieldid(const char* value) {
  set_has_fieldid();
  if (fieldid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    fieldid_ = new ::std::string;
  }
  fieldid_->assign(value);
  // @@protoc_insertion_point(field_set_char:pb.TPubgBattleNotify.FieldId)
}
inline void TPubgBattleNotify::set_fieldid(const char* value, size_t size) {
  set_has_fieldid();
  if (fieldid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    fieldid_ = new ::std::string;
  }
  fieldid_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:pb.TPubgBattleNotify.FieldId)
}
inline ::std::string* TPubgBattleNotify::mutable_fieldid() {
  set_has_fieldid();
  if (fieldid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    fieldid_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:pb.TPubgBattleNotify.FieldId)
  return fieldid_;
}
inline ::std::string* TPubgBattleNotify::release_fieldid() {
  clear_has_fieldid();
  if (fieldid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = fieldid_;
    fieldid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void TPubgBattleNotify::set_allocated_fieldid(::std::string* fieldid) {
  if (fieldid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete fieldid_;
  }
  if (fieldid) {
    set_has_fieldid();
    fieldid_ = fieldid;
  } else {
    clear_has_fieldid();
    fieldid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:pb.TPubgBattleNotify.FieldId)
}

// -------------------------------------------------------------------

// TPubgOutOwner

// optional .pb.TPubgLocation Location = 1;
inline bool TPubgOutOwner::has_location() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TPubgOutOwner::set_has_location() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TPubgOutOwner::clear_has_location() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TPubgOutOwner::clear_location() {
  if (location_ != NULL) location_->::pb::TPubgLocation::Clear();
  clear_has_location();
}
inline const ::pb::TPubgLocation& TPubgOutOwner::location() const {
  // @@protoc_insertion_point(field_get:pb.TPubgOutOwner.Location)
  return location_ != NULL ? *location_ : *default_instance_->location_;
}
inline ::pb::TPubgLocation* TPubgOutOwner::mutable_location() {
  set_has_location();
  if (location_ == NULL) location_ = new ::pb::TPubgLocation;
  // @@protoc_insertion_point(field_mutable:pb.TPubgOutOwner.Location)
  return location_;
}
inline ::pb::TPubgLocation* TPubgOutOwner::release_location() {
  clear_has_location();
  ::pb::TPubgLocation* temp = location_;
  location_ = NULL;
  return temp;
}
inline void TPubgOutOwner::set_allocated_location(::pb::TPubgLocation* location) {
  delete location_;
  location_ = location;
  if (location) {
    set_has_location();
  } else {
    clear_has_location();
  }
  // @@protoc_insertion_point(field_set_allocated:pb.TPubgOutOwner.Location)
}

// optional uint64 OwnerId = 2;
inline bool TPubgOutOwner::has_ownerid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TPubgOutOwner::set_has_ownerid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TPubgOutOwner::clear_has_ownerid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TPubgOutOwner::clear_ownerid() {
  ownerid_ = GOOGLE_ULONGLONG(0);
  clear_has_ownerid();
}
inline ::google::protobuf::uint64 TPubgOutOwner::ownerid() const {
  // @@protoc_insertion_point(field_get:pb.TPubgOutOwner.OwnerId)
  return ownerid_;
}
inline void TPubgOutOwner::set_ownerid(::google::protobuf::uint64 value) {
  set_has_ownerid();
  ownerid_ = value;
  // @@protoc_insertion_point(field_set:pb.TPubgOutOwner.OwnerId)
}

// -------------------------------------------------------------------

// TPubgOutNotify

// repeated .pb.TPubgOutOwner ArrOwner = 1;
inline int TPubgOutNotify::arrowner_size() const {
  return arrowner_.size();
}
inline void TPubgOutNotify::clear_arrowner() {
  arrowner_.Clear();
}
inline const ::pb::TPubgOutOwner& TPubgOutNotify::arrowner(int index) const {
  // @@protoc_insertion_point(field_get:pb.TPubgOutNotify.ArrOwner)
  return arrowner_.Get(index);
}
inline ::pb::TPubgOutOwner* TPubgOutNotify::mutable_arrowner(int index) {
  // @@protoc_insertion_point(field_mutable:pb.TPubgOutNotify.ArrOwner)
  return arrowner_.Mutable(index);
}
inline ::pb::TPubgOutOwner* TPubgOutNotify::add_arrowner() {
  // @@protoc_insertion_point(field_add:pb.TPubgOutNotify.ArrOwner)
  return arrowner_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::TPubgOutOwner >&
TPubgOutNotify::arrowner() const {
  // @@protoc_insertion_point(field_list:pb.TPubgOutNotify.ArrOwner)
  return arrowner_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb::TPubgOutOwner >*
TPubgOutNotify::mutable_arrowner() {
  // @@protoc_insertion_point(field_mutable_list:pb.TPubgOutNotify.ArrOwner)
  return &arrowner_;
}

// -------------------------------------------------------------------

// TPubgWinnerNotify

// optional .pb.TPubgChickenEaterInfo ChickenEaterInfo = 1;
inline bool TPubgWinnerNotify::has_chickeneaterinfo() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TPubgWinnerNotify::set_has_chickeneaterinfo() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TPubgWinnerNotify::clear_has_chickeneaterinfo() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TPubgWinnerNotify::clear_chickeneaterinfo() {
  if (chickeneaterinfo_ != NULL) chickeneaterinfo_->::pb::TPubgChickenEaterInfo::Clear();
  clear_has_chickeneaterinfo();
}
inline const ::pb::TPubgChickenEaterInfo& TPubgWinnerNotify::chickeneaterinfo() const {
  // @@protoc_insertion_point(field_get:pb.TPubgWinnerNotify.ChickenEaterInfo)
  return chickeneaterinfo_ != NULL ? *chickeneaterinfo_ : *default_instance_->chickeneaterinfo_;
}
inline ::pb::TPubgChickenEaterInfo* TPubgWinnerNotify::mutable_chickeneaterinfo() {
  set_has_chickeneaterinfo();
  if (chickeneaterinfo_ == NULL) chickeneaterinfo_ = new ::pb::TPubgChickenEaterInfo;
  // @@protoc_insertion_point(field_mutable:pb.TPubgWinnerNotify.ChickenEaterInfo)
  return chickeneaterinfo_;
}
inline ::pb::TPubgChickenEaterInfo* TPubgWinnerNotify::release_chickeneaterinfo() {
  clear_has_chickeneaterinfo();
  ::pb::TPubgChickenEaterInfo* temp = chickeneaterinfo_;
  chickeneaterinfo_ = NULL;
  return temp;
}
inline void TPubgWinnerNotify::set_allocated_chickeneaterinfo(::pb::TPubgChickenEaterInfo* chickeneaterinfo) {
  delete chickeneaterinfo_;
  chickeneaterinfo_ = chickeneaterinfo;
  if (chickeneaterinfo) {
    set_has_chickeneaterinfo();
  } else {
    clear_has_chickeneaterinfo();
  }
  // @@protoc_insertion_point(field_set_allocated:pb.TPubgWinnerNotify.ChickenEaterInfo)
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace pb

#ifndef SWIG
namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::pb::EPubgStage> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::pb::EPubgStage>() {
  return ::pb::EPubgStage_descriptor();
}
template <> struct is_proto_enum< ::pb::EPubgStatus> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::pb::EPubgStatus>() {
  return ::pb::EPubgStatus_descriptor();
}
template <> struct is_proto_enum< ::pb::EPubgFieldType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::pb::EPubgFieldType>() {
  return ::pb::EPubgFieldType_descriptor();
}
template <> struct is_proto_enum< ::pb::EPubgSettleType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::pb::EPubgSettleType>() {
  return ::pb::EPubgSettleType_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_net_2fPubg_2eproto__INCLUDED
