// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: net/TreasureMap.proto

#ifndef PROTOBUF_net_2fTreasureMap_2eproto__INCLUDED
#define PROTOBUF_net_2fTreasureMap_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
#include "net/Common.pb.h"
#include "net/CommonReward.pb.h"
// @@protoc_insertion_point(includes)

namespace pb {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_net_2fTreasureMap_2eproto();
void protobuf_AssignDesc_net_2fTreasureMap_2eproto();
void protobuf_ShutdownFile_net_2fTreasureMap_2eproto();

class TTreasureMapGetInfoRsp;
class TTreasureMapTriggerTreasureMapReq;
class TTreasureMapTriggerTreasureMapRsp;
class TTreasureMapNotify;
class TGuildTreasureMapNotify;

// ===================================================================

/*FOR2LUA
<Record>
	<name>TTreasureMapGetInfoRsp</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/TreasureMap.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TTreasureMapGetInfoRsp : public ::google::protobuf::Message {
 public:
  TTreasureMapGetInfoRsp();
  virtual ~TTreasureMapGetInfoRsp();

  TTreasureMapGetInfoRsp(const TTreasureMapGetInfoRsp& from);

  inline TTreasureMapGetInfoRsp& operator=(const TTreasureMapGetInfoRsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TTreasureMapGetInfoRsp& default_instance();

  void Swap(TTreasureMapGetInfoRsp* other);

  // implements Message ----------------------------------------------

  TTreasureMapGetInfoRsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TTreasureMapGetInfoRsp& from);
  void MergeFrom(const TTreasureMapGetInfoRsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .pb.TSimpleItem ActiveTreasureMapItem = 1;
  inline bool has_activetreasuremapitem() const;
  inline void clear_activetreasuremapitem();
  static const int kActiveTreasureMapItemFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TTreasureMapGetInfoRsp</name>
  	<Function>
  		<name>activetreasuremapitem</name>
  		<replaceName>ActiveTreasureMapItem</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_activetreasuremapitem</name>
  		<replaceName>ActiveTreasureMapItem</replaceName>
  		<handler>descripter = pb_set_message_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_allocated_activetreasuremapitem</name>
  		<replaceName>ActiveTreasureMapItem</replaceName>
  		<handler>descripter = pb_set_message_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_activetreasuremapitem</name>
  		<replaceName>ActiveTreasureMapItem</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TSimpleItem& activetreasuremapitem() const;
  inline ::pb::TSimpleItem* mutable_activetreasuremapitem();
  inline ::pb::TSimpleItem* release_activetreasuremapitem();
  inline void set_allocated_activetreasuremapitem(::pb::TSimpleItem* activetreasuremapitem);

  // repeated uint32 ArrSelfMysteriousItem = 2;
  inline int arrselfmysteriousitem_size() const;
  inline void clear_arrselfmysteriousitem();
  static const int kArrSelfMysteriousItemFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TTreasureMapGetInfoRsp</name>
  	<Function>
  		<name>arrselfmysteriousitem</name>
  		<replaceName>ArrSelfMysteriousItem</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_arrselfmysteriousitem</name>
  		<replaceName>ArrSelfMysteriousItem</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_arrselfmysteriousitem</name>
  		<replaceName>ArrSelfMysteriousItem</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_arrselfmysteriousitem</name>
  		<replaceName>ArrSelfMysteriousItem</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>arrselfmysteriousitem_size</name>
  		<replaceName>ArrSelfMysteriousItem</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 arrselfmysteriousitem(int index) const;
  inline void set_arrselfmysteriousitem(int index, ::google::protobuf::uint32 value);
  inline void add_arrselfmysteriousitem(::google::protobuf::uint32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      arrselfmysteriousitem() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_arrselfmysteriousitem();

  // repeated uint32 ArrGuildMysteriousItem = 3;
  inline int arrguildmysteriousitem_size() const;
  inline void clear_arrguildmysteriousitem();
  static const int kArrGuildMysteriousItemFieldNumber = 3;
  /*FOR2LUA
  <Record>
  	<name>TTreasureMapGetInfoRsp</name>
  	<Function>
  		<name>arrguildmysteriousitem</name>
  		<replaceName>ArrGuildMysteriousItem</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_arrguildmysteriousitem</name>
  		<replaceName>ArrGuildMysteriousItem</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_arrguildmysteriousitem</name>
  		<replaceName>ArrGuildMysteriousItem</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_arrguildmysteriousitem</name>
  		<replaceName>ArrGuildMysteriousItem</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>arrguildmysteriousitem_size</name>
  		<replaceName>ArrGuildMysteriousItem</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 arrguildmysteriousitem(int index) const;
  inline void set_arrguildmysteriousitem(int index, ::google::protobuf::uint32 value);
  inline void add_arrguildmysteriousitem(::google::protobuf::uint32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      arrguildmysteriousitem() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_arrguildmysteriousitem();

  // @@protoc_insertion_point(class_scope:pb.TTreasureMapGetInfoRsp)
 private:
  inline void set_has_activetreasuremapitem();
  inline void clear_has_activetreasuremapitem();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::pb::TSimpleItem* activetreasuremapitem_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > arrselfmysteriousitem_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > arrguildmysteriousitem_;
  friend void  protobuf_AddDesc_net_2fTreasureMap_2eproto();
  friend void protobuf_AssignDesc_net_2fTreasureMap_2eproto();
  friend void protobuf_ShutdownFile_net_2fTreasureMap_2eproto();

  void InitAsDefaultInstance();
  static TTreasureMapGetInfoRsp* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TTreasureMapTriggerTreasureMapReq</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/TreasureMap.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TTreasureMapTriggerTreasureMapReq : public ::google::protobuf::Message {
 public:
  TTreasureMapTriggerTreasureMapReq();
  virtual ~TTreasureMapTriggerTreasureMapReq();

  TTreasureMapTriggerTreasureMapReq(const TTreasureMapTriggerTreasureMapReq& from);

  inline TTreasureMapTriggerTreasureMapReq& operator=(const TTreasureMapTriggerTreasureMapReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TTreasureMapTriggerTreasureMapReq& default_instance();

  void Swap(TTreasureMapTriggerTreasureMapReq* other);

  // implements Message ----------------------------------------------

  TTreasureMapTriggerTreasureMapReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TTreasureMapTriggerTreasureMapReq& from);
  void MergeFrom(const TTreasureMapTriggerTreasureMapReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 TreasureMapId = 1;
  inline bool has_treasuremapid() const;
  inline void clear_treasuremapid();
  static const int kTreasureMapIdFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TTreasureMapTriggerTreasureMapReq</name>
  	<Function>
  		<name>treasuremapid</name>
  		<replaceName>TreasureMapId</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_treasuremapid</name>
  		<replaceName>TreasureMapId</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_treasuremapid</name>
  		<replaceName>TreasureMapId</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 treasuremapid() const;
  inline void set_treasuremapid(::google::protobuf::uint32 value);

  // optional string InterActItemName = 2;
  inline bool has_interactitemname() const;
  inline void clear_interactitemname();
  static const int kInterActItemNameFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TTreasureMapTriggerTreasureMapReq</name>
  	<Function>
  		<name>interactitemname</name>
  		<replaceName>InterActItemName</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_interactitemname</name>
  		<replaceName>InterActItemName</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_interactitemname</name>
  		<replaceName>InterActItemName</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::std::string& interactitemname() const;
  inline void set_interactitemname(const ::std::string& value);
  inline void set_interactitemname(const char* value);
  inline void set_interactitemname(const char* value, size_t size);
  inline ::std::string* mutable_interactitemname();
  inline ::std::string* release_interactitemname();
  inline void set_allocated_interactitemname(::std::string* interactitemname);

  // @@protoc_insertion_point(class_scope:pb.TTreasureMapTriggerTreasureMapReq)
 private:
  inline void set_has_treasuremapid();
  inline void clear_has_treasuremapid();
  inline void set_has_interactitemname();
  inline void clear_has_interactitemname();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* interactitemname_;
  ::google::protobuf::uint32 treasuremapid_;
  friend void  protobuf_AddDesc_net_2fTreasureMap_2eproto();
  friend void protobuf_AssignDesc_net_2fTreasureMap_2eproto();
  friend void protobuf_ShutdownFile_net_2fTreasureMap_2eproto();

  void InitAsDefaultInstance();
  static TTreasureMapTriggerTreasureMapReq* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TTreasureMapTriggerTreasureMapRsp</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/TreasureMap.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TTreasureMapTriggerTreasureMapRsp : public ::google::protobuf::Message {
 public:
  TTreasureMapTriggerTreasureMapRsp();
  virtual ~TTreasureMapTriggerTreasureMapRsp();

  TTreasureMapTriggerTreasureMapRsp(const TTreasureMapTriggerTreasureMapRsp& from);

  inline TTreasureMapTriggerTreasureMapRsp& operator=(const TTreasureMapTriggerTreasureMapRsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TTreasureMapTriggerTreasureMapRsp& default_instance();

  void Swap(TTreasureMapTriggerTreasureMapRsp* other);

  // implements Message ----------------------------------------------

  TTreasureMapTriggerTreasureMapRsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TTreasureMapTriggerTreasureMapRsp& from);
  void MergeFrom(const TTreasureMapTriggerTreasureMapRsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .pb.TCommonReward RewardArray = 1;
  inline int rewardarray_size() const;
  inline void clear_rewardarray();
  static const int kRewardArrayFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TTreasureMapTriggerTreasureMapRsp</name>
  	<Function>
  		<name>rewardarray</name>
  		<replaceName>RewardArray</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_rewardarray</name>
  		<replaceName>RewardArray</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_rewardarray</name>
  		<replaceName>RewardArray</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_rewardarray</name>
  		<replaceName>RewardArray</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>rewardarray_size</name>
  		<replaceName>RewardArray</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TCommonReward& rewardarray(int index) const;
  inline ::pb::TCommonReward* mutable_rewardarray(int index);
  inline ::pb::TCommonReward* add_rewardarray();
  inline const ::google::protobuf::RepeatedPtrField< ::pb::TCommonReward >&
      rewardarray() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb::TCommonReward >*
      mutable_rewardarray();

  // optional uint32 EventId = 2;
  inline bool has_eventid() const;
  inline void clear_eventid();
  static const int kEventIdFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TTreasureMapTriggerTreasureMapRsp</name>
  	<Function>
  		<name>eventid</name>
  		<replaceName>EventId</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_eventid</name>
  		<replaceName>EventId</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_eventid</name>
  		<replaceName>EventId</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 eventid() const;
  inline void set_eventid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:pb.TTreasureMapTriggerTreasureMapRsp)
 private:
  inline void set_has_eventid();
  inline void clear_has_eventid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::pb::TCommonReward > rewardarray_;
  ::google::protobuf::uint32 eventid_;
  friend void  protobuf_AddDesc_net_2fTreasureMap_2eproto();
  friend void protobuf_AssignDesc_net_2fTreasureMap_2eproto();
  friend void protobuf_ShutdownFile_net_2fTreasureMap_2eproto();

  void InitAsDefaultInstance();
  static TTreasureMapTriggerTreasureMapRsp* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TTreasureMapNotify</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/TreasureMap.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TTreasureMapNotify : public ::google::protobuf::Message {
 public:
  TTreasureMapNotify();
  virtual ~TTreasureMapNotify();

  TTreasureMapNotify(const TTreasureMapNotify& from);

  inline TTreasureMapNotify& operator=(const TTreasureMapNotify& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TTreasureMapNotify& default_instance();

  void Swap(TTreasureMapNotify* other);

  // implements Message ----------------------------------------------

  TTreasureMapNotify* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TTreasureMapNotify& from);
  void MergeFrom(const TTreasureMapNotify& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .pb.TSimpleItem ActiveTreasureMapItem = 1;
  inline bool has_activetreasuremapitem() const;
  inline void clear_activetreasuremapitem();
  static const int kActiveTreasureMapItemFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TTreasureMapNotify</name>
  	<Function>
  		<name>activetreasuremapitem</name>
  		<replaceName>ActiveTreasureMapItem</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_activetreasuremapitem</name>
  		<replaceName>ActiveTreasureMapItem</replaceName>
  		<handler>descripter = pb_set_message_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_allocated_activetreasuremapitem</name>
  		<replaceName>ActiveTreasureMapItem</replaceName>
  		<handler>descripter = pb_set_message_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_activetreasuremapitem</name>
  		<replaceName>ActiveTreasureMapItem</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TSimpleItem& activetreasuremapitem() const;
  inline ::pb::TSimpleItem* mutable_activetreasuremapitem();
  inline ::pb::TSimpleItem* release_activetreasuremapitem();
  inline void set_allocated_activetreasuremapitem(::pb::TSimpleItem* activetreasuremapitem);

  // repeated uint32 ArrSelfMysteriousItem = 2;
  inline int arrselfmysteriousitem_size() const;
  inline void clear_arrselfmysteriousitem();
  static const int kArrSelfMysteriousItemFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TTreasureMapNotify</name>
  	<Function>
  		<name>arrselfmysteriousitem</name>
  		<replaceName>ArrSelfMysteriousItem</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_arrselfmysteriousitem</name>
  		<replaceName>ArrSelfMysteriousItem</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_arrselfmysteriousitem</name>
  		<replaceName>ArrSelfMysteriousItem</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_arrselfmysteriousitem</name>
  		<replaceName>ArrSelfMysteriousItem</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>arrselfmysteriousitem_size</name>
  		<replaceName>ArrSelfMysteriousItem</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 arrselfmysteriousitem(int index) const;
  inline void set_arrselfmysteriousitem(int index, ::google::protobuf::uint32 value);
  inline void add_arrselfmysteriousitem(::google::protobuf::uint32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      arrselfmysteriousitem() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_arrselfmysteriousitem();

  // @@protoc_insertion_point(class_scope:pb.TTreasureMapNotify)
 private:
  inline void set_has_activetreasuremapitem();
  inline void clear_has_activetreasuremapitem();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::pb::TSimpleItem* activetreasuremapitem_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > arrselfmysteriousitem_;
  friend void  protobuf_AddDesc_net_2fTreasureMap_2eproto();
  friend void protobuf_AssignDesc_net_2fTreasureMap_2eproto();
  friend void protobuf_ShutdownFile_net_2fTreasureMap_2eproto();

  void InitAsDefaultInstance();
  static TTreasureMapNotify* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TGuildTreasureMapNotify</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/TreasureMap.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TGuildTreasureMapNotify : public ::google::protobuf::Message {
 public:
  TGuildTreasureMapNotify();
  virtual ~TGuildTreasureMapNotify();

  TGuildTreasureMapNotify(const TGuildTreasureMapNotify& from);

  inline TGuildTreasureMapNotify& operator=(const TGuildTreasureMapNotify& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TGuildTreasureMapNotify& default_instance();

  void Swap(TGuildTreasureMapNotify* other);

  // implements Message ----------------------------------------------

  TGuildTreasureMapNotify* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TGuildTreasureMapNotify& from);
  void MergeFrom(const TGuildTreasureMapNotify& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated uint32 ArrGuildMysteriousItem = 1;
  inline int arrguildmysteriousitem_size() const;
  inline void clear_arrguildmysteriousitem();
  static const int kArrGuildMysteriousItemFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TGuildTreasureMapNotify</name>
  	<Function>
  		<name>arrguildmysteriousitem</name>
  		<replaceName>ArrGuildMysteriousItem</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_arrguildmysteriousitem</name>
  		<replaceName>ArrGuildMysteriousItem</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_arrguildmysteriousitem</name>
  		<replaceName>ArrGuildMysteriousItem</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_arrguildmysteriousitem</name>
  		<replaceName>ArrGuildMysteriousItem</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>arrguildmysteriousitem_size</name>
  		<replaceName>ArrGuildMysteriousItem</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 arrguildmysteriousitem(int index) const;
  inline void set_arrguildmysteriousitem(int index, ::google::protobuf::uint32 value);
  inline void add_arrguildmysteriousitem(::google::protobuf::uint32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      arrguildmysteriousitem() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_arrguildmysteriousitem();

  // @@protoc_insertion_point(class_scope:pb.TGuildTreasureMapNotify)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > arrguildmysteriousitem_;
  friend void  protobuf_AddDesc_net_2fTreasureMap_2eproto();
  friend void protobuf_AssignDesc_net_2fTreasureMap_2eproto();
  friend void protobuf_ShutdownFile_net_2fTreasureMap_2eproto();

  void InitAsDefaultInstance();
  static TGuildTreasureMapNotify* default_instance_;
};
// ===================================================================


// ===================================================================

// TTreasureMapGetInfoRsp

// optional .pb.TSimpleItem ActiveTreasureMapItem = 1;
inline bool TTreasureMapGetInfoRsp::has_activetreasuremapitem() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TTreasureMapGetInfoRsp::set_has_activetreasuremapitem() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TTreasureMapGetInfoRsp::clear_has_activetreasuremapitem() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TTreasureMapGetInfoRsp::clear_activetreasuremapitem() {
  if (activetreasuremapitem_ != NULL) activetreasuremapitem_->::pb::TSimpleItem::Clear();
  clear_has_activetreasuremapitem();
}
inline const ::pb::TSimpleItem& TTreasureMapGetInfoRsp::activetreasuremapitem() const {
  // @@protoc_insertion_point(field_get:pb.TTreasureMapGetInfoRsp.ActiveTreasureMapItem)
  return activetreasuremapitem_ != NULL ? *activetreasuremapitem_ : *default_instance_->activetreasuremapitem_;
}
inline ::pb::TSimpleItem* TTreasureMapGetInfoRsp::mutable_activetreasuremapitem() {
  set_has_activetreasuremapitem();
  if (activetreasuremapitem_ == NULL) activetreasuremapitem_ = new ::pb::TSimpleItem;
  // @@protoc_insertion_point(field_mutable:pb.TTreasureMapGetInfoRsp.ActiveTreasureMapItem)
  return activetreasuremapitem_;
}
inline ::pb::TSimpleItem* TTreasureMapGetInfoRsp::release_activetreasuremapitem() {
  clear_has_activetreasuremapitem();
  ::pb::TSimpleItem* temp = activetreasuremapitem_;
  activetreasuremapitem_ = NULL;
  return temp;
}
inline void TTreasureMapGetInfoRsp::set_allocated_activetreasuremapitem(::pb::TSimpleItem* activetreasuremapitem) {
  delete activetreasuremapitem_;
  activetreasuremapitem_ = activetreasuremapitem;
  if (activetreasuremapitem) {
    set_has_activetreasuremapitem();
  } else {
    clear_has_activetreasuremapitem();
  }
  // @@protoc_insertion_point(field_set_allocated:pb.TTreasureMapGetInfoRsp.ActiveTreasureMapItem)
}

// repeated uint32 ArrSelfMysteriousItem = 2;
inline int TTreasureMapGetInfoRsp::arrselfmysteriousitem_size() const {
  return arrselfmysteriousitem_.size();
}
inline void TTreasureMapGetInfoRsp::clear_arrselfmysteriousitem() {
  arrselfmysteriousitem_.Clear();
}
inline ::google::protobuf::uint32 TTreasureMapGetInfoRsp::arrselfmysteriousitem(int index) const {
  // @@protoc_insertion_point(field_get:pb.TTreasureMapGetInfoRsp.ArrSelfMysteriousItem)
  return arrselfmysteriousitem_.Get(index);
}
inline void TTreasureMapGetInfoRsp::set_arrselfmysteriousitem(int index, ::google::protobuf::uint32 value) {
  arrselfmysteriousitem_.Set(index, value);
  // @@protoc_insertion_point(field_set:pb.TTreasureMapGetInfoRsp.ArrSelfMysteriousItem)
}
inline void TTreasureMapGetInfoRsp::add_arrselfmysteriousitem(::google::protobuf::uint32 value) {
  arrselfmysteriousitem_.Add(value);
  // @@protoc_insertion_point(field_add:pb.TTreasureMapGetInfoRsp.ArrSelfMysteriousItem)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
TTreasureMapGetInfoRsp::arrselfmysteriousitem() const {
  // @@protoc_insertion_point(field_list:pb.TTreasureMapGetInfoRsp.ArrSelfMysteriousItem)
  return arrselfmysteriousitem_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
TTreasureMapGetInfoRsp::mutable_arrselfmysteriousitem() {
  // @@protoc_insertion_point(field_mutable_list:pb.TTreasureMapGetInfoRsp.ArrSelfMysteriousItem)
  return &arrselfmysteriousitem_;
}

// repeated uint32 ArrGuildMysteriousItem = 3;
inline int TTreasureMapGetInfoRsp::arrguildmysteriousitem_size() const {
  return arrguildmysteriousitem_.size();
}
inline void TTreasureMapGetInfoRsp::clear_arrguildmysteriousitem() {
  arrguildmysteriousitem_.Clear();
}
inline ::google::protobuf::uint32 TTreasureMapGetInfoRsp::arrguildmysteriousitem(int index) const {
  // @@protoc_insertion_point(field_get:pb.TTreasureMapGetInfoRsp.ArrGuildMysteriousItem)
  return arrguildmysteriousitem_.Get(index);
}
inline void TTreasureMapGetInfoRsp::set_arrguildmysteriousitem(int index, ::google::protobuf::uint32 value) {
  arrguildmysteriousitem_.Set(index, value);
  // @@protoc_insertion_point(field_set:pb.TTreasureMapGetInfoRsp.ArrGuildMysteriousItem)
}
inline void TTreasureMapGetInfoRsp::add_arrguildmysteriousitem(::google::protobuf::uint32 value) {
  arrguildmysteriousitem_.Add(value);
  // @@protoc_insertion_point(field_add:pb.TTreasureMapGetInfoRsp.ArrGuildMysteriousItem)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
TTreasureMapGetInfoRsp::arrguildmysteriousitem() const {
  // @@protoc_insertion_point(field_list:pb.TTreasureMapGetInfoRsp.ArrGuildMysteriousItem)
  return arrguildmysteriousitem_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
TTreasureMapGetInfoRsp::mutable_arrguildmysteriousitem() {
  // @@protoc_insertion_point(field_mutable_list:pb.TTreasureMapGetInfoRsp.ArrGuildMysteriousItem)
  return &arrguildmysteriousitem_;
}

// -------------------------------------------------------------------

// TTreasureMapTriggerTreasureMapReq

// optional uint32 TreasureMapId = 1;
inline bool TTreasureMapTriggerTreasureMapReq::has_treasuremapid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TTreasureMapTriggerTreasureMapReq::set_has_treasuremapid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TTreasureMapTriggerTreasureMapReq::clear_has_treasuremapid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TTreasureMapTriggerTreasureMapReq::clear_treasuremapid() {
  treasuremapid_ = 0u;
  clear_has_treasuremapid();
}
inline ::google::protobuf::uint32 TTreasureMapTriggerTreasureMapReq::treasuremapid() const {
  // @@protoc_insertion_point(field_get:pb.TTreasureMapTriggerTreasureMapReq.TreasureMapId)
  return treasuremapid_;
}
inline void TTreasureMapTriggerTreasureMapReq::set_treasuremapid(::google::protobuf::uint32 value) {
  set_has_treasuremapid();
  treasuremapid_ = value;
  // @@protoc_insertion_point(field_set:pb.TTreasureMapTriggerTreasureMapReq.TreasureMapId)
}

// optional string InterActItemName = 2;
inline bool TTreasureMapTriggerTreasureMapReq::has_interactitemname() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TTreasureMapTriggerTreasureMapReq::set_has_interactitemname() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TTreasureMapTriggerTreasureMapReq::clear_has_interactitemname() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TTreasureMapTriggerTreasureMapReq::clear_interactitemname() {
  if (interactitemname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    interactitemname_->clear();
  }
  clear_has_interactitemname();
}
inline const ::std::string& TTreasureMapTriggerTreasureMapReq::interactitemname() const {
  // @@protoc_insertion_point(field_get:pb.TTreasureMapTriggerTreasureMapReq.InterActItemName)
  return *interactitemname_;
}
inline void TTreasureMapTriggerTreasureMapReq::set_interactitemname(const ::std::string& value) {
  set_has_interactitemname();
  if (interactitemname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    interactitemname_ = new ::std::string;
  }
  interactitemname_->assign(value);
  // @@protoc_insertion_point(field_set:pb.TTreasureMapTriggerTreasureMapReq.InterActItemName)
}
inline void TTreasureMapTriggerTreasureMapReq::set_interactitemname(const char* value) {
  set_has_interactitemname();
  if (interactitemname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    interactitemname_ = new ::std::string;
  }
  interactitemname_->assign(value);
  // @@protoc_insertion_point(field_set_char:pb.TTreasureMapTriggerTreasureMapReq.InterActItemName)
}
inline void TTreasureMapTriggerTreasureMapReq::set_interactitemname(const char* value, size_t size) {
  set_has_interactitemname();
  if (interactitemname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    interactitemname_ = new ::std::string;
  }
  interactitemname_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:pb.TTreasureMapTriggerTreasureMapReq.InterActItemName)
}
inline ::std::string* TTreasureMapTriggerTreasureMapReq::mutable_interactitemname() {
  set_has_interactitemname();
  if (interactitemname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    interactitemname_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:pb.TTreasureMapTriggerTreasureMapReq.InterActItemName)
  return interactitemname_;
}
inline ::std::string* TTreasureMapTriggerTreasureMapReq::release_interactitemname() {
  clear_has_interactitemname();
  if (interactitemname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = interactitemname_;
    interactitemname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void TTreasureMapTriggerTreasureMapReq::set_allocated_interactitemname(::std::string* interactitemname) {
  if (interactitemname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete interactitemname_;
  }
  if (interactitemname) {
    set_has_interactitemname();
    interactitemname_ = interactitemname;
  } else {
    clear_has_interactitemname();
    interactitemname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:pb.TTreasureMapTriggerTreasureMapReq.InterActItemName)
}

// -------------------------------------------------------------------

// TTreasureMapTriggerTreasureMapRsp

// repeated .pb.TCommonReward RewardArray = 1;
inline int TTreasureMapTriggerTreasureMapRsp::rewardarray_size() const {
  return rewardarray_.size();
}
inline void TTreasureMapTriggerTreasureMapRsp::clear_rewardarray() {
  rewardarray_.Clear();
}
inline const ::pb::TCommonReward& TTreasureMapTriggerTreasureMapRsp::rewardarray(int index) const {
  // @@protoc_insertion_point(field_get:pb.TTreasureMapTriggerTreasureMapRsp.RewardArray)
  return rewardarray_.Get(index);
}
inline ::pb::TCommonReward* TTreasureMapTriggerTreasureMapRsp::mutable_rewardarray(int index) {
  // @@protoc_insertion_point(field_mutable:pb.TTreasureMapTriggerTreasureMapRsp.RewardArray)
  return rewardarray_.Mutable(index);
}
inline ::pb::TCommonReward* TTreasureMapTriggerTreasureMapRsp::add_rewardarray() {
  // @@protoc_insertion_point(field_add:pb.TTreasureMapTriggerTreasureMapRsp.RewardArray)
  return rewardarray_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::TCommonReward >&
TTreasureMapTriggerTreasureMapRsp::rewardarray() const {
  // @@protoc_insertion_point(field_list:pb.TTreasureMapTriggerTreasureMapRsp.RewardArray)
  return rewardarray_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb::TCommonReward >*
TTreasureMapTriggerTreasureMapRsp::mutable_rewardarray() {
  // @@protoc_insertion_point(field_mutable_list:pb.TTreasureMapTriggerTreasureMapRsp.RewardArray)
  return &rewardarray_;
}

// optional uint32 EventId = 2;
inline bool TTreasureMapTriggerTreasureMapRsp::has_eventid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TTreasureMapTriggerTreasureMapRsp::set_has_eventid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TTreasureMapTriggerTreasureMapRsp::clear_has_eventid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TTreasureMapTriggerTreasureMapRsp::clear_eventid() {
  eventid_ = 0u;
  clear_has_eventid();
}
inline ::google::protobuf::uint32 TTreasureMapTriggerTreasureMapRsp::eventid() const {
  // @@protoc_insertion_point(field_get:pb.TTreasureMapTriggerTreasureMapRsp.EventId)
  return eventid_;
}
inline void TTreasureMapTriggerTreasureMapRsp::set_eventid(::google::protobuf::uint32 value) {
  set_has_eventid();
  eventid_ = value;
  // @@protoc_insertion_point(field_set:pb.TTreasureMapTriggerTreasureMapRsp.EventId)
}

// -------------------------------------------------------------------

// TTreasureMapNotify

// optional .pb.TSimpleItem ActiveTreasureMapItem = 1;
inline bool TTreasureMapNotify::has_activetreasuremapitem() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TTreasureMapNotify::set_has_activetreasuremapitem() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TTreasureMapNotify::clear_has_activetreasuremapitem() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TTreasureMapNotify::clear_activetreasuremapitem() {
  if (activetreasuremapitem_ != NULL) activetreasuremapitem_->::pb::TSimpleItem::Clear();
  clear_has_activetreasuremapitem();
}
inline const ::pb::TSimpleItem& TTreasureMapNotify::activetreasuremapitem() const {
  // @@protoc_insertion_point(field_get:pb.TTreasureMapNotify.ActiveTreasureMapItem)
  return activetreasuremapitem_ != NULL ? *activetreasuremapitem_ : *default_instance_->activetreasuremapitem_;
}
inline ::pb::TSimpleItem* TTreasureMapNotify::mutable_activetreasuremapitem() {
  set_has_activetreasuremapitem();
  if (activetreasuremapitem_ == NULL) activetreasuremapitem_ = new ::pb::TSimpleItem;
  // @@protoc_insertion_point(field_mutable:pb.TTreasureMapNotify.ActiveTreasureMapItem)
  return activetreasuremapitem_;
}
inline ::pb::TSimpleItem* TTreasureMapNotify::release_activetreasuremapitem() {
  clear_has_activetreasuremapitem();
  ::pb::TSimpleItem* temp = activetreasuremapitem_;
  activetreasuremapitem_ = NULL;
  return temp;
}
inline void TTreasureMapNotify::set_allocated_activetreasuremapitem(::pb::TSimpleItem* activetreasuremapitem) {
  delete activetreasuremapitem_;
  activetreasuremapitem_ = activetreasuremapitem;
  if (activetreasuremapitem) {
    set_has_activetreasuremapitem();
  } else {
    clear_has_activetreasuremapitem();
  }
  // @@protoc_insertion_point(field_set_allocated:pb.TTreasureMapNotify.ActiveTreasureMapItem)
}

// repeated uint32 ArrSelfMysteriousItem = 2;
inline int TTreasureMapNotify::arrselfmysteriousitem_size() const {
  return arrselfmysteriousitem_.size();
}
inline void TTreasureMapNotify::clear_arrselfmysteriousitem() {
  arrselfmysteriousitem_.Clear();
}
inline ::google::protobuf::uint32 TTreasureMapNotify::arrselfmysteriousitem(int index) const {
  // @@protoc_insertion_point(field_get:pb.TTreasureMapNotify.ArrSelfMysteriousItem)
  return arrselfmysteriousitem_.Get(index);
}
inline void TTreasureMapNotify::set_arrselfmysteriousitem(int index, ::google::protobuf::uint32 value) {
  arrselfmysteriousitem_.Set(index, value);
  // @@protoc_insertion_point(field_set:pb.TTreasureMapNotify.ArrSelfMysteriousItem)
}
inline void TTreasureMapNotify::add_arrselfmysteriousitem(::google::protobuf::uint32 value) {
  arrselfmysteriousitem_.Add(value);
  // @@protoc_insertion_point(field_add:pb.TTreasureMapNotify.ArrSelfMysteriousItem)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
TTreasureMapNotify::arrselfmysteriousitem() const {
  // @@protoc_insertion_point(field_list:pb.TTreasureMapNotify.ArrSelfMysteriousItem)
  return arrselfmysteriousitem_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
TTreasureMapNotify::mutable_arrselfmysteriousitem() {
  // @@protoc_insertion_point(field_mutable_list:pb.TTreasureMapNotify.ArrSelfMysteriousItem)
  return &arrselfmysteriousitem_;
}

// -------------------------------------------------------------------

// TGuildTreasureMapNotify

// repeated uint32 ArrGuildMysteriousItem = 1;
inline int TGuildTreasureMapNotify::arrguildmysteriousitem_size() const {
  return arrguildmysteriousitem_.size();
}
inline void TGuildTreasureMapNotify::clear_arrguildmysteriousitem() {
  arrguildmysteriousitem_.Clear();
}
inline ::google::protobuf::uint32 TGuildTreasureMapNotify::arrguildmysteriousitem(int index) const {
  // @@protoc_insertion_point(field_get:pb.TGuildTreasureMapNotify.ArrGuildMysteriousItem)
  return arrguildmysteriousitem_.Get(index);
}
inline void TGuildTreasureMapNotify::set_arrguildmysteriousitem(int index, ::google::protobuf::uint32 value) {
  arrguildmysteriousitem_.Set(index, value);
  // @@protoc_insertion_point(field_set:pb.TGuildTreasureMapNotify.ArrGuildMysteriousItem)
}
inline void TGuildTreasureMapNotify::add_arrguildmysteriousitem(::google::protobuf::uint32 value) {
  arrguildmysteriousitem_.Add(value);
  // @@protoc_insertion_point(field_add:pb.TGuildTreasureMapNotify.ArrGuildMysteriousItem)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
TGuildTreasureMapNotify::arrguildmysteriousitem() const {
  // @@protoc_insertion_point(field_list:pb.TGuildTreasureMapNotify.ArrGuildMysteriousItem)
  return arrguildmysteriousitem_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
TGuildTreasureMapNotify::mutable_arrguildmysteriousitem() {
  // @@protoc_insertion_point(field_mutable_list:pb.TGuildTreasureMapNotify.ArrGuildMysteriousItem)
  return &arrguildmysteriousitem_;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace pb

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_net_2fTreasureMap_2eproto__INCLUDED
