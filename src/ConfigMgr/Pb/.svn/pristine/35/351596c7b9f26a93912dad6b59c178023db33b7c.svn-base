// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: net/Player.proto

#ifndef PROTOBUF_net_2fPlayer_2eproto__INCLUDED
#define PROTOBUF_net_2fPlayer_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace pb {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_net_2fPlayer_2eproto();
void protobuf_AssignDesc_net_2fPlayer_2eproto();
void protobuf_ShutdownFile_net_2fPlayer_2eproto();

class TLoginReq;
class TLoginRsp;
class TUserInfo;
class TCreateUserReq;
class TCreateUserRsp;
class TGetUserListRsp;
class TGetUserIdByInnerReq;
class TGetUserIdByInnerRsp;
class TPlayerBannedToPostReq;

// ===================================================================

/*FOR2LUA
<Record>
	<name>TLoginReq</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/Player.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TLoginReq : public ::google::protobuf::Message {
 public:
  TLoginReq();
  virtual ~TLoginReq();

  TLoginReq(const TLoginReq& from);

  inline TLoginReq& operator=(const TLoginReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TLoginReq& default_instance();

  void Swap(TLoginReq* other);

  // implements Message ----------------------------------------------

  TLoginReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TLoginReq& from);
  void MergeFrom(const TLoginReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string Pid = 1;
  inline bool has_pid() const;
  inline void clear_pid();
  static const int kPidFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TLoginReq</name>
  	<Function>
  		<name>pid</name>
  		<replaceName>Pid</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_pid</name>
  		<replaceName>Pid</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_pid</name>
  		<replaceName>Pid</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::std::string& pid() const;
  inline void set_pid(const ::std::string& value);
  inline void set_pid(const char* value);
  inline void set_pid(const char* value, size_t size);
  inline ::std::string* mutable_pid();
  inline ::std::string* release_pid();
  inline void set_allocated_pid(::std::string* pid);

  // optional string Hash = 2;
  inline bool has_hash() const;
  inline void clear_hash();
  static const int kHashFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TLoginReq</name>
  	<Function>
  		<name>hash</name>
  		<replaceName>Hash</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_hash</name>
  		<replaceName>Hash</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_hash</name>
  		<replaceName>Hash</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::std::string& hash() const;
  inline void set_hash(const ::std::string& value);
  inline void set_hash(const char* value);
  inline void set_hash(const char* value, size_t size);
  inline ::std::string* mutable_hash();
  inline ::std::string* release_hash();
  inline void set_allocated_hash(::std::string* hash);

  // optional string ExtendInfo = 3;
  inline bool has_extendinfo() const;
  inline void clear_extendinfo();
  static const int kExtendInfoFieldNumber = 3;
  /*FOR2LUA
  <Record>
  	<name>TLoginReq</name>
  	<Function>
  		<name>extendinfo</name>
  		<replaceName>ExtendInfo</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_extendinfo</name>
  		<replaceName>ExtendInfo</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_extendinfo</name>
  		<replaceName>ExtendInfo</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::std::string& extendinfo() const;
  inline void set_extendinfo(const ::std::string& value);
  inline void set_extendinfo(const char* value);
  inline void set_extendinfo(const char* value, size_t size);
  inline ::std::string* mutable_extendinfo();
  inline ::std::string* release_extendinfo();
  inline void set_allocated_extendinfo(::std::string* extendinfo);

  // optional uint32 Os = 4;
  inline bool has_os() const;
  inline void clear_os();
  static const int kOsFieldNumber = 4;
  /*FOR2LUA
  <Record>
  	<name>TLoginReq</name>
  	<Function>
  		<name>os</name>
  		<replaceName>Os</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_os</name>
  		<replaceName>Os</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_os</name>
  		<replaceName>Os</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 os() const;
  inline void set_os(::google::protobuf::uint32 value);

  // optional string ServerId = 5;
  inline bool has_serverid() const;
  inline void clear_serverid();
  static const int kServerIdFieldNumber = 5;
  /*FOR2LUA
  <Record>
  	<name>TLoginReq</name>
  	<Function>
  		<name>serverid</name>
  		<replaceName>ServerId</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_serverid</name>
  		<replaceName>ServerId</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_serverid</name>
  		<replaceName>ServerId</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::std::string& serverid() const;
  inline void set_serverid(const ::std::string& value);
  inline void set_serverid(const char* value);
  inline void set_serverid(const char* value, size_t size);
  inline ::std::string* mutable_serverid();
  inline ::std::string* release_serverid();
  inline void set_allocated_serverid(::std::string* serverid);

  // @@protoc_insertion_point(class_scope:pb.TLoginReq)
 private:
  inline void set_has_pid();
  inline void clear_has_pid();
  inline void set_has_hash();
  inline void clear_has_hash();
  inline void set_has_extendinfo();
  inline void clear_has_extendinfo();
  inline void set_has_os();
  inline void clear_has_os();
  inline void set_has_serverid();
  inline void clear_has_serverid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* pid_;
  ::std::string* hash_;
  ::std::string* extendinfo_;
  ::std::string* serverid_;
  ::google::protobuf::uint32 os_;
  friend void  protobuf_AddDesc_net_2fPlayer_2eproto();
  friend void protobuf_AssignDesc_net_2fPlayer_2eproto();
  friend void protobuf_ShutdownFile_net_2fPlayer_2eproto();

  void InitAsDefaultInstance();
  static TLoginReq* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TLoginRsp</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/Player.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TLoginRsp : public ::google::protobuf::Message {
 public:
  TLoginRsp();
  virtual ~TLoginRsp();

  TLoginRsp(const TLoginRsp& from);

  inline TLoginRsp& operator=(const TLoginRsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TLoginRsp& default_instance();

  void Swap(TLoginRsp* other);

  // implements Message ----------------------------------------------

  TLoginRsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TLoginRsp& from);
  void MergeFrom(const TLoginRsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .pb.TUserInfo UserArr = 1;
  inline int userarr_size() const;
  inline void clear_userarr();
  static const int kUserArrFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TLoginRsp</name>
  	<Function>
  		<name>userarr</name>
  		<replaceName>UserArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_userarr</name>
  		<replaceName>UserArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_userarr</name>
  		<replaceName>UserArr</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_userarr</name>
  		<replaceName>UserArr</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>userarr_size</name>
  		<replaceName>UserArr</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TUserInfo& userarr(int index) const;
  inline ::pb::TUserInfo* mutable_userarr(int index);
  inline ::pb::TUserInfo* add_userarr();
  inline const ::google::protobuf::RepeatedPtrField< ::pb::TUserInfo >&
      userarr() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb::TUserInfo >*
      mutable_userarr();

  // optional string FrontVersion = 2;
  inline bool has_frontversion() const;
  inline void clear_frontversion();
  static const int kFrontVersionFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TLoginRsp</name>
  	<Function>
  		<name>frontversion</name>
  		<replaceName>FrontVersion</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_frontversion</name>
  		<replaceName>FrontVersion</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_frontversion</name>
  		<replaceName>FrontVersion</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::std::string& frontversion() const;
  inline void set_frontversion(const ::std::string& value);
  inline void set_frontversion(const char* value);
  inline void set_frontversion(const char* value, size_t size);
  inline ::std::string* mutable_frontversion();
  inline ::std::string* release_frontversion();
  inline void set_allocated_frontversion(::std::string* frontversion);

  // optional uint32 IsDebug = 3;
  inline bool has_isdebug() const;
  inline void clear_isdebug();
  static const int kIsDebugFieldNumber = 3;
  /*FOR2LUA
  <Record>
  	<name>TLoginRsp</name>
  	<Function>
  		<name>isdebug</name>
  		<replaceName>IsDebug</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_isdebug</name>
  		<replaceName>IsDebug</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_isdebug</name>
  		<replaceName>IsDebug</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 isdebug() const;
  inline void set_isdebug(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:pb.TLoginRsp)
 private:
  inline void set_has_frontversion();
  inline void clear_has_frontversion();
  inline void set_has_isdebug();
  inline void clear_has_isdebug();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::pb::TUserInfo > userarr_;
  ::std::string* frontversion_;
  ::google::protobuf::uint32 isdebug_;
  friend void  protobuf_AddDesc_net_2fPlayer_2eproto();
  friend void protobuf_AssignDesc_net_2fPlayer_2eproto();
  friend void protobuf_ShutdownFile_net_2fPlayer_2eproto();

  void InitAsDefaultInstance();
  static TLoginRsp* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TUserInfo</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/Player.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TUserInfo : public ::google::protobuf::Message {
 public:
  TUserInfo();
  virtual ~TUserInfo();

  TUserInfo(const TUserInfo& from);

  inline TUserInfo& operator=(const TUserInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TUserInfo& default_instance();

  void Swap(TUserInfo* other);

  // implements Message ----------------------------------------------

  TUserInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TUserInfo& from);
  void MergeFrom(const TUserInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint64 Uid = 1;
  inline bool has_uid() const;
  inline void clear_uid();
  static const int kUidFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TUserInfo</name>
  	<Function>
  		<name>uid</name>
  		<replaceName>Uid</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_uid</name>
  		<replaceName>Uid</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_uid</name>
  		<replaceName>Uid</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint64 uid() const;
  inline void set_uid(::google::protobuf::uint64 value);

  // optional string Uname = 2;
  inline bool has_uname() const;
  inline void clear_uname();
  static const int kUnameFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TUserInfo</name>
  	<Function>
  		<name>uname</name>
  		<replaceName>Uname</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_uname</name>
  		<replaceName>Uname</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_uname</name>
  		<replaceName>Uname</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::std::string& uname() const;
  inline void set_uname(const ::std::string& value);
  inline void set_uname(const char* value);
  inline void set_uname(const char* value, size_t size);
  inline ::std::string* mutable_uname();
  inline ::std::string* release_uname();
  inline void set_allocated_uname(::std::string* uname);

  // optional int32 Level = 3;
  inline bool has_level() const;
  inline void clear_level();
  static const int kLevelFieldNumber = 3;
  /*FOR2LUA
  <Record>
  	<name>TUserInfo</name>
  	<Function>
  		<name>level</name>
  		<replaceName>Level</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_level</name>
  		<replaceName>Level</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_level</name>
  		<replaceName>Level</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::int32 level() const;
  inline void set_level(::google::protobuf::int32 value);

  // optional uint64 CreateTime = 4;
  inline bool has_createtime() const;
  inline void clear_createtime();
  static const int kCreateTimeFieldNumber = 4;
  /*FOR2LUA
  <Record>
  	<name>TUserInfo</name>
  	<Function>
  		<name>createtime</name>
  		<replaceName>CreateTime</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_createtime</name>
  		<replaceName>CreateTime</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_createtime</name>
  		<replaceName>CreateTime</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint64 createtime() const;
  inline void set_createtime(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:pb.TUserInfo)
 private:
  inline void set_has_uid();
  inline void clear_has_uid();
  inline void set_has_uname();
  inline void clear_has_uname();
  inline void set_has_level();
  inline void clear_has_level();
  inline void set_has_createtime();
  inline void clear_has_createtime();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint64 uid_;
  ::std::string* uname_;
  ::google::protobuf::uint64 createtime_;
  ::google::protobuf::int32 level_;
  friend void  protobuf_AddDesc_net_2fPlayer_2eproto();
  friend void protobuf_AssignDesc_net_2fPlayer_2eproto();
  friend void protobuf_ShutdownFile_net_2fPlayer_2eproto();

  void InitAsDefaultInstance();
  static TUserInfo* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TCreateUserReq</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/Player.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TCreateUserReq : public ::google::protobuf::Message {
 public:
  TCreateUserReq();
  virtual ~TCreateUserReq();

  TCreateUserReq(const TCreateUserReq& from);

  inline TCreateUserReq& operator=(const TCreateUserReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TCreateUserReq& default_instance();

  void Swap(TCreateUserReq* other);

  // implements Message ----------------------------------------------

  TCreateUserReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TCreateUserReq& from);
  void MergeFrom(const TCreateUserReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string Uname = 1;
  inline bool has_uname() const;
  inline void clear_uname();
  static const int kUnameFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TCreateUserReq</name>
  	<Function>
  		<name>uname</name>
  		<replaceName>Uname</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_uname</name>
  		<replaceName>Uname</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_uname</name>
  		<replaceName>Uname</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::std::string& uname() const;
  inline void set_uname(const ::std::string& value);
  inline void set_uname(const char* value);
  inline void set_uname(const char* value, size_t size);
  inline ::std::string* mutable_uname();
  inline ::std::string* release_uname();
  inline void set_allocated_uname(::std::string* uname);

  // optional uint32 AvatarId = 2;
  inline bool has_avatarid() const;
  inline void clear_avatarid();
  static const int kAvatarIdFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TCreateUserReq</name>
  	<Function>
  		<name>avatarid</name>
  		<replaceName>AvatarId</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_avatarid</name>
  		<replaceName>AvatarId</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_avatarid</name>
  		<replaceName>AvatarId</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 avatarid() const;
  inline void set_avatarid(::google::protobuf::uint32 value);

  // optional uint32 NameType = 3;
  inline bool has_nametype() const;
  inline void clear_nametype();
  static const int kNameTypeFieldNumber = 3;
  /*FOR2LUA
  <Record>
  	<name>TCreateUserReq</name>
  	<Function>
  		<name>nametype</name>
  		<replaceName>NameType</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_nametype</name>
  		<replaceName>NameType</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_nametype</name>
  		<replaceName>NameType</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 nametype() const;
  inline void set_nametype(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:pb.TCreateUserReq)
 private:
  inline void set_has_uname();
  inline void clear_has_uname();
  inline void set_has_avatarid();
  inline void clear_has_avatarid();
  inline void set_has_nametype();
  inline void clear_has_nametype();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* uname_;
  ::google::protobuf::uint32 avatarid_;
  ::google::protobuf::uint32 nametype_;
  friend void  protobuf_AddDesc_net_2fPlayer_2eproto();
  friend void protobuf_AssignDesc_net_2fPlayer_2eproto();
  friend void protobuf_ShutdownFile_net_2fPlayer_2eproto();

  void InitAsDefaultInstance();
  static TCreateUserReq* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TCreateUserRsp</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/Player.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TCreateUserRsp : public ::google::protobuf::Message {
 public:
  TCreateUserRsp();
  virtual ~TCreateUserRsp();

  TCreateUserRsp(const TCreateUserRsp& from);

  inline TCreateUserRsp& operator=(const TCreateUserRsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TCreateUserRsp& default_instance();

  void Swap(TCreateUserRsp* other);

  // implements Message ----------------------------------------------

  TCreateUserRsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TCreateUserRsp& from);
  void MergeFrom(const TCreateUserRsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .pb.TUserInfo UserInfo = 1;
  inline bool has_userinfo() const;
  inline void clear_userinfo();
  static const int kUserInfoFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TCreateUserRsp</name>
  	<Function>
  		<name>userinfo</name>
  		<replaceName>UserInfo</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_userinfo</name>
  		<replaceName>UserInfo</replaceName>
  		<handler>descripter = pb_set_message_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_allocated_userinfo</name>
  		<replaceName>UserInfo</replaceName>
  		<handler>descripter = pb_set_message_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_userinfo</name>
  		<replaceName>UserInfo</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TUserInfo& userinfo() const;
  inline ::pb::TUserInfo* mutable_userinfo();
  inline ::pb::TUserInfo* release_userinfo();
  inline void set_allocated_userinfo(::pb::TUserInfo* userinfo);

  // @@protoc_insertion_point(class_scope:pb.TCreateUserRsp)
 private:
  inline void set_has_userinfo();
  inline void clear_has_userinfo();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::pb::TUserInfo* userinfo_;
  friend void  protobuf_AddDesc_net_2fPlayer_2eproto();
  friend void protobuf_AssignDesc_net_2fPlayer_2eproto();
  friend void protobuf_ShutdownFile_net_2fPlayer_2eproto();

  void InitAsDefaultInstance();
  static TCreateUserRsp* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TGetUserListRsp</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/Player.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TGetUserListRsp : public ::google::protobuf::Message {
 public:
  TGetUserListRsp();
  virtual ~TGetUserListRsp();

  TGetUserListRsp(const TGetUserListRsp& from);

  inline TGetUserListRsp& operator=(const TGetUserListRsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TGetUserListRsp& default_instance();

  void Swap(TGetUserListRsp* other);

  // implements Message ----------------------------------------------

  TGetUserListRsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TGetUserListRsp& from);
  void MergeFrom(const TGetUserListRsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .pb.TUserInfo ArrUser = 1;
  inline int arruser_size() const;
  inline void clear_arruser();
  static const int kArrUserFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TGetUserListRsp</name>
  	<Function>
  		<name>arruser</name>
  		<replaceName>ArrUser</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_arruser</name>
  		<replaceName>ArrUser</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_arruser</name>
  		<replaceName>ArrUser</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_arruser</name>
  		<replaceName>ArrUser</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>arruser_size</name>
  		<replaceName>ArrUser</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TUserInfo& arruser(int index) const;
  inline ::pb::TUserInfo* mutable_arruser(int index);
  inline ::pb::TUserInfo* add_arruser();
  inline const ::google::protobuf::RepeatedPtrField< ::pb::TUserInfo >&
      arruser() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb::TUserInfo >*
      mutable_arruser();

  // @@protoc_insertion_point(class_scope:pb.TGetUserListRsp)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::pb::TUserInfo > arruser_;
  friend void  protobuf_AddDesc_net_2fPlayer_2eproto();
  friend void protobuf_AssignDesc_net_2fPlayer_2eproto();
  friend void protobuf_ShutdownFile_net_2fPlayer_2eproto();

  void InitAsDefaultInstance();
  static TGetUserListRsp* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TGetUserIdByInnerReq</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/Player.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TGetUserIdByInnerReq : public ::google::protobuf::Message {
 public:
  TGetUserIdByInnerReq();
  virtual ~TGetUserIdByInnerReq();

  TGetUserIdByInnerReq(const TGetUserIdByInnerReq& from);

  inline TGetUserIdByInnerReq& operator=(const TGetUserIdByInnerReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TGetUserIdByInnerReq& default_instance();

  void Swap(TGetUserIdByInnerReq* other);

  // implements Message ----------------------------------------------

  TGetUserIdByInnerReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TGetUserIdByInnerReq& from);
  void MergeFrom(const TGetUserIdByInnerReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint64 Pid = 1;
  inline bool has_pid() const;
  inline void clear_pid();
  static const int kPidFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TGetUserIdByInnerReq</name>
  	<Function>
  		<name>pid</name>
  		<replaceName>Pid</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_pid</name>
  		<replaceName>Pid</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_pid</name>
  		<replaceName>Pid</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint64 pid() const;
  inline void set_pid(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:pb.TGetUserIdByInnerReq)
 private:
  inline void set_has_pid();
  inline void clear_has_pid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint64 pid_;
  friend void  protobuf_AddDesc_net_2fPlayer_2eproto();
  friend void protobuf_AssignDesc_net_2fPlayer_2eproto();
  friend void protobuf_ShutdownFile_net_2fPlayer_2eproto();

  void InitAsDefaultInstance();
  static TGetUserIdByInnerReq* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TGetUserIdByInnerRsp</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/Player.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TGetUserIdByInnerRsp : public ::google::protobuf::Message {
 public:
  TGetUserIdByInnerRsp();
  virtual ~TGetUserIdByInnerRsp();

  TGetUserIdByInnerRsp(const TGetUserIdByInnerRsp& from);

  inline TGetUserIdByInnerRsp& operator=(const TGetUserIdByInnerRsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TGetUserIdByInnerRsp& default_instance();

  void Swap(TGetUserIdByInnerRsp* other);

  // implements Message ----------------------------------------------

  TGetUserIdByInnerRsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TGetUserIdByInnerRsp& from);
  void MergeFrom(const TGetUserIdByInnerRsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated uint64 ArrUser = 1;
  inline int arruser_size() const;
  inline void clear_arruser();
  static const int kArrUserFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TGetUserIdByInnerRsp</name>
  	<Function>
  		<name>arruser</name>
  		<replaceName>ArrUser</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_arruser</name>
  		<replaceName>ArrUser</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_arruser</name>
  		<replaceName>ArrUser</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_arruser</name>
  		<replaceName>ArrUser</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>arruser_size</name>
  		<replaceName>ArrUser</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint64 arruser(int index) const;
  inline void set_arruser(int index, ::google::protobuf::uint64 value);
  inline void add_arruser(::google::protobuf::uint64 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
      arruser() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
      mutable_arruser();

  // @@protoc_insertion_point(class_scope:pb.TGetUserIdByInnerRsp)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint64 > arruser_;
  friend void  protobuf_AddDesc_net_2fPlayer_2eproto();
  friend void protobuf_AssignDesc_net_2fPlayer_2eproto();
  friend void protobuf_ShutdownFile_net_2fPlayer_2eproto();

  void InitAsDefaultInstance();
  static TGetUserIdByInnerRsp* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TPlayerBannedToPostReq</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/Player.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TPlayerBannedToPostReq : public ::google::protobuf::Message {
 public:
  TPlayerBannedToPostReq();
  virtual ~TPlayerBannedToPostReq();

  TPlayerBannedToPostReq(const TPlayerBannedToPostReq& from);

  inline TPlayerBannedToPostReq& operator=(const TPlayerBannedToPostReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TPlayerBannedToPostReq& default_instance();

  void Swap(TPlayerBannedToPostReq* other);

  // implements Message ----------------------------------------------

  TPlayerBannedToPostReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TPlayerBannedToPostReq& from);
  void MergeFrom(const TPlayerBannedToPostReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated uint64 UidArr = 1;
  inline int uidarr_size() const;
  inline void clear_uidarr();
  static const int kUidArrFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TPlayerBannedToPostReq</name>
  	<Function>
  		<name>uidarr</name>
  		<replaceName>UidArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_uidarr</name>
  		<replaceName>UidArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_uidarr</name>
  		<replaceName>UidArr</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_uidarr</name>
  		<replaceName>UidArr</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>uidarr_size</name>
  		<replaceName>UidArr</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint64 uidarr(int index) const;
  inline void set_uidarr(int index, ::google::protobuf::uint64 value);
  inline void add_uidarr(::google::protobuf::uint64 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
      uidarr() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
      mutable_uidarr();

  // optional uint32 BanTime = 2;
  inline bool has_bantime() const;
  inline void clear_bantime();
  static const int kBanTimeFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TPlayerBannedToPostReq</name>
  	<Function>
  		<name>bantime</name>
  		<replaceName>BanTime</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_bantime</name>
  		<replaceName>BanTime</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_bantime</name>
  		<replaceName>BanTime</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 bantime() const;
  inline void set_bantime(::google::protobuf::uint32 value);

  // optional string BanMsg = 3;
  inline bool has_banmsg() const;
  inline void clear_banmsg();
  static const int kBanMsgFieldNumber = 3;
  /*FOR2LUA
  <Record>
  	<name>TPlayerBannedToPostReq</name>
  	<Function>
  		<name>banmsg</name>
  		<replaceName>BanMsg</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_banmsg</name>
  		<replaceName>BanMsg</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_banmsg</name>
  		<replaceName>BanMsg</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::std::string& banmsg() const;
  inline void set_banmsg(const ::std::string& value);
  inline void set_banmsg(const char* value);
  inline void set_banmsg(const char* value, size_t size);
  inline ::std::string* mutable_banmsg();
  inline ::std::string* release_banmsg();
  inline void set_allocated_banmsg(::std::string* banmsg);

  // @@protoc_insertion_point(class_scope:pb.TPlayerBannedToPostReq)
 private:
  inline void set_has_bantime();
  inline void clear_has_bantime();
  inline void set_has_banmsg();
  inline void clear_has_banmsg();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint64 > uidarr_;
  ::std::string* banmsg_;
  ::google::protobuf::uint32 bantime_;
  friend void  protobuf_AddDesc_net_2fPlayer_2eproto();
  friend void protobuf_AssignDesc_net_2fPlayer_2eproto();
  friend void protobuf_ShutdownFile_net_2fPlayer_2eproto();

  void InitAsDefaultInstance();
  static TPlayerBannedToPostReq* default_instance_;
};
// ===================================================================


// ===================================================================

// TLoginReq

// optional string Pid = 1;
inline bool TLoginReq::has_pid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TLoginReq::set_has_pid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TLoginReq::clear_has_pid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TLoginReq::clear_pid() {
  if (pid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    pid_->clear();
  }
  clear_has_pid();
}
inline const ::std::string& TLoginReq::pid() const {
  // @@protoc_insertion_point(field_get:pb.TLoginReq.Pid)
  return *pid_;
}
inline void TLoginReq::set_pid(const ::std::string& value) {
  set_has_pid();
  if (pid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    pid_ = new ::std::string;
  }
  pid_->assign(value);
  // @@protoc_insertion_point(field_set:pb.TLoginReq.Pid)
}
inline void TLoginReq::set_pid(const char* value) {
  set_has_pid();
  if (pid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    pid_ = new ::std::string;
  }
  pid_->assign(value);
  // @@protoc_insertion_point(field_set_char:pb.TLoginReq.Pid)
}
inline void TLoginReq::set_pid(const char* value, size_t size) {
  set_has_pid();
  if (pid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    pid_ = new ::std::string;
  }
  pid_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:pb.TLoginReq.Pid)
}
inline ::std::string* TLoginReq::mutable_pid() {
  set_has_pid();
  if (pid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    pid_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:pb.TLoginReq.Pid)
  return pid_;
}
inline ::std::string* TLoginReq::release_pid() {
  clear_has_pid();
  if (pid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = pid_;
    pid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void TLoginReq::set_allocated_pid(::std::string* pid) {
  if (pid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete pid_;
  }
  if (pid) {
    set_has_pid();
    pid_ = pid;
  } else {
    clear_has_pid();
    pid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:pb.TLoginReq.Pid)
}

// optional string Hash = 2;
inline bool TLoginReq::has_hash() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TLoginReq::set_has_hash() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TLoginReq::clear_has_hash() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TLoginReq::clear_hash() {
  if (hash_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    hash_->clear();
  }
  clear_has_hash();
}
inline const ::std::string& TLoginReq::hash() const {
  // @@protoc_insertion_point(field_get:pb.TLoginReq.Hash)
  return *hash_;
}
inline void TLoginReq::set_hash(const ::std::string& value) {
  set_has_hash();
  if (hash_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    hash_ = new ::std::string;
  }
  hash_->assign(value);
  // @@protoc_insertion_point(field_set:pb.TLoginReq.Hash)
}
inline void TLoginReq::set_hash(const char* value) {
  set_has_hash();
  if (hash_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    hash_ = new ::std::string;
  }
  hash_->assign(value);
  // @@protoc_insertion_point(field_set_char:pb.TLoginReq.Hash)
}
inline void TLoginReq::set_hash(const char* value, size_t size) {
  set_has_hash();
  if (hash_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    hash_ = new ::std::string;
  }
  hash_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:pb.TLoginReq.Hash)
}
inline ::std::string* TLoginReq::mutable_hash() {
  set_has_hash();
  if (hash_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    hash_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:pb.TLoginReq.Hash)
  return hash_;
}
inline ::std::string* TLoginReq::release_hash() {
  clear_has_hash();
  if (hash_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = hash_;
    hash_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void TLoginReq::set_allocated_hash(::std::string* hash) {
  if (hash_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete hash_;
  }
  if (hash) {
    set_has_hash();
    hash_ = hash;
  } else {
    clear_has_hash();
    hash_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:pb.TLoginReq.Hash)
}

// optional string ExtendInfo = 3;
inline bool TLoginReq::has_extendinfo() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void TLoginReq::set_has_extendinfo() {
  _has_bits_[0] |= 0x00000004u;
}
inline void TLoginReq::clear_has_extendinfo() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void TLoginReq::clear_extendinfo() {
  if (extendinfo_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    extendinfo_->clear();
  }
  clear_has_extendinfo();
}
inline const ::std::string& TLoginReq::extendinfo() const {
  // @@protoc_insertion_point(field_get:pb.TLoginReq.ExtendInfo)
  return *extendinfo_;
}
inline void TLoginReq::set_extendinfo(const ::std::string& value) {
  set_has_extendinfo();
  if (extendinfo_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    extendinfo_ = new ::std::string;
  }
  extendinfo_->assign(value);
  // @@protoc_insertion_point(field_set:pb.TLoginReq.ExtendInfo)
}
inline void TLoginReq::set_extendinfo(const char* value) {
  set_has_extendinfo();
  if (extendinfo_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    extendinfo_ = new ::std::string;
  }
  extendinfo_->assign(value);
  // @@protoc_insertion_point(field_set_char:pb.TLoginReq.ExtendInfo)
}
inline void TLoginReq::set_extendinfo(const char* value, size_t size) {
  set_has_extendinfo();
  if (extendinfo_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    extendinfo_ = new ::std::string;
  }
  extendinfo_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:pb.TLoginReq.ExtendInfo)
}
inline ::std::string* TLoginReq::mutable_extendinfo() {
  set_has_extendinfo();
  if (extendinfo_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    extendinfo_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:pb.TLoginReq.ExtendInfo)
  return extendinfo_;
}
inline ::std::string* TLoginReq::release_extendinfo() {
  clear_has_extendinfo();
  if (extendinfo_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = extendinfo_;
    extendinfo_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void TLoginReq::set_allocated_extendinfo(::std::string* extendinfo) {
  if (extendinfo_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete extendinfo_;
  }
  if (extendinfo) {
    set_has_extendinfo();
    extendinfo_ = extendinfo;
  } else {
    clear_has_extendinfo();
    extendinfo_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:pb.TLoginReq.ExtendInfo)
}

// optional uint32 Os = 4;
inline bool TLoginReq::has_os() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void TLoginReq::set_has_os() {
  _has_bits_[0] |= 0x00000008u;
}
inline void TLoginReq::clear_has_os() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void TLoginReq::clear_os() {
  os_ = 0u;
  clear_has_os();
}
inline ::google::protobuf::uint32 TLoginReq::os() const {
  // @@protoc_insertion_point(field_get:pb.TLoginReq.Os)
  return os_;
}
inline void TLoginReq::set_os(::google::protobuf::uint32 value) {
  set_has_os();
  os_ = value;
  // @@protoc_insertion_point(field_set:pb.TLoginReq.Os)
}

// optional string ServerId = 5;
inline bool TLoginReq::has_serverid() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void TLoginReq::set_has_serverid() {
  _has_bits_[0] |= 0x00000010u;
}
inline void TLoginReq::clear_has_serverid() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void TLoginReq::clear_serverid() {
  if (serverid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    serverid_->clear();
  }
  clear_has_serverid();
}
inline const ::std::string& TLoginReq::serverid() const {
  // @@protoc_insertion_point(field_get:pb.TLoginReq.ServerId)
  return *serverid_;
}
inline void TLoginReq::set_serverid(const ::std::string& value) {
  set_has_serverid();
  if (serverid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    serverid_ = new ::std::string;
  }
  serverid_->assign(value);
  // @@protoc_insertion_point(field_set:pb.TLoginReq.ServerId)
}
inline void TLoginReq::set_serverid(const char* value) {
  set_has_serverid();
  if (serverid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    serverid_ = new ::std::string;
  }
  serverid_->assign(value);
  // @@protoc_insertion_point(field_set_char:pb.TLoginReq.ServerId)
}
inline void TLoginReq::set_serverid(const char* value, size_t size) {
  set_has_serverid();
  if (serverid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    serverid_ = new ::std::string;
  }
  serverid_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:pb.TLoginReq.ServerId)
}
inline ::std::string* TLoginReq::mutable_serverid() {
  set_has_serverid();
  if (serverid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    serverid_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:pb.TLoginReq.ServerId)
  return serverid_;
}
inline ::std::string* TLoginReq::release_serverid() {
  clear_has_serverid();
  if (serverid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = serverid_;
    serverid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void TLoginReq::set_allocated_serverid(::std::string* serverid) {
  if (serverid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete serverid_;
  }
  if (serverid) {
    set_has_serverid();
    serverid_ = serverid;
  } else {
    clear_has_serverid();
    serverid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:pb.TLoginReq.ServerId)
}

// -------------------------------------------------------------------

// TLoginRsp

// repeated .pb.TUserInfo UserArr = 1;
inline int TLoginRsp::userarr_size() const {
  return userarr_.size();
}
inline void TLoginRsp::clear_userarr() {
  userarr_.Clear();
}
inline const ::pb::TUserInfo& TLoginRsp::userarr(int index) const {
  // @@protoc_insertion_point(field_get:pb.TLoginRsp.UserArr)
  return userarr_.Get(index);
}
inline ::pb::TUserInfo* TLoginRsp::mutable_userarr(int index) {
  // @@protoc_insertion_point(field_mutable:pb.TLoginRsp.UserArr)
  return userarr_.Mutable(index);
}
inline ::pb::TUserInfo* TLoginRsp::add_userarr() {
  // @@protoc_insertion_point(field_add:pb.TLoginRsp.UserArr)
  return userarr_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::TUserInfo >&
TLoginRsp::userarr() const {
  // @@protoc_insertion_point(field_list:pb.TLoginRsp.UserArr)
  return userarr_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb::TUserInfo >*
TLoginRsp::mutable_userarr() {
  // @@protoc_insertion_point(field_mutable_list:pb.TLoginRsp.UserArr)
  return &userarr_;
}

// optional string FrontVersion = 2;
inline bool TLoginRsp::has_frontversion() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TLoginRsp::set_has_frontversion() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TLoginRsp::clear_has_frontversion() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TLoginRsp::clear_frontversion() {
  if (frontversion_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    frontversion_->clear();
  }
  clear_has_frontversion();
}
inline const ::std::string& TLoginRsp::frontversion() const {
  // @@protoc_insertion_point(field_get:pb.TLoginRsp.FrontVersion)
  return *frontversion_;
}
inline void TLoginRsp::set_frontversion(const ::std::string& value) {
  set_has_frontversion();
  if (frontversion_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    frontversion_ = new ::std::string;
  }
  frontversion_->assign(value);
  // @@protoc_insertion_point(field_set:pb.TLoginRsp.FrontVersion)
}
inline void TLoginRsp::set_frontversion(const char* value) {
  set_has_frontversion();
  if (frontversion_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    frontversion_ = new ::std::string;
  }
  frontversion_->assign(value);
  // @@protoc_insertion_point(field_set_char:pb.TLoginRsp.FrontVersion)
}
inline void TLoginRsp::set_frontversion(const char* value, size_t size) {
  set_has_frontversion();
  if (frontversion_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    frontversion_ = new ::std::string;
  }
  frontversion_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:pb.TLoginRsp.FrontVersion)
}
inline ::std::string* TLoginRsp::mutable_frontversion() {
  set_has_frontversion();
  if (frontversion_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    frontversion_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:pb.TLoginRsp.FrontVersion)
  return frontversion_;
}
inline ::std::string* TLoginRsp::release_frontversion() {
  clear_has_frontversion();
  if (frontversion_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = frontversion_;
    frontversion_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void TLoginRsp::set_allocated_frontversion(::std::string* frontversion) {
  if (frontversion_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete frontversion_;
  }
  if (frontversion) {
    set_has_frontversion();
    frontversion_ = frontversion;
  } else {
    clear_has_frontversion();
    frontversion_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:pb.TLoginRsp.FrontVersion)
}

// optional uint32 IsDebug = 3;
inline bool TLoginRsp::has_isdebug() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void TLoginRsp::set_has_isdebug() {
  _has_bits_[0] |= 0x00000004u;
}
inline void TLoginRsp::clear_has_isdebug() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void TLoginRsp::clear_isdebug() {
  isdebug_ = 0u;
  clear_has_isdebug();
}
inline ::google::protobuf::uint32 TLoginRsp::isdebug() const {
  // @@protoc_insertion_point(field_get:pb.TLoginRsp.IsDebug)
  return isdebug_;
}
inline void TLoginRsp::set_isdebug(::google::protobuf::uint32 value) {
  set_has_isdebug();
  isdebug_ = value;
  // @@protoc_insertion_point(field_set:pb.TLoginRsp.IsDebug)
}

// -------------------------------------------------------------------

// TUserInfo

// optional uint64 Uid = 1;
inline bool TUserInfo::has_uid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TUserInfo::set_has_uid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TUserInfo::clear_has_uid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TUserInfo::clear_uid() {
  uid_ = GOOGLE_ULONGLONG(0);
  clear_has_uid();
}
inline ::google::protobuf::uint64 TUserInfo::uid() const {
  // @@protoc_insertion_point(field_get:pb.TUserInfo.Uid)
  return uid_;
}
inline void TUserInfo::set_uid(::google::protobuf::uint64 value) {
  set_has_uid();
  uid_ = value;
  // @@protoc_insertion_point(field_set:pb.TUserInfo.Uid)
}

// optional string Uname = 2;
inline bool TUserInfo::has_uname() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TUserInfo::set_has_uname() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TUserInfo::clear_has_uname() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TUserInfo::clear_uname() {
  if (uname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    uname_->clear();
  }
  clear_has_uname();
}
inline const ::std::string& TUserInfo::uname() const {
  // @@protoc_insertion_point(field_get:pb.TUserInfo.Uname)
  return *uname_;
}
inline void TUserInfo::set_uname(const ::std::string& value) {
  set_has_uname();
  if (uname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    uname_ = new ::std::string;
  }
  uname_->assign(value);
  // @@protoc_insertion_point(field_set:pb.TUserInfo.Uname)
}
inline void TUserInfo::set_uname(const char* value) {
  set_has_uname();
  if (uname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    uname_ = new ::std::string;
  }
  uname_->assign(value);
  // @@protoc_insertion_point(field_set_char:pb.TUserInfo.Uname)
}
inline void TUserInfo::set_uname(const char* value, size_t size) {
  set_has_uname();
  if (uname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    uname_ = new ::std::string;
  }
  uname_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:pb.TUserInfo.Uname)
}
inline ::std::string* TUserInfo::mutable_uname() {
  set_has_uname();
  if (uname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    uname_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:pb.TUserInfo.Uname)
  return uname_;
}
inline ::std::string* TUserInfo::release_uname() {
  clear_has_uname();
  if (uname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = uname_;
    uname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void TUserInfo::set_allocated_uname(::std::string* uname) {
  if (uname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete uname_;
  }
  if (uname) {
    set_has_uname();
    uname_ = uname;
  } else {
    clear_has_uname();
    uname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:pb.TUserInfo.Uname)
}

// optional int32 Level = 3;
inline bool TUserInfo::has_level() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void TUserInfo::set_has_level() {
  _has_bits_[0] |= 0x00000004u;
}
inline void TUserInfo::clear_has_level() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void TUserInfo::clear_level() {
  level_ = 0;
  clear_has_level();
}
inline ::google::protobuf::int32 TUserInfo::level() const {
  // @@protoc_insertion_point(field_get:pb.TUserInfo.Level)
  return level_;
}
inline void TUserInfo::set_level(::google::protobuf::int32 value) {
  set_has_level();
  level_ = value;
  // @@protoc_insertion_point(field_set:pb.TUserInfo.Level)
}

// optional uint64 CreateTime = 4;
inline bool TUserInfo::has_createtime() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void TUserInfo::set_has_createtime() {
  _has_bits_[0] |= 0x00000008u;
}
inline void TUserInfo::clear_has_createtime() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void TUserInfo::clear_createtime() {
  createtime_ = GOOGLE_ULONGLONG(0);
  clear_has_createtime();
}
inline ::google::protobuf::uint64 TUserInfo::createtime() const {
  // @@protoc_insertion_point(field_get:pb.TUserInfo.CreateTime)
  return createtime_;
}
inline void TUserInfo::set_createtime(::google::protobuf::uint64 value) {
  set_has_createtime();
  createtime_ = value;
  // @@protoc_insertion_point(field_set:pb.TUserInfo.CreateTime)
}

// -------------------------------------------------------------------

// TCreateUserReq

// optional string Uname = 1;
inline bool TCreateUserReq::has_uname() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TCreateUserReq::set_has_uname() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TCreateUserReq::clear_has_uname() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TCreateUserReq::clear_uname() {
  if (uname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    uname_->clear();
  }
  clear_has_uname();
}
inline const ::std::string& TCreateUserReq::uname() const {
  // @@protoc_insertion_point(field_get:pb.TCreateUserReq.Uname)
  return *uname_;
}
inline void TCreateUserReq::set_uname(const ::std::string& value) {
  set_has_uname();
  if (uname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    uname_ = new ::std::string;
  }
  uname_->assign(value);
  // @@protoc_insertion_point(field_set:pb.TCreateUserReq.Uname)
}
inline void TCreateUserReq::set_uname(const char* value) {
  set_has_uname();
  if (uname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    uname_ = new ::std::string;
  }
  uname_->assign(value);
  // @@protoc_insertion_point(field_set_char:pb.TCreateUserReq.Uname)
}
inline void TCreateUserReq::set_uname(const char* value, size_t size) {
  set_has_uname();
  if (uname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    uname_ = new ::std::string;
  }
  uname_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:pb.TCreateUserReq.Uname)
}
inline ::std::string* TCreateUserReq::mutable_uname() {
  set_has_uname();
  if (uname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    uname_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:pb.TCreateUserReq.Uname)
  return uname_;
}
inline ::std::string* TCreateUserReq::release_uname() {
  clear_has_uname();
  if (uname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = uname_;
    uname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void TCreateUserReq::set_allocated_uname(::std::string* uname) {
  if (uname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete uname_;
  }
  if (uname) {
    set_has_uname();
    uname_ = uname;
  } else {
    clear_has_uname();
    uname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:pb.TCreateUserReq.Uname)
}

// optional uint32 AvatarId = 2;
inline bool TCreateUserReq::has_avatarid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TCreateUserReq::set_has_avatarid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TCreateUserReq::clear_has_avatarid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TCreateUserReq::clear_avatarid() {
  avatarid_ = 0u;
  clear_has_avatarid();
}
inline ::google::protobuf::uint32 TCreateUserReq::avatarid() const {
  // @@protoc_insertion_point(field_get:pb.TCreateUserReq.AvatarId)
  return avatarid_;
}
inline void TCreateUserReq::set_avatarid(::google::protobuf::uint32 value) {
  set_has_avatarid();
  avatarid_ = value;
  // @@protoc_insertion_point(field_set:pb.TCreateUserReq.AvatarId)
}

// optional uint32 NameType = 3;
inline bool TCreateUserReq::has_nametype() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void TCreateUserReq::set_has_nametype() {
  _has_bits_[0] |= 0x00000004u;
}
inline void TCreateUserReq::clear_has_nametype() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void TCreateUserReq::clear_nametype() {
  nametype_ = 0u;
  clear_has_nametype();
}
inline ::google::protobuf::uint32 TCreateUserReq::nametype() const {
  // @@protoc_insertion_point(field_get:pb.TCreateUserReq.NameType)
  return nametype_;
}
inline void TCreateUserReq::set_nametype(::google::protobuf::uint32 value) {
  set_has_nametype();
  nametype_ = value;
  // @@protoc_insertion_point(field_set:pb.TCreateUserReq.NameType)
}

// -------------------------------------------------------------------

// TCreateUserRsp

// optional .pb.TUserInfo UserInfo = 1;
inline bool TCreateUserRsp::has_userinfo() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TCreateUserRsp::set_has_userinfo() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TCreateUserRsp::clear_has_userinfo() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TCreateUserRsp::clear_userinfo() {
  if (userinfo_ != NULL) userinfo_->::pb::TUserInfo::Clear();
  clear_has_userinfo();
}
inline const ::pb::TUserInfo& TCreateUserRsp::userinfo() const {
  // @@protoc_insertion_point(field_get:pb.TCreateUserRsp.UserInfo)
  return userinfo_ != NULL ? *userinfo_ : *default_instance_->userinfo_;
}
inline ::pb::TUserInfo* TCreateUserRsp::mutable_userinfo() {
  set_has_userinfo();
  if (userinfo_ == NULL) userinfo_ = new ::pb::TUserInfo;
  // @@protoc_insertion_point(field_mutable:pb.TCreateUserRsp.UserInfo)
  return userinfo_;
}
inline ::pb::TUserInfo* TCreateUserRsp::release_userinfo() {
  clear_has_userinfo();
  ::pb::TUserInfo* temp = userinfo_;
  userinfo_ = NULL;
  return temp;
}
inline void TCreateUserRsp::set_allocated_userinfo(::pb::TUserInfo* userinfo) {
  delete userinfo_;
  userinfo_ = userinfo;
  if (userinfo) {
    set_has_userinfo();
  } else {
    clear_has_userinfo();
  }
  // @@protoc_insertion_point(field_set_allocated:pb.TCreateUserRsp.UserInfo)
}

// -------------------------------------------------------------------

// TGetUserListRsp

// repeated .pb.TUserInfo ArrUser = 1;
inline int TGetUserListRsp::arruser_size() const {
  return arruser_.size();
}
inline void TGetUserListRsp::clear_arruser() {
  arruser_.Clear();
}
inline const ::pb::TUserInfo& TGetUserListRsp::arruser(int index) const {
  // @@protoc_insertion_point(field_get:pb.TGetUserListRsp.ArrUser)
  return arruser_.Get(index);
}
inline ::pb::TUserInfo* TGetUserListRsp::mutable_arruser(int index) {
  // @@protoc_insertion_point(field_mutable:pb.TGetUserListRsp.ArrUser)
  return arruser_.Mutable(index);
}
inline ::pb::TUserInfo* TGetUserListRsp::add_arruser() {
  // @@protoc_insertion_point(field_add:pb.TGetUserListRsp.ArrUser)
  return arruser_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::TUserInfo >&
TGetUserListRsp::arruser() const {
  // @@protoc_insertion_point(field_list:pb.TGetUserListRsp.ArrUser)
  return arruser_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb::TUserInfo >*
TGetUserListRsp::mutable_arruser() {
  // @@protoc_insertion_point(field_mutable_list:pb.TGetUserListRsp.ArrUser)
  return &arruser_;
}

// -------------------------------------------------------------------

// TGetUserIdByInnerReq

// optional uint64 Pid = 1;
inline bool TGetUserIdByInnerReq::has_pid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TGetUserIdByInnerReq::set_has_pid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TGetUserIdByInnerReq::clear_has_pid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TGetUserIdByInnerReq::clear_pid() {
  pid_ = GOOGLE_ULONGLONG(0);
  clear_has_pid();
}
inline ::google::protobuf::uint64 TGetUserIdByInnerReq::pid() const {
  // @@protoc_insertion_point(field_get:pb.TGetUserIdByInnerReq.Pid)
  return pid_;
}
inline void TGetUserIdByInnerReq::set_pid(::google::protobuf::uint64 value) {
  set_has_pid();
  pid_ = value;
  // @@protoc_insertion_point(field_set:pb.TGetUserIdByInnerReq.Pid)
}

// -------------------------------------------------------------------

// TGetUserIdByInnerRsp

// repeated uint64 ArrUser = 1;
inline int TGetUserIdByInnerRsp::arruser_size() const {
  return arruser_.size();
}
inline void TGetUserIdByInnerRsp::clear_arruser() {
  arruser_.Clear();
}
inline ::google::protobuf::uint64 TGetUserIdByInnerRsp::arruser(int index) const {
  // @@protoc_insertion_point(field_get:pb.TGetUserIdByInnerRsp.ArrUser)
  return arruser_.Get(index);
}
inline void TGetUserIdByInnerRsp::set_arruser(int index, ::google::protobuf::uint64 value) {
  arruser_.Set(index, value);
  // @@protoc_insertion_point(field_set:pb.TGetUserIdByInnerRsp.ArrUser)
}
inline void TGetUserIdByInnerRsp::add_arruser(::google::protobuf::uint64 value) {
  arruser_.Add(value);
  // @@protoc_insertion_point(field_add:pb.TGetUserIdByInnerRsp.ArrUser)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
TGetUserIdByInnerRsp::arruser() const {
  // @@protoc_insertion_point(field_list:pb.TGetUserIdByInnerRsp.ArrUser)
  return arruser_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
TGetUserIdByInnerRsp::mutable_arruser() {
  // @@protoc_insertion_point(field_mutable_list:pb.TGetUserIdByInnerRsp.ArrUser)
  return &arruser_;
}

// -------------------------------------------------------------------

// TPlayerBannedToPostReq

// repeated uint64 UidArr = 1;
inline int TPlayerBannedToPostReq::uidarr_size() const {
  return uidarr_.size();
}
inline void TPlayerBannedToPostReq::clear_uidarr() {
  uidarr_.Clear();
}
inline ::google::protobuf::uint64 TPlayerBannedToPostReq::uidarr(int index) const {
  // @@protoc_insertion_point(field_get:pb.TPlayerBannedToPostReq.UidArr)
  return uidarr_.Get(index);
}
inline void TPlayerBannedToPostReq::set_uidarr(int index, ::google::protobuf::uint64 value) {
  uidarr_.Set(index, value);
  // @@protoc_insertion_point(field_set:pb.TPlayerBannedToPostReq.UidArr)
}
inline void TPlayerBannedToPostReq::add_uidarr(::google::protobuf::uint64 value) {
  uidarr_.Add(value);
  // @@protoc_insertion_point(field_add:pb.TPlayerBannedToPostReq.UidArr)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
TPlayerBannedToPostReq::uidarr() const {
  // @@protoc_insertion_point(field_list:pb.TPlayerBannedToPostReq.UidArr)
  return uidarr_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
TPlayerBannedToPostReq::mutable_uidarr() {
  // @@protoc_insertion_point(field_mutable_list:pb.TPlayerBannedToPostReq.UidArr)
  return &uidarr_;
}

// optional uint32 BanTime = 2;
inline bool TPlayerBannedToPostReq::has_bantime() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TPlayerBannedToPostReq::set_has_bantime() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TPlayerBannedToPostReq::clear_has_bantime() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TPlayerBannedToPostReq::clear_bantime() {
  bantime_ = 0u;
  clear_has_bantime();
}
inline ::google::protobuf::uint32 TPlayerBannedToPostReq::bantime() const {
  // @@protoc_insertion_point(field_get:pb.TPlayerBannedToPostReq.BanTime)
  return bantime_;
}
inline void TPlayerBannedToPostReq::set_bantime(::google::protobuf::uint32 value) {
  set_has_bantime();
  bantime_ = value;
  // @@protoc_insertion_point(field_set:pb.TPlayerBannedToPostReq.BanTime)
}

// optional string BanMsg = 3;
inline bool TPlayerBannedToPostReq::has_banmsg() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void TPlayerBannedToPostReq::set_has_banmsg() {
  _has_bits_[0] |= 0x00000004u;
}
inline void TPlayerBannedToPostReq::clear_has_banmsg() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void TPlayerBannedToPostReq::clear_banmsg() {
  if (banmsg_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    banmsg_->clear();
  }
  clear_has_banmsg();
}
inline const ::std::string& TPlayerBannedToPostReq::banmsg() const {
  // @@protoc_insertion_point(field_get:pb.TPlayerBannedToPostReq.BanMsg)
  return *banmsg_;
}
inline void TPlayerBannedToPostReq::set_banmsg(const ::std::string& value) {
  set_has_banmsg();
  if (banmsg_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    banmsg_ = new ::std::string;
  }
  banmsg_->assign(value);
  // @@protoc_insertion_point(field_set:pb.TPlayerBannedToPostReq.BanMsg)
}
inline void TPlayerBannedToPostReq::set_banmsg(const char* value) {
  set_has_banmsg();
  if (banmsg_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    banmsg_ = new ::std::string;
  }
  banmsg_->assign(value);
  // @@protoc_insertion_point(field_set_char:pb.TPlayerBannedToPostReq.BanMsg)
}
inline void TPlayerBannedToPostReq::set_banmsg(const char* value, size_t size) {
  set_has_banmsg();
  if (banmsg_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    banmsg_ = new ::std::string;
  }
  banmsg_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:pb.TPlayerBannedToPostReq.BanMsg)
}
inline ::std::string* TPlayerBannedToPostReq::mutable_banmsg() {
  set_has_banmsg();
  if (banmsg_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    banmsg_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:pb.TPlayerBannedToPostReq.BanMsg)
  return banmsg_;
}
inline ::std::string* TPlayerBannedToPostReq::release_banmsg() {
  clear_has_banmsg();
  if (banmsg_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = banmsg_;
    banmsg_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void TPlayerBannedToPostReq::set_allocated_banmsg(::std::string* banmsg) {
  if (banmsg_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete banmsg_;
  }
  if (banmsg) {
    set_has_banmsg();
    banmsg_ = banmsg;
  } else {
    clear_has_banmsg();
    banmsg_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:pb.TPlayerBannedToPostReq.BanMsg)
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace pb

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_net_2fPlayer_2eproto__INCLUDED
