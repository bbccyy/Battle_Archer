// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: net/WarRidingHandbook.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "net/WarRidingHandbook.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace pb {

namespace {

const ::google::protobuf::Descriptor* TWarRidingHandBookInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TWarRidingHandBookInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* TWarRidingHandBookGetInfoRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TWarRidingHandBookGetInfoRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* TWarRidingHandBookUpgradeReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TWarRidingHandBookUpgradeReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* TWarRidingHandBookUpgradeRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TWarRidingHandBookUpgradeRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* TWarRidingHandBookActiveReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TWarRidingHandBookActiveReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* TWarRidingHandBookActiveRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TWarRidingHandBookActiveRsp_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_net_2fWarRidingHandbook_2eproto() {
  protobuf_AddDesc_net_2fWarRidingHandbook_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "net/WarRidingHandbook.proto");
  GOOGLE_CHECK(file != NULL);
  TWarRidingHandBookInfo_descriptor_ = file->message_type(0);
  static const int TWarRidingHandBookInfo_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TWarRidingHandBookInfo, warridinghandbookid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TWarRidingHandBookInfo, warridinghandbooklv_),
  };
  TWarRidingHandBookInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TWarRidingHandBookInfo_descriptor_,
      TWarRidingHandBookInfo::default_instance_,
      TWarRidingHandBookInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TWarRidingHandBookInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TWarRidingHandBookInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TWarRidingHandBookInfo));
  TWarRidingHandBookGetInfoRsp_descriptor_ = file->message_type(1);
  static const int TWarRidingHandBookGetInfoRsp_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TWarRidingHandBookGetInfoRsp, warridinghandbookarr_),
  };
  TWarRidingHandBookGetInfoRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TWarRidingHandBookGetInfoRsp_descriptor_,
      TWarRidingHandBookGetInfoRsp::default_instance_,
      TWarRidingHandBookGetInfoRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TWarRidingHandBookGetInfoRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TWarRidingHandBookGetInfoRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TWarRidingHandBookGetInfoRsp));
  TWarRidingHandBookUpgradeReq_descriptor_ = file->message_type(2);
  static const int TWarRidingHandBookUpgradeReq_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TWarRidingHandBookUpgradeReq, warridinghandbookid_),
  };
  TWarRidingHandBookUpgradeReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TWarRidingHandBookUpgradeReq_descriptor_,
      TWarRidingHandBookUpgradeReq::default_instance_,
      TWarRidingHandBookUpgradeReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TWarRidingHandBookUpgradeReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TWarRidingHandBookUpgradeReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TWarRidingHandBookUpgradeReq));
  TWarRidingHandBookUpgradeRsp_descriptor_ = file->message_type(3);
  static const int TWarRidingHandBookUpgradeRsp_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TWarRidingHandBookUpgradeRsp, warridinghandbookinfo_),
  };
  TWarRidingHandBookUpgradeRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TWarRidingHandBookUpgradeRsp_descriptor_,
      TWarRidingHandBookUpgradeRsp::default_instance_,
      TWarRidingHandBookUpgradeRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TWarRidingHandBookUpgradeRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TWarRidingHandBookUpgradeRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TWarRidingHandBookUpgradeRsp));
  TWarRidingHandBookActiveReq_descriptor_ = file->message_type(4);
  static const int TWarRidingHandBookActiveReq_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TWarRidingHandBookActiveReq, warridinghandbookid_),
  };
  TWarRidingHandBookActiveReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TWarRidingHandBookActiveReq_descriptor_,
      TWarRidingHandBookActiveReq::default_instance_,
      TWarRidingHandBookActiveReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TWarRidingHandBookActiveReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TWarRidingHandBookActiveReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TWarRidingHandBookActiveReq));
  TWarRidingHandBookActiveRsp_descriptor_ = file->message_type(5);
  static const int TWarRidingHandBookActiveRsp_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TWarRidingHandBookActiveRsp, warridinghandbookinfo_),
  };
  TWarRidingHandBookActiveRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TWarRidingHandBookActiveRsp_descriptor_,
      TWarRidingHandBookActiveRsp::default_instance_,
      TWarRidingHandBookActiveRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TWarRidingHandBookActiveRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TWarRidingHandBookActiveRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TWarRidingHandBookActiveRsp));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_net_2fWarRidingHandbook_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TWarRidingHandBookInfo_descriptor_, &TWarRidingHandBookInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TWarRidingHandBookGetInfoRsp_descriptor_, &TWarRidingHandBookGetInfoRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TWarRidingHandBookUpgradeReq_descriptor_, &TWarRidingHandBookUpgradeReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TWarRidingHandBookUpgradeRsp_descriptor_, &TWarRidingHandBookUpgradeRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TWarRidingHandBookActiveReq_descriptor_, &TWarRidingHandBookActiveReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TWarRidingHandBookActiveRsp_descriptor_, &TWarRidingHandBookActiveRsp::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_net_2fWarRidingHandbook_2eproto() {
  delete TWarRidingHandBookInfo::default_instance_;
  delete TWarRidingHandBookInfo_reflection_;
  delete TWarRidingHandBookGetInfoRsp::default_instance_;
  delete TWarRidingHandBookGetInfoRsp_reflection_;
  delete TWarRidingHandBookUpgradeReq::default_instance_;
  delete TWarRidingHandBookUpgradeReq_reflection_;
  delete TWarRidingHandBookUpgradeRsp::default_instance_;
  delete TWarRidingHandBookUpgradeRsp_reflection_;
  delete TWarRidingHandBookActiveReq::default_instance_;
  delete TWarRidingHandBookActiveReq_reflection_;
  delete TWarRidingHandBookActiveRsp::default_instance_;
  delete TWarRidingHandBookActiveRsp_reflection_;
}

void protobuf_AddDesc_net_2fWarRidingHandbook_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\033net/WarRidingHandbook.proto\022\002pb\"R\n\026TWa"
    "rRidingHandBookInfo\022\033\n\023WarRidingHandBook"
    "Id\030\001 \001(\r\022\033\n\023WarRidingHandBookLv\030\002 \001(\r\"X\n"
    "\034TWarRidingHandBookGetInfoRsp\0228\n\024WarRidi"
    "ngHandBookArr\030\001 \003(\0132\032.pb.TWarRidingHandB"
    "ookInfo\";\n\034TWarRidingHandBookUpgradeReq\022"
    "\033\n\023WarRidingHandBookId\030\001 \001(\r\"Y\n\034TWarRidi"
    "ngHandBookUpgradeRsp\0229\n\025WarRidingHandBoo"
    "kInfo\030\001 \001(\0132\032.pb.TWarRidingHandBookInfo\""
    ":\n\033TWarRidingHandBookActiveReq\022\033\n\023WarRid"
    "ingHandBookId\030\001 \001(\r\"X\n\033TWarRidingHandBoo"
    "kActiveRsp\0229\n\025WarRidingHandBookInfo\030\001 \001("
    "\0132\032.pb.TWarRidingHandBookInfo", 509);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "net/WarRidingHandbook.proto", &protobuf_RegisterTypes);
  TWarRidingHandBookInfo::default_instance_ = new TWarRidingHandBookInfo();
  TWarRidingHandBookGetInfoRsp::default_instance_ = new TWarRidingHandBookGetInfoRsp();
  TWarRidingHandBookUpgradeReq::default_instance_ = new TWarRidingHandBookUpgradeReq();
  TWarRidingHandBookUpgradeRsp::default_instance_ = new TWarRidingHandBookUpgradeRsp();
  TWarRidingHandBookActiveReq::default_instance_ = new TWarRidingHandBookActiveReq();
  TWarRidingHandBookActiveRsp::default_instance_ = new TWarRidingHandBookActiveRsp();
  TWarRidingHandBookInfo::default_instance_->InitAsDefaultInstance();
  TWarRidingHandBookGetInfoRsp::default_instance_->InitAsDefaultInstance();
  TWarRidingHandBookUpgradeReq::default_instance_->InitAsDefaultInstance();
  TWarRidingHandBookUpgradeRsp::default_instance_->InitAsDefaultInstance();
  TWarRidingHandBookActiveReq::default_instance_->InitAsDefaultInstance();
  TWarRidingHandBookActiveRsp::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_net_2fWarRidingHandbook_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_net_2fWarRidingHandbook_2eproto {
  StaticDescriptorInitializer_net_2fWarRidingHandbook_2eproto() {
    protobuf_AddDesc_net_2fWarRidingHandbook_2eproto();
  }
} static_descriptor_initializer_net_2fWarRidingHandbook_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int TWarRidingHandBookInfo::kWarRidingHandBookIdFieldNumber;
const int TWarRidingHandBookInfo::kWarRidingHandBookLvFieldNumber;
#endif  // !_MSC_VER

TWarRidingHandBookInfo::TWarRidingHandBookInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TWarRidingHandBookInfo)
}

void TWarRidingHandBookInfo::InitAsDefaultInstance() {
}

TWarRidingHandBookInfo::TWarRidingHandBookInfo(const TWarRidingHandBookInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TWarRidingHandBookInfo)
}

void TWarRidingHandBookInfo::SharedCtor() {
  _cached_size_ = 0;
  warridinghandbookid_ = 0u;
  warridinghandbooklv_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TWarRidingHandBookInfo::~TWarRidingHandBookInfo() {
  // @@protoc_insertion_point(destructor:pb.TWarRidingHandBookInfo)
  SharedDtor();
}

void TWarRidingHandBookInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TWarRidingHandBookInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TWarRidingHandBookInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TWarRidingHandBookInfo_descriptor_;
}

const TWarRidingHandBookInfo& TWarRidingHandBookInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fWarRidingHandbook_2eproto();
  return *default_instance_;
}

TWarRidingHandBookInfo* TWarRidingHandBookInfo::default_instance_ = NULL;

TWarRidingHandBookInfo* TWarRidingHandBookInfo::New() const {
  return new TWarRidingHandBookInfo;
}

void TWarRidingHandBookInfo::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<TWarRidingHandBookInfo*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(warridinghandbookid_, warridinghandbooklv_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TWarRidingHandBookInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TWarRidingHandBookInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 WarRidingHandBookId = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &warridinghandbookid_)));
          set_has_warridinghandbookid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_WarRidingHandBookLv;
        break;
      }

      // optional uint32 WarRidingHandBookLv = 2;
      case 2: {
        if (tag == 16) {
         parse_WarRidingHandBookLv:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &warridinghandbooklv_)));
          set_has_warridinghandbooklv();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TWarRidingHandBookInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TWarRidingHandBookInfo)
  return false;
#undef DO_
}

void TWarRidingHandBookInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TWarRidingHandBookInfo)
  // optional uint32 WarRidingHandBookId = 1;
  if (has_warridinghandbookid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->warridinghandbookid(), output);
  }

  // optional uint32 WarRidingHandBookLv = 2;
  if (has_warridinghandbooklv()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->warridinghandbooklv(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TWarRidingHandBookInfo)
}

::google::protobuf::uint8* TWarRidingHandBookInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TWarRidingHandBookInfo)
  // optional uint32 WarRidingHandBookId = 1;
  if (has_warridinghandbookid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->warridinghandbookid(), target);
  }

  // optional uint32 WarRidingHandBookLv = 2;
  if (has_warridinghandbooklv()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->warridinghandbooklv(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TWarRidingHandBookInfo)
  return target;
}

int TWarRidingHandBookInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 WarRidingHandBookId = 1;
    if (has_warridinghandbookid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->warridinghandbookid());
    }

    // optional uint32 WarRidingHandBookLv = 2;
    if (has_warridinghandbooklv()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->warridinghandbooklv());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TWarRidingHandBookInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TWarRidingHandBookInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TWarRidingHandBookInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TWarRidingHandBookInfo::MergeFrom(const TWarRidingHandBookInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_warridinghandbookid()) {
      set_warridinghandbookid(from.warridinghandbookid());
    }
    if (from.has_warridinghandbooklv()) {
      set_warridinghandbooklv(from.warridinghandbooklv());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TWarRidingHandBookInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TWarRidingHandBookInfo::CopyFrom(const TWarRidingHandBookInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TWarRidingHandBookInfo::IsInitialized() const {

  return true;
}

void TWarRidingHandBookInfo::Swap(TWarRidingHandBookInfo* other) {
  if (other != this) {
    std::swap(warridinghandbookid_, other->warridinghandbookid_);
    std::swap(warridinghandbooklv_, other->warridinghandbooklv_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TWarRidingHandBookInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TWarRidingHandBookInfo_descriptor_;
  metadata.reflection = TWarRidingHandBookInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TWarRidingHandBookGetInfoRsp::kWarRidingHandBookArrFieldNumber;
#endif  // !_MSC_VER

TWarRidingHandBookGetInfoRsp::TWarRidingHandBookGetInfoRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TWarRidingHandBookGetInfoRsp)
}

void TWarRidingHandBookGetInfoRsp::InitAsDefaultInstance() {
}

TWarRidingHandBookGetInfoRsp::TWarRidingHandBookGetInfoRsp(const TWarRidingHandBookGetInfoRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TWarRidingHandBookGetInfoRsp)
}

void TWarRidingHandBookGetInfoRsp::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TWarRidingHandBookGetInfoRsp::~TWarRidingHandBookGetInfoRsp() {
  // @@protoc_insertion_point(destructor:pb.TWarRidingHandBookGetInfoRsp)
  SharedDtor();
}

void TWarRidingHandBookGetInfoRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TWarRidingHandBookGetInfoRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TWarRidingHandBookGetInfoRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TWarRidingHandBookGetInfoRsp_descriptor_;
}

const TWarRidingHandBookGetInfoRsp& TWarRidingHandBookGetInfoRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fWarRidingHandbook_2eproto();
  return *default_instance_;
}

TWarRidingHandBookGetInfoRsp* TWarRidingHandBookGetInfoRsp::default_instance_ = NULL;

TWarRidingHandBookGetInfoRsp* TWarRidingHandBookGetInfoRsp::New() const {
  return new TWarRidingHandBookGetInfoRsp;
}

void TWarRidingHandBookGetInfoRsp::Clear() {
  warridinghandbookarr_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TWarRidingHandBookGetInfoRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TWarRidingHandBookGetInfoRsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .pb.TWarRidingHandBookInfo WarRidingHandBookArr = 1;
      case 1: {
        if (tag == 10) {
         parse_WarRidingHandBookArr:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_warridinghandbookarr()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_WarRidingHandBookArr;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TWarRidingHandBookGetInfoRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TWarRidingHandBookGetInfoRsp)
  return false;
#undef DO_
}

void TWarRidingHandBookGetInfoRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TWarRidingHandBookGetInfoRsp)
  // repeated .pb.TWarRidingHandBookInfo WarRidingHandBookArr = 1;
  for (int i = 0; i < this->warridinghandbookarr_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->warridinghandbookarr(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TWarRidingHandBookGetInfoRsp)
}

::google::protobuf::uint8* TWarRidingHandBookGetInfoRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TWarRidingHandBookGetInfoRsp)
  // repeated .pb.TWarRidingHandBookInfo WarRidingHandBookArr = 1;
  for (int i = 0; i < this->warridinghandbookarr_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->warridinghandbookarr(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TWarRidingHandBookGetInfoRsp)
  return target;
}

int TWarRidingHandBookGetInfoRsp::ByteSize() const {
  int total_size = 0;

  // repeated .pb.TWarRidingHandBookInfo WarRidingHandBookArr = 1;
  total_size += 1 * this->warridinghandbookarr_size();
  for (int i = 0; i < this->warridinghandbookarr_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->warridinghandbookarr(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TWarRidingHandBookGetInfoRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TWarRidingHandBookGetInfoRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TWarRidingHandBookGetInfoRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TWarRidingHandBookGetInfoRsp::MergeFrom(const TWarRidingHandBookGetInfoRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  warridinghandbookarr_.MergeFrom(from.warridinghandbookarr_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TWarRidingHandBookGetInfoRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TWarRidingHandBookGetInfoRsp::CopyFrom(const TWarRidingHandBookGetInfoRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TWarRidingHandBookGetInfoRsp::IsInitialized() const {

  return true;
}

void TWarRidingHandBookGetInfoRsp::Swap(TWarRidingHandBookGetInfoRsp* other) {
  if (other != this) {
    warridinghandbookarr_.Swap(&other->warridinghandbookarr_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TWarRidingHandBookGetInfoRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TWarRidingHandBookGetInfoRsp_descriptor_;
  metadata.reflection = TWarRidingHandBookGetInfoRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TWarRidingHandBookUpgradeReq::kWarRidingHandBookIdFieldNumber;
#endif  // !_MSC_VER

TWarRidingHandBookUpgradeReq::TWarRidingHandBookUpgradeReq()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TWarRidingHandBookUpgradeReq)
}

void TWarRidingHandBookUpgradeReq::InitAsDefaultInstance() {
}

TWarRidingHandBookUpgradeReq::TWarRidingHandBookUpgradeReq(const TWarRidingHandBookUpgradeReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TWarRidingHandBookUpgradeReq)
}

void TWarRidingHandBookUpgradeReq::SharedCtor() {
  _cached_size_ = 0;
  warridinghandbookid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TWarRidingHandBookUpgradeReq::~TWarRidingHandBookUpgradeReq() {
  // @@protoc_insertion_point(destructor:pb.TWarRidingHandBookUpgradeReq)
  SharedDtor();
}

void TWarRidingHandBookUpgradeReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TWarRidingHandBookUpgradeReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TWarRidingHandBookUpgradeReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TWarRidingHandBookUpgradeReq_descriptor_;
}

const TWarRidingHandBookUpgradeReq& TWarRidingHandBookUpgradeReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fWarRidingHandbook_2eproto();
  return *default_instance_;
}

TWarRidingHandBookUpgradeReq* TWarRidingHandBookUpgradeReq::default_instance_ = NULL;

TWarRidingHandBookUpgradeReq* TWarRidingHandBookUpgradeReq::New() const {
  return new TWarRidingHandBookUpgradeReq;
}

void TWarRidingHandBookUpgradeReq::Clear() {
  warridinghandbookid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TWarRidingHandBookUpgradeReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TWarRidingHandBookUpgradeReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 WarRidingHandBookId = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &warridinghandbookid_)));
          set_has_warridinghandbookid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TWarRidingHandBookUpgradeReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TWarRidingHandBookUpgradeReq)
  return false;
#undef DO_
}

void TWarRidingHandBookUpgradeReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TWarRidingHandBookUpgradeReq)
  // optional uint32 WarRidingHandBookId = 1;
  if (has_warridinghandbookid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->warridinghandbookid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TWarRidingHandBookUpgradeReq)
}

::google::protobuf::uint8* TWarRidingHandBookUpgradeReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TWarRidingHandBookUpgradeReq)
  // optional uint32 WarRidingHandBookId = 1;
  if (has_warridinghandbookid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->warridinghandbookid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TWarRidingHandBookUpgradeReq)
  return target;
}

int TWarRidingHandBookUpgradeReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 WarRidingHandBookId = 1;
    if (has_warridinghandbookid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->warridinghandbookid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TWarRidingHandBookUpgradeReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TWarRidingHandBookUpgradeReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TWarRidingHandBookUpgradeReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TWarRidingHandBookUpgradeReq::MergeFrom(const TWarRidingHandBookUpgradeReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_warridinghandbookid()) {
      set_warridinghandbookid(from.warridinghandbookid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TWarRidingHandBookUpgradeReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TWarRidingHandBookUpgradeReq::CopyFrom(const TWarRidingHandBookUpgradeReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TWarRidingHandBookUpgradeReq::IsInitialized() const {

  return true;
}

void TWarRidingHandBookUpgradeReq::Swap(TWarRidingHandBookUpgradeReq* other) {
  if (other != this) {
    std::swap(warridinghandbookid_, other->warridinghandbookid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TWarRidingHandBookUpgradeReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TWarRidingHandBookUpgradeReq_descriptor_;
  metadata.reflection = TWarRidingHandBookUpgradeReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TWarRidingHandBookUpgradeRsp::kWarRidingHandBookInfoFieldNumber;
#endif  // !_MSC_VER

TWarRidingHandBookUpgradeRsp::TWarRidingHandBookUpgradeRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TWarRidingHandBookUpgradeRsp)
}

void TWarRidingHandBookUpgradeRsp::InitAsDefaultInstance() {
  warridinghandbookinfo_ = const_cast< ::pb::TWarRidingHandBookInfo*>(&::pb::TWarRidingHandBookInfo::default_instance());
}

TWarRidingHandBookUpgradeRsp::TWarRidingHandBookUpgradeRsp(const TWarRidingHandBookUpgradeRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TWarRidingHandBookUpgradeRsp)
}

void TWarRidingHandBookUpgradeRsp::SharedCtor() {
  _cached_size_ = 0;
  warridinghandbookinfo_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TWarRidingHandBookUpgradeRsp::~TWarRidingHandBookUpgradeRsp() {
  // @@protoc_insertion_point(destructor:pb.TWarRidingHandBookUpgradeRsp)
  SharedDtor();
}

void TWarRidingHandBookUpgradeRsp::SharedDtor() {
  if (this != default_instance_) {
    delete warridinghandbookinfo_;
  }
}

void TWarRidingHandBookUpgradeRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TWarRidingHandBookUpgradeRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TWarRidingHandBookUpgradeRsp_descriptor_;
}

const TWarRidingHandBookUpgradeRsp& TWarRidingHandBookUpgradeRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fWarRidingHandbook_2eproto();
  return *default_instance_;
}

TWarRidingHandBookUpgradeRsp* TWarRidingHandBookUpgradeRsp::default_instance_ = NULL;

TWarRidingHandBookUpgradeRsp* TWarRidingHandBookUpgradeRsp::New() const {
  return new TWarRidingHandBookUpgradeRsp;
}

void TWarRidingHandBookUpgradeRsp::Clear() {
  if (has_warridinghandbookinfo()) {
    if (warridinghandbookinfo_ != NULL) warridinghandbookinfo_->::pb::TWarRidingHandBookInfo::Clear();
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TWarRidingHandBookUpgradeRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TWarRidingHandBookUpgradeRsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .pb.TWarRidingHandBookInfo WarRidingHandBookInfo = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_warridinghandbookinfo()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TWarRidingHandBookUpgradeRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TWarRidingHandBookUpgradeRsp)
  return false;
#undef DO_
}

void TWarRidingHandBookUpgradeRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TWarRidingHandBookUpgradeRsp)
  // optional .pb.TWarRidingHandBookInfo WarRidingHandBookInfo = 1;
  if (has_warridinghandbookinfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->warridinghandbookinfo(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TWarRidingHandBookUpgradeRsp)
}

::google::protobuf::uint8* TWarRidingHandBookUpgradeRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TWarRidingHandBookUpgradeRsp)
  // optional .pb.TWarRidingHandBookInfo WarRidingHandBookInfo = 1;
  if (has_warridinghandbookinfo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->warridinghandbookinfo(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TWarRidingHandBookUpgradeRsp)
  return target;
}

int TWarRidingHandBookUpgradeRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .pb.TWarRidingHandBookInfo WarRidingHandBookInfo = 1;
    if (has_warridinghandbookinfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->warridinghandbookinfo());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TWarRidingHandBookUpgradeRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TWarRidingHandBookUpgradeRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TWarRidingHandBookUpgradeRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TWarRidingHandBookUpgradeRsp::MergeFrom(const TWarRidingHandBookUpgradeRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_warridinghandbookinfo()) {
      mutable_warridinghandbookinfo()->::pb::TWarRidingHandBookInfo::MergeFrom(from.warridinghandbookinfo());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TWarRidingHandBookUpgradeRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TWarRidingHandBookUpgradeRsp::CopyFrom(const TWarRidingHandBookUpgradeRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TWarRidingHandBookUpgradeRsp::IsInitialized() const {

  return true;
}

void TWarRidingHandBookUpgradeRsp::Swap(TWarRidingHandBookUpgradeRsp* other) {
  if (other != this) {
    std::swap(warridinghandbookinfo_, other->warridinghandbookinfo_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TWarRidingHandBookUpgradeRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TWarRidingHandBookUpgradeRsp_descriptor_;
  metadata.reflection = TWarRidingHandBookUpgradeRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TWarRidingHandBookActiveReq::kWarRidingHandBookIdFieldNumber;
#endif  // !_MSC_VER

TWarRidingHandBookActiveReq::TWarRidingHandBookActiveReq()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TWarRidingHandBookActiveReq)
}

void TWarRidingHandBookActiveReq::InitAsDefaultInstance() {
}

TWarRidingHandBookActiveReq::TWarRidingHandBookActiveReq(const TWarRidingHandBookActiveReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TWarRidingHandBookActiveReq)
}

void TWarRidingHandBookActiveReq::SharedCtor() {
  _cached_size_ = 0;
  warridinghandbookid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TWarRidingHandBookActiveReq::~TWarRidingHandBookActiveReq() {
  // @@protoc_insertion_point(destructor:pb.TWarRidingHandBookActiveReq)
  SharedDtor();
}

void TWarRidingHandBookActiveReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TWarRidingHandBookActiveReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TWarRidingHandBookActiveReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TWarRidingHandBookActiveReq_descriptor_;
}

const TWarRidingHandBookActiveReq& TWarRidingHandBookActiveReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fWarRidingHandbook_2eproto();
  return *default_instance_;
}

TWarRidingHandBookActiveReq* TWarRidingHandBookActiveReq::default_instance_ = NULL;

TWarRidingHandBookActiveReq* TWarRidingHandBookActiveReq::New() const {
  return new TWarRidingHandBookActiveReq;
}

void TWarRidingHandBookActiveReq::Clear() {
  warridinghandbookid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TWarRidingHandBookActiveReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TWarRidingHandBookActiveReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 WarRidingHandBookId = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &warridinghandbookid_)));
          set_has_warridinghandbookid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TWarRidingHandBookActiveReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TWarRidingHandBookActiveReq)
  return false;
#undef DO_
}

void TWarRidingHandBookActiveReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TWarRidingHandBookActiveReq)
  // optional uint32 WarRidingHandBookId = 1;
  if (has_warridinghandbookid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->warridinghandbookid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TWarRidingHandBookActiveReq)
}

::google::protobuf::uint8* TWarRidingHandBookActiveReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TWarRidingHandBookActiveReq)
  // optional uint32 WarRidingHandBookId = 1;
  if (has_warridinghandbookid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->warridinghandbookid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TWarRidingHandBookActiveReq)
  return target;
}

int TWarRidingHandBookActiveReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 WarRidingHandBookId = 1;
    if (has_warridinghandbookid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->warridinghandbookid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TWarRidingHandBookActiveReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TWarRidingHandBookActiveReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TWarRidingHandBookActiveReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TWarRidingHandBookActiveReq::MergeFrom(const TWarRidingHandBookActiveReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_warridinghandbookid()) {
      set_warridinghandbookid(from.warridinghandbookid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TWarRidingHandBookActiveReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TWarRidingHandBookActiveReq::CopyFrom(const TWarRidingHandBookActiveReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TWarRidingHandBookActiveReq::IsInitialized() const {

  return true;
}

void TWarRidingHandBookActiveReq::Swap(TWarRidingHandBookActiveReq* other) {
  if (other != this) {
    std::swap(warridinghandbookid_, other->warridinghandbookid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TWarRidingHandBookActiveReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TWarRidingHandBookActiveReq_descriptor_;
  metadata.reflection = TWarRidingHandBookActiveReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TWarRidingHandBookActiveRsp::kWarRidingHandBookInfoFieldNumber;
#endif  // !_MSC_VER

TWarRidingHandBookActiveRsp::TWarRidingHandBookActiveRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TWarRidingHandBookActiveRsp)
}

void TWarRidingHandBookActiveRsp::InitAsDefaultInstance() {
  warridinghandbookinfo_ = const_cast< ::pb::TWarRidingHandBookInfo*>(&::pb::TWarRidingHandBookInfo::default_instance());
}

TWarRidingHandBookActiveRsp::TWarRidingHandBookActiveRsp(const TWarRidingHandBookActiveRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TWarRidingHandBookActiveRsp)
}

void TWarRidingHandBookActiveRsp::SharedCtor() {
  _cached_size_ = 0;
  warridinghandbookinfo_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TWarRidingHandBookActiveRsp::~TWarRidingHandBookActiveRsp() {
  // @@protoc_insertion_point(destructor:pb.TWarRidingHandBookActiveRsp)
  SharedDtor();
}

void TWarRidingHandBookActiveRsp::SharedDtor() {
  if (this != default_instance_) {
    delete warridinghandbookinfo_;
  }
}

void TWarRidingHandBookActiveRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TWarRidingHandBookActiveRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TWarRidingHandBookActiveRsp_descriptor_;
}

const TWarRidingHandBookActiveRsp& TWarRidingHandBookActiveRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fWarRidingHandbook_2eproto();
  return *default_instance_;
}

TWarRidingHandBookActiveRsp* TWarRidingHandBookActiveRsp::default_instance_ = NULL;

TWarRidingHandBookActiveRsp* TWarRidingHandBookActiveRsp::New() const {
  return new TWarRidingHandBookActiveRsp;
}

void TWarRidingHandBookActiveRsp::Clear() {
  if (has_warridinghandbookinfo()) {
    if (warridinghandbookinfo_ != NULL) warridinghandbookinfo_->::pb::TWarRidingHandBookInfo::Clear();
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TWarRidingHandBookActiveRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TWarRidingHandBookActiveRsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .pb.TWarRidingHandBookInfo WarRidingHandBookInfo = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_warridinghandbookinfo()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TWarRidingHandBookActiveRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TWarRidingHandBookActiveRsp)
  return false;
#undef DO_
}

void TWarRidingHandBookActiveRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TWarRidingHandBookActiveRsp)
  // optional .pb.TWarRidingHandBookInfo WarRidingHandBookInfo = 1;
  if (has_warridinghandbookinfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->warridinghandbookinfo(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TWarRidingHandBookActiveRsp)
}

::google::protobuf::uint8* TWarRidingHandBookActiveRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TWarRidingHandBookActiveRsp)
  // optional .pb.TWarRidingHandBookInfo WarRidingHandBookInfo = 1;
  if (has_warridinghandbookinfo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->warridinghandbookinfo(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TWarRidingHandBookActiveRsp)
  return target;
}

int TWarRidingHandBookActiveRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .pb.TWarRidingHandBookInfo WarRidingHandBookInfo = 1;
    if (has_warridinghandbookinfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->warridinghandbookinfo());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TWarRidingHandBookActiveRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TWarRidingHandBookActiveRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TWarRidingHandBookActiveRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TWarRidingHandBookActiveRsp::MergeFrom(const TWarRidingHandBookActiveRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_warridinghandbookinfo()) {
      mutable_warridinghandbookinfo()->::pb::TWarRidingHandBookInfo::MergeFrom(from.warridinghandbookinfo());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TWarRidingHandBookActiveRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TWarRidingHandBookActiveRsp::CopyFrom(const TWarRidingHandBookActiveRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TWarRidingHandBookActiveRsp::IsInitialized() const {

  return true;
}

void TWarRidingHandBookActiveRsp::Swap(TWarRidingHandBookActiveRsp* other) {
  if (other != this) {
    std::swap(warridinghandbookinfo_, other->warridinghandbookinfo_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TWarRidingHandBookActiveRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TWarRidingHandBookActiveRsp_descriptor_;
  metadata.reflection = TWarRidingHandBookActiveRsp_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace pb

// @@protoc_insertion_point(global_scope)
