// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: net/LocalBattleReport.proto

#ifndef PROTOBUF_net_2fLocalBattleReport_2eproto__INCLUDED
#define PROTOBUF_net_2fLocalBattleReport_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace pb {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_net_2fLocalBattleReport_2eproto();
void protobuf_AssignDesc_net_2fLocalBattleReport_2eproto();
void protobuf_ShutdownFile_net_2fLocalBattleReport_2eproto();

class TLocalBattleReportSimpleInfo;
class TLocalReportGetInstanceReportReq;
class TLocalReportGetInstanceReportRsp;
class TLocalReportGetCampTowerReportReq;
class TLocalReportGetCampTowerReportRsp;
class TLocalReportGetTowerReportReq;
class TLocalReportTowerReportCampSingle;
class TLocalReportGetTowerReportRsp;
class TLocalReportGetTowerHellReportReq;
class TLocalReportGetTowerHellReportRsp;
class TLocalReportInsertReportInfoReq;
class TLocalReportDeleteUserReportReq;

// ===================================================================

/*FOR2LUA
<Record>
	<name>TLocalBattleReportSimpleInfo</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/LocalBattleReport.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TLocalBattleReportSimpleInfo : public ::google::protobuf::Message {
 public:
  TLocalBattleReportSimpleInfo();
  virtual ~TLocalBattleReportSimpleInfo();

  TLocalBattleReportSimpleInfo(const TLocalBattleReportSimpleInfo& from);

  inline TLocalBattleReportSimpleInfo& operator=(const TLocalBattleReportSimpleInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TLocalBattleReportSimpleInfo& default_instance();

  void Swap(TLocalBattleReportSimpleInfo* other);

  // implements Message ----------------------------------------------

  TLocalBattleReportSimpleInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TLocalBattleReportSimpleInfo& from);
  void MergeFrom(const TLocalBattleReportSimpleInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint64 Rid = 1;
  inline bool has_rid() const;
  inline void clear_rid();
  static const int kRidFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TLocalBattleReportSimpleInfo</name>
  	<Function>
  		<name>rid</name>
  		<replaceName>Rid</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_rid</name>
  		<replaceName>Rid</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_rid</name>
  		<replaceName>Rid</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint64 rid() const;
  inline void set_rid(::google::protobuf::uint64 value);

  // optional uint64 BattleTime = 2;
  inline bool has_battletime() const;
  inline void clear_battletime();
  static const int kBattleTimeFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TLocalBattleReportSimpleInfo</name>
  	<Function>
  		<name>battletime</name>
  		<replaceName>BattleTime</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_battletime</name>
  		<replaceName>BattleTime</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_battletime</name>
  		<replaceName>BattleTime</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint64 battletime() const;
  inline void set_battletime(::google::protobuf::uint64 value);

  // optional uint64 Uid = 3;
  inline bool has_uid() const;
  inline void clear_uid();
  static const int kUidFieldNumber = 3;
  /*FOR2LUA
  <Record>
  	<name>TLocalBattleReportSimpleInfo</name>
  	<Function>
  		<name>uid</name>
  		<replaceName>Uid</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_uid</name>
  		<replaceName>Uid</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_uid</name>
  		<replaceName>Uid</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint64 uid() const;
  inline void set_uid(::google::protobuf::uint64 value);

  // optional string Uname = 4;
  inline bool has_uname() const;
  inline void clear_uname();
  static const int kUnameFieldNumber = 4;
  /*FOR2LUA
  <Record>
  	<name>TLocalBattleReportSimpleInfo</name>
  	<Function>
  		<name>uname</name>
  		<replaceName>Uname</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_uname</name>
  		<replaceName>Uname</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_uname</name>
  		<replaceName>Uname</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::std::string& uname() const;
  inline void set_uname(const ::std::string& value);
  inline void set_uname(const char* value);
  inline void set_uname(const char* value, size_t size);
  inline ::std::string* mutable_uname();
  inline ::std::string* release_uname();
  inline void set_allocated_uname(::std::string* uname);

  // optional uint32 Level = 5;
  inline bool has_level() const;
  inline void clear_level();
  static const int kLevelFieldNumber = 5;
  /*FOR2LUA
  <Record>
  	<name>TLocalBattleReportSimpleInfo</name>
  	<Function>
  		<name>level</name>
  		<replaceName>Level</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_level</name>
  		<replaceName>Level</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_level</name>
  		<replaceName>Level</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 level() const;
  inline void set_level(::google::protobuf::uint32 value);

  // optional uint64 FightForce = 6;
  inline bool has_fightforce() const;
  inline void clear_fightforce();
  static const int kFightForceFieldNumber = 6;
  /*FOR2LUA
  <Record>
  	<name>TLocalBattleReportSimpleInfo</name>
  	<Function>
  		<name>fightforce</name>
  		<replaceName>FightForce</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_fightforce</name>
  		<replaceName>FightForce</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_fightforce</name>
  		<replaceName>FightForce</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint64 fightforce() const;
  inline void set_fightforce(::google::protobuf::uint64 value);

  // optional uint32 Htid = 7;
  inline bool has_htid() const;
  inline void clear_htid();
  static const int kHtidFieldNumber = 7;
  /*FOR2LUA
  <Record>
  	<name>TLocalBattleReportSimpleInfo</name>
  	<Function>
  		<name>htid</name>
  		<replaceName>Htid</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_htid</name>
  		<replaceName>Htid</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_htid</name>
  		<replaceName>Htid</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 htid() const;
  inline void set_htid(::google::protobuf::uint32 value);

  // optional uint32 PlayerImageFrameTid = 8;
  inline bool has_playerimageframetid() const;
  inline void clear_playerimageframetid();
  static const int kPlayerImageFrameTidFieldNumber = 8;
  /*FOR2LUA
  <Record>
  	<name>TLocalBattleReportSimpleInfo</name>
  	<Function>
  		<name>playerimageframetid</name>
  		<replaceName>PlayerImageFrameTid</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_playerimageframetid</name>
  		<replaceName>PlayerImageFrameTid</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_playerimageframetid</name>
  		<replaceName>PlayerImageFrameTid</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 playerimageframetid() const;
  inline void set_playerimageframetid(::google::protobuf::uint32 value);

  // optional string LocalId = 9;
  inline bool has_localid() const;
  inline void clear_localid();
  static const int kLocalIdFieldNumber = 9;
  /*FOR2LUA
  <Record>
  	<name>TLocalBattleReportSimpleInfo</name>
  	<Function>
  		<name>localid</name>
  		<replaceName>LocalId</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_localid</name>
  		<replaceName>LocalId</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_localid</name>
  		<replaceName>LocalId</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::std::string& localid() const;
  inline void set_localid(const ::std::string& value);
  inline void set_localid(const char* value);
  inline void set_localid(const char* value, size_t size);
  inline ::std::string* mutable_localid();
  inline ::std::string* release_localid();
  inline void set_allocated_localid(::std::string* localid);

  // optional string ServerId = 10;
  inline bool has_serverid() const;
  inline void clear_serverid();
  static const int kServerIdFieldNumber = 10;
  /*FOR2LUA
  <Record>
  	<name>TLocalBattleReportSimpleInfo</name>
  	<Function>
  		<name>serverid</name>
  		<replaceName>ServerId</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_serverid</name>
  		<replaceName>ServerId</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_serverid</name>
  		<replaceName>ServerId</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::std::string& serverid() const;
  inline void set_serverid(const ::std::string& value);
  inline void set_serverid(const char* value);
  inline void set_serverid(const char* value, size_t size);
  inline ::std::string* mutable_serverid();
  inline ::std::string* release_serverid();
  inline void set_allocated_serverid(::std::string* serverid);

  // @@protoc_insertion_point(class_scope:pb.TLocalBattleReportSimpleInfo)
 private:
  inline void set_has_rid();
  inline void clear_has_rid();
  inline void set_has_battletime();
  inline void clear_has_battletime();
  inline void set_has_uid();
  inline void clear_has_uid();
  inline void set_has_uname();
  inline void clear_has_uname();
  inline void set_has_level();
  inline void clear_has_level();
  inline void set_has_fightforce();
  inline void clear_has_fightforce();
  inline void set_has_htid();
  inline void clear_has_htid();
  inline void set_has_playerimageframetid();
  inline void clear_has_playerimageframetid();
  inline void set_has_localid();
  inline void clear_has_localid();
  inline void set_has_serverid();
  inline void clear_has_serverid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint64 rid_;
  ::google::protobuf::uint64 battletime_;
  ::google::protobuf::uint64 uid_;
  ::std::string* uname_;
  ::google::protobuf::uint64 fightforce_;
  ::google::protobuf::uint32 level_;
  ::google::protobuf::uint32 htid_;
  ::std::string* localid_;
  ::std::string* serverid_;
  ::google::protobuf::uint32 playerimageframetid_;
  friend void  protobuf_AddDesc_net_2fLocalBattleReport_2eproto();
  friend void protobuf_AssignDesc_net_2fLocalBattleReport_2eproto();
  friend void protobuf_ShutdownFile_net_2fLocalBattleReport_2eproto();

  void InitAsDefaultInstance();
  static TLocalBattleReportSimpleInfo* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TLocalReportGetInstanceReportReq</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/LocalBattleReport.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TLocalReportGetInstanceReportReq : public ::google::protobuf::Message {
 public:
  TLocalReportGetInstanceReportReq();
  virtual ~TLocalReportGetInstanceReportReq();

  TLocalReportGetInstanceReportReq(const TLocalReportGetInstanceReportReq& from);

  inline TLocalReportGetInstanceReportReq& operator=(const TLocalReportGetInstanceReportReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TLocalReportGetInstanceReportReq& default_instance();

  void Swap(TLocalReportGetInstanceReportReq* other);

  // implements Message ----------------------------------------------

  TLocalReportGetInstanceReportReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TLocalReportGetInstanceReportReq& from);
  void MergeFrom(const TLocalReportGetInstanceReportReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 StrongholdId = 1;
  inline bool has_strongholdid() const;
  inline void clear_strongholdid();
  static const int kStrongholdIdFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TLocalReportGetInstanceReportReq</name>
  	<Function>
  		<name>strongholdid</name>
  		<replaceName>StrongholdId</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_strongholdid</name>
  		<replaceName>StrongholdId</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_strongholdid</name>
  		<replaceName>StrongholdId</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 strongholdid() const;
  inline void set_strongholdid(::google::protobuf::uint32 value);

  // optional uint32 ReportType = 2;
  inline bool has_reporttype() const;
  inline void clear_reporttype();
  static const int kReportTypeFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TLocalReportGetInstanceReportReq</name>
  	<Function>
  		<name>reporttype</name>
  		<replaceName>ReportType</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_reporttype</name>
  		<replaceName>ReportType</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_reporttype</name>
  		<replaceName>ReportType</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 reporttype() const;
  inline void set_reporttype(::google::protobuf::uint32 value);

  // optional uint32 CampId = 3;
  inline bool has_campid() const;
  inline void clear_campid();
  static const int kCampIdFieldNumber = 3;
  /*FOR2LUA
  <Record>
  	<name>TLocalReportGetInstanceReportReq</name>
  	<Function>
  		<name>campid</name>
  		<replaceName>CampId</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_campid</name>
  		<replaceName>CampId</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_campid</name>
  		<replaceName>CampId</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 campid() const;
  inline void set_campid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:pb.TLocalReportGetInstanceReportReq)
 private:
  inline void set_has_strongholdid();
  inline void clear_has_strongholdid();
  inline void set_has_reporttype();
  inline void clear_has_reporttype();
  inline void set_has_campid();
  inline void clear_has_campid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 strongholdid_;
  ::google::protobuf::uint32 reporttype_;
  ::google::protobuf::uint32 campid_;
  friend void  protobuf_AddDesc_net_2fLocalBattleReport_2eproto();
  friend void protobuf_AssignDesc_net_2fLocalBattleReport_2eproto();
  friend void protobuf_ShutdownFile_net_2fLocalBattleReport_2eproto();

  void InitAsDefaultInstance();
  static TLocalReportGetInstanceReportReq* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TLocalReportGetInstanceReportRsp</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/LocalBattleReport.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TLocalReportGetInstanceReportRsp : public ::google::protobuf::Message {
 public:
  TLocalReportGetInstanceReportRsp();
  virtual ~TLocalReportGetInstanceReportRsp();

  TLocalReportGetInstanceReportRsp(const TLocalReportGetInstanceReportRsp& from);

  inline TLocalReportGetInstanceReportRsp& operator=(const TLocalReportGetInstanceReportRsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TLocalReportGetInstanceReportRsp& default_instance();

  void Swap(TLocalReportGetInstanceReportRsp* other);

  // implements Message ----------------------------------------------

  TLocalReportGetInstanceReportRsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TLocalReportGetInstanceReportRsp& from);
  void MergeFrom(const TLocalReportGetInstanceReportRsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .pb.TLocalBattleReportSimpleInfo ReportArr = 1;
  inline int reportarr_size() const;
  inline void clear_reportarr();
  static const int kReportArrFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TLocalReportGetInstanceReportRsp</name>
  	<Function>
  		<name>reportarr</name>
  		<replaceName>ReportArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_reportarr</name>
  		<replaceName>ReportArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_reportarr</name>
  		<replaceName>ReportArr</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_reportarr</name>
  		<replaceName>ReportArr</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>reportarr_size</name>
  		<replaceName>ReportArr</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TLocalBattleReportSimpleInfo& reportarr(int index) const;
  inline ::pb::TLocalBattleReportSimpleInfo* mutable_reportarr(int index);
  inline ::pb::TLocalBattleReportSimpleInfo* add_reportarr();
  inline const ::google::protobuf::RepeatedPtrField< ::pb::TLocalBattleReportSimpleInfo >&
      reportarr() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb::TLocalBattleReportSimpleInfo >*
      mutable_reportarr();

  // @@protoc_insertion_point(class_scope:pb.TLocalReportGetInstanceReportRsp)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::pb::TLocalBattleReportSimpleInfo > reportarr_;
  friend void  protobuf_AddDesc_net_2fLocalBattleReport_2eproto();
  friend void protobuf_AssignDesc_net_2fLocalBattleReport_2eproto();
  friend void protobuf_ShutdownFile_net_2fLocalBattleReport_2eproto();

  void InitAsDefaultInstance();
  static TLocalReportGetInstanceReportRsp* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TLocalReportGetCampTowerReportReq</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/LocalBattleReport.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TLocalReportGetCampTowerReportReq : public ::google::protobuf::Message {
 public:
  TLocalReportGetCampTowerReportReq();
  virtual ~TLocalReportGetCampTowerReportReq();

  TLocalReportGetCampTowerReportReq(const TLocalReportGetCampTowerReportReq& from);

  inline TLocalReportGetCampTowerReportReq& operator=(const TLocalReportGetCampTowerReportReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TLocalReportGetCampTowerReportReq& default_instance();

  void Swap(TLocalReportGetCampTowerReportReq* other);

  // implements Message ----------------------------------------------

  TLocalReportGetCampTowerReportReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TLocalReportGetCampTowerReportReq& from);
  void MergeFrom(const TLocalReportGetCampTowerReportReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 CampId = 1;
  inline bool has_campid() const;
  inline void clear_campid();
  static const int kCampIdFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TLocalReportGetCampTowerReportReq</name>
  	<Function>
  		<name>campid</name>
  		<replaceName>CampId</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_campid</name>
  		<replaceName>CampId</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_campid</name>
  		<replaceName>CampId</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 campid() const;
  inline void set_campid(::google::protobuf::uint32 value);

  // optional uint32 LayerId = 2;
  inline bool has_layerid() const;
  inline void clear_layerid();
  static const int kLayerIdFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TLocalReportGetCampTowerReportReq</name>
  	<Function>
  		<name>layerid</name>
  		<replaceName>LayerId</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_layerid</name>
  		<replaceName>LayerId</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_layerid</name>
  		<replaceName>LayerId</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 layerid() const;
  inline void set_layerid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:pb.TLocalReportGetCampTowerReportReq)
 private:
  inline void set_has_campid();
  inline void clear_has_campid();
  inline void set_has_layerid();
  inline void clear_has_layerid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 campid_;
  ::google::protobuf::uint32 layerid_;
  friend void  protobuf_AddDesc_net_2fLocalBattleReport_2eproto();
  friend void protobuf_AssignDesc_net_2fLocalBattleReport_2eproto();
  friend void protobuf_ShutdownFile_net_2fLocalBattleReport_2eproto();

  void InitAsDefaultInstance();
  static TLocalReportGetCampTowerReportReq* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TLocalReportGetCampTowerReportRsp</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/LocalBattleReport.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TLocalReportGetCampTowerReportRsp : public ::google::protobuf::Message {
 public:
  TLocalReportGetCampTowerReportRsp();
  virtual ~TLocalReportGetCampTowerReportRsp();

  TLocalReportGetCampTowerReportRsp(const TLocalReportGetCampTowerReportRsp& from);

  inline TLocalReportGetCampTowerReportRsp& operator=(const TLocalReportGetCampTowerReportRsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TLocalReportGetCampTowerReportRsp& default_instance();

  void Swap(TLocalReportGetCampTowerReportRsp* other);

  // implements Message ----------------------------------------------

  TLocalReportGetCampTowerReportRsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TLocalReportGetCampTowerReportRsp& from);
  void MergeFrom(const TLocalReportGetCampTowerReportRsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .pb.TLocalBattleReportSimpleInfo ReportArr = 1;
  inline int reportarr_size() const;
  inline void clear_reportarr();
  static const int kReportArrFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TLocalReportGetCampTowerReportRsp</name>
  	<Function>
  		<name>reportarr</name>
  		<replaceName>ReportArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_reportarr</name>
  		<replaceName>ReportArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_reportarr</name>
  		<replaceName>ReportArr</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_reportarr</name>
  		<replaceName>ReportArr</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>reportarr_size</name>
  		<replaceName>ReportArr</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TLocalBattleReportSimpleInfo& reportarr(int index) const;
  inline ::pb::TLocalBattleReportSimpleInfo* mutable_reportarr(int index);
  inline ::pb::TLocalBattleReportSimpleInfo* add_reportarr();
  inline const ::google::protobuf::RepeatedPtrField< ::pb::TLocalBattleReportSimpleInfo >&
      reportarr() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb::TLocalBattleReportSimpleInfo >*
      mutable_reportarr();

  // repeated .pb.TLocalBattleReportSimpleInfo RecentReportArr = 2;
  inline int recentreportarr_size() const;
  inline void clear_recentreportarr();
  static const int kRecentReportArrFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TLocalReportGetCampTowerReportRsp</name>
  	<Function>
  		<name>recentreportarr</name>
  		<replaceName>RecentReportArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_recentreportarr</name>
  		<replaceName>RecentReportArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_recentreportarr</name>
  		<replaceName>RecentReportArr</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_recentreportarr</name>
  		<replaceName>RecentReportArr</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>recentreportarr_size</name>
  		<replaceName>RecentReportArr</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TLocalBattleReportSimpleInfo& recentreportarr(int index) const;
  inline ::pb::TLocalBattleReportSimpleInfo* mutable_recentreportarr(int index);
  inline ::pb::TLocalBattleReportSimpleInfo* add_recentreportarr();
  inline const ::google::protobuf::RepeatedPtrField< ::pb::TLocalBattleReportSimpleInfo >&
      recentreportarr() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb::TLocalBattleReportSimpleInfo >*
      mutable_recentreportarr();

  // repeated .pb.TLocalBattleReportSimpleInfo ExtremeReportArr = 3;
  inline int extremereportarr_size() const;
  inline void clear_extremereportarr();
  static const int kExtremeReportArrFieldNumber = 3;
  /*FOR2LUA
  <Record>
  	<name>TLocalReportGetCampTowerReportRsp</name>
  	<Function>
  		<name>extremereportarr</name>
  		<replaceName>ExtremeReportArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_extremereportarr</name>
  		<replaceName>ExtremeReportArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_extremereportarr</name>
  		<replaceName>ExtremeReportArr</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_extremereportarr</name>
  		<replaceName>ExtremeReportArr</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>extremereportarr_size</name>
  		<replaceName>ExtremeReportArr</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TLocalBattleReportSimpleInfo& extremereportarr(int index) const;
  inline ::pb::TLocalBattleReportSimpleInfo* mutable_extremereportarr(int index);
  inline ::pb::TLocalBattleReportSimpleInfo* add_extremereportarr();
  inline const ::google::protobuf::RepeatedPtrField< ::pb::TLocalBattleReportSimpleInfo >&
      extremereportarr() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb::TLocalBattleReportSimpleInfo >*
      mutable_extremereportarr();

  // @@protoc_insertion_point(class_scope:pb.TLocalReportGetCampTowerReportRsp)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::pb::TLocalBattleReportSimpleInfo > reportarr_;
  ::google::protobuf::RepeatedPtrField< ::pb::TLocalBattleReportSimpleInfo > recentreportarr_;
  ::google::protobuf::RepeatedPtrField< ::pb::TLocalBattleReportSimpleInfo > extremereportarr_;
  friend void  protobuf_AddDesc_net_2fLocalBattleReport_2eproto();
  friend void protobuf_AssignDesc_net_2fLocalBattleReport_2eproto();
  friend void protobuf_ShutdownFile_net_2fLocalBattleReport_2eproto();

  void InitAsDefaultInstance();
  static TLocalReportGetCampTowerReportRsp* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TLocalReportGetTowerReportReq</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/LocalBattleReport.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TLocalReportGetTowerReportReq : public ::google::protobuf::Message {
 public:
  TLocalReportGetTowerReportReq();
  virtual ~TLocalReportGetTowerReportReq();

  TLocalReportGetTowerReportReq(const TLocalReportGetTowerReportReq& from);

  inline TLocalReportGetTowerReportReq& operator=(const TLocalReportGetTowerReportReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TLocalReportGetTowerReportReq& default_instance();

  void Swap(TLocalReportGetTowerReportReq* other);

  // implements Message ----------------------------------------------

  TLocalReportGetTowerReportReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TLocalReportGetTowerReportReq& from);
  void MergeFrom(const TLocalReportGetTowerReportReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 LayerId = 1;
  inline bool has_layerid() const;
  inline void clear_layerid();
  static const int kLayerIdFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TLocalReportGetTowerReportReq</name>
  	<Function>
  		<name>layerid</name>
  		<replaceName>LayerId</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_layerid</name>
  		<replaceName>LayerId</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_layerid</name>
  		<replaceName>LayerId</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 layerid() const;
  inline void set_layerid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:pb.TLocalReportGetTowerReportReq)
 private:
  inline void set_has_layerid();
  inline void clear_has_layerid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 layerid_;
  friend void  protobuf_AddDesc_net_2fLocalBattleReport_2eproto();
  friend void protobuf_AssignDesc_net_2fLocalBattleReport_2eproto();
  friend void protobuf_ShutdownFile_net_2fLocalBattleReport_2eproto();

  void InitAsDefaultInstance();
  static TLocalReportGetTowerReportReq* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TLocalReportTowerReportCampSingle</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/LocalBattleReport.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TLocalReportTowerReportCampSingle : public ::google::protobuf::Message {
 public:
  TLocalReportTowerReportCampSingle();
  virtual ~TLocalReportTowerReportCampSingle();

  TLocalReportTowerReportCampSingle(const TLocalReportTowerReportCampSingle& from);

  inline TLocalReportTowerReportCampSingle& operator=(const TLocalReportTowerReportCampSingle& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TLocalReportTowerReportCampSingle& default_instance();

  void Swap(TLocalReportTowerReportCampSingle* other);

  // implements Message ----------------------------------------------

  TLocalReportTowerReportCampSingle* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TLocalReportTowerReportCampSingle& from);
  void MergeFrom(const TLocalReportTowerReportCampSingle& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 CampId = 1;
  inline bool has_campid() const;
  inline void clear_campid();
  static const int kCampIdFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TLocalReportTowerReportCampSingle</name>
  	<Function>
  		<name>campid</name>
  		<replaceName>CampId</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_campid</name>
  		<replaceName>CampId</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_campid</name>
  		<replaceName>CampId</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 campid() const;
  inline void set_campid(::google::protobuf::uint32 value);

  // repeated .pb.TLocalBattleReportSimpleInfo ReportArr = 2;
  inline int reportarr_size() const;
  inline void clear_reportarr();
  static const int kReportArrFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TLocalReportTowerReportCampSingle</name>
  	<Function>
  		<name>reportarr</name>
  		<replaceName>ReportArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_reportarr</name>
  		<replaceName>ReportArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_reportarr</name>
  		<replaceName>ReportArr</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_reportarr</name>
  		<replaceName>ReportArr</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>reportarr_size</name>
  		<replaceName>ReportArr</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TLocalBattleReportSimpleInfo& reportarr(int index) const;
  inline ::pb::TLocalBattleReportSimpleInfo* mutable_reportarr(int index);
  inline ::pb::TLocalBattleReportSimpleInfo* add_reportarr();
  inline const ::google::protobuf::RepeatedPtrField< ::pb::TLocalBattleReportSimpleInfo >&
      reportarr() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb::TLocalBattleReportSimpleInfo >*
      mutable_reportarr();

  // @@protoc_insertion_point(class_scope:pb.TLocalReportTowerReportCampSingle)
 private:
  inline void set_has_campid();
  inline void clear_has_campid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::pb::TLocalBattleReportSimpleInfo > reportarr_;
  ::google::protobuf::uint32 campid_;
  friend void  protobuf_AddDesc_net_2fLocalBattleReport_2eproto();
  friend void protobuf_AssignDesc_net_2fLocalBattleReport_2eproto();
  friend void protobuf_ShutdownFile_net_2fLocalBattleReport_2eproto();

  void InitAsDefaultInstance();
  static TLocalReportTowerReportCampSingle* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TLocalReportGetTowerReportRsp</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/LocalBattleReport.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TLocalReportGetTowerReportRsp : public ::google::protobuf::Message {
 public:
  TLocalReportGetTowerReportRsp();
  virtual ~TLocalReportGetTowerReportRsp();

  TLocalReportGetTowerReportRsp(const TLocalReportGetTowerReportRsp& from);

  inline TLocalReportGetTowerReportRsp& operator=(const TLocalReportGetTowerReportRsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TLocalReportGetTowerReportRsp& default_instance();

  void Swap(TLocalReportGetTowerReportRsp* other);

  // implements Message ----------------------------------------------

  TLocalReportGetTowerReportRsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TLocalReportGetTowerReportRsp& from);
  void MergeFrom(const TLocalReportGetTowerReportRsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .pb.TLocalReportTowerReportCampSingle FirstCampReportArr = 1;
  inline int firstcampreportarr_size() const;
  inline void clear_firstcampreportarr();
  static const int kFirstCampReportArrFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TLocalReportGetTowerReportRsp</name>
  	<Function>
  		<name>firstcampreportarr</name>
  		<replaceName>FirstCampReportArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_firstcampreportarr</name>
  		<replaceName>FirstCampReportArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_firstcampreportarr</name>
  		<replaceName>FirstCampReportArr</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_firstcampreportarr</name>
  		<replaceName>FirstCampReportArr</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>firstcampreportarr_size</name>
  		<replaceName>FirstCampReportArr</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TLocalReportTowerReportCampSingle& firstcampreportarr(int index) const;
  inline ::pb::TLocalReportTowerReportCampSingle* mutable_firstcampreportarr(int index);
  inline ::pb::TLocalReportTowerReportCampSingle* add_firstcampreportarr();
  inline const ::google::protobuf::RepeatedPtrField< ::pb::TLocalReportTowerReportCampSingle >&
      firstcampreportarr() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb::TLocalReportTowerReportCampSingle >*
      mutable_firstcampreportarr();

  // repeated .pb.TLocalReportTowerReportCampSingle RecentlyCampReportArr = 2;
  inline int recentlycampreportarr_size() const;
  inline void clear_recentlycampreportarr();
  static const int kRecentlyCampReportArrFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TLocalReportGetTowerReportRsp</name>
  	<Function>
  		<name>recentlycampreportarr</name>
  		<replaceName>RecentlyCampReportArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_recentlycampreportarr</name>
  		<replaceName>RecentlyCampReportArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_recentlycampreportarr</name>
  		<replaceName>RecentlyCampReportArr</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_recentlycampreportarr</name>
  		<replaceName>RecentlyCampReportArr</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>recentlycampreportarr_size</name>
  		<replaceName>RecentlyCampReportArr</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TLocalReportTowerReportCampSingle& recentlycampreportarr(int index) const;
  inline ::pb::TLocalReportTowerReportCampSingle* mutable_recentlycampreportarr(int index);
  inline ::pb::TLocalReportTowerReportCampSingle* add_recentlycampreportarr();
  inline const ::google::protobuf::RepeatedPtrField< ::pb::TLocalReportTowerReportCampSingle >&
      recentlycampreportarr() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb::TLocalReportTowerReportCampSingle >*
      mutable_recentlycampreportarr();

  // repeated .pb.TLocalReportTowerReportCampSingle FightForceMinCampReportArr = 3;
  inline int fightforcemincampreportarr_size() const;
  inline void clear_fightforcemincampreportarr();
  static const int kFightForceMinCampReportArrFieldNumber = 3;
  /*FOR2LUA
  <Record>
  	<name>TLocalReportGetTowerReportRsp</name>
  	<Function>
  		<name>fightforcemincampreportarr</name>
  		<replaceName>FightForceMinCampReportArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_fightforcemincampreportarr</name>
  		<replaceName>FightForceMinCampReportArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_fightforcemincampreportarr</name>
  		<replaceName>FightForceMinCampReportArr</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_fightforcemincampreportarr</name>
  		<replaceName>FightForceMinCampReportArr</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>fightforcemincampreportarr_size</name>
  		<replaceName>FightForceMinCampReportArr</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TLocalReportTowerReportCampSingle& fightforcemincampreportarr(int index) const;
  inline ::pb::TLocalReportTowerReportCampSingle* mutable_fightforcemincampreportarr(int index);
  inline ::pb::TLocalReportTowerReportCampSingle* add_fightforcemincampreportarr();
  inline const ::google::protobuf::RepeatedPtrField< ::pb::TLocalReportTowerReportCampSingle >&
      fightforcemincampreportarr() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb::TLocalReportTowerReportCampSingle >*
      mutable_fightforcemincampreportarr();

  // @@protoc_insertion_point(class_scope:pb.TLocalReportGetTowerReportRsp)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::pb::TLocalReportTowerReportCampSingle > firstcampreportarr_;
  ::google::protobuf::RepeatedPtrField< ::pb::TLocalReportTowerReportCampSingle > recentlycampreportarr_;
  ::google::protobuf::RepeatedPtrField< ::pb::TLocalReportTowerReportCampSingle > fightforcemincampreportarr_;
  friend void  protobuf_AddDesc_net_2fLocalBattleReport_2eproto();
  friend void protobuf_AssignDesc_net_2fLocalBattleReport_2eproto();
  friend void protobuf_ShutdownFile_net_2fLocalBattleReport_2eproto();

  void InitAsDefaultInstance();
  static TLocalReportGetTowerReportRsp* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TLocalReportGetTowerHellReportReq</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/LocalBattleReport.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TLocalReportGetTowerHellReportReq : public ::google::protobuf::Message {
 public:
  TLocalReportGetTowerHellReportReq();
  virtual ~TLocalReportGetTowerHellReportReq();

  TLocalReportGetTowerHellReportReq(const TLocalReportGetTowerHellReportReq& from);

  inline TLocalReportGetTowerHellReportReq& operator=(const TLocalReportGetTowerHellReportReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TLocalReportGetTowerHellReportReq& default_instance();

  void Swap(TLocalReportGetTowerHellReportReq* other);

  // implements Message ----------------------------------------------

  TLocalReportGetTowerHellReportReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TLocalReportGetTowerHellReportReq& from);
  void MergeFrom(const TLocalReportGetTowerHellReportReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 LayerId = 1;
  inline bool has_layerid() const;
  inline void clear_layerid();
  static const int kLayerIdFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TLocalReportGetTowerHellReportReq</name>
  	<Function>
  		<name>layerid</name>
  		<replaceName>LayerId</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_layerid</name>
  		<replaceName>LayerId</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_layerid</name>
  		<replaceName>LayerId</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 layerid() const;
  inline void set_layerid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:pb.TLocalReportGetTowerHellReportReq)
 private:
  inline void set_has_layerid();
  inline void clear_has_layerid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 layerid_;
  friend void  protobuf_AddDesc_net_2fLocalBattleReport_2eproto();
  friend void protobuf_AssignDesc_net_2fLocalBattleReport_2eproto();
  friend void protobuf_ShutdownFile_net_2fLocalBattleReport_2eproto();

  void InitAsDefaultInstance();
  static TLocalReportGetTowerHellReportReq* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TLocalReportGetTowerHellReportRsp</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/LocalBattleReport.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TLocalReportGetTowerHellReportRsp : public ::google::protobuf::Message {
 public:
  TLocalReportGetTowerHellReportRsp();
  virtual ~TLocalReportGetTowerHellReportRsp();

  TLocalReportGetTowerHellReportRsp(const TLocalReportGetTowerHellReportRsp& from);

  inline TLocalReportGetTowerHellReportRsp& operator=(const TLocalReportGetTowerHellReportRsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TLocalReportGetTowerHellReportRsp& default_instance();

  void Swap(TLocalReportGetTowerHellReportRsp* other);

  // implements Message ----------------------------------------------

  TLocalReportGetTowerHellReportRsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TLocalReportGetTowerHellReportRsp& from);
  void MergeFrom(const TLocalReportGetTowerHellReportRsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .pb.TLocalBattleReportSimpleInfo FirstReportArr = 1;
  inline int firstreportarr_size() const;
  inline void clear_firstreportarr();
  static const int kFirstReportArrFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TLocalReportGetTowerHellReportRsp</name>
  	<Function>
  		<name>firstreportarr</name>
  		<replaceName>FirstReportArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_firstreportarr</name>
  		<replaceName>FirstReportArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_firstreportarr</name>
  		<replaceName>FirstReportArr</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_firstreportarr</name>
  		<replaceName>FirstReportArr</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>firstreportarr_size</name>
  		<replaceName>FirstReportArr</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TLocalBattleReportSimpleInfo& firstreportarr(int index) const;
  inline ::pb::TLocalBattleReportSimpleInfo* mutable_firstreportarr(int index);
  inline ::pb::TLocalBattleReportSimpleInfo* add_firstreportarr();
  inline const ::google::protobuf::RepeatedPtrField< ::pb::TLocalBattleReportSimpleInfo >&
      firstreportarr() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb::TLocalBattleReportSimpleInfo >*
      mutable_firstreportarr();

  // repeated .pb.TLocalBattleReportSimpleInfo RecentlyReportArr = 2;
  inline int recentlyreportarr_size() const;
  inline void clear_recentlyreportarr();
  static const int kRecentlyReportArrFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TLocalReportGetTowerHellReportRsp</name>
  	<Function>
  		<name>recentlyreportarr</name>
  		<replaceName>RecentlyReportArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_recentlyreportarr</name>
  		<replaceName>RecentlyReportArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_recentlyreportarr</name>
  		<replaceName>RecentlyReportArr</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_recentlyreportarr</name>
  		<replaceName>RecentlyReportArr</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>recentlyreportarr_size</name>
  		<replaceName>RecentlyReportArr</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TLocalBattleReportSimpleInfo& recentlyreportarr(int index) const;
  inline ::pb::TLocalBattleReportSimpleInfo* mutable_recentlyreportarr(int index);
  inline ::pb::TLocalBattleReportSimpleInfo* add_recentlyreportarr();
  inline const ::google::protobuf::RepeatedPtrField< ::pb::TLocalBattleReportSimpleInfo >&
      recentlyreportarr() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb::TLocalBattleReportSimpleInfo >*
      mutable_recentlyreportarr();

  // repeated .pb.TLocalBattleReportSimpleInfo FightForceMinReportArr = 3;
  inline int fightforceminreportarr_size() const;
  inline void clear_fightforceminreportarr();
  static const int kFightForceMinReportArrFieldNumber = 3;
  /*FOR2LUA
  <Record>
  	<name>TLocalReportGetTowerHellReportRsp</name>
  	<Function>
  		<name>fightforceminreportarr</name>
  		<replaceName>FightForceMinReportArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_fightforceminreportarr</name>
  		<replaceName>FightForceMinReportArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_fightforceminreportarr</name>
  		<replaceName>FightForceMinReportArr</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_fightforceminreportarr</name>
  		<replaceName>FightForceMinReportArr</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>fightforceminreportarr_size</name>
  		<replaceName>FightForceMinReportArr</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TLocalBattleReportSimpleInfo& fightforceminreportarr(int index) const;
  inline ::pb::TLocalBattleReportSimpleInfo* mutable_fightforceminreportarr(int index);
  inline ::pb::TLocalBattleReportSimpleInfo* add_fightforceminreportarr();
  inline const ::google::protobuf::RepeatedPtrField< ::pb::TLocalBattleReportSimpleInfo >&
      fightforceminreportarr() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb::TLocalBattleReportSimpleInfo >*
      mutable_fightforceminreportarr();

  // @@protoc_insertion_point(class_scope:pb.TLocalReportGetTowerHellReportRsp)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::pb::TLocalBattleReportSimpleInfo > firstreportarr_;
  ::google::protobuf::RepeatedPtrField< ::pb::TLocalBattleReportSimpleInfo > recentlyreportarr_;
  ::google::protobuf::RepeatedPtrField< ::pb::TLocalBattleReportSimpleInfo > fightforceminreportarr_;
  friend void  protobuf_AddDesc_net_2fLocalBattleReport_2eproto();
  friend void protobuf_AssignDesc_net_2fLocalBattleReport_2eproto();
  friend void protobuf_ShutdownFile_net_2fLocalBattleReport_2eproto();

  void InitAsDefaultInstance();
  static TLocalReportGetTowerHellReportRsp* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TLocalReportInsertReportInfoReq</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/LocalBattleReport.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TLocalReportInsertReportInfoReq : public ::google::protobuf::Message {
 public:
  TLocalReportInsertReportInfoReq();
  virtual ~TLocalReportInsertReportInfoReq();

  TLocalReportInsertReportInfoReq(const TLocalReportInsertReportInfoReq& from);

  inline TLocalReportInsertReportInfoReq& operator=(const TLocalReportInsertReportInfoReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TLocalReportInsertReportInfoReq& default_instance();

  void Swap(TLocalReportInsertReportInfoReq* other);

  // implements Message ----------------------------------------------

  TLocalReportInsertReportInfoReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TLocalReportInsertReportInfoReq& from);
  void MergeFrom(const TLocalReportInsertReportInfoReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint64 ModuleId = 1;
  inline bool has_moduleid() const;
  inline void clear_moduleid();
  static const int kModuleIdFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TLocalReportInsertReportInfoReq</name>
  	<Function>
  		<name>moduleid</name>
  		<replaceName>ModuleId</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_moduleid</name>
  		<replaceName>ModuleId</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_moduleid</name>
  		<replaceName>ModuleId</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint64 moduleid() const;
  inline void set_moduleid(::google::protobuf::uint64 value);

  // optional uint64 InstanceId = 2;
  inline bool has_instanceid() const;
  inline void clear_instanceid();
  static const int kInstanceIdFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TLocalReportInsertReportInfoReq</name>
  	<Function>
  		<name>instanceid</name>
  		<replaceName>InstanceId</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_instanceid</name>
  		<replaceName>InstanceId</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_instanceid</name>
  		<replaceName>InstanceId</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint64 instanceid() const;
  inline void set_instanceid(::google::protobuf::uint64 value);

  // repeated uint64 ReportTypeArr = 3;
  inline int reporttypearr_size() const;
  inline void clear_reporttypearr();
  static const int kReportTypeArrFieldNumber = 3;
  /*FOR2LUA
  <Record>
  	<name>TLocalReportInsertReportInfoReq</name>
  	<Function>
  		<name>reporttypearr</name>
  		<replaceName>ReportTypeArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_reporttypearr</name>
  		<replaceName>ReportTypeArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_reporttypearr</name>
  		<replaceName>ReportTypeArr</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_reporttypearr</name>
  		<replaceName>ReportTypeArr</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>reporttypearr_size</name>
  		<replaceName>ReportTypeArr</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint64 reporttypearr(int index) const;
  inline void set_reporttypearr(int index, ::google::protobuf::uint64 value);
  inline void add_reporttypearr(::google::protobuf::uint64 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
      reporttypearr() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
      mutable_reporttypearr();

  // optional uint32 StarLv = 4;
  inline bool has_starlv() const;
  inline void clear_starlv();
  static const int kStarLvFieldNumber = 4;
  /*FOR2LUA
  <Record>
  	<name>TLocalReportInsertReportInfoReq</name>
  	<Function>
  		<name>starlv</name>
  		<replaceName>StarLv</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_starlv</name>
  		<replaceName>StarLv</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_starlv</name>
  		<replaceName>StarLv</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 starlv() const;
  inline void set_starlv(::google::protobuf::uint32 value);

  // optional .pb.TLocalBattleReportSimpleInfo SimpleInfo = 5;
  inline bool has_simpleinfo() const;
  inline void clear_simpleinfo();
  static const int kSimpleInfoFieldNumber = 5;
  /*FOR2LUA
  <Record>
  	<name>TLocalReportInsertReportInfoReq</name>
  	<Function>
  		<name>simpleinfo</name>
  		<replaceName>SimpleInfo</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_simpleinfo</name>
  		<replaceName>SimpleInfo</replaceName>
  		<handler>descripter = pb_set_message_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_allocated_simpleinfo</name>
  		<replaceName>SimpleInfo</replaceName>
  		<handler>descripter = pb_set_message_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_simpleinfo</name>
  		<replaceName>SimpleInfo</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TLocalBattleReportSimpleInfo& simpleinfo() const;
  inline ::pb::TLocalBattleReportSimpleInfo* mutable_simpleinfo();
  inline ::pb::TLocalBattleReportSimpleInfo* release_simpleinfo();
  inline void set_allocated_simpleinfo(::pb::TLocalBattleReportSimpleInfo* simpleinfo);

  // optional bytes BattleBytes = 6;
  inline bool has_battlebytes() const;
  inline void clear_battlebytes();
  static const int kBattleBytesFieldNumber = 6;
  /*FOR2LUA
  <Record>
  	<name>TLocalReportInsertReportInfoReq</name>
  	<Function>
  		<name>battlebytes</name>
  		<replaceName>BattleBytes</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_battlebytes</name>
  		<replaceName>BattleBytes</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_battlebytes</name>
  		<replaceName>BattleBytes</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::std::string& battlebytes() const;
  inline void set_battlebytes(const ::std::string& value);
  inline void set_battlebytes(const char* value);
  inline void set_battlebytes(const void* value, size_t size);
  inline ::std::string* mutable_battlebytes();
  inline ::std::string* release_battlebytes();
  inline void set_allocated_battlebytes(::std::string* battlebytes);

  // @@protoc_insertion_point(class_scope:pb.TLocalReportInsertReportInfoReq)
 private:
  inline void set_has_moduleid();
  inline void clear_has_moduleid();
  inline void set_has_instanceid();
  inline void clear_has_instanceid();
  inline void set_has_starlv();
  inline void clear_has_starlv();
  inline void set_has_simpleinfo();
  inline void clear_has_simpleinfo();
  inline void set_has_battlebytes();
  inline void clear_has_battlebytes();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint64 moduleid_;
  ::google::protobuf::uint64 instanceid_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint64 > reporttypearr_;
  ::pb::TLocalBattleReportSimpleInfo* simpleinfo_;
  ::std::string* battlebytes_;
  ::google::protobuf::uint32 starlv_;
  friend void  protobuf_AddDesc_net_2fLocalBattleReport_2eproto();
  friend void protobuf_AssignDesc_net_2fLocalBattleReport_2eproto();
  friend void protobuf_ShutdownFile_net_2fLocalBattleReport_2eproto();

  void InitAsDefaultInstance();
  static TLocalReportInsertReportInfoReq* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TLocalReportDeleteUserReportReq</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/LocalBattleReport.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TLocalReportDeleteUserReportReq : public ::google::protobuf::Message {
 public:
  TLocalReportDeleteUserReportReq();
  virtual ~TLocalReportDeleteUserReportReq();

  TLocalReportDeleteUserReportReq(const TLocalReportDeleteUserReportReq& from);

  inline TLocalReportDeleteUserReportReq& operator=(const TLocalReportDeleteUserReportReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TLocalReportDeleteUserReportReq& default_instance();

  void Swap(TLocalReportDeleteUserReportReq* other);

  // implements Message ----------------------------------------------

  TLocalReportDeleteUserReportReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TLocalReportDeleteUserReportReq& from);
  void MergeFrom(const TLocalReportDeleteUserReportReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint64 Uid = 1;
  inline bool has_uid() const;
  inline void clear_uid();
  static const int kUidFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TLocalReportDeleteUserReportReq</name>
  	<Function>
  		<name>uid</name>
  		<replaceName>Uid</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_uid</name>
  		<replaceName>Uid</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_uid</name>
  		<replaceName>Uid</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint64 uid() const;
  inline void set_uid(::google::protobuf::uint64 value);

  // optional string ServerId = 2;
  inline bool has_serverid() const;
  inline void clear_serverid();
  static const int kServerIdFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TLocalReportDeleteUserReportReq</name>
  	<Function>
  		<name>serverid</name>
  		<replaceName>ServerId</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_serverid</name>
  		<replaceName>ServerId</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_serverid</name>
  		<replaceName>ServerId</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::std::string& serverid() const;
  inline void set_serverid(const ::std::string& value);
  inline void set_serverid(const char* value);
  inline void set_serverid(const char* value, size_t size);
  inline ::std::string* mutable_serverid();
  inline ::std::string* release_serverid();
  inline void set_allocated_serverid(::std::string* serverid);

  // @@protoc_insertion_point(class_scope:pb.TLocalReportDeleteUserReportReq)
 private:
  inline void set_has_uid();
  inline void clear_has_uid();
  inline void set_has_serverid();
  inline void clear_has_serverid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint64 uid_;
  ::std::string* serverid_;
  friend void  protobuf_AddDesc_net_2fLocalBattleReport_2eproto();
  friend void protobuf_AssignDesc_net_2fLocalBattleReport_2eproto();
  friend void protobuf_ShutdownFile_net_2fLocalBattleReport_2eproto();

  void InitAsDefaultInstance();
  static TLocalReportDeleteUserReportReq* default_instance_;
};
// ===================================================================


// ===================================================================

// TLocalBattleReportSimpleInfo

// optional uint64 Rid = 1;
inline bool TLocalBattleReportSimpleInfo::has_rid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TLocalBattleReportSimpleInfo::set_has_rid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TLocalBattleReportSimpleInfo::clear_has_rid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TLocalBattleReportSimpleInfo::clear_rid() {
  rid_ = GOOGLE_ULONGLONG(0);
  clear_has_rid();
}
inline ::google::protobuf::uint64 TLocalBattleReportSimpleInfo::rid() const {
  // @@protoc_insertion_point(field_get:pb.TLocalBattleReportSimpleInfo.Rid)
  return rid_;
}
inline void TLocalBattleReportSimpleInfo::set_rid(::google::protobuf::uint64 value) {
  set_has_rid();
  rid_ = value;
  // @@protoc_insertion_point(field_set:pb.TLocalBattleReportSimpleInfo.Rid)
}

// optional uint64 BattleTime = 2;
inline bool TLocalBattleReportSimpleInfo::has_battletime() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TLocalBattleReportSimpleInfo::set_has_battletime() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TLocalBattleReportSimpleInfo::clear_has_battletime() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TLocalBattleReportSimpleInfo::clear_battletime() {
  battletime_ = GOOGLE_ULONGLONG(0);
  clear_has_battletime();
}
inline ::google::protobuf::uint64 TLocalBattleReportSimpleInfo::battletime() const {
  // @@protoc_insertion_point(field_get:pb.TLocalBattleReportSimpleInfo.BattleTime)
  return battletime_;
}
inline void TLocalBattleReportSimpleInfo::set_battletime(::google::protobuf::uint64 value) {
  set_has_battletime();
  battletime_ = value;
  // @@protoc_insertion_point(field_set:pb.TLocalBattleReportSimpleInfo.BattleTime)
}

// optional uint64 Uid = 3;
inline bool TLocalBattleReportSimpleInfo::has_uid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void TLocalBattleReportSimpleInfo::set_has_uid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void TLocalBattleReportSimpleInfo::clear_has_uid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void TLocalBattleReportSimpleInfo::clear_uid() {
  uid_ = GOOGLE_ULONGLONG(0);
  clear_has_uid();
}
inline ::google::protobuf::uint64 TLocalBattleReportSimpleInfo::uid() const {
  // @@protoc_insertion_point(field_get:pb.TLocalBattleReportSimpleInfo.Uid)
  return uid_;
}
inline void TLocalBattleReportSimpleInfo::set_uid(::google::protobuf::uint64 value) {
  set_has_uid();
  uid_ = value;
  // @@protoc_insertion_point(field_set:pb.TLocalBattleReportSimpleInfo.Uid)
}

// optional string Uname = 4;
inline bool TLocalBattleReportSimpleInfo::has_uname() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void TLocalBattleReportSimpleInfo::set_has_uname() {
  _has_bits_[0] |= 0x00000008u;
}
inline void TLocalBattleReportSimpleInfo::clear_has_uname() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void TLocalBattleReportSimpleInfo::clear_uname() {
  if (uname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    uname_->clear();
  }
  clear_has_uname();
}
inline const ::std::string& TLocalBattleReportSimpleInfo::uname() const {
  // @@protoc_insertion_point(field_get:pb.TLocalBattleReportSimpleInfo.Uname)
  return *uname_;
}
inline void TLocalBattleReportSimpleInfo::set_uname(const ::std::string& value) {
  set_has_uname();
  if (uname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    uname_ = new ::std::string;
  }
  uname_->assign(value);
  // @@protoc_insertion_point(field_set:pb.TLocalBattleReportSimpleInfo.Uname)
}
inline void TLocalBattleReportSimpleInfo::set_uname(const char* value) {
  set_has_uname();
  if (uname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    uname_ = new ::std::string;
  }
  uname_->assign(value);
  // @@protoc_insertion_point(field_set_char:pb.TLocalBattleReportSimpleInfo.Uname)
}
inline void TLocalBattleReportSimpleInfo::set_uname(const char* value, size_t size) {
  set_has_uname();
  if (uname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    uname_ = new ::std::string;
  }
  uname_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:pb.TLocalBattleReportSimpleInfo.Uname)
}
inline ::std::string* TLocalBattleReportSimpleInfo::mutable_uname() {
  set_has_uname();
  if (uname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    uname_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:pb.TLocalBattleReportSimpleInfo.Uname)
  return uname_;
}
inline ::std::string* TLocalBattleReportSimpleInfo::release_uname() {
  clear_has_uname();
  if (uname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = uname_;
    uname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void TLocalBattleReportSimpleInfo::set_allocated_uname(::std::string* uname) {
  if (uname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete uname_;
  }
  if (uname) {
    set_has_uname();
    uname_ = uname;
  } else {
    clear_has_uname();
    uname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:pb.TLocalBattleReportSimpleInfo.Uname)
}

// optional uint32 Level = 5;
inline bool TLocalBattleReportSimpleInfo::has_level() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void TLocalBattleReportSimpleInfo::set_has_level() {
  _has_bits_[0] |= 0x00000010u;
}
inline void TLocalBattleReportSimpleInfo::clear_has_level() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void TLocalBattleReportSimpleInfo::clear_level() {
  level_ = 0u;
  clear_has_level();
}
inline ::google::protobuf::uint32 TLocalBattleReportSimpleInfo::level() const {
  // @@protoc_insertion_point(field_get:pb.TLocalBattleReportSimpleInfo.Level)
  return level_;
}
inline void TLocalBattleReportSimpleInfo::set_level(::google::protobuf::uint32 value) {
  set_has_level();
  level_ = value;
  // @@protoc_insertion_point(field_set:pb.TLocalBattleReportSimpleInfo.Level)
}

// optional uint64 FightForce = 6;
inline bool TLocalBattleReportSimpleInfo::has_fightforce() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void TLocalBattleReportSimpleInfo::set_has_fightforce() {
  _has_bits_[0] |= 0x00000020u;
}
inline void TLocalBattleReportSimpleInfo::clear_has_fightforce() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void TLocalBattleReportSimpleInfo::clear_fightforce() {
  fightforce_ = GOOGLE_ULONGLONG(0);
  clear_has_fightforce();
}
inline ::google::protobuf::uint64 TLocalBattleReportSimpleInfo::fightforce() const {
  // @@protoc_insertion_point(field_get:pb.TLocalBattleReportSimpleInfo.FightForce)
  return fightforce_;
}
inline void TLocalBattleReportSimpleInfo::set_fightforce(::google::protobuf::uint64 value) {
  set_has_fightforce();
  fightforce_ = value;
  // @@protoc_insertion_point(field_set:pb.TLocalBattleReportSimpleInfo.FightForce)
}

// optional uint32 Htid = 7;
inline bool TLocalBattleReportSimpleInfo::has_htid() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void TLocalBattleReportSimpleInfo::set_has_htid() {
  _has_bits_[0] |= 0x00000040u;
}
inline void TLocalBattleReportSimpleInfo::clear_has_htid() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void TLocalBattleReportSimpleInfo::clear_htid() {
  htid_ = 0u;
  clear_has_htid();
}
inline ::google::protobuf::uint32 TLocalBattleReportSimpleInfo::htid() const {
  // @@protoc_insertion_point(field_get:pb.TLocalBattleReportSimpleInfo.Htid)
  return htid_;
}
inline void TLocalBattleReportSimpleInfo::set_htid(::google::protobuf::uint32 value) {
  set_has_htid();
  htid_ = value;
  // @@protoc_insertion_point(field_set:pb.TLocalBattleReportSimpleInfo.Htid)
}

// optional uint32 PlayerImageFrameTid = 8;
inline bool TLocalBattleReportSimpleInfo::has_playerimageframetid() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void TLocalBattleReportSimpleInfo::set_has_playerimageframetid() {
  _has_bits_[0] |= 0x00000080u;
}
inline void TLocalBattleReportSimpleInfo::clear_has_playerimageframetid() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void TLocalBattleReportSimpleInfo::clear_playerimageframetid() {
  playerimageframetid_ = 0u;
  clear_has_playerimageframetid();
}
inline ::google::protobuf::uint32 TLocalBattleReportSimpleInfo::playerimageframetid() const {
  // @@protoc_insertion_point(field_get:pb.TLocalBattleReportSimpleInfo.PlayerImageFrameTid)
  return playerimageframetid_;
}
inline void TLocalBattleReportSimpleInfo::set_playerimageframetid(::google::protobuf::uint32 value) {
  set_has_playerimageframetid();
  playerimageframetid_ = value;
  // @@protoc_insertion_point(field_set:pb.TLocalBattleReportSimpleInfo.PlayerImageFrameTid)
}

// optional string LocalId = 9;
inline bool TLocalBattleReportSimpleInfo::has_localid() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void TLocalBattleReportSimpleInfo::set_has_localid() {
  _has_bits_[0] |= 0x00000100u;
}
inline void TLocalBattleReportSimpleInfo::clear_has_localid() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void TLocalBattleReportSimpleInfo::clear_localid() {
  if (localid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    localid_->clear();
  }
  clear_has_localid();
}
inline const ::std::string& TLocalBattleReportSimpleInfo::localid() const {
  // @@protoc_insertion_point(field_get:pb.TLocalBattleReportSimpleInfo.LocalId)
  return *localid_;
}
inline void TLocalBattleReportSimpleInfo::set_localid(const ::std::string& value) {
  set_has_localid();
  if (localid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    localid_ = new ::std::string;
  }
  localid_->assign(value);
  // @@protoc_insertion_point(field_set:pb.TLocalBattleReportSimpleInfo.LocalId)
}
inline void TLocalBattleReportSimpleInfo::set_localid(const char* value) {
  set_has_localid();
  if (localid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    localid_ = new ::std::string;
  }
  localid_->assign(value);
  // @@protoc_insertion_point(field_set_char:pb.TLocalBattleReportSimpleInfo.LocalId)
}
inline void TLocalBattleReportSimpleInfo::set_localid(const char* value, size_t size) {
  set_has_localid();
  if (localid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    localid_ = new ::std::string;
  }
  localid_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:pb.TLocalBattleReportSimpleInfo.LocalId)
}
inline ::std::string* TLocalBattleReportSimpleInfo::mutable_localid() {
  set_has_localid();
  if (localid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    localid_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:pb.TLocalBattleReportSimpleInfo.LocalId)
  return localid_;
}
inline ::std::string* TLocalBattleReportSimpleInfo::release_localid() {
  clear_has_localid();
  if (localid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = localid_;
    localid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void TLocalBattleReportSimpleInfo::set_allocated_localid(::std::string* localid) {
  if (localid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete localid_;
  }
  if (localid) {
    set_has_localid();
    localid_ = localid;
  } else {
    clear_has_localid();
    localid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:pb.TLocalBattleReportSimpleInfo.LocalId)
}

// optional string ServerId = 10;
inline bool TLocalBattleReportSimpleInfo::has_serverid() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void TLocalBattleReportSimpleInfo::set_has_serverid() {
  _has_bits_[0] |= 0x00000200u;
}
inline void TLocalBattleReportSimpleInfo::clear_has_serverid() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void TLocalBattleReportSimpleInfo::clear_serverid() {
  if (serverid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    serverid_->clear();
  }
  clear_has_serverid();
}
inline const ::std::string& TLocalBattleReportSimpleInfo::serverid() const {
  // @@protoc_insertion_point(field_get:pb.TLocalBattleReportSimpleInfo.ServerId)
  return *serverid_;
}
inline void TLocalBattleReportSimpleInfo::set_serverid(const ::std::string& value) {
  set_has_serverid();
  if (serverid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    serverid_ = new ::std::string;
  }
  serverid_->assign(value);
  // @@protoc_insertion_point(field_set:pb.TLocalBattleReportSimpleInfo.ServerId)
}
inline void TLocalBattleReportSimpleInfo::set_serverid(const char* value) {
  set_has_serverid();
  if (serverid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    serverid_ = new ::std::string;
  }
  serverid_->assign(value);
  // @@protoc_insertion_point(field_set_char:pb.TLocalBattleReportSimpleInfo.ServerId)
}
inline void TLocalBattleReportSimpleInfo::set_serverid(const char* value, size_t size) {
  set_has_serverid();
  if (serverid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    serverid_ = new ::std::string;
  }
  serverid_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:pb.TLocalBattleReportSimpleInfo.ServerId)
}
inline ::std::string* TLocalBattleReportSimpleInfo::mutable_serverid() {
  set_has_serverid();
  if (serverid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    serverid_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:pb.TLocalBattleReportSimpleInfo.ServerId)
  return serverid_;
}
inline ::std::string* TLocalBattleReportSimpleInfo::release_serverid() {
  clear_has_serverid();
  if (serverid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = serverid_;
    serverid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void TLocalBattleReportSimpleInfo::set_allocated_serverid(::std::string* serverid) {
  if (serverid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete serverid_;
  }
  if (serverid) {
    set_has_serverid();
    serverid_ = serverid;
  } else {
    clear_has_serverid();
    serverid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:pb.TLocalBattleReportSimpleInfo.ServerId)
}

// -------------------------------------------------------------------

// TLocalReportGetInstanceReportReq

// optional uint32 StrongholdId = 1;
inline bool TLocalReportGetInstanceReportReq::has_strongholdid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TLocalReportGetInstanceReportReq::set_has_strongholdid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TLocalReportGetInstanceReportReq::clear_has_strongholdid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TLocalReportGetInstanceReportReq::clear_strongholdid() {
  strongholdid_ = 0u;
  clear_has_strongholdid();
}
inline ::google::protobuf::uint32 TLocalReportGetInstanceReportReq::strongholdid() const {
  // @@protoc_insertion_point(field_get:pb.TLocalReportGetInstanceReportReq.StrongholdId)
  return strongholdid_;
}
inline void TLocalReportGetInstanceReportReq::set_strongholdid(::google::protobuf::uint32 value) {
  set_has_strongholdid();
  strongholdid_ = value;
  // @@protoc_insertion_point(field_set:pb.TLocalReportGetInstanceReportReq.StrongholdId)
}

// optional uint32 ReportType = 2;
inline bool TLocalReportGetInstanceReportReq::has_reporttype() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TLocalReportGetInstanceReportReq::set_has_reporttype() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TLocalReportGetInstanceReportReq::clear_has_reporttype() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TLocalReportGetInstanceReportReq::clear_reporttype() {
  reporttype_ = 0u;
  clear_has_reporttype();
}
inline ::google::protobuf::uint32 TLocalReportGetInstanceReportReq::reporttype() const {
  // @@protoc_insertion_point(field_get:pb.TLocalReportGetInstanceReportReq.ReportType)
  return reporttype_;
}
inline void TLocalReportGetInstanceReportReq::set_reporttype(::google::protobuf::uint32 value) {
  set_has_reporttype();
  reporttype_ = value;
  // @@protoc_insertion_point(field_set:pb.TLocalReportGetInstanceReportReq.ReportType)
}

// optional uint32 CampId = 3;
inline bool TLocalReportGetInstanceReportReq::has_campid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void TLocalReportGetInstanceReportReq::set_has_campid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void TLocalReportGetInstanceReportReq::clear_has_campid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void TLocalReportGetInstanceReportReq::clear_campid() {
  campid_ = 0u;
  clear_has_campid();
}
inline ::google::protobuf::uint32 TLocalReportGetInstanceReportReq::campid() const {
  // @@protoc_insertion_point(field_get:pb.TLocalReportGetInstanceReportReq.CampId)
  return campid_;
}
inline void TLocalReportGetInstanceReportReq::set_campid(::google::protobuf::uint32 value) {
  set_has_campid();
  campid_ = value;
  // @@protoc_insertion_point(field_set:pb.TLocalReportGetInstanceReportReq.CampId)
}

// -------------------------------------------------------------------

// TLocalReportGetInstanceReportRsp

// repeated .pb.TLocalBattleReportSimpleInfo ReportArr = 1;
inline int TLocalReportGetInstanceReportRsp::reportarr_size() const {
  return reportarr_.size();
}
inline void TLocalReportGetInstanceReportRsp::clear_reportarr() {
  reportarr_.Clear();
}
inline const ::pb::TLocalBattleReportSimpleInfo& TLocalReportGetInstanceReportRsp::reportarr(int index) const {
  // @@protoc_insertion_point(field_get:pb.TLocalReportGetInstanceReportRsp.ReportArr)
  return reportarr_.Get(index);
}
inline ::pb::TLocalBattleReportSimpleInfo* TLocalReportGetInstanceReportRsp::mutable_reportarr(int index) {
  // @@protoc_insertion_point(field_mutable:pb.TLocalReportGetInstanceReportRsp.ReportArr)
  return reportarr_.Mutable(index);
}
inline ::pb::TLocalBattleReportSimpleInfo* TLocalReportGetInstanceReportRsp::add_reportarr() {
  // @@protoc_insertion_point(field_add:pb.TLocalReportGetInstanceReportRsp.ReportArr)
  return reportarr_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::TLocalBattleReportSimpleInfo >&
TLocalReportGetInstanceReportRsp::reportarr() const {
  // @@protoc_insertion_point(field_list:pb.TLocalReportGetInstanceReportRsp.ReportArr)
  return reportarr_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb::TLocalBattleReportSimpleInfo >*
TLocalReportGetInstanceReportRsp::mutable_reportarr() {
  // @@protoc_insertion_point(field_mutable_list:pb.TLocalReportGetInstanceReportRsp.ReportArr)
  return &reportarr_;
}

// -------------------------------------------------------------------

// TLocalReportGetCampTowerReportReq

// optional uint32 CampId = 1;
inline bool TLocalReportGetCampTowerReportReq::has_campid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TLocalReportGetCampTowerReportReq::set_has_campid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TLocalReportGetCampTowerReportReq::clear_has_campid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TLocalReportGetCampTowerReportReq::clear_campid() {
  campid_ = 0u;
  clear_has_campid();
}
inline ::google::protobuf::uint32 TLocalReportGetCampTowerReportReq::campid() const {
  // @@protoc_insertion_point(field_get:pb.TLocalReportGetCampTowerReportReq.CampId)
  return campid_;
}
inline void TLocalReportGetCampTowerReportReq::set_campid(::google::protobuf::uint32 value) {
  set_has_campid();
  campid_ = value;
  // @@protoc_insertion_point(field_set:pb.TLocalReportGetCampTowerReportReq.CampId)
}

// optional uint32 LayerId = 2;
inline bool TLocalReportGetCampTowerReportReq::has_layerid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TLocalReportGetCampTowerReportReq::set_has_layerid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TLocalReportGetCampTowerReportReq::clear_has_layerid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TLocalReportGetCampTowerReportReq::clear_layerid() {
  layerid_ = 0u;
  clear_has_layerid();
}
inline ::google::protobuf::uint32 TLocalReportGetCampTowerReportReq::layerid() const {
  // @@protoc_insertion_point(field_get:pb.TLocalReportGetCampTowerReportReq.LayerId)
  return layerid_;
}
inline void TLocalReportGetCampTowerReportReq::set_layerid(::google::protobuf::uint32 value) {
  set_has_layerid();
  layerid_ = value;
  // @@protoc_insertion_point(field_set:pb.TLocalReportGetCampTowerReportReq.LayerId)
}

// -------------------------------------------------------------------

// TLocalReportGetCampTowerReportRsp

// repeated .pb.TLocalBattleReportSimpleInfo ReportArr = 1;
inline int TLocalReportGetCampTowerReportRsp::reportarr_size() const {
  return reportarr_.size();
}
inline void TLocalReportGetCampTowerReportRsp::clear_reportarr() {
  reportarr_.Clear();
}
inline const ::pb::TLocalBattleReportSimpleInfo& TLocalReportGetCampTowerReportRsp::reportarr(int index) const {
  // @@protoc_insertion_point(field_get:pb.TLocalReportGetCampTowerReportRsp.ReportArr)
  return reportarr_.Get(index);
}
inline ::pb::TLocalBattleReportSimpleInfo* TLocalReportGetCampTowerReportRsp::mutable_reportarr(int index) {
  // @@protoc_insertion_point(field_mutable:pb.TLocalReportGetCampTowerReportRsp.ReportArr)
  return reportarr_.Mutable(index);
}
inline ::pb::TLocalBattleReportSimpleInfo* TLocalReportGetCampTowerReportRsp::add_reportarr() {
  // @@protoc_insertion_point(field_add:pb.TLocalReportGetCampTowerReportRsp.ReportArr)
  return reportarr_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::TLocalBattleReportSimpleInfo >&
TLocalReportGetCampTowerReportRsp::reportarr() const {
  // @@protoc_insertion_point(field_list:pb.TLocalReportGetCampTowerReportRsp.ReportArr)
  return reportarr_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb::TLocalBattleReportSimpleInfo >*
TLocalReportGetCampTowerReportRsp::mutable_reportarr() {
  // @@protoc_insertion_point(field_mutable_list:pb.TLocalReportGetCampTowerReportRsp.ReportArr)
  return &reportarr_;
}

// repeated .pb.TLocalBattleReportSimpleInfo RecentReportArr = 2;
inline int TLocalReportGetCampTowerReportRsp::recentreportarr_size() const {
  return recentreportarr_.size();
}
inline void TLocalReportGetCampTowerReportRsp::clear_recentreportarr() {
  recentreportarr_.Clear();
}
inline const ::pb::TLocalBattleReportSimpleInfo& TLocalReportGetCampTowerReportRsp::recentreportarr(int index) const {
  // @@protoc_insertion_point(field_get:pb.TLocalReportGetCampTowerReportRsp.RecentReportArr)
  return recentreportarr_.Get(index);
}
inline ::pb::TLocalBattleReportSimpleInfo* TLocalReportGetCampTowerReportRsp::mutable_recentreportarr(int index) {
  // @@protoc_insertion_point(field_mutable:pb.TLocalReportGetCampTowerReportRsp.RecentReportArr)
  return recentreportarr_.Mutable(index);
}
inline ::pb::TLocalBattleReportSimpleInfo* TLocalReportGetCampTowerReportRsp::add_recentreportarr() {
  // @@protoc_insertion_point(field_add:pb.TLocalReportGetCampTowerReportRsp.RecentReportArr)
  return recentreportarr_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::TLocalBattleReportSimpleInfo >&
TLocalReportGetCampTowerReportRsp::recentreportarr() const {
  // @@protoc_insertion_point(field_list:pb.TLocalReportGetCampTowerReportRsp.RecentReportArr)
  return recentreportarr_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb::TLocalBattleReportSimpleInfo >*
TLocalReportGetCampTowerReportRsp::mutable_recentreportarr() {
  // @@protoc_insertion_point(field_mutable_list:pb.TLocalReportGetCampTowerReportRsp.RecentReportArr)
  return &recentreportarr_;
}

// repeated .pb.TLocalBattleReportSimpleInfo ExtremeReportArr = 3;
inline int TLocalReportGetCampTowerReportRsp::extremereportarr_size() const {
  return extremereportarr_.size();
}
inline void TLocalReportGetCampTowerReportRsp::clear_extremereportarr() {
  extremereportarr_.Clear();
}
inline const ::pb::TLocalBattleReportSimpleInfo& TLocalReportGetCampTowerReportRsp::extremereportarr(int index) const {
  // @@protoc_insertion_point(field_get:pb.TLocalReportGetCampTowerReportRsp.ExtremeReportArr)
  return extremereportarr_.Get(index);
}
inline ::pb::TLocalBattleReportSimpleInfo* TLocalReportGetCampTowerReportRsp::mutable_extremereportarr(int index) {
  // @@protoc_insertion_point(field_mutable:pb.TLocalReportGetCampTowerReportRsp.ExtremeReportArr)
  return extremereportarr_.Mutable(index);
}
inline ::pb::TLocalBattleReportSimpleInfo* TLocalReportGetCampTowerReportRsp::add_extremereportarr() {
  // @@protoc_insertion_point(field_add:pb.TLocalReportGetCampTowerReportRsp.ExtremeReportArr)
  return extremereportarr_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::TLocalBattleReportSimpleInfo >&
TLocalReportGetCampTowerReportRsp::extremereportarr() const {
  // @@protoc_insertion_point(field_list:pb.TLocalReportGetCampTowerReportRsp.ExtremeReportArr)
  return extremereportarr_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb::TLocalBattleReportSimpleInfo >*
TLocalReportGetCampTowerReportRsp::mutable_extremereportarr() {
  // @@protoc_insertion_point(field_mutable_list:pb.TLocalReportGetCampTowerReportRsp.ExtremeReportArr)
  return &extremereportarr_;
}

// -------------------------------------------------------------------

// TLocalReportGetTowerReportReq

// optional uint32 LayerId = 1;
inline bool TLocalReportGetTowerReportReq::has_layerid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TLocalReportGetTowerReportReq::set_has_layerid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TLocalReportGetTowerReportReq::clear_has_layerid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TLocalReportGetTowerReportReq::clear_layerid() {
  layerid_ = 0u;
  clear_has_layerid();
}
inline ::google::protobuf::uint32 TLocalReportGetTowerReportReq::layerid() const {
  // @@protoc_insertion_point(field_get:pb.TLocalReportGetTowerReportReq.LayerId)
  return layerid_;
}
inline void TLocalReportGetTowerReportReq::set_layerid(::google::protobuf::uint32 value) {
  set_has_layerid();
  layerid_ = value;
  // @@protoc_insertion_point(field_set:pb.TLocalReportGetTowerReportReq.LayerId)
}

// -------------------------------------------------------------------

// TLocalReportTowerReportCampSingle

// optional uint32 CampId = 1;
inline bool TLocalReportTowerReportCampSingle::has_campid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TLocalReportTowerReportCampSingle::set_has_campid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TLocalReportTowerReportCampSingle::clear_has_campid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TLocalReportTowerReportCampSingle::clear_campid() {
  campid_ = 0u;
  clear_has_campid();
}
inline ::google::protobuf::uint32 TLocalReportTowerReportCampSingle::campid() const {
  // @@protoc_insertion_point(field_get:pb.TLocalReportTowerReportCampSingle.CampId)
  return campid_;
}
inline void TLocalReportTowerReportCampSingle::set_campid(::google::protobuf::uint32 value) {
  set_has_campid();
  campid_ = value;
  // @@protoc_insertion_point(field_set:pb.TLocalReportTowerReportCampSingle.CampId)
}

// repeated .pb.TLocalBattleReportSimpleInfo ReportArr = 2;
inline int TLocalReportTowerReportCampSingle::reportarr_size() const {
  return reportarr_.size();
}
inline void TLocalReportTowerReportCampSingle::clear_reportarr() {
  reportarr_.Clear();
}
inline const ::pb::TLocalBattleReportSimpleInfo& TLocalReportTowerReportCampSingle::reportarr(int index) const {
  // @@protoc_insertion_point(field_get:pb.TLocalReportTowerReportCampSingle.ReportArr)
  return reportarr_.Get(index);
}
inline ::pb::TLocalBattleReportSimpleInfo* TLocalReportTowerReportCampSingle::mutable_reportarr(int index) {
  // @@protoc_insertion_point(field_mutable:pb.TLocalReportTowerReportCampSingle.ReportArr)
  return reportarr_.Mutable(index);
}
inline ::pb::TLocalBattleReportSimpleInfo* TLocalReportTowerReportCampSingle::add_reportarr() {
  // @@protoc_insertion_point(field_add:pb.TLocalReportTowerReportCampSingle.ReportArr)
  return reportarr_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::TLocalBattleReportSimpleInfo >&
TLocalReportTowerReportCampSingle::reportarr() const {
  // @@protoc_insertion_point(field_list:pb.TLocalReportTowerReportCampSingle.ReportArr)
  return reportarr_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb::TLocalBattleReportSimpleInfo >*
TLocalReportTowerReportCampSingle::mutable_reportarr() {
  // @@protoc_insertion_point(field_mutable_list:pb.TLocalReportTowerReportCampSingle.ReportArr)
  return &reportarr_;
}

// -------------------------------------------------------------------

// TLocalReportGetTowerReportRsp

// repeated .pb.TLocalReportTowerReportCampSingle FirstCampReportArr = 1;
inline int TLocalReportGetTowerReportRsp::firstcampreportarr_size() const {
  return firstcampreportarr_.size();
}
inline void TLocalReportGetTowerReportRsp::clear_firstcampreportarr() {
  firstcampreportarr_.Clear();
}
inline const ::pb::TLocalReportTowerReportCampSingle& TLocalReportGetTowerReportRsp::firstcampreportarr(int index) const {
  // @@protoc_insertion_point(field_get:pb.TLocalReportGetTowerReportRsp.FirstCampReportArr)
  return firstcampreportarr_.Get(index);
}
inline ::pb::TLocalReportTowerReportCampSingle* TLocalReportGetTowerReportRsp::mutable_firstcampreportarr(int index) {
  // @@protoc_insertion_point(field_mutable:pb.TLocalReportGetTowerReportRsp.FirstCampReportArr)
  return firstcampreportarr_.Mutable(index);
}
inline ::pb::TLocalReportTowerReportCampSingle* TLocalReportGetTowerReportRsp::add_firstcampreportarr() {
  // @@protoc_insertion_point(field_add:pb.TLocalReportGetTowerReportRsp.FirstCampReportArr)
  return firstcampreportarr_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::TLocalReportTowerReportCampSingle >&
TLocalReportGetTowerReportRsp::firstcampreportarr() const {
  // @@protoc_insertion_point(field_list:pb.TLocalReportGetTowerReportRsp.FirstCampReportArr)
  return firstcampreportarr_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb::TLocalReportTowerReportCampSingle >*
TLocalReportGetTowerReportRsp::mutable_firstcampreportarr() {
  // @@protoc_insertion_point(field_mutable_list:pb.TLocalReportGetTowerReportRsp.FirstCampReportArr)
  return &firstcampreportarr_;
}

// repeated .pb.TLocalReportTowerReportCampSingle RecentlyCampReportArr = 2;
inline int TLocalReportGetTowerReportRsp::recentlycampreportarr_size() const {
  return recentlycampreportarr_.size();
}
inline void TLocalReportGetTowerReportRsp::clear_recentlycampreportarr() {
  recentlycampreportarr_.Clear();
}
inline const ::pb::TLocalReportTowerReportCampSingle& TLocalReportGetTowerReportRsp::recentlycampreportarr(int index) const {
  // @@protoc_insertion_point(field_get:pb.TLocalReportGetTowerReportRsp.RecentlyCampReportArr)
  return recentlycampreportarr_.Get(index);
}
inline ::pb::TLocalReportTowerReportCampSingle* TLocalReportGetTowerReportRsp::mutable_recentlycampreportarr(int index) {
  // @@protoc_insertion_point(field_mutable:pb.TLocalReportGetTowerReportRsp.RecentlyCampReportArr)
  return recentlycampreportarr_.Mutable(index);
}
inline ::pb::TLocalReportTowerReportCampSingle* TLocalReportGetTowerReportRsp::add_recentlycampreportarr() {
  // @@protoc_insertion_point(field_add:pb.TLocalReportGetTowerReportRsp.RecentlyCampReportArr)
  return recentlycampreportarr_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::TLocalReportTowerReportCampSingle >&
TLocalReportGetTowerReportRsp::recentlycampreportarr() const {
  // @@protoc_insertion_point(field_list:pb.TLocalReportGetTowerReportRsp.RecentlyCampReportArr)
  return recentlycampreportarr_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb::TLocalReportTowerReportCampSingle >*
TLocalReportGetTowerReportRsp::mutable_recentlycampreportarr() {
  // @@protoc_insertion_point(field_mutable_list:pb.TLocalReportGetTowerReportRsp.RecentlyCampReportArr)
  return &recentlycampreportarr_;
}

// repeated .pb.TLocalReportTowerReportCampSingle FightForceMinCampReportArr = 3;
inline int TLocalReportGetTowerReportRsp::fightforcemincampreportarr_size() const {
  return fightforcemincampreportarr_.size();
}
inline void TLocalReportGetTowerReportRsp::clear_fightforcemincampreportarr() {
  fightforcemincampreportarr_.Clear();
}
inline const ::pb::TLocalReportTowerReportCampSingle& TLocalReportGetTowerReportRsp::fightforcemincampreportarr(int index) const {
  // @@protoc_insertion_point(field_get:pb.TLocalReportGetTowerReportRsp.FightForceMinCampReportArr)
  return fightforcemincampreportarr_.Get(index);
}
inline ::pb::TLocalReportTowerReportCampSingle* TLocalReportGetTowerReportRsp::mutable_fightforcemincampreportarr(int index) {
  // @@protoc_insertion_point(field_mutable:pb.TLocalReportGetTowerReportRsp.FightForceMinCampReportArr)
  return fightforcemincampreportarr_.Mutable(index);
}
inline ::pb::TLocalReportTowerReportCampSingle* TLocalReportGetTowerReportRsp::add_fightforcemincampreportarr() {
  // @@protoc_insertion_point(field_add:pb.TLocalReportGetTowerReportRsp.FightForceMinCampReportArr)
  return fightforcemincampreportarr_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::TLocalReportTowerReportCampSingle >&
TLocalReportGetTowerReportRsp::fightforcemincampreportarr() const {
  // @@protoc_insertion_point(field_list:pb.TLocalReportGetTowerReportRsp.FightForceMinCampReportArr)
  return fightforcemincampreportarr_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb::TLocalReportTowerReportCampSingle >*
TLocalReportGetTowerReportRsp::mutable_fightforcemincampreportarr() {
  // @@protoc_insertion_point(field_mutable_list:pb.TLocalReportGetTowerReportRsp.FightForceMinCampReportArr)
  return &fightforcemincampreportarr_;
}

// -------------------------------------------------------------------

// TLocalReportGetTowerHellReportReq

// optional uint32 LayerId = 1;
inline bool TLocalReportGetTowerHellReportReq::has_layerid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TLocalReportGetTowerHellReportReq::set_has_layerid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TLocalReportGetTowerHellReportReq::clear_has_layerid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TLocalReportGetTowerHellReportReq::clear_layerid() {
  layerid_ = 0u;
  clear_has_layerid();
}
inline ::google::protobuf::uint32 TLocalReportGetTowerHellReportReq::layerid() const {
  // @@protoc_insertion_point(field_get:pb.TLocalReportGetTowerHellReportReq.LayerId)
  return layerid_;
}
inline void TLocalReportGetTowerHellReportReq::set_layerid(::google::protobuf::uint32 value) {
  set_has_layerid();
  layerid_ = value;
  // @@protoc_insertion_point(field_set:pb.TLocalReportGetTowerHellReportReq.LayerId)
}

// -------------------------------------------------------------------

// TLocalReportGetTowerHellReportRsp

// repeated .pb.TLocalBattleReportSimpleInfo FirstReportArr = 1;
inline int TLocalReportGetTowerHellReportRsp::firstreportarr_size() const {
  return firstreportarr_.size();
}
inline void TLocalReportGetTowerHellReportRsp::clear_firstreportarr() {
  firstreportarr_.Clear();
}
inline const ::pb::TLocalBattleReportSimpleInfo& TLocalReportGetTowerHellReportRsp::firstreportarr(int index) const {
  // @@protoc_insertion_point(field_get:pb.TLocalReportGetTowerHellReportRsp.FirstReportArr)
  return firstreportarr_.Get(index);
}
inline ::pb::TLocalBattleReportSimpleInfo* TLocalReportGetTowerHellReportRsp::mutable_firstreportarr(int index) {
  // @@protoc_insertion_point(field_mutable:pb.TLocalReportGetTowerHellReportRsp.FirstReportArr)
  return firstreportarr_.Mutable(index);
}
inline ::pb::TLocalBattleReportSimpleInfo* TLocalReportGetTowerHellReportRsp::add_firstreportarr() {
  // @@protoc_insertion_point(field_add:pb.TLocalReportGetTowerHellReportRsp.FirstReportArr)
  return firstreportarr_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::TLocalBattleReportSimpleInfo >&
TLocalReportGetTowerHellReportRsp::firstreportarr() const {
  // @@protoc_insertion_point(field_list:pb.TLocalReportGetTowerHellReportRsp.FirstReportArr)
  return firstreportarr_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb::TLocalBattleReportSimpleInfo >*
TLocalReportGetTowerHellReportRsp::mutable_firstreportarr() {
  // @@protoc_insertion_point(field_mutable_list:pb.TLocalReportGetTowerHellReportRsp.FirstReportArr)
  return &firstreportarr_;
}

// repeated .pb.TLocalBattleReportSimpleInfo RecentlyReportArr = 2;
inline int TLocalReportGetTowerHellReportRsp::recentlyreportarr_size() const {
  return recentlyreportarr_.size();
}
inline void TLocalReportGetTowerHellReportRsp::clear_recentlyreportarr() {
  recentlyreportarr_.Clear();
}
inline const ::pb::TLocalBattleReportSimpleInfo& TLocalReportGetTowerHellReportRsp::recentlyreportarr(int index) const {
  // @@protoc_insertion_point(field_get:pb.TLocalReportGetTowerHellReportRsp.RecentlyReportArr)
  return recentlyreportarr_.Get(index);
}
inline ::pb::TLocalBattleReportSimpleInfo* TLocalReportGetTowerHellReportRsp::mutable_recentlyreportarr(int index) {
  // @@protoc_insertion_point(field_mutable:pb.TLocalReportGetTowerHellReportRsp.RecentlyReportArr)
  return recentlyreportarr_.Mutable(index);
}
inline ::pb::TLocalBattleReportSimpleInfo* TLocalReportGetTowerHellReportRsp::add_recentlyreportarr() {
  // @@protoc_insertion_point(field_add:pb.TLocalReportGetTowerHellReportRsp.RecentlyReportArr)
  return recentlyreportarr_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::TLocalBattleReportSimpleInfo >&
TLocalReportGetTowerHellReportRsp::recentlyreportarr() const {
  // @@protoc_insertion_point(field_list:pb.TLocalReportGetTowerHellReportRsp.RecentlyReportArr)
  return recentlyreportarr_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb::TLocalBattleReportSimpleInfo >*
TLocalReportGetTowerHellReportRsp::mutable_recentlyreportarr() {
  // @@protoc_insertion_point(field_mutable_list:pb.TLocalReportGetTowerHellReportRsp.RecentlyReportArr)
  return &recentlyreportarr_;
}

// repeated .pb.TLocalBattleReportSimpleInfo FightForceMinReportArr = 3;
inline int TLocalReportGetTowerHellReportRsp::fightforceminreportarr_size() const {
  return fightforceminreportarr_.size();
}
inline void TLocalReportGetTowerHellReportRsp::clear_fightforceminreportarr() {
  fightforceminreportarr_.Clear();
}
inline const ::pb::TLocalBattleReportSimpleInfo& TLocalReportGetTowerHellReportRsp::fightforceminreportarr(int index) const {
  // @@protoc_insertion_point(field_get:pb.TLocalReportGetTowerHellReportRsp.FightForceMinReportArr)
  return fightforceminreportarr_.Get(index);
}
inline ::pb::TLocalBattleReportSimpleInfo* TLocalReportGetTowerHellReportRsp::mutable_fightforceminreportarr(int index) {
  // @@protoc_insertion_point(field_mutable:pb.TLocalReportGetTowerHellReportRsp.FightForceMinReportArr)
  return fightforceminreportarr_.Mutable(index);
}
inline ::pb::TLocalBattleReportSimpleInfo* TLocalReportGetTowerHellReportRsp::add_fightforceminreportarr() {
  // @@protoc_insertion_point(field_add:pb.TLocalReportGetTowerHellReportRsp.FightForceMinReportArr)
  return fightforceminreportarr_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::TLocalBattleReportSimpleInfo >&
TLocalReportGetTowerHellReportRsp::fightforceminreportarr() const {
  // @@protoc_insertion_point(field_list:pb.TLocalReportGetTowerHellReportRsp.FightForceMinReportArr)
  return fightforceminreportarr_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb::TLocalBattleReportSimpleInfo >*
TLocalReportGetTowerHellReportRsp::mutable_fightforceminreportarr() {
  // @@protoc_insertion_point(field_mutable_list:pb.TLocalReportGetTowerHellReportRsp.FightForceMinReportArr)
  return &fightforceminreportarr_;
}

// -------------------------------------------------------------------

// TLocalReportInsertReportInfoReq

// optional uint64 ModuleId = 1;
inline bool TLocalReportInsertReportInfoReq::has_moduleid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TLocalReportInsertReportInfoReq::set_has_moduleid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TLocalReportInsertReportInfoReq::clear_has_moduleid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TLocalReportInsertReportInfoReq::clear_moduleid() {
  moduleid_ = GOOGLE_ULONGLONG(0);
  clear_has_moduleid();
}
inline ::google::protobuf::uint64 TLocalReportInsertReportInfoReq::moduleid() const {
  // @@protoc_insertion_point(field_get:pb.TLocalReportInsertReportInfoReq.ModuleId)
  return moduleid_;
}
inline void TLocalReportInsertReportInfoReq::set_moduleid(::google::protobuf::uint64 value) {
  set_has_moduleid();
  moduleid_ = value;
  // @@protoc_insertion_point(field_set:pb.TLocalReportInsertReportInfoReq.ModuleId)
}

// optional uint64 InstanceId = 2;
inline bool TLocalReportInsertReportInfoReq::has_instanceid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TLocalReportInsertReportInfoReq::set_has_instanceid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TLocalReportInsertReportInfoReq::clear_has_instanceid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TLocalReportInsertReportInfoReq::clear_instanceid() {
  instanceid_ = GOOGLE_ULONGLONG(0);
  clear_has_instanceid();
}
inline ::google::protobuf::uint64 TLocalReportInsertReportInfoReq::instanceid() const {
  // @@protoc_insertion_point(field_get:pb.TLocalReportInsertReportInfoReq.InstanceId)
  return instanceid_;
}
inline void TLocalReportInsertReportInfoReq::set_instanceid(::google::protobuf::uint64 value) {
  set_has_instanceid();
  instanceid_ = value;
  // @@protoc_insertion_point(field_set:pb.TLocalReportInsertReportInfoReq.InstanceId)
}

// repeated uint64 ReportTypeArr = 3;
inline int TLocalReportInsertReportInfoReq::reporttypearr_size() const {
  return reporttypearr_.size();
}
inline void TLocalReportInsertReportInfoReq::clear_reporttypearr() {
  reporttypearr_.Clear();
}
inline ::google::protobuf::uint64 TLocalReportInsertReportInfoReq::reporttypearr(int index) const {
  // @@protoc_insertion_point(field_get:pb.TLocalReportInsertReportInfoReq.ReportTypeArr)
  return reporttypearr_.Get(index);
}
inline void TLocalReportInsertReportInfoReq::set_reporttypearr(int index, ::google::protobuf::uint64 value) {
  reporttypearr_.Set(index, value);
  // @@protoc_insertion_point(field_set:pb.TLocalReportInsertReportInfoReq.ReportTypeArr)
}
inline void TLocalReportInsertReportInfoReq::add_reporttypearr(::google::protobuf::uint64 value) {
  reporttypearr_.Add(value);
  // @@protoc_insertion_point(field_add:pb.TLocalReportInsertReportInfoReq.ReportTypeArr)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
TLocalReportInsertReportInfoReq::reporttypearr() const {
  // @@protoc_insertion_point(field_list:pb.TLocalReportInsertReportInfoReq.ReportTypeArr)
  return reporttypearr_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
TLocalReportInsertReportInfoReq::mutable_reporttypearr() {
  // @@protoc_insertion_point(field_mutable_list:pb.TLocalReportInsertReportInfoReq.ReportTypeArr)
  return &reporttypearr_;
}

// optional uint32 StarLv = 4;
inline bool TLocalReportInsertReportInfoReq::has_starlv() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void TLocalReportInsertReportInfoReq::set_has_starlv() {
  _has_bits_[0] |= 0x00000008u;
}
inline void TLocalReportInsertReportInfoReq::clear_has_starlv() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void TLocalReportInsertReportInfoReq::clear_starlv() {
  starlv_ = 0u;
  clear_has_starlv();
}
inline ::google::protobuf::uint32 TLocalReportInsertReportInfoReq::starlv() const {
  // @@protoc_insertion_point(field_get:pb.TLocalReportInsertReportInfoReq.StarLv)
  return starlv_;
}
inline void TLocalReportInsertReportInfoReq::set_starlv(::google::protobuf::uint32 value) {
  set_has_starlv();
  starlv_ = value;
  // @@protoc_insertion_point(field_set:pb.TLocalReportInsertReportInfoReq.StarLv)
}

// optional .pb.TLocalBattleReportSimpleInfo SimpleInfo = 5;
inline bool TLocalReportInsertReportInfoReq::has_simpleinfo() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void TLocalReportInsertReportInfoReq::set_has_simpleinfo() {
  _has_bits_[0] |= 0x00000010u;
}
inline void TLocalReportInsertReportInfoReq::clear_has_simpleinfo() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void TLocalReportInsertReportInfoReq::clear_simpleinfo() {
  if (simpleinfo_ != NULL) simpleinfo_->::pb::TLocalBattleReportSimpleInfo::Clear();
  clear_has_simpleinfo();
}
inline const ::pb::TLocalBattleReportSimpleInfo& TLocalReportInsertReportInfoReq::simpleinfo() const {
  // @@protoc_insertion_point(field_get:pb.TLocalReportInsertReportInfoReq.SimpleInfo)
  return simpleinfo_ != NULL ? *simpleinfo_ : *default_instance_->simpleinfo_;
}
inline ::pb::TLocalBattleReportSimpleInfo* TLocalReportInsertReportInfoReq::mutable_simpleinfo() {
  set_has_simpleinfo();
  if (simpleinfo_ == NULL) simpleinfo_ = new ::pb::TLocalBattleReportSimpleInfo;
  // @@protoc_insertion_point(field_mutable:pb.TLocalReportInsertReportInfoReq.SimpleInfo)
  return simpleinfo_;
}
inline ::pb::TLocalBattleReportSimpleInfo* TLocalReportInsertReportInfoReq::release_simpleinfo() {
  clear_has_simpleinfo();
  ::pb::TLocalBattleReportSimpleInfo* temp = simpleinfo_;
  simpleinfo_ = NULL;
  return temp;
}
inline void TLocalReportInsertReportInfoReq::set_allocated_simpleinfo(::pb::TLocalBattleReportSimpleInfo* simpleinfo) {
  delete simpleinfo_;
  simpleinfo_ = simpleinfo;
  if (simpleinfo) {
    set_has_simpleinfo();
  } else {
    clear_has_simpleinfo();
  }
  // @@protoc_insertion_point(field_set_allocated:pb.TLocalReportInsertReportInfoReq.SimpleInfo)
}

// optional bytes BattleBytes = 6;
inline bool TLocalReportInsertReportInfoReq::has_battlebytes() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void TLocalReportInsertReportInfoReq::set_has_battlebytes() {
  _has_bits_[0] |= 0x00000020u;
}
inline void TLocalReportInsertReportInfoReq::clear_has_battlebytes() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void TLocalReportInsertReportInfoReq::clear_battlebytes() {
  if (battlebytes_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    battlebytes_->clear();
  }
  clear_has_battlebytes();
}
inline const ::std::string& TLocalReportInsertReportInfoReq::battlebytes() const {
  // @@protoc_insertion_point(field_get:pb.TLocalReportInsertReportInfoReq.BattleBytes)
  return *battlebytes_;
}
inline void TLocalReportInsertReportInfoReq::set_battlebytes(const ::std::string& value) {
  set_has_battlebytes();
  if (battlebytes_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    battlebytes_ = new ::std::string;
  }
  battlebytes_->assign(value);
  // @@protoc_insertion_point(field_set:pb.TLocalReportInsertReportInfoReq.BattleBytes)
}
inline void TLocalReportInsertReportInfoReq::set_battlebytes(const char* value) {
  set_has_battlebytes();
  if (battlebytes_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    battlebytes_ = new ::std::string;
  }
  battlebytes_->assign(value);
  // @@protoc_insertion_point(field_set_char:pb.TLocalReportInsertReportInfoReq.BattleBytes)
}
inline void TLocalReportInsertReportInfoReq::set_battlebytes(const void* value, size_t size) {
  set_has_battlebytes();
  if (battlebytes_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    battlebytes_ = new ::std::string;
  }
  battlebytes_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:pb.TLocalReportInsertReportInfoReq.BattleBytes)
}
inline ::std::string* TLocalReportInsertReportInfoReq::mutable_battlebytes() {
  set_has_battlebytes();
  if (battlebytes_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    battlebytes_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:pb.TLocalReportInsertReportInfoReq.BattleBytes)
  return battlebytes_;
}
inline ::std::string* TLocalReportInsertReportInfoReq::release_battlebytes() {
  clear_has_battlebytes();
  if (battlebytes_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = battlebytes_;
    battlebytes_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void TLocalReportInsertReportInfoReq::set_allocated_battlebytes(::std::string* battlebytes) {
  if (battlebytes_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete battlebytes_;
  }
  if (battlebytes) {
    set_has_battlebytes();
    battlebytes_ = battlebytes;
  } else {
    clear_has_battlebytes();
    battlebytes_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:pb.TLocalReportInsertReportInfoReq.BattleBytes)
}

// -------------------------------------------------------------------

// TLocalReportDeleteUserReportReq

// optional uint64 Uid = 1;
inline bool TLocalReportDeleteUserReportReq::has_uid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TLocalReportDeleteUserReportReq::set_has_uid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TLocalReportDeleteUserReportReq::clear_has_uid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TLocalReportDeleteUserReportReq::clear_uid() {
  uid_ = GOOGLE_ULONGLONG(0);
  clear_has_uid();
}
inline ::google::protobuf::uint64 TLocalReportDeleteUserReportReq::uid() const {
  // @@protoc_insertion_point(field_get:pb.TLocalReportDeleteUserReportReq.Uid)
  return uid_;
}
inline void TLocalReportDeleteUserReportReq::set_uid(::google::protobuf::uint64 value) {
  set_has_uid();
  uid_ = value;
  // @@protoc_insertion_point(field_set:pb.TLocalReportDeleteUserReportReq.Uid)
}

// optional string ServerId = 2;
inline bool TLocalReportDeleteUserReportReq::has_serverid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TLocalReportDeleteUserReportReq::set_has_serverid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TLocalReportDeleteUserReportReq::clear_has_serverid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TLocalReportDeleteUserReportReq::clear_serverid() {
  if (serverid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    serverid_->clear();
  }
  clear_has_serverid();
}
inline const ::std::string& TLocalReportDeleteUserReportReq::serverid() const {
  // @@protoc_insertion_point(field_get:pb.TLocalReportDeleteUserReportReq.ServerId)
  return *serverid_;
}
inline void TLocalReportDeleteUserReportReq::set_serverid(const ::std::string& value) {
  set_has_serverid();
  if (serverid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    serverid_ = new ::std::string;
  }
  serverid_->assign(value);
  // @@protoc_insertion_point(field_set:pb.TLocalReportDeleteUserReportReq.ServerId)
}
inline void TLocalReportDeleteUserReportReq::set_serverid(const char* value) {
  set_has_serverid();
  if (serverid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    serverid_ = new ::std::string;
  }
  serverid_->assign(value);
  // @@protoc_insertion_point(field_set_char:pb.TLocalReportDeleteUserReportReq.ServerId)
}
inline void TLocalReportDeleteUserReportReq::set_serverid(const char* value, size_t size) {
  set_has_serverid();
  if (serverid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    serverid_ = new ::std::string;
  }
  serverid_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:pb.TLocalReportDeleteUserReportReq.ServerId)
}
inline ::std::string* TLocalReportDeleteUserReportReq::mutable_serverid() {
  set_has_serverid();
  if (serverid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    serverid_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:pb.TLocalReportDeleteUserReportReq.ServerId)
  return serverid_;
}
inline ::std::string* TLocalReportDeleteUserReportReq::release_serverid() {
  clear_has_serverid();
  if (serverid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = serverid_;
    serverid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void TLocalReportDeleteUserReportReq::set_allocated_serverid(::std::string* serverid) {
  if (serverid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete serverid_;
  }
  if (serverid) {
    set_has_serverid();
    serverid_ = serverid;
  } else {
    clear_has_serverid();
    serverid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:pb.TLocalReportDeleteUserReportReq.ServerId)
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace pb

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_net_2fLocalBattleReport_2eproto__INCLUDED
