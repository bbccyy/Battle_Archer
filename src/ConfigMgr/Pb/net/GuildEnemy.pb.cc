// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: net/GuildEnemy.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "net/GuildEnemy.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace pb {

namespace {

const ::google::protobuf::Descriptor* TGuildEnemyUnit_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TGuildEnemyUnit_reflection_ = NULL;
const ::google::protobuf::Descriptor* TGuildEnemySingle_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TGuildEnemySingle_reflection_ = NULL;
const ::google::protobuf::Descriptor* TGuildGetEnemyListRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TGuildGetEnemyListRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* TGuildEnemyStartBattleReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TGuildEnemyStartBattleReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* TGuildEnemyStartBattleRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TGuildEnemyStartBattleRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* TGuildEnemyReportBattleReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TGuildEnemyReportBattleReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* TGuildEnemyBuyAtkNumReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TGuildEnemyBuyAtkNumReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* TGuildUpdateEnemyNotify_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TGuildUpdateEnemyNotify_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_net_2fGuildEnemy_2eproto() {
  protobuf_AddDesc_net_2fGuildEnemy_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "net/GuildEnemy.proto");
  GOOGLE_CHECK(file != NULL);
  TGuildEnemyUnit_descriptor_ = file->message_type(0);
  static const int TGuildEnemyUnit_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TGuildEnemyUnit, hid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TGuildEnemyUnit, htid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TGuildEnemyUnit, currenthp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TGuildEnemyUnit, maxhp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TGuildEnemyUnit, battlepos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TGuildEnemyUnit, screennum_),
  };
  TGuildEnemyUnit_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TGuildEnemyUnit_descriptor_,
      TGuildEnemyUnit::default_instance_,
      TGuildEnemyUnit_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TGuildEnemyUnit, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TGuildEnemyUnit, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TGuildEnemyUnit));
  TGuildEnemySingle_descriptor_ = file->message_type(1);
  static const int TGuildEnemySingle_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TGuildEnemySingle, enemyid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TGuildEnemySingle, enemytid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TGuildEnemySingle, enemypos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TGuildEnemySingle, passtime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TGuildEnemySingle, unitarr_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TGuildEnemySingle, battleinfoid_),
  };
  TGuildEnemySingle_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TGuildEnemySingle_descriptor_,
      TGuildEnemySingle::default_instance_,
      TGuildEnemySingle_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TGuildEnemySingle, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TGuildEnemySingle, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TGuildEnemySingle));
  TGuildGetEnemyListRsp_descriptor_ = file->message_type(2);
  static const int TGuildGetEnemyListRsp_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TGuildGetEnemyListRsp, triggeruid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TGuildGetEnemyListRsp, triggeruname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TGuildGetEnemyListRsp, grouptid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TGuildGetEnemyListRsp, expiretime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TGuildGetEnemyListRsp, enemyarr_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TGuildGetEnemyListRsp, updatetime_),
  };
  TGuildGetEnemyListRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TGuildGetEnemyListRsp_descriptor_,
      TGuildGetEnemyListRsp::default_instance_,
      TGuildGetEnemyListRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TGuildGetEnemyListRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TGuildGetEnemyListRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TGuildGetEnemyListRsp));
  TGuildEnemyStartBattleReq_descriptor_ = file->message_type(3);
  static const int TGuildEnemyStartBattleReq_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TGuildEnemyStartBattleReq, enemyid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TGuildEnemyStartBattleReq, battlecheckparam_),
  };
  TGuildEnemyStartBattleReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TGuildEnemyStartBattleReq_descriptor_,
      TGuildEnemyStartBattleReq::default_instance_,
      TGuildEnemyStartBattleReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TGuildEnemyStartBattleReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TGuildEnemyStartBattleReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TGuildEnemyStartBattleReq));
  TGuildEnemyStartBattleRsp_descriptor_ = file->message_type(4);
  static const int TGuildEnemyStartBattleRsp_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TGuildEnemyStartBattleRsp, unitarr_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TGuildEnemyStartBattleRsp, battleargs_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TGuildEnemyStartBattleRsp, updatetime_),
  };
  TGuildEnemyStartBattleRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TGuildEnemyStartBattleRsp_descriptor_,
      TGuildEnemyStartBattleRsp::default_instance_,
      TGuildEnemyStartBattleRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TGuildEnemyStartBattleRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TGuildEnemyStartBattleRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TGuildEnemyStartBattleRsp));
  TGuildEnemyReportBattleReq_descriptor_ = file->message_type(5);
  static const int TGuildEnemyReportBattleReq_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TGuildEnemyReportBattleReq, enemyid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TGuildEnemyReportBattleReq, battleret_),
  };
  TGuildEnemyReportBattleReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TGuildEnemyReportBattleReq_descriptor_,
      TGuildEnemyReportBattleReq::default_instance_,
      TGuildEnemyReportBattleReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TGuildEnemyReportBattleReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TGuildEnemyReportBattleReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TGuildEnemyReportBattleReq));
  TGuildEnemyBuyAtkNumReq_descriptor_ = file->message_type(6);
  static const int TGuildEnemyBuyAtkNumReq_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TGuildEnemyBuyAtkNumReq, buynum_),
  };
  TGuildEnemyBuyAtkNumReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TGuildEnemyBuyAtkNumReq_descriptor_,
      TGuildEnemyBuyAtkNumReq::default_instance_,
      TGuildEnemyBuyAtkNumReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TGuildEnemyBuyAtkNumReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TGuildEnemyBuyAtkNumReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TGuildEnemyBuyAtkNumReq));
  TGuildUpdateEnemyNotify_descriptor_ = file->message_type(7);
  static const int TGuildUpdateEnemyNotify_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TGuildUpdateEnemyNotify, triggeruid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TGuildUpdateEnemyNotify, triggeruname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TGuildUpdateEnemyNotify, grouptid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TGuildUpdateEnemyNotify, expiretime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TGuildUpdateEnemyNotify, enemyarr_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TGuildUpdateEnemyNotify, updatetime_),
  };
  TGuildUpdateEnemyNotify_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TGuildUpdateEnemyNotify_descriptor_,
      TGuildUpdateEnemyNotify::default_instance_,
      TGuildUpdateEnemyNotify_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TGuildUpdateEnemyNotify, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TGuildUpdateEnemyNotify, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TGuildUpdateEnemyNotify));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_net_2fGuildEnemy_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TGuildEnemyUnit_descriptor_, &TGuildEnemyUnit::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TGuildEnemySingle_descriptor_, &TGuildEnemySingle::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TGuildGetEnemyListRsp_descriptor_, &TGuildGetEnemyListRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TGuildEnemyStartBattleReq_descriptor_, &TGuildEnemyStartBattleReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TGuildEnemyStartBattleRsp_descriptor_, &TGuildEnemyStartBattleRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TGuildEnemyReportBattleReq_descriptor_, &TGuildEnemyReportBattleReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TGuildEnemyBuyAtkNumReq_descriptor_, &TGuildEnemyBuyAtkNumReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TGuildUpdateEnemyNotify_descriptor_, &TGuildUpdateEnemyNotify::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_net_2fGuildEnemy_2eproto() {
  delete TGuildEnemyUnit::default_instance_;
  delete TGuildEnemyUnit_reflection_;
  delete TGuildEnemySingle::default_instance_;
  delete TGuildEnemySingle_reflection_;
  delete TGuildGetEnemyListRsp::default_instance_;
  delete TGuildGetEnemyListRsp_reflection_;
  delete TGuildEnemyStartBattleReq::default_instance_;
  delete TGuildEnemyStartBattleReq_reflection_;
  delete TGuildEnemyStartBattleRsp::default_instance_;
  delete TGuildEnemyStartBattleRsp_reflection_;
  delete TGuildEnemyReportBattleReq::default_instance_;
  delete TGuildEnemyReportBattleReq_reflection_;
  delete TGuildEnemyBuyAtkNumReq::default_instance_;
  delete TGuildEnemyBuyAtkNumReq_reflection_;
  delete TGuildUpdateEnemyNotify::default_instance_;
  delete TGuildUpdateEnemyNotify_reflection_;
}

void protobuf_AddDesc_net_2fGuildEnemy_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::pb::protobuf_AddDesc_net_2fBattle_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\024net/GuildEnemy.proto\022\002pb\032\020net/Battle.p"
    "roto\"t\n\017TGuildEnemyUnit\022\013\n\003Hid\030\001 \001(\r\022\014\n\004"
    "Htid\030\002 \001(\r\022\021\n\tCurrentHp\030\003 \001(\004\022\r\n\005MaxHp\030\004"
    " \001(\004\022\021\n\tBattlePos\030\005 \001(\r\022\021\n\tScreenNum\030\006 \001"
    "(\r\"\226\001\n\021TGuildEnemySingle\022\017\n\007EnemyId\030\001 \001("
    "\r\022\020\n\010EnemyTid\030\002 \001(\r\022\020\n\010EnemyPos\030\003 \001(\r\022\020\n"
    "\010PassTime\030\004 \001(\004\022$\n\007UnitArr\030\005 \003(\0132\023.pb.TG"
    "uildEnemyUnit\022\024\n\014BattleInfoId\030\006 \001(\r\"\244\001\n\025"
    "TGuildGetEnemyListRsp\022\022\n\nTriggerUid\030\001 \001("
    "\004\022\024\n\014TriggerUname\030\002 \001(\t\022\020\n\010GroupTid\030\003 \001("
    "\r\022\022\n\nExpireTime\030\004 \001(\004\022\'\n\010EnemyArr\030\005 \003(\0132"
    "\025.pb.TGuildEnemySingle\022\022\n\nUpdateTime\030\006 \001"
    "(\004\"]\n\031TGuildEnemyStartBattleReq\022\017\n\007Enemy"
    "Id\030\001 \001(\r\022/\n\020BattleCheckParam\030\002 \001(\0132\025.pb."
    "TBattleCheckParam\"z\n\031TGuildEnemyStartBat"
    "tleRsp\022$\n\007UnitArr\030\001 \003(\0132\023.pb.TGuildEnemy"
    "Unit\022#\n\nBattleArgs\030\002 \001(\0132\017.pb.TBattleArg"
    "s\022\022\n\nUpdateTime\030\003 \001(\004\"S\n\032TGuildEnemyRepo"
    "rtBattleReq\022\017\n\007EnemyId\030\001 \001(\r\022$\n\tBattleRe"
    "t\030\002 \001(\0132\021.pb.TBattleResult\")\n\027TGuildEnem"
    "yBuyAtkNumReq\022\016\n\006BuyNum\030\001 \001(\r\"\246\001\n\027TGuild"
    "UpdateEnemyNotify\022\022\n\nTriggerUid\030\001 \001(\004\022\024\n"
    "\014TriggerUname\030\002 \001(\t\022\020\n\010GroupTid\030\003 \001(\r\022\022\n"
    "\nExpireTime\030\004 \001(\004\022\'\n\010EnemyArr\030\005 \003(\0132\025.pb"
    ".TGuildEnemySingle\022\022\n\nUpdateTime\030\006 \001(\004", 998);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "net/GuildEnemy.proto", &protobuf_RegisterTypes);
  TGuildEnemyUnit::default_instance_ = new TGuildEnemyUnit();
  TGuildEnemySingle::default_instance_ = new TGuildEnemySingle();
  TGuildGetEnemyListRsp::default_instance_ = new TGuildGetEnemyListRsp();
  TGuildEnemyStartBattleReq::default_instance_ = new TGuildEnemyStartBattleReq();
  TGuildEnemyStartBattleRsp::default_instance_ = new TGuildEnemyStartBattleRsp();
  TGuildEnemyReportBattleReq::default_instance_ = new TGuildEnemyReportBattleReq();
  TGuildEnemyBuyAtkNumReq::default_instance_ = new TGuildEnemyBuyAtkNumReq();
  TGuildUpdateEnemyNotify::default_instance_ = new TGuildUpdateEnemyNotify();
  TGuildEnemyUnit::default_instance_->InitAsDefaultInstance();
  TGuildEnemySingle::default_instance_->InitAsDefaultInstance();
  TGuildGetEnemyListRsp::default_instance_->InitAsDefaultInstance();
  TGuildEnemyStartBattleReq::default_instance_->InitAsDefaultInstance();
  TGuildEnemyStartBattleRsp::default_instance_->InitAsDefaultInstance();
  TGuildEnemyReportBattleReq::default_instance_->InitAsDefaultInstance();
  TGuildEnemyBuyAtkNumReq::default_instance_->InitAsDefaultInstance();
  TGuildUpdateEnemyNotify::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_net_2fGuildEnemy_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_net_2fGuildEnemy_2eproto {
  StaticDescriptorInitializer_net_2fGuildEnemy_2eproto() {
    protobuf_AddDesc_net_2fGuildEnemy_2eproto();
  }
} static_descriptor_initializer_net_2fGuildEnemy_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int TGuildEnemyUnit::kHidFieldNumber;
const int TGuildEnemyUnit::kHtidFieldNumber;
const int TGuildEnemyUnit::kCurrentHpFieldNumber;
const int TGuildEnemyUnit::kMaxHpFieldNumber;
const int TGuildEnemyUnit::kBattlePosFieldNumber;
const int TGuildEnemyUnit::kScreenNumFieldNumber;
#endif  // !_MSC_VER

TGuildEnemyUnit::TGuildEnemyUnit()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TGuildEnemyUnit)
}

void TGuildEnemyUnit::InitAsDefaultInstance() {
}

TGuildEnemyUnit::TGuildEnemyUnit(const TGuildEnemyUnit& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TGuildEnemyUnit)
}

void TGuildEnemyUnit::SharedCtor() {
  _cached_size_ = 0;
  hid_ = 0u;
  htid_ = 0u;
  currenthp_ = GOOGLE_ULONGLONG(0);
  maxhp_ = GOOGLE_ULONGLONG(0);
  battlepos_ = 0u;
  screennum_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TGuildEnemyUnit::~TGuildEnemyUnit() {
  // @@protoc_insertion_point(destructor:pb.TGuildEnemyUnit)
  SharedDtor();
}

void TGuildEnemyUnit::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TGuildEnemyUnit::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TGuildEnemyUnit::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TGuildEnemyUnit_descriptor_;
}

const TGuildEnemyUnit& TGuildEnemyUnit::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fGuildEnemy_2eproto();
  return *default_instance_;
}

TGuildEnemyUnit* TGuildEnemyUnit::default_instance_ = NULL;

TGuildEnemyUnit* TGuildEnemyUnit::New() const {
  return new TGuildEnemyUnit;
}

void TGuildEnemyUnit::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<TGuildEnemyUnit*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 63) {
    ZR_(hid_, screennum_);
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TGuildEnemyUnit::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TGuildEnemyUnit)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 Hid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &hid_)));
          set_has_hid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_Htid;
        break;
      }

      // optional uint32 Htid = 2;
      case 2: {
        if (tag == 16) {
         parse_Htid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &htid_)));
          set_has_htid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_CurrentHp;
        break;
      }

      // optional uint64 CurrentHp = 3;
      case 3: {
        if (tag == 24) {
         parse_CurrentHp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &currenthp_)));
          set_has_currenthp();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_MaxHp;
        break;
      }

      // optional uint64 MaxHp = 4;
      case 4: {
        if (tag == 32) {
         parse_MaxHp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &maxhp_)));
          set_has_maxhp();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_BattlePos;
        break;
      }

      // optional uint32 BattlePos = 5;
      case 5: {
        if (tag == 40) {
         parse_BattlePos:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &battlepos_)));
          set_has_battlepos();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_ScreenNum;
        break;
      }

      // optional uint32 ScreenNum = 6;
      case 6: {
        if (tag == 48) {
         parse_ScreenNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &screennum_)));
          set_has_screennum();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TGuildEnemyUnit)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TGuildEnemyUnit)
  return false;
#undef DO_
}

void TGuildEnemyUnit::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TGuildEnemyUnit)
  // optional uint32 Hid = 1;
  if (has_hid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->hid(), output);
  }

  // optional uint32 Htid = 2;
  if (has_htid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->htid(), output);
  }

  // optional uint64 CurrentHp = 3;
  if (has_currenthp()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->currenthp(), output);
  }

  // optional uint64 MaxHp = 4;
  if (has_maxhp()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->maxhp(), output);
  }

  // optional uint32 BattlePos = 5;
  if (has_battlepos()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->battlepos(), output);
  }

  // optional uint32 ScreenNum = 6;
  if (has_screennum()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->screennum(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TGuildEnemyUnit)
}

::google::protobuf::uint8* TGuildEnemyUnit::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TGuildEnemyUnit)
  // optional uint32 Hid = 1;
  if (has_hid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->hid(), target);
  }

  // optional uint32 Htid = 2;
  if (has_htid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->htid(), target);
  }

  // optional uint64 CurrentHp = 3;
  if (has_currenthp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->currenthp(), target);
  }

  // optional uint64 MaxHp = 4;
  if (has_maxhp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->maxhp(), target);
  }

  // optional uint32 BattlePos = 5;
  if (has_battlepos()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->battlepos(), target);
  }

  // optional uint32 ScreenNum = 6;
  if (has_screennum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->screennum(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TGuildEnemyUnit)
  return target;
}

int TGuildEnemyUnit::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 Hid = 1;
    if (has_hid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->hid());
    }

    // optional uint32 Htid = 2;
    if (has_htid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->htid());
    }

    // optional uint64 CurrentHp = 3;
    if (has_currenthp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->currenthp());
    }

    // optional uint64 MaxHp = 4;
    if (has_maxhp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->maxhp());
    }

    // optional uint32 BattlePos = 5;
    if (has_battlepos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->battlepos());
    }

    // optional uint32 ScreenNum = 6;
    if (has_screennum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->screennum());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TGuildEnemyUnit::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TGuildEnemyUnit* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TGuildEnemyUnit*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TGuildEnemyUnit::MergeFrom(const TGuildEnemyUnit& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_hid()) {
      set_hid(from.hid());
    }
    if (from.has_htid()) {
      set_htid(from.htid());
    }
    if (from.has_currenthp()) {
      set_currenthp(from.currenthp());
    }
    if (from.has_maxhp()) {
      set_maxhp(from.maxhp());
    }
    if (from.has_battlepos()) {
      set_battlepos(from.battlepos());
    }
    if (from.has_screennum()) {
      set_screennum(from.screennum());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TGuildEnemyUnit::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TGuildEnemyUnit::CopyFrom(const TGuildEnemyUnit& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TGuildEnemyUnit::IsInitialized() const {

  return true;
}

void TGuildEnemyUnit::Swap(TGuildEnemyUnit* other) {
  if (other != this) {
    std::swap(hid_, other->hid_);
    std::swap(htid_, other->htid_);
    std::swap(currenthp_, other->currenthp_);
    std::swap(maxhp_, other->maxhp_);
    std::swap(battlepos_, other->battlepos_);
    std::swap(screennum_, other->screennum_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TGuildEnemyUnit::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TGuildEnemyUnit_descriptor_;
  metadata.reflection = TGuildEnemyUnit_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TGuildEnemySingle::kEnemyIdFieldNumber;
const int TGuildEnemySingle::kEnemyTidFieldNumber;
const int TGuildEnemySingle::kEnemyPosFieldNumber;
const int TGuildEnemySingle::kPassTimeFieldNumber;
const int TGuildEnemySingle::kUnitArrFieldNumber;
const int TGuildEnemySingle::kBattleInfoIdFieldNumber;
#endif  // !_MSC_VER

TGuildEnemySingle::TGuildEnemySingle()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TGuildEnemySingle)
}

void TGuildEnemySingle::InitAsDefaultInstance() {
}

TGuildEnemySingle::TGuildEnemySingle(const TGuildEnemySingle& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TGuildEnemySingle)
}

void TGuildEnemySingle::SharedCtor() {
  _cached_size_ = 0;
  enemyid_ = 0u;
  enemytid_ = 0u;
  enemypos_ = 0u;
  passtime_ = GOOGLE_ULONGLONG(0);
  battleinfoid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TGuildEnemySingle::~TGuildEnemySingle() {
  // @@protoc_insertion_point(destructor:pb.TGuildEnemySingle)
  SharedDtor();
}

void TGuildEnemySingle::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TGuildEnemySingle::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TGuildEnemySingle::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TGuildEnemySingle_descriptor_;
}

const TGuildEnemySingle& TGuildEnemySingle::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fGuildEnemy_2eproto();
  return *default_instance_;
}

TGuildEnemySingle* TGuildEnemySingle::default_instance_ = NULL;

TGuildEnemySingle* TGuildEnemySingle::New() const {
  return new TGuildEnemySingle;
}

void TGuildEnemySingle::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<TGuildEnemySingle*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 47) {
    ZR_(enemyid_, battleinfoid_);
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  unitarr_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TGuildEnemySingle::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TGuildEnemySingle)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 EnemyId = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &enemyid_)));
          set_has_enemyid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_EnemyTid;
        break;
      }

      // optional uint32 EnemyTid = 2;
      case 2: {
        if (tag == 16) {
         parse_EnemyTid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &enemytid_)));
          set_has_enemytid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_EnemyPos;
        break;
      }

      // optional uint32 EnemyPos = 3;
      case 3: {
        if (tag == 24) {
         parse_EnemyPos:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &enemypos_)));
          set_has_enemypos();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_PassTime;
        break;
      }

      // optional uint64 PassTime = 4;
      case 4: {
        if (tag == 32) {
         parse_PassTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &passtime_)));
          set_has_passtime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_UnitArr;
        break;
      }

      // repeated .pb.TGuildEnemyUnit UnitArr = 5;
      case 5: {
        if (tag == 42) {
         parse_UnitArr:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_unitarr()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_UnitArr;
        if (input->ExpectTag(48)) goto parse_BattleInfoId;
        break;
      }

      // optional uint32 BattleInfoId = 6;
      case 6: {
        if (tag == 48) {
         parse_BattleInfoId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &battleinfoid_)));
          set_has_battleinfoid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TGuildEnemySingle)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TGuildEnemySingle)
  return false;
#undef DO_
}

void TGuildEnemySingle::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TGuildEnemySingle)
  // optional uint32 EnemyId = 1;
  if (has_enemyid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->enemyid(), output);
  }

  // optional uint32 EnemyTid = 2;
  if (has_enemytid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->enemytid(), output);
  }

  // optional uint32 EnemyPos = 3;
  if (has_enemypos()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->enemypos(), output);
  }

  // optional uint64 PassTime = 4;
  if (has_passtime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->passtime(), output);
  }

  // repeated .pb.TGuildEnemyUnit UnitArr = 5;
  for (int i = 0; i < this->unitarr_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->unitarr(i), output);
  }

  // optional uint32 BattleInfoId = 6;
  if (has_battleinfoid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->battleinfoid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TGuildEnemySingle)
}

::google::protobuf::uint8* TGuildEnemySingle::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TGuildEnemySingle)
  // optional uint32 EnemyId = 1;
  if (has_enemyid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->enemyid(), target);
  }

  // optional uint32 EnemyTid = 2;
  if (has_enemytid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->enemytid(), target);
  }

  // optional uint32 EnemyPos = 3;
  if (has_enemypos()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->enemypos(), target);
  }

  // optional uint64 PassTime = 4;
  if (has_passtime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->passtime(), target);
  }

  // repeated .pb.TGuildEnemyUnit UnitArr = 5;
  for (int i = 0; i < this->unitarr_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->unitarr(i), target);
  }

  // optional uint32 BattleInfoId = 6;
  if (has_battleinfoid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->battleinfoid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TGuildEnemySingle)
  return target;
}

int TGuildEnemySingle::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 EnemyId = 1;
    if (has_enemyid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->enemyid());
    }

    // optional uint32 EnemyTid = 2;
    if (has_enemytid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->enemytid());
    }

    // optional uint32 EnemyPos = 3;
    if (has_enemypos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->enemypos());
    }

    // optional uint64 PassTime = 4;
    if (has_passtime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->passtime());
    }

    // optional uint32 BattleInfoId = 6;
    if (has_battleinfoid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->battleinfoid());
    }

  }
  // repeated .pb.TGuildEnemyUnit UnitArr = 5;
  total_size += 1 * this->unitarr_size();
  for (int i = 0; i < this->unitarr_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->unitarr(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TGuildEnemySingle::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TGuildEnemySingle* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TGuildEnemySingle*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TGuildEnemySingle::MergeFrom(const TGuildEnemySingle& from) {
  GOOGLE_CHECK_NE(&from, this);
  unitarr_.MergeFrom(from.unitarr_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_enemyid()) {
      set_enemyid(from.enemyid());
    }
    if (from.has_enemytid()) {
      set_enemytid(from.enemytid());
    }
    if (from.has_enemypos()) {
      set_enemypos(from.enemypos());
    }
    if (from.has_passtime()) {
      set_passtime(from.passtime());
    }
    if (from.has_battleinfoid()) {
      set_battleinfoid(from.battleinfoid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TGuildEnemySingle::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TGuildEnemySingle::CopyFrom(const TGuildEnemySingle& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TGuildEnemySingle::IsInitialized() const {

  return true;
}

void TGuildEnemySingle::Swap(TGuildEnemySingle* other) {
  if (other != this) {
    std::swap(enemyid_, other->enemyid_);
    std::swap(enemytid_, other->enemytid_);
    std::swap(enemypos_, other->enemypos_);
    std::swap(passtime_, other->passtime_);
    unitarr_.Swap(&other->unitarr_);
    std::swap(battleinfoid_, other->battleinfoid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TGuildEnemySingle::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TGuildEnemySingle_descriptor_;
  metadata.reflection = TGuildEnemySingle_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TGuildGetEnemyListRsp::kTriggerUidFieldNumber;
const int TGuildGetEnemyListRsp::kTriggerUnameFieldNumber;
const int TGuildGetEnemyListRsp::kGroupTidFieldNumber;
const int TGuildGetEnemyListRsp::kExpireTimeFieldNumber;
const int TGuildGetEnemyListRsp::kEnemyArrFieldNumber;
const int TGuildGetEnemyListRsp::kUpdateTimeFieldNumber;
#endif  // !_MSC_VER

TGuildGetEnemyListRsp::TGuildGetEnemyListRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TGuildGetEnemyListRsp)
}

void TGuildGetEnemyListRsp::InitAsDefaultInstance() {
}

TGuildGetEnemyListRsp::TGuildGetEnemyListRsp(const TGuildGetEnemyListRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TGuildGetEnemyListRsp)
}

void TGuildGetEnemyListRsp::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  triggeruid_ = GOOGLE_ULONGLONG(0);
  triggeruname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  grouptid_ = 0u;
  expiretime_ = GOOGLE_ULONGLONG(0);
  updatetime_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TGuildGetEnemyListRsp::~TGuildGetEnemyListRsp() {
  // @@protoc_insertion_point(destructor:pb.TGuildGetEnemyListRsp)
  SharedDtor();
}

void TGuildGetEnemyListRsp::SharedDtor() {
  if (triggeruname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete triggeruname_;
  }
  if (this != default_instance_) {
  }
}

void TGuildGetEnemyListRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TGuildGetEnemyListRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TGuildGetEnemyListRsp_descriptor_;
}

const TGuildGetEnemyListRsp& TGuildGetEnemyListRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fGuildEnemy_2eproto();
  return *default_instance_;
}

TGuildGetEnemyListRsp* TGuildGetEnemyListRsp::default_instance_ = NULL;

TGuildGetEnemyListRsp* TGuildGetEnemyListRsp::New() const {
  return new TGuildGetEnemyListRsp;
}

void TGuildGetEnemyListRsp::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<TGuildGetEnemyListRsp*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 47) {
    ZR_(updatetime_, grouptid_);
    triggeruid_ = GOOGLE_ULONGLONG(0);
    if (has_triggeruname()) {
      if (triggeruname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        triggeruname_->clear();
      }
    }
    expiretime_ = GOOGLE_ULONGLONG(0);
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  enemyarr_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TGuildGetEnemyListRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TGuildGetEnemyListRsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 TriggerUid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &triggeruid_)));
          set_has_triggeruid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_TriggerUname;
        break;
      }

      // optional string TriggerUname = 2;
      case 2: {
        if (tag == 18) {
         parse_TriggerUname:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_triggeruname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->triggeruname().data(), this->triggeruname().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "triggeruname");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_GroupTid;
        break;
      }

      // optional uint32 GroupTid = 3;
      case 3: {
        if (tag == 24) {
         parse_GroupTid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &grouptid_)));
          set_has_grouptid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_ExpireTime;
        break;
      }

      // optional uint64 ExpireTime = 4;
      case 4: {
        if (tag == 32) {
         parse_ExpireTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &expiretime_)));
          set_has_expiretime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_EnemyArr;
        break;
      }

      // repeated .pb.TGuildEnemySingle EnemyArr = 5;
      case 5: {
        if (tag == 42) {
         parse_EnemyArr:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_enemyarr()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_EnemyArr;
        if (input->ExpectTag(48)) goto parse_UpdateTime;
        break;
      }

      // optional uint64 UpdateTime = 6;
      case 6: {
        if (tag == 48) {
         parse_UpdateTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &updatetime_)));
          set_has_updatetime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TGuildGetEnemyListRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TGuildGetEnemyListRsp)
  return false;
#undef DO_
}

void TGuildGetEnemyListRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TGuildGetEnemyListRsp)
  // optional uint64 TriggerUid = 1;
  if (has_triggeruid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->triggeruid(), output);
  }

  // optional string TriggerUname = 2;
  if (has_triggeruname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->triggeruname().data(), this->triggeruname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "triggeruname");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->triggeruname(), output);
  }

  // optional uint32 GroupTid = 3;
  if (has_grouptid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->grouptid(), output);
  }

  // optional uint64 ExpireTime = 4;
  if (has_expiretime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->expiretime(), output);
  }

  // repeated .pb.TGuildEnemySingle EnemyArr = 5;
  for (int i = 0; i < this->enemyarr_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->enemyarr(i), output);
  }

  // optional uint64 UpdateTime = 6;
  if (has_updatetime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(6, this->updatetime(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TGuildGetEnemyListRsp)
}

::google::protobuf::uint8* TGuildGetEnemyListRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TGuildGetEnemyListRsp)
  // optional uint64 TriggerUid = 1;
  if (has_triggeruid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->triggeruid(), target);
  }

  // optional string TriggerUname = 2;
  if (has_triggeruname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->triggeruname().data(), this->triggeruname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "triggeruname");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->triggeruname(), target);
  }

  // optional uint32 GroupTid = 3;
  if (has_grouptid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->grouptid(), target);
  }

  // optional uint64 ExpireTime = 4;
  if (has_expiretime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->expiretime(), target);
  }

  // repeated .pb.TGuildEnemySingle EnemyArr = 5;
  for (int i = 0; i < this->enemyarr_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->enemyarr(i), target);
  }

  // optional uint64 UpdateTime = 6;
  if (has_updatetime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(6, this->updatetime(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TGuildGetEnemyListRsp)
  return target;
}

int TGuildGetEnemyListRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 TriggerUid = 1;
    if (has_triggeruid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->triggeruid());
    }

    // optional string TriggerUname = 2;
    if (has_triggeruname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->triggeruname());
    }

    // optional uint32 GroupTid = 3;
    if (has_grouptid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->grouptid());
    }

    // optional uint64 ExpireTime = 4;
    if (has_expiretime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->expiretime());
    }

    // optional uint64 UpdateTime = 6;
    if (has_updatetime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->updatetime());
    }

  }
  // repeated .pb.TGuildEnemySingle EnemyArr = 5;
  total_size += 1 * this->enemyarr_size();
  for (int i = 0; i < this->enemyarr_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->enemyarr(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TGuildGetEnemyListRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TGuildGetEnemyListRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TGuildGetEnemyListRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TGuildGetEnemyListRsp::MergeFrom(const TGuildGetEnemyListRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  enemyarr_.MergeFrom(from.enemyarr_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_triggeruid()) {
      set_triggeruid(from.triggeruid());
    }
    if (from.has_triggeruname()) {
      set_triggeruname(from.triggeruname());
    }
    if (from.has_grouptid()) {
      set_grouptid(from.grouptid());
    }
    if (from.has_expiretime()) {
      set_expiretime(from.expiretime());
    }
    if (from.has_updatetime()) {
      set_updatetime(from.updatetime());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TGuildGetEnemyListRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TGuildGetEnemyListRsp::CopyFrom(const TGuildGetEnemyListRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TGuildGetEnemyListRsp::IsInitialized() const {

  return true;
}

void TGuildGetEnemyListRsp::Swap(TGuildGetEnemyListRsp* other) {
  if (other != this) {
    std::swap(triggeruid_, other->triggeruid_);
    std::swap(triggeruname_, other->triggeruname_);
    std::swap(grouptid_, other->grouptid_);
    std::swap(expiretime_, other->expiretime_);
    enemyarr_.Swap(&other->enemyarr_);
    std::swap(updatetime_, other->updatetime_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TGuildGetEnemyListRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TGuildGetEnemyListRsp_descriptor_;
  metadata.reflection = TGuildGetEnemyListRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TGuildEnemyStartBattleReq::kEnemyIdFieldNumber;
const int TGuildEnemyStartBattleReq::kBattleCheckParamFieldNumber;
#endif  // !_MSC_VER

TGuildEnemyStartBattleReq::TGuildEnemyStartBattleReq()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TGuildEnemyStartBattleReq)
}

void TGuildEnemyStartBattleReq::InitAsDefaultInstance() {
  battlecheckparam_ = const_cast< ::pb::TBattleCheckParam*>(&::pb::TBattleCheckParam::default_instance());
}

TGuildEnemyStartBattleReq::TGuildEnemyStartBattleReq(const TGuildEnemyStartBattleReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TGuildEnemyStartBattleReq)
}

void TGuildEnemyStartBattleReq::SharedCtor() {
  _cached_size_ = 0;
  enemyid_ = 0u;
  battlecheckparam_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TGuildEnemyStartBattleReq::~TGuildEnemyStartBattleReq() {
  // @@protoc_insertion_point(destructor:pb.TGuildEnemyStartBattleReq)
  SharedDtor();
}

void TGuildEnemyStartBattleReq::SharedDtor() {
  if (this != default_instance_) {
    delete battlecheckparam_;
  }
}

void TGuildEnemyStartBattleReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TGuildEnemyStartBattleReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TGuildEnemyStartBattleReq_descriptor_;
}

const TGuildEnemyStartBattleReq& TGuildEnemyStartBattleReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fGuildEnemy_2eproto();
  return *default_instance_;
}

TGuildEnemyStartBattleReq* TGuildEnemyStartBattleReq::default_instance_ = NULL;

TGuildEnemyStartBattleReq* TGuildEnemyStartBattleReq::New() const {
  return new TGuildEnemyStartBattleReq;
}

void TGuildEnemyStartBattleReq::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    enemyid_ = 0u;
    if (has_battlecheckparam()) {
      if (battlecheckparam_ != NULL) battlecheckparam_->::pb::TBattleCheckParam::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TGuildEnemyStartBattleReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TGuildEnemyStartBattleReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 EnemyId = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &enemyid_)));
          set_has_enemyid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_BattleCheckParam;
        break;
      }

      // optional .pb.TBattleCheckParam BattleCheckParam = 2;
      case 2: {
        if (tag == 18) {
         parse_BattleCheckParam:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_battlecheckparam()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TGuildEnemyStartBattleReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TGuildEnemyStartBattleReq)
  return false;
#undef DO_
}

void TGuildEnemyStartBattleReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TGuildEnemyStartBattleReq)
  // optional uint32 EnemyId = 1;
  if (has_enemyid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->enemyid(), output);
  }

  // optional .pb.TBattleCheckParam BattleCheckParam = 2;
  if (has_battlecheckparam()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->battlecheckparam(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TGuildEnemyStartBattleReq)
}

::google::protobuf::uint8* TGuildEnemyStartBattleReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TGuildEnemyStartBattleReq)
  // optional uint32 EnemyId = 1;
  if (has_enemyid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->enemyid(), target);
  }

  // optional .pb.TBattleCheckParam BattleCheckParam = 2;
  if (has_battlecheckparam()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->battlecheckparam(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TGuildEnemyStartBattleReq)
  return target;
}

int TGuildEnemyStartBattleReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 EnemyId = 1;
    if (has_enemyid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->enemyid());
    }

    // optional .pb.TBattleCheckParam BattleCheckParam = 2;
    if (has_battlecheckparam()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->battlecheckparam());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TGuildEnemyStartBattleReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TGuildEnemyStartBattleReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TGuildEnemyStartBattleReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TGuildEnemyStartBattleReq::MergeFrom(const TGuildEnemyStartBattleReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_enemyid()) {
      set_enemyid(from.enemyid());
    }
    if (from.has_battlecheckparam()) {
      mutable_battlecheckparam()->::pb::TBattleCheckParam::MergeFrom(from.battlecheckparam());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TGuildEnemyStartBattleReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TGuildEnemyStartBattleReq::CopyFrom(const TGuildEnemyStartBattleReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TGuildEnemyStartBattleReq::IsInitialized() const {

  return true;
}

void TGuildEnemyStartBattleReq::Swap(TGuildEnemyStartBattleReq* other) {
  if (other != this) {
    std::swap(enemyid_, other->enemyid_);
    std::swap(battlecheckparam_, other->battlecheckparam_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TGuildEnemyStartBattleReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TGuildEnemyStartBattleReq_descriptor_;
  metadata.reflection = TGuildEnemyStartBattleReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TGuildEnemyStartBattleRsp::kUnitArrFieldNumber;
const int TGuildEnemyStartBattleRsp::kBattleArgsFieldNumber;
const int TGuildEnemyStartBattleRsp::kUpdateTimeFieldNumber;
#endif  // !_MSC_VER

TGuildEnemyStartBattleRsp::TGuildEnemyStartBattleRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TGuildEnemyStartBattleRsp)
}

void TGuildEnemyStartBattleRsp::InitAsDefaultInstance() {
  battleargs_ = const_cast< ::pb::TBattleArgs*>(&::pb::TBattleArgs::default_instance());
}

TGuildEnemyStartBattleRsp::TGuildEnemyStartBattleRsp(const TGuildEnemyStartBattleRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TGuildEnemyStartBattleRsp)
}

void TGuildEnemyStartBattleRsp::SharedCtor() {
  _cached_size_ = 0;
  battleargs_ = NULL;
  updatetime_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TGuildEnemyStartBattleRsp::~TGuildEnemyStartBattleRsp() {
  // @@protoc_insertion_point(destructor:pb.TGuildEnemyStartBattleRsp)
  SharedDtor();
}

void TGuildEnemyStartBattleRsp::SharedDtor() {
  if (this != default_instance_) {
    delete battleargs_;
  }
}

void TGuildEnemyStartBattleRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TGuildEnemyStartBattleRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TGuildEnemyStartBattleRsp_descriptor_;
}

const TGuildEnemyStartBattleRsp& TGuildEnemyStartBattleRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fGuildEnemy_2eproto();
  return *default_instance_;
}

TGuildEnemyStartBattleRsp* TGuildEnemyStartBattleRsp::default_instance_ = NULL;

TGuildEnemyStartBattleRsp* TGuildEnemyStartBattleRsp::New() const {
  return new TGuildEnemyStartBattleRsp;
}

void TGuildEnemyStartBattleRsp::Clear() {
  if (_has_bits_[0 / 32] & 6) {
    if (has_battleargs()) {
      if (battleargs_ != NULL) battleargs_->::pb::TBattleArgs::Clear();
    }
    updatetime_ = GOOGLE_ULONGLONG(0);
  }
  unitarr_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TGuildEnemyStartBattleRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TGuildEnemyStartBattleRsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .pb.TGuildEnemyUnit UnitArr = 1;
      case 1: {
        if (tag == 10) {
         parse_UnitArr:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_unitarr()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_UnitArr;
        if (input->ExpectTag(18)) goto parse_BattleArgs;
        break;
      }

      // optional .pb.TBattleArgs BattleArgs = 2;
      case 2: {
        if (tag == 18) {
         parse_BattleArgs:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_battleargs()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_UpdateTime;
        break;
      }

      // optional uint64 UpdateTime = 3;
      case 3: {
        if (tag == 24) {
         parse_UpdateTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &updatetime_)));
          set_has_updatetime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TGuildEnemyStartBattleRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TGuildEnemyStartBattleRsp)
  return false;
#undef DO_
}

void TGuildEnemyStartBattleRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TGuildEnemyStartBattleRsp)
  // repeated .pb.TGuildEnemyUnit UnitArr = 1;
  for (int i = 0; i < this->unitarr_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->unitarr(i), output);
  }

  // optional .pb.TBattleArgs BattleArgs = 2;
  if (has_battleargs()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->battleargs(), output);
  }

  // optional uint64 UpdateTime = 3;
  if (has_updatetime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->updatetime(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TGuildEnemyStartBattleRsp)
}

::google::protobuf::uint8* TGuildEnemyStartBattleRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TGuildEnemyStartBattleRsp)
  // repeated .pb.TGuildEnemyUnit UnitArr = 1;
  for (int i = 0; i < this->unitarr_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->unitarr(i), target);
  }

  // optional .pb.TBattleArgs BattleArgs = 2;
  if (has_battleargs()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->battleargs(), target);
  }

  // optional uint64 UpdateTime = 3;
  if (has_updatetime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->updatetime(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TGuildEnemyStartBattleRsp)
  return target;
}

int TGuildEnemyStartBattleRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // optional .pb.TBattleArgs BattleArgs = 2;
    if (has_battleargs()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->battleargs());
    }

    // optional uint64 UpdateTime = 3;
    if (has_updatetime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->updatetime());
    }

  }
  // repeated .pb.TGuildEnemyUnit UnitArr = 1;
  total_size += 1 * this->unitarr_size();
  for (int i = 0; i < this->unitarr_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->unitarr(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TGuildEnemyStartBattleRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TGuildEnemyStartBattleRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TGuildEnemyStartBattleRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TGuildEnemyStartBattleRsp::MergeFrom(const TGuildEnemyStartBattleRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  unitarr_.MergeFrom(from.unitarr_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_battleargs()) {
      mutable_battleargs()->::pb::TBattleArgs::MergeFrom(from.battleargs());
    }
    if (from.has_updatetime()) {
      set_updatetime(from.updatetime());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TGuildEnemyStartBattleRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TGuildEnemyStartBattleRsp::CopyFrom(const TGuildEnemyStartBattleRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TGuildEnemyStartBattleRsp::IsInitialized() const {

  if (has_battleargs()) {
    if (!this->battleargs().IsInitialized()) return false;
  }
  return true;
}

void TGuildEnemyStartBattleRsp::Swap(TGuildEnemyStartBattleRsp* other) {
  if (other != this) {
    unitarr_.Swap(&other->unitarr_);
    std::swap(battleargs_, other->battleargs_);
    std::swap(updatetime_, other->updatetime_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TGuildEnemyStartBattleRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TGuildEnemyStartBattleRsp_descriptor_;
  metadata.reflection = TGuildEnemyStartBattleRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TGuildEnemyReportBattleReq::kEnemyIdFieldNumber;
const int TGuildEnemyReportBattleReq::kBattleRetFieldNumber;
#endif  // !_MSC_VER

TGuildEnemyReportBattleReq::TGuildEnemyReportBattleReq()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TGuildEnemyReportBattleReq)
}

void TGuildEnemyReportBattleReq::InitAsDefaultInstance() {
  battleret_ = const_cast< ::pb::TBattleResult*>(&::pb::TBattleResult::default_instance());
}

TGuildEnemyReportBattleReq::TGuildEnemyReportBattleReq(const TGuildEnemyReportBattleReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TGuildEnemyReportBattleReq)
}

void TGuildEnemyReportBattleReq::SharedCtor() {
  _cached_size_ = 0;
  enemyid_ = 0u;
  battleret_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TGuildEnemyReportBattleReq::~TGuildEnemyReportBattleReq() {
  // @@protoc_insertion_point(destructor:pb.TGuildEnemyReportBattleReq)
  SharedDtor();
}

void TGuildEnemyReportBattleReq::SharedDtor() {
  if (this != default_instance_) {
    delete battleret_;
  }
}

void TGuildEnemyReportBattleReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TGuildEnemyReportBattleReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TGuildEnemyReportBattleReq_descriptor_;
}

const TGuildEnemyReportBattleReq& TGuildEnemyReportBattleReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fGuildEnemy_2eproto();
  return *default_instance_;
}

TGuildEnemyReportBattleReq* TGuildEnemyReportBattleReq::default_instance_ = NULL;

TGuildEnemyReportBattleReq* TGuildEnemyReportBattleReq::New() const {
  return new TGuildEnemyReportBattleReq;
}

void TGuildEnemyReportBattleReq::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    enemyid_ = 0u;
    if (has_battleret()) {
      if (battleret_ != NULL) battleret_->::pb::TBattleResult::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TGuildEnemyReportBattleReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TGuildEnemyReportBattleReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 EnemyId = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &enemyid_)));
          set_has_enemyid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_BattleRet;
        break;
      }

      // optional .pb.TBattleResult BattleRet = 2;
      case 2: {
        if (tag == 18) {
         parse_BattleRet:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_battleret()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TGuildEnemyReportBattleReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TGuildEnemyReportBattleReq)
  return false;
#undef DO_
}

void TGuildEnemyReportBattleReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TGuildEnemyReportBattleReq)
  // optional uint32 EnemyId = 1;
  if (has_enemyid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->enemyid(), output);
  }

  // optional .pb.TBattleResult BattleRet = 2;
  if (has_battleret()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->battleret(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TGuildEnemyReportBattleReq)
}

::google::protobuf::uint8* TGuildEnemyReportBattleReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TGuildEnemyReportBattleReq)
  // optional uint32 EnemyId = 1;
  if (has_enemyid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->enemyid(), target);
  }

  // optional .pb.TBattleResult BattleRet = 2;
  if (has_battleret()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->battleret(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TGuildEnemyReportBattleReq)
  return target;
}

int TGuildEnemyReportBattleReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 EnemyId = 1;
    if (has_enemyid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->enemyid());
    }

    // optional .pb.TBattleResult BattleRet = 2;
    if (has_battleret()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->battleret());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TGuildEnemyReportBattleReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TGuildEnemyReportBattleReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TGuildEnemyReportBattleReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TGuildEnemyReportBattleReq::MergeFrom(const TGuildEnemyReportBattleReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_enemyid()) {
      set_enemyid(from.enemyid());
    }
    if (from.has_battleret()) {
      mutable_battleret()->::pb::TBattleResult::MergeFrom(from.battleret());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TGuildEnemyReportBattleReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TGuildEnemyReportBattleReq::CopyFrom(const TGuildEnemyReportBattleReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TGuildEnemyReportBattleReq::IsInitialized() const {

  if (has_battleret()) {
    if (!this->battleret().IsInitialized()) return false;
  }
  return true;
}

void TGuildEnemyReportBattleReq::Swap(TGuildEnemyReportBattleReq* other) {
  if (other != this) {
    std::swap(enemyid_, other->enemyid_);
    std::swap(battleret_, other->battleret_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TGuildEnemyReportBattleReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TGuildEnemyReportBattleReq_descriptor_;
  metadata.reflection = TGuildEnemyReportBattleReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TGuildEnemyBuyAtkNumReq::kBuyNumFieldNumber;
#endif  // !_MSC_VER

TGuildEnemyBuyAtkNumReq::TGuildEnemyBuyAtkNumReq()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TGuildEnemyBuyAtkNumReq)
}

void TGuildEnemyBuyAtkNumReq::InitAsDefaultInstance() {
}

TGuildEnemyBuyAtkNumReq::TGuildEnemyBuyAtkNumReq(const TGuildEnemyBuyAtkNumReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TGuildEnemyBuyAtkNumReq)
}

void TGuildEnemyBuyAtkNumReq::SharedCtor() {
  _cached_size_ = 0;
  buynum_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TGuildEnemyBuyAtkNumReq::~TGuildEnemyBuyAtkNumReq() {
  // @@protoc_insertion_point(destructor:pb.TGuildEnemyBuyAtkNumReq)
  SharedDtor();
}

void TGuildEnemyBuyAtkNumReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TGuildEnemyBuyAtkNumReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TGuildEnemyBuyAtkNumReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TGuildEnemyBuyAtkNumReq_descriptor_;
}

const TGuildEnemyBuyAtkNumReq& TGuildEnemyBuyAtkNumReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fGuildEnemy_2eproto();
  return *default_instance_;
}

TGuildEnemyBuyAtkNumReq* TGuildEnemyBuyAtkNumReq::default_instance_ = NULL;

TGuildEnemyBuyAtkNumReq* TGuildEnemyBuyAtkNumReq::New() const {
  return new TGuildEnemyBuyAtkNumReq;
}

void TGuildEnemyBuyAtkNumReq::Clear() {
  buynum_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TGuildEnemyBuyAtkNumReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TGuildEnemyBuyAtkNumReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 BuyNum = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &buynum_)));
          set_has_buynum();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TGuildEnemyBuyAtkNumReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TGuildEnemyBuyAtkNumReq)
  return false;
#undef DO_
}

void TGuildEnemyBuyAtkNumReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TGuildEnemyBuyAtkNumReq)
  // optional uint32 BuyNum = 1;
  if (has_buynum()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->buynum(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TGuildEnemyBuyAtkNumReq)
}

::google::protobuf::uint8* TGuildEnemyBuyAtkNumReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TGuildEnemyBuyAtkNumReq)
  // optional uint32 BuyNum = 1;
  if (has_buynum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->buynum(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TGuildEnemyBuyAtkNumReq)
  return target;
}

int TGuildEnemyBuyAtkNumReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 BuyNum = 1;
    if (has_buynum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->buynum());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TGuildEnemyBuyAtkNumReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TGuildEnemyBuyAtkNumReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TGuildEnemyBuyAtkNumReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TGuildEnemyBuyAtkNumReq::MergeFrom(const TGuildEnemyBuyAtkNumReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_buynum()) {
      set_buynum(from.buynum());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TGuildEnemyBuyAtkNumReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TGuildEnemyBuyAtkNumReq::CopyFrom(const TGuildEnemyBuyAtkNumReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TGuildEnemyBuyAtkNumReq::IsInitialized() const {

  return true;
}

void TGuildEnemyBuyAtkNumReq::Swap(TGuildEnemyBuyAtkNumReq* other) {
  if (other != this) {
    std::swap(buynum_, other->buynum_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TGuildEnemyBuyAtkNumReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TGuildEnemyBuyAtkNumReq_descriptor_;
  metadata.reflection = TGuildEnemyBuyAtkNumReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TGuildUpdateEnemyNotify::kTriggerUidFieldNumber;
const int TGuildUpdateEnemyNotify::kTriggerUnameFieldNumber;
const int TGuildUpdateEnemyNotify::kGroupTidFieldNumber;
const int TGuildUpdateEnemyNotify::kExpireTimeFieldNumber;
const int TGuildUpdateEnemyNotify::kEnemyArrFieldNumber;
const int TGuildUpdateEnemyNotify::kUpdateTimeFieldNumber;
#endif  // !_MSC_VER

TGuildUpdateEnemyNotify::TGuildUpdateEnemyNotify()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TGuildUpdateEnemyNotify)
}

void TGuildUpdateEnemyNotify::InitAsDefaultInstance() {
}

TGuildUpdateEnemyNotify::TGuildUpdateEnemyNotify(const TGuildUpdateEnemyNotify& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TGuildUpdateEnemyNotify)
}

void TGuildUpdateEnemyNotify::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  triggeruid_ = GOOGLE_ULONGLONG(0);
  triggeruname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  grouptid_ = 0u;
  expiretime_ = GOOGLE_ULONGLONG(0);
  updatetime_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TGuildUpdateEnemyNotify::~TGuildUpdateEnemyNotify() {
  // @@protoc_insertion_point(destructor:pb.TGuildUpdateEnemyNotify)
  SharedDtor();
}

void TGuildUpdateEnemyNotify::SharedDtor() {
  if (triggeruname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete triggeruname_;
  }
  if (this != default_instance_) {
  }
}

void TGuildUpdateEnemyNotify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TGuildUpdateEnemyNotify::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TGuildUpdateEnemyNotify_descriptor_;
}

const TGuildUpdateEnemyNotify& TGuildUpdateEnemyNotify::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fGuildEnemy_2eproto();
  return *default_instance_;
}

TGuildUpdateEnemyNotify* TGuildUpdateEnemyNotify::default_instance_ = NULL;

TGuildUpdateEnemyNotify* TGuildUpdateEnemyNotify::New() const {
  return new TGuildUpdateEnemyNotify;
}

void TGuildUpdateEnemyNotify::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<TGuildUpdateEnemyNotify*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 47) {
    ZR_(updatetime_, grouptid_);
    triggeruid_ = GOOGLE_ULONGLONG(0);
    if (has_triggeruname()) {
      if (triggeruname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        triggeruname_->clear();
      }
    }
    expiretime_ = GOOGLE_ULONGLONG(0);
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  enemyarr_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TGuildUpdateEnemyNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TGuildUpdateEnemyNotify)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 TriggerUid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &triggeruid_)));
          set_has_triggeruid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_TriggerUname;
        break;
      }

      // optional string TriggerUname = 2;
      case 2: {
        if (tag == 18) {
         parse_TriggerUname:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_triggeruname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->triggeruname().data(), this->triggeruname().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "triggeruname");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_GroupTid;
        break;
      }

      // optional uint32 GroupTid = 3;
      case 3: {
        if (tag == 24) {
         parse_GroupTid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &grouptid_)));
          set_has_grouptid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_ExpireTime;
        break;
      }

      // optional uint64 ExpireTime = 4;
      case 4: {
        if (tag == 32) {
         parse_ExpireTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &expiretime_)));
          set_has_expiretime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_EnemyArr;
        break;
      }

      // repeated .pb.TGuildEnemySingle EnemyArr = 5;
      case 5: {
        if (tag == 42) {
         parse_EnemyArr:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_enemyarr()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_EnemyArr;
        if (input->ExpectTag(48)) goto parse_UpdateTime;
        break;
      }

      // optional uint64 UpdateTime = 6;
      case 6: {
        if (tag == 48) {
         parse_UpdateTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &updatetime_)));
          set_has_updatetime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TGuildUpdateEnemyNotify)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TGuildUpdateEnemyNotify)
  return false;
#undef DO_
}

void TGuildUpdateEnemyNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TGuildUpdateEnemyNotify)
  // optional uint64 TriggerUid = 1;
  if (has_triggeruid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->triggeruid(), output);
  }

  // optional string TriggerUname = 2;
  if (has_triggeruname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->triggeruname().data(), this->triggeruname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "triggeruname");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->triggeruname(), output);
  }

  // optional uint32 GroupTid = 3;
  if (has_grouptid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->grouptid(), output);
  }

  // optional uint64 ExpireTime = 4;
  if (has_expiretime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->expiretime(), output);
  }

  // repeated .pb.TGuildEnemySingle EnemyArr = 5;
  for (int i = 0; i < this->enemyarr_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->enemyarr(i), output);
  }

  // optional uint64 UpdateTime = 6;
  if (has_updatetime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(6, this->updatetime(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TGuildUpdateEnemyNotify)
}

::google::protobuf::uint8* TGuildUpdateEnemyNotify::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TGuildUpdateEnemyNotify)
  // optional uint64 TriggerUid = 1;
  if (has_triggeruid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->triggeruid(), target);
  }

  // optional string TriggerUname = 2;
  if (has_triggeruname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->triggeruname().data(), this->triggeruname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "triggeruname");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->triggeruname(), target);
  }

  // optional uint32 GroupTid = 3;
  if (has_grouptid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->grouptid(), target);
  }

  // optional uint64 ExpireTime = 4;
  if (has_expiretime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->expiretime(), target);
  }

  // repeated .pb.TGuildEnemySingle EnemyArr = 5;
  for (int i = 0; i < this->enemyarr_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->enemyarr(i), target);
  }

  // optional uint64 UpdateTime = 6;
  if (has_updatetime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(6, this->updatetime(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TGuildUpdateEnemyNotify)
  return target;
}

int TGuildUpdateEnemyNotify::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 TriggerUid = 1;
    if (has_triggeruid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->triggeruid());
    }

    // optional string TriggerUname = 2;
    if (has_triggeruname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->triggeruname());
    }

    // optional uint32 GroupTid = 3;
    if (has_grouptid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->grouptid());
    }

    // optional uint64 ExpireTime = 4;
    if (has_expiretime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->expiretime());
    }

    // optional uint64 UpdateTime = 6;
    if (has_updatetime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->updatetime());
    }

  }
  // repeated .pb.TGuildEnemySingle EnemyArr = 5;
  total_size += 1 * this->enemyarr_size();
  for (int i = 0; i < this->enemyarr_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->enemyarr(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TGuildUpdateEnemyNotify::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TGuildUpdateEnemyNotify* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TGuildUpdateEnemyNotify*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TGuildUpdateEnemyNotify::MergeFrom(const TGuildUpdateEnemyNotify& from) {
  GOOGLE_CHECK_NE(&from, this);
  enemyarr_.MergeFrom(from.enemyarr_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_triggeruid()) {
      set_triggeruid(from.triggeruid());
    }
    if (from.has_triggeruname()) {
      set_triggeruname(from.triggeruname());
    }
    if (from.has_grouptid()) {
      set_grouptid(from.grouptid());
    }
    if (from.has_expiretime()) {
      set_expiretime(from.expiretime());
    }
    if (from.has_updatetime()) {
      set_updatetime(from.updatetime());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TGuildUpdateEnemyNotify::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TGuildUpdateEnemyNotify::CopyFrom(const TGuildUpdateEnemyNotify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TGuildUpdateEnemyNotify::IsInitialized() const {

  return true;
}

void TGuildUpdateEnemyNotify::Swap(TGuildUpdateEnemyNotify* other) {
  if (other != this) {
    std::swap(triggeruid_, other->triggeruid_);
    std::swap(triggeruname_, other->triggeruname_);
    std::swap(grouptid_, other->grouptid_);
    std::swap(expiretime_, other->expiretime_);
    enemyarr_.Swap(&other->enemyarr_);
    std::swap(updatetime_, other->updatetime_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TGuildUpdateEnemyNotify::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TGuildUpdateEnemyNotify_descriptor_;
  metadata.reflection = TGuildUpdateEnemyNotify_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace pb

// @@protoc_insertion_point(global_scope)
