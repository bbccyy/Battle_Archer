// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: module/SceneGridData.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "module/SceneGridData.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace pb {

namespace {

const ::google::protobuf::Descriptor* GridAreaInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GridAreaInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* GridObstacleInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GridObstacleInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* GridMistyInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GridMistyInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* GridNodeInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GridNodeInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* SceneGridData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SceneGridData_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_module_2fSceneGridData_2eproto() {
  protobuf_AddDesc_module_2fSceneGridData_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "module/SceneGridData.proto");
  GOOGLE_CHECK(file != NULL);
  GridAreaInfo_descriptor_ = file->message_type(0);
  static const int GridAreaInfo_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GridAreaInfo, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GridAreaInfo, areatype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GridAreaInfo, gridindexarr_),
  };
  GridAreaInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GridAreaInfo_descriptor_,
      GridAreaInfo::default_instance_,
      GridAreaInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GridAreaInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GridAreaInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GridAreaInfo));
  GridObstacleInfo_descriptor_ = file->message_type(1);
  static const int GridObstacleInfo_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GridObstacleInfo, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GridObstacleInfo, gridindexarr_),
  };
  GridObstacleInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GridObstacleInfo_descriptor_,
      GridObstacleInfo::default_instance_,
      GridObstacleInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GridObstacleInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GridObstacleInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GridObstacleInfo));
  GridMistyInfo_descriptor_ = file->message_type(2);
  static const int GridMistyInfo_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GridMistyInfo, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GridMistyInfo, gridindexarr_),
  };
  GridMistyInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GridMistyInfo_descriptor_,
      GridMistyInfo::default_instance_,
      GridMistyInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GridMistyInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GridMistyInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GridMistyInfo));
  GridNodeInfo_descriptor_ = file->message_type(3);
  static const int GridNodeInfo_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GridNodeInfo, index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GridNodeInfo, gridflag_),
  };
  GridNodeInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GridNodeInfo_descriptor_,
      GridNodeInfo::default_instance_,
      GridNodeInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GridNodeInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GridNodeInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GridNodeInfo));
  SceneGridData_descriptor_ = file->message_type(4);
  static const int SceneGridData_offsets_[9] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SceneGridData, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SceneGridData, sceneconfname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SceneGridData, gridsize_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SceneGridData, nodesize_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SceneGridData, origin_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SceneGridData, areainfoarr_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SceneGridData, obstacleinfoarr_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SceneGridData, gridnodearr_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SceneGridData, mistyinfoarr_),
  };
  SceneGridData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SceneGridData_descriptor_,
      SceneGridData::default_instance_,
      SceneGridData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SceneGridData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SceneGridData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SceneGridData));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_module_2fSceneGridData_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GridAreaInfo_descriptor_, &GridAreaInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GridObstacleInfo_descriptor_, &GridObstacleInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GridMistyInfo_descriptor_, &GridMistyInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GridNodeInfo_descriptor_, &GridNodeInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SceneGridData_descriptor_, &SceneGridData::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_module_2fSceneGridData_2eproto() {
  delete GridAreaInfo::default_instance_;
  delete GridAreaInfo_reflection_;
  delete GridObstacleInfo::default_instance_;
  delete GridObstacleInfo_reflection_;
  delete GridMistyInfo::default_instance_;
  delete GridMistyInfo_reflection_;
  delete GridNodeInfo::default_instance_;
  delete GridNodeInfo_reflection_;
  delete SceneGridData::default_instance_;
  delete SceneGridData_reflection_;
}

void protobuf_AddDesc_module_2fSceneGridData_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::pb::protobuf_AddDesc_module_2fUtil_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\032module/SceneGridData.proto\022\002pb\032\021module"
    "/Util.proto\"D\n\014GridAreaInfo\022\014\n\004Name\030\001 \001("
    "\t\022\020\n\010AreaType\030\002 \001(\r\022\024\n\014GridIndexArr\030\003 \003("
    "\r\"6\n\020GridObstacleInfo\022\014\n\004Name\030\001 \001(\t\022\024\n\014G"
    "ridIndexArr\030\002 \003(\r\"3\n\rGridMistyInfo\022\014\n\004Na"
    "me\030\001 \001(\t\022\024\n\014GridIndexArr\030\002 \003(\r\"/\n\014GridNo"
    "deInfo\022\r\n\005Index\030\001 \001(\r\022\020\n\010GridFlag\030\002 \001(\r\""
    "\305\002\n\rSceneGridData\022\n\n\002Id\030\001 \001(\005\022\025\n\rSceneCo"
    "nfName\030\002 \001(\t\022#\n\010GridSize\030\003 \001(\0132\021.pb.PbVe"
    "ctor2_Int\022#\n\010NodeSize\030\004 \001(\0132\021.pb.PbVecto"
    "r2_Int\022!\n\006Origin\030\005 \001(\0132\021.pb.PbVector2_In"
    "t\022%\n\013AreaInfoArr\030\006 \003(\0132\020.pb.GridAreaInfo"
    "\022-\n\017ObstacleInfoArr\030\007 \003(\0132\024.pb.GridObsta"
    "cleInfo\022%\n\013GridNodeArr\030\010 \003(\0132\020.pb.GridNo"
    "deInfo\022\'\n\014MistyInfoArr\030\t \003(\0132\021.pb.GridMi"
    "styInfo", 607);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "module/SceneGridData.proto", &protobuf_RegisterTypes);
  GridAreaInfo::default_instance_ = new GridAreaInfo();
  GridObstacleInfo::default_instance_ = new GridObstacleInfo();
  GridMistyInfo::default_instance_ = new GridMistyInfo();
  GridNodeInfo::default_instance_ = new GridNodeInfo();
  SceneGridData::default_instance_ = new SceneGridData();
  GridAreaInfo::default_instance_->InitAsDefaultInstance();
  GridObstacleInfo::default_instance_->InitAsDefaultInstance();
  GridMistyInfo::default_instance_->InitAsDefaultInstance();
  GridNodeInfo::default_instance_->InitAsDefaultInstance();
  SceneGridData::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_module_2fSceneGridData_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_module_2fSceneGridData_2eproto {
  StaticDescriptorInitializer_module_2fSceneGridData_2eproto() {
    protobuf_AddDesc_module_2fSceneGridData_2eproto();
  }
} static_descriptor_initializer_module_2fSceneGridData_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int GridAreaInfo::kNameFieldNumber;
const int GridAreaInfo::kAreaTypeFieldNumber;
const int GridAreaInfo::kGridIndexArrFieldNumber;
#endif  // !_MSC_VER

GridAreaInfo::GridAreaInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.GridAreaInfo)
}

void GridAreaInfo::InitAsDefaultInstance() {
}

GridAreaInfo::GridAreaInfo(const GridAreaInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.GridAreaInfo)
}

void GridAreaInfo::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  areatype_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GridAreaInfo::~GridAreaInfo() {
  // @@protoc_insertion_point(destructor:pb.GridAreaInfo)
  SharedDtor();
}

void GridAreaInfo::SharedDtor() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void GridAreaInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GridAreaInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GridAreaInfo_descriptor_;
}

const GridAreaInfo& GridAreaInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_module_2fSceneGridData_2eproto();
  return *default_instance_;
}

GridAreaInfo* GridAreaInfo::default_instance_ = NULL;

GridAreaInfo* GridAreaInfo::New() const {
  return new GridAreaInfo;
}

void GridAreaInfo::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        name_->clear();
      }
    }
    areatype_ = 0u;
  }
  gridindexarr_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GridAreaInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.GridAreaInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string Name = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_AreaType;
        break;
      }

      // optional uint32 AreaType = 2;
      case 2: {
        if (tag == 16) {
         parse_AreaType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &areatype_)));
          set_has_areatype();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_GridIndexArr;
        break;
      }

      // repeated uint32 GridIndexArr = 3;
      case 3: {
        if (tag == 24) {
         parse_GridIndexArr:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 24, input, this->mutable_gridindexarr())));
        } else if (tag == 26) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_gridindexarr())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_GridIndexArr;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.GridAreaInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.GridAreaInfo)
  return false;
#undef DO_
}

void GridAreaInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.GridAreaInfo)
  // optional string Name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // optional uint32 AreaType = 2;
  if (has_areatype()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->areatype(), output);
  }

  // repeated uint32 GridIndexArr = 3;
  for (int i = 0; i < this->gridindexarr_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      3, this->gridindexarr(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.GridAreaInfo)
}

::google::protobuf::uint8* GridAreaInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.GridAreaInfo)
  // optional string Name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // optional uint32 AreaType = 2;
  if (has_areatype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->areatype(), target);
  }

  // repeated uint32 GridIndexArr = 3;
  for (int i = 0; i < this->gridindexarr_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(3, this->gridindexarr(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.GridAreaInfo)
  return target;
}

int GridAreaInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string Name = 1;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional uint32 AreaType = 2;
    if (has_areatype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->areatype());
    }

  }
  // repeated uint32 GridIndexArr = 3;
  {
    int data_size = 0;
    for (int i = 0; i < this->gridindexarr_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->gridindexarr(i));
    }
    total_size += 1 * this->gridindexarr_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GridAreaInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GridAreaInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GridAreaInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GridAreaInfo::MergeFrom(const GridAreaInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  gridindexarr_.MergeFrom(from.gridindexarr_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_areatype()) {
      set_areatype(from.areatype());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GridAreaInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GridAreaInfo::CopyFrom(const GridAreaInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GridAreaInfo::IsInitialized() const {

  return true;
}

void GridAreaInfo::Swap(GridAreaInfo* other) {
  if (other != this) {
    std::swap(name_, other->name_);
    std::swap(areatype_, other->areatype_);
    gridindexarr_.Swap(&other->gridindexarr_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GridAreaInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GridAreaInfo_descriptor_;
  metadata.reflection = GridAreaInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GridObstacleInfo::kNameFieldNumber;
const int GridObstacleInfo::kGridIndexArrFieldNumber;
#endif  // !_MSC_VER

GridObstacleInfo::GridObstacleInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.GridObstacleInfo)
}

void GridObstacleInfo::InitAsDefaultInstance() {
}

GridObstacleInfo::GridObstacleInfo(const GridObstacleInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.GridObstacleInfo)
}

void GridObstacleInfo::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GridObstacleInfo::~GridObstacleInfo() {
  // @@protoc_insertion_point(destructor:pb.GridObstacleInfo)
  SharedDtor();
}

void GridObstacleInfo::SharedDtor() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void GridObstacleInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GridObstacleInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GridObstacleInfo_descriptor_;
}

const GridObstacleInfo& GridObstacleInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_module_2fSceneGridData_2eproto();
  return *default_instance_;
}

GridObstacleInfo* GridObstacleInfo::default_instance_ = NULL;

GridObstacleInfo* GridObstacleInfo::New() const {
  return new GridObstacleInfo;
}

void GridObstacleInfo::Clear() {
  if (has_name()) {
    if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
      name_->clear();
    }
  }
  gridindexarr_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GridObstacleInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.GridObstacleInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string Name = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_GridIndexArr;
        break;
      }

      // repeated uint32 GridIndexArr = 2;
      case 2: {
        if (tag == 16) {
         parse_GridIndexArr:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 16, input, this->mutable_gridindexarr())));
        } else if (tag == 18) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_gridindexarr())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_GridIndexArr;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.GridObstacleInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.GridObstacleInfo)
  return false;
#undef DO_
}

void GridObstacleInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.GridObstacleInfo)
  // optional string Name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // repeated uint32 GridIndexArr = 2;
  for (int i = 0; i < this->gridindexarr_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      2, this->gridindexarr(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.GridObstacleInfo)
}

::google::protobuf::uint8* GridObstacleInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.GridObstacleInfo)
  // optional string Name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // repeated uint32 GridIndexArr = 2;
  for (int i = 0; i < this->gridindexarr_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(2, this->gridindexarr(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.GridObstacleInfo)
  return target;
}

int GridObstacleInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string Name = 1;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

  }
  // repeated uint32 GridIndexArr = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->gridindexarr_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->gridindexarr(i));
    }
    total_size += 1 * this->gridindexarr_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GridObstacleInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GridObstacleInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GridObstacleInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GridObstacleInfo::MergeFrom(const GridObstacleInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  gridindexarr_.MergeFrom(from.gridindexarr_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_name()) {
      set_name(from.name());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GridObstacleInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GridObstacleInfo::CopyFrom(const GridObstacleInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GridObstacleInfo::IsInitialized() const {

  return true;
}

void GridObstacleInfo::Swap(GridObstacleInfo* other) {
  if (other != this) {
    std::swap(name_, other->name_);
    gridindexarr_.Swap(&other->gridindexarr_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GridObstacleInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GridObstacleInfo_descriptor_;
  metadata.reflection = GridObstacleInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GridMistyInfo::kNameFieldNumber;
const int GridMistyInfo::kGridIndexArrFieldNumber;
#endif  // !_MSC_VER

GridMistyInfo::GridMistyInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.GridMistyInfo)
}

void GridMistyInfo::InitAsDefaultInstance() {
}

GridMistyInfo::GridMistyInfo(const GridMistyInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.GridMistyInfo)
}

void GridMistyInfo::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GridMistyInfo::~GridMistyInfo() {
  // @@protoc_insertion_point(destructor:pb.GridMistyInfo)
  SharedDtor();
}

void GridMistyInfo::SharedDtor() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void GridMistyInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GridMistyInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GridMistyInfo_descriptor_;
}

const GridMistyInfo& GridMistyInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_module_2fSceneGridData_2eproto();
  return *default_instance_;
}

GridMistyInfo* GridMistyInfo::default_instance_ = NULL;

GridMistyInfo* GridMistyInfo::New() const {
  return new GridMistyInfo;
}

void GridMistyInfo::Clear() {
  if (has_name()) {
    if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
      name_->clear();
    }
  }
  gridindexarr_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GridMistyInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.GridMistyInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string Name = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_GridIndexArr;
        break;
      }

      // repeated uint32 GridIndexArr = 2;
      case 2: {
        if (tag == 16) {
         parse_GridIndexArr:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 16, input, this->mutable_gridindexarr())));
        } else if (tag == 18) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_gridindexarr())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_GridIndexArr;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.GridMistyInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.GridMistyInfo)
  return false;
#undef DO_
}

void GridMistyInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.GridMistyInfo)
  // optional string Name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // repeated uint32 GridIndexArr = 2;
  for (int i = 0; i < this->gridindexarr_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      2, this->gridindexarr(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.GridMistyInfo)
}

::google::protobuf::uint8* GridMistyInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.GridMistyInfo)
  // optional string Name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // repeated uint32 GridIndexArr = 2;
  for (int i = 0; i < this->gridindexarr_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(2, this->gridindexarr(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.GridMistyInfo)
  return target;
}

int GridMistyInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string Name = 1;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

  }
  // repeated uint32 GridIndexArr = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->gridindexarr_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->gridindexarr(i));
    }
    total_size += 1 * this->gridindexarr_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GridMistyInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GridMistyInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GridMistyInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GridMistyInfo::MergeFrom(const GridMistyInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  gridindexarr_.MergeFrom(from.gridindexarr_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_name()) {
      set_name(from.name());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GridMistyInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GridMistyInfo::CopyFrom(const GridMistyInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GridMistyInfo::IsInitialized() const {

  return true;
}

void GridMistyInfo::Swap(GridMistyInfo* other) {
  if (other != this) {
    std::swap(name_, other->name_);
    gridindexarr_.Swap(&other->gridindexarr_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GridMistyInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GridMistyInfo_descriptor_;
  metadata.reflection = GridMistyInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GridNodeInfo::kIndexFieldNumber;
const int GridNodeInfo::kGridFlagFieldNumber;
#endif  // !_MSC_VER

GridNodeInfo::GridNodeInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.GridNodeInfo)
}

void GridNodeInfo::InitAsDefaultInstance() {
}

GridNodeInfo::GridNodeInfo(const GridNodeInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.GridNodeInfo)
}

void GridNodeInfo::SharedCtor() {
  _cached_size_ = 0;
  index_ = 0u;
  gridflag_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GridNodeInfo::~GridNodeInfo() {
  // @@protoc_insertion_point(destructor:pb.GridNodeInfo)
  SharedDtor();
}

void GridNodeInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GridNodeInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GridNodeInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GridNodeInfo_descriptor_;
}

const GridNodeInfo& GridNodeInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_module_2fSceneGridData_2eproto();
  return *default_instance_;
}

GridNodeInfo* GridNodeInfo::default_instance_ = NULL;

GridNodeInfo* GridNodeInfo::New() const {
  return new GridNodeInfo;
}

void GridNodeInfo::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<GridNodeInfo*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(index_, gridflag_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GridNodeInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.GridNodeInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 Index = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &index_)));
          set_has_index();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_GridFlag;
        break;
      }

      // optional uint32 GridFlag = 2;
      case 2: {
        if (tag == 16) {
         parse_GridFlag:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &gridflag_)));
          set_has_gridflag();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.GridNodeInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.GridNodeInfo)
  return false;
#undef DO_
}

void GridNodeInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.GridNodeInfo)
  // optional uint32 Index = 1;
  if (has_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->index(), output);
  }

  // optional uint32 GridFlag = 2;
  if (has_gridflag()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->gridflag(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.GridNodeInfo)
}

::google::protobuf::uint8* GridNodeInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.GridNodeInfo)
  // optional uint32 Index = 1;
  if (has_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->index(), target);
  }

  // optional uint32 GridFlag = 2;
  if (has_gridflag()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->gridflag(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.GridNodeInfo)
  return target;
}

int GridNodeInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 Index = 1;
    if (has_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->index());
    }

    // optional uint32 GridFlag = 2;
    if (has_gridflag()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->gridflag());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GridNodeInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GridNodeInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GridNodeInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GridNodeInfo::MergeFrom(const GridNodeInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_index()) {
      set_index(from.index());
    }
    if (from.has_gridflag()) {
      set_gridflag(from.gridflag());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GridNodeInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GridNodeInfo::CopyFrom(const GridNodeInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GridNodeInfo::IsInitialized() const {

  return true;
}

void GridNodeInfo::Swap(GridNodeInfo* other) {
  if (other != this) {
    std::swap(index_, other->index_);
    std::swap(gridflag_, other->gridflag_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GridNodeInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GridNodeInfo_descriptor_;
  metadata.reflection = GridNodeInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SceneGridData::kIdFieldNumber;
const int SceneGridData::kSceneConfNameFieldNumber;
const int SceneGridData::kGridSizeFieldNumber;
const int SceneGridData::kNodeSizeFieldNumber;
const int SceneGridData::kOriginFieldNumber;
const int SceneGridData::kAreaInfoArrFieldNumber;
const int SceneGridData::kObstacleInfoArrFieldNumber;
const int SceneGridData::kGridNodeArrFieldNumber;
const int SceneGridData::kMistyInfoArrFieldNumber;
#endif  // !_MSC_VER

SceneGridData::SceneGridData()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.SceneGridData)
}

void SceneGridData::InitAsDefaultInstance() {
  gridsize_ = const_cast< ::pb::PbVector2_Int*>(&::pb::PbVector2_Int::default_instance());
  nodesize_ = const_cast< ::pb::PbVector2_Int*>(&::pb::PbVector2_Int::default_instance());
  origin_ = const_cast< ::pb::PbVector2_Int*>(&::pb::PbVector2_Int::default_instance());
}

SceneGridData::SceneGridData(const SceneGridData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.SceneGridData)
}

void SceneGridData::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  id_ = 0;
  sceneconfname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  gridsize_ = NULL;
  nodesize_ = NULL;
  origin_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SceneGridData::~SceneGridData() {
  // @@protoc_insertion_point(destructor:pb.SceneGridData)
  SharedDtor();
}

void SceneGridData::SharedDtor() {
  if (sceneconfname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete sceneconfname_;
  }
  if (this != default_instance_) {
    delete gridsize_;
    delete nodesize_;
    delete origin_;
  }
}

void SceneGridData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SceneGridData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SceneGridData_descriptor_;
}

const SceneGridData& SceneGridData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_module_2fSceneGridData_2eproto();
  return *default_instance_;
}

SceneGridData* SceneGridData::default_instance_ = NULL;

SceneGridData* SceneGridData::New() const {
  return new SceneGridData;
}

void SceneGridData::Clear() {
  if (_has_bits_[0 / 32] & 31) {
    id_ = 0;
    if (has_sceneconfname()) {
      if (sceneconfname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        sceneconfname_->clear();
      }
    }
    if (has_gridsize()) {
      if (gridsize_ != NULL) gridsize_->::pb::PbVector2_Int::Clear();
    }
    if (has_nodesize()) {
      if (nodesize_ != NULL) nodesize_->::pb::PbVector2_Int::Clear();
    }
    if (has_origin()) {
      if (origin_ != NULL) origin_->::pb::PbVector2_Int::Clear();
    }
  }
  areainfoarr_.Clear();
  obstacleinfoarr_.Clear();
  gridnodearr_.Clear();
  mistyinfoarr_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SceneGridData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.SceneGridData)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 Id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_SceneConfName;
        break;
      }

      // optional string SceneConfName = 2;
      case 2: {
        if (tag == 18) {
         parse_SceneConfName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_sceneconfname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->sceneconfname().data(), this->sceneconfname().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "sceneconfname");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_GridSize;
        break;
      }

      // optional .pb.PbVector2_Int GridSize = 3;
      case 3: {
        if (tag == 26) {
         parse_GridSize:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_gridsize()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_NodeSize;
        break;
      }

      // optional .pb.PbVector2_Int NodeSize = 4;
      case 4: {
        if (tag == 34) {
         parse_NodeSize:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_nodesize()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_Origin;
        break;
      }

      // optional .pb.PbVector2_Int Origin = 5;
      case 5: {
        if (tag == 42) {
         parse_Origin:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_origin()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_AreaInfoArr;
        break;
      }

      // repeated .pb.GridAreaInfo AreaInfoArr = 6;
      case 6: {
        if (tag == 50) {
         parse_AreaInfoArr:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_areainfoarr()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_AreaInfoArr;
        if (input->ExpectTag(58)) goto parse_ObstacleInfoArr;
        break;
      }

      // repeated .pb.GridObstacleInfo ObstacleInfoArr = 7;
      case 7: {
        if (tag == 58) {
         parse_ObstacleInfoArr:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_obstacleinfoarr()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_ObstacleInfoArr;
        if (input->ExpectTag(66)) goto parse_GridNodeArr;
        break;
      }

      // repeated .pb.GridNodeInfo GridNodeArr = 8;
      case 8: {
        if (tag == 66) {
         parse_GridNodeArr:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_gridnodearr()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_GridNodeArr;
        if (input->ExpectTag(74)) goto parse_MistyInfoArr;
        break;
      }

      // repeated .pb.GridMistyInfo MistyInfoArr = 9;
      case 9: {
        if (tag == 74) {
         parse_MistyInfoArr:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_mistyinfoarr()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(74)) goto parse_MistyInfoArr;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.SceneGridData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.SceneGridData)
  return false;
#undef DO_
}

void SceneGridData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.SceneGridData)
  // optional int32 Id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // optional string SceneConfName = 2;
  if (has_sceneconfname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->sceneconfname().data(), this->sceneconfname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "sceneconfname");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->sceneconfname(), output);
  }

  // optional .pb.PbVector2_Int GridSize = 3;
  if (has_gridsize()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->gridsize(), output);
  }

  // optional .pb.PbVector2_Int NodeSize = 4;
  if (has_nodesize()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->nodesize(), output);
  }

  // optional .pb.PbVector2_Int Origin = 5;
  if (has_origin()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->origin(), output);
  }

  // repeated .pb.GridAreaInfo AreaInfoArr = 6;
  for (int i = 0; i < this->areainfoarr_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->areainfoarr(i), output);
  }

  // repeated .pb.GridObstacleInfo ObstacleInfoArr = 7;
  for (int i = 0; i < this->obstacleinfoarr_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->obstacleinfoarr(i), output);
  }

  // repeated .pb.GridNodeInfo GridNodeArr = 8;
  for (int i = 0; i < this->gridnodearr_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, this->gridnodearr(i), output);
  }

  // repeated .pb.GridMistyInfo MistyInfoArr = 9;
  for (int i = 0; i < this->mistyinfoarr_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, this->mistyinfoarr(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.SceneGridData)
}

::google::protobuf::uint8* SceneGridData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.SceneGridData)
  // optional int32 Id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // optional string SceneConfName = 2;
  if (has_sceneconfname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->sceneconfname().data(), this->sceneconfname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "sceneconfname");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->sceneconfname(), target);
  }

  // optional .pb.PbVector2_Int GridSize = 3;
  if (has_gridsize()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->gridsize(), target);
  }

  // optional .pb.PbVector2_Int NodeSize = 4;
  if (has_nodesize()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->nodesize(), target);
  }

  // optional .pb.PbVector2_Int Origin = 5;
  if (has_origin()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->origin(), target);
  }

  // repeated .pb.GridAreaInfo AreaInfoArr = 6;
  for (int i = 0; i < this->areainfoarr_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->areainfoarr(i), target);
  }

  // repeated .pb.GridObstacleInfo ObstacleInfoArr = 7;
  for (int i = 0; i < this->obstacleinfoarr_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->obstacleinfoarr(i), target);
  }

  // repeated .pb.GridNodeInfo GridNodeArr = 8;
  for (int i = 0; i < this->gridnodearr_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        8, this->gridnodearr(i), target);
  }

  // repeated .pb.GridMistyInfo MistyInfoArr = 9;
  for (int i = 0; i < this->mistyinfoarr_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        9, this->mistyinfoarr(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.SceneGridData)
  return target;
}

int SceneGridData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 Id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

    // optional string SceneConfName = 2;
    if (has_sceneconfname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->sceneconfname());
    }

    // optional .pb.PbVector2_Int GridSize = 3;
    if (has_gridsize()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->gridsize());
    }

    // optional .pb.PbVector2_Int NodeSize = 4;
    if (has_nodesize()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->nodesize());
    }

    // optional .pb.PbVector2_Int Origin = 5;
    if (has_origin()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->origin());
    }

  }
  // repeated .pb.GridAreaInfo AreaInfoArr = 6;
  total_size += 1 * this->areainfoarr_size();
  for (int i = 0; i < this->areainfoarr_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->areainfoarr(i));
  }

  // repeated .pb.GridObstacleInfo ObstacleInfoArr = 7;
  total_size += 1 * this->obstacleinfoarr_size();
  for (int i = 0; i < this->obstacleinfoarr_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->obstacleinfoarr(i));
  }

  // repeated .pb.GridNodeInfo GridNodeArr = 8;
  total_size += 1 * this->gridnodearr_size();
  for (int i = 0; i < this->gridnodearr_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->gridnodearr(i));
  }

  // repeated .pb.GridMistyInfo MistyInfoArr = 9;
  total_size += 1 * this->mistyinfoarr_size();
  for (int i = 0; i < this->mistyinfoarr_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->mistyinfoarr(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SceneGridData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SceneGridData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SceneGridData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SceneGridData::MergeFrom(const SceneGridData& from) {
  GOOGLE_CHECK_NE(&from, this);
  areainfoarr_.MergeFrom(from.areainfoarr_);
  obstacleinfoarr_.MergeFrom(from.obstacleinfoarr_);
  gridnodearr_.MergeFrom(from.gridnodearr_);
  mistyinfoarr_.MergeFrom(from.mistyinfoarr_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_sceneconfname()) {
      set_sceneconfname(from.sceneconfname());
    }
    if (from.has_gridsize()) {
      mutable_gridsize()->::pb::PbVector2_Int::MergeFrom(from.gridsize());
    }
    if (from.has_nodesize()) {
      mutable_nodesize()->::pb::PbVector2_Int::MergeFrom(from.nodesize());
    }
    if (from.has_origin()) {
      mutable_origin()->::pb::PbVector2_Int::MergeFrom(from.origin());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SceneGridData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SceneGridData::CopyFrom(const SceneGridData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SceneGridData::IsInitialized() const {

  return true;
}

void SceneGridData::Swap(SceneGridData* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(sceneconfname_, other->sceneconfname_);
    std::swap(gridsize_, other->gridsize_);
    std::swap(nodesize_, other->nodesize_);
    std::swap(origin_, other->origin_);
    areainfoarr_.Swap(&other->areainfoarr_);
    obstacleinfoarr_.Swap(&other->obstacleinfoarr_);
    gridnodearr_.Swap(&other->gridnodearr_);
    mistyinfoarr_.Swap(&other->mistyinfoarr_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SceneGridData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SceneGridData_descriptor_;
  metadata.reflection = SceneGridData_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace pb

// @@protoc_insertion_point(global_scope)
