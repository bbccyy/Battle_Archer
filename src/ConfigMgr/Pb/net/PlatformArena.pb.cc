// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: net/PlatformArena.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "net/PlatformArena.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace pb {

namespace {

const ::google::protobuf::Descriptor* TPlatformArenaExpectProcess_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TPlatformArenaExpectProcess_reflection_ = NULL;
const ::google::protobuf::Descriptor* TPlatformArenaActualProcess_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TPlatformArenaActualProcess_reflection_ = NULL;
const ::google::protobuf::Descriptor* TPlatformArenaGetBaseInfoRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TPlatformArenaGetBaseInfoRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* TPlatformArenaSignRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TPlatformArenaSignRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* TPlatformArenaData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TPlatformArenaData_reflection_ = NULL;
const ::google::protobuf::Descriptor* TPlatformArenaGetArenaInfoRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TPlatformArenaGetArenaInfoRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* TPlatformArenaChallengeReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TPlatformArenaChallengeReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* TPlatformArenaChallengeRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TPlatformArenaChallengeRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* THistorySeasonData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  THistorySeasonData_reflection_ = NULL;
const ::google::protobuf::Descriptor* TPlatformArenaGetHistorySeasonRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TPlatformArenaGetHistorySeasonRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* TPlatformArenaGetSeasonPmRankReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TPlatformArenaGetSeasonPmRankReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* TSeasonPmRankData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TSeasonPmRankData_reflection_ = NULL;
const ::google::protobuf::Descriptor* TPlatformArenaGetSeasonPmRankRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TPlatformArenaGetSeasonPmRankRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* TPersonalReportData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TPersonalReportData_reflection_ = NULL;
const ::google::protobuf::Descriptor* TPlatformArenaGetPersonalReport_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TPlatformArenaGetPersonalReport_reflection_ = NULL;
const ::google::protobuf::Descriptor* TFoeUserData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TFoeUserData_reflection_ = NULL;
const ::google::protobuf::Descriptor* TPlatformArenaGetFoeInfoRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TPlatformArenaGetFoeInfoRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* TBattlePosInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TBattlePosInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* TPlatformArenaFmtInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TPlatformArenaFmtInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* TPlatformArenaGetFmtRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TPlatformArenaGetFmtRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* TPlatformArenaSetFmtReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TPlatformArenaSetFmtReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* TPlatformArenaMatchData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TPlatformArenaMatchData_reflection_ = NULL;
const ::google::protobuf::Descriptor* TPlatformArenaGetPmMatchInfoReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TPlatformArenaGetPmMatchInfoReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* TPlatformArenaGetPmMatchInfoRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TPlatformArenaGetPmMatchInfoRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* TGuessRecordData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TGuessRecordData_reflection_ = NULL;
const ::google::protobuf::Descriptor* TPlatformArenaGetGuessRecordRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TPlatformArenaGetGuessRecordRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* TPlatformArenaGuessiongReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TPlatformArenaGuessiongReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* TPlatformArenaGetGuessingRewardReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TPlatformArenaGetGuessingRewardReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* TPlatformArenaGetGuessingRewardRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TPlatformArenaGetGuessingRewardRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* TGuessRecordNotify_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TGuessRecordNotify_reflection_ = NULL;
const ::google::protobuf::Descriptor* TPlatformArenaGiveThumbReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TPlatformArenaGiveThumbReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* TPlatformArenaGiveThumbRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TPlatformArenaGiveThumbRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* TPlatformArenaBattleHeroStatus_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TPlatformArenaBattleHeroStatus_reflection_ = NULL;
const ::google::protobuf::Descriptor* TPlatformArenaPreviewBattleResult_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TPlatformArenaPreviewBattleResult_reflection_ = NULL;
const ::google::protobuf::Descriptor* TPlatformArenaGetBattlePreviewReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TPlatformArenaGetBattlePreviewReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* TPlatformArenaGetBattlePreviewRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TPlatformArenaGetBattlePreviewRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* TPlatformArenaFormationInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TPlatformArenaFormationInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* TPlatformArenaGetFormationReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TPlatformArenaGetFormationReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* TPlatformArenaGetFormationRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TPlatformArenaGetFormationRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* TArenaBattleReportData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TArenaBattleReportData_reflection_ = NULL;
const ::google::protobuf::Descriptor* TPlatformArenaGetArenaBattleReportRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TPlatformArenaGetArenaBattleReportRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* TPlatformArenaGetPeakInfoReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TPlatformArenaGetPeakInfoReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* TPlatformArenaPeakData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TPlatformArenaPeakData_reflection_ = NULL;
const ::google::protobuf::Descriptor* TPlatformArenaGetPeakInfoRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TPlatformArenaGetPeakInfoRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* TPlatformArenaBeAtkNotify_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TPlatformArenaBeAtkNotify_reflection_ = NULL;
const ::google::protobuf::Descriptor* TPlatformArenaLeaveMessageReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TPlatformArenaLeaveMessageReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* TPlatformArenaDelLeaveMessageReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TPlatformArenaDelLeaveMessageReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* TPlatformArenaThumbLeaveMessageReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TPlatformArenaThumbLeaveMessageReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* TPlatformArenaThumbLeaveMessageRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TPlatformArenaThumbLeaveMessageRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* TPlatformArenaGetLeaveMessageLstReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TPlatformArenaGetLeaveMessageLstReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* TPlatformArenaLeaveMessageData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TPlatformArenaLeaveMessageData_reflection_ = NULL;
const ::google::protobuf::Descriptor* TPlatformArenaGetLeaveMessageLstRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TPlatformArenaGetLeaveMessageLstRsp_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* EPlatformArenaStage_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_net_2fPlatformArena_2eproto() {
  protobuf_AddDesc_net_2fPlatformArena_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "net/PlatformArena.proto");
  GOOGLE_CHECK(file != NULL);
  TPlatformArenaExpectProcess_descriptor_ = file->message_type(0);
  static const int TPlatformArenaExpectProcess_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TPlatformArenaExpectProcess, round_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TPlatformArenaExpectProcess, stage_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TPlatformArenaExpectProcess, begtime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TPlatformArenaExpectProcess, endtime_),
  };
  TPlatformArenaExpectProcess_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TPlatformArenaExpectProcess_descriptor_,
      TPlatformArenaExpectProcess::default_instance_,
      TPlatformArenaExpectProcess_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TPlatformArenaExpectProcess, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TPlatformArenaExpectProcess, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TPlatformArenaExpectProcess));
  TPlatformArenaActualProcess_descriptor_ = file->message_type(1);
  static const int TPlatformArenaActualProcess_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TPlatformArenaActualProcess, expectprocess_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TPlatformArenaActualProcess, donetime_),
  };
  TPlatformArenaActualProcess_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TPlatformArenaActualProcess_descriptor_,
      TPlatformArenaActualProcess::default_instance_,
      TPlatformArenaActualProcess_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TPlatformArenaActualProcess, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TPlatformArenaActualProcess, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TPlatformArenaActualProcess));
  TPlatformArenaGetBaseInfoRsp_descriptor_ = file->message_type(2);
  static const int TPlatformArenaGetBaseInfoRsp_offsets_[11] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TPlatformArenaGetBaseInfoRsp, arrexpectprocess_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TPlatformArenaGetBaseInfoRsp, funcopen_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TPlatformArenaGetBaseInfoRsp, actualprocess_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TPlatformArenaGetBaseInfoRsp, seasonid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TPlatformArenaGetBaseInfoRsp, groupid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TPlatformArenaGetBaseInfoRsp, todaythumbnum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TPlatformArenaGetBaseInfoRsp, cooltime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TPlatformArenaGetBaseInfoRsp, sceneid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TPlatformArenaGetBaseInfoRsp, signtime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TPlatformArenaGetBaseInfoRsp, maxfightforce_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TPlatformArenaGetBaseInfoRsp, nextseasonstarttime_),
  };
  TPlatformArenaGetBaseInfoRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TPlatformArenaGetBaseInfoRsp_descriptor_,
      TPlatformArenaGetBaseInfoRsp::default_instance_,
      TPlatformArenaGetBaseInfoRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TPlatformArenaGetBaseInfoRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TPlatformArenaGetBaseInfoRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TPlatformArenaGetBaseInfoRsp));
  TPlatformArenaSignRsp_descriptor_ = file->message_type(3);
  static const int TPlatformArenaSignRsp_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TPlatformArenaSignRsp, signtime_),
  };
  TPlatformArenaSignRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TPlatformArenaSignRsp_descriptor_,
      TPlatformArenaSignRsp::default_instance_,
      TPlatformArenaSignRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TPlatformArenaSignRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TPlatformArenaSignRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TPlatformArenaSignRsp));
  TPlatformArenaData_descriptor_ = file->message_type(4);
  static const int TPlatformArenaData_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TPlatformArenaData, groupid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TPlatformArenaData, arenateamid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TPlatformArenaData, arenaid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TPlatformArenaData, arenatype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TPlatformArenaData, winuserinfo_),
  };
  TPlatformArenaData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TPlatformArenaData_descriptor_,
      TPlatformArenaData::default_instance_,
      TPlatformArenaData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TPlatformArenaData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TPlatformArenaData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TPlatformArenaData));
  TPlatformArenaGetArenaInfoRsp_descriptor_ = file->message_type(5);
  static const int TPlatformArenaGetArenaInfoRsp_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TPlatformArenaGetArenaInfoRsp, arrarenadata_),
  };
  TPlatformArenaGetArenaInfoRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TPlatformArenaGetArenaInfoRsp_descriptor_,
      TPlatformArenaGetArenaInfoRsp::default_instance_,
      TPlatformArenaGetArenaInfoRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TPlatformArenaGetArenaInfoRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TPlatformArenaGetArenaInfoRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TPlatformArenaGetArenaInfoRsp));
  TPlatformArenaChallengeReq_descriptor_ = file->message_type(6);
  static const int TPlatformArenaChallengeReq_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TPlatformArenaChallengeReq, groupid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TPlatformArenaChallengeReq, arenaid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TPlatformArenaChallengeReq, uid_),
  };
  TPlatformArenaChallengeReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TPlatformArenaChallengeReq_descriptor_,
      TPlatformArenaChallengeReq::default_instance_,
      TPlatformArenaChallengeReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TPlatformArenaChallengeReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TPlatformArenaChallengeReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TPlatformArenaChallengeReq));
  TPlatformArenaChallengeRsp_descriptor_ = file->message_type(7);
  static const int TPlatformArenaChallengeRsp_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TPlatformArenaChallengeRsp, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TPlatformArenaChallengeRsp, cooltime_),
  };
  TPlatformArenaChallengeRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TPlatformArenaChallengeRsp_descriptor_,
      TPlatformArenaChallengeRsp::default_instance_,
      TPlatformArenaChallengeRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TPlatformArenaChallengeRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TPlatformArenaChallengeRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TPlatformArenaChallengeRsp));
  THistorySeasonData_descriptor_ = file->message_type(8);
  static const int THistorySeasonData_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(THistorySeasonData, seasonid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(THistorySeasonData, starttime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(THistorySeasonData, endtime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(THistorySeasonData, groupnum_),
  };
  THistorySeasonData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      THistorySeasonData_descriptor_,
      THistorySeasonData::default_instance_,
      THistorySeasonData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(THistorySeasonData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(THistorySeasonData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(THistorySeasonData));
  TPlatformArenaGetHistorySeasonRsp_descriptor_ = file->message_type(9);
  static const int TPlatformArenaGetHistorySeasonRsp_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TPlatformArenaGetHistorySeasonRsp, arrhistoryseason_),
  };
  TPlatformArenaGetHistorySeasonRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TPlatformArenaGetHistorySeasonRsp_descriptor_,
      TPlatformArenaGetHistorySeasonRsp::default_instance_,
      TPlatformArenaGetHistorySeasonRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TPlatformArenaGetHistorySeasonRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TPlatformArenaGetHistorySeasonRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TPlatformArenaGetHistorySeasonRsp));
  TPlatformArenaGetSeasonPmRankReq_descriptor_ = file->message_type(10);
  static const int TPlatformArenaGetSeasonPmRankReq_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TPlatformArenaGetSeasonPmRankReq, seasonid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TPlatformArenaGetSeasonPmRankReq, groupid_),
  };
  TPlatformArenaGetSeasonPmRankReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TPlatformArenaGetSeasonPmRankReq_descriptor_,
      TPlatformArenaGetSeasonPmRankReq::default_instance_,
      TPlatformArenaGetSeasonPmRankReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TPlatformArenaGetSeasonPmRankReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TPlatformArenaGetSeasonPmRankReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TPlatformArenaGetSeasonPmRankReq));
  TSeasonPmRankData_descriptor_ = file->message_type(11);
  static const int TSeasonPmRankData_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TSeasonPmRankData, userinfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TSeasonPmRankData, rank_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TSeasonPmRankData, thumbnum_),
  };
  TSeasonPmRankData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TSeasonPmRankData_descriptor_,
      TSeasonPmRankData::default_instance_,
      TSeasonPmRankData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TSeasonPmRankData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TSeasonPmRankData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TSeasonPmRankData));
  TPlatformArenaGetSeasonPmRankRsp_descriptor_ = file->message_type(12);
  static const int TPlatformArenaGetSeasonPmRankRsp_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TPlatformArenaGetSeasonPmRankRsp, seasonid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TPlatformArenaGetSeasonPmRankRsp, groupid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TPlatformArenaGetSeasonPmRankRsp, arrrankdata_),
  };
  TPlatformArenaGetSeasonPmRankRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TPlatformArenaGetSeasonPmRankRsp_descriptor_,
      TPlatformArenaGetSeasonPmRankRsp::default_instance_,
      TPlatformArenaGetSeasonPmRankRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TPlatformArenaGetSeasonPmRankRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TPlatformArenaGetSeasonPmRankRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TPlatformArenaGetSeasonPmRankRsp));
  TPersonalReportData_descriptor_ = file->message_type(13);
  static const int TPersonalReportData_offsets_[9] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TPersonalReportData, rid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TPersonalReportData, reporttype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TPersonalReportData, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TPersonalReportData, arenaid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TPersonalReportData, reporttime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TPersonalReportData, rtid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TPersonalReportData, arenatype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TPersonalReportData, atkuserinfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TPersonalReportData, defuserinfo_),
  };
  TPersonalReportData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TPersonalReportData_descriptor_,
      TPersonalReportData::default_instance_,
      TPersonalReportData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TPersonalReportData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TPersonalReportData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TPersonalReportData));
  TPlatformArenaGetPersonalReport_descriptor_ = file->message_type(14);
  static const int TPlatformArenaGetPersonalReport_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TPlatformArenaGetPersonalReport, arrreport_),
  };
  TPlatformArenaGetPersonalReport_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TPlatformArenaGetPersonalReport_descriptor_,
      TPlatformArenaGetPersonalReport::default_instance_,
      TPlatformArenaGetPersonalReport_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TPlatformArenaGetPersonalReport, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TPlatformArenaGetPersonalReport, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TPlatformArenaGetPersonalReport));
  TFoeUserData_descriptor_ = file->message_type(15);
  static const int TFoeUserData_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TFoeUserData, userinfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TFoeUserData, foevalue_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TFoeUserData, foetimestamp_),
  };
  TFoeUserData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TFoeUserData_descriptor_,
      TFoeUserData::default_instance_,
      TFoeUserData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TFoeUserData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TFoeUserData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TFoeUserData));
  TPlatformArenaGetFoeInfoRsp_descriptor_ = file->message_type(16);
  static const int TPlatformArenaGetFoeInfoRsp_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TPlatformArenaGetFoeInfoRsp, arrfoeuser_),
  };
  TPlatformArenaGetFoeInfoRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TPlatformArenaGetFoeInfoRsp_descriptor_,
      TPlatformArenaGetFoeInfoRsp::default_instance_,
      TPlatformArenaGetFoeInfoRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TPlatformArenaGetFoeInfoRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TPlatformArenaGetFoeInfoRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TPlatformArenaGetFoeInfoRsp));
  TBattlePosInfo_descriptor_ = file->message_type(17);
  static const int TBattlePosInfo_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TBattlePosInfo, pos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TBattlePosInfo, hid_),
  };
  TBattlePosInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TBattlePosInfo_descriptor_,
      TBattlePosInfo::default_instance_,
      TBattlePosInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TBattlePosInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TBattlePosInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TBattlePosInfo));
  TPlatformArenaFmtInfo_descriptor_ = file->message_type(18);
  static const int TPlatformArenaFmtInfo_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TPlatformArenaFmtInfo, fmtid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TPlatformArenaFmtInfo, arrpos_),
  };
  TPlatformArenaFmtInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TPlatformArenaFmtInfo_descriptor_,
      TPlatformArenaFmtInfo::default_instance_,
      TPlatformArenaFmtInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TPlatformArenaFmtInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TPlatformArenaFmtInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TPlatformArenaFmtInfo));
  TPlatformArenaGetFmtRsp_descriptor_ = file->message_type(19);
  static const int TPlatformArenaGetFmtRsp_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TPlatformArenaGetFmtRsp, arrfmt_),
  };
  TPlatformArenaGetFmtRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TPlatformArenaGetFmtRsp_descriptor_,
      TPlatformArenaGetFmtRsp::default_instance_,
      TPlatformArenaGetFmtRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TPlatformArenaGetFmtRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TPlatformArenaGetFmtRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TPlatformArenaGetFmtRsp));
  TPlatformArenaSetFmtReq_descriptor_ = file->message_type(20);
  static const int TPlatformArenaSetFmtReq_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TPlatformArenaSetFmtReq, arrfmt_),
  };
  TPlatformArenaSetFmtReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TPlatformArenaSetFmtReq_descriptor_,
      TPlatformArenaSetFmtReq::default_instance_,
      TPlatformArenaSetFmtReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TPlatformArenaSetFmtReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TPlatformArenaSetFmtReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TPlatformArenaSetFmtReq));
  TPlatformArenaMatchData_descriptor_ = file->message_type(21);
  static const int TPlatformArenaMatchData_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TPlatformArenaMatchData, matchid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TPlatformArenaMatchData, atkuid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TPlatformArenaMatchData, defuid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TPlatformArenaMatchData, donetime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TPlatformArenaMatchData, winuid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TPlatformArenaMatchData, atkfightforce_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TPlatformArenaMatchData, deffightforce_),
  };
  TPlatformArenaMatchData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TPlatformArenaMatchData_descriptor_,
      TPlatformArenaMatchData::default_instance_,
      TPlatformArenaMatchData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TPlatformArenaMatchData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TPlatformArenaMatchData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TPlatformArenaMatchData));
  TPlatformArenaGetPmMatchInfoReq_descriptor_ = file->message_type(22);
  static const int TPlatformArenaGetPmMatchInfoReq_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TPlatformArenaGetPmMatchInfoReq, groupid_),
  };
  TPlatformArenaGetPmMatchInfoReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TPlatformArenaGetPmMatchInfoReq_descriptor_,
      TPlatformArenaGetPmMatchInfoReq::default_instance_,
      TPlatformArenaGetPmMatchInfoReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TPlatformArenaGetPmMatchInfoReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TPlatformArenaGetPmMatchInfoReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TPlatformArenaGetPmMatchInfoReq));
  TPlatformArenaGetPmMatchInfoRsp_descriptor_ = file->message_type(23);
  static const int TPlatformArenaGetPmMatchInfoRsp_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TPlatformArenaGetPmMatchInfoRsp, groupid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TPlatformArenaGetPmMatchInfoRsp, arruserinfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TPlatformArenaGetPmMatchInfoRsp, arrarenamatchdata_),
  };
  TPlatformArenaGetPmMatchInfoRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TPlatformArenaGetPmMatchInfoRsp_descriptor_,
      TPlatformArenaGetPmMatchInfoRsp::default_instance_,
      TPlatformArenaGetPmMatchInfoRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TPlatformArenaGetPmMatchInfoRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TPlatformArenaGetPmMatchInfoRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TPlatformArenaGetPmMatchInfoRsp));
  TGuessRecordData_descriptor_ = file->message_type(24);
  static const int TGuessRecordData_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TGuessRecordData, groupid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TGuessRecordData, matchid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TGuessRecordData, winuid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TGuessRecordData, guessstatus_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TGuessRecordData, betindex_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TGuessRecordData, guessatkwinnum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TGuessRecordData, guessdefwinnum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TGuessRecordData, msglst_),
  };
  TGuessRecordData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TGuessRecordData_descriptor_,
      TGuessRecordData::default_instance_,
      TGuessRecordData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TGuessRecordData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TGuessRecordData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TGuessRecordData));
  TPlatformArenaGetGuessRecordRsp_descriptor_ = file->message_type(25);
  static const int TPlatformArenaGetGuessRecordRsp_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TPlatformArenaGetGuessRecordRsp, arrguessrecord_),
  };
  TPlatformArenaGetGuessRecordRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TPlatformArenaGetGuessRecordRsp_descriptor_,
      TPlatformArenaGetGuessRecordRsp::default_instance_,
      TPlatformArenaGetGuessRecordRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TPlatformArenaGetGuessRecordRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TPlatformArenaGetGuessRecordRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TPlatformArenaGetGuessRecordRsp));
  TPlatformArenaGuessiongReq_descriptor_ = file->message_type(26);
  static const int TPlatformArenaGuessiongReq_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TPlatformArenaGuessiongReq, groupid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TPlatformArenaGuessiongReq, matchid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TPlatformArenaGuessiongReq, uid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TPlatformArenaGuessiongReq, betindex_),
  };
  TPlatformArenaGuessiongReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TPlatformArenaGuessiongReq_descriptor_,
      TPlatformArenaGuessiongReq::default_instance_,
      TPlatformArenaGuessiongReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TPlatformArenaGuessiongReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TPlatformArenaGuessiongReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TPlatformArenaGuessiongReq));
  TPlatformArenaGetGuessingRewardReq_descriptor_ = file->message_type(27);
  static const int TPlatformArenaGetGuessingRewardReq_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TPlatformArenaGetGuessingRewardReq, arrmatchid_),
  };
  TPlatformArenaGetGuessingRewardReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TPlatformArenaGetGuessingRewardReq_descriptor_,
      TPlatformArenaGetGuessingRewardReq::default_instance_,
      TPlatformArenaGetGuessingRewardReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TPlatformArenaGetGuessingRewardReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TPlatformArenaGetGuessingRewardReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TPlatformArenaGetGuessingRewardReq));
  TPlatformArenaGetGuessingRewardRsp_descriptor_ = file->message_type(28);
  static const int TPlatformArenaGetGuessingRewardRsp_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TPlatformArenaGetGuessingRewardRsp, arrrewardinfo_),
  };
  TPlatformArenaGetGuessingRewardRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TPlatformArenaGetGuessingRewardRsp_descriptor_,
      TPlatformArenaGetGuessingRewardRsp::default_instance_,
      TPlatformArenaGetGuessingRewardRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TPlatformArenaGetGuessingRewardRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TPlatformArenaGetGuessingRewardRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TPlatformArenaGetGuessingRewardRsp));
  TGuessRecordNotify_descriptor_ = file->message_type(29);
  static const int TGuessRecordNotify_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TGuessRecordNotify, guessrecord_),
  };
  TGuessRecordNotify_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TGuessRecordNotify_descriptor_,
      TGuessRecordNotify::default_instance_,
      TGuessRecordNotify_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TGuessRecordNotify, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TGuessRecordNotify, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TGuessRecordNotify));
  TPlatformArenaGiveThumbReq_descriptor_ = file->message_type(30);
  static const int TPlatformArenaGiveThumbReq_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TPlatformArenaGiveThumbReq, groupid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TPlatformArenaGiveThumbReq, uid_),
  };
  TPlatformArenaGiveThumbReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TPlatformArenaGiveThumbReq_descriptor_,
      TPlatformArenaGiveThumbReq::default_instance_,
      TPlatformArenaGiveThumbReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TPlatformArenaGiveThumbReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TPlatformArenaGiveThumbReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TPlatformArenaGiveThumbReq));
  TPlatformArenaGiveThumbRsp_descriptor_ = file->message_type(31);
  static const int TPlatformArenaGiveThumbRsp_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TPlatformArenaGiveThumbRsp, uid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TPlatformArenaGiveThumbRsp, thumbnum_),
  };
  TPlatformArenaGiveThumbRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TPlatformArenaGiveThumbRsp_descriptor_,
      TPlatformArenaGiveThumbRsp::default_instance_,
      TPlatformArenaGiveThumbRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TPlatformArenaGiveThumbRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TPlatformArenaGiveThumbRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TPlatformArenaGiveThumbRsp));
  TPlatformArenaBattleHeroStatus_descriptor_ = file->message_type(32);
  static const int TPlatformArenaBattleHeroStatus_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TPlatformArenaBattleHeroStatus, htid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TPlatformArenaBattleHeroStatus, pos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TPlatformArenaBattleHeroStatus, iskilled_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TPlatformArenaBattleHeroStatus, level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TPlatformArenaBattleHeroStatus, starlv_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TPlatformArenaBattleHeroStatus, hid_),
  };
  TPlatformArenaBattleHeroStatus_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TPlatformArenaBattleHeroStatus_descriptor_,
      TPlatformArenaBattleHeroStatus::default_instance_,
      TPlatformArenaBattleHeroStatus_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TPlatformArenaBattleHeroStatus, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TPlatformArenaBattleHeroStatus, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TPlatformArenaBattleHeroStatus));
  TPlatformArenaPreviewBattleResult_descriptor_ = file->message_type(33);
  static const int TPlatformArenaPreviewBattleResult_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TPlatformArenaPreviewBattleResult, formationid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TPlatformArenaPreviewBattleResult, arratkheroinfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TPlatformArenaPreviewBattleResult, arrdefheroinfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TPlatformArenaPreviewBattleResult, isatkwin_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TPlatformArenaPreviewBattleResult, rid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TPlatformArenaPreviewBattleResult, atkfightforce_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TPlatformArenaPreviewBattleResult, deffightforce_),
  };
  TPlatformArenaPreviewBattleResult_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TPlatformArenaPreviewBattleResult_descriptor_,
      TPlatformArenaPreviewBattleResult::default_instance_,
      TPlatformArenaPreviewBattleResult_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TPlatformArenaPreviewBattleResult, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TPlatformArenaPreviewBattleResult, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TPlatformArenaPreviewBattleResult));
  TPlatformArenaGetBattlePreviewReq_descriptor_ = file->message_type(34);
  static const int TPlatformArenaGetBattlePreviewReq_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TPlatformArenaGetBattlePreviewReq, reqtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TPlatformArenaGetBattlePreviewReq, matchid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TPlatformArenaGetBattlePreviewReq, reportid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TPlatformArenaGetBattlePreviewReq, seasonid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TPlatformArenaGetBattlePreviewReq, groupid_),
  };
  TPlatformArenaGetBattlePreviewReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TPlatformArenaGetBattlePreviewReq_descriptor_,
      TPlatformArenaGetBattlePreviewReq::default_instance_,
      TPlatformArenaGetBattlePreviewReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TPlatformArenaGetBattlePreviewReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TPlatformArenaGetBattlePreviewReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TPlatformArenaGetBattlePreviewReq));
  TPlatformArenaGetBattlePreviewRsp_descriptor_ = file->message_type(35);
  static const int TPlatformArenaGetBattlePreviewRsp_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TPlatformArenaGetBattlePreviewRsp, atkuserinfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TPlatformArenaGetBattlePreviewRsp, defuserinfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TPlatformArenaGetBattlePreviewRsp, arrbattleinfo_),
  };
  TPlatformArenaGetBattlePreviewRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TPlatformArenaGetBattlePreviewRsp_descriptor_,
      TPlatformArenaGetBattlePreviewRsp::default_instance_,
      TPlatformArenaGetBattlePreviewRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TPlatformArenaGetBattlePreviewRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TPlatformArenaGetBattlePreviewRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TPlatformArenaGetBattlePreviewRsp));
  TPlatformArenaFormationInfo_descriptor_ = file->message_type(36);
  static const int TPlatformArenaFormationInfo_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TPlatformArenaFormationInfo, formationid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TPlatformArenaFormationInfo, unitarr_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TPlatformArenaFormationInfo, fightforce_),
  };
  TPlatformArenaFormationInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TPlatformArenaFormationInfo_descriptor_,
      TPlatformArenaFormationInfo::default_instance_,
      TPlatformArenaFormationInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TPlatformArenaFormationInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TPlatformArenaFormationInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TPlatformArenaFormationInfo));
  TPlatformArenaGetFormationReq_descriptor_ = file->message_type(37);
  static const int TPlatformArenaGetFormationReq_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TPlatformArenaGetFormationReq, round_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TPlatformArenaGetFormationReq, uid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TPlatformArenaGetFormationReq, groupid_),
  };
  TPlatformArenaGetFormationReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TPlatformArenaGetFormationReq_descriptor_,
      TPlatformArenaGetFormationReq::default_instance_,
      TPlatformArenaGetFormationReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TPlatformArenaGetFormationReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TPlatformArenaGetFormationReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TPlatformArenaGetFormationReq));
  TPlatformArenaGetFormationRsp_descriptor_ = file->message_type(38);
  static const int TPlatformArenaGetFormationRsp_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TPlatformArenaGetFormationRsp, formationarr_),
  };
  TPlatformArenaGetFormationRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TPlatformArenaGetFormationRsp_descriptor_,
      TPlatformArenaGetFormationRsp::default_instance_,
      TPlatformArenaGetFormationRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TPlatformArenaGetFormationRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TPlatformArenaGetFormationRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TPlatformArenaGetFormationRsp));
  TArenaBattleReportData_descriptor_ = file->message_type(39);
  static const int TArenaBattleReportData_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TArenaBattleReportData, rid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TArenaBattleReportData, reporttype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TArenaBattleReportData, arenaid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TArenaBattleReportData, reporttime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TArenaBattleReportData, atkuserinfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TArenaBattleReportData, defuserinfo_),
  };
  TArenaBattleReportData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TArenaBattleReportData_descriptor_,
      TArenaBattleReportData::default_instance_,
      TArenaBattleReportData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TArenaBattleReportData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TArenaBattleReportData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TArenaBattleReportData));
  TPlatformArenaGetArenaBattleReportRsp_descriptor_ = file->message_type(40);
  static const int TPlatformArenaGetArenaBattleReportRsp_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TPlatformArenaGetArenaBattleReportRsp, arrreport_),
  };
  TPlatformArenaGetArenaBattleReportRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TPlatformArenaGetArenaBattleReportRsp_descriptor_,
      TPlatformArenaGetArenaBattleReportRsp::default_instance_,
      TPlatformArenaGetArenaBattleReportRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TPlatformArenaGetArenaBattleReportRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TPlatformArenaGetArenaBattleReportRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TPlatformArenaGetArenaBattleReportRsp));
  TPlatformArenaGetPeakInfoReq_descriptor_ = file->message_type(41);
  static const int TPlatformArenaGetPeakInfoReq_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TPlatformArenaGetPeakInfoReq, seasonid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TPlatformArenaGetPeakInfoReq, groupid_),
  };
  TPlatformArenaGetPeakInfoReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TPlatformArenaGetPeakInfoReq_descriptor_,
      TPlatformArenaGetPeakInfoReq::default_instance_,
      TPlatformArenaGetPeakInfoReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TPlatformArenaGetPeakInfoReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TPlatformArenaGetPeakInfoReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TPlatformArenaGetPeakInfoReq));
  TPlatformArenaPeakData_descriptor_ = file->message_type(42);
  static const int TPlatformArenaPeakData_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TPlatformArenaPeakData, matchid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TPlatformArenaPeakData, atkuserinfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TPlatformArenaPeakData, defuserinfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TPlatformArenaPeakData, winuid_),
  };
  TPlatformArenaPeakData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TPlatformArenaPeakData_descriptor_,
      TPlatformArenaPeakData::default_instance_,
      TPlatformArenaPeakData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TPlatformArenaPeakData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TPlatformArenaPeakData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TPlatformArenaPeakData));
  TPlatformArenaGetPeakInfoRsp_descriptor_ = file->message_type(43);
  static const int TPlatformArenaGetPeakInfoRsp_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TPlatformArenaGetPeakInfoRsp, arrpeakdata_),
  };
  TPlatformArenaGetPeakInfoRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TPlatformArenaGetPeakInfoRsp_descriptor_,
      TPlatformArenaGetPeakInfoRsp::default_instance_,
      TPlatformArenaGetPeakInfoRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TPlatformArenaGetPeakInfoRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TPlatformArenaGetPeakInfoRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TPlatformArenaGetPeakInfoRsp));
  TPlatformArenaBeAtkNotify_descriptor_ = file->message_type(44);
  static const int TPlatformArenaBeAtkNotify_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TPlatformArenaBeAtkNotify, arenaid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TPlatformArenaBeAtkNotify, atkuser_),
  };
  TPlatformArenaBeAtkNotify_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TPlatformArenaBeAtkNotify_descriptor_,
      TPlatformArenaBeAtkNotify::default_instance_,
      TPlatformArenaBeAtkNotify_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TPlatformArenaBeAtkNotify, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TPlatformArenaBeAtkNotify, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TPlatformArenaBeAtkNotify));
  TPlatformArenaLeaveMessageReq_descriptor_ = file->message_type(45);
  static const int TPlatformArenaLeaveMessageReq_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TPlatformArenaLeaveMessageReq, matchid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TPlatformArenaLeaveMessageReq, content_),
  };
  TPlatformArenaLeaveMessageReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TPlatformArenaLeaveMessageReq_descriptor_,
      TPlatformArenaLeaveMessageReq::default_instance_,
      TPlatformArenaLeaveMessageReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TPlatformArenaLeaveMessageReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TPlatformArenaLeaveMessageReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TPlatformArenaLeaveMessageReq));
  TPlatformArenaDelLeaveMessageReq_descriptor_ = file->message_type(46);
  static const int TPlatformArenaDelLeaveMessageReq_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TPlatformArenaDelLeaveMessageReq, matchid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TPlatformArenaDelLeaveMessageReq, msgid_),
  };
  TPlatformArenaDelLeaveMessageReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TPlatformArenaDelLeaveMessageReq_descriptor_,
      TPlatformArenaDelLeaveMessageReq::default_instance_,
      TPlatformArenaDelLeaveMessageReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TPlatformArenaDelLeaveMessageReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TPlatformArenaDelLeaveMessageReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TPlatformArenaDelLeaveMessageReq));
  TPlatformArenaThumbLeaveMessageReq_descriptor_ = file->message_type(47);
  static const int TPlatformArenaThumbLeaveMessageReq_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TPlatformArenaThumbLeaveMessageReq, matchid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TPlatformArenaThumbLeaveMessageReq, msgid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TPlatformArenaThumbLeaveMessageReq, thumbtype_),
  };
  TPlatformArenaThumbLeaveMessageReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TPlatformArenaThumbLeaveMessageReq_descriptor_,
      TPlatformArenaThumbLeaveMessageReq::default_instance_,
      TPlatformArenaThumbLeaveMessageReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TPlatformArenaThumbLeaveMessageReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TPlatformArenaThumbLeaveMessageReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TPlatformArenaThumbLeaveMessageReq));
  TPlatformArenaThumbLeaveMessageRsp_descriptor_ = file->message_type(48);
  static const int TPlatformArenaThumbLeaveMessageRsp_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TPlatformArenaThumbLeaveMessageRsp, retcode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TPlatformArenaThumbLeaveMessageRsp, thumbnum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TPlatformArenaThumbLeaveMessageRsp, nonthumbnum_),
  };
  TPlatformArenaThumbLeaveMessageRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TPlatformArenaThumbLeaveMessageRsp_descriptor_,
      TPlatformArenaThumbLeaveMessageRsp::default_instance_,
      TPlatformArenaThumbLeaveMessageRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TPlatformArenaThumbLeaveMessageRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TPlatformArenaThumbLeaveMessageRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TPlatformArenaThumbLeaveMessageRsp));
  TPlatformArenaGetLeaveMessageLstReq_descriptor_ = file->message_type(49);
  static const int TPlatformArenaGetLeaveMessageLstReq_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TPlatformArenaGetLeaveMessageLstReq, matchid_),
  };
  TPlatformArenaGetLeaveMessageLstReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TPlatformArenaGetLeaveMessageLstReq_descriptor_,
      TPlatformArenaGetLeaveMessageLstReq::default_instance_,
      TPlatformArenaGetLeaveMessageLstReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TPlatformArenaGetLeaveMessageLstReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TPlatformArenaGetLeaveMessageLstReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TPlatformArenaGetLeaveMessageLstReq));
  TPlatformArenaLeaveMessageData_descriptor_ = file->message_type(50);
  static const int TPlatformArenaLeaveMessageData_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TPlatformArenaLeaveMessageData, msgid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TPlatformArenaLeaveMessageData, content_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TPlatformArenaLeaveMessageData, leaveuser_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TPlatformArenaLeaveMessageData, thumbnum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TPlatformArenaLeaveMessageData, nonthumbnum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TPlatformArenaLeaveMessageData, thumbstatus_),
  };
  TPlatformArenaLeaveMessageData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TPlatformArenaLeaveMessageData_descriptor_,
      TPlatformArenaLeaveMessageData::default_instance_,
      TPlatformArenaLeaveMessageData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TPlatformArenaLeaveMessageData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TPlatformArenaLeaveMessageData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TPlatformArenaLeaveMessageData));
  TPlatformArenaGetLeaveMessageLstRsp_descriptor_ = file->message_type(51);
  static const int TPlatformArenaGetLeaveMessageLstRsp_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TPlatformArenaGetLeaveMessageLstRsp, msglst_),
  };
  TPlatformArenaGetLeaveMessageLstRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TPlatformArenaGetLeaveMessageLstRsp_descriptor_,
      TPlatformArenaGetLeaveMessageLstRsp::default_instance_,
      TPlatformArenaGetLeaveMessageLstRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TPlatformArenaGetLeaveMessageLstRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TPlatformArenaGetLeaveMessageLstRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TPlatformArenaGetLeaveMessageLstRsp));
  EPlatformArenaStage_descriptor_ = file->enum_type(0);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_net_2fPlatformArena_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TPlatformArenaExpectProcess_descriptor_, &TPlatformArenaExpectProcess::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TPlatformArenaActualProcess_descriptor_, &TPlatformArenaActualProcess::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TPlatformArenaGetBaseInfoRsp_descriptor_, &TPlatformArenaGetBaseInfoRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TPlatformArenaSignRsp_descriptor_, &TPlatformArenaSignRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TPlatformArenaData_descriptor_, &TPlatformArenaData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TPlatformArenaGetArenaInfoRsp_descriptor_, &TPlatformArenaGetArenaInfoRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TPlatformArenaChallengeReq_descriptor_, &TPlatformArenaChallengeReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TPlatformArenaChallengeRsp_descriptor_, &TPlatformArenaChallengeRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    THistorySeasonData_descriptor_, &THistorySeasonData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TPlatformArenaGetHistorySeasonRsp_descriptor_, &TPlatformArenaGetHistorySeasonRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TPlatformArenaGetSeasonPmRankReq_descriptor_, &TPlatformArenaGetSeasonPmRankReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TSeasonPmRankData_descriptor_, &TSeasonPmRankData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TPlatformArenaGetSeasonPmRankRsp_descriptor_, &TPlatformArenaGetSeasonPmRankRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TPersonalReportData_descriptor_, &TPersonalReportData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TPlatformArenaGetPersonalReport_descriptor_, &TPlatformArenaGetPersonalReport::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TFoeUserData_descriptor_, &TFoeUserData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TPlatformArenaGetFoeInfoRsp_descriptor_, &TPlatformArenaGetFoeInfoRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TBattlePosInfo_descriptor_, &TBattlePosInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TPlatformArenaFmtInfo_descriptor_, &TPlatformArenaFmtInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TPlatformArenaGetFmtRsp_descriptor_, &TPlatformArenaGetFmtRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TPlatformArenaSetFmtReq_descriptor_, &TPlatformArenaSetFmtReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TPlatformArenaMatchData_descriptor_, &TPlatformArenaMatchData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TPlatformArenaGetPmMatchInfoReq_descriptor_, &TPlatformArenaGetPmMatchInfoReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TPlatformArenaGetPmMatchInfoRsp_descriptor_, &TPlatformArenaGetPmMatchInfoRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TGuessRecordData_descriptor_, &TGuessRecordData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TPlatformArenaGetGuessRecordRsp_descriptor_, &TPlatformArenaGetGuessRecordRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TPlatformArenaGuessiongReq_descriptor_, &TPlatformArenaGuessiongReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TPlatformArenaGetGuessingRewardReq_descriptor_, &TPlatformArenaGetGuessingRewardReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TPlatformArenaGetGuessingRewardRsp_descriptor_, &TPlatformArenaGetGuessingRewardRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TGuessRecordNotify_descriptor_, &TGuessRecordNotify::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TPlatformArenaGiveThumbReq_descriptor_, &TPlatformArenaGiveThumbReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TPlatformArenaGiveThumbRsp_descriptor_, &TPlatformArenaGiveThumbRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TPlatformArenaBattleHeroStatus_descriptor_, &TPlatformArenaBattleHeroStatus::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TPlatformArenaPreviewBattleResult_descriptor_, &TPlatformArenaPreviewBattleResult::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TPlatformArenaGetBattlePreviewReq_descriptor_, &TPlatformArenaGetBattlePreviewReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TPlatformArenaGetBattlePreviewRsp_descriptor_, &TPlatformArenaGetBattlePreviewRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TPlatformArenaFormationInfo_descriptor_, &TPlatformArenaFormationInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TPlatformArenaGetFormationReq_descriptor_, &TPlatformArenaGetFormationReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TPlatformArenaGetFormationRsp_descriptor_, &TPlatformArenaGetFormationRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TArenaBattleReportData_descriptor_, &TArenaBattleReportData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TPlatformArenaGetArenaBattleReportRsp_descriptor_, &TPlatformArenaGetArenaBattleReportRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TPlatformArenaGetPeakInfoReq_descriptor_, &TPlatformArenaGetPeakInfoReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TPlatformArenaPeakData_descriptor_, &TPlatformArenaPeakData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TPlatformArenaGetPeakInfoRsp_descriptor_, &TPlatformArenaGetPeakInfoRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TPlatformArenaBeAtkNotify_descriptor_, &TPlatformArenaBeAtkNotify::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TPlatformArenaLeaveMessageReq_descriptor_, &TPlatformArenaLeaveMessageReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TPlatformArenaDelLeaveMessageReq_descriptor_, &TPlatformArenaDelLeaveMessageReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TPlatformArenaThumbLeaveMessageReq_descriptor_, &TPlatformArenaThumbLeaveMessageReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TPlatformArenaThumbLeaveMessageRsp_descriptor_, &TPlatformArenaThumbLeaveMessageRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TPlatformArenaGetLeaveMessageLstReq_descriptor_, &TPlatformArenaGetLeaveMessageLstReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TPlatformArenaLeaveMessageData_descriptor_, &TPlatformArenaLeaveMessageData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TPlatformArenaGetLeaveMessageLstRsp_descriptor_, &TPlatformArenaGetLeaveMessageLstRsp::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_net_2fPlatformArena_2eproto() {
  delete TPlatformArenaExpectProcess::default_instance_;
  delete TPlatformArenaExpectProcess_reflection_;
  delete TPlatformArenaActualProcess::default_instance_;
  delete TPlatformArenaActualProcess_reflection_;
  delete TPlatformArenaGetBaseInfoRsp::default_instance_;
  delete TPlatformArenaGetBaseInfoRsp_reflection_;
  delete TPlatformArenaSignRsp::default_instance_;
  delete TPlatformArenaSignRsp_reflection_;
  delete TPlatformArenaData::default_instance_;
  delete TPlatformArenaData_reflection_;
  delete TPlatformArenaGetArenaInfoRsp::default_instance_;
  delete TPlatformArenaGetArenaInfoRsp_reflection_;
  delete TPlatformArenaChallengeReq::default_instance_;
  delete TPlatformArenaChallengeReq_reflection_;
  delete TPlatformArenaChallengeRsp::default_instance_;
  delete TPlatformArenaChallengeRsp_reflection_;
  delete THistorySeasonData::default_instance_;
  delete THistorySeasonData_reflection_;
  delete TPlatformArenaGetHistorySeasonRsp::default_instance_;
  delete TPlatformArenaGetHistorySeasonRsp_reflection_;
  delete TPlatformArenaGetSeasonPmRankReq::default_instance_;
  delete TPlatformArenaGetSeasonPmRankReq_reflection_;
  delete TSeasonPmRankData::default_instance_;
  delete TSeasonPmRankData_reflection_;
  delete TPlatformArenaGetSeasonPmRankRsp::default_instance_;
  delete TPlatformArenaGetSeasonPmRankRsp_reflection_;
  delete TPersonalReportData::default_instance_;
  delete TPersonalReportData_reflection_;
  delete TPlatformArenaGetPersonalReport::default_instance_;
  delete TPlatformArenaGetPersonalReport_reflection_;
  delete TFoeUserData::default_instance_;
  delete TFoeUserData_reflection_;
  delete TPlatformArenaGetFoeInfoRsp::default_instance_;
  delete TPlatformArenaGetFoeInfoRsp_reflection_;
  delete TBattlePosInfo::default_instance_;
  delete TBattlePosInfo_reflection_;
  delete TPlatformArenaFmtInfo::default_instance_;
  delete TPlatformArenaFmtInfo_reflection_;
  delete TPlatformArenaGetFmtRsp::default_instance_;
  delete TPlatformArenaGetFmtRsp_reflection_;
  delete TPlatformArenaSetFmtReq::default_instance_;
  delete TPlatformArenaSetFmtReq_reflection_;
  delete TPlatformArenaMatchData::default_instance_;
  delete TPlatformArenaMatchData_reflection_;
  delete TPlatformArenaGetPmMatchInfoReq::default_instance_;
  delete TPlatformArenaGetPmMatchInfoReq_reflection_;
  delete TPlatformArenaGetPmMatchInfoRsp::default_instance_;
  delete TPlatformArenaGetPmMatchInfoRsp_reflection_;
  delete TGuessRecordData::default_instance_;
  delete TGuessRecordData_reflection_;
  delete TPlatformArenaGetGuessRecordRsp::default_instance_;
  delete TPlatformArenaGetGuessRecordRsp_reflection_;
  delete TPlatformArenaGuessiongReq::default_instance_;
  delete TPlatformArenaGuessiongReq_reflection_;
  delete TPlatformArenaGetGuessingRewardReq::default_instance_;
  delete TPlatformArenaGetGuessingRewardReq_reflection_;
  delete TPlatformArenaGetGuessingRewardRsp::default_instance_;
  delete TPlatformArenaGetGuessingRewardRsp_reflection_;
  delete TGuessRecordNotify::default_instance_;
  delete TGuessRecordNotify_reflection_;
  delete TPlatformArenaGiveThumbReq::default_instance_;
  delete TPlatformArenaGiveThumbReq_reflection_;
  delete TPlatformArenaGiveThumbRsp::default_instance_;
  delete TPlatformArenaGiveThumbRsp_reflection_;
  delete TPlatformArenaBattleHeroStatus::default_instance_;
  delete TPlatformArenaBattleHeroStatus_reflection_;
  delete TPlatformArenaPreviewBattleResult::default_instance_;
  delete TPlatformArenaPreviewBattleResult_reflection_;
  delete TPlatformArenaGetBattlePreviewReq::default_instance_;
  delete TPlatformArenaGetBattlePreviewReq_reflection_;
  delete TPlatformArenaGetBattlePreviewRsp::default_instance_;
  delete TPlatformArenaGetBattlePreviewRsp_reflection_;
  delete TPlatformArenaFormationInfo::default_instance_;
  delete TPlatformArenaFormationInfo_reflection_;
  delete TPlatformArenaGetFormationReq::default_instance_;
  delete TPlatformArenaGetFormationReq_reflection_;
  delete TPlatformArenaGetFormationRsp::default_instance_;
  delete TPlatformArenaGetFormationRsp_reflection_;
  delete TArenaBattleReportData::default_instance_;
  delete TArenaBattleReportData_reflection_;
  delete TPlatformArenaGetArenaBattleReportRsp::default_instance_;
  delete TPlatformArenaGetArenaBattleReportRsp_reflection_;
  delete TPlatformArenaGetPeakInfoReq::default_instance_;
  delete TPlatformArenaGetPeakInfoReq_reflection_;
  delete TPlatformArenaPeakData::default_instance_;
  delete TPlatformArenaPeakData_reflection_;
  delete TPlatformArenaGetPeakInfoRsp::default_instance_;
  delete TPlatformArenaGetPeakInfoRsp_reflection_;
  delete TPlatformArenaBeAtkNotify::default_instance_;
  delete TPlatformArenaBeAtkNotify_reflection_;
  delete TPlatformArenaLeaveMessageReq::default_instance_;
  delete TPlatformArenaLeaveMessageReq_reflection_;
  delete TPlatformArenaDelLeaveMessageReq::default_instance_;
  delete TPlatformArenaDelLeaveMessageReq_reflection_;
  delete TPlatformArenaThumbLeaveMessageReq::default_instance_;
  delete TPlatformArenaThumbLeaveMessageReq_reflection_;
  delete TPlatformArenaThumbLeaveMessageRsp::default_instance_;
  delete TPlatformArenaThumbLeaveMessageRsp_reflection_;
  delete TPlatformArenaGetLeaveMessageLstReq::default_instance_;
  delete TPlatformArenaGetLeaveMessageLstReq_reflection_;
  delete TPlatformArenaLeaveMessageData::default_instance_;
  delete TPlatformArenaLeaveMessageData_reflection_;
  delete TPlatformArenaGetLeaveMessageLstRsp::default_instance_;
  delete TPlatformArenaGetLeaveMessageLstRsp_reflection_;
}

void protobuf_AddDesc_net_2fPlatformArena_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::pb::protobuf_AddDesc_net_2fUser_2eproto();
  ::pb::protobuf_AddDesc_net_2fCommonReward_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\027net/PlatformArena.proto\022\002pb\032\016net/User."
    "proto\032\026net/CommonReward.proto\"v\n\033TPlatfo"
    "rmArenaExpectProcess\022\r\n\005Round\030\001 \001(\r\022&\n\005S"
    "tage\030\002 \001(\0162\027.pb.EPlatformArenaStage\022\017\n\007B"
    "egTime\030\003 \001(\004\022\017\n\007EndTime\030\004 \001(\004\"g\n\033TPlatfo"
    "rmArenaActualProcess\0226\n\rExpectProcess\030\001 "
    "\001(\0132\037.pb.TPlatformArenaExpectProcess\022\020\n\010"
    "DoneTime\030\002 \001(\004\"\306\002\n\034TPlatformArenaGetBase"
    "InfoRsp\0229\n\020ArrExpectProcess\030\001 \003(\0132\037.pb.T"
    "PlatformArenaExpectProcess\022\020\n\010FuncOpen\030\002"
    " \001(\010\0226\n\rActualProcess\030\003 \001(\0132\037.pb.TPlatfo"
    "rmArenaActualProcess\022\020\n\010SeasonId\030\004 \001(\r\022\017"
    "\n\007GroupId\030\005 \001(\r\022\025\n\rTodayThumbNum\030\006 \001(\r\022\020"
    "\n\010CoolTime\030\007 \001(\004\022\017\n\007SceneId\030\010 \001(\t\022\020\n\010Sig"
    "nTime\030\t \001(\004\022\025\n\rMaxFightForce\030\n \001(\004\022\033\n\023Ne"
    "xtSeasonStartTime\030\013 \001(\004\")\n\025TPlatformAren"
    "aSignRsp\022\020\n\010SignTime\030\001 \001(\004\"\210\001\n\022TPlatform"
    "ArenaData\022\017\n\007GroupId\030\001 \001(\r\022\023\n\013ArenaTeamI"
    "d\030\002 \001(\r\022\017\n\007ArenaId\030\003 \001(\r\022\021\n\tArenaType\030\004 "
    "\001(\r\022(\n\013WinUserInfo\030\005 \001(\0132\023.pb.TUserSimpl"
    "eInfo\"M\n\035TPlatformArenaGetArenaInfoRsp\022,"
    "\n\014ArrArenaData\030\001 \003(\0132\026.pb.TPlatformArena"
    "Data\"K\n\032TPlatformArenaChallengeReq\022\017\n\007Gr"
    "oupId\030\001 \001(\r\022\017\n\007ArenaId\030\002 \001(\r\022\013\n\003Uid\030\003 \001("
    "\004\">\n\032TPlatformArenaChallengeRsp\022\016\n\006Resul"
    "t\030\001 \001(\r\022\020\n\010CoolTime\030\002 \001(\004\"\\\n\022THistorySea"
    "sonData\022\020\n\010SeasonId\030\001 \001(\r\022\021\n\tStartTime\030\002"
    " \001(\004\022\017\n\007EndTime\030\003 \001(\004\022\020\n\010GroupNum\030\004 \001(\r\""
    "U\n!TPlatformArenaGetHistorySeasonRsp\0220\n\020"
    "ArrHistorySeason\030\001 \003(\0132\026.pb.THistorySeas"
    "onData\"E\n TPlatformArenaGetSeasonPmRankR"
    "eq\022\020\n\010SeasonId\030\001 \001(\r\022\017\n\007GroupId\030\002 \001(\r\"Z\n"
    "\021TSeasonPmRankData\022%\n\010UserInfo\030\001 \001(\0132\023.p"
    "b.TUserSimpleInfo\022\014\n\004Rank\030\002 \001(\r\022\020\n\010Thumb"
    "Num\030\003 \001(\r\"q\n TPlatformArenaGetSeasonPmRa"
    "nkRsp\022\020\n\010SeasonId\030\001 \001(\r\022\017\n\007GroupId\030\002 \001(\r"
    "\022*\n\013ArrRankData\030\003 \003(\0132\025.pb.TSeasonPmRank"
    "Data\"\340\001\n\023TPersonalReportData\022\013\n\003Rid\030\001 \001("
    "\r\022\022\n\nReportType\030\002 \001(\r\022\016\n\006Result\030\003 \001(\r\022\017\n"
    "\007ArenaId\030\004 \001(\r\022\022\n\nReportTime\030\005 \001(\004\022\014\n\004RT"
    "id\030\006 \001(\r\022\021\n\tArenaType\030\007 \001(\r\022(\n\013AtkUserIn"
    "fo\030\010 \001(\0132\023.pb.TUserSimpleInfo\022(\n\013DefUser"
    "Info\030\t \001(\0132\023.pb.TUserSimpleInfo\"M\n\037TPlat"
    "formArenaGetPersonalReport\022*\n\tArrReport\030"
    "\001 \003(\0132\027.pb.TPersonalReportData\"]\n\014TFoeUs"
    "erData\022%\n\010UserInfo\030\001 \001(\0132\023.pb.TUserSimpl"
    "eInfo\022\020\n\010FoeValue\030\002 \001(\r\022\024\n\014FoeTimeStamp\030"
    "\003 \001(\004\"C\n\033TPlatformArenaGetFoeInfoRsp\022$\n\n"
    "ArrFoeUser\030\001 \003(\0132\020.pb.TFoeUserData\"*\n\016TB"
    "attlePosInfo\022\013\n\003Pos\030\001 \001(\r\022\013\n\003Hid\030\002 \001(\r\"J"
    "\n\025TPlatformArenaFmtInfo\022\r\n\005FmtId\030\001 \001(\r\022\""
    "\n\006ArrPos\030\002 \003(\0132\022.pb.TBattlePosInfo\"D\n\027TP"
    "latformArenaGetFmtRsp\022)\n\006ArrFmt\030\001 \003(\0132\031."
    "pb.TPlatformArenaFmtInfo\"D\n\027TPlatformAre"
    "naSetFmtReq\022)\n\006ArrFmt\030\001 \003(\0132\031.pb.TPlatfo"
    "rmArenaFmtInfo\"\232\001\n\027TPlatformArenaMatchDa"
    "ta\022\017\n\007MatchId\030\001 \001(\r\022\016\n\006AtkUid\030\002 \001(\004\022\016\n\006D"
    "efUid\030\003 \001(\004\022\020\n\010DoneTime\030\004 \001(\004\022\016\n\006WinUid\030"
    "\005 \001(\004\022\025\n\rAtkFightForce\030\006 \001(\004\022\025\n\rDefFight"
    "Force\030\007 \001(\004\"2\n\037TPlatformArenaGetPmMatchI"
    "nfoReq\022\017\n\007GroupId\030\001 \001(\r\"\224\001\n\037TPlatformAre"
    "naGetPmMatchInfoRsp\022\017\n\007GroupId\030\001 \001(\r\022(\n\013"
    "ArrUserInfo\030\002 \003(\0132\023.pb.TUserSimpleInfo\0226"
    "\n\021ArrArenaMatchData\030\003 \003(\0132\033.pb.TPlatform"
    "ArenaMatchData\"\317\001\n\020TGuessRecordData\022\017\n\007G"
    "roupId\030\001 \001(\r\022\017\n\007MatchId\030\002 \001(\r\022\016\n\006WinUid\030"
    "\003 \001(\004\022\023\n\013GuessStatus\030\004 \001(\r\022\020\n\010BetIndex\030\005"
    " \001(\r\022\026\n\016GuessAtkWinNum\030\006 \001(\r\022\026\n\016GuessDef"
    "WinNum\030\007 \001(\r\0222\n\006MsgLst\030\010 \003(\0132\".pb.TPlatf"
    "ormArenaLeaveMessageData\"O\n\037TPlatformAre"
    "naGetGuessRecordRsp\022,\n\016ArrGuessRecord\030\001 "
    "\003(\0132\024.pb.TGuessRecordData\"]\n\032TPlatformAr"
    "enaGuessiongReq\022\017\n\007GroupId\030\001 \001(\r\022\017\n\007Matc"
    "hId\030\002 \001(\r\022\013\n\003Uid\030\003 \001(\004\022\020\n\010BetIndex\030\004 \001(\r"
    "\"8\n\"TPlatformArenaGetGuessingRewardReq\022\022"
    "\n\nArrMatchId\030\001 \003(\r\"N\n\"TPlatformArenaGetG"
    "uessingRewardRsp\022(\n\rArrRewardInfo\030\001 \003(\0132"
    "\021.pb.TCommonReward\"\?\n\022TGuessRecordNotify"
    "\022)\n\013GuessRecord\030\001 \001(\0132\024.pb.TGuessRecordD"
    "ata\":\n\032TPlatformArenaGiveThumbReq\022\017\n\007Gro"
    "upId\030\001 \001(\r\022\013\n\003Uid\030\002 \001(\004\";\n\032TPlatformAren"
    "aGiveThumbRsp\022\013\n\003Uid\030\001 \001(\004\022\020\n\010ThumbNum\030\002"
    " \001(\r\"y\n\036TPlatformArenaBattleHeroStatus\022\014"
    "\n\004Htid\030\001 \001(\r\022\013\n\003Pos\030\002 \001(\r\022\020\n\010IsKilled\030\003 "
    "\001(\r\022\r\n\005Level\030\004 \001(\r\022\016\n\006StarLv\030\005 \001(\r\022\013\n\003Hi"
    "d\030\006 \001(\r\"\375\001\n!TPlatformArenaPreviewBattleR"
    "esult\022\023\n\013FormationId\030\001 \001(\r\022:\n\016ArrAtkHero"
    "Info\030\002 \003(\0132\".pb.TPlatformArenaBattleHero"
    "Status\022:\n\016ArrDefHeroInfo\030\003 \003(\0132\".pb.TPla"
    "tformArenaBattleHeroStatus\022\020\n\010IsAtkWin\030\004"
    " \001(\r\022\013\n\003Rid\030\005 \001(\004\022\025\n\ratkFightForce\030\006 \001(\004"
    "\022\025\n\rdefFightForce\030\007 \001(\004\"z\n!TPlatformAren"
    "aGetBattlePreviewReq\022\017\n\007ReqType\030\001 \001(\r\022\017\n"
    "\007MatchId\030\002 \001(\r\022\020\n\010ReportId\030\003 \001(\r\022\020\n\010Seas"
    "onId\030\004 \001(\r\022\017\n\007GroupId\030\005 \001(\r\"\265\001\n!TPlatfor"
    "mArenaGetBattlePreviewRsp\022(\n\013AtkUserInfo"
    "\030\001 \001(\0132\023.pb.TUserSimpleInfo\022(\n\013DefUserIn"
    "fo\030\002 \001(\0132\023.pb.TUserSimpleInfo\022<\n\rArrBatt"
    "leInfo\030\003 \003(\0132%.pb.TPlatformArenaPreviewB"
    "attleResult\"{\n\033TPlatformArenaFormationIn"
    "fo\022\023\n\013FormationId\030\001 \001(\r\0223\n\007UnitArr\030\002 \003(\013"
    "2\".pb.TPlatformArenaBattleHeroStatus\022\022\n\n"
    "FightForce\030\003 \001(\004\"L\n\035TPlatformArenaGetFor"
    "mationReq\022\r\n\005Round\030\001 \001(\r\022\013\n\003Uid\030\002 \001(\004\022\017\n"
    "\007GroupId\030\003 \001(\r\"V\n\035TPlatformArenaGetForma"
    "tionRsp\0225\n\014FormationArr\030\001 \003(\0132\037.pb.TPlat"
    "formArenaFormationInfo\"\262\001\n\026TArenaBattleR"
    "eportData\022\013\n\003Rid\030\001 \001(\r\022\022\n\nReportType\030\002 \001"
    "(\r\022\017\n\007ArenaId\030\003 \001(\r\022\022\n\nReportTime\030\004 \001(\004\022"
    "(\n\013AtkUserInfo\030\005 \001(\0132\023.pb.TUserSimpleInf"
    "o\022(\n\013DefUserInfo\030\006 \001(\0132\023.pb.TUserSimpleI"
    "nfo\"V\n%TPlatformArenaGetArenaBattleRepor"
    "tRsp\022-\n\tArrReport\030\001 \003(\0132\032.pb.TArenaBattl"
    "eReportData\"A\n\034TPlatformArenaGetPeakInfo"
    "Req\022\020\n\010SeasonId\030\001 \001(\r\022\017\n\007GroupId\030\002 \001(\r\"\215"
    "\001\n\026TPlatformArenaPeakData\022\017\n\007MatchId\030\001 \001"
    "(\r\022(\n\013AtkUserInfo\030\002 \001(\0132\023.pb.TUserSimple"
    "Info\022(\n\013DefUserInfo\030\003 \001(\0132\023.pb.TUserSimp"
    "leInfo\022\016\n\006WinUid\030\004 \001(\004\"O\n\034TPlatformArena"
    "GetPeakInfoRsp\022/\n\013ArrPeakData\030\001 \003(\0132\032.pb"
    ".TPlatformArenaPeakData\"R\n\031TPlatformAren"
    "aBeAtkNotify\022\017\n\007ArenaId\030\001 \001(\r\022$\n\007AtkUser"
    "\030\002 \001(\0132\023.pb.TUserSimpleInfo\"A\n\035TPlatform"
    "ArenaLeaveMessageReq\022\017\n\007MatchId\030\001 \001(\r\022\017\n"
    "\007Content\030\002 \001(\t\"B\n TPlatformArenaDelLeave"
    "MessageReq\022\017\n\007MatchId\030\001 \001(\r\022\r\n\005MsgId\030\002 \001"
    "(\r\"W\n\"TPlatformArenaThumbLeaveMessageReq"
    "\022\017\n\007MatchId\030\001 \001(\r\022\r\n\005MsgId\030\002 \001(\r\022\021\n\tThum"
    "bType\030\003 \001(\r\"\\\n\"TPlatformArenaThumbLeaveM"
    "essageRsp\022\017\n\007RetCode\030\001 \001(\r\022\020\n\010ThumbNum\030\002"
    " \001(\r\022\023\n\013NonThumbNum\030\003 \001(\r\"6\n#TPlatformAr"
    "enaGetLeaveMessageLstReq\022\017\n\007MatchId\030\001 \001("
    "\r\"\244\001\n\036TPlatformArenaLeaveMessageData\022\r\n\005"
    "MsgId\030\001 \001(\r\022\017\n\007Content\030\002 \001(\t\022&\n\tLeaveUse"
    "r\030\003 \001(\0132\023.pb.TUserSimpleInfo\022\020\n\010ThumbNum"
    "\030\004 \001(\r\022\023\n\013NonThumbNum\030\005 \001(\r\022\023\n\013ThumbStat"
    "us\030\006 \001(\r\"Y\n#TPlatformArenaGetLeaveMessag"
    "eLstRsp\0222\n\006MsgLst\030\001 \003(\0132\".pb.TPlatformAr"
    "enaLeaveMessageData*\275\002\n\023EPlatformArenaSt"
    "age\022 \n\034EPLATFORMARENA_STAGE_INVALID\020\000\022\035\n"
    "\031EPLATFORMARENA_STAGE_SIGN\020\001\022\036\n\032EPLATFOR"
    "MARENA_STAGE_GROUP\020\002\022!\n\035EPLATFORMARENA_S"
    "TAGE_AUDITION\020\003\022-\n)EPLATFORMARENA_STAGE_"
    "PROMOTION_PREPAREFMT\020\004\022*\n&EPLATFORMARENA"
    "_STAGE_PROMOTION_LOCKFMT\020\005\022(\n$EPLATFORMA"
    "RENA_STAGE_PROMOTION_FIGHT\020\006\022\035\n\031EPLATFOR"
    "MARENA_STAGE_SHOW\020d", 5859);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "net/PlatformArena.proto", &protobuf_RegisterTypes);
  TPlatformArenaExpectProcess::default_instance_ = new TPlatformArenaExpectProcess();
  TPlatformArenaActualProcess::default_instance_ = new TPlatformArenaActualProcess();
  TPlatformArenaGetBaseInfoRsp::default_instance_ = new TPlatformArenaGetBaseInfoRsp();
  TPlatformArenaSignRsp::default_instance_ = new TPlatformArenaSignRsp();
  TPlatformArenaData::default_instance_ = new TPlatformArenaData();
  TPlatformArenaGetArenaInfoRsp::default_instance_ = new TPlatformArenaGetArenaInfoRsp();
  TPlatformArenaChallengeReq::default_instance_ = new TPlatformArenaChallengeReq();
  TPlatformArenaChallengeRsp::default_instance_ = new TPlatformArenaChallengeRsp();
  THistorySeasonData::default_instance_ = new THistorySeasonData();
  TPlatformArenaGetHistorySeasonRsp::default_instance_ = new TPlatformArenaGetHistorySeasonRsp();
  TPlatformArenaGetSeasonPmRankReq::default_instance_ = new TPlatformArenaGetSeasonPmRankReq();
  TSeasonPmRankData::default_instance_ = new TSeasonPmRankData();
  TPlatformArenaGetSeasonPmRankRsp::default_instance_ = new TPlatformArenaGetSeasonPmRankRsp();
  TPersonalReportData::default_instance_ = new TPersonalReportData();
  TPlatformArenaGetPersonalReport::default_instance_ = new TPlatformArenaGetPersonalReport();
  TFoeUserData::default_instance_ = new TFoeUserData();
  TPlatformArenaGetFoeInfoRsp::default_instance_ = new TPlatformArenaGetFoeInfoRsp();
  TBattlePosInfo::default_instance_ = new TBattlePosInfo();
  TPlatformArenaFmtInfo::default_instance_ = new TPlatformArenaFmtInfo();
  TPlatformArenaGetFmtRsp::default_instance_ = new TPlatformArenaGetFmtRsp();
  TPlatformArenaSetFmtReq::default_instance_ = new TPlatformArenaSetFmtReq();
  TPlatformArenaMatchData::default_instance_ = new TPlatformArenaMatchData();
  TPlatformArenaGetPmMatchInfoReq::default_instance_ = new TPlatformArenaGetPmMatchInfoReq();
  TPlatformArenaGetPmMatchInfoRsp::default_instance_ = new TPlatformArenaGetPmMatchInfoRsp();
  TGuessRecordData::default_instance_ = new TGuessRecordData();
  TPlatformArenaGetGuessRecordRsp::default_instance_ = new TPlatformArenaGetGuessRecordRsp();
  TPlatformArenaGuessiongReq::default_instance_ = new TPlatformArenaGuessiongReq();
  TPlatformArenaGetGuessingRewardReq::default_instance_ = new TPlatformArenaGetGuessingRewardReq();
  TPlatformArenaGetGuessingRewardRsp::default_instance_ = new TPlatformArenaGetGuessingRewardRsp();
  TGuessRecordNotify::default_instance_ = new TGuessRecordNotify();
  TPlatformArenaGiveThumbReq::default_instance_ = new TPlatformArenaGiveThumbReq();
  TPlatformArenaGiveThumbRsp::default_instance_ = new TPlatformArenaGiveThumbRsp();
  TPlatformArenaBattleHeroStatus::default_instance_ = new TPlatformArenaBattleHeroStatus();
  TPlatformArenaPreviewBattleResult::default_instance_ = new TPlatformArenaPreviewBattleResult();
  TPlatformArenaGetBattlePreviewReq::default_instance_ = new TPlatformArenaGetBattlePreviewReq();
  TPlatformArenaGetBattlePreviewRsp::default_instance_ = new TPlatformArenaGetBattlePreviewRsp();
  TPlatformArenaFormationInfo::default_instance_ = new TPlatformArenaFormationInfo();
  TPlatformArenaGetFormationReq::default_instance_ = new TPlatformArenaGetFormationReq();
  TPlatformArenaGetFormationRsp::default_instance_ = new TPlatformArenaGetFormationRsp();
  TArenaBattleReportData::default_instance_ = new TArenaBattleReportData();
  TPlatformArenaGetArenaBattleReportRsp::default_instance_ = new TPlatformArenaGetArenaBattleReportRsp();
  TPlatformArenaGetPeakInfoReq::default_instance_ = new TPlatformArenaGetPeakInfoReq();
  TPlatformArenaPeakData::default_instance_ = new TPlatformArenaPeakData();
  TPlatformArenaGetPeakInfoRsp::default_instance_ = new TPlatformArenaGetPeakInfoRsp();
  TPlatformArenaBeAtkNotify::default_instance_ = new TPlatformArenaBeAtkNotify();
  TPlatformArenaLeaveMessageReq::default_instance_ = new TPlatformArenaLeaveMessageReq();
  TPlatformArenaDelLeaveMessageReq::default_instance_ = new TPlatformArenaDelLeaveMessageReq();
  TPlatformArenaThumbLeaveMessageReq::default_instance_ = new TPlatformArenaThumbLeaveMessageReq();
  TPlatformArenaThumbLeaveMessageRsp::default_instance_ = new TPlatformArenaThumbLeaveMessageRsp();
  TPlatformArenaGetLeaveMessageLstReq::default_instance_ = new TPlatformArenaGetLeaveMessageLstReq();
  TPlatformArenaLeaveMessageData::default_instance_ = new TPlatformArenaLeaveMessageData();
  TPlatformArenaGetLeaveMessageLstRsp::default_instance_ = new TPlatformArenaGetLeaveMessageLstRsp();
  TPlatformArenaExpectProcess::default_instance_->InitAsDefaultInstance();
  TPlatformArenaActualProcess::default_instance_->InitAsDefaultInstance();
  TPlatformArenaGetBaseInfoRsp::default_instance_->InitAsDefaultInstance();
  TPlatformArenaSignRsp::default_instance_->InitAsDefaultInstance();
  TPlatformArenaData::default_instance_->InitAsDefaultInstance();
  TPlatformArenaGetArenaInfoRsp::default_instance_->InitAsDefaultInstance();
  TPlatformArenaChallengeReq::default_instance_->InitAsDefaultInstance();
  TPlatformArenaChallengeRsp::default_instance_->InitAsDefaultInstance();
  THistorySeasonData::default_instance_->InitAsDefaultInstance();
  TPlatformArenaGetHistorySeasonRsp::default_instance_->InitAsDefaultInstance();
  TPlatformArenaGetSeasonPmRankReq::default_instance_->InitAsDefaultInstance();
  TSeasonPmRankData::default_instance_->InitAsDefaultInstance();
  TPlatformArenaGetSeasonPmRankRsp::default_instance_->InitAsDefaultInstance();
  TPersonalReportData::default_instance_->InitAsDefaultInstance();
  TPlatformArenaGetPersonalReport::default_instance_->InitAsDefaultInstance();
  TFoeUserData::default_instance_->InitAsDefaultInstance();
  TPlatformArenaGetFoeInfoRsp::default_instance_->InitAsDefaultInstance();
  TBattlePosInfo::default_instance_->InitAsDefaultInstance();
  TPlatformArenaFmtInfo::default_instance_->InitAsDefaultInstance();
  TPlatformArenaGetFmtRsp::default_instance_->InitAsDefaultInstance();
  TPlatformArenaSetFmtReq::default_instance_->InitAsDefaultInstance();
  TPlatformArenaMatchData::default_instance_->InitAsDefaultInstance();
  TPlatformArenaGetPmMatchInfoReq::default_instance_->InitAsDefaultInstance();
  TPlatformArenaGetPmMatchInfoRsp::default_instance_->InitAsDefaultInstance();
  TGuessRecordData::default_instance_->InitAsDefaultInstance();
  TPlatformArenaGetGuessRecordRsp::default_instance_->InitAsDefaultInstance();
  TPlatformArenaGuessiongReq::default_instance_->InitAsDefaultInstance();
  TPlatformArenaGetGuessingRewardReq::default_instance_->InitAsDefaultInstance();
  TPlatformArenaGetGuessingRewardRsp::default_instance_->InitAsDefaultInstance();
  TGuessRecordNotify::default_instance_->InitAsDefaultInstance();
  TPlatformArenaGiveThumbReq::default_instance_->InitAsDefaultInstance();
  TPlatformArenaGiveThumbRsp::default_instance_->InitAsDefaultInstance();
  TPlatformArenaBattleHeroStatus::default_instance_->InitAsDefaultInstance();
  TPlatformArenaPreviewBattleResult::default_instance_->InitAsDefaultInstance();
  TPlatformArenaGetBattlePreviewReq::default_instance_->InitAsDefaultInstance();
  TPlatformArenaGetBattlePreviewRsp::default_instance_->InitAsDefaultInstance();
  TPlatformArenaFormationInfo::default_instance_->InitAsDefaultInstance();
  TPlatformArenaGetFormationReq::default_instance_->InitAsDefaultInstance();
  TPlatformArenaGetFormationRsp::default_instance_->InitAsDefaultInstance();
  TArenaBattleReportData::default_instance_->InitAsDefaultInstance();
  TPlatformArenaGetArenaBattleReportRsp::default_instance_->InitAsDefaultInstance();
  TPlatformArenaGetPeakInfoReq::default_instance_->InitAsDefaultInstance();
  TPlatformArenaPeakData::default_instance_->InitAsDefaultInstance();
  TPlatformArenaGetPeakInfoRsp::default_instance_->InitAsDefaultInstance();
  TPlatformArenaBeAtkNotify::default_instance_->InitAsDefaultInstance();
  TPlatformArenaLeaveMessageReq::default_instance_->InitAsDefaultInstance();
  TPlatformArenaDelLeaveMessageReq::default_instance_->InitAsDefaultInstance();
  TPlatformArenaThumbLeaveMessageReq::default_instance_->InitAsDefaultInstance();
  TPlatformArenaThumbLeaveMessageRsp::default_instance_->InitAsDefaultInstance();
  TPlatformArenaGetLeaveMessageLstReq::default_instance_->InitAsDefaultInstance();
  TPlatformArenaLeaveMessageData::default_instance_->InitAsDefaultInstance();
  TPlatformArenaGetLeaveMessageLstRsp::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_net_2fPlatformArena_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_net_2fPlatformArena_2eproto {
  StaticDescriptorInitializer_net_2fPlatformArena_2eproto() {
    protobuf_AddDesc_net_2fPlatformArena_2eproto();
  }
} static_descriptor_initializer_net_2fPlatformArena_2eproto_;
const ::google::protobuf::EnumDescriptor* EPlatformArenaStage_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EPlatformArenaStage_descriptor_;
}
bool EPlatformArenaStage_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 100:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#ifndef _MSC_VER
const int TPlatformArenaExpectProcess::kRoundFieldNumber;
const int TPlatformArenaExpectProcess::kStageFieldNumber;
const int TPlatformArenaExpectProcess::kBegTimeFieldNumber;
const int TPlatformArenaExpectProcess::kEndTimeFieldNumber;
#endif  // !_MSC_VER

TPlatformArenaExpectProcess::TPlatformArenaExpectProcess()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TPlatformArenaExpectProcess)
}

void TPlatformArenaExpectProcess::InitAsDefaultInstance() {
}

TPlatformArenaExpectProcess::TPlatformArenaExpectProcess(const TPlatformArenaExpectProcess& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TPlatformArenaExpectProcess)
}

void TPlatformArenaExpectProcess::SharedCtor() {
  _cached_size_ = 0;
  round_ = 0u;
  stage_ = 0;
  begtime_ = GOOGLE_ULONGLONG(0);
  endtime_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TPlatformArenaExpectProcess::~TPlatformArenaExpectProcess() {
  // @@protoc_insertion_point(destructor:pb.TPlatformArenaExpectProcess)
  SharedDtor();
}

void TPlatformArenaExpectProcess::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TPlatformArenaExpectProcess::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TPlatformArenaExpectProcess::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TPlatformArenaExpectProcess_descriptor_;
}

const TPlatformArenaExpectProcess& TPlatformArenaExpectProcess::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fPlatformArena_2eproto();
  return *default_instance_;
}

TPlatformArenaExpectProcess* TPlatformArenaExpectProcess::default_instance_ = NULL;

TPlatformArenaExpectProcess* TPlatformArenaExpectProcess::New() const {
  return new TPlatformArenaExpectProcess;
}

void TPlatformArenaExpectProcess::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<TPlatformArenaExpectProcess*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(round_, endtime_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TPlatformArenaExpectProcess::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TPlatformArenaExpectProcess)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 Round = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &round_)));
          set_has_round();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_Stage;
        break;
      }

      // optional .pb.EPlatformArenaStage Stage = 2;
      case 2: {
        if (tag == 16) {
         parse_Stage:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::pb::EPlatformArenaStage_IsValid(value)) {
            set_stage(static_cast< ::pb::EPlatformArenaStage >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_BegTime;
        break;
      }

      // optional uint64 BegTime = 3;
      case 3: {
        if (tag == 24) {
         parse_BegTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &begtime_)));
          set_has_begtime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_EndTime;
        break;
      }

      // optional uint64 EndTime = 4;
      case 4: {
        if (tag == 32) {
         parse_EndTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &endtime_)));
          set_has_endtime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TPlatformArenaExpectProcess)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TPlatformArenaExpectProcess)
  return false;
#undef DO_
}

void TPlatformArenaExpectProcess::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TPlatformArenaExpectProcess)
  // optional uint32 Round = 1;
  if (has_round()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->round(), output);
  }

  // optional .pb.EPlatformArenaStage Stage = 2;
  if (has_stage()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->stage(), output);
  }

  // optional uint64 BegTime = 3;
  if (has_begtime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->begtime(), output);
  }

  // optional uint64 EndTime = 4;
  if (has_endtime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->endtime(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TPlatformArenaExpectProcess)
}

::google::protobuf::uint8* TPlatformArenaExpectProcess::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TPlatformArenaExpectProcess)
  // optional uint32 Round = 1;
  if (has_round()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->round(), target);
  }

  // optional .pb.EPlatformArenaStage Stage = 2;
  if (has_stage()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->stage(), target);
  }

  // optional uint64 BegTime = 3;
  if (has_begtime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->begtime(), target);
  }

  // optional uint64 EndTime = 4;
  if (has_endtime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->endtime(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TPlatformArenaExpectProcess)
  return target;
}

int TPlatformArenaExpectProcess::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 Round = 1;
    if (has_round()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->round());
    }

    // optional .pb.EPlatformArenaStage Stage = 2;
    if (has_stage()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->stage());
    }

    // optional uint64 BegTime = 3;
    if (has_begtime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->begtime());
    }

    // optional uint64 EndTime = 4;
    if (has_endtime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->endtime());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TPlatformArenaExpectProcess::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TPlatformArenaExpectProcess* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TPlatformArenaExpectProcess*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TPlatformArenaExpectProcess::MergeFrom(const TPlatformArenaExpectProcess& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_round()) {
      set_round(from.round());
    }
    if (from.has_stage()) {
      set_stage(from.stage());
    }
    if (from.has_begtime()) {
      set_begtime(from.begtime());
    }
    if (from.has_endtime()) {
      set_endtime(from.endtime());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TPlatformArenaExpectProcess::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TPlatformArenaExpectProcess::CopyFrom(const TPlatformArenaExpectProcess& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TPlatformArenaExpectProcess::IsInitialized() const {

  return true;
}

void TPlatformArenaExpectProcess::Swap(TPlatformArenaExpectProcess* other) {
  if (other != this) {
    std::swap(round_, other->round_);
    std::swap(stage_, other->stage_);
    std::swap(begtime_, other->begtime_);
    std::swap(endtime_, other->endtime_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TPlatformArenaExpectProcess::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TPlatformArenaExpectProcess_descriptor_;
  metadata.reflection = TPlatformArenaExpectProcess_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TPlatformArenaActualProcess::kExpectProcessFieldNumber;
const int TPlatformArenaActualProcess::kDoneTimeFieldNumber;
#endif  // !_MSC_VER

TPlatformArenaActualProcess::TPlatformArenaActualProcess()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TPlatformArenaActualProcess)
}

void TPlatformArenaActualProcess::InitAsDefaultInstance() {
  expectprocess_ = const_cast< ::pb::TPlatformArenaExpectProcess*>(&::pb::TPlatformArenaExpectProcess::default_instance());
}

TPlatformArenaActualProcess::TPlatformArenaActualProcess(const TPlatformArenaActualProcess& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TPlatformArenaActualProcess)
}

void TPlatformArenaActualProcess::SharedCtor() {
  _cached_size_ = 0;
  expectprocess_ = NULL;
  donetime_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TPlatformArenaActualProcess::~TPlatformArenaActualProcess() {
  // @@protoc_insertion_point(destructor:pb.TPlatformArenaActualProcess)
  SharedDtor();
}

void TPlatformArenaActualProcess::SharedDtor() {
  if (this != default_instance_) {
    delete expectprocess_;
  }
}

void TPlatformArenaActualProcess::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TPlatformArenaActualProcess::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TPlatformArenaActualProcess_descriptor_;
}

const TPlatformArenaActualProcess& TPlatformArenaActualProcess::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fPlatformArena_2eproto();
  return *default_instance_;
}

TPlatformArenaActualProcess* TPlatformArenaActualProcess::default_instance_ = NULL;

TPlatformArenaActualProcess* TPlatformArenaActualProcess::New() const {
  return new TPlatformArenaActualProcess;
}

void TPlatformArenaActualProcess::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    if (has_expectprocess()) {
      if (expectprocess_ != NULL) expectprocess_->::pb::TPlatformArenaExpectProcess::Clear();
    }
    donetime_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TPlatformArenaActualProcess::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TPlatformArenaActualProcess)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .pb.TPlatformArenaExpectProcess ExpectProcess = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_expectprocess()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_DoneTime;
        break;
      }

      // optional uint64 DoneTime = 2;
      case 2: {
        if (tag == 16) {
         parse_DoneTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &donetime_)));
          set_has_donetime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TPlatformArenaActualProcess)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TPlatformArenaActualProcess)
  return false;
#undef DO_
}

void TPlatformArenaActualProcess::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TPlatformArenaActualProcess)
  // optional .pb.TPlatformArenaExpectProcess ExpectProcess = 1;
  if (has_expectprocess()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->expectprocess(), output);
  }

  // optional uint64 DoneTime = 2;
  if (has_donetime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->donetime(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TPlatformArenaActualProcess)
}

::google::protobuf::uint8* TPlatformArenaActualProcess::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TPlatformArenaActualProcess)
  // optional .pb.TPlatformArenaExpectProcess ExpectProcess = 1;
  if (has_expectprocess()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->expectprocess(), target);
  }

  // optional uint64 DoneTime = 2;
  if (has_donetime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->donetime(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TPlatformArenaActualProcess)
  return target;
}

int TPlatformArenaActualProcess::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .pb.TPlatformArenaExpectProcess ExpectProcess = 1;
    if (has_expectprocess()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->expectprocess());
    }

    // optional uint64 DoneTime = 2;
    if (has_donetime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->donetime());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TPlatformArenaActualProcess::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TPlatformArenaActualProcess* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TPlatformArenaActualProcess*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TPlatformArenaActualProcess::MergeFrom(const TPlatformArenaActualProcess& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_expectprocess()) {
      mutable_expectprocess()->::pb::TPlatformArenaExpectProcess::MergeFrom(from.expectprocess());
    }
    if (from.has_donetime()) {
      set_donetime(from.donetime());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TPlatformArenaActualProcess::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TPlatformArenaActualProcess::CopyFrom(const TPlatformArenaActualProcess& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TPlatformArenaActualProcess::IsInitialized() const {

  return true;
}

void TPlatformArenaActualProcess::Swap(TPlatformArenaActualProcess* other) {
  if (other != this) {
    std::swap(expectprocess_, other->expectprocess_);
    std::swap(donetime_, other->donetime_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TPlatformArenaActualProcess::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TPlatformArenaActualProcess_descriptor_;
  metadata.reflection = TPlatformArenaActualProcess_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TPlatformArenaGetBaseInfoRsp::kArrExpectProcessFieldNumber;
const int TPlatformArenaGetBaseInfoRsp::kFuncOpenFieldNumber;
const int TPlatformArenaGetBaseInfoRsp::kActualProcessFieldNumber;
const int TPlatformArenaGetBaseInfoRsp::kSeasonIdFieldNumber;
const int TPlatformArenaGetBaseInfoRsp::kGroupIdFieldNumber;
const int TPlatformArenaGetBaseInfoRsp::kTodayThumbNumFieldNumber;
const int TPlatformArenaGetBaseInfoRsp::kCoolTimeFieldNumber;
const int TPlatformArenaGetBaseInfoRsp::kSceneIdFieldNumber;
const int TPlatformArenaGetBaseInfoRsp::kSignTimeFieldNumber;
const int TPlatformArenaGetBaseInfoRsp::kMaxFightForceFieldNumber;
const int TPlatformArenaGetBaseInfoRsp::kNextSeasonStartTimeFieldNumber;
#endif  // !_MSC_VER

TPlatformArenaGetBaseInfoRsp::TPlatformArenaGetBaseInfoRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TPlatformArenaGetBaseInfoRsp)
}

void TPlatformArenaGetBaseInfoRsp::InitAsDefaultInstance() {
  actualprocess_ = const_cast< ::pb::TPlatformArenaActualProcess*>(&::pb::TPlatformArenaActualProcess::default_instance());
}

TPlatformArenaGetBaseInfoRsp::TPlatformArenaGetBaseInfoRsp(const TPlatformArenaGetBaseInfoRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TPlatformArenaGetBaseInfoRsp)
}

void TPlatformArenaGetBaseInfoRsp::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  funcopen_ = false;
  actualprocess_ = NULL;
  seasonid_ = 0u;
  groupid_ = 0u;
  todaythumbnum_ = 0u;
  cooltime_ = GOOGLE_ULONGLONG(0);
  sceneid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  signtime_ = GOOGLE_ULONGLONG(0);
  maxfightforce_ = GOOGLE_ULONGLONG(0);
  nextseasonstarttime_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TPlatformArenaGetBaseInfoRsp::~TPlatformArenaGetBaseInfoRsp() {
  // @@protoc_insertion_point(destructor:pb.TPlatformArenaGetBaseInfoRsp)
  SharedDtor();
}

void TPlatformArenaGetBaseInfoRsp::SharedDtor() {
  if (sceneid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete sceneid_;
  }
  if (this != default_instance_) {
    delete actualprocess_;
  }
}

void TPlatformArenaGetBaseInfoRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TPlatformArenaGetBaseInfoRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TPlatformArenaGetBaseInfoRsp_descriptor_;
}

const TPlatformArenaGetBaseInfoRsp& TPlatformArenaGetBaseInfoRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fPlatformArena_2eproto();
  return *default_instance_;
}

TPlatformArenaGetBaseInfoRsp* TPlatformArenaGetBaseInfoRsp::default_instance_ = NULL;

TPlatformArenaGetBaseInfoRsp* TPlatformArenaGetBaseInfoRsp::New() const {
  return new TPlatformArenaGetBaseInfoRsp;
}

void TPlatformArenaGetBaseInfoRsp::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<TPlatformArenaGetBaseInfoRsp*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 254) {
    ZR_(funcopen_, cooltime_);
    if (has_actualprocess()) {
      if (actualprocess_ != NULL) actualprocess_->::pb::TPlatformArenaActualProcess::Clear();
    }
    if (has_sceneid()) {
      if (sceneid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        sceneid_->clear();
      }
    }
  }
  ZR_(signtime_, nextseasonstarttime_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  arrexpectprocess_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TPlatformArenaGetBaseInfoRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TPlatformArenaGetBaseInfoRsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .pb.TPlatformArenaExpectProcess ArrExpectProcess = 1;
      case 1: {
        if (tag == 10) {
         parse_ArrExpectProcess:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_arrexpectprocess()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_ArrExpectProcess;
        if (input->ExpectTag(16)) goto parse_FuncOpen;
        break;
      }

      // optional bool FuncOpen = 2;
      case 2: {
        if (tag == 16) {
         parse_FuncOpen:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &funcopen_)));
          set_has_funcopen();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_ActualProcess;
        break;
      }

      // optional .pb.TPlatformArenaActualProcess ActualProcess = 3;
      case 3: {
        if (tag == 26) {
         parse_ActualProcess:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_actualprocess()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_SeasonId;
        break;
      }

      // optional uint32 SeasonId = 4;
      case 4: {
        if (tag == 32) {
         parse_SeasonId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &seasonid_)));
          set_has_seasonid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_GroupId;
        break;
      }

      // optional uint32 GroupId = 5;
      case 5: {
        if (tag == 40) {
         parse_GroupId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &groupid_)));
          set_has_groupid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_TodayThumbNum;
        break;
      }

      // optional uint32 TodayThumbNum = 6;
      case 6: {
        if (tag == 48) {
         parse_TodayThumbNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &todaythumbnum_)));
          set_has_todaythumbnum();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_CoolTime;
        break;
      }

      // optional uint64 CoolTime = 7;
      case 7: {
        if (tag == 56) {
         parse_CoolTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &cooltime_)));
          set_has_cooltime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_SceneId;
        break;
      }

      // optional string SceneId = 8;
      case 8: {
        if (tag == 66) {
         parse_SceneId:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_sceneid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->sceneid().data(), this->sceneid().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "sceneid");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_SignTime;
        break;
      }

      // optional uint64 SignTime = 9;
      case 9: {
        if (tag == 72) {
         parse_SignTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &signtime_)));
          set_has_signtime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(80)) goto parse_MaxFightForce;
        break;
      }

      // optional uint64 MaxFightForce = 10;
      case 10: {
        if (tag == 80) {
         parse_MaxFightForce:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &maxfightforce_)));
          set_has_maxfightforce();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(88)) goto parse_NextSeasonStartTime;
        break;
      }

      // optional uint64 NextSeasonStartTime = 11;
      case 11: {
        if (tag == 88) {
         parse_NextSeasonStartTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &nextseasonstarttime_)));
          set_has_nextseasonstarttime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TPlatformArenaGetBaseInfoRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TPlatformArenaGetBaseInfoRsp)
  return false;
#undef DO_
}

void TPlatformArenaGetBaseInfoRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TPlatformArenaGetBaseInfoRsp)
  // repeated .pb.TPlatformArenaExpectProcess ArrExpectProcess = 1;
  for (int i = 0; i < this->arrexpectprocess_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->arrexpectprocess(i), output);
  }

  // optional bool FuncOpen = 2;
  if (has_funcopen()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->funcopen(), output);
  }

  // optional .pb.TPlatformArenaActualProcess ActualProcess = 3;
  if (has_actualprocess()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->actualprocess(), output);
  }

  // optional uint32 SeasonId = 4;
  if (has_seasonid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->seasonid(), output);
  }

  // optional uint32 GroupId = 5;
  if (has_groupid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->groupid(), output);
  }

  // optional uint32 TodayThumbNum = 6;
  if (has_todaythumbnum()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->todaythumbnum(), output);
  }

  // optional uint64 CoolTime = 7;
  if (has_cooltime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(7, this->cooltime(), output);
  }

  // optional string SceneId = 8;
  if (has_sceneid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->sceneid().data(), this->sceneid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "sceneid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      8, this->sceneid(), output);
  }

  // optional uint64 SignTime = 9;
  if (has_signtime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(9, this->signtime(), output);
  }

  // optional uint64 MaxFightForce = 10;
  if (has_maxfightforce()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(10, this->maxfightforce(), output);
  }

  // optional uint64 NextSeasonStartTime = 11;
  if (has_nextseasonstarttime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(11, this->nextseasonstarttime(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TPlatformArenaGetBaseInfoRsp)
}

::google::protobuf::uint8* TPlatformArenaGetBaseInfoRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TPlatformArenaGetBaseInfoRsp)
  // repeated .pb.TPlatformArenaExpectProcess ArrExpectProcess = 1;
  for (int i = 0; i < this->arrexpectprocess_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->arrexpectprocess(i), target);
  }

  // optional bool FuncOpen = 2;
  if (has_funcopen()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->funcopen(), target);
  }

  // optional .pb.TPlatformArenaActualProcess ActualProcess = 3;
  if (has_actualprocess()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->actualprocess(), target);
  }

  // optional uint32 SeasonId = 4;
  if (has_seasonid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->seasonid(), target);
  }

  // optional uint32 GroupId = 5;
  if (has_groupid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->groupid(), target);
  }

  // optional uint32 TodayThumbNum = 6;
  if (has_todaythumbnum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->todaythumbnum(), target);
  }

  // optional uint64 CoolTime = 7;
  if (has_cooltime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(7, this->cooltime(), target);
  }

  // optional string SceneId = 8;
  if (has_sceneid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->sceneid().data(), this->sceneid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "sceneid");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->sceneid(), target);
  }

  // optional uint64 SignTime = 9;
  if (has_signtime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(9, this->signtime(), target);
  }

  // optional uint64 MaxFightForce = 10;
  if (has_maxfightforce()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(10, this->maxfightforce(), target);
  }

  // optional uint64 NextSeasonStartTime = 11;
  if (has_nextseasonstarttime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(11, this->nextseasonstarttime(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TPlatformArenaGetBaseInfoRsp)
  return target;
}

int TPlatformArenaGetBaseInfoRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // optional bool FuncOpen = 2;
    if (has_funcopen()) {
      total_size += 1 + 1;
    }

    // optional .pb.TPlatformArenaActualProcess ActualProcess = 3;
    if (has_actualprocess()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->actualprocess());
    }

    // optional uint32 SeasonId = 4;
    if (has_seasonid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->seasonid());
    }

    // optional uint32 GroupId = 5;
    if (has_groupid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->groupid());
    }

    // optional uint32 TodayThumbNum = 6;
    if (has_todaythumbnum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->todaythumbnum());
    }

    // optional uint64 CoolTime = 7;
    if (has_cooltime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->cooltime());
    }

    // optional string SceneId = 8;
    if (has_sceneid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->sceneid());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional uint64 SignTime = 9;
    if (has_signtime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->signtime());
    }

    // optional uint64 MaxFightForce = 10;
    if (has_maxfightforce()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->maxfightforce());
    }

    // optional uint64 NextSeasonStartTime = 11;
    if (has_nextseasonstarttime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->nextseasonstarttime());
    }

  }
  // repeated .pb.TPlatformArenaExpectProcess ArrExpectProcess = 1;
  total_size += 1 * this->arrexpectprocess_size();
  for (int i = 0; i < this->arrexpectprocess_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->arrexpectprocess(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TPlatformArenaGetBaseInfoRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TPlatformArenaGetBaseInfoRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TPlatformArenaGetBaseInfoRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TPlatformArenaGetBaseInfoRsp::MergeFrom(const TPlatformArenaGetBaseInfoRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  arrexpectprocess_.MergeFrom(from.arrexpectprocess_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_funcopen()) {
      set_funcopen(from.funcopen());
    }
    if (from.has_actualprocess()) {
      mutable_actualprocess()->::pb::TPlatformArenaActualProcess::MergeFrom(from.actualprocess());
    }
    if (from.has_seasonid()) {
      set_seasonid(from.seasonid());
    }
    if (from.has_groupid()) {
      set_groupid(from.groupid());
    }
    if (from.has_todaythumbnum()) {
      set_todaythumbnum(from.todaythumbnum());
    }
    if (from.has_cooltime()) {
      set_cooltime(from.cooltime());
    }
    if (from.has_sceneid()) {
      set_sceneid(from.sceneid());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_signtime()) {
      set_signtime(from.signtime());
    }
    if (from.has_maxfightforce()) {
      set_maxfightforce(from.maxfightforce());
    }
    if (from.has_nextseasonstarttime()) {
      set_nextseasonstarttime(from.nextseasonstarttime());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TPlatformArenaGetBaseInfoRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TPlatformArenaGetBaseInfoRsp::CopyFrom(const TPlatformArenaGetBaseInfoRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TPlatformArenaGetBaseInfoRsp::IsInitialized() const {

  return true;
}

void TPlatformArenaGetBaseInfoRsp::Swap(TPlatformArenaGetBaseInfoRsp* other) {
  if (other != this) {
    arrexpectprocess_.Swap(&other->arrexpectprocess_);
    std::swap(funcopen_, other->funcopen_);
    std::swap(actualprocess_, other->actualprocess_);
    std::swap(seasonid_, other->seasonid_);
    std::swap(groupid_, other->groupid_);
    std::swap(todaythumbnum_, other->todaythumbnum_);
    std::swap(cooltime_, other->cooltime_);
    std::swap(sceneid_, other->sceneid_);
    std::swap(signtime_, other->signtime_);
    std::swap(maxfightforce_, other->maxfightforce_);
    std::swap(nextseasonstarttime_, other->nextseasonstarttime_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TPlatformArenaGetBaseInfoRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TPlatformArenaGetBaseInfoRsp_descriptor_;
  metadata.reflection = TPlatformArenaGetBaseInfoRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TPlatformArenaSignRsp::kSignTimeFieldNumber;
#endif  // !_MSC_VER

TPlatformArenaSignRsp::TPlatformArenaSignRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TPlatformArenaSignRsp)
}

void TPlatformArenaSignRsp::InitAsDefaultInstance() {
}

TPlatformArenaSignRsp::TPlatformArenaSignRsp(const TPlatformArenaSignRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TPlatformArenaSignRsp)
}

void TPlatformArenaSignRsp::SharedCtor() {
  _cached_size_ = 0;
  signtime_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TPlatformArenaSignRsp::~TPlatformArenaSignRsp() {
  // @@protoc_insertion_point(destructor:pb.TPlatformArenaSignRsp)
  SharedDtor();
}

void TPlatformArenaSignRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TPlatformArenaSignRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TPlatformArenaSignRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TPlatformArenaSignRsp_descriptor_;
}

const TPlatformArenaSignRsp& TPlatformArenaSignRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fPlatformArena_2eproto();
  return *default_instance_;
}

TPlatformArenaSignRsp* TPlatformArenaSignRsp::default_instance_ = NULL;

TPlatformArenaSignRsp* TPlatformArenaSignRsp::New() const {
  return new TPlatformArenaSignRsp;
}

void TPlatformArenaSignRsp::Clear() {
  signtime_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TPlatformArenaSignRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TPlatformArenaSignRsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 SignTime = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &signtime_)));
          set_has_signtime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TPlatformArenaSignRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TPlatformArenaSignRsp)
  return false;
#undef DO_
}

void TPlatformArenaSignRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TPlatformArenaSignRsp)
  // optional uint64 SignTime = 1;
  if (has_signtime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->signtime(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TPlatformArenaSignRsp)
}

::google::protobuf::uint8* TPlatformArenaSignRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TPlatformArenaSignRsp)
  // optional uint64 SignTime = 1;
  if (has_signtime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->signtime(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TPlatformArenaSignRsp)
  return target;
}

int TPlatformArenaSignRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 SignTime = 1;
    if (has_signtime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->signtime());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TPlatformArenaSignRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TPlatformArenaSignRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TPlatformArenaSignRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TPlatformArenaSignRsp::MergeFrom(const TPlatformArenaSignRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_signtime()) {
      set_signtime(from.signtime());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TPlatformArenaSignRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TPlatformArenaSignRsp::CopyFrom(const TPlatformArenaSignRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TPlatformArenaSignRsp::IsInitialized() const {

  return true;
}

void TPlatformArenaSignRsp::Swap(TPlatformArenaSignRsp* other) {
  if (other != this) {
    std::swap(signtime_, other->signtime_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TPlatformArenaSignRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TPlatformArenaSignRsp_descriptor_;
  metadata.reflection = TPlatformArenaSignRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TPlatformArenaData::kGroupIdFieldNumber;
const int TPlatformArenaData::kArenaTeamIdFieldNumber;
const int TPlatformArenaData::kArenaIdFieldNumber;
const int TPlatformArenaData::kArenaTypeFieldNumber;
const int TPlatformArenaData::kWinUserInfoFieldNumber;
#endif  // !_MSC_VER

TPlatformArenaData::TPlatformArenaData()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TPlatformArenaData)
}

void TPlatformArenaData::InitAsDefaultInstance() {
  winuserinfo_ = const_cast< ::pb::TUserSimpleInfo*>(&::pb::TUserSimpleInfo::default_instance());
}

TPlatformArenaData::TPlatformArenaData(const TPlatformArenaData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TPlatformArenaData)
}

void TPlatformArenaData::SharedCtor() {
  _cached_size_ = 0;
  groupid_ = 0u;
  arenateamid_ = 0u;
  arenaid_ = 0u;
  arenatype_ = 0u;
  winuserinfo_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TPlatformArenaData::~TPlatformArenaData() {
  // @@protoc_insertion_point(destructor:pb.TPlatformArenaData)
  SharedDtor();
}

void TPlatformArenaData::SharedDtor() {
  if (this != default_instance_) {
    delete winuserinfo_;
  }
}

void TPlatformArenaData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TPlatformArenaData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TPlatformArenaData_descriptor_;
}

const TPlatformArenaData& TPlatformArenaData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fPlatformArena_2eproto();
  return *default_instance_;
}

TPlatformArenaData* TPlatformArenaData::default_instance_ = NULL;

TPlatformArenaData* TPlatformArenaData::New() const {
  return new TPlatformArenaData;
}

void TPlatformArenaData::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<TPlatformArenaData*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 31) {
    ZR_(groupid_, arenatype_);
    if (has_winuserinfo()) {
      if (winuserinfo_ != NULL) winuserinfo_->::pb::TUserSimpleInfo::Clear();
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TPlatformArenaData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TPlatformArenaData)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 GroupId = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &groupid_)));
          set_has_groupid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_ArenaTeamId;
        break;
      }

      // optional uint32 ArenaTeamId = 2;
      case 2: {
        if (tag == 16) {
         parse_ArenaTeamId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &arenateamid_)));
          set_has_arenateamid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_ArenaId;
        break;
      }

      // optional uint32 ArenaId = 3;
      case 3: {
        if (tag == 24) {
         parse_ArenaId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &arenaid_)));
          set_has_arenaid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_ArenaType;
        break;
      }

      // optional uint32 ArenaType = 4;
      case 4: {
        if (tag == 32) {
         parse_ArenaType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &arenatype_)));
          set_has_arenatype();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_WinUserInfo;
        break;
      }

      // optional .pb.TUserSimpleInfo WinUserInfo = 5;
      case 5: {
        if (tag == 42) {
         parse_WinUserInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_winuserinfo()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TPlatformArenaData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TPlatformArenaData)
  return false;
#undef DO_
}

void TPlatformArenaData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TPlatformArenaData)
  // optional uint32 GroupId = 1;
  if (has_groupid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->groupid(), output);
  }

  // optional uint32 ArenaTeamId = 2;
  if (has_arenateamid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->arenateamid(), output);
  }

  // optional uint32 ArenaId = 3;
  if (has_arenaid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->arenaid(), output);
  }

  // optional uint32 ArenaType = 4;
  if (has_arenatype()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->arenatype(), output);
  }

  // optional .pb.TUserSimpleInfo WinUserInfo = 5;
  if (has_winuserinfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->winuserinfo(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TPlatformArenaData)
}

::google::protobuf::uint8* TPlatformArenaData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TPlatformArenaData)
  // optional uint32 GroupId = 1;
  if (has_groupid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->groupid(), target);
  }

  // optional uint32 ArenaTeamId = 2;
  if (has_arenateamid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->arenateamid(), target);
  }

  // optional uint32 ArenaId = 3;
  if (has_arenaid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->arenaid(), target);
  }

  // optional uint32 ArenaType = 4;
  if (has_arenatype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->arenatype(), target);
  }

  // optional .pb.TUserSimpleInfo WinUserInfo = 5;
  if (has_winuserinfo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->winuserinfo(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TPlatformArenaData)
  return target;
}

int TPlatformArenaData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 GroupId = 1;
    if (has_groupid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->groupid());
    }

    // optional uint32 ArenaTeamId = 2;
    if (has_arenateamid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->arenateamid());
    }

    // optional uint32 ArenaId = 3;
    if (has_arenaid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->arenaid());
    }

    // optional uint32 ArenaType = 4;
    if (has_arenatype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->arenatype());
    }

    // optional .pb.TUserSimpleInfo WinUserInfo = 5;
    if (has_winuserinfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->winuserinfo());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TPlatformArenaData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TPlatformArenaData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TPlatformArenaData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TPlatformArenaData::MergeFrom(const TPlatformArenaData& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_groupid()) {
      set_groupid(from.groupid());
    }
    if (from.has_arenateamid()) {
      set_arenateamid(from.arenateamid());
    }
    if (from.has_arenaid()) {
      set_arenaid(from.arenaid());
    }
    if (from.has_arenatype()) {
      set_arenatype(from.arenatype());
    }
    if (from.has_winuserinfo()) {
      mutable_winuserinfo()->::pb::TUserSimpleInfo::MergeFrom(from.winuserinfo());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TPlatformArenaData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TPlatformArenaData::CopyFrom(const TPlatformArenaData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TPlatformArenaData::IsInitialized() const {

  return true;
}

void TPlatformArenaData::Swap(TPlatformArenaData* other) {
  if (other != this) {
    std::swap(groupid_, other->groupid_);
    std::swap(arenateamid_, other->arenateamid_);
    std::swap(arenaid_, other->arenaid_);
    std::swap(arenatype_, other->arenatype_);
    std::swap(winuserinfo_, other->winuserinfo_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TPlatformArenaData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TPlatformArenaData_descriptor_;
  metadata.reflection = TPlatformArenaData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TPlatformArenaGetArenaInfoRsp::kArrArenaDataFieldNumber;
#endif  // !_MSC_VER

TPlatformArenaGetArenaInfoRsp::TPlatformArenaGetArenaInfoRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TPlatformArenaGetArenaInfoRsp)
}

void TPlatformArenaGetArenaInfoRsp::InitAsDefaultInstance() {
}

TPlatformArenaGetArenaInfoRsp::TPlatformArenaGetArenaInfoRsp(const TPlatformArenaGetArenaInfoRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TPlatformArenaGetArenaInfoRsp)
}

void TPlatformArenaGetArenaInfoRsp::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TPlatformArenaGetArenaInfoRsp::~TPlatformArenaGetArenaInfoRsp() {
  // @@protoc_insertion_point(destructor:pb.TPlatformArenaGetArenaInfoRsp)
  SharedDtor();
}

void TPlatformArenaGetArenaInfoRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TPlatformArenaGetArenaInfoRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TPlatformArenaGetArenaInfoRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TPlatformArenaGetArenaInfoRsp_descriptor_;
}

const TPlatformArenaGetArenaInfoRsp& TPlatformArenaGetArenaInfoRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fPlatformArena_2eproto();
  return *default_instance_;
}

TPlatformArenaGetArenaInfoRsp* TPlatformArenaGetArenaInfoRsp::default_instance_ = NULL;

TPlatformArenaGetArenaInfoRsp* TPlatformArenaGetArenaInfoRsp::New() const {
  return new TPlatformArenaGetArenaInfoRsp;
}

void TPlatformArenaGetArenaInfoRsp::Clear() {
  arrarenadata_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TPlatformArenaGetArenaInfoRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TPlatformArenaGetArenaInfoRsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .pb.TPlatformArenaData ArrArenaData = 1;
      case 1: {
        if (tag == 10) {
         parse_ArrArenaData:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_arrarenadata()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_ArrArenaData;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TPlatformArenaGetArenaInfoRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TPlatformArenaGetArenaInfoRsp)
  return false;
#undef DO_
}

void TPlatformArenaGetArenaInfoRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TPlatformArenaGetArenaInfoRsp)
  // repeated .pb.TPlatformArenaData ArrArenaData = 1;
  for (int i = 0; i < this->arrarenadata_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->arrarenadata(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TPlatformArenaGetArenaInfoRsp)
}

::google::protobuf::uint8* TPlatformArenaGetArenaInfoRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TPlatformArenaGetArenaInfoRsp)
  // repeated .pb.TPlatformArenaData ArrArenaData = 1;
  for (int i = 0; i < this->arrarenadata_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->arrarenadata(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TPlatformArenaGetArenaInfoRsp)
  return target;
}

int TPlatformArenaGetArenaInfoRsp::ByteSize() const {
  int total_size = 0;

  // repeated .pb.TPlatformArenaData ArrArenaData = 1;
  total_size += 1 * this->arrarenadata_size();
  for (int i = 0; i < this->arrarenadata_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->arrarenadata(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TPlatformArenaGetArenaInfoRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TPlatformArenaGetArenaInfoRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TPlatformArenaGetArenaInfoRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TPlatformArenaGetArenaInfoRsp::MergeFrom(const TPlatformArenaGetArenaInfoRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  arrarenadata_.MergeFrom(from.arrarenadata_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TPlatformArenaGetArenaInfoRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TPlatformArenaGetArenaInfoRsp::CopyFrom(const TPlatformArenaGetArenaInfoRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TPlatformArenaGetArenaInfoRsp::IsInitialized() const {

  return true;
}

void TPlatformArenaGetArenaInfoRsp::Swap(TPlatformArenaGetArenaInfoRsp* other) {
  if (other != this) {
    arrarenadata_.Swap(&other->arrarenadata_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TPlatformArenaGetArenaInfoRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TPlatformArenaGetArenaInfoRsp_descriptor_;
  metadata.reflection = TPlatformArenaGetArenaInfoRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TPlatformArenaChallengeReq::kGroupIdFieldNumber;
const int TPlatformArenaChallengeReq::kArenaIdFieldNumber;
const int TPlatformArenaChallengeReq::kUidFieldNumber;
#endif  // !_MSC_VER

TPlatformArenaChallengeReq::TPlatformArenaChallengeReq()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TPlatformArenaChallengeReq)
}

void TPlatformArenaChallengeReq::InitAsDefaultInstance() {
}

TPlatformArenaChallengeReq::TPlatformArenaChallengeReq(const TPlatformArenaChallengeReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TPlatformArenaChallengeReq)
}

void TPlatformArenaChallengeReq::SharedCtor() {
  _cached_size_ = 0;
  groupid_ = 0u;
  arenaid_ = 0u;
  uid_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TPlatformArenaChallengeReq::~TPlatformArenaChallengeReq() {
  // @@protoc_insertion_point(destructor:pb.TPlatformArenaChallengeReq)
  SharedDtor();
}

void TPlatformArenaChallengeReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TPlatformArenaChallengeReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TPlatformArenaChallengeReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TPlatformArenaChallengeReq_descriptor_;
}

const TPlatformArenaChallengeReq& TPlatformArenaChallengeReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fPlatformArena_2eproto();
  return *default_instance_;
}

TPlatformArenaChallengeReq* TPlatformArenaChallengeReq::default_instance_ = NULL;

TPlatformArenaChallengeReq* TPlatformArenaChallengeReq::New() const {
  return new TPlatformArenaChallengeReq;
}

void TPlatformArenaChallengeReq::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<TPlatformArenaChallengeReq*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(groupid_, uid_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TPlatformArenaChallengeReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TPlatformArenaChallengeReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 GroupId = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &groupid_)));
          set_has_groupid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_ArenaId;
        break;
      }

      // optional uint32 ArenaId = 2;
      case 2: {
        if (tag == 16) {
         parse_ArenaId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &arenaid_)));
          set_has_arenaid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_Uid;
        break;
      }

      // optional uint64 Uid = 3;
      case 3: {
        if (tag == 24) {
         parse_Uid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &uid_)));
          set_has_uid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TPlatformArenaChallengeReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TPlatformArenaChallengeReq)
  return false;
#undef DO_
}

void TPlatformArenaChallengeReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TPlatformArenaChallengeReq)
  // optional uint32 GroupId = 1;
  if (has_groupid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->groupid(), output);
  }

  // optional uint32 ArenaId = 2;
  if (has_arenaid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->arenaid(), output);
  }

  // optional uint64 Uid = 3;
  if (has_uid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->uid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TPlatformArenaChallengeReq)
}

::google::protobuf::uint8* TPlatformArenaChallengeReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TPlatformArenaChallengeReq)
  // optional uint32 GroupId = 1;
  if (has_groupid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->groupid(), target);
  }

  // optional uint32 ArenaId = 2;
  if (has_arenaid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->arenaid(), target);
  }

  // optional uint64 Uid = 3;
  if (has_uid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->uid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TPlatformArenaChallengeReq)
  return target;
}

int TPlatformArenaChallengeReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 GroupId = 1;
    if (has_groupid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->groupid());
    }

    // optional uint32 ArenaId = 2;
    if (has_arenaid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->arenaid());
    }

    // optional uint64 Uid = 3;
    if (has_uid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->uid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TPlatformArenaChallengeReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TPlatformArenaChallengeReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TPlatformArenaChallengeReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TPlatformArenaChallengeReq::MergeFrom(const TPlatformArenaChallengeReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_groupid()) {
      set_groupid(from.groupid());
    }
    if (from.has_arenaid()) {
      set_arenaid(from.arenaid());
    }
    if (from.has_uid()) {
      set_uid(from.uid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TPlatformArenaChallengeReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TPlatformArenaChallengeReq::CopyFrom(const TPlatformArenaChallengeReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TPlatformArenaChallengeReq::IsInitialized() const {

  return true;
}

void TPlatformArenaChallengeReq::Swap(TPlatformArenaChallengeReq* other) {
  if (other != this) {
    std::swap(groupid_, other->groupid_);
    std::swap(arenaid_, other->arenaid_);
    std::swap(uid_, other->uid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TPlatformArenaChallengeReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TPlatformArenaChallengeReq_descriptor_;
  metadata.reflection = TPlatformArenaChallengeReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TPlatformArenaChallengeRsp::kResultFieldNumber;
const int TPlatformArenaChallengeRsp::kCoolTimeFieldNumber;
#endif  // !_MSC_VER

TPlatformArenaChallengeRsp::TPlatformArenaChallengeRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TPlatformArenaChallengeRsp)
}

void TPlatformArenaChallengeRsp::InitAsDefaultInstance() {
}

TPlatformArenaChallengeRsp::TPlatformArenaChallengeRsp(const TPlatformArenaChallengeRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TPlatformArenaChallengeRsp)
}

void TPlatformArenaChallengeRsp::SharedCtor() {
  _cached_size_ = 0;
  result_ = 0u;
  cooltime_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TPlatformArenaChallengeRsp::~TPlatformArenaChallengeRsp() {
  // @@protoc_insertion_point(destructor:pb.TPlatformArenaChallengeRsp)
  SharedDtor();
}

void TPlatformArenaChallengeRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TPlatformArenaChallengeRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TPlatformArenaChallengeRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TPlatformArenaChallengeRsp_descriptor_;
}

const TPlatformArenaChallengeRsp& TPlatformArenaChallengeRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fPlatformArena_2eproto();
  return *default_instance_;
}

TPlatformArenaChallengeRsp* TPlatformArenaChallengeRsp::default_instance_ = NULL;

TPlatformArenaChallengeRsp* TPlatformArenaChallengeRsp::New() const {
  return new TPlatformArenaChallengeRsp;
}

void TPlatformArenaChallengeRsp::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<TPlatformArenaChallengeRsp*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(cooltime_, result_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TPlatformArenaChallengeRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TPlatformArenaChallengeRsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 Result = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_CoolTime;
        break;
      }

      // optional uint64 CoolTime = 2;
      case 2: {
        if (tag == 16) {
         parse_CoolTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &cooltime_)));
          set_has_cooltime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TPlatformArenaChallengeRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TPlatformArenaChallengeRsp)
  return false;
#undef DO_
}

void TPlatformArenaChallengeRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TPlatformArenaChallengeRsp)
  // optional uint32 Result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->result(), output);
  }

  // optional uint64 CoolTime = 2;
  if (has_cooltime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->cooltime(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TPlatformArenaChallengeRsp)
}

::google::protobuf::uint8* TPlatformArenaChallengeRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TPlatformArenaChallengeRsp)
  // optional uint32 Result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->result(), target);
  }

  // optional uint64 CoolTime = 2;
  if (has_cooltime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->cooltime(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TPlatformArenaChallengeRsp)
  return target;
}

int TPlatformArenaChallengeRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 Result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->result());
    }

    // optional uint64 CoolTime = 2;
    if (has_cooltime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->cooltime());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TPlatformArenaChallengeRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TPlatformArenaChallengeRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TPlatformArenaChallengeRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TPlatformArenaChallengeRsp::MergeFrom(const TPlatformArenaChallengeRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_cooltime()) {
      set_cooltime(from.cooltime());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TPlatformArenaChallengeRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TPlatformArenaChallengeRsp::CopyFrom(const TPlatformArenaChallengeRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TPlatformArenaChallengeRsp::IsInitialized() const {

  return true;
}

void TPlatformArenaChallengeRsp::Swap(TPlatformArenaChallengeRsp* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(cooltime_, other->cooltime_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TPlatformArenaChallengeRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TPlatformArenaChallengeRsp_descriptor_;
  metadata.reflection = TPlatformArenaChallengeRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int THistorySeasonData::kSeasonIdFieldNumber;
const int THistorySeasonData::kStartTimeFieldNumber;
const int THistorySeasonData::kEndTimeFieldNumber;
const int THistorySeasonData::kGroupNumFieldNumber;
#endif  // !_MSC_VER

THistorySeasonData::THistorySeasonData()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.THistorySeasonData)
}

void THistorySeasonData::InitAsDefaultInstance() {
}

THistorySeasonData::THistorySeasonData(const THistorySeasonData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.THistorySeasonData)
}

void THistorySeasonData::SharedCtor() {
  _cached_size_ = 0;
  seasonid_ = 0u;
  starttime_ = GOOGLE_ULONGLONG(0);
  endtime_ = GOOGLE_ULONGLONG(0);
  groupnum_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

THistorySeasonData::~THistorySeasonData() {
  // @@protoc_insertion_point(destructor:pb.THistorySeasonData)
  SharedDtor();
}

void THistorySeasonData::SharedDtor() {
  if (this != default_instance_) {
  }
}

void THistorySeasonData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* THistorySeasonData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return THistorySeasonData_descriptor_;
}

const THistorySeasonData& THistorySeasonData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fPlatformArena_2eproto();
  return *default_instance_;
}

THistorySeasonData* THistorySeasonData::default_instance_ = NULL;

THistorySeasonData* THistorySeasonData::New() const {
  return new THistorySeasonData;
}

void THistorySeasonData::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<THistorySeasonData*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(starttime_, endtime_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool THistorySeasonData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.THistorySeasonData)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 SeasonId = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &seasonid_)));
          set_has_seasonid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_StartTime;
        break;
      }

      // optional uint64 StartTime = 2;
      case 2: {
        if (tag == 16) {
         parse_StartTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &starttime_)));
          set_has_starttime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_EndTime;
        break;
      }

      // optional uint64 EndTime = 3;
      case 3: {
        if (tag == 24) {
         parse_EndTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &endtime_)));
          set_has_endtime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_GroupNum;
        break;
      }

      // optional uint32 GroupNum = 4;
      case 4: {
        if (tag == 32) {
         parse_GroupNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &groupnum_)));
          set_has_groupnum();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.THistorySeasonData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.THistorySeasonData)
  return false;
#undef DO_
}

void THistorySeasonData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.THistorySeasonData)
  // optional uint32 SeasonId = 1;
  if (has_seasonid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->seasonid(), output);
  }

  // optional uint64 StartTime = 2;
  if (has_starttime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->starttime(), output);
  }

  // optional uint64 EndTime = 3;
  if (has_endtime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->endtime(), output);
  }

  // optional uint32 GroupNum = 4;
  if (has_groupnum()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->groupnum(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.THistorySeasonData)
}

::google::protobuf::uint8* THistorySeasonData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.THistorySeasonData)
  // optional uint32 SeasonId = 1;
  if (has_seasonid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->seasonid(), target);
  }

  // optional uint64 StartTime = 2;
  if (has_starttime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->starttime(), target);
  }

  // optional uint64 EndTime = 3;
  if (has_endtime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->endtime(), target);
  }

  // optional uint32 GroupNum = 4;
  if (has_groupnum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->groupnum(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.THistorySeasonData)
  return target;
}

int THistorySeasonData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 SeasonId = 1;
    if (has_seasonid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->seasonid());
    }

    // optional uint64 StartTime = 2;
    if (has_starttime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->starttime());
    }

    // optional uint64 EndTime = 3;
    if (has_endtime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->endtime());
    }

    // optional uint32 GroupNum = 4;
    if (has_groupnum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->groupnum());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void THistorySeasonData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const THistorySeasonData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const THistorySeasonData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void THistorySeasonData::MergeFrom(const THistorySeasonData& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_seasonid()) {
      set_seasonid(from.seasonid());
    }
    if (from.has_starttime()) {
      set_starttime(from.starttime());
    }
    if (from.has_endtime()) {
      set_endtime(from.endtime());
    }
    if (from.has_groupnum()) {
      set_groupnum(from.groupnum());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void THistorySeasonData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void THistorySeasonData::CopyFrom(const THistorySeasonData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool THistorySeasonData::IsInitialized() const {

  return true;
}

void THistorySeasonData::Swap(THistorySeasonData* other) {
  if (other != this) {
    std::swap(seasonid_, other->seasonid_);
    std::swap(starttime_, other->starttime_);
    std::swap(endtime_, other->endtime_);
    std::swap(groupnum_, other->groupnum_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata THistorySeasonData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = THistorySeasonData_descriptor_;
  metadata.reflection = THistorySeasonData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TPlatformArenaGetHistorySeasonRsp::kArrHistorySeasonFieldNumber;
#endif  // !_MSC_VER

TPlatformArenaGetHistorySeasonRsp::TPlatformArenaGetHistorySeasonRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TPlatformArenaGetHistorySeasonRsp)
}

void TPlatformArenaGetHistorySeasonRsp::InitAsDefaultInstance() {
}

TPlatformArenaGetHistorySeasonRsp::TPlatformArenaGetHistorySeasonRsp(const TPlatformArenaGetHistorySeasonRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TPlatformArenaGetHistorySeasonRsp)
}

void TPlatformArenaGetHistorySeasonRsp::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TPlatformArenaGetHistorySeasonRsp::~TPlatformArenaGetHistorySeasonRsp() {
  // @@protoc_insertion_point(destructor:pb.TPlatformArenaGetHistorySeasonRsp)
  SharedDtor();
}

void TPlatformArenaGetHistorySeasonRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TPlatformArenaGetHistorySeasonRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TPlatformArenaGetHistorySeasonRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TPlatformArenaGetHistorySeasonRsp_descriptor_;
}

const TPlatformArenaGetHistorySeasonRsp& TPlatformArenaGetHistorySeasonRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fPlatformArena_2eproto();
  return *default_instance_;
}

TPlatformArenaGetHistorySeasonRsp* TPlatformArenaGetHistorySeasonRsp::default_instance_ = NULL;

TPlatformArenaGetHistorySeasonRsp* TPlatformArenaGetHistorySeasonRsp::New() const {
  return new TPlatformArenaGetHistorySeasonRsp;
}

void TPlatformArenaGetHistorySeasonRsp::Clear() {
  arrhistoryseason_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TPlatformArenaGetHistorySeasonRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TPlatformArenaGetHistorySeasonRsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .pb.THistorySeasonData ArrHistorySeason = 1;
      case 1: {
        if (tag == 10) {
         parse_ArrHistorySeason:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_arrhistoryseason()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_ArrHistorySeason;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TPlatformArenaGetHistorySeasonRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TPlatformArenaGetHistorySeasonRsp)
  return false;
#undef DO_
}

void TPlatformArenaGetHistorySeasonRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TPlatformArenaGetHistorySeasonRsp)
  // repeated .pb.THistorySeasonData ArrHistorySeason = 1;
  for (int i = 0; i < this->arrhistoryseason_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->arrhistoryseason(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TPlatformArenaGetHistorySeasonRsp)
}

::google::protobuf::uint8* TPlatformArenaGetHistorySeasonRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TPlatformArenaGetHistorySeasonRsp)
  // repeated .pb.THistorySeasonData ArrHistorySeason = 1;
  for (int i = 0; i < this->arrhistoryseason_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->arrhistoryseason(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TPlatformArenaGetHistorySeasonRsp)
  return target;
}

int TPlatformArenaGetHistorySeasonRsp::ByteSize() const {
  int total_size = 0;

  // repeated .pb.THistorySeasonData ArrHistorySeason = 1;
  total_size += 1 * this->arrhistoryseason_size();
  for (int i = 0; i < this->arrhistoryseason_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->arrhistoryseason(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TPlatformArenaGetHistorySeasonRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TPlatformArenaGetHistorySeasonRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TPlatformArenaGetHistorySeasonRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TPlatformArenaGetHistorySeasonRsp::MergeFrom(const TPlatformArenaGetHistorySeasonRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  arrhistoryseason_.MergeFrom(from.arrhistoryseason_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TPlatformArenaGetHistorySeasonRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TPlatformArenaGetHistorySeasonRsp::CopyFrom(const TPlatformArenaGetHistorySeasonRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TPlatformArenaGetHistorySeasonRsp::IsInitialized() const {

  return true;
}

void TPlatformArenaGetHistorySeasonRsp::Swap(TPlatformArenaGetHistorySeasonRsp* other) {
  if (other != this) {
    arrhistoryseason_.Swap(&other->arrhistoryseason_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TPlatformArenaGetHistorySeasonRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TPlatformArenaGetHistorySeasonRsp_descriptor_;
  metadata.reflection = TPlatformArenaGetHistorySeasonRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TPlatformArenaGetSeasonPmRankReq::kSeasonIdFieldNumber;
const int TPlatformArenaGetSeasonPmRankReq::kGroupIdFieldNumber;
#endif  // !_MSC_VER

TPlatformArenaGetSeasonPmRankReq::TPlatformArenaGetSeasonPmRankReq()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TPlatformArenaGetSeasonPmRankReq)
}

void TPlatformArenaGetSeasonPmRankReq::InitAsDefaultInstance() {
}

TPlatformArenaGetSeasonPmRankReq::TPlatformArenaGetSeasonPmRankReq(const TPlatformArenaGetSeasonPmRankReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TPlatformArenaGetSeasonPmRankReq)
}

void TPlatformArenaGetSeasonPmRankReq::SharedCtor() {
  _cached_size_ = 0;
  seasonid_ = 0u;
  groupid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TPlatformArenaGetSeasonPmRankReq::~TPlatformArenaGetSeasonPmRankReq() {
  // @@protoc_insertion_point(destructor:pb.TPlatformArenaGetSeasonPmRankReq)
  SharedDtor();
}

void TPlatformArenaGetSeasonPmRankReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TPlatformArenaGetSeasonPmRankReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TPlatformArenaGetSeasonPmRankReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TPlatformArenaGetSeasonPmRankReq_descriptor_;
}

const TPlatformArenaGetSeasonPmRankReq& TPlatformArenaGetSeasonPmRankReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fPlatformArena_2eproto();
  return *default_instance_;
}

TPlatformArenaGetSeasonPmRankReq* TPlatformArenaGetSeasonPmRankReq::default_instance_ = NULL;

TPlatformArenaGetSeasonPmRankReq* TPlatformArenaGetSeasonPmRankReq::New() const {
  return new TPlatformArenaGetSeasonPmRankReq;
}

void TPlatformArenaGetSeasonPmRankReq::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<TPlatformArenaGetSeasonPmRankReq*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(seasonid_, groupid_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TPlatformArenaGetSeasonPmRankReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TPlatformArenaGetSeasonPmRankReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 SeasonId = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &seasonid_)));
          set_has_seasonid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_GroupId;
        break;
      }

      // optional uint32 GroupId = 2;
      case 2: {
        if (tag == 16) {
         parse_GroupId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &groupid_)));
          set_has_groupid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TPlatformArenaGetSeasonPmRankReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TPlatformArenaGetSeasonPmRankReq)
  return false;
#undef DO_
}

void TPlatformArenaGetSeasonPmRankReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TPlatformArenaGetSeasonPmRankReq)
  // optional uint32 SeasonId = 1;
  if (has_seasonid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->seasonid(), output);
  }

  // optional uint32 GroupId = 2;
  if (has_groupid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->groupid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TPlatformArenaGetSeasonPmRankReq)
}

::google::protobuf::uint8* TPlatformArenaGetSeasonPmRankReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TPlatformArenaGetSeasonPmRankReq)
  // optional uint32 SeasonId = 1;
  if (has_seasonid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->seasonid(), target);
  }

  // optional uint32 GroupId = 2;
  if (has_groupid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->groupid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TPlatformArenaGetSeasonPmRankReq)
  return target;
}

int TPlatformArenaGetSeasonPmRankReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 SeasonId = 1;
    if (has_seasonid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->seasonid());
    }

    // optional uint32 GroupId = 2;
    if (has_groupid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->groupid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TPlatformArenaGetSeasonPmRankReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TPlatformArenaGetSeasonPmRankReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TPlatformArenaGetSeasonPmRankReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TPlatformArenaGetSeasonPmRankReq::MergeFrom(const TPlatformArenaGetSeasonPmRankReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_seasonid()) {
      set_seasonid(from.seasonid());
    }
    if (from.has_groupid()) {
      set_groupid(from.groupid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TPlatformArenaGetSeasonPmRankReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TPlatformArenaGetSeasonPmRankReq::CopyFrom(const TPlatformArenaGetSeasonPmRankReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TPlatformArenaGetSeasonPmRankReq::IsInitialized() const {

  return true;
}

void TPlatformArenaGetSeasonPmRankReq::Swap(TPlatformArenaGetSeasonPmRankReq* other) {
  if (other != this) {
    std::swap(seasonid_, other->seasonid_);
    std::swap(groupid_, other->groupid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TPlatformArenaGetSeasonPmRankReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TPlatformArenaGetSeasonPmRankReq_descriptor_;
  metadata.reflection = TPlatformArenaGetSeasonPmRankReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TSeasonPmRankData::kUserInfoFieldNumber;
const int TSeasonPmRankData::kRankFieldNumber;
const int TSeasonPmRankData::kThumbNumFieldNumber;
#endif  // !_MSC_VER

TSeasonPmRankData::TSeasonPmRankData()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TSeasonPmRankData)
}

void TSeasonPmRankData::InitAsDefaultInstance() {
  userinfo_ = const_cast< ::pb::TUserSimpleInfo*>(&::pb::TUserSimpleInfo::default_instance());
}

TSeasonPmRankData::TSeasonPmRankData(const TSeasonPmRankData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TSeasonPmRankData)
}

void TSeasonPmRankData::SharedCtor() {
  _cached_size_ = 0;
  userinfo_ = NULL;
  rank_ = 0u;
  thumbnum_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TSeasonPmRankData::~TSeasonPmRankData() {
  // @@protoc_insertion_point(destructor:pb.TSeasonPmRankData)
  SharedDtor();
}

void TSeasonPmRankData::SharedDtor() {
  if (this != default_instance_) {
    delete userinfo_;
  }
}

void TSeasonPmRankData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TSeasonPmRankData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TSeasonPmRankData_descriptor_;
}

const TSeasonPmRankData& TSeasonPmRankData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fPlatformArena_2eproto();
  return *default_instance_;
}

TSeasonPmRankData* TSeasonPmRankData::default_instance_ = NULL;

TSeasonPmRankData* TSeasonPmRankData::New() const {
  return new TSeasonPmRankData;
}

void TSeasonPmRankData::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<TSeasonPmRankData*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 7) {
    ZR_(rank_, thumbnum_);
    if (has_userinfo()) {
      if (userinfo_ != NULL) userinfo_->::pb::TUserSimpleInfo::Clear();
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TSeasonPmRankData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TSeasonPmRankData)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .pb.TUserSimpleInfo UserInfo = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_userinfo()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_Rank;
        break;
      }

      // optional uint32 Rank = 2;
      case 2: {
        if (tag == 16) {
         parse_Rank:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &rank_)));
          set_has_rank();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_ThumbNum;
        break;
      }

      // optional uint32 ThumbNum = 3;
      case 3: {
        if (tag == 24) {
         parse_ThumbNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &thumbnum_)));
          set_has_thumbnum();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TSeasonPmRankData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TSeasonPmRankData)
  return false;
#undef DO_
}

void TSeasonPmRankData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TSeasonPmRankData)
  // optional .pb.TUserSimpleInfo UserInfo = 1;
  if (has_userinfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->userinfo(), output);
  }

  // optional uint32 Rank = 2;
  if (has_rank()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->rank(), output);
  }

  // optional uint32 ThumbNum = 3;
  if (has_thumbnum()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->thumbnum(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TSeasonPmRankData)
}

::google::protobuf::uint8* TSeasonPmRankData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TSeasonPmRankData)
  // optional .pb.TUserSimpleInfo UserInfo = 1;
  if (has_userinfo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->userinfo(), target);
  }

  // optional uint32 Rank = 2;
  if (has_rank()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->rank(), target);
  }

  // optional uint32 ThumbNum = 3;
  if (has_thumbnum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->thumbnum(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TSeasonPmRankData)
  return target;
}

int TSeasonPmRankData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .pb.TUserSimpleInfo UserInfo = 1;
    if (has_userinfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->userinfo());
    }

    // optional uint32 Rank = 2;
    if (has_rank()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->rank());
    }

    // optional uint32 ThumbNum = 3;
    if (has_thumbnum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->thumbnum());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TSeasonPmRankData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TSeasonPmRankData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TSeasonPmRankData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TSeasonPmRankData::MergeFrom(const TSeasonPmRankData& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_userinfo()) {
      mutable_userinfo()->::pb::TUserSimpleInfo::MergeFrom(from.userinfo());
    }
    if (from.has_rank()) {
      set_rank(from.rank());
    }
    if (from.has_thumbnum()) {
      set_thumbnum(from.thumbnum());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TSeasonPmRankData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TSeasonPmRankData::CopyFrom(const TSeasonPmRankData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TSeasonPmRankData::IsInitialized() const {

  return true;
}

void TSeasonPmRankData::Swap(TSeasonPmRankData* other) {
  if (other != this) {
    std::swap(userinfo_, other->userinfo_);
    std::swap(rank_, other->rank_);
    std::swap(thumbnum_, other->thumbnum_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TSeasonPmRankData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TSeasonPmRankData_descriptor_;
  metadata.reflection = TSeasonPmRankData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TPlatformArenaGetSeasonPmRankRsp::kSeasonIdFieldNumber;
const int TPlatformArenaGetSeasonPmRankRsp::kGroupIdFieldNumber;
const int TPlatformArenaGetSeasonPmRankRsp::kArrRankDataFieldNumber;
#endif  // !_MSC_VER

TPlatformArenaGetSeasonPmRankRsp::TPlatformArenaGetSeasonPmRankRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TPlatformArenaGetSeasonPmRankRsp)
}

void TPlatformArenaGetSeasonPmRankRsp::InitAsDefaultInstance() {
}

TPlatformArenaGetSeasonPmRankRsp::TPlatformArenaGetSeasonPmRankRsp(const TPlatformArenaGetSeasonPmRankRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TPlatformArenaGetSeasonPmRankRsp)
}

void TPlatformArenaGetSeasonPmRankRsp::SharedCtor() {
  _cached_size_ = 0;
  seasonid_ = 0u;
  groupid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TPlatformArenaGetSeasonPmRankRsp::~TPlatformArenaGetSeasonPmRankRsp() {
  // @@protoc_insertion_point(destructor:pb.TPlatformArenaGetSeasonPmRankRsp)
  SharedDtor();
}

void TPlatformArenaGetSeasonPmRankRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TPlatformArenaGetSeasonPmRankRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TPlatformArenaGetSeasonPmRankRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TPlatformArenaGetSeasonPmRankRsp_descriptor_;
}

const TPlatformArenaGetSeasonPmRankRsp& TPlatformArenaGetSeasonPmRankRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fPlatformArena_2eproto();
  return *default_instance_;
}

TPlatformArenaGetSeasonPmRankRsp* TPlatformArenaGetSeasonPmRankRsp::default_instance_ = NULL;

TPlatformArenaGetSeasonPmRankRsp* TPlatformArenaGetSeasonPmRankRsp::New() const {
  return new TPlatformArenaGetSeasonPmRankRsp;
}

void TPlatformArenaGetSeasonPmRankRsp::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<TPlatformArenaGetSeasonPmRankRsp*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(seasonid_, groupid_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  arrrankdata_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TPlatformArenaGetSeasonPmRankRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TPlatformArenaGetSeasonPmRankRsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 SeasonId = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &seasonid_)));
          set_has_seasonid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_GroupId;
        break;
      }

      // optional uint32 GroupId = 2;
      case 2: {
        if (tag == 16) {
         parse_GroupId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &groupid_)));
          set_has_groupid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_ArrRankData;
        break;
      }

      // repeated .pb.TSeasonPmRankData ArrRankData = 3;
      case 3: {
        if (tag == 26) {
         parse_ArrRankData:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_arrrankdata()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_ArrRankData;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TPlatformArenaGetSeasonPmRankRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TPlatformArenaGetSeasonPmRankRsp)
  return false;
#undef DO_
}

void TPlatformArenaGetSeasonPmRankRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TPlatformArenaGetSeasonPmRankRsp)
  // optional uint32 SeasonId = 1;
  if (has_seasonid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->seasonid(), output);
  }

  // optional uint32 GroupId = 2;
  if (has_groupid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->groupid(), output);
  }

  // repeated .pb.TSeasonPmRankData ArrRankData = 3;
  for (int i = 0; i < this->arrrankdata_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->arrrankdata(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TPlatformArenaGetSeasonPmRankRsp)
}

::google::protobuf::uint8* TPlatformArenaGetSeasonPmRankRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TPlatformArenaGetSeasonPmRankRsp)
  // optional uint32 SeasonId = 1;
  if (has_seasonid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->seasonid(), target);
  }

  // optional uint32 GroupId = 2;
  if (has_groupid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->groupid(), target);
  }

  // repeated .pb.TSeasonPmRankData ArrRankData = 3;
  for (int i = 0; i < this->arrrankdata_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->arrrankdata(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TPlatformArenaGetSeasonPmRankRsp)
  return target;
}

int TPlatformArenaGetSeasonPmRankRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 SeasonId = 1;
    if (has_seasonid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->seasonid());
    }

    // optional uint32 GroupId = 2;
    if (has_groupid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->groupid());
    }

  }
  // repeated .pb.TSeasonPmRankData ArrRankData = 3;
  total_size += 1 * this->arrrankdata_size();
  for (int i = 0; i < this->arrrankdata_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->arrrankdata(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TPlatformArenaGetSeasonPmRankRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TPlatformArenaGetSeasonPmRankRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TPlatformArenaGetSeasonPmRankRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TPlatformArenaGetSeasonPmRankRsp::MergeFrom(const TPlatformArenaGetSeasonPmRankRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  arrrankdata_.MergeFrom(from.arrrankdata_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_seasonid()) {
      set_seasonid(from.seasonid());
    }
    if (from.has_groupid()) {
      set_groupid(from.groupid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TPlatformArenaGetSeasonPmRankRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TPlatformArenaGetSeasonPmRankRsp::CopyFrom(const TPlatformArenaGetSeasonPmRankRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TPlatformArenaGetSeasonPmRankRsp::IsInitialized() const {

  return true;
}

void TPlatformArenaGetSeasonPmRankRsp::Swap(TPlatformArenaGetSeasonPmRankRsp* other) {
  if (other != this) {
    std::swap(seasonid_, other->seasonid_);
    std::swap(groupid_, other->groupid_);
    arrrankdata_.Swap(&other->arrrankdata_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TPlatformArenaGetSeasonPmRankRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TPlatformArenaGetSeasonPmRankRsp_descriptor_;
  metadata.reflection = TPlatformArenaGetSeasonPmRankRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TPersonalReportData::kRidFieldNumber;
const int TPersonalReportData::kReportTypeFieldNumber;
const int TPersonalReportData::kResultFieldNumber;
const int TPersonalReportData::kArenaIdFieldNumber;
const int TPersonalReportData::kReportTimeFieldNumber;
const int TPersonalReportData::kRTidFieldNumber;
const int TPersonalReportData::kArenaTypeFieldNumber;
const int TPersonalReportData::kAtkUserInfoFieldNumber;
const int TPersonalReportData::kDefUserInfoFieldNumber;
#endif  // !_MSC_VER

TPersonalReportData::TPersonalReportData()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TPersonalReportData)
}

void TPersonalReportData::InitAsDefaultInstance() {
  atkuserinfo_ = const_cast< ::pb::TUserSimpleInfo*>(&::pb::TUserSimpleInfo::default_instance());
  defuserinfo_ = const_cast< ::pb::TUserSimpleInfo*>(&::pb::TUserSimpleInfo::default_instance());
}

TPersonalReportData::TPersonalReportData(const TPersonalReportData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TPersonalReportData)
}

void TPersonalReportData::SharedCtor() {
  _cached_size_ = 0;
  rid_ = 0u;
  reporttype_ = 0u;
  result_ = 0u;
  arenaid_ = 0u;
  reporttime_ = GOOGLE_ULONGLONG(0);
  rtid_ = 0u;
  arenatype_ = 0u;
  atkuserinfo_ = NULL;
  defuserinfo_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TPersonalReportData::~TPersonalReportData() {
  // @@protoc_insertion_point(destructor:pb.TPersonalReportData)
  SharedDtor();
}

void TPersonalReportData::SharedDtor() {
  if (this != default_instance_) {
    delete atkuserinfo_;
    delete defuserinfo_;
  }
}

void TPersonalReportData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TPersonalReportData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TPersonalReportData_descriptor_;
}

const TPersonalReportData& TPersonalReportData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fPlatformArena_2eproto();
  return *default_instance_;
}

TPersonalReportData* TPersonalReportData::default_instance_ = NULL;

TPersonalReportData* TPersonalReportData::New() const {
  return new TPersonalReportData;
}

void TPersonalReportData::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<TPersonalReportData*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(rid_, arenatype_);
    if (has_atkuserinfo()) {
      if (atkuserinfo_ != NULL) atkuserinfo_->::pb::TUserSimpleInfo::Clear();
    }
  }
  if (has_defuserinfo()) {
    if (defuserinfo_ != NULL) defuserinfo_->::pb::TUserSimpleInfo::Clear();
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TPersonalReportData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TPersonalReportData)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 Rid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &rid_)));
          set_has_rid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_ReportType;
        break;
      }

      // optional uint32 ReportType = 2;
      case 2: {
        if (tag == 16) {
         parse_ReportType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &reporttype_)));
          set_has_reporttype();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_Result;
        break;
      }

      // optional uint32 Result = 3;
      case 3: {
        if (tag == 24) {
         parse_Result:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_ArenaId;
        break;
      }

      // optional uint32 ArenaId = 4;
      case 4: {
        if (tag == 32) {
         parse_ArenaId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &arenaid_)));
          set_has_arenaid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_ReportTime;
        break;
      }

      // optional uint64 ReportTime = 5;
      case 5: {
        if (tag == 40) {
         parse_ReportTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &reporttime_)));
          set_has_reporttime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_RTid;
        break;
      }

      // optional uint32 RTid = 6;
      case 6: {
        if (tag == 48) {
         parse_RTid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &rtid_)));
          set_has_rtid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_ArenaType;
        break;
      }

      // optional uint32 ArenaType = 7;
      case 7: {
        if (tag == 56) {
         parse_ArenaType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &arenatype_)));
          set_has_arenatype();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_AtkUserInfo;
        break;
      }

      // optional .pb.TUserSimpleInfo AtkUserInfo = 8;
      case 8: {
        if (tag == 66) {
         parse_AtkUserInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_atkuserinfo()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(74)) goto parse_DefUserInfo;
        break;
      }

      // optional .pb.TUserSimpleInfo DefUserInfo = 9;
      case 9: {
        if (tag == 74) {
         parse_DefUserInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_defuserinfo()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TPersonalReportData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TPersonalReportData)
  return false;
#undef DO_
}

void TPersonalReportData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TPersonalReportData)
  // optional uint32 Rid = 1;
  if (has_rid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->rid(), output);
  }

  // optional uint32 ReportType = 2;
  if (has_reporttype()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->reporttype(), output);
  }

  // optional uint32 Result = 3;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->result(), output);
  }

  // optional uint32 ArenaId = 4;
  if (has_arenaid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->arenaid(), output);
  }

  // optional uint64 ReportTime = 5;
  if (has_reporttime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(5, this->reporttime(), output);
  }

  // optional uint32 RTid = 6;
  if (has_rtid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->rtid(), output);
  }

  // optional uint32 ArenaType = 7;
  if (has_arenatype()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->arenatype(), output);
  }

  // optional .pb.TUserSimpleInfo AtkUserInfo = 8;
  if (has_atkuserinfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, this->atkuserinfo(), output);
  }

  // optional .pb.TUserSimpleInfo DefUserInfo = 9;
  if (has_defuserinfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, this->defuserinfo(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TPersonalReportData)
}

::google::protobuf::uint8* TPersonalReportData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TPersonalReportData)
  // optional uint32 Rid = 1;
  if (has_rid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->rid(), target);
  }

  // optional uint32 ReportType = 2;
  if (has_reporttype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->reporttype(), target);
  }

  // optional uint32 Result = 3;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->result(), target);
  }

  // optional uint32 ArenaId = 4;
  if (has_arenaid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->arenaid(), target);
  }

  // optional uint64 ReportTime = 5;
  if (has_reporttime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(5, this->reporttime(), target);
  }

  // optional uint32 RTid = 6;
  if (has_rtid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->rtid(), target);
  }

  // optional uint32 ArenaType = 7;
  if (has_arenatype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->arenatype(), target);
  }

  // optional .pb.TUserSimpleInfo AtkUserInfo = 8;
  if (has_atkuserinfo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        8, this->atkuserinfo(), target);
  }

  // optional .pb.TUserSimpleInfo DefUserInfo = 9;
  if (has_defuserinfo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        9, this->defuserinfo(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TPersonalReportData)
  return target;
}

int TPersonalReportData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 Rid = 1;
    if (has_rid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->rid());
    }

    // optional uint32 ReportType = 2;
    if (has_reporttype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->reporttype());
    }

    // optional uint32 Result = 3;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->result());
    }

    // optional uint32 ArenaId = 4;
    if (has_arenaid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->arenaid());
    }

    // optional uint64 ReportTime = 5;
    if (has_reporttime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->reporttime());
    }

    // optional uint32 RTid = 6;
    if (has_rtid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->rtid());
    }

    // optional uint32 ArenaType = 7;
    if (has_arenatype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->arenatype());
    }

    // optional .pb.TUserSimpleInfo AtkUserInfo = 8;
    if (has_atkuserinfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->atkuserinfo());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional .pb.TUserSimpleInfo DefUserInfo = 9;
    if (has_defuserinfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->defuserinfo());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TPersonalReportData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TPersonalReportData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TPersonalReportData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TPersonalReportData::MergeFrom(const TPersonalReportData& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_rid()) {
      set_rid(from.rid());
    }
    if (from.has_reporttype()) {
      set_reporttype(from.reporttype());
    }
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_arenaid()) {
      set_arenaid(from.arenaid());
    }
    if (from.has_reporttime()) {
      set_reporttime(from.reporttime());
    }
    if (from.has_rtid()) {
      set_rtid(from.rtid());
    }
    if (from.has_arenatype()) {
      set_arenatype(from.arenatype());
    }
    if (from.has_atkuserinfo()) {
      mutable_atkuserinfo()->::pb::TUserSimpleInfo::MergeFrom(from.atkuserinfo());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_defuserinfo()) {
      mutable_defuserinfo()->::pb::TUserSimpleInfo::MergeFrom(from.defuserinfo());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TPersonalReportData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TPersonalReportData::CopyFrom(const TPersonalReportData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TPersonalReportData::IsInitialized() const {

  return true;
}

void TPersonalReportData::Swap(TPersonalReportData* other) {
  if (other != this) {
    std::swap(rid_, other->rid_);
    std::swap(reporttype_, other->reporttype_);
    std::swap(result_, other->result_);
    std::swap(arenaid_, other->arenaid_);
    std::swap(reporttime_, other->reporttime_);
    std::swap(rtid_, other->rtid_);
    std::swap(arenatype_, other->arenatype_);
    std::swap(atkuserinfo_, other->atkuserinfo_);
    std::swap(defuserinfo_, other->defuserinfo_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TPersonalReportData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TPersonalReportData_descriptor_;
  metadata.reflection = TPersonalReportData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TPlatformArenaGetPersonalReport::kArrReportFieldNumber;
#endif  // !_MSC_VER

TPlatformArenaGetPersonalReport::TPlatformArenaGetPersonalReport()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TPlatformArenaGetPersonalReport)
}

void TPlatformArenaGetPersonalReport::InitAsDefaultInstance() {
}

TPlatformArenaGetPersonalReport::TPlatformArenaGetPersonalReport(const TPlatformArenaGetPersonalReport& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TPlatformArenaGetPersonalReport)
}

void TPlatformArenaGetPersonalReport::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TPlatformArenaGetPersonalReport::~TPlatformArenaGetPersonalReport() {
  // @@protoc_insertion_point(destructor:pb.TPlatformArenaGetPersonalReport)
  SharedDtor();
}

void TPlatformArenaGetPersonalReport::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TPlatformArenaGetPersonalReport::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TPlatformArenaGetPersonalReport::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TPlatformArenaGetPersonalReport_descriptor_;
}

const TPlatformArenaGetPersonalReport& TPlatformArenaGetPersonalReport::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fPlatformArena_2eproto();
  return *default_instance_;
}

TPlatformArenaGetPersonalReport* TPlatformArenaGetPersonalReport::default_instance_ = NULL;

TPlatformArenaGetPersonalReport* TPlatformArenaGetPersonalReport::New() const {
  return new TPlatformArenaGetPersonalReport;
}

void TPlatformArenaGetPersonalReport::Clear() {
  arrreport_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TPlatformArenaGetPersonalReport::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TPlatformArenaGetPersonalReport)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .pb.TPersonalReportData ArrReport = 1;
      case 1: {
        if (tag == 10) {
         parse_ArrReport:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_arrreport()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_ArrReport;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TPlatformArenaGetPersonalReport)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TPlatformArenaGetPersonalReport)
  return false;
#undef DO_
}

void TPlatformArenaGetPersonalReport::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TPlatformArenaGetPersonalReport)
  // repeated .pb.TPersonalReportData ArrReport = 1;
  for (int i = 0; i < this->arrreport_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->arrreport(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TPlatformArenaGetPersonalReport)
}

::google::protobuf::uint8* TPlatformArenaGetPersonalReport::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TPlatformArenaGetPersonalReport)
  // repeated .pb.TPersonalReportData ArrReport = 1;
  for (int i = 0; i < this->arrreport_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->arrreport(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TPlatformArenaGetPersonalReport)
  return target;
}

int TPlatformArenaGetPersonalReport::ByteSize() const {
  int total_size = 0;

  // repeated .pb.TPersonalReportData ArrReport = 1;
  total_size += 1 * this->arrreport_size();
  for (int i = 0; i < this->arrreport_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->arrreport(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TPlatformArenaGetPersonalReport::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TPlatformArenaGetPersonalReport* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TPlatformArenaGetPersonalReport*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TPlatformArenaGetPersonalReport::MergeFrom(const TPlatformArenaGetPersonalReport& from) {
  GOOGLE_CHECK_NE(&from, this);
  arrreport_.MergeFrom(from.arrreport_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TPlatformArenaGetPersonalReport::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TPlatformArenaGetPersonalReport::CopyFrom(const TPlatformArenaGetPersonalReport& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TPlatformArenaGetPersonalReport::IsInitialized() const {

  return true;
}

void TPlatformArenaGetPersonalReport::Swap(TPlatformArenaGetPersonalReport* other) {
  if (other != this) {
    arrreport_.Swap(&other->arrreport_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TPlatformArenaGetPersonalReport::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TPlatformArenaGetPersonalReport_descriptor_;
  metadata.reflection = TPlatformArenaGetPersonalReport_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TFoeUserData::kUserInfoFieldNumber;
const int TFoeUserData::kFoeValueFieldNumber;
const int TFoeUserData::kFoeTimeStampFieldNumber;
#endif  // !_MSC_VER

TFoeUserData::TFoeUserData()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TFoeUserData)
}

void TFoeUserData::InitAsDefaultInstance() {
  userinfo_ = const_cast< ::pb::TUserSimpleInfo*>(&::pb::TUserSimpleInfo::default_instance());
}

TFoeUserData::TFoeUserData(const TFoeUserData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TFoeUserData)
}

void TFoeUserData::SharedCtor() {
  _cached_size_ = 0;
  userinfo_ = NULL;
  foevalue_ = 0u;
  foetimestamp_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TFoeUserData::~TFoeUserData() {
  // @@protoc_insertion_point(destructor:pb.TFoeUserData)
  SharedDtor();
}

void TFoeUserData::SharedDtor() {
  if (this != default_instance_) {
    delete userinfo_;
  }
}

void TFoeUserData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TFoeUserData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TFoeUserData_descriptor_;
}

const TFoeUserData& TFoeUserData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fPlatformArena_2eproto();
  return *default_instance_;
}

TFoeUserData* TFoeUserData::default_instance_ = NULL;

TFoeUserData* TFoeUserData::New() const {
  return new TFoeUserData;
}

void TFoeUserData::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<TFoeUserData*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 7) {
    ZR_(foetimestamp_, foevalue_);
    if (has_userinfo()) {
      if (userinfo_ != NULL) userinfo_->::pb::TUserSimpleInfo::Clear();
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TFoeUserData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TFoeUserData)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .pb.TUserSimpleInfo UserInfo = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_userinfo()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_FoeValue;
        break;
      }

      // optional uint32 FoeValue = 2;
      case 2: {
        if (tag == 16) {
         parse_FoeValue:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &foevalue_)));
          set_has_foevalue();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_FoeTimeStamp;
        break;
      }

      // optional uint64 FoeTimeStamp = 3;
      case 3: {
        if (tag == 24) {
         parse_FoeTimeStamp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &foetimestamp_)));
          set_has_foetimestamp();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TFoeUserData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TFoeUserData)
  return false;
#undef DO_
}

void TFoeUserData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TFoeUserData)
  // optional .pb.TUserSimpleInfo UserInfo = 1;
  if (has_userinfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->userinfo(), output);
  }

  // optional uint32 FoeValue = 2;
  if (has_foevalue()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->foevalue(), output);
  }

  // optional uint64 FoeTimeStamp = 3;
  if (has_foetimestamp()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->foetimestamp(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TFoeUserData)
}

::google::protobuf::uint8* TFoeUserData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TFoeUserData)
  // optional .pb.TUserSimpleInfo UserInfo = 1;
  if (has_userinfo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->userinfo(), target);
  }

  // optional uint32 FoeValue = 2;
  if (has_foevalue()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->foevalue(), target);
  }

  // optional uint64 FoeTimeStamp = 3;
  if (has_foetimestamp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->foetimestamp(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TFoeUserData)
  return target;
}

int TFoeUserData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .pb.TUserSimpleInfo UserInfo = 1;
    if (has_userinfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->userinfo());
    }

    // optional uint32 FoeValue = 2;
    if (has_foevalue()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->foevalue());
    }

    // optional uint64 FoeTimeStamp = 3;
    if (has_foetimestamp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->foetimestamp());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TFoeUserData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TFoeUserData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TFoeUserData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TFoeUserData::MergeFrom(const TFoeUserData& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_userinfo()) {
      mutable_userinfo()->::pb::TUserSimpleInfo::MergeFrom(from.userinfo());
    }
    if (from.has_foevalue()) {
      set_foevalue(from.foevalue());
    }
    if (from.has_foetimestamp()) {
      set_foetimestamp(from.foetimestamp());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TFoeUserData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TFoeUserData::CopyFrom(const TFoeUserData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TFoeUserData::IsInitialized() const {

  return true;
}

void TFoeUserData::Swap(TFoeUserData* other) {
  if (other != this) {
    std::swap(userinfo_, other->userinfo_);
    std::swap(foevalue_, other->foevalue_);
    std::swap(foetimestamp_, other->foetimestamp_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TFoeUserData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TFoeUserData_descriptor_;
  metadata.reflection = TFoeUserData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TPlatformArenaGetFoeInfoRsp::kArrFoeUserFieldNumber;
#endif  // !_MSC_VER

TPlatformArenaGetFoeInfoRsp::TPlatformArenaGetFoeInfoRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TPlatformArenaGetFoeInfoRsp)
}

void TPlatformArenaGetFoeInfoRsp::InitAsDefaultInstance() {
}

TPlatformArenaGetFoeInfoRsp::TPlatformArenaGetFoeInfoRsp(const TPlatformArenaGetFoeInfoRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TPlatformArenaGetFoeInfoRsp)
}

void TPlatformArenaGetFoeInfoRsp::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TPlatformArenaGetFoeInfoRsp::~TPlatformArenaGetFoeInfoRsp() {
  // @@protoc_insertion_point(destructor:pb.TPlatformArenaGetFoeInfoRsp)
  SharedDtor();
}

void TPlatformArenaGetFoeInfoRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TPlatformArenaGetFoeInfoRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TPlatformArenaGetFoeInfoRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TPlatformArenaGetFoeInfoRsp_descriptor_;
}

const TPlatformArenaGetFoeInfoRsp& TPlatformArenaGetFoeInfoRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fPlatformArena_2eproto();
  return *default_instance_;
}

TPlatformArenaGetFoeInfoRsp* TPlatformArenaGetFoeInfoRsp::default_instance_ = NULL;

TPlatformArenaGetFoeInfoRsp* TPlatformArenaGetFoeInfoRsp::New() const {
  return new TPlatformArenaGetFoeInfoRsp;
}

void TPlatformArenaGetFoeInfoRsp::Clear() {
  arrfoeuser_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TPlatformArenaGetFoeInfoRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TPlatformArenaGetFoeInfoRsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .pb.TFoeUserData ArrFoeUser = 1;
      case 1: {
        if (tag == 10) {
         parse_ArrFoeUser:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_arrfoeuser()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_ArrFoeUser;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TPlatformArenaGetFoeInfoRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TPlatformArenaGetFoeInfoRsp)
  return false;
#undef DO_
}

void TPlatformArenaGetFoeInfoRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TPlatformArenaGetFoeInfoRsp)
  // repeated .pb.TFoeUserData ArrFoeUser = 1;
  for (int i = 0; i < this->arrfoeuser_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->arrfoeuser(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TPlatformArenaGetFoeInfoRsp)
}

::google::protobuf::uint8* TPlatformArenaGetFoeInfoRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TPlatformArenaGetFoeInfoRsp)
  // repeated .pb.TFoeUserData ArrFoeUser = 1;
  for (int i = 0; i < this->arrfoeuser_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->arrfoeuser(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TPlatformArenaGetFoeInfoRsp)
  return target;
}

int TPlatformArenaGetFoeInfoRsp::ByteSize() const {
  int total_size = 0;

  // repeated .pb.TFoeUserData ArrFoeUser = 1;
  total_size += 1 * this->arrfoeuser_size();
  for (int i = 0; i < this->arrfoeuser_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->arrfoeuser(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TPlatformArenaGetFoeInfoRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TPlatformArenaGetFoeInfoRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TPlatformArenaGetFoeInfoRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TPlatformArenaGetFoeInfoRsp::MergeFrom(const TPlatformArenaGetFoeInfoRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  arrfoeuser_.MergeFrom(from.arrfoeuser_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TPlatformArenaGetFoeInfoRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TPlatformArenaGetFoeInfoRsp::CopyFrom(const TPlatformArenaGetFoeInfoRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TPlatformArenaGetFoeInfoRsp::IsInitialized() const {

  return true;
}

void TPlatformArenaGetFoeInfoRsp::Swap(TPlatformArenaGetFoeInfoRsp* other) {
  if (other != this) {
    arrfoeuser_.Swap(&other->arrfoeuser_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TPlatformArenaGetFoeInfoRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TPlatformArenaGetFoeInfoRsp_descriptor_;
  metadata.reflection = TPlatformArenaGetFoeInfoRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TBattlePosInfo::kPosFieldNumber;
const int TBattlePosInfo::kHidFieldNumber;
#endif  // !_MSC_VER

TBattlePosInfo::TBattlePosInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TBattlePosInfo)
}

void TBattlePosInfo::InitAsDefaultInstance() {
}

TBattlePosInfo::TBattlePosInfo(const TBattlePosInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TBattlePosInfo)
}

void TBattlePosInfo::SharedCtor() {
  _cached_size_ = 0;
  pos_ = 0u;
  hid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TBattlePosInfo::~TBattlePosInfo() {
  // @@protoc_insertion_point(destructor:pb.TBattlePosInfo)
  SharedDtor();
}

void TBattlePosInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TBattlePosInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TBattlePosInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TBattlePosInfo_descriptor_;
}

const TBattlePosInfo& TBattlePosInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fPlatformArena_2eproto();
  return *default_instance_;
}

TBattlePosInfo* TBattlePosInfo::default_instance_ = NULL;

TBattlePosInfo* TBattlePosInfo::New() const {
  return new TBattlePosInfo;
}

void TBattlePosInfo::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<TBattlePosInfo*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(pos_, hid_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TBattlePosInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TBattlePosInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 Pos = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &pos_)));
          set_has_pos();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_Hid;
        break;
      }

      // optional uint32 Hid = 2;
      case 2: {
        if (tag == 16) {
         parse_Hid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &hid_)));
          set_has_hid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TBattlePosInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TBattlePosInfo)
  return false;
#undef DO_
}

void TBattlePosInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TBattlePosInfo)
  // optional uint32 Pos = 1;
  if (has_pos()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->pos(), output);
  }

  // optional uint32 Hid = 2;
  if (has_hid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->hid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TBattlePosInfo)
}

::google::protobuf::uint8* TBattlePosInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TBattlePosInfo)
  // optional uint32 Pos = 1;
  if (has_pos()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->pos(), target);
  }

  // optional uint32 Hid = 2;
  if (has_hid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->hid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TBattlePosInfo)
  return target;
}

int TBattlePosInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 Pos = 1;
    if (has_pos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->pos());
    }

    // optional uint32 Hid = 2;
    if (has_hid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->hid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TBattlePosInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TBattlePosInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TBattlePosInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TBattlePosInfo::MergeFrom(const TBattlePosInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_pos()) {
      set_pos(from.pos());
    }
    if (from.has_hid()) {
      set_hid(from.hid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TBattlePosInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TBattlePosInfo::CopyFrom(const TBattlePosInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TBattlePosInfo::IsInitialized() const {

  return true;
}

void TBattlePosInfo::Swap(TBattlePosInfo* other) {
  if (other != this) {
    std::swap(pos_, other->pos_);
    std::swap(hid_, other->hid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TBattlePosInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TBattlePosInfo_descriptor_;
  metadata.reflection = TBattlePosInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TPlatformArenaFmtInfo::kFmtIdFieldNumber;
const int TPlatformArenaFmtInfo::kArrPosFieldNumber;
#endif  // !_MSC_VER

TPlatformArenaFmtInfo::TPlatformArenaFmtInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TPlatformArenaFmtInfo)
}

void TPlatformArenaFmtInfo::InitAsDefaultInstance() {
}

TPlatformArenaFmtInfo::TPlatformArenaFmtInfo(const TPlatformArenaFmtInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TPlatformArenaFmtInfo)
}

void TPlatformArenaFmtInfo::SharedCtor() {
  _cached_size_ = 0;
  fmtid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TPlatformArenaFmtInfo::~TPlatformArenaFmtInfo() {
  // @@protoc_insertion_point(destructor:pb.TPlatformArenaFmtInfo)
  SharedDtor();
}

void TPlatformArenaFmtInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TPlatformArenaFmtInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TPlatformArenaFmtInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TPlatformArenaFmtInfo_descriptor_;
}

const TPlatformArenaFmtInfo& TPlatformArenaFmtInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fPlatformArena_2eproto();
  return *default_instance_;
}

TPlatformArenaFmtInfo* TPlatformArenaFmtInfo::default_instance_ = NULL;

TPlatformArenaFmtInfo* TPlatformArenaFmtInfo::New() const {
  return new TPlatformArenaFmtInfo;
}

void TPlatformArenaFmtInfo::Clear() {
  fmtid_ = 0u;
  arrpos_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TPlatformArenaFmtInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TPlatformArenaFmtInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 FmtId = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &fmtid_)));
          set_has_fmtid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_ArrPos;
        break;
      }

      // repeated .pb.TBattlePosInfo ArrPos = 2;
      case 2: {
        if (tag == 18) {
         parse_ArrPos:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_arrpos()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_ArrPos;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TPlatformArenaFmtInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TPlatformArenaFmtInfo)
  return false;
#undef DO_
}

void TPlatformArenaFmtInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TPlatformArenaFmtInfo)
  // optional uint32 FmtId = 1;
  if (has_fmtid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->fmtid(), output);
  }

  // repeated .pb.TBattlePosInfo ArrPos = 2;
  for (int i = 0; i < this->arrpos_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->arrpos(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TPlatformArenaFmtInfo)
}

::google::protobuf::uint8* TPlatformArenaFmtInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TPlatformArenaFmtInfo)
  // optional uint32 FmtId = 1;
  if (has_fmtid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->fmtid(), target);
  }

  // repeated .pb.TBattlePosInfo ArrPos = 2;
  for (int i = 0; i < this->arrpos_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->arrpos(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TPlatformArenaFmtInfo)
  return target;
}

int TPlatformArenaFmtInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 FmtId = 1;
    if (has_fmtid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->fmtid());
    }

  }
  // repeated .pb.TBattlePosInfo ArrPos = 2;
  total_size += 1 * this->arrpos_size();
  for (int i = 0; i < this->arrpos_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->arrpos(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TPlatformArenaFmtInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TPlatformArenaFmtInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TPlatformArenaFmtInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TPlatformArenaFmtInfo::MergeFrom(const TPlatformArenaFmtInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  arrpos_.MergeFrom(from.arrpos_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_fmtid()) {
      set_fmtid(from.fmtid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TPlatformArenaFmtInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TPlatformArenaFmtInfo::CopyFrom(const TPlatformArenaFmtInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TPlatformArenaFmtInfo::IsInitialized() const {

  return true;
}

void TPlatformArenaFmtInfo::Swap(TPlatformArenaFmtInfo* other) {
  if (other != this) {
    std::swap(fmtid_, other->fmtid_);
    arrpos_.Swap(&other->arrpos_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TPlatformArenaFmtInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TPlatformArenaFmtInfo_descriptor_;
  metadata.reflection = TPlatformArenaFmtInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TPlatformArenaGetFmtRsp::kArrFmtFieldNumber;
#endif  // !_MSC_VER

TPlatformArenaGetFmtRsp::TPlatformArenaGetFmtRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TPlatformArenaGetFmtRsp)
}

void TPlatformArenaGetFmtRsp::InitAsDefaultInstance() {
}

TPlatformArenaGetFmtRsp::TPlatformArenaGetFmtRsp(const TPlatformArenaGetFmtRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TPlatformArenaGetFmtRsp)
}

void TPlatformArenaGetFmtRsp::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TPlatformArenaGetFmtRsp::~TPlatformArenaGetFmtRsp() {
  // @@protoc_insertion_point(destructor:pb.TPlatformArenaGetFmtRsp)
  SharedDtor();
}

void TPlatformArenaGetFmtRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TPlatformArenaGetFmtRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TPlatformArenaGetFmtRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TPlatformArenaGetFmtRsp_descriptor_;
}

const TPlatformArenaGetFmtRsp& TPlatformArenaGetFmtRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fPlatformArena_2eproto();
  return *default_instance_;
}

TPlatformArenaGetFmtRsp* TPlatformArenaGetFmtRsp::default_instance_ = NULL;

TPlatformArenaGetFmtRsp* TPlatformArenaGetFmtRsp::New() const {
  return new TPlatformArenaGetFmtRsp;
}

void TPlatformArenaGetFmtRsp::Clear() {
  arrfmt_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TPlatformArenaGetFmtRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TPlatformArenaGetFmtRsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .pb.TPlatformArenaFmtInfo ArrFmt = 1;
      case 1: {
        if (tag == 10) {
         parse_ArrFmt:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_arrfmt()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_ArrFmt;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TPlatformArenaGetFmtRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TPlatformArenaGetFmtRsp)
  return false;
#undef DO_
}

void TPlatformArenaGetFmtRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TPlatformArenaGetFmtRsp)
  // repeated .pb.TPlatformArenaFmtInfo ArrFmt = 1;
  for (int i = 0; i < this->arrfmt_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->arrfmt(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TPlatformArenaGetFmtRsp)
}

::google::protobuf::uint8* TPlatformArenaGetFmtRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TPlatformArenaGetFmtRsp)
  // repeated .pb.TPlatformArenaFmtInfo ArrFmt = 1;
  for (int i = 0; i < this->arrfmt_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->arrfmt(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TPlatformArenaGetFmtRsp)
  return target;
}

int TPlatformArenaGetFmtRsp::ByteSize() const {
  int total_size = 0;

  // repeated .pb.TPlatformArenaFmtInfo ArrFmt = 1;
  total_size += 1 * this->arrfmt_size();
  for (int i = 0; i < this->arrfmt_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->arrfmt(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TPlatformArenaGetFmtRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TPlatformArenaGetFmtRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TPlatformArenaGetFmtRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TPlatformArenaGetFmtRsp::MergeFrom(const TPlatformArenaGetFmtRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  arrfmt_.MergeFrom(from.arrfmt_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TPlatformArenaGetFmtRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TPlatformArenaGetFmtRsp::CopyFrom(const TPlatformArenaGetFmtRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TPlatformArenaGetFmtRsp::IsInitialized() const {

  return true;
}

void TPlatformArenaGetFmtRsp::Swap(TPlatformArenaGetFmtRsp* other) {
  if (other != this) {
    arrfmt_.Swap(&other->arrfmt_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TPlatformArenaGetFmtRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TPlatformArenaGetFmtRsp_descriptor_;
  metadata.reflection = TPlatformArenaGetFmtRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TPlatformArenaSetFmtReq::kArrFmtFieldNumber;
#endif  // !_MSC_VER

TPlatformArenaSetFmtReq::TPlatformArenaSetFmtReq()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TPlatformArenaSetFmtReq)
}

void TPlatformArenaSetFmtReq::InitAsDefaultInstance() {
}

TPlatformArenaSetFmtReq::TPlatformArenaSetFmtReq(const TPlatformArenaSetFmtReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TPlatformArenaSetFmtReq)
}

void TPlatformArenaSetFmtReq::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TPlatformArenaSetFmtReq::~TPlatformArenaSetFmtReq() {
  // @@protoc_insertion_point(destructor:pb.TPlatformArenaSetFmtReq)
  SharedDtor();
}

void TPlatformArenaSetFmtReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TPlatformArenaSetFmtReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TPlatformArenaSetFmtReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TPlatformArenaSetFmtReq_descriptor_;
}

const TPlatformArenaSetFmtReq& TPlatformArenaSetFmtReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fPlatformArena_2eproto();
  return *default_instance_;
}

TPlatformArenaSetFmtReq* TPlatformArenaSetFmtReq::default_instance_ = NULL;

TPlatformArenaSetFmtReq* TPlatformArenaSetFmtReq::New() const {
  return new TPlatformArenaSetFmtReq;
}

void TPlatformArenaSetFmtReq::Clear() {
  arrfmt_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TPlatformArenaSetFmtReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TPlatformArenaSetFmtReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .pb.TPlatformArenaFmtInfo ArrFmt = 1;
      case 1: {
        if (tag == 10) {
         parse_ArrFmt:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_arrfmt()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_ArrFmt;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TPlatformArenaSetFmtReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TPlatformArenaSetFmtReq)
  return false;
#undef DO_
}

void TPlatformArenaSetFmtReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TPlatformArenaSetFmtReq)
  // repeated .pb.TPlatformArenaFmtInfo ArrFmt = 1;
  for (int i = 0; i < this->arrfmt_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->arrfmt(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TPlatformArenaSetFmtReq)
}

::google::protobuf::uint8* TPlatformArenaSetFmtReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TPlatformArenaSetFmtReq)
  // repeated .pb.TPlatformArenaFmtInfo ArrFmt = 1;
  for (int i = 0; i < this->arrfmt_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->arrfmt(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TPlatformArenaSetFmtReq)
  return target;
}

int TPlatformArenaSetFmtReq::ByteSize() const {
  int total_size = 0;

  // repeated .pb.TPlatformArenaFmtInfo ArrFmt = 1;
  total_size += 1 * this->arrfmt_size();
  for (int i = 0; i < this->arrfmt_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->arrfmt(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TPlatformArenaSetFmtReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TPlatformArenaSetFmtReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TPlatformArenaSetFmtReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TPlatformArenaSetFmtReq::MergeFrom(const TPlatformArenaSetFmtReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  arrfmt_.MergeFrom(from.arrfmt_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TPlatformArenaSetFmtReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TPlatformArenaSetFmtReq::CopyFrom(const TPlatformArenaSetFmtReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TPlatformArenaSetFmtReq::IsInitialized() const {

  return true;
}

void TPlatformArenaSetFmtReq::Swap(TPlatformArenaSetFmtReq* other) {
  if (other != this) {
    arrfmt_.Swap(&other->arrfmt_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TPlatformArenaSetFmtReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TPlatformArenaSetFmtReq_descriptor_;
  metadata.reflection = TPlatformArenaSetFmtReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TPlatformArenaMatchData::kMatchIdFieldNumber;
const int TPlatformArenaMatchData::kAtkUidFieldNumber;
const int TPlatformArenaMatchData::kDefUidFieldNumber;
const int TPlatformArenaMatchData::kDoneTimeFieldNumber;
const int TPlatformArenaMatchData::kWinUidFieldNumber;
const int TPlatformArenaMatchData::kAtkFightForceFieldNumber;
const int TPlatformArenaMatchData::kDefFightForceFieldNumber;
#endif  // !_MSC_VER

TPlatformArenaMatchData::TPlatformArenaMatchData()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TPlatformArenaMatchData)
}

void TPlatformArenaMatchData::InitAsDefaultInstance() {
}

TPlatformArenaMatchData::TPlatformArenaMatchData(const TPlatformArenaMatchData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TPlatformArenaMatchData)
}

void TPlatformArenaMatchData::SharedCtor() {
  _cached_size_ = 0;
  matchid_ = 0u;
  atkuid_ = GOOGLE_ULONGLONG(0);
  defuid_ = GOOGLE_ULONGLONG(0);
  donetime_ = GOOGLE_ULONGLONG(0);
  winuid_ = GOOGLE_ULONGLONG(0);
  atkfightforce_ = GOOGLE_ULONGLONG(0);
  deffightforce_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TPlatformArenaMatchData::~TPlatformArenaMatchData() {
  // @@protoc_insertion_point(destructor:pb.TPlatformArenaMatchData)
  SharedDtor();
}

void TPlatformArenaMatchData::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TPlatformArenaMatchData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TPlatformArenaMatchData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TPlatformArenaMatchData_descriptor_;
}

const TPlatformArenaMatchData& TPlatformArenaMatchData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fPlatformArena_2eproto();
  return *default_instance_;
}

TPlatformArenaMatchData* TPlatformArenaMatchData::default_instance_ = NULL;

TPlatformArenaMatchData* TPlatformArenaMatchData::New() const {
  return new TPlatformArenaMatchData;
}

void TPlatformArenaMatchData::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<TPlatformArenaMatchData*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 127) {
    ZR_(atkuid_, matchid_);
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TPlatformArenaMatchData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TPlatformArenaMatchData)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 MatchId = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &matchid_)));
          set_has_matchid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_AtkUid;
        break;
      }

      // optional uint64 AtkUid = 2;
      case 2: {
        if (tag == 16) {
         parse_AtkUid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &atkuid_)));
          set_has_atkuid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_DefUid;
        break;
      }

      // optional uint64 DefUid = 3;
      case 3: {
        if (tag == 24) {
         parse_DefUid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &defuid_)));
          set_has_defuid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_DoneTime;
        break;
      }

      // optional uint64 DoneTime = 4;
      case 4: {
        if (tag == 32) {
         parse_DoneTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &donetime_)));
          set_has_donetime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_WinUid;
        break;
      }

      // optional uint64 WinUid = 5;
      case 5: {
        if (tag == 40) {
         parse_WinUid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &winuid_)));
          set_has_winuid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_AtkFightForce;
        break;
      }

      // optional uint64 AtkFightForce = 6;
      case 6: {
        if (tag == 48) {
         parse_AtkFightForce:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &atkfightforce_)));
          set_has_atkfightforce();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_DefFightForce;
        break;
      }

      // optional uint64 DefFightForce = 7;
      case 7: {
        if (tag == 56) {
         parse_DefFightForce:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &deffightforce_)));
          set_has_deffightforce();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TPlatformArenaMatchData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TPlatformArenaMatchData)
  return false;
#undef DO_
}

void TPlatformArenaMatchData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TPlatformArenaMatchData)
  // optional uint32 MatchId = 1;
  if (has_matchid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->matchid(), output);
  }

  // optional uint64 AtkUid = 2;
  if (has_atkuid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->atkuid(), output);
  }

  // optional uint64 DefUid = 3;
  if (has_defuid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->defuid(), output);
  }

  // optional uint64 DoneTime = 4;
  if (has_donetime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->donetime(), output);
  }

  // optional uint64 WinUid = 5;
  if (has_winuid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(5, this->winuid(), output);
  }

  // optional uint64 AtkFightForce = 6;
  if (has_atkfightforce()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(6, this->atkfightforce(), output);
  }

  // optional uint64 DefFightForce = 7;
  if (has_deffightforce()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(7, this->deffightforce(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TPlatformArenaMatchData)
}

::google::protobuf::uint8* TPlatformArenaMatchData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TPlatformArenaMatchData)
  // optional uint32 MatchId = 1;
  if (has_matchid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->matchid(), target);
  }

  // optional uint64 AtkUid = 2;
  if (has_atkuid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->atkuid(), target);
  }

  // optional uint64 DefUid = 3;
  if (has_defuid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->defuid(), target);
  }

  // optional uint64 DoneTime = 4;
  if (has_donetime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->donetime(), target);
  }

  // optional uint64 WinUid = 5;
  if (has_winuid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(5, this->winuid(), target);
  }

  // optional uint64 AtkFightForce = 6;
  if (has_atkfightforce()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(6, this->atkfightforce(), target);
  }

  // optional uint64 DefFightForce = 7;
  if (has_deffightforce()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(7, this->deffightforce(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TPlatformArenaMatchData)
  return target;
}

int TPlatformArenaMatchData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 MatchId = 1;
    if (has_matchid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->matchid());
    }

    // optional uint64 AtkUid = 2;
    if (has_atkuid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->atkuid());
    }

    // optional uint64 DefUid = 3;
    if (has_defuid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->defuid());
    }

    // optional uint64 DoneTime = 4;
    if (has_donetime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->donetime());
    }

    // optional uint64 WinUid = 5;
    if (has_winuid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->winuid());
    }

    // optional uint64 AtkFightForce = 6;
    if (has_atkfightforce()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->atkfightforce());
    }

    // optional uint64 DefFightForce = 7;
    if (has_deffightforce()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->deffightforce());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TPlatformArenaMatchData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TPlatformArenaMatchData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TPlatformArenaMatchData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TPlatformArenaMatchData::MergeFrom(const TPlatformArenaMatchData& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_matchid()) {
      set_matchid(from.matchid());
    }
    if (from.has_atkuid()) {
      set_atkuid(from.atkuid());
    }
    if (from.has_defuid()) {
      set_defuid(from.defuid());
    }
    if (from.has_donetime()) {
      set_donetime(from.donetime());
    }
    if (from.has_winuid()) {
      set_winuid(from.winuid());
    }
    if (from.has_atkfightforce()) {
      set_atkfightforce(from.atkfightforce());
    }
    if (from.has_deffightforce()) {
      set_deffightforce(from.deffightforce());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TPlatformArenaMatchData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TPlatformArenaMatchData::CopyFrom(const TPlatformArenaMatchData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TPlatformArenaMatchData::IsInitialized() const {

  return true;
}

void TPlatformArenaMatchData::Swap(TPlatformArenaMatchData* other) {
  if (other != this) {
    std::swap(matchid_, other->matchid_);
    std::swap(atkuid_, other->atkuid_);
    std::swap(defuid_, other->defuid_);
    std::swap(donetime_, other->donetime_);
    std::swap(winuid_, other->winuid_);
    std::swap(atkfightforce_, other->atkfightforce_);
    std::swap(deffightforce_, other->deffightforce_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TPlatformArenaMatchData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TPlatformArenaMatchData_descriptor_;
  metadata.reflection = TPlatformArenaMatchData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TPlatformArenaGetPmMatchInfoReq::kGroupIdFieldNumber;
#endif  // !_MSC_VER

TPlatformArenaGetPmMatchInfoReq::TPlatformArenaGetPmMatchInfoReq()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TPlatformArenaGetPmMatchInfoReq)
}

void TPlatformArenaGetPmMatchInfoReq::InitAsDefaultInstance() {
}

TPlatformArenaGetPmMatchInfoReq::TPlatformArenaGetPmMatchInfoReq(const TPlatformArenaGetPmMatchInfoReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TPlatformArenaGetPmMatchInfoReq)
}

void TPlatformArenaGetPmMatchInfoReq::SharedCtor() {
  _cached_size_ = 0;
  groupid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TPlatformArenaGetPmMatchInfoReq::~TPlatformArenaGetPmMatchInfoReq() {
  // @@protoc_insertion_point(destructor:pb.TPlatformArenaGetPmMatchInfoReq)
  SharedDtor();
}

void TPlatformArenaGetPmMatchInfoReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TPlatformArenaGetPmMatchInfoReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TPlatformArenaGetPmMatchInfoReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TPlatformArenaGetPmMatchInfoReq_descriptor_;
}

const TPlatformArenaGetPmMatchInfoReq& TPlatformArenaGetPmMatchInfoReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fPlatformArena_2eproto();
  return *default_instance_;
}

TPlatformArenaGetPmMatchInfoReq* TPlatformArenaGetPmMatchInfoReq::default_instance_ = NULL;

TPlatformArenaGetPmMatchInfoReq* TPlatformArenaGetPmMatchInfoReq::New() const {
  return new TPlatformArenaGetPmMatchInfoReq;
}

void TPlatformArenaGetPmMatchInfoReq::Clear() {
  groupid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TPlatformArenaGetPmMatchInfoReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TPlatformArenaGetPmMatchInfoReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 GroupId = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &groupid_)));
          set_has_groupid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TPlatformArenaGetPmMatchInfoReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TPlatformArenaGetPmMatchInfoReq)
  return false;
#undef DO_
}

void TPlatformArenaGetPmMatchInfoReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TPlatformArenaGetPmMatchInfoReq)
  // optional uint32 GroupId = 1;
  if (has_groupid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->groupid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TPlatformArenaGetPmMatchInfoReq)
}

::google::protobuf::uint8* TPlatformArenaGetPmMatchInfoReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TPlatformArenaGetPmMatchInfoReq)
  // optional uint32 GroupId = 1;
  if (has_groupid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->groupid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TPlatformArenaGetPmMatchInfoReq)
  return target;
}

int TPlatformArenaGetPmMatchInfoReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 GroupId = 1;
    if (has_groupid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->groupid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TPlatformArenaGetPmMatchInfoReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TPlatformArenaGetPmMatchInfoReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TPlatformArenaGetPmMatchInfoReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TPlatformArenaGetPmMatchInfoReq::MergeFrom(const TPlatformArenaGetPmMatchInfoReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_groupid()) {
      set_groupid(from.groupid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TPlatformArenaGetPmMatchInfoReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TPlatformArenaGetPmMatchInfoReq::CopyFrom(const TPlatformArenaGetPmMatchInfoReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TPlatformArenaGetPmMatchInfoReq::IsInitialized() const {

  return true;
}

void TPlatformArenaGetPmMatchInfoReq::Swap(TPlatformArenaGetPmMatchInfoReq* other) {
  if (other != this) {
    std::swap(groupid_, other->groupid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TPlatformArenaGetPmMatchInfoReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TPlatformArenaGetPmMatchInfoReq_descriptor_;
  metadata.reflection = TPlatformArenaGetPmMatchInfoReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TPlatformArenaGetPmMatchInfoRsp::kGroupIdFieldNumber;
const int TPlatformArenaGetPmMatchInfoRsp::kArrUserInfoFieldNumber;
const int TPlatformArenaGetPmMatchInfoRsp::kArrArenaMatchDataFieldNumber;
#endif  // !_MSC_VER

TPlatformArenaGetPmMatchInfoRsp::TPlatformArenaGetPmMatchInfoRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TPlatformArenaGetPmMatchInfoRsp)
}

void TPlatformArenaGetPmMatchInfoRsp::InitAsDefaultInstance() {
}

TPlatformArenaGetPmMatchInfoRsp::TPlatformArenaGetPmMatchInfoRsp(const TPlatformArenaGetPmMatchInfoRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TPlatformArenaGetPmMatchInfoRsp)
}

void TPlatformArenaGetPmMatchInfoRsp::SharedCtor() {
  _cached_size_ = 0;
  groupid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TPlatformArenaGetPmMatchInfoRsp::~TPlatformArenaGetPmMatchInfoRsp() {
  // @@protoc_insertion_point(destructor:pb.TPlatformArenaGetPmMatchInfoRsp)
  SharedDtor();
}

void TPlatformArenaGetPmMatchInfoRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TPlatformArenaGetPmMatchInfoRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TPlatformArenaGetPmMatchInfoRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TPlatformArenaGetPmMatchInfoRsp_descriptor_;
}

const TPlatformArenaGetPmMatchInfoRsp& TPlatformArenaGetPmMatchInfoRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fPlatformArena_2eproto();
  return *default_instance_;
}

TPlatformArenaGetPmMatchInfoRsp* TPlatformArenaGetPmMatchInfoRsp::default_instance_ = NULL;

TPlatformArenaGetPmMatchInfoRsp* TPlatformArenaGetPmMatchInfoRsp::New() const {
  return new TPlatformArenaGetPmMatchInfoRsp;
}

void TPlatformArenaGetPmMatchInfoRsp::Clear() {
  groupid_ = 0u;
  arruserinfo_.Clear();
  arrarenamatchdata_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TPlatformArenaGetPmMatchInfoRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TPlatformArenaGetPmMatchInfoRsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 GroupId = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &groupid_)));
          set_has_groupid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_ArrUserInfo;
        break;
      }

      // repeated .pb.TUserSimpleInfo ArrUserInfo = 2;
      case 2: {
        if (tag == 18) {
         parse_ArrUserInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_arruserinfo()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_ArrUserInfo;
        if (input->ExpectTag(26)) goto parse_ArrArenaMatchData;
        break;
      }

      // repeated .pb.TPlatformArenaMatchData ArrArenaMatchData = 3;
      case 3: {
        if (tag == 26) {
         parse_ArrArenaMatchData:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_arrarenamatchdata()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_ArrArenaMatchData;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TPlatformArenaGetPmMatchInfoRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TPlatformArenaGetPmMatchInfoRsp)
  return false;
#undef DO_
}

void TPlatformArenaGetPmMatchInfoRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TPlatformArenaGetPmMatchInfoRsp)
  // optional uint32 GroupId = 1;
  if (has_groupid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->groupid(), output);
  }

  // repeated .pb.TUserSimpleInfo ArrUserInfo = 2;
  for (int i = 0; i < this->arruserinfo_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->arruserinfo(i), output);
  }

  // repeated .pb.TPlatformArenaMatchData ArrArenaMatchData = 3;
  for (int i = 0; i < this->arrarenamatchdata_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->arrarenamatchdata(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TPlatformArenaGetPmMatchInfoRsp)
}

::google::protobuf::uint8* TPlatformArenaGetPmMatchInfoRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TPlatformArenaGetPmMatchInfoRsp)
  // optional uint32 GroupId = 1;
  if (has_groupid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->groupid(), target);
  }

  // repeated .pb.TUserSimpleInfo ArrUserInfo = 2;
  for (int i = 0; i < this->arruserinfo_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->arruserinfo(i), target);
  }

  // repeated .pb.TPlatformArenaMatchData ArrArenaMatchData = 3;
  for (int i = 0; i < this->arrarenamatchdata_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->arrarenamatchdata(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TPlatformArenaGetPmMatchInfoRsp)
  return target;
}

int TPlatformArenaGetPmMatchInfoRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 GroupId = 1;
    if (has_groupid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->groupid());
    }

  }
  // repeated .pb.TUserSimpleInfo ArrUserInfo = 2;
  total_size += 1 * this->arruserinfo_size();
  for (int i = 0; i < this->arruserinfo_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->arruserinfo(i));
  }

  // repeated .pb.TPlatformArenaMatchData ArrArenaMatchData = 3;
  total_size += 1 * this->arrarenamatchdata_size();
  for (int i = 0; i < this->arrarenamatchdata_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->arrarenamatchdata(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TPlatformArenaGetPmMatchInfoRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TPlatformArenaGetPmMatchInfoRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TPlatformArenaGetPmMatchInfoRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TPlatformArenaGetPmMatchInfoRsp::MergeFrom(const TPlatformArenaGetPmMatchInfoRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  arruserinfo_.MergeFrom(from.arruserinfo_);
  arrarenamatchdata_.MergeFrom(from.arrarenamatchdata_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_groupid()) {
      set_groupid(from.groupid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TPlatformArenaGetPmMatchInfoRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TPlatformArenaGetPmMatchInfoRsp::CopyFrom(const TPlatformArenaGetPmMatchInfoRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TPlatformArenaGetPmMatchInfoRsp::IsInitialized() const {

  return true;
}

void TPlatformArenaGetPmMatchInfoRsp::Swap(TPlatformArenaGetPmMatchInfoRsp* other) {
  if (other != this) {
    std::swap(groupid_, other->groupid_);
    arruserinfo_.Swap(&other->arruserinfo_);
    arrarenamatchdata_.Swap(&other->arrarenamatchdata_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TPlatformArenaGetPmMatchInfoRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TPlatformArenaGetPmMatchInfoRsp_descriptor_;
  metadata.reflection = TPlatformArenaGetPmMatchInfoRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TGuessRecordData::kGroupIdFieldNumber;
const int TGuessRecordData::kMatchIdFieldNumber;
const int TGuessRecordData::kWinUidFieldNumber;
const int TGuessRecordData::kGuessStatusFieldNumber;
const int TGuessRecordData::kBetIndexFieldNumber;
const int TGuessRecordData::kGuessAtkWinNumFieldNumber;
const int TGuessRecordData::kGuessDefWinNumFieldNumber;
const int TGuessRecordData::kMsgLstFieldNumber;
#endif  // !_MSC_VER

TGuessRecordData::TGuessRecordData()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TGuessRecordData)
}

void TGuessRecordData::InitAsDefaultInstance() {
}

TGuessRecordData::TGuessRecordData(const TGuessRecordData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TGuessRecordData)
}

void TGuessRecordData::SharedCtor() {
  _cached_size_ = 0;
  groupid_ = 0u;
  matchid_ = 0u;
  winuid_ = GOOGLE_ULONGLONG(0);
  guessstatus_ = 0u;
  betindex_ = 0u;
  guessatkwinnum_ = 0u;
  guessdefwinnum_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TGuessRecordData::~TGuessRecordData() {
  // @@protoc_insertion_point(destructor:pb.TGuessRecordData)
  SharedDtor();
}

void TGuessRecordData::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TGuessRecordData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TGuessRecordData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TGuessRecordData_descriptor_;
}

const TGuessRecordData& TGuessRecordData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fPlatformArena_2eproto();
  return *default_instance_;
}

TGuessRecordData* TGuessRecordData::default_instance_ = NULL;

TGuessRecordData* TGuessRecordData::New() const {
  return new TGuessRecordData;
}

void TGuessRecordData::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<TGuessRecordData*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 127) {
    ZR_(groupid_, guessdefwinnum_);
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  msglst_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TGuessRecordData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TGuessRecordData)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 GroupId = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &groupid_)));
          set_has_groupid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_MatchId;
        break;
      }

      // optional uint32 MatchId = 2;
      case 2: {
        if (tag == 16) {
         parse_MatchId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &matchid_)));
          set_has_matchid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_WinUid;
        break;
      }

      // optional uint64 WinUid = 3;
      case 3: {
        if (tag == 24) {
         parse_WinUid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &winuid_)));
          set_has_winuid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_GuessStatus;
        break;
      }

      // optional uint32 GuessStatus = 4;
      case 4: {
        if (tag == 32) {
         parse_GuessStatus:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &guessstatus_)));
          set_has_guessstatus();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_BetIndex;
        break;
      }

      // optional uint32 BetIndex = 5;
      case 5: {
        if (tag == 40) {
         parse_BetIndex:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &betindex_)));
          set_has_betindex();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_GuessAtkWinNum;
        break;
      }

      // optional uint32 GuessAtkWinNum = 6;
      case 6: {
        if (tag == 48) {
         parse_GuessAtkWinNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &guessatkwinnum_)));
          set_has_guessatkwinnum();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_GuessDefWinNum;
        break;
      }

      // optional uint32 GuessDefWinNum = 7;
      case 7: {
        if (tag == 56) {
         parse_GuessDefWinNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &guessdefwinnum_)));
          set_has_guessdefwinnum();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_MsgLst;
        break;
      }

      // repeated .pb.TPlatformArenaLeaveMessageData MsgLst = 8;
      case 8: {
        if (tag == 66) {
         parse_MsgLst:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_msglst()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_MsgLst;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TGuessRecordData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TGuessRecordData)
  return false;
#undef DO_
}

void TGuessRecordData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TGuessRecordData)
  // optional uint32 GroupId = 1;
  if (has_groupid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->groupid(), output);
  }

  // optional uint32 MatchId = 2;
  if (has_matchid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->matchid(), output);
  }

  // optional uint64 WinUid = 3;
  if (has_winuid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->winuid(), output);
  }

  // optional uint32 GuessStatus = 4;
  if (has_guessstatus()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->guessstatus(), output);
  }

  // optional uint32 BetIndex = 5;
  if (has_betindex()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->betindex(), output);
  }

  // optional uint32 GuessAtkWinNum = 6;
  if (has_guessatkwinnum()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->guessatkwinnum(), output);
  }

  // optional uint32 GuessDefWinNum = 7;
  if (has_guessdefwinnum()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->guessdefwinnum(), output);
  }

  // repeated .pb.TPlatformArenaLeaveMessageData MsgLst = 8;
  for (int i = 0; i < this->msglst_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, this->msglst(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TGuessRecordData)
}

::google::protobuf::uint8* TGuessRecordData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TGuessRecordData)
  // optional uint32 GroupId = 1;
  if (has_groupid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->groupid(), target);
  }

  // optional uint32 MatchId = 2;
  if (has_matchid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->matchid(), target);
  }

  // optional uint64 WinUid = 3;
  if (has_winuid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->winuid(), target);
  }

  // optional uint32 GuessStatus = 4;
  if (has_guessstatus()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->guessstatus(), target);
  }

  // optional uint32 BetIndex = 5;
  if (has_betindex()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->betindex(), target);
  }

  // optional uint32 GuessAtkWinNum = 6;
  if (has_guessatkwinnum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->guessatkwinnum(), target);
  }

  // optional uint32 GuessDefWinNum = 7;
  if (has_guessdefwinnum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->guessdefwinnum(), target);
  }

  // repeated .pb.TPlatformArenaLeaveMessageData MsgLst = 8;
  for (int i = 0; i < this->msglst_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        8, this->msglst(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TGuessRecordData)
  return target;
}

int TGuessRecordData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 GroupId = 1;
    if (has_groupid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->groupid());
    }

    // optional uint32 MatchId = 2;
    if (has_matchid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->matchid());
    }

    // optional uint64 WinUid = 3;
    if (has_winuid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->winuid());
    }

    // optional uint32 GuessStatus = 4;
    if (has_guessstatus()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->guessstatus());
    }

    // optional uint32 BetIndex = 5;
    if (has_betindex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->betindex());
    }

    // optional uint32 GuessAtkWinNum = 6;
    if (has_guessatkwinnum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->guessatkwinnum());
    }

    // optional uint32 GuessDefWinNum = 7;
    if (has_guessdefwinnum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->guessdefwinnum());
    }

  }
  // repeated .pb.TPlatformArenaLeaveMessageData MsgLst = 8;
  total_size += 1 * this->msglst_size();
  for (int i = 0; i < this->msglst_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->msglst(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TGuessRecordData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TGuessRecordData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TGuessRecordData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TGuessRecordData::MergeFrom(const TGuessRecordData& from) {
  GOOGLE_CHECK_NE(&from, this);
  msglst_.MergeFrom(from.msglst_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_groupid()) {
      set_groupid(from.groupid());
    }
    if (from.has_matchid()) {
      set_matchid(from.matchid());
    }
    if (from.has_winuid()) {
      set_winuid(from.winuid());
    }
    if (from.has_guessstatus()) {
      set_guessstatus(from.guessstatus());
    }
    if (from.has_betindex()) {
      set_betindex(from.betindex());
    }
    if (from.has_guessatkwinnum()) {
      set_guessatkwinnum(from.guessatkwinnum());
    }
    if (from.has_guessdefwinnum()) {
      set_guessdefwinnum(from.guessdefwinnum());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TGuessRecordData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TGuessRecordData::CopyFrom(const TGuessRecordData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TGuessRecordData::IsInitialized() const {

  return true;
}

void TGuessRecordData::Swap(TGuessRecordData* other) {
  if (other != this) {
    std::swap(groupid_, other->groupid_);
    std::swap(matchid_, other->matchid_);
    std::swap(winuid_, other->winuid_);
    std::swap(guessstatus_, other->guessstatus_);
    std::swap(betindex_, other->betindex_);
    std::swap(guessatkwinnum_, other->guessatkwinnum_);
    std::swap(guessdefwinnum_, other->guessdefwinnum_);
    msglst_.Swap(&other->msglst_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TGuessRecordData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TGuessRecordData_descriptor_;
  metadata.reflection = TGuessRecordData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TPlatformArenaGetGuessRecordRsp::kArrGuessRecordFieldNumber;
#endif  // !_MSC_VER

TPlatformArenaGetGuessRecordRsp::TPlatformArenaGetGuessRecordRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TPlatformArenaGetGuessRecordRsp)
}

void TPlatformArenaGetGuessRecordRsp::InitAsDefaultInstance() {
}

TPlatformArenaGetGuessRecordRsp::TPlatformArenaGetGuessRecordRsp(const TPlatformArenaGetGuessRecordRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TPlatformArenaGetGuessRecordRsp)
}

void TPlatformArenaGetGuessRecordRsp::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TPlatformArenaGetGuessRecordRsp::~TPlatformArenaGetGuessRecordRsp() {
  // @@protoc_insertion_point(destructor:pb.TPlatformArenaGetGuessRecordRsp)
  SharedDtor();
}

void TPlatformArenaGetGuessRecordRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TPlatformArenaGetGuessRecordRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TPlatformArenaGetGuessRecordRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TPlatformArenaGetGuessRecordRsp_descriptor_;
}

const TPlatformArenaGetGuessRecordRsp& TPlatformArenaGetGuessRecordRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fPlatformArena_2eproto();
  return *default_instance_;
}

TPlatformArenaGetGuessRecordRsp* TPlatformArenaGetGuessRecordRsp::default_instance_ = NULL;

TPlatformArenaGetGuessRecordRsp* TPlatformArenaGetGuessRecordRsp::New() const {
  return new TPlatformArenaGetGuessRecordRsp;
}

void TPlatformArenaGetGuessRecordRsp::Clear() {
  arrguessrecord_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TPlatformArenaGetGuessRecordRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TPlatformArenaGetGuessRecordRsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .pb.TGuessRecordData ArrGuessRecord = 1;
      case 1: {
        if (tag == 10) {
         parse_ArrGuessRecord:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_arrguessrecord()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_ArrGuessRecord;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TPlatformArenaGetGuessRecordRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TPlatformArenaGetGuessRecordRsp)
  return false;
#undef DO_
}

void TPlatformArenaGetGuessRecordRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TPlatformArenaGetGuessRecordRsp)
  // repeated .pb.TGuessRecordData ArrGuessRecord = 1;
  for (int i = 0; i < this->arrguessrecord_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->arrguessrecord(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TPlatformArenaGetGuessRecordRsp)
}

::google::protobuf::uint8* TPlatformArenaGetGuessRecordRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TPlatformArenaGetGuessRecordRsp)
  // repeated .pb.TGuessRecordData ArrGuessRecord = 1;
  for (int i = 0; i < this->arrguessrecord_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->arrguessrecord(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TPlatformArenaGetGuessRecordRsp)
  return target;
}

int TPlatformArenaGetGuessRecordRsp::ByteSize() const {
  int total_size = 0;

  // repeated .pb.TGuessRecordData ArrGuessRecord = 1;
  total_size += 1 * this->arrguessrecord_size();
  for (int i = 0; i < this->arrguessrecord_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->arrguessrecord(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TPlatformArenaGetGuessRecordRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TPlatformArenaGetGuessRecordRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TPlatformArenaGetGuessRecordRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TPlatformArenaGetGuessRecordRsp::MergeFrom(const TPlatformArenaGetGuessRecordRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  arrguessrecord_.MergeFrom(from.arrguessrecord_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TPlatformArenaGetGuessRecordRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TPlatformArenaGetGuessRecordRsp::CopyFrom(const TPlatformArenaGetGuessRecordRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TPlatformArenaGetGuessRecordRsp::IsInitialized() const {

  return true;
}

void TPlatformArenaGetGuessRecordRsp::Swap(TPlatformArenaGetGuessRecordRsp* other) {
  if (other != this) {
    arrguessrecord_.Swap(&other->arrguessrecord_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TPlatformArenaGetGuessRecordRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TPlatformArenaGetGuessRecordRsp_descriptor_;
  metadata.reflection = TPlatformArenaGetGuessRecordRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TPlatformArenaGuessiongReq::kGroupIdFieldNumber;
const int TPlatformArenaGuessiongReq::kMatchIdFieldNumber;
const int TPlatformArenaGuessiongReq::kUidFieldNumber;
const int TPlatformArenaGuessiongReq::kBetIndexFieldNumber;
#endif  // !_MSC_VER

TPlatformArenaGuessiongReq::TPlatformArenaGuessiongReq()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TPlatformArenaGuessiongReq)
}

void TPlatformArenaGuessiongReq::InitAsDefaultInstance() {
}

TPlatformArenaGuessiongReq::TPlatformArenaGuessiongReq(const TPlatformArenaGuessiongReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TPlatformArenaGuessiongReq)
}

void TPlatformArenaGuessiongReq::SharedCtor() {
  _cached_size_ = 0;
  groupid_ = 0u;
  matchid_ = 0u;
  uid_ = GOOGLE_ULONGLONG(0);
  betindex_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TPlatformArenaGuessiongReq::~TPlatformArenaGuessiongReq() {
  // @@protoc_insertion_point(destructor:pb.TPlatformArenaGuessiongReq)
  SharedDtor();
}

void TPlatformArenaGuessiongReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TPlatformArenaGuessiongReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TPlatformArenaGuessiongReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TPlatformArenaGuessiongReq_descriptor_;
}

const TPlatformArenaGuessiongReq& TPlatformArenaGuessiongReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fPlatformArena_2eproto();
  return *default_instance_;
}

TPlatformArenaGuessiongReq* TPlatformArenaGuessiongReq::default_instance_ = NULL;

TPlatformArenaGuessiongReq* TPlatformArenaGuessiongReq::New() const {
  return new TPlatformArenaGuessiongReq;
}

void TPlatformArenaGuessiongReq::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<TPlatformArenaGuessiongReq*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(groupid_, betindex_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TPlatformArenaGuessiongReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TPlatformArenaGuessiongReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 GroupId = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &groupid_)));
          set_has_groupid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_MatchId;
        break;
      }

      // optional uint32 MatchId = 2;
      case 2: {
        if (tag == 16) {
         parse_MatchId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &matchid_)));
          set_has_matchid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_Uid;
        break;
      }

      // optional uint64 Uid = 3;
      case 3: {
        if (tag == 24) {
         parse_Uid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &uid_)));
          set_has_uid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_BetIndex;
        break;
      }

      // optional uint32 BetIndex = 4;
      case 4: {
        if (tag == 32) {
         parse_BetIndex:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &betindex_)));
          set_has_betindex();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TPlatformArenaGuessiongReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TPlatformArenaGuessiongReq)
  return false;
#undef DO_
}

void TPlatformArenaGuessiongReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TPlatformArenaGuessiongReq)
  // optional uint32 GroupId = 1;
  if (has_groupid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->groupid(), output);
  }

  // optional uint32 MatchId = 2;
  if (has_matchid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->matchid(), output);
  }

  // optional uint64 Uid = 3;
  if (has_uid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->uid(), output);
  }

  // optional uint32 BetIndex = 4;
  if (has_betindex()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->betindex(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TPlatformArenaGuessiongReq)
}

::google::protobuf::uint8* TPlatformArenaGuessiongReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TPlatformArenaGuessiongReq)
  // optional uint32 GroupId = 1;
  if (has_groupid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->groupid(), target);
  }

  // optional uint32 MatchId = 2;
  if (has_matchid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->matchid(), target);
  }

  // optional uint64 Uid = 3;
  if (has_uid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->uid(), target);
  }

  // optional uint32 BetIndex = 4;
  if (has_betindex()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->betindex(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TPlatformArenaGuessiongReq)
  return target;
}

int TPlatformArenaGuessiongReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 GroupId = 1;
    if (has_groupid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->groupid());
    }

    // optional uint32 MatchId = 2;
    if (has_matchid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->matchid());
    }

    // optional uint64 Uid = 3;
    if (has_uid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->uid());
    }

    // optional uint32 BetIndex = 4;
    if (has_betindex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->betindex());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TPlatformArenaGuessiongReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TPlatformArenaGuessiongReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TPlatformArenaGuessiongReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TPlatformArenaGuessiongReq::MergeFrom(const TPlatformArenaGuessiongReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_groupid()) {
      set_groupid(from.groupid());
    }
    if (from.has_matchid()) {
      set_matchid(from.matchid());
    }
    if (from.has_uid()) {
      set_uid(from.uid());
    }
    if (from.has_betindex()) {
      set_betindex(from.betindex());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TPlatformArenaGuessiongReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TPlatformArenaGuessiongReq::CopyFrom(const TPlatformArenaGuessiongReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TPlatformArenaGuessiongReq::IsInitialized() const {

  return true;
}

void TPlatformArenaGuessiongReq::Swap(TPlatformArenaGuessiongReq* other) {
  if (other != this) {
    std::swap(groupid_, other->groupid_);
    std::swap(matchid_, other->matchid_);
    std::swap(uid_, other->uid_);
    std::swap(betindex_, other->betindex_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TPlatformArenaGuessiongReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TPlatformArenaGuessiongReq_descriptor_;
  metadata.reflection = TPlatformArenaGuessiongReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TPlatformArenaGetGuessingRewardReq::kArrMatchIdFieldNumber;
#endif  // !_MSC_VER

TPlatformArenaGetGuessingRewardReq::TPlatformArenaGetGuessingRewardReq()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TPlatformArenaGetGuessingRewardReq)
}

void TPlatformArenaGetGuessingRewardReq::InitAsDefaultInstance() {
}

TPlatformArenaGetGuessingRewardReq::TPlatformArenaGetGuessingRewardReq(const TPlatformArenaGetGuessingRewardReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TPlatformArenaGetGuessingRewardReq)
}

void TPlatformArenaGetGuessingRewardReq::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TPlatformArenaGetGuessingRewardReq::~TPlatformArenaGetGuessingRewardReq() {
  // @@protoc_insertion_point(destructor:pb.TPlatformArenaGetGuessingRewardReq)
  SharedDtor();
}

void TPlatformArenaGetGuessingRewardReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TPlatformArenaGetGuessingRewardReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TPlatformArenaGetGuessingRewardReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TPlatformArenaGetGuessingRewardReq_descriptor_;
}

const TPlatformArenaGetGuessingRewardReq& TPlatformArenaGetGuessingRewardReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fPlatformArena_2eproto();
  return *default_instance_;
}

TPlatformArenaGetGuessingRewardReq* TPlatformArenaGetGuessingRewardReq::default_instance_ = NULL;

TPlatformArenaGetGuessingRewardReq* TPlatformArenaGetGuessingRewardReq::New() const {
  return new TPlatformArenaGetGuessingRewardReq;
}

void TPlatformArenaGetGuessingRewardReq::Clear() {
  arrmatchid_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TPlatformArenaGetGuessingRewardReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TPlatformArenaGetGuessingRewardReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated uint32 ArrMatchId = 1;
      case 1: {
        if (tag == 8) {
         parse_ArrMatchId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 8, input, this->mutable_arrmatchid())));
        } else if (tag == 10) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_arrmatchid())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(8)) goto parse_ArrMatchId;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TPlatformArenaGetGuessingRewardReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TPlatformArenaGetGuessingRewardReq)
  return false;
#undef DO_
}

void TPlatformArenaGetGuessingRewardReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TPlatformArenaGetGuessingRewardReq)
  // repeated uint32 ArrMatchId = 1;
  for (int i = 0; i < this->arrmatchid_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      1, this->arrmatchid(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TPlatformArenaGetGuessingRewardReq)
}

::google::protobuf::uint8* TPlatformArenaGetGuessingRewardReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TPlatformArenaGetGuessingRewardReq)
  // repeated uint32 ArrMatchId = 1;
  for (int i = 0; i < this->arrmatchid_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(1, this->arrmatchid(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TPlatformArenaGetGuessingRewardReq)
  return target;
}

int TPlatformArenaGetGuessingRewardReq::ByteSize() const {
  int total_size = 0;

  // repeated uint32 ArrMatchId = 1;
  {
    int data_size = 0;
    for (int i = 0; i < this->arrmatchid_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->arrmatchid(i));
    }
    total_size += 1 * this->arrmatchid_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TPlatformArenaGetGuessingRewardReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TPlatformArenaGetGuessingRewardReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TPlatformArenaGetGuessingRewardReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TPlatformArenaGetGuessingRewardReq::MergeFrom(const TPlatformArenaGetGuessingRewardReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  arrmatchid_.MergeFrom(from.arrmatchid_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TPlatformArenaGetGuessingRewardReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TPlatformArenaGetGuessingRewardReq::CopyFrom(const TPlatformArenaGetGuessingRewardReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TPlatformArenaGetGuessingRewardReq::IsInitialized() const {

  return true;
}

void TPlatformArenaGetGuessingRewardReq::Swap(TPlatformArenaGetGuessingRewardReq* other) {
  if (other != this) {
    arrmatchid_.Swap(&other->arrmatchid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TPlatformArenaGetGuessingRewardReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TPlatformArenaGetGuessingRewardReq_descriptor_;
  metadata.reflection = TPlatformArenaGetGuessingRewardReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TPlatformArenaGetGuessingRewardRsp::kArrRewardInfoFieldNumber;
#endif  // !_MSC_VER

TPlatformArenaGetGuessingRewardRsp::TPlatformArenaGetGuessingRewardRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TPlatformArenaGetGuessingRewardRsp)
}

void TPlatformArenaGetGuessingRewardRsp::InitAsDefaultInstance() {
}

TPlatformArenaGetGuessingRewardRsp::TPlatformArenaGetGuessingRewardRsp(const TPlatformArenaGetGuessingRewardRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TPlatformArenaGetGuessingRewardRsp)
}

void TPlatformArenaGetGuessingRewardRsp::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TPlatformArenaGetGuessingRewardRsp::~TPlatformArenaGetGuessingRewardRsp() {
  // @@protoc_insertion_point(destructor:pb.TPlatformArenaGetGuessingRewardRsp)
  SharedDtor();
}

void TPlatformArenaGetGuessingRewardRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TPlatformArenaGetGuessingRewardRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TPlatformArenaGetGuessingRewardRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TPlatformArenaGetGuessingRewardRsp_descriptor_;
}

const TPlatformArenaGetGuessingRewardRsp& TPlatformArenaGetGuessingRewardRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fPlatformArena_2eproto();
  return *default_instance_;
}

TPlatformArenaGetGuessingRewardRsp* TPlatformArenaGetGuessingRewardRsp::default_instance_ = NULL;

TPlatformArenaGetGuessingRewardRsp* TPlatformArenaGetGuessingRewardRsp::New() const {
  return new TPlatformArenaGetGuessingRewardRsp;
}

void TPlatformArenaGetGuessingRewardRsp::Clear() {
  arrrewardinfo_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TPlatformArenaGetGuessingRewardRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TPlatformArenaGetGuessingRewardRsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .pb.TCommonReward ArrRewardInfo = 1;
      case 1: {
        if (tag == 10) {
         parse_ArrRewardInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_arrrewardinfo()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_ArrRewardInfo;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TPlatformArenaGetGuessingRewardRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TPlatformArenaGetGuessingRewardRsp)
  return false;
#undef DO_
}

void TPlatformArenaGetGuessingRewardRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TPlatformArenaGetGuessingRewardRsp)
  // repeated .pb.TCommonReward ArrRewardInfo = 1;
  for (int i = 0; i < this->arrrewardinfo_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->arrrewardinfo(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TPlatformArenaGetGuessingRewardRsp)
}

::google::protobuf::uint8* TPlatformArenaGetGuessingRewardRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TPlatformArenaGetGuessingRewardRsp)
  // repeated .pb.TCommonReward ArrRewardInfo = 1;
  for (int i = 0; i < this->arrrewardinfo_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->arrrewardinfo(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TPlatformArenaGetGuessingRewardRsp)
  return target;
}

int TPlatformArenaGetGuessingRewardRsp::ByteSize() const {
  int total_size = 0;

  // repeated .pb.TCommonReward ArrRewardInfo = 1;
  total_size += 1 * this->arrrewardinfo_size();
  for (int i = 0; i < this->arrrewardinfo_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->arrrewardinfo(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TPlatformArenaGetGuessingRewardRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TPlatformArenaGetGuessingRewardRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TPlatformArenaGetGuessingRewardRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TPlatformArenaGetGuessingRewardRsp::MergeFrom(const TPlatformArenaGetGuessingRewardRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  arrrewardinfo_.MergeFrom(from.arrrewardinfo_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TPlatformArenaGetGuessingRewardRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TPlatformArenaGetGuessingRewardRsp::CopyFrom(const TPlatformArenaGetGuessingRewardRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TPlatformArenaGetGuessingRewardRsp::IsInitialized() const {

  return true;
}

void TPlatformArenaGetGuessingRewardRsp::Swap(TPlatformArenaGetGuessingRewardRsp* other) {
  if (other != this) {
    arrrewardinfo_.Swap(&other->arrrewardinfo_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TPlatformArenaGetGuessingRewardRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TPlatformArenaGetGuessingRewardRsp_descriptor_;
  metadata.reflection = TPlatformArenaGetGuessingRewardRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TGuessRecordNotify::kGuessRecordFieldNumber;
#endif  // !_MSC_VER

TGuessRecordNotify::TGuessRecordNotify()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TGuessRecordNotify)
}

void TGuessRecordNotify::InitAsDefaultInstance() {
  guessrecord_ = const_cast< ::pb::TGuessRecordData*>(&::pb::TGuessRecordData::default_instance());
}

TGuessRecordNotify::TGuessRecordNotify(const TGuessRecordNotify& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TGuessRecordNotify)
}

void TGuessRecordNotify::SharedCtor() {
  _cached_size_ = 0;
  guessrecord_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TGuessRecordNotify::~TGuessRecordNotify() {
  // @@protoc_insertion_point(destructor:pb.TGuessRecordNotify)
  SharedDtor();
}

void TGuessRecordNotify::SharedDtor() {
  if (this != default_instance_) {
    delete guessrecord_;
  }
}

void TGuessRecordNotify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TGuessRecordNotify::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TGuessRecordNotify_descriptor_;
}

const TGuessRecordNotify& TGuessRecordNotify::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fPlatformArena_2eproto();
  return *default_instance_;
}

TGuessRecordNotify* TGuessRecordNotify::default_instance_ = NULL;

TGuessRecordNotify* TGuessRecordNotify::New() const {
  return new TGuessRecordNotify;
}

void TGuessRecordNotify::Clear() {
  if (has_guessrecord()) {
    if (guessrecord_ != NULL) guessrecord_->::pb::TGuessRecordData::Clear();
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TGuessRecordNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TGuessRecordNotify)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .pb.TGuessRecordData GuessRecord = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_guessrecord()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TGuessRecordNotify)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TGuessRecordNotify)
  return false;
#undef DO_
}

void TGuessRecordNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TGuessRecordNotify)
  // optional .pb.TGuessRecordData GuessRecord = 1;
  if (has_guessrecord()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->guessrecord(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TGuessRecordNotify)
}

::google::protobuf::uint8* TGuessRecordNotify::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TGuessRecordNotify)
  // optional .pb.TGuessRecordData GuessRecord = 1;
  if (has_guessrecord()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->guessrecord(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TGuessRecordNotify)
  return target;
}

int TGuessRecordNotify::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .pb.TGuessRecordData GuessRecord = 1;
    if (has_guessrecord()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->guessrecord());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TGuessRecordNotify::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TGuessRecordNotify* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TGuessRecordNotify*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TGuessRecordNotify::MergeFrom(const TGuessRecordNotify& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_guessrecord()) {
      mutable_guessrecord()->::pb::TGuessRecordData::MergeFrom(from.guessrecord());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TGuessRecordNotify::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TGuessRecordNotify::CopyFrom(const TGuessRecordNotify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TGuessRecordNotify::IsInitialized() const {

  return true;
}

void TGuessRecordNotify::Swap(TGuessRecordNotify* other) {
  if (other != this) {
    std::swap(guessrecord_, other->guessrecord_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TGuessRecordNotify::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TGuessRecordNotify_descriptor_;
  metadata.reflection = TGuessRecordNotify_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TPlatformArenaGiveThumbReq::kGroupIdFieldNumber;
const int TPlatformArenaGiveThumbReq::kUidFieldNumber;
#endif  // !_MSC_VER

TPlatformArenaGiveThumbReq::TPlatformArenaGiveThumbReq()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TPlatformArenaGiveThumbReq)
}

void TPlatformArenaGiveThumbReq::InitAsDefaultInstance() {
}

TPlatformArenaGiveThumbReq::TPlatformArenaGiveThumbReq(const TPlatformArenaGiveThumbReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TPlatformArenaGiveThumbReq)
}

void TPlatformArenaGiveThumbReq::SharedCtor() {
  _cached_size_ = 0;
  groupid_ = 0u;
  uid_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TPlatformArenaGiveThumbReq::~TPlatformArenaGiveThumbReq() {
  // @@protoc_insertion_point(destructor:pb.TPlatformArenaGiveThumbReq)
  SharedDtor();
}

void TPlatformArenaGiveThumbReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TPlatformArenaGiveThumbReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TPlatformArenaGiveThumbReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TPlatformArenaGiveThumbReq_descriptor_;
}

const TPlatformArenaGiveThumbReq& TPlatformArenaGiveThumbReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fPlatformArena_2eproto();
  return *default_instance_;
}

TPlatformArenaGiveThumbReq* TPlatformArenaGiveThumbReq::default_instance_ = NULL;

TPlatformArenaGiveThumbReq* TPlatformArenaGiveThumbReq::New() const {
  return new TPlatformArenaGiveThumbReq;
}

void TPlatformArenaGiveThumbReq::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<TPlatformArenaGiveThumbReq*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(uid_, groupid_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TPlatformArenaGiveThumbReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TPlatformArenaGiveThumbReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 GroupId = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &groupid_)));
          set_has_groupid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_Uid;
        break;
      }

      // optional uint64 Uid = 2;
      case 2: {
        if (tag == 16) {
         parse_Uid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &uid_)));
          set_has_uid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TPlatformArenaGiveThumbReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TPlatformArenaGiveThumbReq)
  return false;
#undef DO_
}

void TPlatformArenaGiveThumbReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TPlatformArenaGiveThumbReq)
  // optional uint32 GroupId = 1;
  if (has_groupid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->groupid(), output);
  }

  // optional uint64 Uid = 2;
  if (has_uid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->uid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TPlatformArenaGiveThumbReq)
}

::google::protobuf::uint8* TPlatformArenaGiveThumbReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TPlatformArenaGiveThumbReq)
  // optional uint32 GroupId = 1;
  if (has_groupid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->groupid(), target);
  }

  // optional uint64 Uid = 2;
  if (has_uid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->uid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TPlatformArenaGiveThumbReq)
  return target;
}

int TPlatformArenaGiveThumbReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 GroupId = 1;
    if (has_groupid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->groupid());
    }

    // optional uint64 Uid = 2;
    if (has_uid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->uid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TPlatformArenaGiveThumbReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TPlatformArenaGiveThumbReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TPlatformArenaGiveThumbReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TPlatformArenaGiveThumbReq::MergeFrom(const TPlatformArenaGiveThumbReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_groupid()) {
      set_groupid(from.groupid());
    }
    if (from.has_uid()) {
      set_uid(from.uid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TPlatformArenaGiveThumbReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TPlatformArenaGiveThumbReq::CopyFrom(const TPlatformArenaGiveThumbReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TPlatformArenaGiveThumbReq::IsInitialized() const {

  return true;
}

void TPlatformArenaGiveThumbReq::Swap(TPlatformArenaGiveThumbReq* other) {
  if (other != this) {
    std::swap(groupid_, other->groupid_);
    std::swap(uid_, other->uid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TPlatformArenaGiveThumbReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TPlatformArenaGiveThumbReq_descriptor_;
  metadata.reflection = TPlatformArenaGiveThumbReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TPlatformArenaGiveThumbRsp::kUidFieldNumber;
const int TPlatformArenaGiveThumbRsp::kThumbNumFieldNumber;
#endif  // !_MSC_VER

TPlatformArenaGiveThumbRsp::TPlatformArenaGiveThumbRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TPlatformArenaGiveThumbRsp)
}

void TPlatformArenaGiveThumbRsp::InitAsDefaultInstance() {
}

TPlatformArenaGiveThumbRsp::TPlatformArenaGiveThumbRsp(const TPlatformArenaGiveThumbRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TPlatformArenaGiveThumbRsp)
}

void TPlatformArenaGiveThumbRsp::SharedCtor() {
  _cached_size_ = 0;
  uid_ = GOOGLE_ULONGLONG(0);
  thumbnum_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TPlatformArenaGiveThumbRsp::~TPlatformArenaGiveThumbRsp() {
  // @@protoc_insertion_point(destructor:pb.TPlatformArenaGiveThumbRsp)
  SharedDtor();
}

void TPlatformArenaGiveThumbRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TPlatformArenaGiveThumbRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TPlatformArenaGiveThumbRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TPlatformArenaGiveThumbRsp_descriptor_;
}

const TPlatformArenaGiveThumbRsp& TPlatformArenaGiveThumbRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fPlatformArena_2eproto();
  return *default_instance_;
}

TPlatformArenaGiveThumbRsp* TPlatformArenaGiveThumbRsp::default_instance_ = NULL;

TPlatformArenaGiveThumbRsp* TPlatformArenaGiveThumbRsp::New() const {
  return new TPlatformArenaGiveThumbRsp;
}

void TPlatformArenaGiveThumbRsp::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<TPlatformArenaGiveThumbRsp*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(uid_, thumbnum_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TPlatformArenaGiveThumbRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TPlatformArenaGiveThumbRsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 Uid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &uid_)));
          set_has_uid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_ThumbNum;
        break;
      }

      // optional uint32 ThumbNum = 2;
      case 2: {
        if (tag == 16) {
         parse_ThumbNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &thumbnum_)));
          set_has_thumbnum();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TPlatformArenaGiveThumbRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TPlatformArenaGiveThumbRsp)
  return false;
#undef DO_
}

void TPlatformArenaGiveThumbRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TPlatformArenaGiveThumbRsp)
  // optional uint64 Uid = 1;
  if (has_uid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->uid(), output);
  }

  // optional uint32 ThumbNum = 2;
  if (has_thumbnum()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->thumbnum(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TPlatformArenaGiveThumbRsp)
}

::google::protobuf::uint8* TPlatformArenaGiveThumbRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TPlatformArenaGiveThumbRsp)
  // optional uint64 Uid = 1;
  if (has_uid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->uid(), target);
  }

  // optional uint32 ThumbNum = 2;
  if (has_thumbnum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->thumbnum(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TPlatformArenaGiveThumbRsp)
  return target;
}

int TPlatformArenaGiveThumbRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 Uid = 1;
    if (has_uid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->uid());
    }

    // optional uint32 ThumbNum = 2;
    if (has_thumbnum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->thumbnum());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TPlatformArenaGiveThumbRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TPlatformArenaGiveThumbRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TPlatformArenaGiveThumbRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TPlatformArenaGiveThumbRsp::MergeFrom(const TPlatformArenaGiveThumbRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_uid()) {
      set_uid(from.uid());
    }
    if (from.has_thumbnum()) {
      set_thumbnum(from.thumbnum());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TPlatformArenaGiveThumbRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TPlatformArenaGiveThumbRsp::CopyFrom(const TPlatformArenaGiveThumbRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TPlatformArenaGiveThumbRsp::IsInitialized() const {

  return true;
}

void TPlatformArenaGiveThumbRsp::Swap(TPlatformArenaGiveThumbRsp* other) {
  if (other != this) {
    std::swap(uid_, other->uid_);
    std::swap(thumbnum_, other->thumbnum_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TPlatformArenaGiveThumbRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TPlatformArenaGiveThumbRsp_descriptor_;
  metadata.reflection = TPlatformArenaGiveThumbRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TPlatformArenaBattleHeroStatus::kHtidFieldNumber;
const int TPlatformArenaBattleHeroStatus::kPosFieldNumber;
const int TPlatformArenaBattleHeroStatus::kIsKilledFieldNumber;
const int TPlatformArenaBattleHeroStatus::kLevelFieldNumber;
const int TPlatformArenaBattleHeroStatus::kStarLvFieldNumber;
const int TPlatformArenaBattleHeroStatus::kHidFieldNumber;
#endif  // !_MSC_VER

TPlatformArenaBattleHeroStatus::TPlatformArenaBattleHeroStatus()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TPlatformArenaBattleHeroStatus)
}

void TPlatformArenaBattleHeroStatus::InitAsDefaultInstance() {
}

TPlatformArenaBattleHeroStatus::TPlatformArenaBattleHeroStatus(const TPlatformArenaBattleHeroStatus& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TPlatformArenaBattleHeroStatus)
}

void TPlatformArenaBattleHeroStatus::SharedCtor() {
  _cached_size_ = 0;
  htid_ = 0u;
  pos_ = 0u;
  iskilled_ = 0u;
  level_ = 0u;
  starlv_ = 0u;
  hid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TPlatformArenaBattleHeroStatus::~TPlatformArenaBattleHeroStatus() {
  // @@protoc_insertion_point(destructor:pb.TPlatformArenaBattleHeroStatus)
  SharedDtor();
}

void TPlatformArenaBattleHeroStatus::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TPlatformArenaBattleHeroStatus::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TPlatformArenaBattleHeroStatus::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TPlatformArenaBattleHeroStatus_descriptor_;
}

const TPlatformArenaBattleHeroStatus& TPlatformArenaBattleHeroStatus::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fPlatformArena_2eproto();
  return *default_instance_;
}

TPlatformArenaBattleHeroStatus* TPlatformArenaBattleHeroStatus::default_instance_ = NULL;

TPlatformArenaBattleHeroStatus* TPlatformArenaBattleHeroStatus::New() const {
  return new TPlatformArenaBattleHeroStatus;
}

void TPlatformArenaBattleHeroStatus::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<TPlatformArenaBattleHeroStatus*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 63) {
    ZR_(htid_, hid_);
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TPlatformArenaBattleHeroStatus::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TPlatformArenaBattleHeroStatus)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 Htid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &htid_)));
          set_has_htid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_Pos;
        break;
      }

      // optional uint32 Pos = 2;
      case 2: {
        if (tag == 16) {
         parse_Pos:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &pos_)));
          set_has_pos();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_IsKilled;
        break;
      }

      // optional uint32 IsKilled = 3;
      case 3: {
        if (tag == 24) {
         parse_IsKilled:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &iskilled_)));
          set_has_iskilled();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_Level;
        break;
      }

      // optional uint32 Level = 4;
      case 4: {
        if (tag == 32) {
         parse_Level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &level_)));
          set_has_level();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_StarLv;
        break;
      }

      // optional uint32 StarLv = 5;
      case 5: {
        if (tag == 40) {
         parse_StarLv:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &starlv_)));
          set_has_starlv();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_Hid;
        break;
      }

      // optional uint32 Hid = 6;
      case 6: {
        if (tag == 48) {
         parse_Hid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &hid_)));
          set_has_hid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TPlatformArenaBattleHeroStatus)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TPlatformArenaBattleHeroStatus)
  return false;
#undef DO_
}

void TPlatformArenaBattleHeroStatus::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TPlatformArenaBattleHeroStatus)
  // optional uint32 Htid = 1;
  if (has_htid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->htid(), output);
  }

  // optional uint32 Pos = 2;
  if (has_pos()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->pos(), output);
  }

  // optional uint32 IsKilled = 3;
  if (has_iskilled()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->iskilled(), output);
  }

  // optional uint32 Level = 4;
  if (has_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->level(), output);
  }

  // optional uint32 StarLv = 5;
  if (has_starlv()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->starlv(), output);
  }

  // optional uint32 Hid = 6;
  if (has_hid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->hid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TPlatformArenaBattleHeroStatus)
}

::google::protobuf::uint8* TPlatformArenaBattleHeroStatus::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TPlatformArenaBattleHeroStatus)
  // optional uint32 Htid = 1;
  if (has_htid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->htid(), target);
  }

  // optional uint32 Pos = 2;
  if (has_pos()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->pos(), target);
  }

  // optional uint32 IsKilled = 3;
  if (has_iskilled()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->iskilled(), target);
  }

  // optional uint32 Level = 4;
  if (has_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->level(), target);
  }

  // optional uint32 StarLv = 5;
  if (has_starlv()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->starlv(), target);
  }

  // optional uint32 Hid = 6;
  if (has_hid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->hid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TPlatformArenaBattleHeroStatus)
  return target;
}

int TPlatformArenaBattleHeroStatus::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 Htid = 1;
    if (has_htid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->htid());
    }

    // optional uint32 Pos = 2;
    if (has_pos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->pos());
    }

    // optional uint32 IsKilled = 3;
    if (has_iskilled()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->iskilled());
    }

    // optional uint32 Level = 4;
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->level());
    }

    // optional uint32 StarLv = 5;
    if (has_starlv()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->starlv());
    }

    // optional uint32 Hid = 6;
    if (has_hid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->hid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TPlatformArenaBattleHeroStatus::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TPlatformArenaBattleHeroStatus* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TPlatformArenaBattleHeroStatus*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TPlatformArenaBattleHeroStatus::MergeFrom(const TPlatformArenaBattleHeroStatus& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_htid()) {
      set_htid(from.htid());
    }
    if (from.has_pos()) {
      set_pos(from.pos());
    }
    if (from.has_iskilled()) {
      set_iskilled(from.iskilled());
    }
    if (from.has_level()) {
      set_level(from.level());
    }
    if (from.has_starlv()) {
      set_starlv(from.starlv());
    }
    if (from.has_hid()) {
      set_hid(from.hid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TPlatformArenaBattleHeroStatus::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TPlatformArenaBattleHeroStatus::CopyFrom(const TPlatformArenaBattleHeroStatus& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TPlatformArenaBattleHeroStatus::IsInitialized() const {

  return true;
}

void TPlatformArenaBattleHeroStatus::Swap(TPlatformArenaBattleHeroStatus* other) {
  if (other != this) {
    std::swap(htid_, other->htid_);
    std::swap(pos_, other->pos_);
    std::swap(iskilled_, other->iskilled_);
    std::swap(level_, other->level_);
    std::swap(starlv_, other->starlv_);
    std::swap(hid_, other->hid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TPlatformArenaBattleHeroStatus::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TPlatformArenaBattleHeroStatus_descriptor_;
  metadata.reflection = TPlatformArenaBattleHeroStatus_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TPlatformArenaPreviewBattleResult::kFormationIdFieldNumber;
const int TPlatformArenaPreviewBattleResult::kArrAtkHeroInfoFieldNumber;
const int TPlatformArenaPreviewBattleResult::kArrDefHeroInfoFieldNumber;
const int TPlatformArenaPreviewBattleResult::kIsAtkWinFieldNumber;
const int TPlatformArenaPreviewBattleResult::kRidFieldNumber;
const int TPlatformArenaPreviewBattleResult::kAtkFightForceFieldNumber;
const int TPlatformArenaPreviewBattleResult::kDefFightForceFieldNumber;
#endif  // !_MSC_VER

TPlatformArenaPreviewBattleResult::TPlatformArenaPreviewBattleResult()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TPlatformArenaPreviewBattleResult)
}

void TPlatformArenaPreviewBattleResult::InitAsDefaultInstance() {
}

TPlatformArenaPreviewBattleResult::TPlatformArenaPreviewBattleResult(const TPlatformArenaPreviewBattleResult& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TPlatformArenaPreviewBattleResult)
}

void TPlatformArenaPreviewBattleResult::SharedCtor() {
  _cached_size_ = 0;
  formationid_ = 0u;
  isatkwin_ = 0u;
  rid_ = GOOGLE_ULONGLONG(0);
  atkfightforce_ = GOOGLE_ULONGLONG(0);
  deffightforce_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TPlatformArenaPreviewBattleResult::~TPlatformArenaPreviewBattleResult() {
  // @@protoc_insertion_point(destructor:pb.TPlatformArenaPreviewBattleResult)
  SharedDtor();
}

void TPlatformArenaPreviewBattleResult::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TPlatformArenaPreviewBattleResult::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TPlatformArenaPreviewBattleResult::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TPlatformArenaPreviewBattleResult_descriptor_;
}

const TPlatformArenaPreviewBattleResult& TPlatformArenaPreviewBattleResult::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fPlatformArena_2eproto();
  return *default_instance_;
}

TPlatformArenaPreviewBattleResult* TPlatformArenaPreviewBattleResult::default_instance_ = NULL;

TPlatformArenaPreviewBattleResult* TPlatformArenaPreviewBattleResult::New() const {
  return new TPlatformArenaPreviewBattleResult;
}

void TPlatformArenaPreviewBattleResult::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<TPlatformArenaPreviewBattleResult*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 121) {
    ZR_(formationid_, isatkwin_);
    ZR_(rid_, deffightforce_);
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  arratkheroinfo_.Clear();
  arrdefheroinfo_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TPlatformArenaPreviewBattleResult::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TPlatformArenaPreviewBattleResult)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 FormationId = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &formationid_)));
          set_has_formationid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_ArrAtkHeroInfo;
        break;
      }

      // repeated .pb.TPlatformArenaBattleHeroStatus ArrAtkHeroInfo = 2;
      case 2: {
        if (tag == 18) {
         parse_ArrAtkHeroInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_arratkheroinfo()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_ArrAtkHeroInfo;
        if (input->ExpectTag(26)) goto parse_ArrDefHeroInfo;
        break;
      }

      // repeated .pb.TPlatformArenaBattleHeroStatus ArrDefHeroInfo = 3;
      case 3: {
        if (tag == 26) {
         parse_ArrDefHeroInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_arrdefheroinfo()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_ArrDefHeroInfo;
        if (input->ExpectTag(32)) goto parse_IsAtkWin;
        break;
      }

      // optional uint32 IsAtkWin = 4;
      case 4: {
        if (tag == 32) {
         parse_IsAtkWin:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &isatkwin_)));
          set_has_isatkwin();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_Rid;
        break;
      }

      // optional uint64 Rid = 5;
      case 5: {
        if (tag == 40) {
         parse_Rid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &rid_)));
          set_has_rid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_atkFightForce;
        break;
      }

      // optional uint64 atkFightForce = 6;
      case 6: {
        if (tag == 48) {
         parse_atkFightForce:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &atkfightforce_)));
          set_has_atkfightforce();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_defFightForce;
        break;
      }

      // optional uint64 defFightForce = 7;
      case 7: {
        if (tag == 56) {
         parse_defFightForce:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &deffightforce_)));
          set_has_deffightforce();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TPlatformArenaPreviewBattleResult)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TPlatformArenaPreviewBattleResult)
  return false;
#undef DO_
}

void TPlatformArenaPreviewBattleResult::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TPlatformArenaPreviewBattleResult)
  // optional uint32 FormationId = 1;
  if (has_formationid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->formationid(), output);
  }

  // repeated .pb.TPlatformArenaBattleHeroStatus ArrAtkHeroInfo = 2;
  for (int i = 0; i < this->arratkheroinfo_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->arratkheroinfo(i), output);
  }

  // repeated .pb.TPlatformArenaBattleHeroStatus ArrDefHeroInfo = 3;
  for (int i = 0; i < this->arrdefheroinfo_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->arrdefheroinfo(i), output);
  }

  // optional uint32 IsAtkWin = 4;
  if (has_isatkwin()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->isatkwin(), output);
  }

  // optional uint64 Rid = 5;
  if (has_rid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(5, this->rid(), output);
  }

  // optional uint64 atkFightForce = 6;
  if (has_atkfightforce()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(6, this->atkfightforce(), output);
  }

  // optional uint64 defFightForce = 7;
  if (has_deffightforce()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(7, this->deffightforce(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TPlatformArenaPreviewBattleResult)
}

::google::protobuf::uint8* TPlatformArenaPreviewBattleResult::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TPlatformArenaPreviewBattleResult)
  // optional uint32 FormationId = 1;
  if (has_formationid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->formationid(), target);
  }

  // repeated .pb.TPlatformArenaBattleHeroStatus ArrAtkHeroInfo = 2;
  for (int i = 0; i < this->arratkheroinfo_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->arratkheroinfo(i), target);
  }

  // repeated .pb.TPlatformArenaBattleHeroStatus ArrDefHeroInfo = 3;
  for (int i = 0; i < this->arrdefheroinfo_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->arrdefheroinfo(i), target);
  }

  // optional uint32 IsAtkWin = 4;
  if (has_isatkwin()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->isatkwin(), target);
  }

  // optional uint64 Rid = 5;
  if (has_rid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(5, this->rid(), target);
  }

  // optional uint64 atkFightForce = 6;
  if (has_atkfightforce()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(6, this->atkfightforce(), target);
  }

  // optional uint64 defFightForce = 7;
  if (has_deffightforce()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(7, this->deffightforce(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TPlatformArenaPreviewBattleResult)
  return target;
}

int TPlatformArenaPreviewBattleResult::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 FormationId = 1;
    if (has_formationid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->formationid());
    }

    // optional uint32 IsAtkWin = 4;
    if (has_isatkwin()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->isatkwin());
    }

    // optional uint64 Rid = 5;
    if (has_rid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->rid());
    }

    // optional uint64 atkFightForce = 6;
    if (has_atkfightforce()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->atkfightforce());
    }

    // optional uint64 defFightForce = 7;
    if (has_deffightforce()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->deffightforce());
    }

  }
  // repeated .pb.TPlatformArenaBattleHeroStatus ArrAtkHeroInfo = 2;
  total_size += 1 * this->arratkheroinfo_size();
  for (int i = 0; i < this->arratkheroinfo_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->arratkheroinfo(i));
  }

  // repeated .pb.TPlatformArenaBattleHeroStatus ArrDefHeroInfo = 3;
  total_size += 1 * this->arrdefheroinfo_size();
  for (int i = 0; i < this->arrdefheroinfo_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->arrdefheroinfo(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TPlatformArenaPreviewBattleResult::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TPlatformArenaPreviewBattleResult* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TPlatformArenaPreviewBattleResult*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TPlatformArenaPreviewBattleResult::MergeFrom(const TPlatformArenaPreviewBattleResult& from) {
  GOOGLE_CHECK_NE(&from, this);
  arratkheroinfo_.MergeFrom(from.arratkheroinfo_);
  arrdefheroinfo_.MergeFrom(from.arrdefheroinfo_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_formationid()) {
      set_formationid(from.formationid());
    }
    if (from.has_isatkwin()) {
      set_isatkwin(from.isatkwin());
    }
    if (from.has_rid()) {
      set_rid(from.rid());
    }
    if (from.has_atkfightforce()) {
      set_atkfightforce(from.atkfightforce());
    }
    if (from.has_deffightforce()) {
      set_deffightforce(from.deffightforce());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TPlatformArenaPreviewBattleResult::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TPlatformArenaPreviewBattleResult::CopyFrom(const TPlatformArenaPreviewBattleResult& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TPlatformArenaPreviewBattleResult::IsInitialized() const {

  return true;
}

void TPlatformArenaPreviewBattleResult::Swap(TPlatformArenaPreviewBattleResult* other) {
  if (other != this) {
    std::swap(formationid_, other->formationid_);
    arratkheroinfo_.Swap(&other->arratkheroinfo_);
    arrdefheroinfo_.Swap(&other->arrdefheroinfo_);
    std::swap(isatkwin_, other->isatkwin_);
    std::swap(rid_, other->rid_);
    std::swap(atkfightforce_, other->atkfightforce_);
    std::swap(deffightforce_, other->deffightforce_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TPlatformArenaPreviewBattleResult::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TPlatformArenaPreviewBattleResult_descriptor_;
  metadata.reflection = TPlatformArenaPreviewBattleResult_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TPlatformArenaGetBattlePreviewReq::kReqTypeFieldNumber;
const int TPlatformArenaGetBattlePreviewReq::kMatchIdFieldNumber;
const int TPlatformArenaGetBattlePreviewReq::kReportIdFieldNumber;
const int TPlatformArenaGetBattlePreviewReq::kSeasonIdFieldNumber;
const int TPlatformArenaGetBattlePreviewReq::kGroupIdFieldNumber;
#endif  // !_MSC_VER

TPlatformArenaGetBattlePreviewReq::TPlatformArenaGetBattlePreviewReq()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TPlatformArenaGetBattlePreviewReq)
}

void TPlatformArenaGetBattlePreviewReq::InitAsDefaultInstance() {
}

TPlatformArenaGetBattlePreviewReq::TPlatformArenaGetBattlePreviewReq(const TPlatformArenaGetBattlePreviewReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TPlatformArenaGetBattlePreviewReq)
}

void TPlatformArenaGetBattlePreviewReq::SharedCtor() {
  _cached_size_ = 0;
  reqtype_ = 0u;
  matchid_ = 0u;
  reportid_ = 0u;
  seasonid_ = 0u;
  groupid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TPlatformArenaGetBattlePreviewReq::~TPlatformArenaGetBattlePreviewReq() {
  // @@protoc_insertion_point(destructor:pb.TPlatformArenaGetBattlePreviewReq)
  SharedDtor();
}

void TPlatformArenaGetBattlePreviewReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TPlatformArenaGetBattlePreviewReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TPlatformArenaGetBattlePreviewReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TPlatformArenaGetBattlePreviewReq_descriptor_;
}

const TPlatformArenaGetBattlePreviewReq& TPlatformArenaGetBattlePreviewReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fPlatformArena_2eproto();
  return *default_instance_;
}

TPlatformArenaGetBattlePreviewReq* TPlatformArenaGetBattlePreviewReq::default_instance_ = NULL;

TPlatformArenaGetBattlePreviewReq* TPlatformArenaGetBattlePreviewReq::New() const {
  return new TPlatformArenaGetBattlePreviewReq;
}

void TPlatformArenaGetBattlePreviewReq::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<TPlatformArenaGetBattlePreviewReq*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 31) {
    ZR_(reqtype_, groupid_);
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TPlatformArenaGetBattlePreviewReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TPlatformArenaGetBattlePreviewReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 ReqType = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &reqtype_)));
          set_has_reqtype();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_MatchId;
        break;
      }

      // optional uint32 MatchId = 2;
      case 2: {
        if (tag == 16) {
         parse_MatchId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &matchid_)));
          set_has_matchid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_ReportId;
        break;
      }

      // optional uint32 ReportId = 3;
      case 3: {
        if (tag == 24) {
         parse_ReportId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &reportid_)));
          set_has_reportid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_SeasonId;
        break;
      }

      // optional uint32 SeasonId = 4;
      case 4: {
        if (tag == 32) {
         parse_SeasonId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &seasonid_)));
          set_has_seasonid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_GroupId;
        break;
      }

      // optional uint32 GroupId = 5;
      case 5: {
        if (tag == 40) {
         parse_GroupId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &groupid_)));
          set_has_groupid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TPlatformArenaGetBattlePreviewReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TPlatformArenaGetBattlePreviewReq)
  return false;
#undef DO_
}

void TPlatformArenaGetBattlePreviewReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TPlatformArenaGetBattlePreviewReq)
  // optional uint32 ReqType = 1;
  if (has_reqtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->reqtype(), output);
  }

  // optional uint32 MatchId = 2;
  if (has_matchid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->matchid(), output);
  }

  // optional uint32 ReportId = 3;
  if (has_reportid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->reportid(), output);
  }

  // optional uint32 SeasonId = 4;
  if (has_seasonid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->seasonid(), output);
  }

  // optional uint32 GroupId = 5;
  if (has_groupid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->groupid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TPlatformArenaGetBattlePreviewReq)
}

::google::protobuf::uint8* TPlatformArenaGetBattlePreviewReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TPlatformArenaGetBattlePreviewReq)
  // optional uint32 ReqType = 1;
  if (has_reqtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->reqtype(), target);
  }

  // optional uint32 MatchId = 2;
  if (has_matchid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->matchid(), target);
  }

  // optional uint32 ReportId = 3;
  if (has_reportid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->reportid(), target);
  }

  // optional uint32 SeasonId = 4;
  if (has_seasonid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->seasonid(), target);
  }

  // optional uint32 GroupId = 5;
  if (has_groupid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->groupid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TPlatformArenaGetBattlePreviewReq)
  return target;
}

int TPlatformArenaGetBattlePreviewReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 ReqType = 1;
    if (has_reqtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->reqtype());
    }

    // optional uint32 MatchId = 2;
    if (has_matchid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->matchid());
    }

    // optional uint32 ReportId = 3;
    if (has_reportid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->reportid());
    }

    // optional uint32 SeasonId = 4;
    if (has_seasonid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->seasonid());
    }

    // optional uint32 GroupId = 5;
    if (has_groupid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->groupid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TPlatformArenaGetBattlePreviewReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TPlatformArenaGetBattlePreviewReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TPlatformArenaGetBattlePreviewReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TPlatformArenaGetBattlePreviewReq::MergeFrom(const TPlatformArenaGetBattlePreviewReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_reqtype()) {
      set_reqtype(from.reqtype());
    }
    if (from.has_matchid()) {
      set_matchid(from.matchid());
    }
    if (from.has_reportid()) {
      set_reportid(from.reportid());
    }
    if (from.has_seasonid()) {
      set_seasonid(from.seasonid());
    }
    if (from.has_groupid()) {
      set_groupid(from.groupid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TPlatformArenaGetBattlePreviewReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TPlatformArenaGetBattlePreviewReq::CopyFrom(const TPlatformArenaGetBattlePreviewReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TPlatformArenaGetBattlePreviewReq::IsInitialized() const {

  return true;
}

void TPlatformArenaGetBattlePreviewReq::Swap(TPlatformArenaGetBattlePreviewReq* other) {
  if (other != this) {
    std::swap(reqtype_, other->reqtype_);
    std::swap(matchid_, other->matchid_);
    std::swap(reportid_, other->reportid_);
    std::swap(seasonid_, other->seasonid_);
    std::swap(groupid_, other->groupid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TPlatformArenaGetBattlePreviewReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TPlatformArenaGetBattlePreviewReq_descriptor_;
  metadata.reflection = TPlatformArenaGetBattlePreviewReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TPlatformArenaGetBattlePreviewRsp::kAtkUserInfoFieldNumber;
const int TPlatformArenaGetBattlePreviewRsp::kDefUserInfoFieldNumber;
const int TPlatformArenaGetBattlePreviewRsp::kArrBattleInfoFieldNumber;
#endif  // !_MSC_VER

TPlatformArenaGetBattlePreviewRsp::TPlatformArenaGetBattlePreviewRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TPlatformArenaGetBattlePreviewRsp)
}

void TPlatformArenaGetBattlePreviewRsp::InitAsDefaultInstance() {
  atkuserinfo_ = const_cast< ::pb::TUserSimpleInfo*>(&::pb::TUserSimpleInfo::default_instance());
  defuserinfo_ = const_cast< ::pb::TUserSimpleInfo*>(&::pb::TUserSimpleInfo::default_instance());
}

TPlatformArenaGetBattlePreviewRsp::TPlatformArenaGetBattlePreviewRsp(const TPlatformArenaGetBattlePreviewRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TPlatformArenaGetBattlePreviewRsp)
}

void TPlatformArenaGetBattlePreviewRsp::SharedCtor() {
  _cached_size_ = 0;
  atkuserinfo_ = NULL;
  defuserinfo_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TPlatformArenaGetBattlePreviewRsp::~TPlatformArenaGetBattlePreviewRsp() {
  // @@protoc_insertion_point(destructor:pb.TPlatformArenaGetBattlePreviewRsp)
  SharedDtor();
}

void TPlatformArenaGetBattlePreviewRsp::SharedDtor() {
  if (this != default_instance_) {
    delete atkuserinfo_;
    delete defuserinfo_;
  }
}

void TPlatformArenaGetBattlePreviewRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TPlatformArenaGetBattlePreviewRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TPlatformArenaGetBattlePreviewRsp_descriptor_;
}

const TPlatformArenaGetBattlePreviewRsp& TPlatformArenaGetBattlePreviewRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fPlatformArena_2eproto();
  return *default_instance_;
}

TPlatformArenaGetBattlePreviewRsp* TPlatformArenaGetBattlePreviewRsp::default_instance_ = NULL;

TPlatformArenaGetBattlePreviewRsp* TPlatformArenaGetBattlePreviewRsp::New() const {
  return new TPlatformArenaGetBattlePreviewRsp;
}

void TPlatformArenaGetBattlePreviewRsp::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    if (has_atkuserinfo()) {
      if (atkuserinfo_ != NULL) atkuserinfo_->::pb::TUserSimpleInfo::Clear();
    }
    if (has_defuserinfo()) {
      if (defuserinfo_ != NULL) defuserinfo_->::pb::TUserSimpleInfo::Clear();
    }
  }
  arrbattleinfo_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TPlatformArenaGetBattlePreviewRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TPlatformArenaGetBattlePreviewRsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .pb.TUserSimpleInfo AtkUserInfo = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_atkuserinfo()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_DefUserInfo;
        break;
      }

      // optional .pb.TUserSimpleInfo DefUserInfo = 2;
      case 2: {
        if (tag == 18) {
         parse_DefUserInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_defuserinfo()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_ArrBattleInfo;
        break;
      }

      // repeated .pb.TPlatformArenaPreviewBattleResult ArrBattleInfo = 3;
      case 3: {
        if (tag == 26) {
         parse_ArrBattleInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_arrbattleinfo()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_ArrBattleInfo;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TPlatformArenaGetBattlePreviewRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TPlatformArenaGetBattlePreviewRsp)
  return false;
#undef DO_
}

void TPlatformArenaGetBattlePreviewRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TPlatformArenaGetBattlePreviewRsp)
  // optional .pb.TUserSimpleInfo AtkUserInfo = 1;
  if (has_atkuserinfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->atkuserinfo(), output);
  }

  // optional .pb.TUserSimpleInfo DefUserInfo = 2;
  if (has_defuserinfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->defuserinfo(), output);
  }

  // repeated .pb.TPlatformArenaPreviewBattleResult ArrBattleInfo = 3;
  for (int i = 0; i < this->arrbattleinfo_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->arrbattleinfo(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TPlatformArenaGetBattlePreviewRsp)
}

::google::protobuf::uint8* TPlatformArenaGetBattlePreviewRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TPlatformArenaGetBattlePreviewRsp)
  // optional .pb.TUserSimpleInfo AtkUserInfo = 1;
  if (has_atkuserinfo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->atkuserinfo(), target);
  }

  // optional .pb.TUserSimpleInfo DefUserInfo = 2;
  if (has_defuserinfo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->defuserinfo(), target);
  }

  // repeated .pb.TPlatformArenaPreviewBattleResult ArrBattleInfo = 3;
  for (int i = 0; i < this->arrbattleinfo_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->arrbattleinfo(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TPlatformArenaGetBattlePreviewRsp)
  return target;
}

int TPlatformArenaGetBattlePreviewRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .pb.TUserSimpleInfo AtkUserInfo = 1;
    if (has_atkuserinfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->atkuserinfo());
    }

    // optional .pb.TUserSimpleInfo DefUserInfo = 2;
    if (has_defuserinfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->defuserinfo());
    }

  }
  // repeated .pb.TPlatformArenaPreviewBattleResult ArrBattleInfo = 3;
  total_size += 1 * this->arrbattleinfo_size();
  for (int i = 0; i < this->arrbattleinfo_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->arrbattleinfo(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TPlatformArenaGetBattlePreviewRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TPlatformArenaGetBattlePreviewRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TPlatformArenaGetBattlePreviewRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TPlatformArenaGetBattlePreviewRsp::MergeFrom(const TPlatformArenaGetBattlePreviewRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  arrbattleinfo_.MergeFrom(from.arrbattleinfo_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_atkuserinfo()) {
      mutable_atkuserinfo()->::pb::TUserSimpleInfo::MergeFrom(from.atkuserinfo());
    }
    if (from.has_defuserinfo()) {
      mutable_defuserinfo()->::pb::TUserSimpleInfo::MergeFrom(from.defuserinfo());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TPlatformArenaGetBattlePreviewRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TPlatformArenaGetBattlePreviewRsp::CopyFrom(const TPlatformArenaGetBattlePreviewRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TPlatformArenaGetBattlePreviewRsp::IsInitialized() const {

  return true;
}

void TPlatformArenaGetBattlePreviewRsp::Swap(TPlatformArenaGetBattlePreviewRsp* other) {
  if (other != this) {
    std::swap(atkuserinfo_, other->atkuserinfo_);
    std::swap(defuserinfo_, other->defuserinfo_);
    arrbattleinfo_.Swap(&other->arrbattleinfo_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TPlatformArenaGetBattlePreviewRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TPlatformArenaGetBattlePreviewRsp_descriptor_;
  metadata.reflection = TPlatformArenaGetBattlePreviewRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TPlatformArenaFormationInfo::kFormationIdFieldNumber;
const int TPlatformArenaFormationInfo::kUnitArrFieldNumber;
const int TPlatformArenaFormationInfo::kFightForceFieldNumber;
#endif  // !_MSC_VER

TPlatformArenaFormationInfo::TPlatformArenaFormationInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TPlatformArenaFormationInfo)
}

void TPlatformArenaFormationInfo::InitAsDefaultInstance() {
}

TPlatformArenaFormationInfo::TPlatformArenaFormationInfo(const TPlatformArenaFormationInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TPlatformArenaFormationInfo)
}

void TPlatformArenaFormationInfo::SharedCtor() {
  _cached_size_ = 0;
  formationid_ = 0u;
  fightforce_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TPlatformArenaFormationInfo::~TPlatformArenaFormationInfo() {
  // @@protoc_insertion_point(destructor:pb.TPlatformArenaFormationInfo)
  SharedDtor();
}

void TPlatformArenaFormationInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TPlatformArenaFormationInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TPlatformArenaFormationInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TPlatformArenaFormationInfo_descriptor_;
}

const TPlatformArenaFormationInfo& TPlatformArenaFormationInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fPlatformArena_2eproto();
  return *default_instance_;
}

TPlatformArenaFormationInfo* TPlatformArenaFormationInfo::default_instance_ = NULL;

TPlatformArenaFormationInfo* TPlatformArenaFormationInfo::New() const {
  return new TPlatformArenaFormationInfo;
}

void TPlatformArenaFormationInfo::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<TPlatformArenaFormationInfo*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(fightforce_, formationid_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  unitarr_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TPlatformArenaFormationInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TPlatformArenaFormationInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 FormationId = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &formationid_)));
          set_has_formationid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_UnitArr;
        break;
      }

      // repeated .pb.TPlatformArenaBattleHeroStatus UnitArr = 2;
      case 2: {
        if (tag == 18) {
         parse_UnitArr:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_unitarr()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_UnitArr;
        if (input->ExpectTag(24)) goto parse_FightForce;
        break;
      }

      // optional uint64 FightForce = 3;
      case 3: {
        if (tag == 24) {
         parse_FightForce:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &fightforce_)));
          set_has_fightforce();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TPlatformArenaFormationInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TPlatformArenaFormationInfo)
  return false;
#undef DO_
}

void TPlatformArenaFormationInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TPlatformArenaFormationInfo)
  // optional uint32 FormationId = 1;
  if (has_formationid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->formationid(), output);
  }

  // repeated .pb.TPlatformArenaBattleHeroStatus UnitArr = 2;
  for (int i = 0; i < this->unitarr_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->unitarr(i), output);
  }

  // optional uint64 FightForce = 3;
  if (has_fightforce()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->fightforce(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TPlatformArenaFormationInfo)
}

::google::protobuf::uint8* TPlatformArenaFormationInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TPlatformArenaFormationInfo)
  // optional uint32 FormationId = 1;
  if (has_formationid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->formationid(), target);
  }

  // repeated .pb.TPlatformArenaBattleHeroStatus UnitArr = 2;
  for (int i = 0; i < this->unitarr_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->unitarr(i), target);
  }

  // optional uint64 FightForce = 3;
  if (has_fightforce()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->fightforce(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TPlatformArenaFormationInfo)
  return target;
}

int TPlatformArenaFormationInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 FormationId = 1;
    if (has_formationid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->formationid());
    }

    // optional uint64 FightForce = 3;
    if (has_fightforce()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->fightforce());
    }

  }
  // repeated .pb.TPlatformArenaBattleHeroStatus UnitArr = 2;
  total_size += 1 * this->unitarr_size();
  for (int i = 0; i < this->unitarr_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->unitarr(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TPlatformArenaFormationInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TPlatformArenaFormationInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TPlatformArenaFormationInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TPlatformArenaFormationInfo::MergeFrom(const TPlatformArenaFormationInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  unitarr_.MergeFrom(from.unitarr_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_formationid()) {
      set_formationid(from.formationid());
    }
    if (from.has_fightforce()) {
      set_fightforce(from.fightforce());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TPlatformArenaFormationInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TPlatformArenaFormationInfo::CopyFrom(const TPlatformArenaFormationInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TPlatformArenaFormationInfo::IsInitialized() const {

  return true;
}

void TPlatformArenaFormationInfo::Swap(TPlatformArenaFormationInfo* other) {
  if (other != this) {
    std::swap(formationid_, other->formationid_);
    unitarr_.Swap(&other->unitarr_);
    std::swap(fightforce_, other->fightforce_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TPlatformArenaFormationInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TPlatformArenaFormationInfo_descriptor_;
  metadata.reflection = TPlatformArenaFormationInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TPlatformArenaGetFormationReq::kRoundFieldNumber;
const int TPlatformArenaGetFormationReq::kUidFieldNumber;
const int TPlatformArenaGetFormationReq::kGroupIdFieldNumber;
#endif  // !_MSC_VER

TPlatformArenaGetFormationReq::TPlatformArenaGetFormationReq()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TPlatformArenaGetFormationReq)
}

void TPlatformArenaGetFormationReq::InitAsDefaultInstance() {
}

TPlatformArenaGetFormationReq::TPlatformArenaGetFormationReq(const TPlatformArenaGetFormationReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TPlatformArenaGetFormationReq)
}

void TPlatformArenaGetFormationReq::SharedCtor() {
  _cached_size_ = 0;
  round_ = 0u;
  uid_ = GOOGLE_ULONGLONG(0);
  groupid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TPlatformArenaGetFormationReq::~TPlatformArenaGetFormationReq() {
  // @@protoc_insertion_point(destructor:pb.TPlatformArenaGetFormationReq)
  SharedDtor();
}

void TPlatformArenaGetFormationReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TPlatformArenaGetFormationReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TPlatformArenaGetFormationReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TPlatformArenaGetFormationReq_descriptor_;
}

const TPlatformArenaGetFormationReq& TPlatformArenaGetFormationReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fPlatformArena_2eproto();
  return *default_instance_;
}

TPlatformArenaGetFormationReq* TPlatformArenaGetFormationReq::default_instance_ = NULL;

TPlatformArenaGetFormationReq* TPlatformArenaGetFormationReq::New() const {
  return new TPlatformArenaGetFormationReq;
}

void TPlatformArenaGetFormationReq::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<TPlatformArenaGetFormationReq*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(uid_, groupid_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TPlatformArenaGetFormationReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TPlatformArenaGetFormationReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 Round = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &round_)));
          set_has_round();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_Uid;
        break;
      }

      // optional uint64 Uid = 2;
      case 2: {
        if (tag == 16) {
         parse_Uid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &uid_)));
          set_has_uid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_GroupId;
        break;
      }

      // optional uint32 GroupId = 3;
      case 3: {
        if (tag == 24) {
         parse_GroupId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &groupid_)));
          set_has_groupid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TPlatformArenaGetFormationReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TPlatformArenaGetFormationReq)
  return false;
#undef DO_
}

void TPlatformArenaGetFormationReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TPlatformArenaGetFormationReq)
  // optional uint32 Round = 1;
  if (has_round()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->round(), output);
  }

  // optional uint64 Uid = 2;
  if (has_uid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->uid(), output);
  }

  // optional uint32 GroupId = 3;
  if (has_groupid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->groupid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TPlatformArenaGetFormationReq)
}

::google::protobuf::uint8* TPlatformArenaGetFormationReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TPlatformArenaGetFormationReq)
  // optional uint32 Round = 1;
  if (has_round()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->round(), target);
  }

  // optional uint64 Uid = 2;
  if (has_uid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->uid(), target);
  }

  // optional uint32 GroupId = 3;
  if (has_groupid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->groupid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TPlatformArenaGetFormationReq)
  return target;
}

int TPlatformArenaGetFormationReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 Round = 1;
    if (has_round()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->round());
    }

    // optional uint64 Uid = 2;
    if (has_uid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->uid());
    }

    // optional uint32 GroupId = 3;
    if (has_groupid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->groupid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TPlatformArenaGetFormationReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TPlatformArenaGetFormationReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TPlatformArenaGetFormationReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TPlatformArenaGetFormationReq::MergeFrom(const TPlatformArenaGetFormationReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_round()) {
      set_round(from.round());
    }
    if (from.has_uid()) {
      set_uid(from.uid());
    }
    if (from.has_groupid()) {
      set_groupid(from.groupid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TPlatformArenaGetFormationReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TPlatformArenaGetFormationReq::CopyFrom(const TPlatformArenaGetFormationReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TPlatformArenaGetFormationReq::IsInitialized() const {

  return true;
}

void TPlatformArenaGetFormationReq::Swap(TPlatformArenaGetFormationReq* other) {
  if (other != this) {
    std::swap(round_, other->round_);
    std::swap(uid_, other->uid_);
    std::swap(groupid_, other->groupid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TPlatformArenaGetFormationReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TPlatformArenaGetFormationReq_descriptor_;
  metadata.reflection = TPlatformArenaGetFormationReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TPlatformArenaGetFormationRsp::kFormationArrFieldNumber;
#endif  // !_MSC_VER

TPlatformArenaGetFormationRsp::TPlatformArenaGetFormationRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TPlatformArenaGetFormationRsp)
}

void TPlatformArenaGetFormationRsp::InitAsDefaultInstance() {
}

TPlatformArenaGetFormationRsp::TPlatformArenaGetFormationRsp(const TPlatformArenaGetFormationRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TPlatformArenaGetFormationRsp)
}

void TPlatformArenaGetFormationRsp::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TPlatformArenaGetFormationRsp::~TPlatformArenaGetFormationRsp() {
  // @@protoc_insertion_point(destructor:pb.TPlatformArenaGetFormationRsp)
  SharedDtor();
}

void TPlatformArenaGetFormationRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TPlatformArenaGetFormationRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TPlatformArenaGetFormationRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TPlatformArenaGetFormationRsp_descriptor_;
}

const TPlatformArenaGetFormationRsp& TPlatformArenaGetFormationRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fPlatformArena_2eproto();
  return *default_instance_;
}

TPlatformArenaGetFormationRsp* TPlatformArenaGetFormationRsp::default_instance_ = NULL;

TPlatformArenaGetFormationRsp* TPlatformArenaGetFormationRsp::New() const {
  return new TPlatformArenaGetFormationRsp;
}

void TPlatformArenaGetFormationRsp::Clear() {
  formationarr_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TPlatformArenaGetFormationRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TPlatformArenaGetFormationRsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .pb.TPlatformArenaFormationInfo FormationArr = 1;
      case 1: {
        if (tag == 10) {
         parse_FormationArr:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_formationarr()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_FormationArr;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TPlatformArenaGetFormationRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TPlatformArenaGetFormationRsp)
  return false;
#undef DO_
}

void TPlatformArenaGetFormationRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TPlatformArenaGetFormationRsp)
  // repeated .pb.TPlatformArenaFormationInfo FormationArr = 1;
  for (int i = 0; i < this->formationarr_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->formationarr(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TPlatformArenaGetFormationRsp)
}

::google::protobuf::uint8* TPlatformArenaGetFormationRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TPlatformArenaGetFormationRsp)
  // repeated .pb.TPlatformArenaFormationInfo FormationArr = 1;
  for (int i = 0; i < this->formationarr_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->formationarr(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TPlatformArenaGetFormationRsp)
  return target;
}

int TPlatformArenaGetFormationRsp::ByteSize() const {
  int total_size = 0;

  // repeated .pb.TPlatformArenaFormationInfo FormationArr = 1;
  total_size += 1 * this->formationarr_size();
  for (int i = 0; i < this->formationarr_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->formationarr(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TPlatformArenaGetFormationRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TPlatformArenaGetFormationRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TPlatformArenaGetFormationRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TPlatformArenaGetFormationRsp::MergeFrom(const TPlatformArenaGetFormationRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  formationarr_.MergeFrom(from.formationarr_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TPlatformArenaGetFormationRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TPlatformArenaGetFormationRsp::CopyFrom(const TPlatformArenaGetFormationRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TPlatformArenaGetFormationRsp::IsInitialized() const {

  return true;
}

void TPlatformArenaGetFormationRsp::Swap(TPlatformArenaGetFormationRsp* other) {
  if (other != this) {
    formationarr_.Swap(&other->formationarr_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TPlatformArenaGetFormationRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TPlatformArenaGetFormationRsp_descriptor_;
  metadata.reflection = TPlatformArenaGetFormationRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TArenaBattleReportData::kRidFieldNumber;
const int TArenaBattleReportData::kReportTypeFieldNumber;
const int TArenaBattleReportData::kArenaIdFieldNumber;
const int TArenaBattleReportData::kReportTimeFieldNumber;
const int TArenaBattleReportData::kAtkUserInfoFieldNumber;
const int TArenaBattleReportData::kDefUserInfoFieldNumber;
#endif  // !_MSC_VER

TArenaBattleReportData::TArenaBattleReportData()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TArenaBattleReportData)
}

void TArenaBattleReportData::InitAsDefaultInstance() {
  atkuserinfo_ = const_cast< ::pb::TUserSimpleInfo*>(&::pb::TUserSimpleInfo::default_instance());
  defuserinfo_ = const_cast< ::pb::TUserSimpleInfo*>(&::pb::TUserSimpleInfo::default_instance());
}

TArenaBattleReportData::TArenaBattleReportData(const TArenaBattleReportData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TArenaBattleReportData)
}

void TArenaBattleReportData::SharedCtor() {
  _cached_size_ = 0;
  rid_ = 0u;
  reporttype_ = 0u;
  arenaid_ = 0u;
  reporttime_ = GOOGLE_ULONGLONG(0);
  atkuserinfo_ = NULL;
  defuserinfo_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TArenaBattleReportData::~TArenaBattleReportData() {
  // @@protoc_insertion_point(destructor:pb.TArenaBattleReportData)
  SharedDtor();
}

void TArenaBattleReportData::SharedDtor() {
  if (this != default_instance_) {
    delete atkuserinfo_;
    delete defuserinfo_;
  }
}

void TArenaBattleReportData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TArenaBattleReportData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TArenaBattleReportData_descriptor_;
}

const TArenaBattleReportData& TArenaBattleReportData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fPlatformArena_2eproto();
  return *default_instance_;
}

TArenaBattleReportData* TArenaBattleReportData::default_instance_ = NULL;

TArenaBattleReportData* TArenaBattleReportData::New() const {
  return new TArenaBattleReportData;
}

void TArenaBattleReportData::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<TArenaBattleReportData*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 63) {
    ZR_(rid_, reporttime_);
    arenaid_ = 0u;
    if (has_atkuserinfo()) {
      if (atkuserinfo_ != NULL) atkuserinfo_->::pb::TUserSimpleInfo::Clear();
    }
    if (has_defuserinfo()) {
      if (defuserinfo_ != NULL) defuserinfo_->::pb::TUserSimpleInfo::Clear();
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TArenaBattleReportData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TArenaBattleReportData)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 Rid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &rid_)));
          set_has_rid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_ReportType;
        break;
      }

      // optional uint32 ReportType = 2;
      case 2: {
        if (tag == 16) {
         parse_ReportType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &reporttype_)));
          set_has_reporttype();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_ArenaId;
        break;
      }

      // optional uint32 ArenaId = 3;
      case 3: {
        if (tag == 24) {
         parse_ArenaId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &arenaid_)));
          set_has_arenaid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_ReportTime;
        break;
      }

      // optional uint64 ReportTime = 4;
      case 4: {
        if (tag == 32) {
         parse_ReportTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &reporttime_)));
          set_has_reporttime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_AtkUserInfo;
        break;
      }

      // optional .pb.TUserSimpleInfo AtkUserInfo = 5;
      case 5: {
        if (tag == 42) {
         parse_AtkUserInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_atkuserinfo()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_DefUserInfo;
        break;
      }

      // optional .pb.TUserSimpleInfo DefUserInfo = 6;
      case 6: {
        if (tag == 50) {
         parse_DefUserInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_defuserinfo()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TArenaBattleReportData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TArenaBattleReportData)
  return false;
#undef DO_
}

void TArenaBattleReportData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TArenaBattleReportData)
  // optional uint32 Rid = 1;
  if (has_rid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->rid(), output);
  }

  // optional uint32 ReportType = 2;
  if (has_reporttype()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->reporttype(), output);
  }

  // optional uint32 ArenaId = 3;
  if (has_arenaid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->arenaid(), output);
  }

  // optional uint64 ReportTime = 4;
  if (has_reporttime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->reporttime(), output);
  }

  // optional .pb.TUserSimpleInfo AtkUserInfo = 5;
  if (has_atkuserinfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->atkuserinfo(), output);
  }

  // optional .pb.TUserSimpleInfo DefUserInfo = 6;
  if (has_defuserinfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->defuserinfo(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TArenaBattleReportData)
}

::google::protobuf::uint8* TArenaBattleReportData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TArenaBattleReportData)
  // optional uint32 Rid = 1;
  if (has_rid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->rid(), target);
  }

  // optional uint32 ReportType = 2;
  if (has_reporttype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->reporttype(), target);
  }

  // optional uint32 ArenaId = 3;
  if (has_arenaid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->arenaid(), target);
  }

  // optional uint64 ReportTime = 4;
  if (has_reporttime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->reporttime(), target);
  }

  // optional .pb.TUserSimpleInfo AtkUserInfo = 5;
  if (has_atkuserinfo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->atkuserinfo(), target);
  }

  // optional .pb.TUserSimpleInfo DefUserInfo = 6;
  if (has_defuserinfo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->defuserinfo(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TArenaBattleReportData)
  return target;
}

int TArenaBattleReportData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 Rid = 1;
    if (has_rid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->rid());
    }

    // optional uint32 ReportType = 2;
    if (has_reporttype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->reporttype());
    }

    // optional uint32 ArenaId = 3;
    if (has_arenaid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->arenaid());
    }

    // optional uint64 ReportTime = 4;
    if (has_reporttime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->reporttime());
    }

    // optional .pb.TUserSimpleInfo AtkUserInfo = 5;
    if (has_atkuserinfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->atkuserinfo());
    }

    // optional .pb.TUserSimpleInfo DefUserInfo = 6;
    if (has_defuserinfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->defuserinfo());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TArenaBattleReportData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TArenaBattleReportData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TArenaBattleReportData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TArenaBattleReportData::MergeFrom(const TArenaBattleReportData& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_rid()) {
      set_rid(from.rid());
    }
    if (from.has_reporttype()) {
      set_reporttype(from.reporttype());
    }
    if (from.has_arenaid()) {
      set_arenaid(from.arenaid());
    }
    if (from.has_reporttime()) {
      set_reporttime(from.reporttime());
    }
    if (from.has_atkuserinfo()) {
      mutable_atkuserinfo()->::pb::TUserSimpleInfo::MergeFrom(from.atkuserinfo());
    }
    if (from.has_defuserinfo()) {
      mutable_defuserinfo()->::pb::TUserSimpleInfo::MergeFrom(from.defuserinfo());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TArenaBattleReportData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TArenaBattleReportData::CopyFrom(const TArenaBattleReportData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TArenaBattleReportData::IsInitialized() const {

  return true;
}

void TArenaBattleReportData::Swap(TArenaBattleReportData* other) {
  if (other != this) {
    std::swap(rid_, other->rid_);
    std::swap(reporttype_, other->reporttype_);
    std::swap(arenaid_, other->arenaid_);
    std::swap(reporttime_, other->reporttime_);
    std::swap(atkuserinfo_, other->atkuserinfo_);
    std::swap(defuserinfo_, other->defuserinfo_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TArenaBattleReportData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TArenaBattleReportData_descriptor_;
  metadata.reflection = TArenaBattleReportData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TPlatformArenaGetArenaBattleReportRsp::kArrReportFieldNumber;
#endif  // !_MSC_VER

TPlatformArenaGetArenaBattleReportRsp::TPlatformArenaGetArenaBattleReportRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TPlatformArenaGetArenaBattleReportRsp)
}

void TPlatformArenaGetArenaBattleReportRsp::InitAsDefaultInstance() {
}

TPlatformArenaGetArenaBattleReportRsp::TPlatformArenaGetArenaBattleReportRsp(const TPlatformArenaGetArenaBattleReportRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TPlatformArenaGetArenaBattleReportRsp)
}

void TPlatformArenaGetArenaBattleReportRsp::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TPlatformArenaGetArenaBattleReportRsp::~TPlatformArenaGetArenaBattleReportRsp() {
  // @@protoc_insertion_point(destructor:pb.TPlatformArenaGetArenaBattleReportRsp)
  SharedDtor();
}

void TPlatformArenaGetArenaBattleReportRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TPlatformArenaGetArenaBattleReportRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TPlatformArenaGetArenaBattleReportRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TPlatformArenaGetArenaBattleReportRsp_descriptor_;
}

const TPlatformArenaGetArenaBattleReportRsp& TPlatformArenaGetArenaBattleReportRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fPlatformArena_2eproto();
  return *default_instance_;
}

TPlatformArenaGetArenaBattleReportRsp* TPlatformArenaGetArenaBattleReportRsp::default_instance_ = NULL;

TPlatformArenaGetArenaBattleReportRsp* TPlatformArenaGetArenaBattleReportRsp::New() const {
  return new TPlatformArenaGetArenaBattleReportRsp;
}

void TPlatformArenaGetArenaBattleReportRsp::Clear() {
  arrreport_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TPlatformArenaGetArenaBattleReportRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TPlatformArenaGetArenaBattleReportRsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .pb.TArenaBattleReportData ArrReport = 1;
      case 1: {
        if (tag == 10) {
         parse_ArrReport:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_arrreport()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_ArrReport;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TPlatformArenaGetArenaBattleReportRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TPlatformArenaGetArenaBattleReportRsp)
  return false;
#undef DO_
}

void TPlatformArenaGetArenaBattleReportRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TPlatformArenaGetArenaBattleReportRsp)
  // repeated .pb.TArenaBattleReportData ArrReport = 1;
  for (int i = 0; i < this->arrreport_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->arrreport(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TPlatformArenaGetArenaBattleReportRsp)
}

::google::protobuf::uint8* TPlatformArenaGetArenaBattleReportRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TPlatformArenaGetArenaBattleReportRsp)
  // repeated .pb.TArenaBattleReportData ArrReport = 1;
  for (int i = 0; i < this->arrreport_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->arrreport(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TPlatformArenaGetArenaBattleReportRsp)
  return target;
}

int TPlatformArenaGetArenaBattleReportRsp::ByteSize() const {
  int total_size = 0;

  // repeated .pb.TArenaBattleReportData ArrReport = 1;
  total_size += 1 * this->arrreport_size();
  for (int i = 0; i < this->arrreport_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->arrreport(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TPlatformArenaGetArenaBattleReportRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TPlatformArenaGetArenaBattleReportRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TPlatformArenaGetArenaBattleReportRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TPlatformArenaGetArenaBattleReportRsp::MergeFrom(const TPlatformArenaGetArenaBattleReportRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  arrreport_.MergeFrom(from.arrreport_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TPlatformArenaGetArenaBattleReportRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TPlatformArenaGetArenaBattleReportRsp::CopyFrom(const TPlatformArenaGetArenaBattleReportRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TPlatformArenaGetArenaBattleReportRsp::IsInitialized() const {

  return true;
}

void TPlatformArenaGetArenaBattleReportRsp::Swap(TPlatformArenaGetArenaBattleReportRsp* other) {
  if (other != this) {
    arrreport_.Swap(&other->arrreport_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TPlatformArenaGetArenaBattleReportRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TPlatformArenaGetArenaBattleReportRsp_descriptor_;
  metadata.reflection = TPlatformArenaGetArenaBattleReportRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TPlatformArenaGetPeakInfoReq::kSeasonIdFieldNumber;
const int TPlatformArenaGetPeakInfoReq::kGroupIdFieldNumber;
#endif  // !_MSC_VER

TPlatformArenaGetPeakInfoReq::TPlatformArenaGetPeakInfoReq()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TPlatformArenaGetPeakInfoReq)
}

void TPlatformArenaGetPeakInfoReq::InitAsDefaultInstance() {
}

TPlatformArenaGetPeakInfoReq::TPlatformArenaGetPeakInfoReq(const TPlatformArenaGetPeakInfoReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TPlatformArenaGetPeakInfoReq)
}

void TPlatformArenaGetPeakInfoReq::SharedCtor() {
  _cached_size_ = 0;
  seasonid_ = 0u;
  groupid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TPlatformArenaGetPeakInfoReq::~TPlatformArenaGetPeakInfoReq() {
  // @@protoc_insertion_point(destructor:pb.TPlatformArenaGetPeakInfoReq)
  SharedDtor();
}

void TPlatformArenaGetPeakInfoReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TPlatformArenaGetPeakInfoReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TPlatformArenaGetPeakInfoReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TPlatformArenaGetPeakInfoReq_descriptor_;
}

const TPlatformArenaGetPeakInfoReq& TPlatformArenaGetPeakInfoReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fPlatformArena_2eproto();
  return *default_instance_;
}

TPlatformArenaGetPeakInfoReq* TPlatformArenaGetPeakInfoReq::default_instance_ = NULL;

TPlatformArenaGetPeakInfoReq* TPlatformArenaGetPeakInfoReq::New() const {
  return new TPlatformArenaGetPeakInfoReq;
}

void TPlatformArenaGetPeakInfoReq::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<TPlatformArenaGetPeakInfoReq*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(seasonid_, groupid_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TPlatformArenaGetPeakInfoReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TPlatformArenaGetPeakInfoReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 SeasonId = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &seasonid_)));
          set_has_seasonid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_GroupId;
        break;
      }

      // optional uint32 GroupId = 2;
      case 2: {
        if (tag == 16) {
         parse_GroupId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &groupid_)));
          set_has_groupid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TPlatformArenaGetPeakInfoReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TPlatformArenaGetPeakInfoReq)
  return false;
#undef DO_
}

void TPlatformArenaGetPeakInfoReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TPlatformArenaGetPeakInfoReq)
  // optional uint32 SeasonId = 1;
  if (has_seasonid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->seasonid(), output);
  }

  // optional uint32 GroupId = 2;
  if (has_groupid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->groupid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TPlatformArenaGetPeakInfoReq)
}

::google::protobuf::uint8* TPlatformArenaGetPeakInfoReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TPlatformArenaGetPeakInfoReq)
  // optional uint32 SeasonId = 1;
  if (has_seasonid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->seasonid(), target);
  }

  // optional uint32 GroupId = 2;
  if (has_groupid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->groupid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TPlatformArenaGetPeakInfoReq)
  return target;
}

int TPlatformArenaGetPeakInfoReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 SeasonId = 1;
    if (has_seasonid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->seasonid());
    }

    // optional uint32 GroupId = 2;
    if (has_groupid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->groupid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TPlatformArenaGetPeakInfoReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TPlatformArenaGetPeakInfoReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TPlatformArenaGetPeakInfoReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TPlatformArenaGetPeakInfoReq::MergeFrom(const TPlatformArenaGetPeakInfoReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_seasonid()) {
      set_seasonid(from.seasonid());
    }
    if (from.has_groupid()) {
      set_groupid(from.groupid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TPlatformArenaGetPeakInfoReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TPlatformArenaGetPeakInfoReq::CopyFrom(const TPlatformArenaGetPeakInfoReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TPlatformArenaGetPeakInfoReq::IsInitialized() const {

  return true;
}

void TPlatformArenaGetPeakInfoReq::Swap(TPlatformArenaGetPeakInfoReq* other) {
  if (other != this) {
    std::swap(seasonid_, other->seasonid_);
    std::swap(groupid_, other->groupid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TPlatformArenaGetPeakInfoReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TPlatformArenaGetPeakInfoReq_descriptor_;
  metadata.reflection = TPlatformArenaGetPeakInfoReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TPlatformArenaPeakData::kMatchIdFieldNumber;
const int TPlatformArenaPeakData::kAtkUserInfoFieldNumber;
const int TPlatformArenaPeakData::kDefUserInfoFieldNumber;
const int TPlatformArenaPeakData::kWinUidFieldNumber;
#endif  // !_MSC_VER

TPlatformArenaPeakData::TPlatformArenaPeakData()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TPlatformArenaPeakData)
}

void TPlatformArenaPeakData::InitAsDefaultInstance() {
  atkuserinfo_ = const_cast< ::pb::TUserSimpleInfo*>(&::pb::TUserSimpleInfo::default_instance());
  defuserinfo_ = const_cast< ::pb::TUserSimpleInfo*>(&::pb::TUserSimpleInfo::default_instance());
}

TPlatformArenaPeakData::TPlatformArenaPeakData(const TPlatformArenaPeakData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TPlatformArenaPeakData)
}

void TPlatformArenaPeakData::SharedCtor() {
  _cached_size_ = 0;
  matchid_ = 0u;
  atkuserinfo_ = NULL;
  defuserinfo_ = NULL;
  winuid_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TPlatformArenaPeakData::~TPlatformArenaPeakData() {
  // @@protoc_insertion_point(destructor:pb.TPlatformArenaPeakData)
  SharedDtor();
}

void TPlatformArenaPeakData::SharedDtor() {
  if (this != default_instance_) {
    delete atkuserinfo_;
    delete defuserinfo_;
  }
}

void TPlatformArenaPeakData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TPlatformArenaPeakData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TPlatformArenaPeakData_descriptor_;
}

const TPlatformArenaPeakData& TPlatformArenaPeakData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fPlatformArena_2eproto();
  return *default_instance_;
}

TPlatformArenaPeakData* TPlatformArenaPeakData::default_instance_ = NULL;

TPlatformArenaPeakData* TPlatformArenaPeakData::New() const {
  return new TPlatformArenaPeakData;
}

void TPlatformArenaPeakData::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<TPlatformArenaPeakData*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 15) {
    ZR_(winuid_, matchid_);
    if (has_atkuserinfo()) {
      if (atkuserinfo_ != NULL) atkuserinfo_->::pb::TUserSimpleInfo::Clear();
    }
    if (has_defuserinfo()) {
      if (defuserinfo_ != NULL) defuserinfo_->::pb::TUserSimpleInfo::Clear();
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TPlatformArenaPeakData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TPlatformArenaPeakData)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 MatchId = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &matchid_)));
          set_has_matchid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_AtkUserInfo;
        break;
      }

      // optional .pb.TUserSimpleInfo AtkUserInfo = 2;
      case 2: {
        if (tag == 18) {
         parse_AtkUserInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_atkuserinfo()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_DefUserInfo;
        break;
      }

      // optional .pb.TUserSimpleInfo DefUserInfo = 3;
      case 3: {
        if (tag == 26) {
         parse_DefUserInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_defuserinfo()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_WinUid;
        break;
      }

      // optional uint64 WinUid = 4;
      case 4: {
        if (tag == 32) {
         parse_WinUid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &winuid_)));
          set_has_winuid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TPlatformArenaPeakData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TPlatformArenaPeakData)
  return false;
#undef DO_
}

void TPlatformArenaPeakData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TPlatformArenaPeakData)
  // optional uint32 MatchId = 1;
  if (has_matchid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->matchid(), output);
  }

  // optional .pb.TUserSimpleInfo AtkUserInfo = 2;
  if (has_atkuserinfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->atkuserinfo(), output);
  }

  // optional .pb.TUserSimpleInfo DefUserInfo = 3;
  if (has_defuserinfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->defuserinfo(), output);
  }

  // optional uint64 WinUid = 4;
  if (has_winuid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->winuid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TPlatformArenaPeakData)
}

::google::protobuf::uint8* TPlatformArenaPeakData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TPlatformArenaPeakData)
  // optional uint32 MatchId = 1;
  if (has_matchid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->matchid(), target);
  }

  // optional .pb.TUserSimpleInfo AtkUserInfo = 2;
  if (has_atkuserinfo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->atkuserinfo(), target);
  }

  // optional .pb.TUserSimpleInfo DefUserInfo = 3;
  if (has_defuserinfo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->defuserinfo(), target);
  }

  // optional uint64 WinUid = 4;
  if (has_winuid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->winuid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TPlatformArenaPeakData)
  return target;
}

int TPlatformArenaPeakData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 MatchId = 1;
    if (has_matchid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->matchid());
    }

    // optional .pb.TUserSimpleInfo AtkUserInfo = 2;
    if (has_atkuserinfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->atkuserinfo());
    }

    // optional .pb.TUserSimpleInfo DefUserInfo = 3;
    if (has_defuserinfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->defuserinfo());
    }

    // optional uint64 WinUid = 4;
    if (has_winuid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->winuid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TPlatformArenaPeakData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TPlatformArenaPeakData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TPlatformArenaPeakData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TPlatformArenaPeakData::MergeFrom(const TPlatformArenaPeakData& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_matchid()) {
      set_matchid(from.matchid());
    }
    if (from.has_atkuserinfo()) {
      mutable_atkuserinfo()->::pb::TUserSimpleInfo::MergeFrom(from.atkuserinfo());
    }
    if (from.has_defuserinfo()) {
      mutable_defuserinfo()->::pb::TUserSimpleInfo::MergeFrom(from.defuserinfo());
    }
    if (from.has_winuid()) {
      set_winuid(from.winuid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TPlatformArenaPeakData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TPlatformArenaPeakData::CopyFrom(const TPlatformArenaPeakData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TPlatformArenaPeakData::IsInitialized() const {

  return true;
}

void TPlatformArenaPeakData::Swap(TPlatformArenaPeakData* other) {
  if (other != this) {
    std::swap(matchid_, other->matchid_);
    std::swap(atkuserinfo_, other->atkuserinfo_);
    std::swap(defuserinfo_, other->defuserinfo_);
    std::swap(winuid_, other->winuid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TPlatformArenaPeakData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TPlatformArenaPeakData_descriptor_;
  metadata.reflection = TPlatformArenaPeakData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TPlatformArenaGetPeakInfoRsp::kArrPeakDataFieldNumber;
#endif  // !_MSC_VER

TPlatformArenaGetPeakInfoRsp::TPlatformArenaGetPeakInfoRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TPlatformArenaGetPeakInfoRsp)
}

void TPlatformArenaGetPeakInfoRsp::InitAsDefaultInstance() {
}

TPlatformArenaGetPeakInfoRsp::TPlatformArenaGetPeakInfoRsp(const TPlatformArenaGetPeakInfoRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TPlatformArenaGetPeakInfoRsp)
}

void TPlatformArenaGetPeakInfoRsp::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TPlatformArenaGetPeakInfoRsp::~TPlatformArenaGetPeakInfoRsp() {
  // @@protoc_insertion_point(destructor:pb.TPlatformArenaGetPeakInfoRsp)
  SharedDtor();
}

void TPlatformArenaGetPeakInfoRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TPlatformArenaGetPeakInfoRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TPlatformArenaGetPeakInfoRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TPlatformArenaGetPeakInfoRsp_descriptor_;
}

const TPlatformArenaGetPeakInfoRsp& TPlatformArenaGetPeakInfoRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fPlatformArena_2eproto();
  return *default_instance_;
}

TPlatformArenaGetPeakInfoRsp* TPlatformArenaGetPeakInfoRsp::default_instance_ = NULL;

TPlatformArenaGetPeakInfoRsp* TPlatformArenaGetPeakInfoRsp::New() const {
  return new TPlatformArenaGetPeakInfoRsp;
}

void TPlatformArenaGetPeakInfoRsp::Clear() {
  arrpeakdata_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TPlatformArenaGetPeakInfoRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TPlatformArenaGetPeakInfoRsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .pb.TPlatformArenaPeakData ArrPeakData = 1;
      case 1: {
        if (tag == 10) {
         parse_ArrPeakData:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_arrpeakdata()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_ArrPeakData;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TPlatformArenaGetPeakInfoRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TPlatformArenaGetPeakInfoRsp)
  return false;
#undef DO_
}

void TPlatformArenaGetPeakInfoRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TPlatformArenaGetPeakInfoRsp)
  // repeated .pb.TPlatformArenaPeakData ArrPeakData = 1;
  for (int i = 0; i < this->arrpeakdata_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->arrpeakdata(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TPlatformArenaGetPeakInfoRsp)
}

::google::protobuf::uint8* TPlatformArenaGetPeakInfoRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TPlatformArenaGetPeakInfoRsp)
  // repeated .pb.TPlatformArenaPeakData ArrPeakData = 1;
  for (int i = 0; i < this->arrpeakdata_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->arrpeakdata(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TPlatformArenaGetPeakInfoRsp)
  return target;
}

int TPlatformArenaGetPeakInfoRsp::ByteSize() const {
  int total_size = 0;

  // repeated .pb.TPlatformArenaPeakData ArrPeakData = 1;
  total_size += 1 * this->arrpeakdata_size();
  for (int i = 0; i < this->arrpeakdata_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->arrpeakdata(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TPlatformArenaGetPeakInfoRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TPlatformArenaGetPeakInfoRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TPlatformArenaGetPeakInfoRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TPlatformArenaGetPeakInfoRsp::MergeFrom(const TPlatformArenaGetPeakInfoRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  arrpeakdata_.MergeFrom(from.arrpeakdata_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TPlatformArenaGetPeakInfoRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TPlatformArenaGetPeakInfoRsp::CopyFrom(const TPlatformArenaGetPeakInfoRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TPlatformArenaGetPeakInfoRsp::IsInitialized() const {

  return true;
}

void TPlatformArenaGetPeakInfoRsp::Swap(TPlatformArenaGetPeakInfoRsp* other) {
  if (other != this) {
    arrpeakdata_.Swap(&other->arrpeakdata_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TPlatformArenaGetPeakInfoRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TPlatformArenaGetPeakInfoRsp_descriptor_;
  metadata.reflection = TPlatformArenaGetPeakInfoRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TPlatformArenaBeAtkNotify::kArenaIdFieldNumber;
const int TPlatformArenaBeAtkNotify::kAtkUserFieldNumber;
#endif  // !_MSC_VER

TPlatformArenaBeAtkNotify::TPlatformArenaBeAtkNotify()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TPlatformArenaBeAtkNotify)
}

void TPlatformArenaBeAtkNotify::InitAsDefaultInstance() {
  atkuser_ = const_cast< ::pb::TUserSimpleInfo*>(&::pb::TUserSimpleInfo::default_instance());
}

TPlatformArenaBeAtkNotify::TPlatformArenaBeAtkNotify(const TPlatformArenaBeAtkNotify& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TPlatformArenaBeAtkNotify)
}

void TPlatformArenaBeAtkNotify::SharedCtor() {
  _cached_size_ = 0;
  arenaid_ = 0u;
  atkuser_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TPlatformArenaBeAtkNotify::~TPlatformArenaBeAtkNotify() {
  // @@protoc_insertion_point(destructor:pb.TPlatformArenaBeAtkNotify)
  SharedDtor();
}

void TPlatformArenaBeAtkNotify::SharedDtor() {
  if (this != default_instance_) {
    delete atkuser_;
  }
}

void TPlatformArenaBeAtkNotify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TPlatformArenaBeAtkNotify::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TPlatformArenaBeAtkNotify_descriptor_;
}

const TPlatformArenaBeAtkNotify& TPlatformArenaBeAtkNotify::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fPlatformArena_2eproto();
  return *default_instance_;
}

TPlatformArenaBeAtkNotify* TPlatformArenaBeAtkNotify::default_instance_ = NULL;

TPlatformArenaBeAtkNotify* TPlatformArenaBeAtkNotify::New() const {
  return new TPlatformArenaBeAtkNotify;
}

void TPlatformArenaBeAtkNotify::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    arenaid_ = 0u;
    if (has_atkuser()) {
      if (atkuser_ != NULL) atkuser_->::pb::TUserSimpleInfo::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TPlatformArenaBeAtkNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TPlatformArenaBeAtkNotify)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 ArenaId = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &arenaid_)));
          set_has_arenaid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_AtkUser;
        break;
      }

      // optional .pb.TUserSimpleInfo AtkUser = 2;
      case 2: {
        if (tag == 18) {
         parse_AtkUser:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_atkuser()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TPlatformArenaBeAtkNotify)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TPlatformArenaBeAtkNotify)
  return false;
#undef DO_
}

void TPlatformArenaBeAtkNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TPlatformArenaBeAtkNotify)
  // optional uint32 ArenaId = 1;
  if (has_arenaid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->arenaid(), output);
  }

  // optional .pb.TUserSimpleInfo AtkUser = 2;
  if (has_atkuser()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->atkuser(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TPlatformArenaBeAtkNotify)
}

::google::protobuf::uint8* TPlatformArenaBeAtkNotify::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TPlatformArenaBeAtkNotify)
  // optional uint32 ArenaId = 1;
  if (has_arenaid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->arenaid(), target);
  }

  // optional .pb.TUserSimpleInfo AtkUser = 2;
  if (has_atkuser()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->atkuser(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TPlatformArenaBeAtkNotify)
  return target;
}

int TPlatformArenaBeAtkNotify::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 ArenaId = 1;
    if (has_arenaid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->arenaid());
    }

    // optional .pb.TUserSimpleInfo AtkUser = 2;
    if (has_atkuser()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->atkuser());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TPlatformArenaBeAtkNotify::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TPlatformArenaBeAtkNotify* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TPlatformArenaBeAtkNotify*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TPlatformArenaBeAtkNotify::MergeFrom(const TPlatformArenaBeAtkNotify& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_arenaid()) {
      set_arenaid(from.arenaid());
    }
    if (from.has_atkuser()) {
      mutable_atkuser()->::pb::TUserSimpleInfo::MergeFrom(from.atkuser());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TPlatformArenaBeAtkNotify::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TPlatformArenaBeAtkNotify::CopyFrom(const TPlatformArenaBeAtkNotify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TPlatformArenaBeAtkNotify::IsInitialized() const {

  return true;
}

void TPlatformArenaBeAtkNotify::Swap(TPlatformArenaBeAtkNotify* other) {
  if (other != this) {
    std::swap(arenaid_, other->arenaid_);
    std::swap(atkuser_, other->atkuser_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TPlatformArenaBeAtkNotify::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TPlatformArenaBeAtkNotify_descriptor_;
  metadata.reflection = TPlatformArenaBeAtkNotify_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TPlatformArenaLeaveMessageReq::kMatchIdFieldNumber;
const int TPlatformArenaLeaveMessageReq::kContentFieldNumber;
#endif  // !_MSC_VER

TPlatformArenaLeaveMessageReq::TPlatformArenaLeaveMessageReq()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TPlatformArenaLeaveMessageReq)
}

void TPlatformArenaLeaveMessageReq::InitAsDefaultInstance() {
}

TPlatformArenaLeaveMessageReq::TPlatformArenaLeaveMessageReq(const TPlatformArenaLeaveMessageReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TPlatformArenaLeaveMessageReq)
}

void TPlatformArenaLeaveMessageReq::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  matchid_ = 0u;
  content_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TPlatformArenaLeaveMessageReq::~TPlatformArenaLeaveMessageReq() {
  // @@protoc_insertion_point(destructor:pb.TPlatformArenaLeaveMessageReq)
  SharedDtor();
}

void TPlatformArenaLeaveMessageReq::SharedDtor() {
  if (content_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete content_;
  }
  if (this != default_instance_) {
  }
}

void TPlatformArenaLeaveMessageReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TPlatformArenaLeaveMessageReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TPlatformArenaLeaveMessageReq_descriptor_;
}

const TPlatformArenaLeaveMessageReq& TPlatformArenaLeaveMessageReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fPlatformArena_2eproto();
  return *default_instance_;
}

TPlatformArenaLeaveMessageReq* TPlatformArenaLeaveMessageReq::default_instance_ = NULL;

TPlatformArenaLeaveMessageReq* TPlatformArenaLeaveMessageReq::New() const {
  return new TPlatformArenaLeaveMessageReq;
}

void TPlatformArenaLeaveMessageReq::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    matchid_ = 0u;
    if (has_content()) {
      if (content_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        content_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TPlatformArenaLeaveMessageReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TPlatformArenaLeaveMessageReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 MatchId = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &matchid_)));
          set_has_matchid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_Content;
        break;
      }

      // optional string Content = 2;
      case 2: {
        if (tag == 18) {
         parse_Content:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_content()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->content().data(), this->content().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "content");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TPlatformArenaLeaveMessageReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TPlatformArenaLeaveMessageReq)
  return false;
#undef DO_
}

void TPlatformArenaLeaveMessageReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TPlatformArenaLeaveMessageReq)
  // optional uint32 MatchId = 1;
  if (has_matchid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->matchid(), output);
  }

  // optional string Content = 2;
  if (has_content()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->content().data(), this->content().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "content");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->content(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TPlatformArenaLeaveMessageReq)
}

::google::protobuf::uint8* TPlatformArenaLeaveMessageReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TPlatformArenaLeaveMessageReq)
  // optional uint32 MatchId = 1;
  if (has_matchid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->matchid(), target);
  }

  // optional string Content = 2;
  if (has_content()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->content().data(), this->content().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "content");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->content(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TPlatformArenaLeaveMessageReq)
  return target;
}

int TPlatformArenaLeaveMessageReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 MatchId = 1;
    if (has_matchid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->matchid());
    }

    // optional string Content = 2;
    if (has_content()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->content());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TPlatformArenaLeaveMessageReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TPlatformArenaLeaveMessageReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TPlatformArenaLeaveMessageReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TPlatformArenaLeaveMessageReq::MergeFrom(const TPlatformArenaLeaveMessageReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_matchid()) {
      set_matchid(from.matchid());
    }
    if (from.has_content()) {
      set_content(from.content());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TPlatformArenaLeaveMessageReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TPlatformArenaLeaveMessageReq::CopyFrom(const TPlatformArenaLeaveMessageReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TPlatformArenaLeaveMessageReq::IsInitialized() const {

  return true;
}

void TPlatformArenaLeaveMessageReq::Swap(TPlatformArenaLeaveMessageReq* other) {
  if (other != this) {
    std::swap(matchid_, other->matchid_);
    std::swap(content_, other->content_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TPlatformArenaLeaveMessageReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TPlatformArenaLeaveMessageReq_descriptor_;
  metadata.reflection = TPlatformArenaLeaveMessageReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TPlatformArenaDelLeaveMessageReq::kMatchIdFieldNumber;
const int TPlatformArenaDelLeaveMessageReq::kMsgIdFieldNumber;
#endif  // !_MSC_VER

TPlatformArenaDelLeaveMessageReq::TPlatformArenaDelLeaveMessageReq()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TPlatformArenaDelLeaveMessageReq)
}

void TPlatformArenaDelLeaveMessageReq::InitAsDefaultInstance() {
}

TPlatformArenaDelLeaveMessageReq::TPlatformArenaDelLeaveMessageReq(const TPlatformArenaDelLeaveMessageReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TPlatformArenaDelLeaveMessageReq)
}

void TPlatformArenaDelLeaveMessageReq::SharedCtor() {
  _cached_size_ = 0;
  matchid_ = 0u;
  msgid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TPlatformArenaDelLeaveMessageReq::~TPlatformArenaDelLeaveMessageReq() {
  // @@protoc_insertion_point(destructor:pb.TPlatformArenaDelLeaveMessageReq)
  SharedDtor();
}

void TPlatformArenaDelLeaveMessageReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TPlatformArenaDelLeaveMessageReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TPlatformArenaDelLeaveMessageReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TPlatformArenaDelLeaveMessageReq_descriptor_;
}

const TPlatformArenaDelLeaveMessageReq& TPlatformArenaDelLeaveMessageReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fPlatformArena_2eproto();
  return *default_instance_;
}

TPlatformArenaDelLeaveMessageReq* TPlatformArenaDelLeaveMessageReq::default_instance_ = NULL;

TPlatformArenaDelLeaveMessageReq* TPlatformArenaDelLeaveMessageReq::New() const {
  return new TPlatformArenaDelLeaveMessageReq;
}

void TPlatformArenaDelLeaveMessageReq::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<TPlatformArenaDelLeaveMessageReq*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(matchid_, msgid_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TPlatformArenaDelLeaveMessageReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TPlatformArenaDelLeaveMessageReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 MatchId = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &matchid_)));
          set_has_matchid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_MsgId;
        break;
      }

      // optional uint32 MsgId = 2;
      case 2: {
        if (tag == 16) {
         parse_MsgId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &msgid_)));
          set_has_msgid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TPlatformArenaDelLeaveMessageReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TPlatformArenaDelLeaveMessageReq)
  return false;
#undef DO_
}

void TPlatformArenaDelLeaveMessageReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TPlatformArenaDelLeaveMessageReq)
  // optional uint32 MatchId = 1;
  if (has_matchid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->matchid(), output);
  }

  // optional uint32 MsgId = 2;
  if (has_msgid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->msgid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TPlatformArenaDelLeaveMessageReq)
}

::google::protobuf::uint8* TPlatformArenaDelLeaveMessageReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TPlatformArenaDelLeaveMessageReq)
  // optional uint32 MatchId = 1;
  if (has_matchid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->matchid(), target);
  }

  // optional uint32 MsgId = 2;
  if (has_msgid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->msgid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TPlatformArenaDelLeaveMessageReq)
  return target;
}

int TPlatformArenaDelLeaveMessageReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 MatchId = 1;
    if (has_matchid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->matchid());
    }

    // optional uint32 MsgId = 2;
    if (has_msgid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->msgid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TPlatformArenaDelLeaveMessageReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TPlatformArenaDelLeaveMessageReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TPlatformArenaDelLeaveMessageReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TPlatformArenaDelLeaveMessageReq::MergeFrom(const TPlatformArenaDelLeaveMessageReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_matchid()) {
      set_matchid(from.matchid());
    }
    if (from.has_msgid()) {
      set_msgid(from.msgid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TPlatformArenaDelLeaveMessageReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TPlatformArenaDelLeaveMessageReq::CopyFrom(const TPlatformArenaDelLeaveMessageReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TPlatformArenaDelLeaveMessageReq::IsInitialized() const {

  return true;
}

void TPlatformArenaDelLeaveMessageReq::Swap(TPlatformArenaDelLeaveMessageReq* other) {
  if (other != this) {
    std::swap(matchid_, other->matchid_);
    std::swap(msgid_, other->msgid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TPlatformArenaDelLeaveMessageReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TPlatformArenaDelLeaveMessageReq_descriptor_;
  metadata.reflection = TPlatformArenaDelLeaveMessageReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TPlatformArenaThumbLeaveMessageReq::kMatchIdFieldNumber;
const int TPlatformArenaThumbLeaveMessageReq::kMsgIdFieldNumber;
const int TPlatformArenaThumbLeaveMessageReq::kThumbTypeFieldNumber;
#endif  // !_MSC_VER

TPlatformArenaThumbLeaveMessageReq::TPlatformArenaThumbLeaveMessageReq()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TPlatformArenaThumbLeaveMessageReq)
}

void TPlatformArenaThumbLeaveMessageReq::InitAsDefaultInstance() {
}

TPlatformArenaThumbLeaveMessageReq::TPlatformArenaThumbLeaveMessageReq(const TPlatformArenaThumbLeaveMessageReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TPlatformArenaThumbLeaveMessageReq)
}

void TPlatformArenaThumbLeaveMessageReq::SharedCtor() {
  _cached_size_ = 0;
  matchid_ = 0u;
  msgid_ = 0u;
  thumbtype_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TPlatformArenaThumbLeaveMessageReq::~TPlatformArenaThumbLeaveMessageReq() {
  // @@protoc_insertion_point(destructor:pb.TPlatformArenaThumbLeaveMessageReq)
  SharedDtor();
}

void TPlatformArenaThumbLeaveMessageReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TPlatformArenaThumbLeaveMessageReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TPlatformArenaThumbLeaveMessageReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TPlatformArenaThumbLeaveMessageReq_descriptor_;
}

const TPlatformArenaThumbLeaveMessageReq& TPlatformArenaThumbLeaveMessageReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fPlatformArena_2eproto();
  return *default_instance_;
}

TPlatformArenaThumbLeaveMessageReq* TPlatformArenaThumbLeaveMessageReq::default_instance_ = NULL;

TPlatformArenaThumbLeaveMessageReq* TPlatformArenaThumbLeaveMessageReq::New() const {
  return new TPlatformArenaThumbLeaveMessageReq;
}

void TPlatformArenaThumbLeaveMessageReq::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<TPlatformArenaThumbLeaveMessageReq*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(matchid_, thumbtype_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TPlatformArenaThumbLeaveMessageReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TPlatformArenaThumbLeaveMessageReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 MatchId = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &matchid_)));
          set_has_matchid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_MsgId;
        break;
      }

      // optional uint32 MsgId = 2;
      case 2: {
        if (tag == 16) {
         parse_MsgId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &msgid_)));
          set_has_msgid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_ThumbType;
        break;
      }

      // optional uint32 ThumbType = 3;
      case 3: {
        if (tag == 24) {
         parse_ThumbType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &thumbtype_)));
          set_has_thumbtype();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TPlatformArenaThumbLeaveMessageReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TPlatformArenaThumbLeaveMessageReq)
  return false;
#undef DO_
}

void TPlatformArenaThumbLeaveMessageReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TPlatformArenaThumbLeaveMessageReq)
  // optional uint32 MatchId = 1;
  if (has_matchid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->matchid(), output);
  }

  // optional uint32 MsgId = 2;
  if (has_msgid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->msgid(), output);
  }

  // optional uint32 ThumbType = 3;
  if (has_thumbtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->thumbtype(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TPlatformArenaThumbLeaveMessageReq)
}

::google::protobuf::uint8* TPlatformArenaThumbLeaveMessageReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TPlatformArenaThumbLeaveMessageReq)
  // optional uint32 MatchId = 1;
  if (has_matchid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->matchid(), target);
  }

  // optional uint32 MsgId = 2;
  if (has_msgid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->msgid(), target);
  }

  // optional uint32 ThumbType = 3;
  if (has_thumbtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->thumbtype(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TPlatformArenaThumbLeaveMessageReq)
  return target;
}

int TPlatformArenaThumbLeaveMessageReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 MatchId = 1;
    if (has_matchid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->matchid());
    }

    // optional uint32 MsgId = 2;
    if (has_msgid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->msgid());
    }

    // optional uint32 ThumbType = 3;
    if (has_thumbtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->thumbtype());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TPlatformArenaThumbLeaveMessageReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TPlatformArenaThumbLeaveMessageReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TPlatformArenaThumbLeaveMessageReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TPlatformArenaThumbLeaveMessageReq::MergeFrom(const TPlatformArenaThumbLeaveMessageReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_matchid()) {
      set_matchid(from.matchid());
    }
    if (from.has_msgid()) {
      set_msgid(from.msgid());
    }
    if (from.has_thumbtype()) {
      set_thumbtype(from.thumbtype());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TPlatformArenaThumbLeaveMessageReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TPlatformArenaThumbLeaveMessageReq::CopyFrom(const TPlatformArenaThumbLeaveMessageReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TPlatformArenaThumbLeaveMessageReq::IsInitialized() const {

  return true;
}

void TPlatformArenaThumbLeaveMessageReq::Swap(TPlatformArenaThumbLeaveMessageReq* other) {
  if (other != this) {
    std::swap(matchid_, other->matchid_);
    std::swap(msgid_, other->msgid_);
    std::swap(thumbtype_, other->thumbtype_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TPlatformArenaThumbLeaveMessageReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TPlatformArenaThumbLeaveMessageReq_descriptor_;
  metadata.reflection = TPlatformArenaThumbLeaveMessageReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TPlatformArenaThumbLeaveMessageRsp::kRetCodeFieldNumber;
const int TPlatformArenaThumbLeaveMessageRsp::kThumbNumFieldNumber;
const int TPlatformArenaThumbLeaveMessageRsp::kNonThumbNumFieldNumber;
#endif  // !_MSC_VER

TPlatformArenaThumbLeaveMessageRsp::TPlatformArenaThumbLeaveMessageRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TPlatformArenaThumbLeaveMessageRsp)
}

void TPlatformArenaThumbLeaveMessageRsp::InitAsDefaultInstance() {
}

TPlatformArenaThumbLeaveMessageRsp::TPlatformArenaThumbLeaveMessageRsp(const TPlatformArenaThumbLeaveMessageRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TPlatformArenaThumbLeaveMessageRsp)
}

void TPlatformArenaThumbLeaveMessageRsp::SharedCtor() {
  _cached_size_ = 0;
  retcode_ = 0u;
  thumbnum_ = 0u;
  nonthumbnum_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TPlatformArenaThumbLeaveMessageRsp::~TPlatformArenaThumbLeaveMessageRsp() {
  // @@protoc_insertion_point(destructor:pb.TPlatformArenaThumbLeaveMessageRsp)
  SharedDtor();
}

void TPlatformArenaThumbLeaveMessageRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TPlatformArenaThumbLeaveMessageRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TPlatformArenaThumbLeaveMessageRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TPlatformArenaThumbLeaveMessageRsp_descriptor_;
}

const TPlatformArenaThumbLeaveMessageRsp& TPlatformArenaThumbLeaveMessageRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fPlatformArena_2eproto();
  return *default_instance_;
}

TPlatformArenaThumbLeaveMessageRsp* TPlatformArenaThumbLeaveMessageRsp::default_instance_ = NULL;

TPlatformArenaThumbLeaveMessageRsp* TPlatformArenaThumbLeaveMessageRsp::New() const {
  return new TPlatformArenaThumbLeaveMessageRsp;
}

void TPlatformArenaThumbLeaveMessageRsp::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<TPlatformArenaThumbLeaveMessageRsp*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(retcode_, nonthumbnum_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TPlatformArenaThumbLeaveMessageRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TPlatformArenaThumbLeaveMessageRsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 RetCode = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &retcode_)));
          set_has_retcode();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_ThumbNum;
        break;
      }

      // optional uint32 ThumbNum = 2;
      case 2: {
        if (tag == 16) {
         parse_ThumbNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &thumbnum_)));
          set_has_thumbnum();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_NonThumbNum;
        break;
      }

      // optional uint32 NonThumbNum = 3;
      case 3: {
        if (tag == 24) {
         parse_NonThumbNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &nonthumbnum_)));
          set_has_nonthumbnum();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TPlatformArenaThumbLeaveMessageRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TPlatformArenaThumbLeaveMessageRsp)
  return false;
#undef DO_
}

void TPlatformArenaThumbLeaveMessageRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TPlatformArenaThumbLeaveMessageRsp)
  // optional uint32 RetCode = 1;
  if (has_retcode()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->retcode(), output);
  }

  // optional uint32 ThumbNum = 2;
  if (has_thumbnum()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->thumbnum(), output);
  }

  // optional uint32 NonThumbNum = 3;
  if (has_nonthumbnum()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->nonthumbnum(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TPlatformArenaThumbLeaveMessageRsp)
}

::google::protobuf::uint8* TPlatformArenaThumbLeaveMessageRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TPlatformArenaThumbLeaveMessageRsp)
  // optional uint32 RetCode = 1;
  if (has_retcode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->retcode(), target);
  }

  // optional uint32 ThumbNum = 2;
  if (has_thumbnum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->thumbnum(), target);
  }

  // optional uint32 NonThumbNum = 3;
  if (has_nonthumbnum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->nonthumbnum(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TPlatformArenaThumbLeaveMessageRsp)
  return target;
}

int TPlatformArenaThumbLeaveMessageRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 RetCode = 1;
    if (has_retcode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->retcode());
    }

    // optional uint32 ThumbNum = 2;
    if (has_thumbnum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->thumbnum());
    }

    // optional uint32 NonThumbNum = 3;
    if (has_nonthumbnum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->nonthumbnum());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TPlatformArenaThumbLeaveMessageRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TPlatformArenaThumbLeaveMessageRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TPlatformArenaThumbLeaveMessageRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TPlatformArenaThumbLeaveMessageRsp::MergeFrom(const TPlatformArenaThumbLeaveMessageRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_retcode()) {
      set_retcode(from.retcode());
    }
    if (from.has_thumbnum()) {
      set_thumbnum(from.thumbnum());
    }
    if (from.has_nonthumbnum()) {
      set_nonthumbnum(from.nonthumbnum());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TPlatformArenaThumbLeaveMessageRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TPlatformArenaThumbLeaveMessageRsp::CopyFrom(const TPlatformArenaThumbLeaveMessageRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TPlatformArenaThumbLeaveMessageRsp::IsInitialized() const {

  return true;
}

void TPlatformArenaThumbLeaveMessageRsp::Swap(TPlatformArenaThumbLeaveMessageRsp* other) {
  if (other != this) {
    std::swap(retcode_, other->retcode_);
    std::swap(thumbnum_, other->thumbnum_);
    std::swap(nonthumbnum_, other->nonthumbnum_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TPlatformArenaThumbLeaveMessageRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TPlatformArenaThumbLeaveMessageRsp_descriptor_;
  metadata.reflection = TPlatformArenaThumbLeaveMessageRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TPlatformArenaGetLeaveMessageLstReq::kMatchIdFieldNumber;
#endif  // !_MSC_VER

TPlatformArenaGetLeaveMessageLstReq::TPlatformArenaGetLeaveMessageLstReq()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TPlatformArenaGetLeaveMessageLstReq)
}

void TPlatformArenaGetLeaveMessageLstReq::InitAsDefaultInstance() {
}

TPlatformArenaGetLeaveMessageLstReq::TPlatformArenaGetLeaveMessageLstReq(const TPlatformArenaGetLeaveMessageLstReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TPlatformArenaGetLeaveMessageLstReq)
}

void TPlatformArenaGetLeaveMessageLstReq::SharedCtor() {
  _cached_size_ = 0;
  matchid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TPlatformArenaGetLeaveMessageLstReq::~TPlatformArenaGetLeaveMessageLstReq() {
  // @@protoc_insertion_point(destructor:pb.TPlatformArenaGetLeaveMessageLstReq)
  SharedDtor();
}

void TPlatformArenaGetLeaveMessageLstReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TPlatformArenaGetLeaveMessageLstReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TPlatformArenaGetLeaveMessageLstReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TPlatformArenaGetLeaveMessageLstReq_descriptor_;
}

const TPlatformArenaGetLeaveMessageLstReq& TPlatformArenaGetLeaveMessageLstReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fPlatformArena_2eproto();
  return *default_instance_;
}

TPlatformArenaGetLeaveMessageLstReq* TPlatformArenaGetLeaveMessageLstReq::default_instance_ = NULL;

TPlatformArenaGetLeaveMessageLstReq* TPlatformArenaGetLeaveMessageLstReq::New() const {
  return new TPlatformArenaGetLeaveMessageLstReq;
}

void TPlatformArenaGetLeaveMessageLstReq::Clear() {
  matchid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TPlatformArenaGetLeaveMessageLstReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TPlatformArenaGetLeaveMessageLstReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 MatchId = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &matchid_)));
          set_has_matchid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TPlatformArenaGetLeaveMessageLstReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TPlatformArenaGetLeaveMessageLstReq)
  return false;
#undef DO_
}

void TPlatformArenaGetLeaveMessageLstReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TPlatformArenaGetLeaveMessageLstReq)
  // optional uint32 MatchId = 1;
  if (has_matchid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->matchid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TPlatformArenaGetLeaveMessageLstReq)
}

::google::protobuf::uint8* TPlatformArenaGetLeaveMessageLstReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TPlatformArenaGetLeaveMessageLstReq)
  // optional uint32 MatchId = 1;
  if (has_matchid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->matchid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TPlatformArenaGetLeaveMessageLstReq)
  return target;
}

int TPlatformArenaGetLeaveMessageLstReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 MatchId = 1;
    if (has_matchid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->matchid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TPlatformArenaGetLeaveMessageLstReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TPlatformArenaGetLeaveMessageLstReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TPlatformArenaGetLeaveMessageLstReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TPlatformArenaGetLeaveMessageLstReq::MergeFrom(const TPlatformArenaGetLeaveMessageLstReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_matchid()) {
      set_matchid(from.matchid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TPlatformArenaGetLeaveMessageLstReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TPlatformArenaGetLeaveMessageLstReq::CopyFrom(const TPlatformArenaGetLeaveMessageLstReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TPlatformArenaGetLeaveMessageLstReq::IsInitialized() const {

  return true;
}

void TPlatformArenaGetLeaveMessageLstReq::Swap(TPlatformArenaGetLeaveMessageLstReq* other) {
  if (other != this) {
    std::swap(matchid_, other->matchid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TPlatformArenaGetLeaveMessageLstReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TPlatformArenaGetLeaveMessageLstReq_descriptor_;
  metadata.reflection = TPlatformArenaGetLeaveMessageLstReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TPlatformArenaLeaveMessageData::kMsgIdFieldNumber;
const int TPlatformArenaLeaveMessageData::kContentFieldNumber;
const int TPlatformArenaLeaveMessageData::kLeaveUserFieldNumber;
const int TPlatformArenaLeaveMessageData::kThumbNumFieldNumber;
const int TPlatformArenaLeaveMessageData::kNonThumbNumFieldNumber;
const int TPlatformArenaLeaveMessageData::kThumbStatusFieldNumber;
#endif  // !_MSC_VER

TPlatformArenaLeaveMessageData::TPlatformArenaLeaveMessageData()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TPlatformArenaLeaveMessageData)
}

void TPlatformArenaLeaveMessageData::InitAsDefaultInstance() {
  leaveuser_ = const_cast< ::pb::TUserSimpleInfo*>(&::pb::TUserSimpleInfo::default_instance());
}

TPlatformArenaLeaveMessageData::TPlatformArenaLeaveMessageData(const TPlatformArenaLeaveMessageData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TPlatformArenaLeaveMessageData)
}

void TPlatformArenaLeaveMessageData::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  msgid_ = 0u;
  content_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  leaveuser_ = NULL;
  thumbnum_ = 0u;
  nonthumbnum_ = 0u;
  thumbstatus_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TPlatformArenaLeaveMessageData::~TPlatformArenaLeaveMessageData() {
  // @@protoc_insertion_point(destructor:pb.TPlatformArenaLeaveMessageData)
  SharedDtor();
}

void TPlatformArenaLeaveMessageData::SharedDtor() {
  if (content_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete content_;
  }
  if (this != default_instance_) {
    delete leaveuser_;
  }
}

void TPlatformArenaLeaveMessageData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TPlatformArenaLeaveMessageData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TPlatformArenaLeaveMessageData_descriptor_;
}

const TPlatformArenaLeaveMessageData& TPlatformArenaLeaveMessageData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fPlatformArena_2eproto();
  return *default_instance_;
}

TPlatformArenaLeaveMessageData* TPlatformArenaLeaveMessageData::default_instance_ = NULL;

TPlatformArenaLeaveMessageData* TPlatformArenaLeaveMessageData::New() const {
  return new TPlatformArenaLeaveMessageData;
}

void TPlatformArenaLeaveMessageData::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<TPlatformArenaLeaveMessageData*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 63) {
    ZR_(msgid_, thumbnum_);
    ZR_(nonthumbnum_, thumbstatus_);
    if (has_content()) {
      if (content_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        content_->clear();
      }
    }
    if (has_leaveuser()) {
      if (leaveuser_ != NULL) leaveuser_->::pb::TUserSimpleInfo::Clear();
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TPlatformArenaLeaveMessageData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TPlatformArenaLeaveMessageData)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 MsgId = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &msgid_)));
          set_has_msgid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_Content;
        break;
      }

      // optional string Content = 2;
      case 2: {
        if (tag == 18) {
         parse_Content:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_content()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->content().data(), this->content().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "content");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_LeaveUser;
        break;
      }

      // optional .pb.TUserSimpleInfo LeaveUser = 3;
      case 3: {
        if (tag == 26) {
         parse_LeaveUser:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_leaveuser()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_ThumbNum;
        break;
      }

      // optional uint32 ThumbNum = 4;
      case 4: {
        if (tag == 32) {
         parse_ThumbNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &thumbnum_)));
          set_has_thumbnum();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_NonThumbNum;
        break;
      }

      // optional uint32 NonThumbNum = 5;
      case 5: {
        if (tag == 40) {
         parse_NonThumbNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &nonthumbnum_)));
          set_has_nonthumbnum();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_ThumbStatus;
        break;
      }

      // optional uint32 ThumbStatus = 6;
      case 6: {
        if (tag == 48) {
         parse_ThumbStatus:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &thumbstatus_)));
          set_has_thumbstatus();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TPlatformArenaLeaveMessageData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TPlatformArenaLeaveMessageData)
  return false;
#undef DO_
}

void TPlatformArenaLeaveMessageData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TPlatformArenaLeaveMessageData)
  // optional uint32 MsgId = 1;
  if (has_msgid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->msgid(), output);
  }

  // optional string Content = 2;
  if (has_content()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->content().data(), this->content().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "content");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->content(), output);
  }

  // optional .pb.TUserSimpleInfo LeaveUser = 3;
  if (has_leaveuser()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->leaveuser(), output);
  }

  // optional uint32 ThumbNum = 4;
  if (has_thumbnum()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->thumbnum(), output);
  }

  // optional uint32 NonThumbNum = 5;
  if (has_nonthumbnum()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->nonthumbnum(), output);
  }

  // optional uint32 ThumbStatus = 6;
  if (has_thumbstatus()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->thumbstatus(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TPlatformArenaLeaveMessageData)
}

::google::protobuf::uint8* TPlatformArenaLeaveMessageData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TPlatformArenaLeaveMessageData)
  // optional uint32 MsgId = 1;
  if (has_msgid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->msgid(), target);
  }

  // optional string Content = 2;
  if (has_content()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->content().data(), this->content().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "content");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->content(), target);
  }

  // optional .pb.TUserSimpleInfo LeaveUser = 3;
  if (has_leaveuser()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->leaveuser(), target);
  }

  // optional uint32 ThumbNum = 4;
  if (has_thumbnum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->thumbnum(), target);
  }

  // optional uint32 NonThumbNum = 5;
  if (has_nonthumbnum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->nonthumbnum(), target);
  }

  // optional uint32 ThumbStatus = 6;
  if (has_thumbstatus()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->thumbstatus(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TPlatformArenaLeaveMessageData)
  return target;
}

int TPlatformArenaLeaveMessageData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 MsgId = 1;
    if (has_msgid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->msgid());
    }

    // optional string Content = 2;
    if (has_content()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->content());
    }

    // optional .pb.TUserSimpleInfo LeaveUser = 3;
    if (has_leaveuser()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->leaveuser());
    }

    // optional uint32 ThumbNum = 4;
    if (has_thumbnum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->thumbnum());
    }

    // optional uint32 NonThumbNum = 5;
    if (has_nonthumbnum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->nonthumbnum());
    }

    // optional uint32 ThumbStatus = 6;
    if (has_thumbstatus()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->thumbstatus());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TPlatformArenaLeaveMessageData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TPlatformArenaLeaveMessageData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TPlatformArenaLeaveMessageData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TPlatformArenaLeaveMessageData::MergeFrom(const TPlatformArenaLeaveMessageData& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgid()) {
      set_msgid(from.msgid());
    }
    if (from.has_content()) {
      set_content(from.content());
    }
    if (from.has_leaveuser()) {
      mutable_leaveuser()->::pb::TUserSimpleInfo::MergeFrom(from.leaveuser());
    }
    if (from.has_thumbnum()) {
      set_thumbnum(from.thumbnum());
    }
    if (from.has_nonthumbnum()) {
      set_nonthumbnum(from.nonthumbnum());
    }
    if (from.has_thumbstatus()) {
      set_thumbstatus(from.thumbstatus());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TPlatformArenaLeaveMessageData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TPlatformArenaLeaveMessageData::CopyFrom(const TPlatformArenaLeaveMessageData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TPlatformArenaLeaveMessageData::IsInitialized() const {

  return true;
}

void TPlatformArenaLeaveMessageData::Swap(TPlatformArenaLeaveMessageData* other) {
  if (other != this) {
    std::swap(msgid_, other->msgid_);
    std::swap(content_, other->content_);
    std::swap(leaveuser_, other->leaveuser_);
    std::swap(thumbnum_, other->thumbnum_);
    std::swap(nonthumbnum_, other->nonthumbnum_);
    std::swap(thumbstatus_, other->thumbstatus_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TPlatformArenaLeaveMessageData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TPlatformArenaLeaveMessageData_descriptor_;
  metadata.reflection = TPlatformArenaLeaveMessageData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TPlatformArenaGetLeaveMessageLstRsp::kMsgLstFieldNumber;
#endif  // !_MSC_VER

TPlatformArenaGetLeaveMessageLstRsp::TPlatformArenaGetLeaveMessageLstRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TPlatformArenaGetLeaveMessageLstRsp)
}

void TPlatformArenaGetLeaveMessageLstRsp::InitAsDefaultInstance() {
}

TPlatformArenaGetLeaveMessageLstRsp::TPlatformArenaGetLeaveMessageLstRsp(const TPlatformArenaGetLeaveMessageLstRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TPlatformArenaGetLeaveMessageLstRsp)
}

void TPlatformArenaGetLeaveMessageLstRsp::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TPlatformArenaGetLeaveMessageLstRsp::~TPlatformArenaGetLeaveMessageLstRsp() {
  // @@protoc_insertion_point(destructor:pb.TPlatformArenaGetLeaveMessageLstRsp)
  SharedDtor();
}

void TPlatformArenaGetLeaveMessageLstRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TPlatformArenaGetLeaveMessageLstRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TPlatformArenaGetLeaveMessageLstRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TPlatformArenaGetLeaveMessageLstRsp_descriptor_;
}

const TPlatformArenaGetLeaveMessageLstRsp& TPlatformArenaGetLeaveMessageLstRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fPlatformArena_2eproto();
  return *default_instance_;
}

TPlatformArenaGetLeaveMessageLstRsp* TPlatformArenaGetLeaveMessageLstRsp::default_instance_ = NULL;

TPlatformArenaGetLeaveMessageLstRsp* TPlatformArenaGetLeaveMessageLstRsp::New() const {
  return new TPlatformArenaGetLeaveMessageLstRsp;
}

void TPlatformArenaGetLeaveMessageLstRsp::Clear() {
  msglst_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TPlatformArenaGetLeaveMessageLstRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TPlatformArenaGetLeaveMessageLstRsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .pb.TPlatformArenaLeaveMessageData MsgLst = 1;
      case 1: {
        if (tag == 10) {
         parse_MsgLst:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_msglst()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_MsgLst;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TPlatformArenaGetLeaveMessageLstRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TPlatformArenaGetLeaveMessageLstRsp)
  return false;
#undef DO_
}

void TPlatformArenaGetLeaveMessageLstRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TPlatformArenaGetLeaveMessageLstRsp)
  // repeated .pb.TPlatformArenaLeaveMessageData MsgLst = 1;
  for (int i = 0; i < this->msglst_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->msglst(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TPlatformArenaGetLeaveMessageLstRsp)
}

::google::protobuf::uint8* TPlatformArenaGetLeaveMessageLstRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TPlatformArenaGetLeaveMessageLstRsp)
  // repeated .pb.TPlatformArenaLeaveMessageData MsgLst = 1;
  for (int i = 0; i < this->msglst_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->msglst(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TPlatformArenaGetLeaveMessageLstRsp)
  return target;
}

int TPlatformArenaGetLeaveMessageLstRsp::ByteSize() const {
  int total_size = 0;

  // repeated .pb.TPlatformArenaLeaveMessageData MsgLst = 1;
  total_size += 1 * this->msglst_size();
  for (int i = 0; i < this->msglst_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->msglst(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TPlatformArenaGetLeaveMessageLstRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TPlatformArenaGetLeaveMessageLstRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TPlatformArenaGetLeaveMessageLstRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TPlatformArenaGetLeaveMessageLstRsp::MergeFrom(const TPlatformArenaGetLeaveMessageLstRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  msglst_.MergeFrom(from.msglst_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TPlatformArenaGetLeaveMessageLstRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TPlatformArenaGetLeaveMessageLstRsp::CopyFrom(const TPlatformArenaGetLeaveMessageLstRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TPlatformArenaGetLeaveMessageLstRsp::IsInitialized() const {

  return true;
}

void TPlatformArenaGetLeaveMessageLstRsp::Swap(TPlatformArenaGetLeaveMessageLstRsp* other) {
  if (other != this) {
    msglst_.Swap(&other->msglst_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TPlatformArenaGetLeaveMessageLstRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TPlatformArenaGetLeaveMessageLstRsp_descriptor_;
  metadata.reflection = TPlatformArenaGetLeaveMessageLstRsp_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace pb

// @@protoc_insertion_point(global_scope)
