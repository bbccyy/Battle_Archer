// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: net/BeautyHouse.proto

#ifndef PROTOBUF_net_2fBeautyHouse_2eproto__INCLUDED
#define PROTOBUF_net_2fBeautyHouse_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
#include "net/Common.pb.h"
#include "net/CommonReward.pb.h"
#include "net/User.pb.h"
// @@protoc_insertion_point(includes)

namespace pb {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_net_2fBeautyHouse_2eproto();
void protobuf_AssignDesc_net_2fBeautyHouse_2eproto();
void protobuf_ShutdownFile_net_2fBeautyHouse_2eproto();

class TBeautyHouseBeautyInfo;
class TBeautyHouseCharmValueInfo;
class TBeautyHouseSkillInfo;
class TBeautyHouseGetInfoRsp;
class TBeautyHouseBeautyUpgradeReq;
class TBeautyHouseInteractBeautyReq;
class TBeautyHouseReceiveBoxRewardReq;
class TBeautyHouseReceiveBoxRewardRsp;
class TBeautyHouseSkillUpgradeReq;
class TBeautyHouseChangeNotify;

// ===================================================================

/*FOR2LUA
<Record>
	<name>TBeautyHouseBeautyInfo</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/BeautyHouse.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TBeautyHouseBeautyInfo : public ::google::protobuf::Message {
 public:
  TBeautyHouseBeautyInfo();
  virtual ~TBeautyHouseBeautyInfo();

  TBeautyHouseBeautyInfo(const TBeautyHouseBeautyInfo& from);

  inline TBeautyHouseBeautyInfo& operator=(const TBeautyHouseBeautyInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TBeautyHouseBeautyInfo& default_instance();

  void Swap(TBeautyHouseBeautyInfo* other);

  // implements Message ----------------------------------------------

  TBeautyHouseBeautyInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TBeautyHouseBeautyInfo& from);
  void MergeFrom(const TBeautyHouseBeautyInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 Bid = 1;
  inline bool has_bid() const;
  inline void clear_bid();
  static const int kBidFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TBeautyHouseBeautyInfo</name>
  	<Function>
  		<name>bid</name>
  		<replaceName>Bid</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_bid</name>
  		<replaceName>Bid</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_bid</name>
  		<replaceName>Bid</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 bid() const;
  inline void set_bid(::google::protobuf::uint32 value);

  // optional uint32 BeautyLv = 2;
  inline bool has_beautylv() const;
  inline void clear_beautylv();
  static const int kBeautyLvFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TBeautyHouseBeautyInfo</name>
  	<Function>
  		<name>beautylv</name>
  		<replaceName>BeautyLv</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_beautylv</name>
  		<replaceName>BeautyLv</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_beautylv</name>
  		<replaceName>BeautyLv</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 beautylv() const;
  inline void set_beautylv(::google::protobuf::uint32 value);

  // optional uint32 IntimateLv = 3;
  inline bool has_intimatelv() const;
  inline void clear_intimatelv();
  static const int kIntimateLvFieldNumber = 3;
  /*FOR2LUA
  <Record>
  	<name>TBeautyHouseBeautyInfo</name>
  	<Function>
  		<name>intimatelv</name>
  		<replaceName>IntimateLv</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_intimatelv</name>
  		<replaceName>IntimateLv</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_intimatelv</name>
  		<replaceName>IntimateLv</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 intimatelv() const;
  inline void set_intimatelv(::google::protobuf::uint32 value);

  // optional uint32 IntimateExp = 4;
  inline bool has_intimateexp() const;
  inline void clear_intimateexp();
  static const int kIntimateExpFieldNumber = 4;
  /*FOR2LUA
  <Record>
  	<name>TBeautyHouseBeautyInfo</name>
  	<Function>
  		<name>intimateexp</name>
  		<replaceName>IntimateExp</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_intimateexp</name>
  		<replaceName>IntimateExp</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_intimateexp</name>
  		<replaceName>IntimateExp</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 intimateexp() const;
  inline void set_intimateexp(::google::protobuf::uint32 value);

  // repeated uint32 ReceivedBoxArr = 5;
  inline int receivedboxarr_size() const;
  inline void clear_receivedboxarr();
  static const int kReceivedBoxArrFieldNumber = 5;
  /*FOR2LUA
  <Record>
  	<name>TBeautyHouseBeautyInfo</name>
  	<Function>
  		<name>receivedboxarr</name>
  		<replaceName>ReceivedBoxArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_receivedboxarr</name>
  		<replaceName>ReceivedBoxArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_receivedboxarr</name>
  		<replaceName>ReceivedBoxArr</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_receivedboxarr</name>
  		<replaceName>ReceivedBoxArr</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>receivedboxarr_size</name>
  		<replaceName>ReceivedBoxArr</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 receivedboxarr(int index) const;
  inline void set_receivedboxarr(int index, ::google::protobuf::uint32 value);
  inline void add_receivedboxarr(::google::protobuf::uint32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      receivedboxarr() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_receivedboxarr();

  // optional uint32 InteractNum = 6;
  inline bool has_interactnum() const;
  inline void clear_interactnum();
  static const int kInteractNumFieldNumber = 6;
  /*FOR2LUA
  <Record>
  	<name>TBeautyHouseBeautyInfo</name>
  	<Function>
  		<name>interactnum</name>
  		<replaceName>InteractNum</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_interactnum</name>
  		<replaceName>InteractNum</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_interactnum</name>
  		<replaceName>InteractNum</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 interactnum() const;
  inline void set_interactnum(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:pb.TBeautyHouseBeautyInfo)
 private:
  inline void set_has_bid();
  inline void clear_has_bid();
  inline void set_has_beautylv();
  inline void clear_has_beautylv();
  inline void set_has_intimatelv();
  inline void clear_has_intimatelv();
  inline void set_has_intimateexp();
  inline void clear_has_intimateexp();
  inline void set_has_interactnum();
  inline void clear_has_interactnum();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 bid_;
  ::google::protobuf::uint32 beautylv_;
  ::google::protobuf::uint32 intimatelv_;
  ::google::protobuf::uint32 intimateexp_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > receivedboxarr_;
  ::google::protobuf::uint32 interactnum_;
  friend void  protobuf_AddDesc_net_2fBeautyHouse_2eproto();
  friend void protobuf_AssignDesc_net_2fBeautyHouse_2eproto();
  friend void protobuf_ShutdownFile_net_2fBeautyHouse_2eproto();

  void InitAsDefaultInstance();
  static TBeautyHouseBeautyInfo* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TBeautyHouseCharmValueInfo</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/BeautyHouse.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TBeautyHouseCharmValueInfo : public ::google::protobuf::Message {
 public:
  TBeautyHouseCharmValueInfo();
  virtual ~TBeautyHouseCharmValueInfo();

  TBeautyHouseCharmValueInfo(const TBeautyHouseCharmValueInfo& from);

  inline TBeautyHouseCharmValueInfo& operator=(const TBeautyHouseCharmValueInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TBeautyHouseCharmValueInfo& default_instance();

  void Swap(TBeautyHouseCharmValueInfo* other);

  // implements Message ----------------------------------------------

  TBeautyHouseCharmValueInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TBeautyHouseCharmValueInfo& from);
  void MergeFrom(const TBeautyHouseCharmValueInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 Quality = 1;
  inline bool has_quality() const;
  inline void clear_quality();
  static const int kQualityFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TBeautyHouseCharmValueInfo</name>
  	<Function>
  		<name>quality</name>
  		<replaceName>Quality</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_quality</name>
  		<replaceName>Quality</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_quality</name>
  		<replaceName>Quality</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 quality() const;
  inline void set_quality(::google::protobuf::uint32 value);

  // optional uint32 CharmValue = 2;
  inline bool has_charmvalue() const;
  inline void clear_charmvalue();
  static const int kCharmValueFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TBeautyHouseCharmValueInfo</name>
  	<Function>
  		<name>charmvalue</name>
  		<replaceName>CharmValue</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_charmvalue</name>
  		<replaceName>CharmValue</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_charmvalue</name>
  		<replaceName>CharmValue</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 charmvalue() const;
  inline void set_charmvalue(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:pb.TBeautyHouseCharmValueInfo)
 private:
  inline void set_has_quality();
  inline void clear_has_quality();
  inline void set_has_charmvalue();
  inline void clear_has_charmvalue();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 quality_;
  ::google::protobuf::uint32 charmvalue_;
  friend void  protobuf_AddDesc_net_2fBeautyHouse_2eproto();
  friend void protobuf_AssignDesc_net_2fBeautyHouse_2eproto();
  friend void protobuf_ShutdownFile_net_2fBeautyHouse_2eproto();

  void InitAsDefaultInstance();
  static TBeautyHouseCharmValueInfo* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TBeautyHouseSkillInfo</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/BeautyHouse.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TBeautyHouseSkillInfo : public ::google::protobuf::Message {
 public:
  TBeautyHouseSkillInfo();
  virtual ~TBeautyHouseSkillInfo();

  TBeautyHouseSkillInfo(const TBeautyHouseSkillInfo& from);

  inline TBeautyHouseSkillInfo& operator=(const TBeautyHouseSkillInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TBeautyHouseSkillInfo& default_instance();

  void Swap(TBeautyHouseSkillInfo* other);

  // implements Message ----------------------------------------------

  TBeautyHouseSkillInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TBeautyHouseSkillInfo& from);
  void MergeFrom(const TBeautyHouseSkillInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 Quality = 1;
  inline bool has_quality() const;
  inline void clear_quality();
  static const int kQualityFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TBeautyHouseSkillInfo</name>
  	<Function>
  		<name>quality</name>
  		<replaceName>Quality</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_quality</name>
  		<replaceName>Quality</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_quality</name>
  		<replaceName>Quality</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 quality() const;
  inline void set_quality(::google::protobuf::uint32 value);

  // optional uint32 SkillIndex = 2;
  inline bool has_skillindex() const;
  inline void clear_skillindex();
  static const int kSkillIndexFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TBeautyHouseSkillInfo</name>
  	<Function>
  		<name>skillindex</name>
  		<replaceName>SkillIndex</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_skillindex</name>
  		<replaceName>SkillIndex</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_skillindex</name>
  		<replaceName>SkillIndex</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 skillindex() const;
  inline void set_skillindex(::google::protobuf::uint32 value);

  // optional uint32 SkillLv = 3;
  inline bool has_skilllv() const;
  inline void clear_skilllv();
  static const int kSkillLvFieldNumber = 3;
  /*FOR2LUA
  <Record>
  	<name>TBeautyHouseSkillInfo</name>
  	<Function>
  		<name>skilllv</name>
  		<replaceName>SkillLv</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_skilllv</name>
  		<replaceName>SkillLv</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_skilllv</name>
  		<replaceName>SkillLv</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 skilllv() const;
  inline void set_skilllv(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:pb.TBeautyHouseSkillInfo)
 private:
  inline void set_has_quality();
  inline void clear_has_quality();
  inline void set_has_skillindex();
  inline void clear_has_skillindex();
  inline void set_has_skilllv();
  inline void clear_has_skilllv();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 quality_;
  ::google::protobuf::uint32 skillindex_;
  ::google::protobuf::uint32 skilllv_;
  friend void  protobuf_AddDesc_net_2fBeautyHouse_2eproto();
  friend void protobuf_AssignDesc_net_2fBeautyHouse_2eproto();
  friend void protobuf_ShutdownFile_net_2fBeautyHouse_2eproto();

  void InitAsDefaultInstance();
  static TBeautyHouseSkillInfo* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TBeautyHouseGetInfoRsp</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/BeautyHouse.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TBeautyHouseGetInfoRsp : public ::google::protobuf::Message {
 public:
  TBeautyHouseGetInfoRsp();
  virtual ~TBeautyHouseGetInfoRsp();

  TBeautyHouseGetInfoRsp(const TBeautyHouseGetInfoRsp& from);

  inline TBeautyHouseGetInfoRsp& operator=(const TBeautyHouseGetInfoRsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TBeautyHouseGetInfoRsp& default_instance();

  void Swap(TBeautyHouseGetInfoRsp* other);

  // implements Message ----------------------------------------------

  TBeautyHouseGetInfoRsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TBeautyHouseGetInfoRsp& from);
  void MergeFrom(const TBeautyHouseGetInfoRsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .pb.TBeautyHouseBeautyInfo BeautyArr = 1;
  inline int beautyarr_size() const;
  inline void clear_beautyarr();
  static const int kBeautyArrFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TBeautyHouseGetInfoRsp</name>
  	<Function>
  		<name>beautyarr</name>
  		<replaceName>BeautyArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_beautyarr</name>
  		<replaceName>BeautyArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_beautyarr</name>
  		<replaceName>BeautyArr</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_beautyarr</name>
  		<replaceName>BeautyArr</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>beautyarr_size</name>
  		<replaceName>BeautyArr</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TBeautyHouseBeautyInfo& beautyarr(int index) const;
  inline ::pb::TBeautyHouseBeautyInfo* mutable_beautyarr(int index);
  inline ::pb::TBeautyHouseBeautyInfo* add_beautyarr();
  inline const ::google::protobuf::RepeatedPtrField< ::pb::TBeautyHouseBeautyInfo >&
      beautyarr() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb::TBeautyHouseBeautyInfo >*
      mutable_beautyarr();

  // repeated .pb.TBeautyHouseSkillInfo SkillInfo = 2;
  inline int skillinfo_size() const;
  inline void clear_skillinfo();
  static const int kSkillInfoFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TBeautyHouseGetInfoRsp</name>
  	<Function>
  		<name>skillinfo</name>
  		<replaceName>SkillInfo</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_skillinfo</name>
  		<replaceName>SkillInfo</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_skillinfo</name>
  		<replaceName>SkillInfo</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_skillinfo</name>
  		<replaceName>SkillInfo</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>skillinfo_size</name>
  		<replaceName>SkillInfo</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TBeautyHouseSkillInfo& skillinfo(int index) const;
  inline ::pb::TBeautyHouseSkillInfo* mutable_skillinfo(int index);
  inline ::pb::TBeautyHouseSkillInfo* add_skillinfo();
  inline const ::google::protobuf::RepeatedPtrField< ::pb::TBeautyHouseSkillInfo >&
      skillinfo() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb::TBeautyHouseSkillInfo >*
      mutable_skillinfo();

  // repeated .pb.TBeautyHouseCharmValueInfo CharmValue = 3;
  inline int charmvalue_size() const;
  inline void clear_charmvalue();
  static const int kCharmValueFieldNumber = 3;
  /*FOR2LUA
  <Record>
  	<name>TBeautyHouseGetInfoRsp</name>
  	<Function>
  		<name>charmvalue</name>
  		<replaceName>CharmValue</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_charmvalue</name>
  		<replaceName>CharmValue</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_charmvalue</name>
  		<replaceName>CharmValue</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_charmvalue</name>
  		<replaceName>CharmValue</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>charmvalue_size</name>
  		<replaceName>CharmValue</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TBeautyHouseCharmValueInfo& charmvalue(int index) const;
  inline ::pb::TBeautyHouseCharmValueInfo* mutable_charmvalue(int index);
  inline ::pb::TBeautyHouseCharmValueInfo* add_charmvalue();
  inline const ::google::protobuf::RepeatedPtrField< ::pb::TBeautyHouseCharmValueInfo >&
      charmvalue() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb::TBeautyHouseCharmValueInfo >*
      mutable_charmvalue();

  // @@protoc_insertion_point(class_scope:pb.TBeautyHouseGetInfoRsp)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::pb::TBeautyHouseBeautyInfo > beautyarr_;
  ::google::protobuf::RepeatedPtrField< ::pb::TBeautyHouseSkillInfo > skillinfo_;
  ::google::protobuf::RepeatedPtrField< ::pb::TBeautyHouseCharmValueInfo > charmvalue_;
  friend void  protobuf_AddDesc_net_2fBeautyHouse_2eproto();
  friend void protobuf_AssignDesc_net_2fBeautyHouse_2eproto();
  friend void protobuf_ShutdownFile_net_2fBeautyHouse_2eproto();

  void InitAsDefaultInstance();
  static TBeautyHouseGetInfoRsp* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TBeautyHouseBeautyUpgradeReq</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/BeautyHouse.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TBeautyHouseBeautyUpgradeReq : public ::google::protobuf::Message {
 public:
  TBeautyHouseBeautyUpgradeReq();
  virtual ~TBeautyHouseBeautyUpgradeReq();

  TBeautyHouseBeautyUpgradeReq(const TBeautyHouseBeautyUpgradeReq& from);

  inline TBeautyHouseBeautyUpgradeReq& operator=(const TBeautyHouseBeautyUpgradeReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TBeautyHouseBeautyUpgradeReq& default_instance();

  void Swap(TBeautyHouseBeautyUpgradeReq* other);

  // implements Message ----------------------------------------------

  TBeautyHouseBeautyUpgradeReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TBeautyHouseBeautyUpgradeReq& from);
  void MergeFrom(const TBeautyHouseBeautyUpgradeReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 Bid = 1;
  inline bool has_bid() const;
  inline void clear_bid();
  static const int kBidFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TBeautyHouseBeautyUpgradeReq</name>
  	<Function>
  		<name>bid</name>
  		<replaceName>Bid</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_bid</name>
  		<replaceName>Bid</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_bid</name>
  		<replaceName>Bid</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 bid() const;
  inline void set_bid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:pb.TBeautyHouseBeautyUpgradeReq)
 private:
  inline void set_has_bid();
  inline void clear_has_bid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 bid_;
  friend void  protobuf_AddDesc_net_2fBeautyHouse_2eproto();
  friend void protobuf_AssignDesc_net_2fBeautyHouse_2eproto();
  friend void protobuf_ShutdownFile_net_2fBeautyHouse_2eproto();

  void InitAsDefaultInstance();
  static TBeautyHouseBeautyUpgradeReq* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TBeautyHouseInteractBeautyReq</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/BeautyHouse.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TBeautyHouseInteractBeautyReq : public ::google::protobuf::Message {
 public:
  TBeautyHouseInteractBeautyReq();
  virtual ~TBeautyHouseInteractBeautyReq();

  TBeautyHouseInteractBeautyReq(const TBeautyHouseInteractBeautyReq& from);

  inline TBeautyHouseInteractBeautyReq& operator=(const TBeautyHouseInteractBeautyReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TBeautyHouseInteractBeautyReq& default_instance();

  void Swap(TBeautyHouseInteractBeautyReq* other);

  // implements Message ----------------------------------------------

  TBeautyHouseInteractBeautyReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TBeautyHouseInteractBeautyReq& from);
  void MergeFrom(const TBeautyHouseInteractBeautyReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 Bid = 1;
  inline bool has_bid() const;
  inline void clear_bid();
  static const int kBidFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TBeautyHouseInteractBeautyReq</name>
  	<Function>
  		<name>bid</name>
  		<replaceName>Bid</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_bid</name>
  		<replaceName>Bid</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_bid</name>
  		<replaceName>Bid</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 bid() const;
  inline void set_bid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:pb.TBeautyHouseInteractBeautyReq)
 private:
  inline void set_has_bid();
  inline void clear_has_bid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 bid_;
  friend void  protobuf_AddDesc_net_2fBeautyHouse_2eproto();
  friend void protobuf_AssignDesc_net_2fBeautyHouse_2eproto();
  friend void protobuf_ShutdownFile_net_2fBeautyHouse_2eproto();

  void InitAsDefaultInstance();
  static TBeautyHouseInteractBeautyReq* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TBeautyHouseReceiveBoxRewardReq</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/BeautyHouse.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TBeautyHouseReceiveBoxRewardReq : public ::google::protobuf::Message {
 public:
  TBeautyHouseReceiveBoxRewardReq();
  virtual ~TBeautyHouseReceiveBoxRewardReq();

  TBeautyHouseReceiveBoxRewardReq(const TBeautyHouseReceiveBoxRewardReq& from);

  inline TBeautyHouseReceiveBoxRewardReq& operator=(const TBeautyHouseReceiveBoxRewardReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TBeautyHouseReceiveBoxRewardReq& default_instance();

  void Swap(TBeautyHouseReceiveBoxRewardReq* other);

  // implements Message ----------------------------------------------

  TBeautyHouseReceiveBoxRewardReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TBeautyHouseReceiveBoxRewardReq& from);
  void MergeFrom(const TBeautyHouseReceiveBoxRewardReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 Bid = 1;
  inline bool has_bid() const;
  inline void clear_bid();
  static const int kBidFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TBeautyHouseReceiveBoxRewardReq</name>
  	<Function>
  		<name>bid</name>
  		<replaceName>Bid</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_bid</name>
  		<replaceName>Bid</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_bid</name>
  		<replaceName>Bid</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 bid() const;
  inline void set_bid(::google::protobuf::uint32 value);

  // optional uint32 BoxLv = 2;
  inline bool has_boxlv() const;
  inline void clear_boxlv();
  static const int kBoxLvFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TBeautyHouseReceiveBoxRewardReq</name>
  	<Function>
  		<name>boxlv</name>
  		<replaceName>BoxLv</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_boxlv</name>
  		<replaceName>BoxLv</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_boxlv</name>
  		<replaceName>BoxLv</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 boxlv() const;
  inline void set_boxlv(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:pb.TBeautyHouseReceiveBoxRewardReq)
 private:
  inline void set_has_bid();
  inline void clear_has_bid();
  inline void set_has_boxlv();
  inline void clear_has_boxlv();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 bid_;
  ::google::protobuf::uint32 boxlv_;
  friend void  protobuf_AddDesc_net_2fBeautyHouse_2eproto();
  friend void protobuf_AssignDesc_net_2fBeautyHouse_2eproto();
  friend void protobuf_ShutdownFile_net_2fBeautyHouse_2eproto();

  void InitAsDefaultInstance();
  static TBeautyHouseReceiveBoxRewardReq* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TBeautyHouseReceiveBoxRewardRsp</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/BeautyHouse.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TBeautyHouseReceiveBoxRewardRsp : public ::google::protobuf::Message {
 public:
  TBeautyHouseReceiveBoxRewardRsp();
  virtual ~TBeautyHouseReceiveBoxRewardRsp();

  TBeautyHouseReceiveBoxRewardRsp(const TBeautyHouseReceiveBoxRewardRsp& from);

  inline TBeautyHouseReceiveBoxRewardRsp& operator=(const TBeautyHouseReceiveBoxRewardRsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TBeautyHouseReceiveBoxRewardRsp& default_instance();

  void Swap(TBeautyHouseReceiveBoxRewardRsp* other);

  // implements Message ----------------------------------------------

  TBeautyHouseReceiveBoxRewardRsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TBeautyHouseReceiveBoxRewardRsp& from);
  void MergeFrom(const TBeautyHouseReceiveBoxRewardRsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .pb.TCommonReward RewardArr = 1;
  inline int rewardarr_size() const;
  inline void clear_rewardarr();
  static const int kRewardArrFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TBeautyHouseReceiveBoxRewardRsp</name>
  	<Function>
  		<name>rewardarr</name>
  		<replaceName>RewardArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_rewardarr</name>
  		<replaceName>RewardArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_rewardarr</name>
  		<replaceName>RewardArr</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_rewardarr</name>
  		<replaceName>RewardArr</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>rewardarr_size</name>
  		<replaceName>RewardArr</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TCommonReward& rewardarr(int index) const;
  inline ::pb::TCommonReward* mutable_rewardarr(int index);
  inline ::pb::TCommonReward* add_rewardarr();
  inline const ::google::protobuf::RepeatedPtrField< ::pb::TCommonReward >&
      rewardarr() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb::TCommonReward >*
      mutable_rewardarr();

  // @@protoc_insertion_point(class_scope:pb.TBeautyHouseReceiveBoxRewardRsp)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::pb::TCommonReward > rewardarr_;
  friend void  protobuf_AddDesc_net_2fBeautyHouse_2eproto();
  friend void protobuf_AssignDesc_net_2fBeautyHouse_2eproto();
  friend void protobuf_ShutdownFile_net_2fBeautyHouse_2eproto();

  void InitAsDefaultInstance();
  static TBeautyHouseReceiveBoxRewardRsp* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TBeautyHouseSkillUpgradeReq</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/BeautyHouse.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TBeautyHouseSkillUpgradeReq : public ::google::protobuf::Message {
 public:
  TBeautyHouseSkillUpgradeReq();
  virtual ~TBeautyHouseSkillUpgradeReq();

  TBeautyHouseSkillUpgradeReq(const TBeautyHouseSkillUpgradeReq& from);

  inline TBeautyHouseSkillUpgradeReq& operator=(const TBeautyHouseSkillUpgradeReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TBeautyHouseSkillUpgradeReq& default_instance();

  void Swap(TBeautyHouseSkillUpgradeReq* other);

  // implements Message ----------------------------------------------

  TBeautyHouseSkillUpgradeReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TBeautyHouseSkillUpgradeReq& from);
  void MergeFrom(const TBeautyHouseSkillUpgradeReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 Quality = 1;
  inline bool has_quality() const;
  inline void clear_quality();
  static const int kQualityFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TBeautyHouseSkillUpgradeReq</name>
  	<Function>
  		<name>quality</name>
  		<replaceName>Quality</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_quality</name>
  		<replaceName>Quality</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_quality</name>
  		<replaceName>Quality</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 quality() const;
  inline void set_quality(::google::protobuf::uint32 value);

  // optional uint32 Index = 2;
  inline bool has_index() const;
  inline void clear_index();
  static const int kIndexFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TBeautyHouseSkillUpgradeReq</name>
  	<Function>
  		<name>index</name>
  		<replaceName>Index</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_index</name>
  		<replaceName>Index</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_index</name>
  		<replaceName>Index</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 index() const;
  inline void set_index(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:pb.TBeautyHouseSkillUpgradeReq)
 private:
  inline void set_has_quality();
  inline void clear_has_quality();
  inline void set_has_index();
  inline void clear_has_index();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 quality_;
  ::google::protobuf::uint32 index_;
  friend void  protobuf_AddDesc_net_2fBeautyHouse_2eproto();
  friend void protobuf_AssignDesc_net_2fBeautyHouse_2eproto();
  friend void protobuf_ShutdownFile_net_2fBeautyHouse_2eproto();

  void InitAsDefaultInstance();
  static TBeautyHouseSkillUpgradeReq* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TBeautyHouseChangeNotify</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/BeautyHouse.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TBeautyHouseChangeNotify : public ::google::protobuf::Message {
 public:
  TBeautyHouseChangeNotify();
  virtual ~TBeautyHouseChangeNotify();

  TBeautyHouseChangeNotify(const TBeautyHouseChangeNotify& from);

  inline TBeautyHouseChangeNotify& operator=(const TBeautyHouseChangeNotify& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TBeautyHouseChangeNotify& default_instance();

  void Swap(TBeautyHouseChangeNotify* other);

  // implements Message ----------------------------------------------

  TBeautyHouseChangeNotify* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TBeautyHouseChangeNotify& from);
  void MergeFrom(const TBeautyHouseChangeNotify& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .pb.TBeautyHouseBeautyInfo Beauty = 1;
  inline bool has_beauty() const;
  inline void clear_beauty();
  static const int kBeautyFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TBeautyHouseChangeNotify</name>
  	<Function>
  		<name>beauty</name>
  		<replaceName>Beauty</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_beauty</name>
  		<replaceName>Beauty</replaceName>
  		<handler>descripter = pb_set_message_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_allocated_beauty</name>
  		<replaceName>Beauty</replaceName>
  		<handler>descripter = pb_set_message_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_beauty</name>
  		<replaceName>Beauty</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TBeautyHouseBeautyInfo& beauty() const;
  inline ::pb::TBeautyHouseBeautyInfo* mutable_beauty();
  inline ::pb::TBeautyHouseBeautyInfo* release_beauty();
  inline void set_allocated_beauty(::pb::TBeautyHouseBeautyInfo* beauty);

  // optional .pb.TBeautyHouseCharmValueInfo CharmValueInfo = 2;
  inline bool has_charmvalueinfo() const;
  inline void clear_charmvalueinfo();
  static const int kCharmValueInfoFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TBeautyHouseChangeNotify</name>
  	<Function>
  		<name>charmvalueinfo</name>
  		<replaceName>CharmValueInfo</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_charmvalueinfo</name>
  		<replaceName>CharmValueInfo</replaceName>
  		<handler>descripter = pb_set_message_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_allocated_charmvalueinfo</name>
  		<replaceName>CharmValueInfo</replaceName>
  		<handler>descripter = pb_set_message_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_charmvalueinfo</name>
  		<replaceName>CharmValueInfo</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TBeautyHouseCharmValueInfo& charmvalueinfo() const;
  inline ::pb::TBeautyHouseCharmValueInfo* mutable_charmvalueinfo();
  inline ::pb::TBeautyHouseCharmValueInfo* release_charmvalueinfo();
  inline void set_allocated_charmvalueinfo(::pb::TBeautyHouseCharmValueInfo* charmvalueinfo);

  // optional .pb.TBeautyHouseSkillInfo SkillInfo = 3;
  inline bool has_skillinfo() const;
  inline void clear_skillinfo();
  static const int kSkillInfoFieldNumber = 3;
  /*FOR2LUA
  <Record>
  	<name>TBeautyHouseChangeNotify</name>
  	<Function>
  		<name>skillinfo</name>
  		<replaceName>SkillInfo</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_skillinfo</name>
  		<replaceName>SkillInfo</replaceName>
  		<handler>descripter = pb_set_message_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_allocated_skillinfo</name>
  		<replaceName>SkillInfo</replaceName>
  		<handler>descripter = pb_set_message_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_skillinfo</name>
  		<replaceName>SkillInfo</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TBeautyHouseSkillInfo& skillinfo() const;
  inline ::pb::TBeautyHouseSkillInfo* mutable_skillinfo();
  inline ::pb::TBeautyHouseSkillInfo* release_skillinfo();
  inline void set_allocated_skillinfo(::pb::TBeautyHouseSkillInfo* skillinfo);

  // @@protoc_insertion_point(class_scope:pb.TBeautyHouseChangeNotify)
 private:
  inline void set_has_beauty();
  inline void clear_has_beauty();
  inline void set_has_charmvalueinfo();
  inline void clear_has_charmvalueinfo();
  inline void set_has_skillinfo();
  inline void clear_has_skillinfo();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::pb::TBeautyHouseBeautyInfo* beauty_;
  ::pb::TBeautyHouseCharmValueInfo* charmvalueinfo_;
  ::pb::TBeautyHouseSkillInfo* skillinfo_;
  friend void  protobuf_AddDesc_net_2fBeautyHouse_2eproto();
  friend void protobuf_AssignDesc_net_2fBeautyHouse_2eproto();
  friend void protobuf_ShutdownFile_net_2fBeautyHouse_2eproto();

  void InitAsDefaultInstance();
  static TBeautyHouseChangeNotify* default_instance_;
};
// ===================================================================


// ===================================================================

// TBeautyHouseBeautyInfo

// optional uint32 Bid = 1;
inline bool TBeautyHouseBeautyInfo::has_bid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TBeautyHouseBeautyInfo::set_has_bid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TBeautyHouseBeautyInfo::clear_has_bid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TBeautyHouseBeautyInfo::clear_bid() {
  bid_ = 0u;
  clear_has_bid();
}
inline ::google::protobuf::uint32 TBeautyHouseBeautyInfo::bid() const {
  // @@protoc_insertion_point(field_get:pb.TBeautyHouseBeautyInfo.Bid)
  return bid_;
}
inline void TBeautyHouseBeautyInfo::set_bid(::google::protobuf::uint32 value) {
  set_has_bid();
  bid_ = value;
  // @@protoc_insertion_point(field_set:pb.TBeautyHouseBeautyInfo.Bid)
}

// optional uint32 BeautyLv = 2;
inline bool TBeautyHouseBeautyInfo::has_beautylv() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TBeautyHouseBeautyInfo::set_has_beautylv() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TBeautyHouseBeautyInfo::clear_has_beautylv() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TBeautyHouseBeautyInfo::clear_beautylv() {
  beautylv_ = 0u;
  clear_has_beautylv();
}
inline ::google::protobuf::uint32 TBeautyHouseBeautyInfo::beautylv() const {
  // @@protoc_insertion_point(field_get:pb.TBeautyHouseBeautyInfo.BeautyLv)
  return beautylv_;
}
inline void TBeautyHouseBeautyInfo::set_beautylv(::google::protobuf::uint32 value) {
  set_has_beautylv();
  beautylv_ = value;
  // @@protoc_insertion_point(field_set:pb.TBeautyHouseBeautyInfo.BeautyLv)
}

// optional uint32 IntimateLv = 3;
inline bool TBeautyHouseBeautyInfo::has_intimatelv() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void TBeautyHouseBeautyInfo::set_has_intimatelv() {
  _has_bits_[0] |= 0x00000004u;
}
inline void TBeautyHouseBeautyInfo::clear_has_intimatelv() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void TBeautyHouseBeautyInfo::clear_intimatelv() {
  intimatelv_ = 0u;
  clear_has_intimatelv();
}
inline ::google::protobuf::uint32 TBeautyHouseBeautyInfo::intimatelv() const {
  // @@protoc_insertion_point(field_get:pb.TBeautyHouseBeautyInfo.IntimateLv)
  return intimatelv_;
}
inline void TBeautyHouseBeautyInfo::set_intimatelv(::google::protobuf::uint32 value) {
  set_has_intimatelv();
  intimatelv_ = value;
  // @@protoc_insertion_point(field_set:pb.TBeautyHouseBeautyInfo.IntimateLv)
}

// optional uint32 IntimateExp = 4;
inline bool TBeautyHouseBeautyInfo::has_intimateexp() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void TBeautyHouseBeautyInfo::set_has_intimateexp() {
  _has_bits_[0] |= 0x00000008u;
}
inline void TBeautyHouseBeautyInfo::clear_has_intimateexp() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void TBeautyHouseBeautyInfo::clear_intimateexp() {
  intimateexp_ = 0u;
  clear_has_intimateexp();
}
inline ::google::protobuf::uint32 TBeautyHouseBeautyInfo::intimateexp() const {
  // @@protoc_insertion_point(field_get:pb.TBeautyHouseBeautyInfo.IntimateExp)
  return intimateexp_;
}
inline void TBeautyHouseBeautyInfo::set_intimateexp(::google::protobuf::uint32 value) {
  set_has_intimateexp();
  intimateexp_ = value;
  // @@protoc_insertion_point(field_set:pb.TBeautyHouseBeautyInfo.IntimateExp)
}

// repeated uint32 ReceivedBoxArr = 5;
inline int TBeautyHouseBeautyInfo::receivedboxarr_size() const {
  return receivedboxarr_.size();
}
inline void TBeautyHouseBeautyInfo::clear_receivedboxarr() {
  receivedboxarr_.Clear();
}
inline ::google::protobuf::uint32 TBeautyHouseBeautyInfo::receivedboxarr(int index) const {
  // @@protoc_insertion_point(field_get:pb.TBeautyHouseBeautyInfo.ReceivedBoxArr)
  return receivedboxarr_.Get(index);
}
inline void TBeautyHouseBeautyInfo::set_receivedboxarr(int index, ::google::protobuf::uint32 value) {
  receivedboxarr_.Set(index, value);
  // @@protoc_insertion_point(field_set:pb.TBeautyHouseBeautyInfo.ReceivedBoxArr)
}
inline void TBeautyHouseBeautyInfo::add_receivedboxarr(::google::protobuf::uint32 value) {
  receivedboxarr_.Add(value);
  // @@protoc_insertion_point(field_add:pb.TBeautyHouseBeautyInfo.ReceivedBoxArr)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
TBeautyHouseBeautyInfo::receivedboxarr() const {
  // @@protoc_insertion_point(field_list:pb.TBeautyHouseBeautyInfo.ReceivedBoxArr)
  return receivedboxarr_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
TBeautyHouseBeautyInfo::mutable_receivedboxarr() {
  // @@protoc_insertion_point(field_mutable_list:pb.TBeautyHouseBeautyInfo.ReceivedBoxArr)
  return &receivedboxarr_;
}

// optional uint32 InteractNum = 6;
inline bool TBeautyHouseBeautyInfo::has_interactnum() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void TBeautyHouseBeautyInfo::set_has_interactnum() {
  _has_bits_[0] |= 0x00000020u;
}
inline void TBeautyHouseBeautyInfo::clear_has_interactnum() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void TBeautyHouseBeautyInfo::clear_interactnum() {
  interactnum_ = 0u;
  clear_has_interactnum();
}
inline ::google::protobuf::uint32 TBeautyHouseBeautyInfo::interactnum() const {
  // @@protoc_insertion_point(field_get:pb.TBeautyHouseBeautyInfo.InteractNum)
  return interactnum_;
}
inline void TBeautyHouseBeautyInfo::set_interactnum(::google::protobuf::uint32 value) {
  set_has_interactnum();
  interactnum_ = value;
  // @@protoc_insertion_point(field_set:pb.TBeautyHouseBeautyInfo.InteractNum)
}

// -------------------------------------------------------------------

// TBeautyHouseCharmValueInfo

// optional uint32 Quality = 1;
inline bool TBeautyHouseCharmValueInfo::has_quality() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TBeautyHouseCharmValueInfo::set_has_quality() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TBeautyHouseCharmValueInfo::clear_has_quality() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TBeautyHouseCharmValueInfo::clear_quality() {
  quality_ = 0u;
  clear_has_quality();
}
inline ::google::protobuf::uint32 TBeautyHouseCharmValueInfo::quality() const {
  // @@protoc_insertion_point(field_get:pb.TBeautyHouseCharmValueInfo.Quality)
  return quality_;
}
inline void TBeautyHouseCharmValueInfo::set_quality(::google::protobuf::uint32 value) {
  set_has_quality();
  quality_ = value;
  // @@protoc_insertion_point(field_set:pb.TBeautyHouseCharmValueInfo.Quality)
}

// optional uint32 CharmValue = 2;
inline bool TBeautyHouseCharmValueInfo::has_charmvalue() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TBeautyHouseCharmValueInfo::set_has_charmvalue() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TBeautyHouseCharmValueInfo::clear_has_charmvalue() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TBeautyHouseCharmValueInfo::clear_charmvalue() {
  charmvalue_ = 0u;
  clear_has_charmvalue();
}
inline ::google::protobuf::uint32 TBeautyHouseCharmValueInfo::charmvalue() const {
  // @@protoc_insertion_point(field_get:pb.TBeautyHouseCharmValueInfo.CharmValue)
  return charmvalue_;
}
inline void TBeautyHouseCharmValueInfo::set_charmvalue(::google::protobuf::uint32 value) {
  set_has_charmvalue();
  charmvalue_ = value;
  // @@protoc_insertion_point(field_set:pb.TBeautyHouseCharmValueInfo.CharmValue)
}

// -------------------------------------------------------------------

// TBeautyHouseSkillInfo

// optional uint32 Quality = 1;
inline bool TBeautyHouseSkillInfo::has_quality() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TBeautyHouseSkillInfo::set_has_quality() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TBeautyHouseSkillInfo::clear_has_quality() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TBeautyHouseSkillInfo::clear_quality() {
  quality_ = 0u;
  clear_has_quality();
}
inline ::google::protobuf::uint32 TBeautyHouseSkillInfo::quality() const {
  // @@protoc_insertion_point(field_get:pb.TBeautyHouseSkillInfo.Quality)
  return quality_;
}
inline void TBeautyHouseSkillInfo::set_quality(::google::protobuf::uint32 value) {
  set_has_quality();
  quality_ = value;
  // @@protoc_insertion_point(field_set:pb.TBeautyHouseSkillInfo.Quality)
}

// optional uint32 SkillIndex = 2;
inline bool TBeautyHouseSkillInfo::has_skillindex() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TBeautyHouseSkillInfo::set_has_skillindex() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TBeautyHouseSkillInfo::clear_has_skillindex() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TBeautyHouseSkillInfo::clear_skillindex() {
  skillindex_ = 0u;
  clear_has_skillindex();
}
inline ::google::protobuf::uint32 TBeautyHouseSkillInfo::skillindex() const {
  // @@protoc_insertion_point(field_get:pb.TBeautyHouseSkillInfo.SkillIndex)
  return skillindex_;
}
inline void TBeautyHouseSkillInfo::set_skillindex(::google::protobuf::uint32 value) {
  set_has_skillindex();
  skillindex_ = value;
  // @@protoc_insertion_point(field_set:pb.TBeautyHouseSkillInfo.SkillIndex)
}

// optional uint32 SkillLv = 3;
inline bool TBeautyHouseSkillInfo::has_skilllv() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void TBeautyHouseSkillInfo::set_has_skilllv() {
  _has_bits_[0] |= 0x00000004u;
}
inline void TBeautyHouseSkillInfo::clear_has_skilllv() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void TBeautyHouseSkillInfo::clear_skilllv() {
  skilllv_ = 0u;
  clear_has_skilllv();
}
inline ::google::protobuf::uint32 TBeautyHouseSkillInfo::skilllv() const {
  // @@protoc_insertion_point(field_get:pb.TBeautyHouseSkillInfo.SkillLv)
  return skilllv_;
}
inline void TBeautyHouseSkillInfo::set_skilllv(::google::protobuf::uint32 value) {
  set_has_skilllv();
  skilllv_ = value;
  // @@protoc_insertion_point(field_set:pb.TBeautyHouseSkillInfo.SkillLv)
}

// -------------------------------------------------------------------

// TBeautyHouseGetInfoRsp

// repeated .pb.TBeautyHouseBeautyInfo BeautyArr = 1;
inline int TBeautyHouseGetInfoRsp::beautyarr_size() const {
  return beautyarr_.size();
}
inline void TBeautyHouseGetInfoRsp::clear_beautyarr() {
  beautyarr_.Clear();
}
inline const ::pb::TBeautyHouseBeautyInfo& TBeautyHouseGetInfoRsp::beautyarr(int index) const {
  // @@protoc_insertion_point(field_get:pb.TBeautyHouseGetInfoRsp.BeautyArr)
  return beautyarr_.Get(index);
}
inline ::pb::TBeautyHouseBeautyInfo* TBeautyHouseGetInfoRsp::mutable_beautyarr(int index) {
  // @@protoc_insertion_point(field_mutable:pb.TBeautyHouseGetInfoRsp.BeautyArr)
  return beautyarr_.Mutable(index);
}
inline ::pb::TBeautyHouseBeautyInfo* TBeautyHouseGetInfoRsp::add_beautyarr() {
  // @@protoc_insertion_point(field_add:pb.TBeautyHouseGetInfoRsp.BeautyArr)
  return beautyarr_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::TBeautyHouseBeautyInfo >&
TBeautyHouseGetInfoRsp::beautyarr() const {
  // @@protoc_insertion_point(field_list:pb.TBeautyHouseGetInfoRsp.BeautyArr)
  return beautyarr_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb::TBeautyHouseBeautyInfo >*
TBeautyHouseGetInfoRsp::mutable_beautyarr() {
  // @@protoc_insertion_point(field_mutable_list:pb.TBeautyHouseGetInfoRsp.BeautyArr)
  return &beautyarr_;
}

// repeated .pb.TBeautyHouseSkillInfo SkillInfo = 2;
inline int TBeautyHouseGetInfoRsp::skillinfo_size() const {
  return skillinfo_.size();
}
inline void TBeautyHouseGetInfoRsp::clear_skillinfo() {
  skillinfo_.Clear();
}
inline const ::pb::TBeautyHouseSkillInfo& TBeautyHouseGetInfoRsp::skillinfo(int index) const {
  // @@protoc_insertion_point(field_get:pb.TBeautyHouseGetInfoRsp.SkillInfo)
  return skillinfo_.Get(index);
}
inline ::pb::TBeautyHouseSkillInfo* TBeautyHouseGetInfoRsp::mutable_skillinfo(int index) {
  // @@protoc_insertion_point(field_mutable:pb.TBeautyHouseGetInfoRsp.SkillInfo)
  return skillinfo_.Mutable(index);
}
inline ::pb::TBeautyHouseSkillInfo* TBeautyHouseGetInfoRsp::add_skillinfo() {
  // @@protoc_insertion_point(field_add:pb.TBeautyHouseGetInfoRsp.SkillInfo)
  return skillinfo_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::TBeautyHouseSkillInfo >&
TBeautyHouseGetInfoRsp::skillinfo() const {
  // @@protoc_insertion_point(field_list:pb.TBeautyHouseGetInfoRsp.SkillInfo)
  return skillinfo_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb::TBeautyHouseSkillInfo >*
TBeautyHouseGetInfoRsp::mutable_skillinfo() {
  // @@protoc_insertion_point(field_mutable_list:pb.TBeautyHouseGetInfoRsp.SkillInfo)
  return &skillinfo_;
}

// repeated .pb.TBeautyHouseCharmValueInfo CharmValue = 3;
inline int TBeautyHouseGetInfoRsp::charmvalue_size() const {
  return charmvalue_.size();
}
inline void TBeautyHouseGetInfoRsp::clear_charmvalue() {
  charmvalue_.Clear();
}
inline const ::pb::TBeautyHouseCharmValueInfo& TBeautyHouseGetInfoRsp::charmvalue(int index) const {
  // @@protoc_insertion_point(field_get:pb.TBeautyHouseGetInfoRsp.CharmValue)
  return charmvalue_.Get(index);
}
inline ::pb::TBeautyHouseCharmValueInfo* TBeautyHouseGetInfoRsp::mutable_charmvalue(int index) {
  // @@protoc_insertion_point(field_mutable:pb.TBeautyHouseGetInfoRsp.CharmValue)
  return charmvalue_.Mutable(index);
}
inline ::pb::TBeautyHouseCharmValueInfo* TBeautyHouseGetInfoRsp::add_charmvalue() {
  // @@protoc_insertion_point(field_add:pb.TBeautyHouseGetInfoRsp.CharmValue)
  return charmvalue_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::TBeautyHouseCharmValueInfo >&
TBeautyHouseGetInfoRsp::charmvalue() const {
  // @@protoc_insertion_point(field_list:pb.TBeautyHouseGetInfoRsp.CharmValue)
  return charmvalue_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb::TBeautyHouseCharmValueInfo >*
TBeautyHouseGetInfoRsp::mutable_charmvalue() {
  // @@protoc_insertion_point(field_mutable_list:pb.TBeautyHouseGetInfoRsp.CharmValue)
  return &charmvalue_;
}

// -------------------------------------------------------------------

// TBeautyHouseBeautyUpgradeReq

// optional uint32 Bid = 1;
inline bool TBeautyHouseBeautyUpgradeReq::has_bid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TBeautyHouseBeautyUpgradeReq::set_has_bid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TBeautyHouseBeautyUpgradeReq::clear_has_bid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TBeautyHouseBeautyUpgradeReq::clear_bid() {
  bid_ = 0u;
  clear_has_bid();
}
inline ::google::protobuf::uint32 TBeautyHouseBeautyUpgradeReq::bid() const {
  // @@protoc_insertion_point(field_get:pb.TBeautyHouseBeautyUpgradeReq.Bid)
  return bid_;
}
inline void TBeautyHouseBeautyUpgradeReq::set_bid(::google::protobuf::uint32 value) {
  set_has_bid();
  bid_ = value;
  // @@protoc_insertion_point(field_set:pb.TBeautyHouseBeautyUpgradeReq.Bid)
}

// -------------------------------------------------------------------

// TBeautyHouseInteractBeautyReq

// optional uint32 Bid = 1;
inline bool TBeautyHouseInteractBeautyReq::has_bid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TBeautyHouseInteractBeautyReq::set_has_bid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TBeautyHouseInteractBeautyReq::clear_has_bid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TBeautyHouseInteractBeautyReq::clear_bid() {
  bid_ = 0u;
  clear_has_bid();
}
inline ::google::protobuf::uint32 TBeautyHouseInteractBeautyReq::bid() const {
  // @@protoc_insertion_point(field_get:pb.TBeautyHouseInteractBeautyReq.Bid)
  return bid_;
}
inline void TBeautyHouseInteractBeautyReq::set_bid(::google::protobuf::uint32 value) {
  set_has_bid();
  bid_ = value;
  // @@protoc_insertion_point(field_set:pb.TBeautyHouseInteractBeautyReq.Bid)
}

// -------------------------------------------------------------------

// TBeautyHouseReceiveBoxRewardReq

// optional uint32 Bid = 1;
inline bool TBeautyHouseReceiveBoxRewardReq::has_bid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TBeautyHouseReceiveBoxRewardReq::set_has_bid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TBeautyHouseReceiveBoxRewardReq::clear_has_bid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TBeautyHouseReceiveBoxRewardReq::clear_bid() {
  bid_ = 0u;
  clear_has_bid();
}
inline ::google::protobuf::uint32 TBeautyHouseReceiveBoxRewardReq::bid() const {
  // @@protoc_insertion_point(field_get:pb.TBeautyHouseReceiveBoxRewardReq.Bid)
  return bid_;
}
inline void TBeautyHouseReceiveBoxRewardReq::set_bid(::google::protobuf::uint32 value) {
  set_has_bid();
  bid_ = value;
  // @@protoc_insertion_point(field_set:pb.TBeautyHouseReceiveBoxRewardReq.Bid)
}

// optional uint32 BoxLv = 2;
inline bool TBeautyHouseReceiveBoxRewardReq::has_boxlv() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TBeautyHouseReceiveBoxRewardReq::set_has_boxlv() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TBeautyHouseReceiveBoxRewardReq::clear_has_boxlv() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TBeautyHouseReceiveBoxRewardReq::clear_boxlv() {
  boxlv_ = 0u;
  clear_has_boxlv();
}
inline ::google::protobuf::uint32 TBeautyHouseReceiveBoxRewardReq::boxlv() const {
  // @@protoc_insertion_point(field_get:pb.TBeautyHouseReceiveBoxRewardReq.BoxLv)
  return boxlv_;
}
inline void TBeautyHouseReceiveBoxRewardReq::set_boxlv(::google::protobuf::uint32 value) {
  set_has_boxlv();
  boxlv_ = value;
  // @@protoc_insertion_point(field_set:pb.TBeautyHouseReceiveBoxRewardReq.BoxLv)
}

// -------------------------------------------------------------------

// TBeautyHouseReceiveBoxRewardRsp

// repeated .pb.TCommonReward RewardArr = 1;
inline int TBeautyHouseReceiveBoxRewardRsp::rewardarr_size() const {
  return rewardarr_.size();
}
inline void TBeautyHouseReceiveBoxRewardRsp::clear_rewardarr() {
  rewardarr_.Clear();
}
inline const ::pb::TCommonReward& TBeautyHouseReceiveBoxRewardRsp::rewardarr(int index) const {
  // @@protoc_insertion_point(field_get:pb.TBeautyHouseReceiveBoxRewardRsp.RewardArr)
  return rewardarr_.Get(index);
}
inline ::pb::TCommonReward* TBeautyHouseReceiveBoxRewardRsp::mutable_rewardarr(int index) {
  // @@protoc_insertion_point(field_mutable:pb.TBeautyHouseReceiveBoxRewardRsp.RewardArr)
  return rewardarr_.Mutable(index);
}
inline ::pb::TCommonReward* TBeautyHouseReceiveBoxRewardRsp::add_rewardarr() {
  // @@protoc_insertion_point(field_add:pb.TBeautyHouseReceiveBoxRewardRsp.RewardArr)
  return rewardarr_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::TCommonReward >&
TBeautyHouseReceiveBoxRewardRsp::rewardarr() const {
  // @@protoc_insertion_point(field_list:pb.TBeautyHouseReceiveBoxRewardRsp.RewardArr)
  return rewardarr_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb::TCommonReward >*
TBeautyHouseReceiveBoxRewardRsp::mutable_rewardarr() {
  // @@protoc_insertion_point(field_mutable_list:pb.TBeautyHouseReceiveBoxRewardRsp.RewardArr)
  return &rewardarr_;
}

// -------------------------------------------------------------------

// TBeautyHouseSkillUpgradeReq

// optional uint32 Quality = 1;
inline bool TBeautyHouseSkillUpgradeReq::has_quality() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TBeautyHouseSkillUpgradeReq::set_has_quality() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TBeautyHouseSkillUpgradeReq::clear_has_quality() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TBeautyHouseSkillUpgradeReq::clear_quality() {
  quality_ = 0u;
  clear_has_quality();
}
inline ::google::protobuf::uint32 TBeautyHouseSkillUpgradeReq::quality() const {
  // @@protoc_insertion_point(field_get:pb.TBeautyHouseSkillUpgradeReq.Quality)
  return quality_;
}
inline void TBeautyHouseSkillUpgradeReq::set_quality(::google::protobuf::uint32 value) {
  set_has_quality();
  quality_ = value;
  // @@protoc_insertion_point(field_set:pb.TBeautyHouseSkillUpgradeReq.Quality)
}

// optional uint32 Index = 2;
inline bool TBeautyHouseSkillUpgradeReq::has_index() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TBeautyHouseSkillUpgradeReq::set_has_index() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TBeautyHouseSkillUpgradeReq::clear_has_index() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TBeautyHouseSkillUpgradeReq::clear_index() {
  index_ = 0u;
  clear_has_index();
}
inline ::google::protobuf::uint32 TBeautyHouseSkillUpgradeReq::index() const {
  // @@protoc_insertion_point(field_get:pb.TBeautyHouseSkillUpgradeReq.Index)
  return index_;
}
inline void TBeautyHouseSkillUpgradeReq::set_index(::google::protobuf::uint32 value) {
  set_has_index();
  index_ = value;
  // @@protoc_insertion_point(field_set:pb.TBeautyHouseSkillUpgradeReq.Index)
}

// -------------------------------------------------------------------

// TBeautyHouseChangeNotify

// optional .pb.TBeautyHouseBeautyInfo Beauty = 1;
inline bool TBeautyHouseChangeNotify::has_beauty() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TBeautyHouseChangeNotify::set_has_beauty() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TBeautyHouseChangeNotify::clear_has_beauty() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TBeautyHouseChangeNotify::clear_beauty() {
  if (beauty_ != NULL) beauty_->::pb::TBeautyHouseBeautyInfo::Clear();
  clear_has_beauty();
}
inline const ::pb::TBeautyHouseBeautyInfo& TBeautyHouseChangeNotify::beauty() const {
  // @@protoc_insertion_point(field_get:pb.TBeautyHouseChangeNotify.Beauty)
  return beauty_ != NULL ? *beauty_ : *default_instance_->beauty_;
}
inline ::pb::TBeautyHouseBeautyInfo* TBeautyHouseChangeNotify::mutable_beauty() {
  set_has_beauty();
  if (beauty_ == NULL) beauty_ = new ::pb::TBeautyHouseBeautyInfo;
  // @@protoc_insertion_point(field_mutable:pb.TBeautyHouseChangeNotify.Beauty)
  return beauty_;
}
inline ::pb::TBeautyHouseBeautyInfo* TBeautyHouseChangeNotify::release_beauty() {
  clear_has_beauty();
  ::pb::TBeautyHouseBeautyInfo* temp = beauty_;
  beauty_ = NULL;
  return temp;
}
inline void TBeautyHouseChangeNotify::set_allocated_beauty(::pb::TBeautyHouseBeautyInfo* beauty) {
  delete beauty_;
  beauty_ = beauty;
  if (beauty) {
    set_has_beauty();
  } else {
    clear_has_beauty();
  }
  // @@protoc_insertion_point(field_set_allocated:pb.TBeautyHouseChangeNotify.Beauty)
}

// optional .pb.TBeautyHouseCharmValueInfo CharmValueInfo = 2;
inline bool TBeautyHouseChangeNotify::has_charmvalueinfo() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TBeautyHouseChangeNotify::set_has_charmvalueinfo() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TBeautyHouseChangeNotify::clear_has_charmvalueinfo() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TBeautyHouseChangeNotify::clear_charmvalueinfo() {
  if (charmvalueinfo_ != NULL) charmvalueinfo_->::pb::TBeautyHouseCharmValueInfo::Clear();
  clear_has_charmvalueinfo();
}
inline const ::pb::TBeautyHouseCharmValueInfo& TBeautyHouseChangeNotify::charmvalueinfo() const {
  // @@protoc_insertion_point(field_get:pb.TBeautyHouseChangeNotify.CharmValueInfo)
  return charmvalueinfo_ != NULL ? *charmvalueinfo_ : *default_instance_->charmvalueinfo_;
}
inline ::pb::TBeautyHouseCharmValueInfo* TBeautyHouseChangeNotify::mutable_charmvalueinfo() {
  set_has_charmvalueinfo();
  if (charmvalueinfo_ == NULL) charmvalueinfo_ = new ::pb::TBeautyHouseCharmValueInfo;
  // @@protoc_insertion_point(field_mutable:pb.TBeautyHouseChangeNotify.CharmValueInfo)
  return charmvalueinfo_;
}
inline ::pb::TBeautyHouseCharmValueInfo* TBeautyHouseChangeNotify::release_charmvalueinfo() {
  clear_has_charmvalueinfo();
  ::pb::TBeautyHouseCharmValueInfo* temp = charmvalueinfo_;
  charmvalueinfo_ = NULL;
  return temp;
}
inline void TBeautyHouseChangeNotify::set_allocated_charmvalueinfo(::pb::TBeautyHouseCharmValueInfo* charmvalueinfo) {
  delete charmvalueinfo_;
  charmvalueinfo_ = charmvalueinfo;
  if (charmvalueinfo) {
    set_has_charmvalueinfo();
  } else {
    clear_has_charmvalueinfo();
  }
  // @@protoc_insertion_point(field_set_allocated:pb.TBeautyHouseChangeNotify.CharmValueInfo)
}

// optional .pb.TBeautyHouseSkillInfo SkillInfo = 3;
inline bool TBeautyHouseChangeNotify::has_skillinfo() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void TBeautyHouseChangeNotify::set_has_skillinfo() {
  _has_bits_[0] |= 0x00000004u;
}
inline void TBeautyHouseChangeNotify::clear_has_skillinfo() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void TBeautyHouseChangeNotify::clear_skillinfo() {
  if (skillinfo_ != NULL) skillinfo_->::pb::TBeautyHouseSkillInfo::Clear();
  clear_has_skillinfo();
}
inline const ::pb::TBeautyHouseSkillInfo& TBeautyHouseChangeNotify::skillinfo() const {
  // @@protoc_insertion_point(field_get:pb.TBeautyHouseChangeNotify.SkillInfo)
  return skillinfo_ != NULL ? *skillinfo_ : *default_instance_->skillinfo_;
}
inline ::pb::TBeautyHouseSkillInfo* TBeautyHouseChangeNotify::mutable_skillinfo() {
  set_has_skillinfo();
  if (skillinfo_ == NULL) skillinfo_ = new ::pb::TBeautyHouseSkillInfo;
  // @@protoc_insertion_point(field_mutable:pb.TBeautyHouseChangeNotify.SkillInfo)
  return skillinfo_;
}
inline ::pb::TBeautyHouseSkillInfo* TBeautyHouseChangeNotify::release_skillinfo() {
  clear_has_skillinfo();
  ::pb::TBeautyHouseSkillInfo* temp = skillinfo_;
  skillinfo_ = NULL;
  return temp;
}
inline void TBeautyHouseChangeNotify::set_allocated_skillinfo(::pb::TBeautyHouseSkillInfo* skillinfo) {
  delete skillinfo_;
  skillinfo_ = skillinfo;
  if (skillinfo) {
    set_has_skillinfo();
  } else {
    clear_has_skillinfo();
  }
  // @@protoc_insertion_point(field_set_allocated:pb.TBeautyHouseChangeNotify.SkillInfo)
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace pb

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_net_2fBeautyHouse_2eproto__INCLUDED
