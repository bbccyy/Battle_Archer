// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: net/ChatFrame.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "net/ChatFrame.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace pb {

namespace {

const ::google::protobuf::Descriptor* TChatFrameGetInfoRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TChatFrameGetInfoRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* TChatFrameSetChatFrameReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TChatFrameSetChatFrameReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* TChatFrameChangeNotify_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TChatFrameChangeNotify_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_net_2fChatFrame_2eproto() {
  protobuf_AddDesc_net_2fChatFrame_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "net/ChatFrame.proto");
  GOOGLE_CHECK(file != NULL);
  TChatFrameGetInfoRsp_descriptor_ = file->message_type(0);
  static const int TChatFrameGetInfoRsp_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TChatFrameGetInfoRsp, activechatframearray_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TChatFrameGetInfoRsp, nowusedchatframetid_),
  };
  TChatFrameGetInfoRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TChatFrameGetInfoRsp_descriptor_,
      TChatFrameGetInfoRsp::default_instance_,
      TChatFrameGetInfoRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TChatFrameGetInfoRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TChatFrameGetInfoRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TChatFrameGetInfoRsp));
  TChatFrameSetChatFrameReq_descriptor_ = file->message_type(1);
  static const int TChatFrameSetChatFrameReq_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TChatFrameSetChatFrameReq, chatframetid_),
  };
  TChatFrameSetChatFrameReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TChatFrameSetChatFrameReq_descriptor_,
      TChatFrameSetChatFrameReq::default_instance_,
      TChatFrameSetChatFrameReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TChatFrameSetChatFrameReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TChatFrameSetChatFrameReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TChatFrameSetChatFrameReq));
  TChatFrameChangeNotify_descriptor_ = file->message_type(2);
  static const int TChatFrameChangeNotify_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TChatFrameChangeNotify, nowusedchatframetid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TChatFrameChangeNotify, activechatframetid_),
  };
  TChatFrameChangeNotify_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TChatFrameChangeNotify_descriptor_,
      TChatFrameChangeNotify::default_instance_,
      TChatFrameChangeNotify_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TChatFrameChangeNotify, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TChatFrameChangeNotify, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TChatFrameChangeNotify));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_net_2fChatFrame_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TChatFrameGetInfoRsp_descriptor_, &TChatFrameGetInfoRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TChatFrameSetChatFrameReq_descriptor_, &TChatFrameSetChatFrameReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TChatFrameChangeNotify_descriptor_, &TChatFrameChangeNotify::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_net_2fChatFrame_2eproto() {
  delete TChatFrameGetInfoRsp::default_instance_;
  delete TChatFrameGetInfoRsp_reflection_;
  delete TChatFrameSetChatFrameReq::default_instance_;
  delete TChatFrameSetChatFrameReq_reflection_;
  delete TChatFrameChangeNotify::default_instance_;
  delete TChatFrameChangeNotify_reflection_;
}

void protobuf_AddDesc_net_2fChatFrame_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\023net/ChatFrame.proto\022\002pb\"Q\n\024TChatFrameG"
    "etInfoRsp\022\034\n\024ActiveChatFrameArray\030\001 \003(\r\022"
    "\033\n\023NowUsedChatFrameTid\030\002 \001(\r\"1\n\031TChatFra"
    "meSetChatFrameReq\022\024\n\014ChatFrameTid\030\001 \001(\r\""
    "Q\n\026TChatFrameChangeNotify\022\033\n\023NowUsedChat"
    "FrameTid\030\001 \001(\r\022\032\n\022ActiveChatFrameTid\030\002 \001"
    "(\r", 242);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "net/ChatFrame.proto", &protobuf_RegisterTypes);
  TChatFrameGetInfoRsp::default_instance_ = new TChatFrameGetInfoRsp();
  TChatFrameSetChatFrameReq::default_instance_ = new TChatFrameSetChatFrameReq();
  TChatFrameChangeNotify::default_instance_ = new TChatFrameChangeNotify();
  TChatFrameGetInfoRsp::default_instance_->InitAsDefaultInstance();
  TChatFrameSetChatFrameReq::default_instance_->InitAsDefaultInstance();
  TChatFrameChangeNotify::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_net_2fChatFrame_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_net_2fChatFrame_2eproto {
  StaticDescriptorInitializer_net_2fChatFrame_2eproto() {
    protobuf_AddDesc_net_2fChatFrame_2eproto();
  }
} static_descriptor_initializer_net_2fChatFrame_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int TChatFrameGetInfoRsp::kActiveChatFrameArrayFieldNumber;
const int TChatFrameGetInfoRsp::kNowUsedChatFrameTidFieldNumber;
#endif  // !_MSC_VER

TChatFrameGetInfoRsp::TChatFrameGetInfoRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TChatFrameGetInfoRsp)
}

void TChatFrameGetInfoRsp::InitAsDefaultInstance() {
}

TChatFrameGetInfoRsp::TChatFrameGetInfoRsp(const TChatFrameGetInfoRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TChatFrameGetInfoRsp)
}

void TChatFrameGetInfoRsp::SharedCtor() {
  _cached_size_ = 0;
  nowusedchatframetid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TChatFrameGetInfoRsp::~TChatFrameGetInfoRsp() {
  // @@protoc_insertion_point(destructor:pb.TChatFrameGetInfoRsp)
  SharedDtor();
}

void TChatFrameGetInfoRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TChatFrameGetInfoRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TChatFrameGetInfoRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TChatFrameGetInfoRsp_descriptor_;
}

const TChatFrameGetInfoRsp& TChatFrameGetInfoRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fChatFrame_2eproto();
  return *default_instance_;
}

TChatFrameGetInfoRsp* TChatFrameGetInfoRsp::default_instance_ = NULL;

TChatFrameGetInfoRsp* TChatFrameGetInfoRsp::New() const {
  return new TChatFrameGetInfoRsp;
}

void TChatFrameGetInfoRsp::Clear() {
  nowusedchatframetid_ = 0u;
  activechatframearray_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TChatFrameGetInfoRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TChatFrameGetInfoRsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated uint32 ActiveChatFrameArray = 1;
      case 1: {
        if (tag == 8) {
         parse_ActiveChatFrameArray:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 8, input, this->mutable_activechatframearray())));
        } else if (tag == 10) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_activechatframearray())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(8)) goto parse_ActiveChatFrameArray;
        if (input->ExpectTag(16)) goto parse_NowUsedChatFrameTid;
        break;
      }

      // optional uint32 NowUsedChatFrameTid = 2;
      case 2: {
        if (tag == 16) {
         parse_NowUsedChatFrameTid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &nowusedchatframetid_)));
          set_has_nowusedchatframetid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TChatFrameGetInfoRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TChatFrameGetInfoRsp)
  return false;
#undef DO_
}

void TChatFrameGetInfoRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TChatFrameGetInfoRsp)
  // repeated uint32 ActiveChatFrameArray = 1;
  for (int i = 0; i < this->activechatframearray_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      1, this->activechatframearray(i), output);
  }

  // optional uint32 NowUsedChatFrameTid = 2;
  if (has_nowusedchatframetid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->nowusedchatframetid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TChatFrameGetInfoRsp)
}

::google::protobuf::uint8* TChatFrameGetInfoRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TChatFrameGetInfoRsp)
  // repeated uint32 ActiveChatFrameArray = 1;
  for (int i = 0; i < this->activechatframearray_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(1, this->activechatframearray(i), target);
  }

  // optional uint32 NowUsedChatFrameTid = 2;
  if (has_nowusedchatframetid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->nowusedchatframetid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TChatFrameGetInfoRsp)
  return target;
}

int TChatFrameGetInfoRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // optional uint32 NowUsedChatFrameTid = 2;
    if (has_nowusedchatframetid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->nowusedchatframetid());
    }

  }
  // repeated uint32 ActiveChatFrameArray = 1;
  {
    int data_size = 0;
    for (int i = 0; i < this->activechatframearray_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->activechatframearray(i));
    }
    total_size += 1 * this->activechatframearray_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TChatFrameGetInfoRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TChatFrameGetInfoRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TChatFrameGetInfoRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TChatFrameGetInfoRsp::MergeFrom(const TChatFrameGetInfoRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  activechatframearray_.MergeFrom(from.activechatframearray_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_nowusedchatframetid()) {
      set_nowusedchatframetid(from.nowusedchatframetid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TChatFrameGetInfoRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TChatFrameGetInfoRsp::CopyFrom(const TChatFrameGetInfoRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TChatFrameGetInfoRsp::IsInitialized() const {

  return true;
}

void TChatFrameGetInfoRsp::Swap(TChatFrameGetInfoRsp* other) {
  if (other != this) {
    activechatframearray_.Swap(&other->activechatframearray_);
    std::swap(nowusedchatframetid_, other->nowusedchatframetid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TChatFrameGetInfoRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TChatFrameGetInfoRsp_descriptor_;
  metadata.reflection = TChatFrameGetInfoRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TChatFrameSetChatFrameReq::kChatFrameTidFieldNumber;
#endif  // !_MSC_VER

TChatFrameSetChatFrameReq::TChatFrameSetChatFrameReq()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TChatFrameSetChatFrameReq)
}

void TChatFrameSetChatFrameReq::InitAsDefaultInstance() {
}

TChatFrameSetChatFrameReq::TChatFrameSetChatFrameReq(const TChatFrameSetChatFrameReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TChatFrameSetChatFrameReq)
}

void TChatFrameSetChatFrameReq::SharedCtor() {
  _cached_size_ = 0;
  chatframetid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TChatFrameSetChatFrameReq::~TChatFrameSetChatFrameReq() {
  // @@protoc_insertion_point(destructor:pb.TChatFrameSetChatFrameReq)
  SharedDtor();
}

void TChatFrameSetChatFrameReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TChatFrameSetChatFrameReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TChatFrameSetChatFrameReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TChatFrameSetChatFrameReq_descriptor_;
}

const TChatFrameSetChatFrameReq& TChatFrameSetChatFrameReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fChatFrame_2eproto();
  return *default_instance_;
}

TChatFrameSetChatFrameReq* TChatFrameSetChatFrameReq::default_instance_ = NULL;

TChatFrameSetChatFrameReq* TChatFrameSetChatFrameReq::New() const {
  return new TChatFrameSetChatFrameReq;
}

void TChatFrameSetChatFrameReq::Clear() {
  chatframetid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TChatFrameSetChatFrameReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TChatFrameSetChatFrameReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 ChatFrameTid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &chatframetid_)));
          set_has_chatframetid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TChatFrameSetChatFrameReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TChatFrameSetChatFrameReq)
  return false;
#undef DO_
}

void TChatFrameSetChatFrameReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TChatFrameSetChatFrameReq)
  // optional uint32 ChatFrameTid = 1;
  if (has_chatframetid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->chatframetid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TChatFrameSetChatFrameReq)
}

::google::protobuf::uint8* TChatFrameSetChatFrameReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TChatFrameSetChatFrameReq)
  // optional uint32 ChatFrameTid = 1;
  if (has_chatframetid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->chatframetid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TChatFrameSetChatFrameReq)
  return target;
}

int TChatFrameSetChatFrameReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 ChatFrameTid = 1;
    if (has_chatframetid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->chatframetid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TChatFrameSetChatFrameReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TChatFrameSetChatFrameReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TChatFrameSetChatFrameReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TChatFrameSetChatFrameReq::MergeFrom(const TChatFrameSetChatFrameReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_chatframetid()) {
      set_chatframetid(from.chatframetid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TChatFrameSetChatFrameReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TChatFrameSetChatFrameReq::CopyFrom(const TChatFrameSetChatFrameReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TChatFrameSetChatFrameReq::IsInitialized() const {

  return true;
}

void TChatFrameSetChatFrameReq::Swap(TChatFrameSetChatFrameReq* other) {
  if (other != this) {
    std::swap(chatframetid_, other->chatframetid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TChatFrameSetChatFrameReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TChatFrameSetChatFrameReq_descriptor_;
  metadata.reflection = TChatFrameSetChatFrameReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TChatFrameChangeNotify::kNowUsedChatFrameTidFieldNumber;
const int TChatFrameChangeNotify::kActiveChatFrameTidFieldNumber;
#endif  // !_MSC_VER

TChatFrameChangeNotify::TChatFrameChangeNotify()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TChatFrameChangeNotify)
}

void TChatFrameChangeNotify::InitAsDefaultInstance() {
}

TChatFrameChangeNotify::TChatFrameChangeNotify(const TChatFrameChangeNotify& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TChatFrameChangeNotify)
}

void TChatFrameChangeNotify::SharedCtor() {
  _cached_size_ = 0;
  nowusedchatframetid_ = 0u;
  activechatframetid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TChatFrameChangeNotify::~TChatFrameChangeNotify() {
  // @@protoc_insertion_point(destructor:pb.TChatFrameChangeNotify)
  SharedDtor();
}

void TChatFrameChangeNotify::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TChatFrameChangeNotify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TChatFrameChangeNotify::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TChatFrameChangeNotify_descriptor_;
}

const TChatFrameChangeNotify& TChatFrameChangeNotify::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fChatFrame_2eproto();
  return *default_instance_;
}

TChatFrameChangeNotify* TChatFrameChangeNotify::default_instance_ = NULL;

TChatFrameChangeNotify* TChatFrameChangeNotify::New() const {
  return new TChatFrameChangeNotify;
}

void TChatFrameChangeNotify::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<TChatFrameChangeNotify*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(nowusedchatframetid_, activechatframetid_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TChatFrameChangeNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TChatFrameChangeNotify)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 NowUsedChatFrameTid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &nowusedchatframetid_)));
          set_has_nowusedchatframetid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_ActiveChatFrameTid;
        break;
      }

      // optional uint32 ActiveChatFrameTid = 2;
      case 2: {
        if (tag == 16) {
         parse_ActiveChatFrameTid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &activechatframetid_)));
          set_has_activechatframetid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TChatFrameChangeNotify)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TChatFrameChangeNotify)
  return false;
#undef DO_
}

void TChatFrameChangeNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TChatFrameChangeNotify)
  // optional uint32 NowUsedChatFrameTid = 1;
  if (has_nowusedchatframetid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->nowusedchatframetid(), output);
  }

  // optional uint32 ActiveChatFrameTid = 2;
  if (has_activechatframetid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->activechatframetid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TChatFrameChangeNotify)
}

::google::protobuf::uint8* TChatFrameChangeNotify::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TChatFrameChangeNotify)
  // optional uint32 NowUsedChatFrameTid = 1;
  if (has_nowusedchatframetid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->nowusedchatframetid(), target);
  }

  // optional uint32 ActiveChatFrameTid = 2;
  if (has_activechatframetid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->activechatframetid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TChatFrameChangeNotify)
  return target;
}

int TChatFrameChangeNotify::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 NowUsedChatFrameTid = 1;
    if (has_nowusedchatframetid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->nowusedchatframetid());
    }

    // optional uint32 ActiveChatFrameTid = 2;
    if (has_activechatframetid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->activechatframetid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TChatFrameChangeNotify::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TChatFrameChangeNotify* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TChatFrameChangeNotify*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TChatFrameChangeNotify::MergeFrom(const TChatFrameChangeNotify& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_nowusedchatframetid()) {
      set_nowusedchatframetid(from.nowusedchatframetid());
    }
    if (from.has_activechatframetid()) {
      set_activechatframetid(from.activechatframetid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TChatFrameChangeNotify::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TChatFrameChangeNotify::CopyFrom(const TChatFrameChangeNotify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TChatFrameChangeNotify::IsInitialized() const {

  return true;
}

void TChatFrameChangeNotify::Swap(TChatFrameChangeNotify* other) {
  if (other != this) {
    std::swap(nowusedchatframetid_, other->nowusedchatframetid_);
    std::swap(activechatframetid_, other->activechatframetid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TChatFrameChangeNotify::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TChatFrameChangeNotify_descriptor_;
  metadata.reflection = TChatFrameChangeNotify_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace pb

// @@protoc_insertion_point(global_scope)
