// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: net/CrossChallenge.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "net/CrossChallenge.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace pb {

namespace {

const ::google::protobuf::Descriptor* TCrossChallengeRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TCrossChallengeRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* TCrossChallengeUserInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TCrossChallengeUserInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* TCrossChallengeBattleInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TCrossChallengeBattleInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* TCrossChallengePeriodInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TCrossChallengePeriodInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* TCrossChallengeGetChallengeUserInfoRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TCrossChallengeGetChallengeUserInfoRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* TCrossChallengeGetCurrentPeriodInfoRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TCrossChallengeGetCurrentPeriodInfoRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* TCrossChallengeFormationInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TCrossChallengeFormationInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* TCrossChallengeGetFormationReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TCrossChallengeGetFormationReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* TCrossChallengeGetFormationRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TCrossChallengeGetFormationRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* TCrossChallengeSetFormationReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TCrossChallengeSetFormationReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* TCrossChallengeBattleHeroStatus_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TCrossChallengeBattleHeroStatus_reflection_ = NULL;
const ::google::protobuf::Descriptor* TCrossChallengeBattleSingle_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TCrossChallengeBattleSingle_reflection_ = NULL;
const ::google::protobuf::Descriptor* TCrossChallengeGetBattleInfoReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TCrossChallengeGetBattleInfoReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* TCrossChallengeGetBattleInfoRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TCrossChallengeGetBattleInfoRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* TCrossChallengeGetBattleReportReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TCrossChallengeGetBattleReportReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* TCrossChallengeGetBattleReportRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TCrossChallengeGetBattleReportRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* TCrossChallengeGetRankRewardReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TCrossChallengeGetRankRewardReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* TCrossChallengeGetRankRewardRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TCrossChallengeGetRankRewardRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* TCrossChallengeReportSimpleInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TCrossChallengeReportSimpleInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* TCrossChallengeGetAuditionReportArrRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TCrossChallengeGetAuditionReportArrRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* TCrossChallengeGuessInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TCrossChallengeGuessInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* TCrossChallengeGetGuessInfoRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TCrossChallengeGetGuessInfoRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* TCrossChallengeGetCurrentGuessInfoRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TCrossChallengeGetCurrentGuessInfoRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* TCrossChallengeGuessingReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TCrossChallengeGuessingReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* TCrossChallengeGetGuessRewardReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TCrossChallengeGetGuessRewardReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* TCrossChallengeGetGuessRewardRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TCrossChallengeGetGuessRewardRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* TCrossChallengeGuessingRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TCrossChallengeGuessingRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* TCrossChallengeBattleArmy_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TCrossChallengeBattleArmy_reflection_ = NULL;
const ::google::protobuf::Descriptor* TCrossChallengeBattleArmyArr_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TCrossChallengeBattleArmyArr_reflection_ = NULL;
const ::google::protobuf::Descriptor* TCrossChallengeGetUserArrFromArenaReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TCrossChallengeGetUserArrFromArenaReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* TCrossChallengeGetUserArrFromArenaRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TCrossChallengeGetUserArrFromArenaRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* TCrossChallengeGetBattleUserArrReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TCrossChallengeGetBattleUserArrReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* TCrossChallengeGetBattleUserArrRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TCrossChallengeGetBattleUserArrRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* TCrossChallengeAuditionSingle_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TCrossChallengeAuditionSingle_reflection_ = NULL;
const ::google::protobuf::Descriptor* TCrossChallengeAuditionUser_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TCrossChallengeAuditionUser_reflection_ = NULL;
const ::google::protobuf::Descriptor* TCrossChallengeAuditionNotifyReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TCrossChallengeAuditionNotifyReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* TCrossChallengeBattleUser_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TCrossChallengeBattleUser_reflection_ = NULL;
const ::google::protobuf::Descriptor* TCrossChallengeStepBattleNotifyReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TCrossChallengeStepBattleNotifyReq_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* EChallengeStep_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* EChallengeBattleStatus_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* EChallengeGuessStatus_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_net_2fCrossChallenge_2eproto() {
  protobuf_AddDesc_net_2fCrossChallenge_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "net/CrossChallenge.proto");
  GOOGLE_CHECK(file != NULL);
  TCrossChallengeRsp_descriptor_ = file->message_type(0);
  static const int TCrossChallengeRsp_offsets_[11] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCrossChallengeRsp, seasonbegintime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCrossChallengeRsp, step_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCrossChallengeRsp, rank_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCrossChallengeRsp, islose_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCrossChallengeRsp, isopen_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCrossChallengeRsp, isinaudition_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCrossChallengeRsp, isrankrewarded_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCrossChallengeRsp, hasguessreward_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCrossChallengeRsp, hasauditionreport_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCrossChallengeRsp, serverteamid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCrossChallengeRsp, rankrewardconfid_),
  };
  TCrossChallengeRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TCrossChallengeRsp_descriptor_,
      TCrossChallengeRsp::default_instance_,
      TCrossChallengeRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCrossChallengeRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCrossChallengeRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TCrossChallengeRsp));
  TCrossChallengeUserInfo_descriptor_ = file->message_type(1);
  static const int TCrossChallengeUserInfo_offsets_[10] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCrossChallengeUserInfo, uid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCrossChallengeUserInfo, uname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCrossChallengeUserInfo, playermodelhtid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCrossChallengeUserInfo, playerimageframetid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCrossChallengeUserInfo, level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCrossChallengeUserInfo, viplv_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCrossChallengeUserInfo, guildid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCrossChallengeUserInfo, guildname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCrossChallengeUserInfo, isshowvip_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCrossChallengeUserInfo, serverid_),
  };
  TCrossChallengeUserInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TCrossChallengeUserInfo_descriptor_,
      TCrossChallengeUserInfo::default_instance_,
      TCrossChallengeUserInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCrossChallengeUserInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCrossChallengeUserInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TCrossChallengeUserInfo));
  TCrossChallengeBattleInfo_descriptor_ = file->message_type(2);
  static const int TCrossChallengeBattleInfo_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCrossChallengeBattleInfo, teamid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCrossChallengeBattleInfo, pos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCrossChallengeBattleInfo, uid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCrossChallengeBattleInfo, ridarr_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCrossChallengeBattleInfo, status_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCrossChallengeBattleInfo, fightforce_),
  };
  TCrossChallengeBattleInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TCrossChallengeBattleInfo_descriptor_,
      TCrossChallengeBattleInfo::default_instance_,
      TCrossChallengeBattleInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCrossChallengeBattleInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCrossChallengeBattleInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TCrossChallengeBattleInfo));
  TCrossChallengePeriodInfo_descriptor_ = file->message_type(3);
  static const int TCrossChallengePeriodInfo_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCrossChallengePeriodInfo, step_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCrossChallengePeriodInfo, periodinfo_),
  };
  TCrossChallengePeriodInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TCrossChallengePeriodInfo_descriptor_,
      TCrossChallengePeriodInfo::default_instance_,
      TCrossChallengePeriodInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCrossChallengePeriodInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCrossChallengePeriodInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TCrossChallengePeriodInfo));
  TCrossChallengeGetChallengeUserInfoRsp_descriptor_ = file->message_type(4);
  static const int TCrossChallengeGetChallengeUserInfoRsp_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCrossChallengeGetChallengeUserInfoRsp, teamid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCrossChallengeGetChallengeUserInfoRsp, periodinfoarr_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCrossChallengeGetChallengeUserInfoRsp, userarr_),
  };
  TCrossChallengeGetChallengeUserInfoRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TCrossChallengeGetChallengeUserInfoRsp_descriptor_,
      TCrossChallengeGetChallengeUserInfoRsp::default_instance_,
      TCrossChallengeGetChallengeUserInfoRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCrossChallengeGetChallengeUserInfoRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCrossChallengeGetChallengeUserInfoRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TCrossChallengeGetChallengeUserInfoRsp));
  TCrossChallengeGetCurrentPeriodInfoRsp_descriptor_ = file->message_type(5);
  static const int TCrossChallengeGetCurrentPeriodInfoRsp_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCrossChallengeGetCurrentPeriodInfoRsp, periodinfo_),
  };
  TCrossChallengeGetCurrentPeriodInfoRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TCrossChallengeGetCurrentPeriodInfoRsp_descriptor_,
      TCrossChallengeGetCurrentPeriodInfoRsp::default_instance_,
      TCrossChallengeGetCurrentPeriodInfoRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCrossChallengeGetCurrentPeriodInfoRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCrossChallengeGetCurrentPeriodInfoRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TCrossChallengeGetCurrentPeriodInfoRsp));
  TCrossChallengeFormationInfo_descriptor_ = file->message_type(6);
  static const int TCrossChallengeFormationInfo_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCrossChallengeFormationInfo, formationid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCrossChallengeFormationInfo, unitarr_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCrossChallengeFormationInfo, fightforce_),
  };
  TCrossChallengeFormationInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TCrossChallengeFormationInfo_descriptor_,
      TCrossChallengeFormationInfo::default_instance_,
      TCrossChallengeFormationInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCrossChallengeFormationInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCrossChallengeFormationInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TCrossChallengeFormationInfo));
  TCrossChallengeGetFormationReq_descriptor_ = file->message_type(7);
  static const int TCrossChallengeGetFormationReq_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCrossChallengeGetFormationReq, step_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCrossChallengeGetFormationReq, uid_),
  };
  TCrossChallengeGetFormationReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TCrossChallengeGetFormationReq_descriptor_,
      TCrossChallengeGetFormationReq::default_instance_,
      TCrossChallengeGetFormationReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCrossChallengeGetFormationReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCrossChallengeGetFormationReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TCrossChallengeGetFormationReq));
  TCrossChallengeGetFormationRsp_descriptor_ = file->message_type(8);
  static const int TCrossChallengeGetFormationRsp_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCrossChallengeGetFormationRsp, uname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCrossChallengeGetFormationRsp, fightforce_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCrossChallengeGetFormationRsp, formationarr_),
  };
  TCrossChallengeGetFormationRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TCrossChallengeGetFormationRsp_descriptor_,
      TCrossChallengeGetFormationRsp::default_instance_,
      TCrossChallengeGetFormationRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCrossChallengeGetFormationRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCrossChallengeGetFormationRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TCrossChallengeGetFormationRsp));
  TCrossChallengeSetFormationReq_descriptor_ = file->message_type(9);
  static const int TCrossChallengeSetFormationReq_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCrossChallengeSetFormationReq, formationarr_),
  };
  TCrossChallengeSetFormationReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TCrossChallengeSetFormationReq_descriptor_,
      TCrossChallengeSetFormationReq::default_instance_,
      TCrossChallengeSetFormationReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCrossChallengeSetFormationReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCrossChallengeSetFormationReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TCrossChallengeSetFormationReq));
  TCrossChallengeBattleHeroStatus_descriptor_ = file->message_type(10);
  static const int TCrossChallengeBattleHeroStatus_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCrossChallengeBattleHeroStatus, htid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCrossChallengeBattleHeroStatus, pos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCrossChallengeBattleHeroStatus, iskilled_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCrossChallengeBattleHeroStatus, level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCrossChallengeBattleHeroStatus, starlv_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCrossChallengeBattleHeroStatus, hid_),
  };
  TCrossChallengeBattleHeroStatus_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TCrossChallengeBattleHeroStatus_descriptor_,
      TCrossChallengeBattleHeroStatus::default_instance_,
      TCrossChallengeBattleHeroStatus_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCrossChallengeBattleHeroStatus, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCrossChallengeBattleHeroStatus, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TCrossChallengeBattleHeroStatus));
  TCrossChallengeBattleSingle_descriptor_ = file->message_type(11);
  static const int TCrossChallengeBattleSingle_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCrossChallengeBattleSingle, formationid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCrossChallengeBattleSingle, atkheroinfoarr_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCrossChallengeBattleSingle, defheroinfoarr_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCrossChallengeBattleSingle, isatkwin_),
  };
  TCrossChallengeBattleSingle_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TCrossChallengeBattleSingle_descriptor_,
      TCrossChallengeBattleSingle::default_instance_,
      TCrossChallengeBattleSingle_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCrossChallengeBattleSingle, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCrossChallengeBattleSingle, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TCrossChallengeBattleSingle));
  TCrossChallengeGetBattleInfoReq_descriptor_ = file->message_type(12);
  static const int TCrossChallengeGetBattleInfoReq_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCrossChallengeGetBattleInfoReq, ridarr_),
  };
  TCrossChallengeGetBattleInfoReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TCrossChallengeGetBattleInfoReq_descriptor_,
      TCrossChallengeGetBattleInfoReq::default_instance_,
      TCrossChallengeGetBattleInfoReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCrossChallengeGetBattleInfoReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCrossChallengeGetBattleInfoReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TCrossChallengeGetBattleInfoReq));
  TCrossChallengeGetBattleInfoRsp_descriptor_ = file->message_type(13);
  static const int TCrossChallengeGetBattleInfoRsp_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCrossChallengeGetBattleInfoRsp, atkuserinfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCrossChallengeGetBattleInfoRsp, defuserinfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCrossChallengeGetBattleInfoRsp, battleinfoarr_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCrossChallengeGetBattleInfoRsp, atkfightforce_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCrossChallengeGetBattleInfoRsp, deffightforce_),
  };
  TCrossChallengeGetBattleInfoRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TCrossChallengeGetBattleInfoRsp_descriptor_,
      TCrossChallengeGetBattleInfoRsp::default_instance_,
      TCrossChallengeGetBattleInfoRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCrossChallengeGetBattleInfoRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCrossChallengeGetBattleInfoRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TCrossChallengeGetBattleInfoRsp));
  TCrossChallengeGetBattleReportReq_descriptor_ = file->message_type(14);
  static const int TCrossChallengeGetBattleReportReq_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCrossChallengeGetBattleReportReq, ridarr_),
  };
  TCrossChallengeGetBattleReportReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TCrossChallengeGetBattleReportReq_descriptor_,
      TCrossChallengeGetBattleReportReq::default_instance_,
      TCrossChallengeGetBattleReportReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCrossChallengeGetBattleReportReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCrossChallengeGetBattleReportReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TCrossChallengeGetBattleReportReq));
  TCrossChallengeGetBattleReportRsp_descriptor_ = file->message_type(15);
  static const int TCrossChallengeGetBattleReportRsp_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCrossChallengeGetBattleReportRsp, result_),
  };
  TCrossChallengeGetBattleReportRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TCrossChallengeGetBattleReportRsp_descriptor_,
      TCrossChallengeGetBattleReportRsp::default_instance_,
      TCrossChallengeGetBattleReportRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCrossChallengeGetBattleReportRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCrossChallengeGetBattleReportRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TCrossChallengeGetBattleReportRsp));
  TCrossChallengeGetRankRewardReq_descriptor_ = file->message_type(16);
  static const int TCrossChallengeGetRankRewardReq_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCrossChallengeGetRankRewardReq, rankid_),
  };
  TCrossChallengeGetRankRewardReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TCrossChallengeGetRankRewardReq_descriptor_,
      TCrossChallengeGetRankRewardReq::default_instance_,
      TCrossChallengeGetRankRewardReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCrossChallengeGetRankRewardReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCrossChallengeGetRankRewardReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TCrossChallengeGetRankRewardReq));
  TCrossChallengeGetRankRewardRsp_descriptor_ = file->message_type(17);
  static const int TCrossChallengeGetRankRewardRsp_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCrossChallengeGetRankRewardRsp, rewardarr_),
  };
  TCrossChallengeGetRankRewardRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TCrossChallengeGetRankRewardRsp_descriptor_,
      TCrossChallengeGetRankRewardRsp::default_instance_,
      TCrossChallengeGetRankRewardRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCrossChallengeGetRankRewardRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCrossChallengeGetRankRewardRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TCrossChallengeGetRankRewardRsp));
  TCrossChallengeReportSimpleInfo_descriptor_ = file->message_type(18);
  static const int TCrossChallengeReportSimpleInfo_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCrossChallengeReportSimpleInfo, ridarr_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCrossChallengeReportSimpleInfo, enemyuserinfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCrossChallengeReportSimpleInfo, iswin_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCrossChallengeReportSimpleInfo, fightforce_),
  };
  TCrossChallengeReportSimpleInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TCrossChallengeReportSimpleInfo_descriptor_,
      TCrossChallengeReportSimpleInfo::default_instance_,
      TCrossChallengeReportSimpleInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCrossChallengeReportSimpleInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCrossChallengeReportSimpleInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TCrossChallengeReportSimpleInfo));
  TCrossChallengeGetAuditionReportArrRsp_descriptor_ = file->message_type(19);
  static const int TCrossChallengeGetAuditionReportArrRsp_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCrossChallengeGetAuditionReportArrRsp, reportarr_),
  };
  TCrossChallengeGetAuditionReportArrRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TCrossChallengeGetAuditionReportArrRsp_descriptor_,
      TCrossChallengeGetAuditionReportArrRsp::default_instance_,
      TCrossChallengeGetAuditionReportArrRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCrossChallengeGetAuditionReportArrRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCrossChallengeGetAuditionReportArrRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TCrossChallengeGetAuditionReportArrRsp));
  TCrossChallengeGuessInfo_descriptor_ = file->message_type(20);
  static const int TCrossChallengeGuessInfo_offsets_[10] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCrossChallengeGuessInfo, step_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCrossChallengeGuessInfo, ridarr_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCrossChallengeGuessInfo, atkinfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCrossChallengeGuessInfo, definfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCrossChallengeGuessInfo, atkuser_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCrossChallengeGuessInfo, defuser_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCrossChallengeGuessInfo, guessstatus_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCrossChallengeGuessInfo, atkbetnum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCrossChallengeGuessInfo, defbetnum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCrossChallengeGuessInfo, isreward_),
  };
  TCrossChallengeGuessInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TCrossChallengeGuessInfo_descriptor_,
      TCrossChallengeGuessInfo::default_instance_,
      TCrossChallengeGuessInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCrossChallengeGuessInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCrossChallengeGuessInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TCrossChallengeGuessInfo));
  TCrossChallengeGetGuessInfoRsp_descriptor_ = file->message_type(21);
  static const int TCrossChallengeGetGuessInfoRsp_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCrossChallengeGetGuessInfoRsp, guessarr_),
  };
  TCrossChallengeGetGuessInfoRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TCrossChallengeGetGuessInfoRsp_descriptor_,
      TCrossChallengeGetGuessInfoRsp::default_instance_,
      TCrossChallengeGetGuessInfoRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCrossChallengeGetGuessInfoRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCrossChallengeGetGuessInfoRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TCrossChallengeGetGuessInfoRsp));
  TCrossChallengeGetCurrentGuessInfoRsp_descriptor_ = file->message_type(22);
  static const int TCrossChallengeGetCurrentGuessInfoRsp_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCrossChallengeGetCurrentGuessInfoRsp, guessinfo_),
  };
  TCrossChallengeGetCurrentGuessInfoRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TCrossChallengeGetCurrentGuessInfoRsp_descriptor_,
      TCrossChallengeGetCurrentGuessInfoRsp::default_instance_,
      TCrossChallengeGetCurrentGuessInfoRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCrossChallengeGetCurrentGuessInfoRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCrossChallengeGetCurrentGuessInfoRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TCrossChallengeGetCurrentGuessInfoRsp));
  TCrossChallengeGuessingReq_descriptor_ = file->message_type(23);
  static const int TCrossChallengeGuessingReq_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCrossChallengeGuessingReq, step_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCrossChallengeGuessingReq, uid_),
  };
  TCrossChallengeGuessingReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TCrossChallengeGuessingReq_descriptor_,
      TCrossChallengeGuessingReq::default_instance_,
      TCrossChallengeGuessingReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCrossChallengeGuessingReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCrossChallengeGuessingReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TCrossChallengeGuessingReq));
  TCrossChallengeGetGuessRewardReq_descriptor_ = file->message_type(24);
  static const int TCrossChallengeGetGuessRewardReq_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCrossChallengeGetGuessRewardReq, step_),
  };
  TCrossChallengeGetGuessRewardReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TCrossChallengeGetGuessRewardReq_descriptor_,
      TCrossChallengeGetGuessRewardReq::default_instance_,
      TCrossChallengeGetGuessRewardReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCrossChallengeGetGuessRewardReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCrossChallengeGetGuessRewardReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TCrossChallengeGetGuessRewardReq));
  TCrossChallengeGetGuessRewardRsp_descriptor_ = file->message_type(25);
  static const int TCrossChallengeGetGuessRewardRsp_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCrossChallengeGetGuessRewardRsp, rewardarr_),
  };
  TCrossChallengeGetGuessRewardRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TCrossChallengeGetGuessRewardRsp_descriptor_,
      TCrossChallengeGetGuessRewardRsp::default_instance_,
      TCrossChallengeGetGuessRewardRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCrossChallengeGetGuessRewardRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCrossChallengeGetGuessRewardRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TCrossChallengeGetGuessRewardRsp));
  TCrossChallengeGuessingRsp_descriptor_ = file->message_type(26);
  static const int TCrossChallengeGuessingRsp_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCrossChallengeGuessingRsp, atkbetnum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCrossChallengeGuessingRsp, defbetnum_),
  };
  TCrossChallengeGuessingRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TCrossChallengeGuessingRsp_descriptor_,
      TCrossChallengeGuessingRsp::default_instance_,
      TCrossChallengeGuessingRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCrossChallengeGuessingRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCrossChallengeGuessingRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TCrossChallengeGuessingRsp));
  TCrossChallengeBattleArmy_descriptor_ = file->message_type(27);
  static const int TCrossChallengeBattleArmy_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCrossChallengeBattleArmy, fid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCrossChallengeBattleArmy, armyinfo_),
  };
  TCrossChallengeBattleArmy_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TCrossChallengeBattleArmy_descriptor_,
      TCrossChallengeBattleArmy::default_instance_,
      TCrossChallengeBattleArmy_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCrossChallengeBattleArmy, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCrossChallengeBattleArmy, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TCrossChallengeBattleArmy));
  TCrossChallengeBattleArmyArr_descriptor_ = file->message_type(28);
  static const int TCrossChallengeBattleArmyArr_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCrossChallengeBattleArmyArr, uid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCrossChallengeBattleArmyArr, armyarr_),
  };
  TCrossChallengeBattleArmyArr_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TCrossChallengeBattleArmyArr_descriptor_,
      TCrossChallengeBattleArmyArr::default_instance_,
      TCrossChallengeBattleArmyArr_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCrossChallengeBattleArmyArr, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCrossChallengeBattleArmyArr, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TCrossChallengeBattleArmyArr));
  TCrossChallengeGetUserArrFromArenaReq_descriptor_ = file->message_type(29);
  static const int TCrossChallengeGetUserArrFromArenaReq_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCrossChallengeGetUserArrFromArenaReq, num_),
  };
  TCrossChallengeGetUserArrFromArenaReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TCrossChallengeGetUserArrFromArenaReq_descriptor_,
      TCrossChallengeGetUserArrFromArenaReq::default_instance_,
      TCrossChallengeGetUserArrFromArenaReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCrossChallengeGetUserArrFromArenaReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCrossChallengeGetUserArrFromArenaReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TCrossChallengeGetUserArrFromArenaReq));
  TCrossChallengeGetUserArrFromArenaRsp_descriptor_ = file->message_type(30);
  static const int TCrossChallengeGetUserArrFromArenaRsp_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCrossChallengeGetUserArrFromArenaRsp, uidarr_),
  };
  TCrossChallengeGetUserArrFromArenaRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TCrossChallengeGetUserArrFromArenaRsp_descriptor_,
      TCrossChallengeGetUserArrFromArenaRsp::default_instance_,
      TCrossChallengeGetUserArrFromArenaRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCrossChallengeGetUserArrFromArenaRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCrossChallengeGetUserArrFromArenaRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TCrossChallengeGetUserArrFromArenaRsp));
  TCrossChallengeGetBattleUserArrReq_descriptor_ = file->message_type(31);
  static const int TCrossChallengeGetBattleUserArrReq_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCrossChallengeGetBattleUserArrReq, step_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCrossChallengeGetBattleUserArrReq, uidarr_),
  };
  TCrossChallengeGetBattleUserArrReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TCrossChallengeGetBattleUserArrReq_descriptor_,
      TCrossChallengeGetBattleUserArrReq::default_instance_,
      TCrossChallengeGetBattleUserArrReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCrossChallengeGetBattleUserArrReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCrossChallengeGetBattleUserArrReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TCrossChallengeGetBattleUserArrReq));
  TCrossChallengeGetBattleUserArrRsp_descriptor_ = file->message_type(32);
  static const int TCrossChallengeGetBattleUserArrRsp_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCrossChallengeGetBattleUserArrRsp, challengearr_),
  };
  TCrossChallengeGetBattleUserArrRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TCrossChallengeGetBattleUserArrRsp_descriptor_,
      TCrossChallengeGetBattleUserArrRsp::default_instance_,
      TCrossChallengeGetBattleUserArrRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCrossChallengeGetBattleUserArrRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCrossChallengeGetBattleUserArrRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TCrossChallengeGetBattleUserArrRsp));
  TCrossChallengeAuditionSingle_descriptor_ = file->message_type(33);
  static const int TCrossChallengeAuditionSingle_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCrossChallengeAuditionSingle, ridarr_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCrossChallengeAuditionSingle, uid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCrossChallengeAuditionSingle, serverid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCrossChallengeAuditionSingle, fightforce_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCrossChallengeAuditionSingle, iswin_),
  };
  TCrossChallengeAuditionSingle_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TCrossChallengeAuditionSingle_descriptor_,
      TCrossChallengeAuditionSingle::default_instance_,
      TCrossChallengeAuditionSingle_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCrossChallengeAuditionSingle, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCrossChallengeAuditionSingle, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TCrossChallengeAuditionSingle));
  TCrossChallengeAuditionUser_descriptor_ = file->message_type(34);
  static const int TCrossChallengeAuditionUser_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCrossChallengeAuditionUser, uid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCrossChallengeAuditionUser, iswin_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCrossChallengeAuditionUser, recordarr_),
  };
  TCrossChallengeAuditionUser_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TCrossChallengeAuditionUser_descriptor_,
      TCrossChallengeAuditionUser::default_instance_,
      TCrossChallengeAuditionUser_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCrossChallengeAuditionUser, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCrossChallengeAuditionUser, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TCrossChallengeAuditionUser));
  TCrossChallengeAuditionNotifyReq_descriptor_ = file->message_type(35);
  static const int TCrossChallengeAuditionNotifyReq_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCrossChallengeAuditionNotifyReq, userrecordarr_),
  };
  TCrossChallengeAuditionNotifyReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TCrossChallengeAuditionNotifyReq_descriptor_,
      TCrossChallengeAuditionNotifyReq::default_instance_,
      TCrossChallengeAuditionNotifyReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCrossChallengeAuditionNotifyReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCrossChallengeAuditionNotifyReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TCrossChallengeAuditionNotifyReq));
  TCrossChallengeBattleUser_descriptor_ = file->message_type(36);
  static const int TCrossChallengeBattleUser_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCrossChallengeBattleUser, uid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCrossChallengeBattleUser, iswin_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCrossChallengeBattleUser, ridarr_),
  };
  TCrossChallengeBattleUser_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TCrossChallengeBattleUser_descriptor_,
      TCrossChallengeBattleUser::default_instance_,
      TCrossChallengeBattleUser_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCrossChallengeBattleUser, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCrossChallengeBattleUser, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TCrossChallengeBattleUser));
  TCrossChallengeStepBattleNotifyReq_descriptor_ = file->message_type(37);
  static const int TCrossChallengeStepBattleNotifyReq_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCrossChallengeStepBattleNotifyReq, step_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCrossChallengeStepBattleNotifyReq, userrecordarr_),
  };
  TCrossChallengeStepBattleNotifyReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TCrossChallengeStepBattleNotifyReq_descriptor_,
      TCrossChallengeStepBattleNotifyReq::default_instance_,
      TCrossChallengeStepBattleNotifyReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCrossChallengeStepBattleNotifyReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCrossChallengeStepBattleNotifyReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TCrossChallengeStepBattleNotifyReq));
  EChallengeStep_descriptor_ = file->enum_type(0);
  EChallengeBattleStatus_descriptor_ = file->enum_type(1);
  EChallengeGuessStatus_descriptor_ = file->enum_type(2);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_net_2fCrossChallenge_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TCrossChallengeRsp_descriptor_, &TCrossChallengeRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TCrossChallengeUserInfo_descriptor_, &TCrossChallengeUserInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TCrossChallengeBattleInfo_descriptor_, &TCrossChallengeBattleInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TCrossChallengePeriodInfo_descriptor_, &TCrossChallengePeriodInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TCrossChallengeGetChallengeUserInfoRsp_descriptor_, &TCrossChallengeGetChallengeUserInfoRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TCrossChallengeGetCurrentPeriodInfoRsp_descriptor_, &TCrossChallengeGetCurrentPeriodInfoRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TCrossChallengeFormationInfo_descriptor_, &TCrossChallengeFormationInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TCrossChallengeGetFormationReq_descriptor_, &TCrossChallengeGetFormationReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TCrossChallengeGetFormationRsp_descriptor_, &TCrossChallengeGetFormationRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TCrossChallengeSetFormationReq_descriptor_, &TCrossChallengeSetFormationReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TCrossChallengeBattleHeroStatus_descriptor_, &TCrossChallengeBattleHeroStatus::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TCrossChallengeBattleSingle_descriptor_, &TCrossChallengeBattleSingle::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TCrossChallengeGetBattleInfoReq_descriptor_, &TCrossChallengeGetBattleInfoReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TCrossChallengeGetBattleInfoRsp_descriptor_, &TCrossChallengeGetBattleInfoRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TCrossChallengeGetBattleReportReq_descriptor_, &TCrossChallengeGetBattleReportReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TCrossChallengeGetBattleReportRsp_descriptor_, &TCrossChallengeGetBattleReportRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TCrossChallengeGetRankRewardReq_descriptor_, &TCrossChallengeGetRankRewardReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TCrossChallengeGetRankRewardRsp_descriptor_, &TCrossChallengeGetRankRewardRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TCrossChallengeReportSimpleInfo_descriptor_, &TCrossChallengeReportSimpleInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TCrossChallengeGetAuditionReportArrRsp_descriptor_, &TCrossChallengeGetAuditionReportArrRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TCrossChallengeGuessInfo_descriptor_, &TCrossChallengeGuessInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TCrossChallengeGetGuessInfoRsp_descriptor_, &TCrossChallengeGetGuessInfoRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TCrossChallengeGetCurrentGuessInfoRsp_descriptor_, &TCrossChallengeGetCurrentGuessInfoRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TCrossChallengeGuessingReq_descriptor_, &TCrossChallengeGuessingReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TCrossChallengeGetGuessRewardReq_descriptor_, &TCrossChallengeGetGuessRewardReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TCrossChallengeGetGuessRewardRsp_descriptor_, &TCrossChallengeGetGuessRewardRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TCrossChallengeGuessingRsp_descriptor_, &TCrossChallengeGuessingRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TCrossChallengeBattleArmy_descriptor_, &TCrossChallengeBattleArmy::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TCrossChallengeBattleArmyArr_descriptor_, &TCrossChallengeBattleArmyArr::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TCrossChallengeGetUserArrFromArenaReq_descriptor_, &TCrossChallengeGetUserArrFromArenaReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TCrossChallengeGetUserArrFromArenaRsp_descriptor_, &TCrossChallengeGetUserArrFromArenaRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TCrossChallengeGetBattleUserArrReq_descriptor_, &TCrossChallengeGetBattleUserArrReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TCrossChallengeGetBattleUserArrRsp_descriptor_, &TCrossChallengeGetBattleUserArrRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TCrossChallengeAuditionSingle_descriptor_, &TCrossChallengeAuditionSingle::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TCrossChallengeAuditionUser_descriptor_, &TCrossChallengeAuditionUser::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TCrossChallengeAuditionNotifyReq_descriptor_, &TCrossChallengeAuditionNotifyReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TCrossChallengeBattleUser_descriptor_, &TCrossChallengeBattleUser::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TCrossChallengeStepBattleNotifyReq_descriptor_, &TCrossChallengeStepBattleNotifyReq::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_net_2fCrossChallenge_2eproto() {
  delete TCrossChallengeRsp::default_instance_;
  delete TCrossChallengeRsp_reflection_;
  delete TCrossChallengeUserInfo::default_instance_;
  delete TCrossChallengeUserInfo_reflection_;
  delete TCrossChallengeBattleInfo::default_instance_;
  delete TCrossChallengeBattleInfo_reflection_;
  delete TCrossChallengePeriodInfo::default_instance_;
  delete TCrossChallengePeriodInfo_reflection_;
  delete TCrossChallengeGetChallengeUserInfoRsp::default_instance_;
  delete TCrossChallengeGetChallengeUserInfoRsp_reflection_;
  delete TCrossChallengeGetCurrentPeriodInfoRsp::default_instance_;
  delete TCrossChallengeGetCurrentPeriodInfoRsp_reflection_;
  delete TCrossChallengeFormationInfo::default_instance_;
  delete TCrossChallengeFormationInfo_reflection_;
  delete TCrossChallengeGetFormationReq::default_instance_;
  delete TCrossChallengeGetFormationReq_reflection_;
  delete TCrossChallengeGetFormationRsp::default_instance_;
  delete TCrossChallengeGetFormationRsp_reflection_;
  delete TCrossChallengeSetFormationReq::default_instance_;
  delete TCrossChallengeSetFormationReq_reflection_;
  delete TCrossChallengeBattleHeroStatus::default_instance_;
  delete TCrossChallengeBattleHeroStatus_reflection_;
  delete TCrossChallengeBattleSingle::default_instance_;
  delete TCrossChallengeBattleSingle_reflection_;
  delete TCrossChallengeGetBattleInfoReq::default_instance_;
  delete TCrossChallengeGetBattleInfoReq_reflection_;
  delete TCrossChallengeGetBattleInfoRsp::default_instance_;
  delete TCrossChallengeGetBattleInfoRsp_reflection_;
  delete TCrossChallengeGetBattleReportReq::default_instance_;
  delete TCrossChallengeGetBattleReportReq_reflection_;
  delete TCrossChallengeGetBattleReportRsp::default_instance_;
  delete TCrossChallengeGetBattleReportRsp_reflection_;
  delete TCrossChallengeGetRankRewardReq::default_instance_;
  delete TCrossChallengeGetRankRewardReq_reflection_;
  delete TCrossChallengeGetRankRewardRsp::default_instance_;
  delete TCrossChallengeGetRankRewardRsp_reflection_;
  delete TCrossChallengeReportSimpleInfo::default_instance_;
  delete TCrossChallengeReportSimpleInfo_reflection_;
  delete TCrossChallengeGetAuditionReportArrRsp::default_instance_;
  delete TCrossChallengeGetAuditionReportArrRsp_reflection_;
  delete TCrossChallengeGuessInfo::default_instance_;
  delete TCrossChallengeGuessInfo_reflection_;
  delete TCrossChallengeGetGuessInfoRsp::default_instance_;
  delete TCrossChallengeGetGuessInfoRsp_reflection_;
  delete TCrossChallengeGetCurrentGuessInfoRsp::default_instance_;
  delete TCrossChallengeGetCurrentGuessInfoRsp_reflection_;
  delete TCrossChallengeGuessingReq::default_instance_;
  delete TCrossChallengeGuessingReq_reflection_;
  delete TCrossChallengeGetGuessRewardReq::default_instance_;
  delete TCrossChallengeGetGuessRewardReq_reflection_;
  delete TCrossChallengeGetGuessRewardRsp::default_instance_;
  delete TCrossChallengeGetGuessRewardRsp_reflection_;
  delete TCrossChallengeGuessingRsp::default_instance_;
  delete TCrossChallengeGuessingRsp_reflection_;
  delete TCrossChallengeBattleArmy::default_instance_;
  delete TCrossChallengeBattleArmy_reflection_;
  delete TCrossChallengeBattleArmyArr::default_instance_;
  delete TCrossChallengeBattleArmyArr_reflection_;
  delete TCrossChallengeGetUserArrFromArenaReq::default_instance_;
  delete TCrossChallengeGetUserArrFromArenaReq_reflection_;
  delete TCrossChallengeGetUserArrFromArenaRsp::default_instance_;
  delete TCrossChallengeGetUserArrFromArenaRsp_reflection_;
  delete TCrossChallengeGetBattleUserArrReq::default_instance_;
  delete TCrossChallengeGetBattleUserArrReq_reflection_;
  delete TCrossChallengeGetBattleUserArrRsp::default_instance_;
  delete TCrossChallengeGetBattleUserArrRsp_reflection_;
  delete TCrossChallengeAuditionSingle::default_instance_;
  delete TCrossChallengeAuditionSingle_reflection_;
  delete TCrossChallengeAuditionUser::default_instance_;
  delete TCrossChallengeAuditionUser_reflection_;
  delete TCrossChallengeAuditionNotifyReq::default_instance_;
  delete TCrossChallengeAuditionNotifyReq_reflection_;
  delete TCrossChallengeBattleUser::default_instance_;
  delete TCrossChallengeBattleUser_reflection_;
  delete TCrossChallengeStepBattleNotifyReq::default_instance_;
  delete TCrossChallengeStepBattleNotifyReq_reflection_;
}

void protobuf_AddDesc_net_2fCrossChallenge_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::pb::protobuf_AddDesc_net_2fBattle_2eproto();
  ::pb::protobuf_AddDesc_net_2fCommonReward_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\030net/CrossChallenge.proto\022\002pb\032\020net/Batt"
    "le.proto\032\026net/CommonReward.proto\"\216\002\n\022TCr"
    "ossChallengeRsp\022\027\n\017SeasonBeginTime\030\001 \001(\004"
    "\022 \n\004Step\030\002 \001(\0162\022.pb.EChallengeStep\022\014\n\004Ra"
    "nk\030\003 \001(\r\022\016\n\006IsLose\030\004 \001(\r\022\016\n\006IsOpen\030\005 \001(\r"
    "\022\024\n\014IsInAudition\030\006 \001(\r\022\026\n\016IsRankRewarded"
    "\030\007 \001(\r\022\026\n\016HasGuessReward\030\010 \001(\r\022\031\n\021HasAud"
    "itionReport\030\n \001(\r\022\024\n\014ServerTeamId\030\013 \001(\r\022"
    "\030\n\020RankRewardConfId\030\014 \001(\r\"\322\001\n\027TCrossChal"
    "lengeUserInfo\022\013\n\003Uid\030\001 \001(\004\022\r\n\005Uname\030\002 \001("
    "\t\022\027\n\017PlayerModelHtid\030\003 \001(\r\022\033\n\023PlayerImag"
    "eFrameTid\030\004 \001(\r\022\r\n\005Level\030\005 \001(\r\022\r\n\005VipLv\030"
    "\006 \001(\r\022\017\n\007GuildId\030\007 \001(\004\022\021\n\tGuildName\030\010 \001("
    "\t\022\021\n\tIsShowVip\030\t \001(\r\022\020\n\010ServerId\030\n \001(\t\"\225"
    "\001\n\031TCrossChallengeBattleInfo\022\016\n\006TeamId\030\001"
    " \001(\r\022\013\n\003Pos\030\002 \001(\r\022\013\n\003Uid\030\003 \001(\004\022\016\n\006RidArr"
    "\030\004 \003(\004\022*\n\006Status\030\005 \001(\0162\032.pb.EChallengeBa"
    "ttleStatus\022\022\n\nFightForce\030\006 \001(\004\"p\n\031TCross"
    "ChallengePeriodInfo\022 \n\004Step\030\001 \001(\0162\022.pb.E"
    "ChallengeStep\0221\n\nPeriodInfo\030\002 \003(\0132\035.pb.T"
    "CrossChallengeBattleInfo\"\234\001\n&TCrossChall"
    "engeGetChallengeUserInfoRsp\022\016\n\006TeamId\030\001 "
    "\001(\r\0224\n\rPeriodInfoArr\030\002 \003(\0132\035.pb.TCrossCh"
    "allengePeriodInfo\022,\n\007UserArr\030\003 \003(\0132\033.pb."
    "TCrossChallengeUserInfo\"[\n&TCrossChallen"
    "geGetCurrentPeriodInfoRsp\0221\n\nPeriodInfo\030"
    "\001 \001(\0132\035.pb.TCrossChallengePeriodInfo\"}\n\034"
    "TCrossChallengeFormationInfo\022\023\n\013Formatio"
    "nId\030\001 \001(\r\0224\n\007UnitArr\030\002 \003(\0132#.pb.TCrossCh"
    "allengeBattleHeroStatus\022\022\n\nFightForce\030\003 "
    "\001(\004\"O\n\036TCrossChallengeGetFormationReq\022 \n"
    "\004Step\030\001 \001(\0162\022.pb.EChallengeStep\022\013\n\003Uid\030\002"
    " \001(\004\"{\n\036TCrossChallengeGetFormationRsp\022\r"
    "\n\005Uname\030\001 \001(\t\022\022\n\nFightForce\030\002 \001(\004\0226\n\014For"
    "mationArr\030\003 \003(\0132 .pb.TCrossChallengeForm"
    "ationInfo\"X\n\036TCrossChallengeSetFormation"
    "Req\0226\n\014FormationArr\030\001 \003(\0132 .pb.TCrossCha"
    "llengeFormationInfo\"z\n\037TCrossChallengeBa"
    "ttleHeroStatus\022\014\n\004Htid\030\001 \001(\r\022\013\n\003Pos\030\002 \001("
    "\r\022\020\n\010IsKilled\030\003 \001(\r\022\r\n\005Level\030\004 \001(\r\022\016\n\006St"
    "arLv\030\005 \001(\r\022\013\n\003Hid\030\006 \001(\r\"\276\001\n\033TCrossChalle"
    "ngeBattleSingle\022\023\n\013FormationId\030\001 \001(\r\022;\n\016"
    "AtkHeroInfoArr\030\002 \003(\0132#.pb.TCrossChalleng"
    "eBattleHeroStatus\022;\n\016DefHeroInfoArr\030\003 \003("
    "\0132#.pb.TCrossChallengeBattleHeroStatus\022\020"
    "\n\010IsAtkWin\030\004 \001(\r\"1\n\037TCrossChallengeGetBa"
    "ttleInfoReq\022\016\n\006RidArr\030\001 \003(\004\"\353\001\n\037TCrossCh"
    "allengeGetBattleInfoRsp\0220\n\013AtkUserInfo\030\001"
    " \001(\0132\033.pb.TCrossChallengeUserInfo\0220\n\013Def"
    "UserInfo\030\002 \001(\0132\033.pb.TCrossChallengeUserI"
    "nfo\0226\n\rBattleInfoArr\030\003 \003(\0132\037.pb.TCrossCh"
    "allengeBattleSingle\022\025\n\rAtkFightForce\030\004 \001"
    "(\004\022\025\n\rDefFightForce\030\005 \001(\004\"3\n!TCrossChall"
    "engeGetBattleReportReq\022\016\n\006RidArr\030\001 \003(\004\"3"
    "\n!TCrossChallengeGetBattleReportRsp\022\016\n\006R"
    "esult\030\001 \003(\014\"1\n\037TCrossChallengeGetRankRew"
    "ardReq\022\016\n\006RankId\030\001 \001(\r\"G\n\037TCrossChalleng"
    "eGetRankRewardRsp\022$\n\tRewardArr\030\001 \003(\0132\021.p"
    "b.TCommonReward\"\210\001\n\037TCrossChallengeRepor"
    "tSimpleInfo\022\016\n\006RidArr\030\001 \003(\004\0222\n\rEnemyUser"
    "Info\030\002 \001(\0132\033.pb.TCrossChallengeUserInfo\022"
    "\r\n\005IsWin\030\003 \001(\r\022\022\n\nFightForce\030\004 \001(\004\"`\n&TC"
    "rossChallengeGetAuditionReportArrRsp\0226\n\t"
    "ReportArr\030\001 \003(\0132#.pb.TCrossChallengeRepo"
    "rtSimpleInfo\"\360\002\n\030TCrossChallengeGuessInf"
    "o\022 \n\004Step\030\001 \001(\0162\022.pb.EChallengeStep\022\016\n\006R"
    "idArr\030\002 \003(\004\022.\n\007AtkInfo\030\003 \001(\0132\035.pb.TCross"
    "ChallengeBattleInfo\022.\n\007DefInfo\030\004 \001(\0132\035.p"
    "b.TCrossChallengeBattleInfo\022,\n\007AtkUser\030\005"
    " \001(\0132\033.pb.TCrossChallengeUserInfo\022,\n\007Def"
    "User\030\006 \001(\0132\033.pb.TCrossChallengeUserInfo\022"
    ".\n\013GuessStatus\030\007 \001(\0162\031.pb.EChallengeGues"
    "sStatus\022\021\n\tAtkBetNum\030\010 \001(\r\022\021\n\tDefBetNum\030"
    "\t \001(\r\022\020\n\010IsReward\030\n \001(\r\"P\n\036TCrossChallen"
    "geGetGuessInfoRsp\022.\n\010GuessArr\030\001 \003(\0132\034.pb"
    ".TCrossChallengeGuessInfo\"X\n%TCrossChall"
    "engeGetCurrentGuessInfoRsp\022/\n\tGuessInfo\030"
    "\001 \001(\0132\034.pb.TCrossChallengeGuessInfo\"K\n\032T"
    "CrossChallengeGuessingReq\022 \n\004Step\030\001 \001(\0162"
    "\022.pb.EChallengeStep\022\013\n\003Uid\030\002 \001(\004\"D\n TCro"
    "ssChallengeGetGuessRewardReq\022 \n\004Step\030\001 \001"
    "(\0162\022.pb.EChallengeStep\"H\n TCrossChalleng"
    "eGetGuessRewardRsp\022$\n\tRewardArr\030\001 \003(\0132\021."
    "pb.TCommonReward\"B\n\032TCrossChallengeGuess"
    "ingRsp\022\021\n\tAtkBetNum\030\001 \001(\r\022\021\n\tDefBetNum\030\002"
    " \001(\r\"I\n\031TCrossChallengeBattleArmy\022\013\n\003Fid"
    "\030\001 \001(\r\022\037\n\010ArmyInfo\030\002 \001(\0132\r.pb.TArmyInfo\""
    "[\n\034TCrossChallengeBattleArmyArr\022\013\n\003Uid\030\001"
    " \001(\004\022.\n\007ArmyArr\030\002 \003(\0132\035.pb.TCrossChallen"
    "geBattleArmy\"4\n%TCrossChallengeGetUserAr"
    "rFromArenaReq\022\013\n\003Num\030\001 \001(\r\"7\n%TCrossChal"
    "lengeGetUserArrFromArenaRsp\022\016\n\006UidArr\030\001 "
    "\003(\004\"B\n\"TCrossChallengeGetBattleUserArrRe"
    "q\022\014\n\004Step\030\001 \001(\r\022\016\n\006UidArr\030\002 \003(\004\"\\\n\"TCros"
    "sChallengeGetBattleUserArrRsp\0226\n\014Challen"
    "geArr\030\001 \003(\0132 .pb.TCrossChallengeBattleAr"
    "myArr\"q\n\035TCrossChallengeAuditionSingle\022\016"
    "\n\006RidArr\030\001 \003(\004\022\013\n\003Uid\030\002 \001(\004\022\020\n\010ServerId\030"
    "\003 \001(\t\022\022\n\nFightForce\030\004 \001(\004\022\r\n\005IsWin\030\005 \001(\r"
    "\"o\n\033TCrossChallengeAuditionUser\022\013\n\003Uid\030\001"
    " \001(\004\022\r\n\005IsWin\030\002 \001(\r\0224\n\tRecordArr\030\003 \003(\0132!"
    ".pb.TCrossChallengeAuditionSingle\"Z\n TCr"
    "ossChallengeAuditionNotifyReq\0226\n\rUserRec"
    "ordArr\030\001 \003(\0132\037.pb.TCrossChallengeAuditio"
    "nUser\"G\n\031TCrossChallengeBattleUser\022\013\n\003Ui"
    "d\030\001 \001(\004\022\r\n\005IsWin\030\002 \001(\r\022\016\n\006RidArr\030\003 \003(\004\"|"
    "\n\"TCrossChallengeStepBattleNotifyReq\022 \n\004"
    "Step\030\001 \001(\0162\022.pb.EChallengeStep\0224\n\rUserRe"
    "cordArr\030\002 \003(\0132\035.pb.TCrossChallengeBattle"
    "User*\366\001\n\016EChallengeStep\022\016\n\nECountDown\020\001\022"
    "\014\n\010Audition\020\002\022\016\n\nPrepare_64\020\003\022\r\n\tBattle_"
    "64\020\004\022\016\n\nPrepare_32\020\005\022\r\n\tBattle_32\020\006\022\016\n\nP"
    "repare_16\020\007\022\r\n\tBattle_16\020\010\022\r\n\tPrepare_8\020"
    "\t\022\014\n\010Battle_8\020\n\022\r\n\tPrepare_4\020\013\022\014\n\010Battle"
    "_4\020\014\022\021\n\rPrepare_Final\020\r\022\020\n\014Battle_Final\020"
    "\016\022\n\n\006Honour\020\017*I\n\026EChallengeBattleStatus\022"
    "\020\n\014BattleUnOpen\020\000\022\r\n\tBattleWin\020\001\022\016\n\nBatt"
    "leLose\020\002*=\n\025EChallengeGuessStatus\022\014\n\010Not"
    "Guess\020\000\022\n\n\006AtkWin\020\001\022\n\n\006DefWin\020\002", 4751);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "net/CrossChallenge.proto", &protobuf_RegisterTypes);
  TCrossChallengeRsp::default_instance_ = new TCrossChallengeRsp();
  TCrossChallengeUserInfo::default_instance_ = new TCrossChallengeUserInfo();
  TCrossChallengeBattleInfo::default_instance_ = new TCrossChallengeBattleInfo();
  TCrossChallengePeriodInfo::default_instance_ = new TCrossChallengePeriodInfo();
  TCrossChallengeGetChallengeUserInfoRsp::default_instance_ = new TCrossChallengeGetChallengeUserInfoRsp();
  TCrossChallengeGetCurrentPeriodInfoRsp::default_instance_ = new TCrossChallengeGetCurrentPeriodInfoRsp();
  TCrossChallengeFormationInfo::default_instance_ = new TCrossChallengeFormationInfo();
  TCrossChallengeGetFormationReq::default_instance_ = new TCrossChallengeGetFormationReq();
  TCrossChallengeGetFormationRsp::default_instance_ = new TCrossChallengeGetFormationRsp();
  TCrossChallengeSetFormationReq::default_instance_ = new TCrossChallengeSetFormationReq();
  TCrossChallengeBattleHeroStatus::default_instance_ = new TCrossChallengeBattleHeroStatus();
  TCrossChallengeBattleSingle::default_instance_ = new TCrossChallengeBattleSingle();
  TCrossChallengeGetBattleInfoReq::default_instance_ = new TCrossChallengeGetBattleInfoReq();
  TCrossChallengeGetBattleInfoRsp::default_instance_ = new TCrossChallengeGetBattleInfoRsp();
  TCrossChallengeGetBattleReportReq::default_instance_ = new TCrossChallengeGetBattleReportReq();
  TCrossChallengeGetBattleReportRsp::default_instance_ = new TCrossChallengeGetBattleReportRsp();
  TCrossChallengeGetRankRewardReq::default_instance_ = new TCrossChallengeGetRankRewardReq();
  TCrossChallengeGetRankRewardRsp::default_instance_ = new TCrossChallengeGetRankRewardRsp();
  TCrossChallengeReportSimpleInfo::default_instance_ = new TCrossChallengeReportSimpleInfo();
  TCrossChallengeGetAuditionReportArrRsp::default_instance_ = new TCrossChallengeGetAuditionReportArrRsp();
  TCrossChallengeGuessInfo::default_instance_ = new TCrossChallengeGuessInfo();
  TCrossChallengeGetGuessInfoRsp::default_instance_ = new TCrossChallengeGetGuessInfoRsp();
  TCrossChallengeGetCurrentGuessInfoRsp::default_instance_ = new TCrossChallengeGetCurrentGuessInfoRsp();
  TCrossChallengeGuessingReq::default_instance_ = new TCrossChallengeGuessingReq();
  TCrossChallengeGetGuessRewardReq::default_instance_ = new TCrossChallengeGetGuessRewardReq();
  TCrossChallengeGetGuessRewardRsp::default_instance_ = new TCrossChallengeGetGuessRewardRsp();
  TCrossChallengeGuessingRsp::default_instance_ = new TCrossChallengeGuessingRsp();
  TCrossChallengeBattleArmy::default_instance_ = new TCrossChallengeBattleArmy();
  TCrossChallengeBattleArmyArr::default_instance_ = new TCrossChallengeBattleArmyArr();
  TCrossChallengeGetUserArrFromArenaReq::default_instance_ = new TCrossChallengeGetUserArrFromArenaReq();
  TCrossChallengeGetUserArrFromArenaRsp::default_instance_ = new TCrossChallengeGetUserArrFromArenaRsp();
  TCrossChallengeGetBattleUserArrReq::default_instance_ = new TCrossChallengeGetBattleUserArrReq();
  TCrossChallengeGetBattleUserArrRsp::default_instance_ = new TCrossChallengeGetBattleUserArrRsp();
  TCrossChallengeAuditionSingle::default_instance_ = new TCrossChallengeAuditionSingle();
  TCrossChallengeAuditionUser::default_instance_ = new TCrossChallengeAuditionUser();
  TCrossChallengeAuditionNotifyReq::default_instance_ = new TCrossChallengeAuditionNotifyReq();
  TCrossChallengeBattleUser::default_instance_ = new TCrossChallengeBattleUser();
  TCrossChallengeStepBattleNotifyReq::default_instance_ = new TCrossChallengeStepBattleNotifyReq();
  TCrossChallengeRsp::default_instance_->InitAsDefaultInstance();
  TCrossChallengeUserInfo::default_instance_->InitAsDefaultInstance();
  TCrossChallengeBattleInfo::default_instance_->InitAsDefaultInstance();
  TCrossChallengePeriodInfo::default_instance_->InitAsDefaultInstance();
  TCrossChallengeGetChallengeUserInfoRsp::default_instance_->InitAsDefaultInstance();
  TCrossChallengeGetCurrentPeriodInfoRsp::default_instance_->InitAsDefaultInstance();
  TCrossChallengeFormationInfo::default_instance_->InitAsDefaultInstance();
  TCrossChallengeGetFormationReq::default_instance_->InitAsDefaultInstance();
  TCrossChallengeGetFormationRsp::default_instance_->InitAsDefaultInstance();
  TCrossChallengeSetFormationReq::default_instance_->InitAsDefaultInstance();
  TCrossChallengeBattleHeroStatus::default_instance_->InitAsDefaultInstance();
  TCrossChallengeBattleSingle::default_instance_->InitAsDefaultInstance();
  TCrossChallengeGetBattleInfoReq::default_instance_->InitAsDefaultInstance();
  TCrossChallengeGetBattleInfoRsp::default_instance_->InitAsDefaultInstance();
  TCrossChallengeGetBattleReportReq::default_instance_->InitAsDefaultInstance();
  TCrossChallengeGetBattleReportRsp::default_instance_->InitAsDefaultInstance();
  TCrossChallengeGetRankRewardReq::default_instance_->InitAsDefaultInstance();
  TCrossChallengeGetRankRewardRsp::default_instance_->InitAsDefaultInstance();
  TCrossChallengeReportSimpleInfo::default_instance_->InitAsDefaultInstance();
  TCrossChallengeGetAuditionReportArrRsp::default_instance_->InitAsDefaultInstance();
  TCrossChallengeGuessInfo::default_instance_->InitAsDefaultInstance();
  TCrossChallengeGetGuessInfoRsp::default_instance_->InitAsDefaultInstance();
  TCrossChallengeGetCurrentGuessInfoRsp::default_instance_->InitAsDefaultInstance();
  TCrossChallengeGuessingReq::default_instance_->InitAsDefaultInstance();
  TCrossChallengeGetGuessRewardReq::default_instance_->InitAsDefaultInstance();
  TCrossChallengeGetGuessRewardRsp::default_instance_->InitAsDefaultInstance();
  TCrossChallengeGuessingRsp::default_instance_->InitAsDefaultInstance();
  TCrossChallengeBattleArmy::default_instance_->InitAsDefaultInstance();
  TCrossChallengeBattleArmyArr::default_instance_->InitAsDefaultInstance();
  TCrossChallengeGetUserArrFromArenaReq::default_instance_->InitAsDefaultInstance();
  TCrossChallengeGetUserArrFromArenaRsp::default_instance_->InitAsDefaultInstance();
  TCrossChallengeGetBattleUserArrReq::default_instance_->InitAsDefaultInstance();
  TCrossChallengeGetBattleUserArrRsp::default_instance_->InitAsDefaultInstance();
  TCrossChallengeAuditionSingle::default_instance_->InitAsDefaultInstance();
  TCrossChallengeAuditionUser::default_instance_->InitAsDefaultInstance();
  TCrossChallengeAuditionNotifyReq::default_instance_->InitAsDefaultInstance();
  TCrossChallengeBattleUser::default_instance_->InitAsDefaultInstance();
  TCrossChallengeStepBattleNotifyReq::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_net_2fCrossChallenge_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_net_2fCrossChallenge_2eproto {
  StaticDescriptorInitializer_net_2fCrossChallenge_2eproto() {
    protobuf_AddDesc_net_2fCrossChallenge_2eproto();
  }
} static_descriptor_initializer_net_2fCrossChallenge_2eproto_;
const ::google::protobuf::EnumDescriptor* EChallengeStep_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EChallengeStep_descriptor_;
}
bool EChallengeStep_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* EChallengeBattleStatus_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EChallengeBattleStatus_descriptor_;
}
bool EChallengeBattleStatus_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* EChallengeGuessStatus_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EChallengeGuessStatus_descriptor_;
}
bool EChallengeGuessStatus_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#ifndef _MSC_VER
const int TCrossChallengeRsp::kSeasonBeginTimeFieldNumber;
const int TCrossChallengeRsp::kStepFieldNumber;
const int TCrossChallengeRsp::kRankFieldNumber;
const int TCrossChallengeRsp::kIsLoseFieldNumber;
const int TCrossChallengeRsp::kIsOpenFieldNumber;
const int TCrossChallengeRsp::kIsInAuditionFieldNumber;
const int TCrossChallengeRsp::kIsRankRewardedFieldNumber;
const int TCrossChallengeRsp::kHasGuessRewardFieldNumber;
const int TCrossChallengeRsp::kHasAuditionReportFieldNumber;
const int TCrossChallengeRsp::kServerTeamIdFieldNumber;
const int TCrossChallengeRsp::kRankRewardConfIdFieldNumber;
#endif  // !_MSC_VER

TCrossChallengeRsp::TCrossChallengeRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TCrossChallengeRsp)
}

void TCrossChallengeRsp::InitAsDefaultInstance() {
}

TCrossChallengeRsp::TCrossChallengeRsp(const TCrossChallengeRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TCrossChallengeRsp)
}

void TCrossChallengeRsp::SharedCtor() {
  _cached_size_ = 0;
  seasonbegintime_ = GOOGLE_ULONGLONG(0);
  step_ = 1;
  rank_ = 0u;
  islose_ = 0u;
  isopen_ = 0u;
  isinaudition_ = 0u;
  isrankrewarded_ = 0u;
  hasguessreward_ = 0u;
  hasauditionreport_ = 0u;
  serverteamid_ = 0u;
  rankrewardconfid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TCrossChallengeRsp::~TCrossChallengeRsp() {
  // @@protoc_insertion_point(destructor:pb.TCrossChallengeRsp)
  SharedDtor();
}

void TCrossChallengeRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TCrossChallengeRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TCrossChallengeRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TCrossChallengeRsp_descriptor_;
}

const TCrossChallengeRsp& TCrossChallengeRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fCrossChallenge_2eproto();
  return *default_instance_;
}

TCrossChallengeRsp* TCrossChallengeRsp::default_instance_ = NULL;

TCrossChallengeRsp* TCrossChallengeRsp::New() const {
  return new TCrossChallengeRsp;
}

void TCrossChallengeRsp::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<TCrossChallengeRsp*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(rank_, hasguessreward_);
    seasonbegintime_ = GOOGLE_ULONGLONG(0);
    step_ = 1;
  }
  ZR_(hasauditionreport_, rankrewardconfid_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TCrossChallengeRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TCrossChallengeRsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 SeasonBeginTime = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &seasonbegintime_)));
          set_has_seasonbegintime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_Step;
        break;
      }

      // optional .pb.EChallengeStep Step = 2;
      case 2: {
        if (tag == 16) {
         parse_Step:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::pb::EChallengeStep_IsValid(value)) {
            set_step(static_cast< ::pb::EChallengeStep >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_Rank;
        break;
      }

      // optional uint32 Rank = 3;
      case 3: {
        if (tag == 24) {
         parse_Rank:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &rank_)));
          set_has_rank();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_IsLose;
        break;
      }

      // optional uint32 IsLose = 4;
      case 4: {
        if (tag == 32) {
         parse_IsLose:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &islose_)));
          set_has_islose();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_IsOpen;
        break;
      }

      // optional uint32 IsOpen = 5;
      case 5: {
        if (tag == 40) {
         parse_IsOpen:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &isopen_)));
          set_has_isopen();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_IsInAudition;
        break;
      }

      // optional uint32 IsInAudition = 6;
      case 6: {
        if (tag == 48) {
         parse_IsInAudition:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &isinaudition_)));
          set_has_isinaudition();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_IsRankRewarded;
        break;
      }

      // optional uint32 IsRankRewarded = 7;
      case 7: {
        if (tag == 56) {
         parse_IsRankRewarded:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &isrankrewarded_)));
          set_has_isrankrewarded();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_HasGuessReward;
        break;
      }

      // optional uint32 HasGuessReward = 8;
      case 8: {
        if (tag == 64) {
         parse_HasGuessReward:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &hasguessreward_)));
          set_has_hasguessreward();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(80)) goto parse_HasAuditionReport;
        break;
      }

      // optional uint32 HasAuditionReport = 10;
      case 10: {
        if (tag == 80) {
         parse_HasAuditionReport:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &hasauditionreport_)));
          set_has_hasauditionreport();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(88)) goto parse_ServerTeamId;
        break;
      }

      // optional uint32 ServerTeamId = 11;
      case 11: {
        if (tag == 88) {
         parse_ServerTeamId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &serverteamid_)));
          set_has_serverteamid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(96)) goto parse_RankRewardConfId;
        break;
      }

      // optional uint32 RankRewardConfId = 12;
      case 12: {
        if (tag == 96) {
         parse_RankRewardConfId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &rankrewardconfid_)));
          set_has_rankrewardconfid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TCrossChallengeRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TCrossChallengeRsp)
  return false;
#undef DO_
}

void TCrossChallengeRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TCrossChallengeRsp)
  // optional uint64 SeasonBeginTime = 1;
  if (has_seasonbegintime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->seasonbegintime(), output);
  }

  // optional .pb.EChallengeStep Step = 2;
  if (has_step()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->step(), output);
  }

  // optional uint32 Rank = 3;
  if (has_rank()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->rank(), output);
  }

  // optional uint32 IsLose = 4;
  if (has_islose()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->islose(), output);
  }

  // optional uint32 IsOpen = 5;
  if (has_isopen()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->isopen(), output);
  }

  // optional uint32 IsInAudition = 6;
  if (has_isinaudition()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->isinaudition(), output);
  }

  // optional uint32 IsRankRewarded = 7;
  if (has_isrankrewarded()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->isrankrewarded(), output);
  }

  // optional uint32 HasGuessReward = 8;
  if (has_hasguessreward()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->hasguessreward(), output);
  }

  // optional uint32 HasAuditionReport = 10;
  if (has_hasauditionreport()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->hasauditionreport(), output);
  }

  // optional uint32 ServerTeamId = 11;
  if (has_serverteamid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(11, this->serverteamid(), output);
  }

  // optional uint32 RankRewardConfId = 12;
  if (has_rankrewardconfid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(12, this->rankrewardconfid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TCrossChallengeRsp)
}

::google::protobuf::uint8* TCrossChallengeRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TCrossChallengeRsp)
  // optional uint64 SeasonBeginTime = 1;
  if (has_seasonbegintime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->seasonbegintime(), target);
  }

  // optional .pb.EChallengeStep Step = 2;
  if (has_step()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->step(), target);
  }

  // optional uint32 Rank = 3;
  if (has_rank()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->rank(), target);
  }

  // optional uint32 IsLose = 4;
  if (has_islose()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->islose(), target);
  }

  // optional uint32 IsOpen = 5;
  if (has_isopen()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->isopen(), target);
  }

  // optional uint32 IsInAudition = 6;
  if (has_isinaudition()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->isinaudition(), target);
  }

  // optional uint32 IsRankRewarded = 7;
  if (has_isrankrewarded()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->isrankrewarded(), target);
  }

  // optional uint32 HasGuessReward = 8;
  if (has_hasguessreward()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->hasguessreward(), target);
  }

  // optional uint32 HasAuditionReport = 10;
  if (has_hasauditionreport()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(10, this->hasauditionreport(), target);
  }

  // optional uint32 ServerTeamId = 11;
  if (has_serverteamid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(11, this->serverteamid(), target);
  }

  // optional uint32 RankRewardConfId = 12;
  if (has_rankrewardconfid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(12, this->rankrewardconfid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TCrossChallengeRsp)
  return target;
}

int TCrossChallengeRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 SeasonBeginTime = 1;
    if (has_seasonbegintime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->seasonbegintime());
    }

    // optional .pb.EChallengeStep Step = 2;
    if (has_step()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->step());
    }

    // optional uint32 Rank = 3;
    if (has_rank()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->rank());
    }

    // optional uint32 IsLose = 4;
    if (has_islose()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->islose());
    }

    // optional uint32 IsOpen = 5;
    if (has_isopen()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->isopen());
    }

    // optional uint32 IsInAudition = 6;
    if (has_isinaudition()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->isinaudition());
    }

    // optional uint32 IsRankRewarded = 7;
    if (has_isrankrewarded()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->isrankrewarded());
    }

    // optional uint32 HasGuessReward = 8;
    if (has_hasguessreward()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->hasguessreward());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional uint32 HasAuditionReport = 10;
    if (has_hasauditionreport()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->hasauditionreport());
    }

    // optional uint32 ServerTeamId = 11;
    if (has_serverteamid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->serverteamid());
    }

    // optional uint32 RankRewardConfId = 12;
    if (has_rankrewardconfid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->rankrewardconfid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TCrossChallengeRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TCrossChallengeRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TCrossChallengeRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TCrossChallengeRsp::MergeFrom(const TCrossChallengeRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_seasonbegintime()) {
      set_seasonbegintime(from.seasonbegintime());
    }
    if (from.has_step()) {
      set_step(from.step());
    }
    if (from.has_rank()) {
      set_rank(from.rank());
    }
    if (from.has_islose()) {
      set_islose(from.islose());
    }
    if (from.has_isopen()) {
      set_isopen(from.isopen());
    }
    if (from.has_isinaudition()) {
      set_isinaudition(from.isinaudition());
    }
    if (from.has_isrankrewarded()) {
      set_isrankrewarded(from.isrankrewarded());
    }
    if (from.has_hasguessreward()) {
      set_hasguessreward(from.hasguessreward());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_hasauditionreport()) {
      set_hasauditionreport(from.hasauditionreport());
    }
    if (from.has_serverteamid()) {
      set_serverteamid(from.serverteamid());
    }
    if (from.has_rankrewardconfid()) {
      set_rankrewardconfid(from.rankrewardconfid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TCrossChallengeRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TCrossChallengeRsp::CopyFrom(const TCrossChallengeRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TCrossChallengeRsp::IsInitialized() const {

  return true;
}

void TCrossChallengeRsp::Swap(TCrossChallengeRsp* other) {
  if (other != this) {
    std::swap(seasonbegintime_, other->seasonbegintime_);
    std::swap(step_, other->step_);
    std::swap(rank_, other->rank_);
    std::swap(islose_, other->islose_);
    std::swap(isopen_, other->isopen_);
    std::swap(isinaudition_, other->isinaudition_);
    std::swap(isrankrewarded_, other->isrankrewarded_);
    std::swap(hasguessreward_, other->hasguessreward_);
    std::swap(hasauditionreport_, other->hasauditionreport_);
    std::swap(serverteamid_, other->serverteamid_);
    std::swap(rankrewardconfid_, other->rankrewardconfid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TCrossChallengeRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TCrossChallengeRsp_descriptor_;
  metadata.reflection = TCrossChallengeRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TCrossChallengeUserInfo::kUidFieldNumber;
const int TCrossChallengeUserInfo::kUnameFieldNumber;
const int TCrossChallengeUserInfo::kPlayerModelHtidFieldNumber;
const int TCrossChallengeUserInfo::kPlayerImageFrameTidFieldNumber;
const int TCrossChallengeUserInfo::kLevelFieldNumber;
const int TCrossChallengeUserInfo::kVipLvFieldNumber;
const int TCrossChallengeUserInfo::kGuildIdFieldNumber;
const int TCrossChallengeUserInfo::kGuildNameFieldNumber;
const int TCrossChallengeUserInfo::kIsShowVipFieldNumber;
const int TCrossChallengeUserInfo::kServerIdFieldNumber;
#endif  // !_MSC_VER

TCrossChallengeUserInfo::TCrossChallengeUserInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TCrossChallengeUserInfo)
}

void TCrossChallengeUserInfo::InitAsDefaultInstance() {
}

TCrossChallengeUserInfo::TCrossChallengeUserInfo(const TCrossChallengeUserInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TCrossChallengeUserInfo)
}

void TCrossChallengeUserInfo::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  uid_ = GOOGLE_ULONGLONG(0);
  uname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  playermodelhtid_ = 0u;
  playerimageframetid_ = 0u;
  level_ = 0u;
  viplv_ = 0u;
  guildid_ = GOOGLE_ULONGLONG(0);
  guildname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  isshowvip_ = 0u;
  serverid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TCrossChallengeUserInfo::~TCrossChallengeUserInfo() {
  // @@protoc_insertion_point(destructor:pb.TCrossChallengeUserInfo)
  SharedDtor();
}

void TCrossChallengeUserInfo::SharedDtor() {
  if (uname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete uname_;
  }
  if (guildname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete guildname_;
  }
  if (serverid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete serverid_;
  }
  if (this != default_instance_) {
  }
}

void TCrossChallengeUserInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TCrossChallengeUserInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TCrossChallengeUserInfo_descriptor_;
}

const TCrossChallengeUserInfo& TCrossChallengeUserInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fCrossChallenge_2eproto();
  return *default_instance_;
}

TCrossChallengeUserInfo* TCrossChallengeUserInfo::default_instance_ = NULL;

TCrossChallengeUserInfo* TCrossChallengeUserInfo::New() const {
  return new TCrossChallengeUserInfo;
}

void TCrossChallengeUserInfo::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<TCrossChallengeUserInfo*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(playermodelhtid_, guildid_);
    uid_ = GOOGLE_ULONGLONG(0);
    if (has_uname()) {
      if (uname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        uname_->clear();
      }
    }
    if (has_guildname()) {
      if (guildname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        guildname_->clear();
      }
    }
  }
  if (_has_bits_[8 / 32] & 768) {
    isshowvip_ = 0u;
    if (has_serverid()) {
      if (serverid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        serverid_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TCrossChallengeUserInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TCrossChallengeUserInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 Uid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &uid_)));
          set_has_uid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_Uname;
        break;
      }

      // optional string Uname = 2;
      case 2: {
        if (tag == 18) {
         parse_Uname:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_uname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->uname().data(), this->uname().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "uname");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_PlayerModelHtid;
        break;
      }

      // optional uint32 PlayerModelHtid = 3;
      case 3: {
        if (tag == 24) {
         parse_PlayerModelHtid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &playermodelhtid_)));
          set_has_playermodelhtid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_PlayerImageFrameTid;
        break;
      }

      // optional uint32 PlayerImageFrameTid = 4;
      case 4: {
        if (tag == 32) {
         parse_PlayerImageFrameTid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &playerimageframetid_)));
          set_has_playerimageframetid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_Level;
        break;
      }

      // optional uint32 Level = 5;
      case 5: {
        if (tag == 40) {
         parse_Level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &level_)));
          set_has_level();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_VipLv;
        break;
      }

      // optional uint32 VipLv = 6;
      case 6: {
        if (tag == 48) {
         parse_VipLv:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &viplv_)));
          set_has_viplv();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_GuildId;
        break;
      }

      // optional uint64 GuildId = 7;
      case 7: {
        if (tag == 56) {
         parse_GuildId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &guildid_)));
          set_has_guildid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_GuildName;
        break;
      }

      // optional string GuildName = 8;
      case 8: {
        if (tag == 66) {
         parse_GuildName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_guildname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->guildname().data(), this->guildname().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "guildname");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_IsShowVip;
        break;
      }

      // optional uint32 IsShowVip = 9;
      case 9: {
        if (tag == 72) {
         parse_IsShowVip:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &isshowvip_)));
          set_has_isshowvip();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(82)) goto parse_ServerId;
        break;
      }

      // optional string ServerId = 10;
      case 10: {
        if (tag == 82) {
         parse_ServerId:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_serverid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->serverid().data(), this->serverid().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "serverid");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TCrossChallengeUserInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TCrossChallengeUserInfo)
  return false;
#undef DO_
}

void TCrossChallengeUserInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TCrossChallengeUserInfo)
  // optional uint64 Uid = 1;
  if (has_uid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->uid(), output);
  }

  // optional string Uname = 2;
  if (has_uname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->uname().data(), this->uname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "uname");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->uname(), output);
  }

  // optional uint32 PlayerModelHtid = 3;
  if (has_playermodelhtid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->playermodelhtid(), output);
  }

  // optional uint32 PlayerImageFrameTid = 4;
  if (has_playerimageframetid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->playerimageframetid(), output);
  }

  // optional uint32 Level = 5;
  if (has_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->level(), output);
  }

  // optional uint32 VipLv = 6;
  if (has_viplv()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->viplv(), output);
  }

  // optional uint64 GuildId = 7;
  if (has_guildid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(7, this->guildid(), output);
  }

  // optional string GuildName = 8;
  if (has_guildname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->guildname().data(), this->guildname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "guildname");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      8, this->guildname(), output);
  }

  // optional uint32 IsShowVip = 9;
  if (has_isshowvip()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->isshowvip(), output);
  }

  // optional string ServerId = 10;
  if (has_serverid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->serverid().data(), this->serverid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "serverid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      10, this->serverid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TCrossChallengeUserInfo)
}

::google::protobuf::uint8* TCrossChallengeUserInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TCrossChallengeUserInfo)
  // optional uint64 Uid = 1;
  if (has_uid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->uid(), target);
  }

  // optional string Uname = 2;
  if (has_uname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->uname().data(), this->uname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "uname");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->uname(), target);
  }

  // optional uint32 PlayerModelHtid = 3;
  if (has_playermodelhtid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->playermodelhtid(), target);
  }

  // optional uint32 PlayerImageFrameTid = 4;
  if (has_playerimageframetid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->playerimageframetid(), target);
  }

  // optional uint32 Level = 5;
  if (has_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->level(), target);
  }

  // optional uint32 VipLv = 6;
  if (has_viplv()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->viplv(), target);
  }

  // optional uint64 GuildId = 7;
  if (has_guildid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(7, this->guildid(), target);
  }

  // optional string GuildName = 8;
  if (has_guildname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->guildname().data(), this->guildname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "guildname");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->guildname(), target);
  }

  // optional uint32 IsShowVip = 9;
  if (has_isshowvip()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->isshowvip(), target);
  }

  // optional string ServerId = 10;
  if (has_serverid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->serverid().data(), this->serverid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "serverid");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        10, this->serverid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TCrossChallengeUserInfo)
  return target;
}

int TCrossChallengeUserInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 Uid = 1;
    if (has_uid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->uid());
    }

    // optional string Uname = 2;
    if (has_uname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->uname());
    }

    // optional uint32 PlayerModelHtid = 3;
    if (has_playermodelhtid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->playermodelhtid());
    }

    // optional uint32 PlayerImageFrameTid = 4;
    if (has_playerimageframetid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->playerimageframetid());
    }

    // optional uint32 Level = 5;
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->level());
    }

    // optional uint32 VipLv = 6;
    if (has_viplv()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->viplv());
    }

    // optional uint64 GuildId = 7;
    if (has_guildid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->guildid());
    }

    // optional string GuildName = 8;
    if (has_guildname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->guildname());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional uint32 IsShowVip = 9;
    if (has_isshowvip()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->isshowvip());
    }

    // optional string ServerId = 10;
    if (has_serverid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->serverid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TCrossChallengeUserInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TCrossChallengeUserInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TCrossChallengeUserInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TCrossChallengeUserInfo::MergeFrom(const TCrossChallengeUserInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_uid()) {
      set_uid(from.uid());
    }
    if (from.has_uname()) {
      set_uname(from.uname());
    }
    if (from.has_playermodelhtid()) {
      set_playermodelhtid(from.playermodelhtid());
    }
    if (from.has_playerimageframetid()) {
      set_playerimageframetid(from.playerimageframetid());
    }
    if (from.has_level()) {
      set_level(from.level());
    }
    if (from.has_viplv()) {
      set_viplv(from.viplv());
    }
    if (from.has_guildid()) {
      set_guildid(from.guildid());
    }
    if (from.has_guildname()) {
      set_guildname(from.guildname());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_isshowvip()) {
      set_isshowvip(from.isshowvip());
    }
    if (from.has_serverid()) {
      set_serverid(from.serverid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TCrossChallengeUserInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TCrossChallengeUserInfo::CopyFrom(const TCrossChallengeUserInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TCrossChallengeUserInfo::IsInitialized() const {

  return true;
}

void TCrossChallengeUserInfo::Swap(TCrossChallengeUserInfo* other) {
  if (other != this) {
    std::swap(uid_, other->uid_);
    std::swap(uname_, other->uname_);
    std::swap(playermodelhtid_, other->playermodelhtid_);
    std::swap(playerimageframetid_, other->playerimageframetid_);
    std::swap(level_, other->level_);
    std::swap(viplv_, other->viplv_);
    std::swap(guildid_, other->guildid_);
    std::swap(guildname_, other->guildname_);
    std::swap(isshowvip_, other->isshowvip_);
    std::swap(serverid_, other->serverid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TCrossChallengeUserInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TCrossChallengeUserInfo_descriptor_;
  metadata.reflection = TCrossChallengeUserInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TCrossChallengeBattleInfo::kTeamIdFieldNumber;
const int TCrossChallengeBattleInfo::kPosFieldNumber;
const int TCrossChallengeBattleInfo::kUidFieldNumber;
const int TCrossChallengeBattleInfo::kRidArrFieldNumber;
const int TCrossChallengeBattleInfo::kStatusFieldNumber;
const int TCrossChallengeBattleInfo::kFightForceFieldNumber;
#endif  // !_MSC_VER

TCrossChallengeBattleInfo::TCrossChallengeBattleInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TCrossChallengeBattleInfo)
}

void TCrossChallengeBattleInfo::InitAsDefaultInstance() {
}

TCrossChallengeBattleInfo::TCrossChallengeBattleInfo(const TCrossChallengeBattleInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TCrossChallengeBattleInfo)
}

void TCrossChallengeBattleInfo::SharedCtor() {
  _cached_size_ = 0;
  teamid_ = 0u;
  pos_ = 0u;
  uid_ = GOOGLE_ULONGLONG(0);
  status_ = 0;
  fightforce_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TCrossChallengeBattleInfo::~TCrossChallengeBattleInfo() {
  // @@protoc_insertion_point(destructor:pb.TCrossChallengeBattleInfo)
  SharedDtor();
}

void TCrossChallengeBattleInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TCrossChallengeBattleInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TCrossChallengeBattleInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TCrossChallengeBattleInfo_descriptor_;
}

const TCrossChallengeBattleInfo& TCrossChallengeBattleInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fCrossChallenge_2eproto();
  return *default_instance_;
}

TCrossChallengeBattleInfo* TCrossChallengeBattleInfo::default_instance_ = NULL;

TCrossChallengeBattleInfo* TCrossChallengeBattleInfo::New() const {
  return new TCrossChallengeBattleInfo;
}

void TCrossChallengeBattleInfo::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<TCrossChallengeBattleInfo*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 55) {
    ZR_(teamid_, uid_);
    ZR_(fightforce_, status_);
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ridarr_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TCrossChallengeBattleInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TCrossChallengeBattleInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 TeamId = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &teamid_)));
          set_has_teamid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_Pos;
        break;
      }

      // optional uint32 Pos = 2;
      case 2: {
        if (tag == 16) {
         parse_Pos:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &pos_)));
          set_has_pos();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_Uid;
        break;
      }

      // optional uint64 Uid = 3;
      case 3: {
        if (tag == 24) {
         parse_Uid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &uid_)));
          set_has_uid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_RidArr;
        break;
      }

      // repeated uint64 RidArr = 4;
      case 4: {
        if (tag == 32) {
         parse_RidArr:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 1, 32, input, this->mutable_ridarr())));
        } else if (tag == 34) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, this->mutable_ridarr())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_RidArr;
        if (input->ExpectTag(40)) goto parse_Status;
        break;
      }

      // optional .pb.EChallengeBattleStatus Status = 5;
      case 5: {
        if (tag == 40) {
         parse_Status:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::pb::EChallengeBattleStatus_IsValid(value)) {
            set_status(static_cast< ::pb::EChallengeBattleStatus >(value));
          } else {
            mutable_unknown_fields()->AddVarint(5, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_FightForce;
        break;
      }

      // optional uint64 FightForce = 6;
      case 6: {
        if (tag == 48) {
         parse_FightForce:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &fightforce_)));
          set_has_fightforce();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TCrossChallengeBattleInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TCrossChallengeBattleInfo)
  return false;
#undef DO_
}

void TCrossChallengeBattleInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TCrossChallengeBattleInfo)
  // optional uint32 TeamId = 1;
  if (has_teamid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->teamid(), output);
  }

  // optional uint32 Pos = 2;
  if (has_pos()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->pos(), output);
  }

  // optional uint64 Uid = 3;
  if (has_uid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->uid(), output);
  }

  // repeated uint64 RidArr = 4;
  for (int i = 0; i < this->ridarr_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(
      4, this->ridarr(i), output);
  }

  // optional .pb.EChallengeBattleStatus Status = 5;
  if (has_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      5, this->status(), output);
  }

  // optional uint64 FightForce = 6;
  if (has_fightforce()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(6, this->fightforce(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TCrossChallengeBattleInfo)
}

::google::protobuf::uint8* TCrossChallengeBattleInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TCrossChallengeBattleInfo)
  // optional uint32 TeamId = 1;
  if (has_teamid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->teamid(), target);
  }

  // optional uint32 Pos = 2;
  if (has_pos()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->pos(), target);
  }

  // optional uint64 Uid = 3;
  if (has_uid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->uid(), target);
  }

  // repeated uint64 RidArr = 4;
  for (int i = 0; i < this->ridarr_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt64ToArray(4, this->ridarr(i), target);
  }

  // optional .pb.EChallengeBattleStatus Status = 5;
  if (has_status()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      5, this->status(), target);
  }

  // optional uint64 FightForce = 6;
  if (has_fightforce()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(6, this->fightforce(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TCrossChallengeBattleInfo)
  return target;
}

int TCrossChallengeBattleInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 TeamId = 1;
    if (has_teamid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->teamid());
    }

    // optional uint32 Pos = 2;
    if (has_pos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->pos());
    }

    // optional uint64 Uid = 3;
    if (has_uid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->uid());
    }

    // optional .pb.EChallengeBattleStatus Status = 5;
    if (has_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->status());
    }

    // optional uint64 FightForce = 6;
    if (has_fightforce()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->fightforce());
    }

  }
  // repeated uint64 RidArr = 4;
  {
    int data_size = 0;
    for (int i = 0; i < this->ridarr_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt64Size(this->ridarr(i));
    }
    total_size += 1 * this->ridarr_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TCrossChallengeBattleInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TCrossChallengeBattleInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TCrossChallengeBattleInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TCrossChallengeBattleInfo::MergeFrom(const TCrossChallengeBattleInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  ridarr_.MergeFrom(from.ridarr_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_teamid()) {
      set_teamid(from.teamid());
    }
    if (from.has_pos()) {
      set_pos(from.pos());
    }
    if (from.has_uid()) {
      set_uid(from.uid());
    }
    if (from.has_status()) {
      set_status(from.status());
    }
    if (from.has_fightforce()) {
      set_fightforce(from.fightforce());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TCrossChallengeBattleInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TCrossChallengeBattleInfo::CopyFrom(const TCrossChallengeBattleInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TCrossChallengeBattleInfo::IsInitialized() const {

  return true;
}

void TCrossChallengeBattleInfo::Swap(TCrossChallengeBattleInfo* other) {
  if (other != this) {
    std::swap(teamid_, other->teamid_);
    std::swap(pos_, other->pos_);
    std::swap(uid_, other->uid_);
    ridarr_.Swap(&other->ridarr_);
    std::swap(status_, other->status_);
    std::swap(fightforce_, other->fightforce_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TCrossChallengeBattleInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TCrossChallengeBattleInfo_descriptor_;
  metadata.reflection = TCrossChallengeBattleInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TCrossChallengePeriodInfo::kStepFieldNumber;
const int TCrossChallengePeriodInfo::kPeriodInfoFieldNumber;
#endif  // !_MSC_VER

TCrossChallengePeriodInfo::TCrossChallengePeriodInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TCrossChallengePeriodInfo)
}

void TCrossChallengePeriodInfo::InitAsDefaultInstance() {
}

TCrossChallengePeriodInfo::TCrossChallengePeriodInfo(const TCrossChallengePeriodInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TCrossChallengePeriodInfo)
}

void TCrossChallengePeriodInfo::SharedCtor() {
  _cached_size_ = 0;
  step_ = 1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TCrossChallengePeriodInfo::~TCrossChallengePeriodInfo() {
  // @@protoc_insertion_point(destructor:pb.TCrossChallengePeriodInfo)
  SharedDtor();
}

void TCrossChallengePeriodInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TCrossChallengePeriodInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TCrossChallengePeriodInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TCrossChallengePeriodInfo_descriptor_;
}

const TCrossChallengePeriodInfo& TCrossChallengePeriodInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fCrossChallenge_2eproto();
  return *default_instance_;
}

TCrossChallengePeriodInfo* TCrossChallengePeriodInfo::default_instance_ = NULL;

TCrossChallengePeriodInfo* TCrossChallengePeriodInfo::New() const {
  return new TCrossChallengePeriodInfo;
}

void TCrossChallengePeriodInfo::Clear() {
  step_ = 1;
  periodinfo_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TCrossChallengePeriodInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TCrossChallengePeriodInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .pb.EChallengeStep Step = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::pb::EChallengeStep_IsValid(value)) {
            set_step(static_cast< ::pb::EChallengeStep >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_PeriodInfo;
        break;
      }

      // repeated .pb.TCrossChallengeBattleInfo PeriodInfo = 2;
      case 2: {
        if (tag == 18) {
         parse_PeriodInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_periodinfo()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_PeriodInfo;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TCrossChallengePeriodInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TCrossChallengePeriodInfo)
  return false;
#undef DO_
}

void TCrossChallengePeriodInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TCrossChallengePeriodInfo)
  // optional .pb.EChallengeStep Step = 1;
  if (has_step()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->step(), output);
  }

  // repeated .pb.TCrossChallengeBattleInfo PeriodInfo = 2;
  for (int i = 0; i < this->periodinfo_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->periodinfo(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TCrossChallengePeriodInfo)
}

::google::protobuf::uint8* TCrossChallengePeriodInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TCrossChallengePeriodInfo)
  // optional .pb.EChallengeStep Step = 1;
  if (has_step()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->step(), target);
  }

  // repeated .pb.TCrossChallengeBattleInfo PeriodInfo = 2;
  for (int i = 0; i < this->periodinfo_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->periodinfo(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TCrossChallengePeriodInfo)
  return target;
}

int TCrossChallengePeriodInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .pb.EChallengeStep Step = 1;
    if (has_step()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->step());
    }

  }
  // repeated .pb.TCrossChallengeBattleInfo PeriodInfo = 2;
  total_size += 1 * this->periodinfo_size();
  for (int i = 0; i < this->periodinfo_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->periodinfo(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TCrossChallengePeriodInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TCrossChallengePeriodInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TCrossChallengePeriodInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TCrossChallengePeriodInfo::MergeFrom(const TCrossChallengePeriodInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  periodinfo_.MergeFrom(from.periodinfo_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_step()) {
      set_step(from.step());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TCrossChallengePeriodInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TCrossChallengePeriodInfo::CopyFrom(const TCrossChallengePeriodInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TCrossChallengePeriodInfo::IsInitialized() const {

  return true;
}

void TCrossChallengePeriodInfo::Swap(TCrossChallengePeriodInfo* other) {
  if (other != this) {
    std::swap(step_, other->step_);
    periodinfo_.Swap(&other->periodinfo_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TCrossChallengePeriodInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TCrossChallengePeriodInfo_descriptor_;
  metadata.reflection = TCrossChallengePeriodInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TCrossChallengeGetChallengeUserInfoRsp::kTeamIdFieldNumber;
const int TCrossChallengeGetChallengeUserInfoRsp::kPeriodInfoArrFieldNumber;
const int TCrossChallengeGetChallengeUserInfoRsp::kUserArrFieldNumber;
#endif  // !_MSC_VER

TCrossChallengeGetChallengeUserInfoRsp::TCrossChallengeGetChallengeUserInfoRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TCrossChallengeGetChallengeUserInfoRsp)
}

void TCrossChallengeGetChallengeUserInfoRsp::InitAsDefaultInstance() {
}

TCrossChallengeGetChallengeUserInfoRsp::TCrossChallengeGetChallengeUserInfoRsp(const TCrossChallengeGetChallengeUserInfoRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TCrossChallengeGetChallengeUserInfoRsp)
}

void TCrossChallengeGetChallengeUserInfoRsp::SharedCtor() {
  _cached_size_ = 0;
  teamid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TCrossChallengeGetChallengeUserInfoRsp::~TCrossChallengeGetChallengeUserInfoRsp() {
  // @@protoc_insertion_point(destructor:pb.TCrossChallengeGetChallengeUserInfoRsp)
  SharedDtor();
}

void TCrossChallengeGetChallengeUserInfoRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TCrossChallengeGetChallengeUserInfoRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TCrossChallengeGetChallengeUserInfoRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TCrossChallengeGetChallengeUserInfoRsp_descriptor_;
}

const TCrossChallengeGetChallengeUserInfoRsp& TCrossChallengeGetChallengeUserInfoRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fCrossChallenge_2eproto();
  return *default_instance_;
}

TCrossChallengeGetChallengeUserInfoRsp* TCrossChallengeGetChallengeUserInfoRsp::default_instance_ = NULL;

TCrossChallengeGetChallengeUserInfoRsp* TCrossChallengeGetChallengeUserInfoRsp::New() const {
  return new TCrossChallengeGetChallengeUserInfoRsp;
}

void TCrossChallengeGetChallengeUserInfoRsp::Clear() {
  teamid_ = 0u;
  periodinfoarr_.Clear();
  userarr_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TCrossChallengeGetChallengeUserInfoRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TCrossChallengeGetChallengeUserInfoRsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 TeamId = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &teamid_)));
          set_has_teamid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_PeriodInfoArr;
        break;
      }

      // repeated .pb.TCrossChallengePeriodInfo PeriodInfoArr = 2;
      case 2: {
        if (tag == 18) {
         parse_PeriodInfoArr:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_periodinfoarr()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_PeriodInfoArr;
        if (input->ExpectTag(26)) goto parse_UserArr;
        break;
      }

      // repeated .pb.TCrossChallengeUserInfo UserArr = 3;
      case 3: {
        if (tag == 26) {
         parse_UserArr:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_userarr()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_UserArr;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TCrossChallengeGetChallengeUserInfoRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TCrossChallengeGetChallengeUserInfoRsp)
  return false;
#undef DO_
}

void TCrossChallengeGetChallengeUserInfoRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TCrossChallengeGetChallengeUserInfoRsp)
  // optional uint32 TeamId = 1;
  if (has_teamid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->teamid(), output);
  }

  // repeated .pb.TCrossChallengePeriodInfo PeriodInfoArr = 2;
  for (int i = 0; i < this->periodinfoarr_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->periodinfoarr(i), output);
  }

  // repeated .pb.TCrossChallengeUserInfo UserArr = 3;
  for (int i = 0; i < this->userarr_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->userarr(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TCrossChallengeGetChallengeUserInfoRsp)
}

::google::protobuf::uint8* TCrossChallengeGetChallengeUserInfoRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TCrossChallengeGetChallengeUserInfoRsp)
  // optional uint32 TeamId = 1;
  if (has_teamid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->teamid(), target);
  }

  // repeated .pb.TCrossChallengePeriodInfo PeriodInfoArr = 2;
  for (int i = 0; i < this->periodinfoarr_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->periodinfoarr(i), target);
  }

  // repeated .pb.TCrossChallengeUserInfo UserArr = 3;
  for (int i = 0; i < this->userarr_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->userarr(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TCrossChallengeGetChallengeUserInfoRsp)
  return target;
}

int TCrossChallengeGetChallengeUserInfoRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 TeamId = 1;
    if (has_teamid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->teamid());
    }

  }
  // repeated .pb.TCrossChallengePeriodInfo PeriodInfoArr = 2;
  total_size += 1 * this->periodinfoarr_size();
  for (int i = 0; i < this->periodinfoarr_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->periodinfoarr(i));
  }

  // repeated .pb.TCrossChallengeUserInfo UserArr = 3;
  total_size += 1 * this->userarr_size();
  for (int i = 0; i < this->userarr_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->userarr(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TCrossChallengeGetChallengeUserInfoRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TCrossChallengeGetChallengeUserInfoRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TCrossChallengeGetChallengeUserInfoRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TCrossChallengeGetChallengeUserInfoRsp::MergeFrom(const TCrossChallengeGetChallengeUserInfoRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  periodinfoarr_.MergeFrom(from.periodinfoarr_);
  userarr_.MergeFrom(from.userarr_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_teamid()) {
      set_teamid(from.teamid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TCrossChallengeGetChallengeUserInfoRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TCrossChallengeGetChallengeUserInfoRsp::CopyFrom(const TCrossChallengeGetChallengeUserInfoRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TCrossChallengeGetChallengeUserInfoRsp::IsInitialized() const {

  return true;
}

void TCrossChallengeGetChallengeUserInfoRsp::Swap(TCrossChallengeGetChallengeUserInfoRsp* other) {
  if (other != this) {
    std::swap(teamid_, other->teamid_);
    periodinfoarr_.Swap(&other->periodinfoarr_);
    userarr_.Swap(&other->userarr_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TCrossChallengeGetChallengeUserInfoRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TCrossChallengeGetChallengeUserInfoRsp_descriptor_;
  metadata.reflection = TCrossChallengeGetChallengeUserInfoRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TCrossChallengeGetCurrentPeriodInfoRsp::kPeriodInfoFieldNumber;
#endif  // !_MSC_VER

TCrossChallengeGetCurrentPeriodInfoRsp::TCrossChallengeGetCurrentPeriodInfoRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TCrossChallengeGetCurrentPeriodInfoRsp)
}

void TCrossChallengeGetCurrentPeriodInfoRsp::InitAsDefaultInstance() {
  periodinfo_ = const_cast< ::pb::TCrossChallengePeriodInfo*>(&::pb::TCrossChallengePeriodInfo::default_instance());
}

TCrossChallengeGetCurrentPeriodInfoRsp::TCrossChallengeGetCurrentPeriodInfoRsp(const TCrossChallengeGetCurrentPeriodInfoRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TCrossChallengeGetCurrentPeriodInfoRsp)
}

void TCrossChallengeGetCurrentPeriodInfoRsp::SharedCtor() {
  _cached_size_ = 0;
  periodinfo_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TCrossChallengeGetCurrentPeriodInfoRsp::~TCrossChallengeGetCurrentPeriodInfoRsp() {
  // @@protoc_insertion_point(destructor:pb.TCrossChallengeGetCurrentPeriodInfoRsp)
  SharedDtor();
}

void TCrossChallengeGetCurrentPeriodInfoRsp::SharedDtor() {
  if (this != default_instance_) {
    delete periodinfo_;
  }
}

void TCrossChallengeGetCurrentPeriodInfoRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TCrossChallengeGetCurrentPeriodInfoRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TCrossChallengeGetCurrentPeriodInfoRsp_descriptor_;
}

const TCrossChallengeGetCurrentPeriodInfoRsp& TCrossChallengeGetCurrentPeriodInfoRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fCrossChallenge_2eproto();
  return *default_instance_;
}

TCrossChallengeGetCurrentPeriodInfoRsp* TCrossChallengeGetCurrentPeriodInfoRsp::default_instance_ = NULL;

TCrossChallengeGetCurrentPeriodInfoRsp* TCrossChallengeGetCurrentPeriodInfoRsp::New() const {
  return new TCrossChallengeGetCurrentPeriodInfoRsp;
}

void TCrossChallengeGetCurrentPeriodInfoRsp::Clear() {
  if (has_periodinfo()) {
    if (periodinfo_ != NULL) periodinfo_->::pb::TCrossChallengePeriodInfo::Clear();
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TCrossChallengeGetCurrentPeriodInfoRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TCrossChallengeGetCurrentPeriodInfoRsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .pb.TCrossChallengePeriodInfo PeriodInfo = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_periodinfo()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TCrossChallengeGetCurrentPeriodInfoRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TCrossChallengeGetCurrentPeriodInfoRsp)
  return false;
#undef DO_
}

void TCrossChallengeGetCurrentPeriodInfoRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TCrossChallengeGetCurrentPeriodInfoRsp)
  // optional .pb.TCrossChallengePeriodInfo PeriodInfo = 1;
  if (has_periodinfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->periodinfo(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TCrossChallengeGetCurrentPeriodInfoRsp)
}

::google::protobuf::uint8* TCrossChallengeGetCurrentPeriodInfoRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TCrossChallengeGetCurrentPeriodInfoRsp)
  // optional .pb.TCrossChallengePeriodInfo PeriodInfo = 1;
  if (has_periodinfo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->periodinfo(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TCrossChallengeGetCurrentPeriodInfoRsp)
  return target;
}

int TCrossChallengeGetCurrentPeriodInfoRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .pb.TCrossChallengePeriodInfo PeriodInfo = 1;
    if (has_periodinfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->periodinfo());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TCrossChallengeGetCurrentPeriodInfoRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TCrossChallengeGetCurrentPeriodInfoRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TCrossChallengeGetCurrentPeriodInfoRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TCrossChallengeGetCurrentPeriodInfoRsp::MergeFrom(const TCrossChallengeGetCurrentPeriodInfoRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_periodinfo()) {
      mutable_periodinfo()->::pb::TCrossChallengePeriodInfo::MergeFrom(from.periodinfo());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TCrossChallengeGetCurrentPeriodInfoRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TCrossChallengeGetCurrentPeriodInfoRsp::CopyFrom(const TCrossChallengeGetCurrentPeriodInfoRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TCrossChallengeGetCurrentPeriodInfoRsp::IsInitialized() const {

  return true;
}

void TCrossChallengeGetCurrentPeriodInfoRsp::Swap(TCrossChallengeGetCurrentPeriodInfoRsp* other) {
  if (other != this) {
    std::swap(periodinfo_, other->periodinfo_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TCrossChallengeGetCurrentPeriodInfoRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TCrossChallengeGetCurrentPeriodInfoRsp_descriptor_;
  metadata.reflection = TCrossChallengeGetCurrentPeriodInfoRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TCrossChallengeFormationInfo::kFormationIdFieldNumber;
const int TCrossChallengeFormationInfo::kUnitArrFieldNumber;
const int TCrossChallengeFormationInfo::kFightForceFieldNumber;
#endif  // !_MSC_VER

TCrossChallengeFormationInfo::TCrossChallengeFormationInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TCrossChallengeFormationInfo)
}

void TCrossChallengeFormationInfo::InitAsDefaultInstance() {
}

TCrossChallengeFormationInfo::TCrossChallengeFormationInfo(const TCrossChallengeFormationInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TCrossChallengeFormationInfo)
}

void TCrossChallengeFormationInfo::SharedCtor() {
  _cached_size_ = 0;
  formationid_ = 0u;
  fightforce_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TCrossChallengeFormationInfo::~TCrossChallengeFormationInfo() {
  // @@protoc_insertion_point(destructor:pb.TCrossChallengeFormationInfo)
  SharedDtor();
}

void TCrossChallengeFormationInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TCrossChallengeFormationInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TCrossChallengeFormationInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TCrossChallengeFormationInfo_descriptor_;
}

const TCrossChallengeFormationInfo& TCrossChallengeFormationInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fCrossChallenge_2eproto();
  return *default_instance_;
}

TCrossChallengeFormationInfo* TCrossChallengeFormationInfo::default_instance_ = NULL;

TCrossChallengeFormationInfo* TCrossChallengeFormationInfo::New() const {
  return new TCrossChallengeFormationInfo;
}

void TCrossChallengeFormationInfo::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<TCrossChallengeFormationInfo*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(fightforce_, formationid_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  unitarr_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TCrossChallengeFormationInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TCrossChallengeFormationInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 FormationId = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &formationid_)));
          set_has_formationid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_UnitArr;
        break;
      }

      // repeated .pb.TCrossChallengeBattleHeroStatus UnitArr = 2;
      case 2: {
        if (tag == 18) {
         parse_UnitArr:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_unitarr()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_UnitArr;
        if (input->ExpectTag(24)) goto parse_FightForce;
        break;
      }

      // optional uint64 FightForce = 3;
      case 3: {
        if (tag == 24) {
         parse_FightForce:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &fightforce_)));
          set_has_fightforce();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TCrossChallengeFormationInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TCrossChallengeFormationInfo)
  return false;
#undef DO_
}

void TCrossChallengeFormationInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TCrossChallengeFormationInfo)
  // optional uint32 FormationId = 1;
  if (has_formationid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->formationid(), output);
  }

  // repeated .pb.TCrossChallengeBattleHeroStatus UnitArr = 2;
  for (int i = 0; i < this->unitarr_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->unitarr(i), output);
  }

  // optional uint64 FightForce = 3;
  if (has_fightforce()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->fightforce(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TCrossChallengeFormationInfo)
}

::google::protobuf::uint8* TCrossChallengeFormationInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TCrossChallengeFormationInfo)
  // optional uint32 FormationId = 1;
  if (has_formationid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->formationid(), target);
  }

  // repeated .pb.TCrossChallengeBattleHeroStatus UnitArr = 2;
  for (int i = 0; i < this->unitarr_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->unitarr(i), target);
  }

  // optional uint64 FightForce = 3;
  if (has_fightforce()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->fightforce(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TCrossChallengeFormationInfo)
  return target;
}

int TCrossChallengeFormationInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 FormationId = 1;
    if (has_formationid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->formationid());
    }

    // optional uint64 FightForce = 3;
    if (has_fightforce()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->fightforce());
    }

  }
  // repeated .pb.TCrossChallengeBattleHeroStatus UnitArr = 2;
  total_size += 1 * this->unitarr_size();
  for (int i = 0; i < this->unitarr_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->unitarr(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TCrossChallengeFormationInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TCrossChallengeFormationInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TCrossChallengeFormationInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TCrossChallengeFormationInfo::MergeFrom(const TCrossChallengeFormationInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  unitarr_.MergeFrom(from.unitarr_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_formationid()) {
      set_formationid(from.formationid());
    }
    if (from.has_fightforce()) {
      set_fightforce(from.fightforce());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TCrossChallengeFormationInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TCrossChallengeFormationInfo::CopyFrom(const TCrossChallengeFormationInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TCrossChallengeFormationInfo::IsInitialized() const {

  return true;
}

void TCrossChallengeFormationInfo::Swap(TCrossChallengeFormationInfo* other) {
  if (other != this) {
    std::swap(formationid_, other->formationid_);
    unitarr_.Swap(&other->unitarr_);
    std::swap(fightforce_, other->fightforce_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TCrossChallengeFormationInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TCrossChallengeFormationInfo_descriptor_;
  metadata.reflection = TCrossChallengeFormationInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TCrossChallengeGetFormationReq::kStepFieldNumber;
const int TCrossChallengeGetFormationReq::kUidFieldNumber;
#endif  // !_MSC_VER

TCrossChallengeGetFormationReq::TCrossChallengeGetFormationReq()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TCrossChallengeGetFormationReq)
}

void TCrossChallengeGetFormationReq::InitAsDefaultInstance() {
}

TCrossChallengeGetFormationReq::TCrossChallengeGetFormationReq(const TCrossChallengeGetFormationReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TCrossChallengeGetFormationReq)
}

void TCrossChallengeGetFormationReq::SharedCtor() {
  _cached_size_ = 0;
  step_ = 1;
  uid_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TCrossChallengeGetFormationReq::~TCrossChallengeGetFormationReq() {
  // @@protoc_insertion_point(destructor:pb.TCrossChallengeGetFormationReq)
  SharedDtor();
}

void TCrossChallengeGetFormationReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TCrossChallengeGetFormationReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TCrossChallengeGetFormationReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TCrossChallengeGetFormationReq_descriptor_;
}

const TCrossChallengeGetFormationReq& TCrossChallengeGetFormationReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fCrossChallenge_2eproto();
  return *default_instance_;
}

TCrossChallengeGetFormationReq* TCrossChallengeGetFormationReq::default_instance_ = NULL;

TCrossChallengeGetFormationReq* TCrossChallengeGetFormationReq::New() const {
  return new TCrossChallengeGetFormationReq;
}

void TCrossChallengeGetFormationReq::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    step_ = 1;
    uid_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TCrossChallengeGetFormationReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TCrossChallengeGetFormationReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .pb.EChallengeStep Step = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::pb::EChallengeStep_IsValid(value)) {
            set_step(static_cast< ::pb::EChallengeStep >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_Uid;
        break;
      }

      // optional uint64 Uid = 2;
      case 2: {
        if (tag == 16) {
         parse_Uid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &uid_)));
          set_has_uid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TCrossChallengeGetFormationReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TCrossChallengeGetFormationReq)
  return false;
#undef DO_
}

void TCrossChallengeGetFormationReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TCrossChallengeGetFormationReq)
  // optional .pb.EChallengeStep Step = 1;
  if (has_step()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->step(), output);
  }

  // optional uint64 Uid = 2;
  if (has_uid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->uid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TCrossChallengeGetFormationReq)
}

::google::protobuf::uint8* TCrossChallengeGetFormationReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TCrossChallengeGetFormationReq)
  // optional .pb.EChallengeStep Step = 1;
  if (has_step()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->step(), target);
  }

  // optional uint64 Uid = 2;
  if (has_uid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->uid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TCrossChallengeGetFormationReq)
  return target;
}

int TCrossChallengeGetFormationReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .pb.EChallengeStep Step = 1;
    if (has_step()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->step());
    }

    // optional uint64 Uid = 2;
    if (has_uid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->uid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TCrossChallengeGetFormationReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TCrossChallengeGetFormationReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TCrossChallengeGetFormationReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TCrossChallengeGetFormationReq::MergeFrom(const TCrossChallengeGetFormationReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_step()) {
      set_step(from.step());
    }
    if (from.has_uid()) {
      set_uid(from.uid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TCrossChallengeGetFormationReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TCrossChallengeGetFormationReq::CopyFrom(const TCrossChallengeGetFormationReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TCrossChallengeGetFormationReq::IsInitialized() const {

  return true;
}

void TCrossChallengeGetFormationReq::Swap(TCrossChallengeGetFormationReq* other) {
  if (other != this) {
    std::swap(step_, other->step_);
    std::swap(uid_, other->uid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TCrossChallengeGetFormationReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TCrossChallengeGetFormationReq_descriptor_;
  metadata.reflection = TCrossChallengeGetFormationReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TCrossChallengeGetFormationRsp::kUnameFieldNumber;
const int TCrossChallengeGetFormationRsp::kFightForceFieldNumber;
const int TCrossChallengeGetFormationRsp::kFormationArrFieldNumber;
#endif  // !_MSC_VER

TCrossChallengeGetFormationRsp::TCrossChallengeGetFormationRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TCrossChallengeGetFormationRsp)
}

void TCrossChallengeGetFormationRsp::InitAsDefaultInstance() {
}

TCrossChallengeGetFormationRsp::TCrossChallengeGetFormationRsp(const TCrossChallengeGetFormationRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TCrossChallengeGetFormationRsp)
}

void TCrossChallengeGetFormationRsp::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  uname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  fightforce_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TCrossChallengeGetFormationRsp::~TCrossChallengeGetFormationRsp() {
  // @@protoc_insertion_point(destructor:pb.TCrossChallengeGetFormationRsp)
  SharedDtor();
}

void TCrossChallengeGetFormationRsp::SharedDtor() {
  if (uname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete uname_;
  }
  if (this != default_instance_) {
  }
}

void TCrossChallengeGetFormationRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TCrossChallengeGetFormationRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TCrossChallengeGetFormationRsp_descriptor_;
}

const TCrossChallengeGetFormationRsp& TCrossChallengeGetFormationRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fCrossChallenge_2eproto();
  return *default_instance_;
}

TCrossChallengeGetFormationRsp* TCrossChallengeGetFormationRsp::default_instance_ = NULL;

TCrossChallengeGetFormationRsp* TCrossChallengeGetFormationRsp::New() const {
  return new TCrossChallengeGetFormationRsp;
}

void TCrossChallengeGetFormationRsp::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    if (has_uname()) {
      if (uname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        uname_->clear();
      }
    }
    fightforce_ = GOOGLE_ULONGLONG(0);
  }
  formationarr_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TCrossChallengeGetFormationRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TCrossChallengeGetFormationRsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string Uname = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_uname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->uname().data(), this->uname().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "uname");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_FightForce;
        break;
      }

      // optional uint64 FightForce = 2;
      case 2: {
        if (tag == 16) {
         parse_FightForce:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &fightforce_)));
          set_has_fightforce();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_FormationArr;
        break;
      }

      // repeated .pb.TCrossChallengeFormationInfo FormationArr = 3;
      case 3: {
        if (tag == 26) {
         parse_FormationArr:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_formationarr()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_FormationArr;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TCrossChallengeGetFormationRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TCrossChallengeGetFormationRsp)
  return false;
#undef DO_
}

void TCrossChallengeGetFormationRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TCrossChallengeGetFormationRsp)
  // optional string Uname = 1;
  if (has_uname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->uname().data(), this->uname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "uname");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->uname(), output);
  }

  // optional uint64 FightForce = 2;
  if (has_fightforce()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->fightforce(), output);
  }

  // repeated .pb.TCrossChallengeFormationInfo FormationArr = 3;
  for (int i = 0; i < this->formationarr_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->formationarr(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TCrossChallengeGetFormationRsp)
}

::google::protobuf::uint8* TCrossChallengeGetFormationRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TCrossChallengeGetFormationRsp)
  // optional string Uname = 1;
  if (has_uname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->uname().data(), this->uname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "uname");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->uname(), target);
  }

  // optional uint64 FightForce = 2;
  if (has_fightforce()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->fightforce(), target);
  }

  // repeated .pb.TCrossChallengeFormationInfo FormationArr = 3;
  for (int i = 0; i < this->formationarr_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->formationarr(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TCrossChallengeGetFormationRsp)
  return target;
}

int TCrossChallengeGetFormationRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string Uname = 1;
    if (has_uname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->uname());
    }

    // optional uint64 FightForce = 2;
    if (has_fightforce()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->fightforce());
    }

  }
  // repeated .pb.TCrossChallengeFormationInfo FormationArr = 3;
  total_size += 1 * this->formationarr_size();
  for (int i = 0; i < this->formationarr_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->formationarr(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TCrossChallengeGetFormationRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TCrossChallengeGetFormationRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TCrossChallengeGetFormationRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TCrossChallengeGetFormationRsp::MergeFrom(const TCrossChallengeGetFormationRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  formationarr_.MergeFrom(from.formationarr_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_uname()) {
      set_uname(from.uname());
    }
    if (from.has_fightforce()) {
      set_fightforce(from.fightforce());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TCrossChallengeGetFormationRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TCrossChallengeGetFormationRsp::CopyFrom(const TCrossChallengeGetFormationRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TCrossChallengeGetFormationRsp::IsInitialized() const {

  return true;
}

void TCrossChallengeGetFormationRsp::Swap(TCrossChallengeGetFormationRsp* other) {
  if (other != this) {
    std::swap(uname_, other->uname_);
    std::swap(fightforce_, other->fightforce_);
    formationarr_.Swap(&other->formationarr_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TCrossChallengeGetFormationRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TCrossChallengeGetFormationRsp_descriptor_;
  metadata.reflection = TCrossChallengeGetFormationRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TCrossChallengeSetFormationReq::kFormationArrFieldNumber;
#endif  // !_MSC_VER

TCrossChallengeSetFormationReq::TCrossChallengeSetFormationReq()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TCrossChallengeSetFormationReq)
}

void TCrossChallengeSetFormationReq::InitAsDefaultInstance() {
}

TCrossChallengeSetFormationReq::TCrossChallengeSetFormationReq(const TCrossChallengeSetFormationReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TCrossChallengeSetFormationReq)
}

void TCrossChallengeSetFormationReq::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TCrossChallengeSetFormationReq::~TCrossChallengeSetFormationReq() {
  // @@protoc_insertion_point(destructor:pb.TCrossChallengeSetFormationReq)
  SharedDtor();
}

void TCrossChallengeSetFormationReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TCrossChallengeSetFormationReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TCrossChallengeSetFormationReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TCrossChallengeSetFormationReq_descriptor_;
}

const TCrossChallengeSetFormationReq& TCrossChallengeSetFormationReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fCrossChallenge_2eproto();
  return *default_instance_;
}

TCrossChallengeSetFormationReq* TCrossChallengeSetFormationReq::default_instance_ = NULL;

TCrossChallengeSetFormationReq* TCrossChallengeSetFormationReq::New() const {
  return new TCrossChallengeSetFormationReq;
}

void TCrossChallengeSetFormationReq::Clear() {
  formationarr_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TCrossChallengeSetFormationReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TCrossChallengeSetFormationReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .pb.TCrossChallengeFormationInfo FormationArr = 1;
      case 1: {
        if (tag == 10) {
         parse_FormationArr:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_formationarr()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_FormationArr;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TCrossChallengeSetFormationReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TCrossChallengeSetFormationReq)
  return false;
#undef DO_
}

void TCrossChallengeSetFormationReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TCrossChallengeSetFormationReq)
  // repeated .pb.TCrossChallengeFormationInfo FormationArr = 1;
  for (int i = 0; i < this->formationarr_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->formationarr(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TCrossChallengeSetFormationReq)
}

::google::protobuf::uint8* TCrossChallengeSetFormationReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TCrossChallengeSetFormationReq)
  // repeated .pb.TCrossChallengeFormationInfo FormationArr = 1;
  for (int i = 0; i < this->formationarr_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->formationarr(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TCrossChallengeSetFormationReq)
  return target;
}

int TCrossChallengeSetFormationReq::ByteSize() const {
  int total_size = 0;

  // repeated .pb.TCrossChallengeFormationInfo FormationArr = 1;
  total_size += 1 * this->formationarr_size();
  for (int i = 0; i < this->formationarr_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->formationarr(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TCrossChallengeSetFormationReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TCrossChallengeSetFormationReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TCrossChallengeSetFormationReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TCrossChallengeSetFormationReq::MergeFrom(const TCrossChallengeSetFormationReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  formationarr_.MergeFrom(from.formationarr_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TCrossChallengeSetFormationReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TCrossChallengeSetFormationReq::CopyFrom(const TCrossChallengeSetFormationReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TCrossChallengeSetFormationReq::IsInitialized() const {

  return true;
}

void TCrossChallengeSetFormationReq::Swap(TCrossChallengeSetFormationReq* other) {
  if (other != this) {
    formationarr_.Swap(&other->formationarr_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TCrossChallengeSetFormationReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TCrossChallengeSetFormationReq_descriptor_;
  metadata.reflection = TCrossChallengeSetFormationReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TCrossChallengeBattleHeroStatus::kHtidFieldNumber;
const int TCrossChallengeBattleHeroStatus::kPosFieldNumber;
const int TCrossChallengeBattleHeroStatus::kIsKilledFieldNumber;
const int TCrossChallengeBattleHeroStatus::kLevelFieldNumber;
const int TCrossChallengeBattleHeroStatus::kStarLvFieldNumber;
const int TCrossChallengeBattleHeroStatus::kHidFieldNumber;
#endif  // !_MSC_VER

TCrossChallengeBattleHeroStatus::TCrossChallengeBattleHeroStatus()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TCrossChallengeBattleHeroStatus)
}

void TCrossChallengeBattleHeroStatus::InitAsDefaultInstance() {
}

TCrossChallengeBattleHeroStatus::TCrossChallengeBattleHeroStatus(const TCrossChallengeBattleHeroStatus& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TCrossChallengeBattleHeroStatus)
}

void TCrossChallengeBattleHeroStatus::SharedCtor() {
  _cached_size_ = 0;
  htid_ = 0u;
  pos_ = 0u;
  iskilled_ = 0u;
  level_ = 0u;
  starlv_ = 0u;
  hid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TCrossChallengeBattleHeroStatus::~TCrossChallengeBattleHeroStatus() {
  // @@protoc_insertion_point(destructor:pb.TCrossChallengeBattleHeroStatus)
  SharedDtor();
}

void TCrossChallengeBattleHeroStatus::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TCrossChallengeBattleHeroStatus::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TCrossChallengeBattleHeroStatus::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TCrossChallengeBattleHeroStatus_descriptor_;
}

const TCrossChallengeBattleHeroStatus& TCrossChallengeBattleHeroStatus::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fCrossChallenge_2eproto();
  return *default_instance_;
}

TCrossChallengeBattleHeroStatus* TCrossChallengeBattleHeroStatus::default_instance_ = NULL;

TCrossChallengeBattleHeroStatus* TCrossChallengeBattleHeroStatus::New() const {
  return new TCrossChallengeBattleHeroStatus;
}

void TCrossChallengeBattleHeroStatus::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<TCrossChallengeBattleHeroStatus*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 63) {
    ZR_(htid_, hid_);
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TCrossChallengeBattleHeroStatus::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TCrossChallengeBattleHeroStatus)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 Htid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &htid_)));
          set_has_htid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_Pos;
        break;
      }

      // optional uint32 Pos = 2;
      case 2: {
        if (tag == 16) {
         parse_Pos:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &pos_)));
          set_has_pos();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_IsKilled;
        break;
      }

      // optional uint32 IsKilled = 3;
      case 3: {
        if (tag == 24) {
         parse_IsKilled:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &iskilled_)));
          set_has_iskilled();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_Level;
        break;
      }

      // optional uint32 Level = 4;
      case 4: {
        if (tag == 32) {
         parse_Level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &level_)));
          set_has_level();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_StarLv;
        break;
      }

      // optional uint32 StarLv = 5;
      case 5: {
        if (tag == 40) {
         parse_StarLv:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &starlv_)));
          set_has_starlv();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_Hid;
        break;
      }

      // optional uint32 Hid = 6;
      case 6: {
        if (tag == 48) {
         parse_Hid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &hid_)));
          set_has_hid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TCrossChallengeBattleHeroStatus)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TCrossChallengeBattleHeroStatus)
  return false;
#undef DO_
}

void TCrossChallengeBattleHeroStatus::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TCrossChallengeBattleHeroStatus)
  // optional uint32 Htid = 1;
  if (has_htid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->htid(), output);
  }

  // optional uint32 Pos = 2;
  if (has_pos()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->pos(), output);
  }

  // optional uint32 IsKilled = 3;
  if (has_iskilled()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->iskilled(), output);
  }

  // optional uint32 Level = 4;
  if (has_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->level(), output);
  }

  // optional uint32 StarLv = 5;
  if (has_starlv()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->starlv(), output);
  }

  // optional uint32 Hid = 6;
  if (has_hid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->hid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TCrossChallengeBattleHeroStatus)
}

::google::protobuf::uint8* TCrossChallengeBattleHeroStatus::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TCrossChallengeBattleHeroStatus)
  // optional uint32 Htid = 1;
  if (has_htid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->htid(), target);
  }

  // optional uint32 Pos = 2;
  if (has_pos()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->pos(), target);
  }

  // optional uint32 IsKilled = 3;
  if (has_iskilled()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->iskilled(), target);
  }

  // optional uint32 Level = 4;
  if (has_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->level(), target);
  }

  // optional uint32 StarLv = 5;
  if (has_starlv()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->starlv(), target);
  }

  // optional uint32 Hid = 6;
  if (has_hid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->hid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TCrossChallengeBattleHeroStatus)
  return target;
}

int TCrossChallengeBattleHeroStatus::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 Htid = 1;
    if (has_htid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->htid());
    }

    // optional uint32 Pos = 2;
    if (has_pos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->pos());
    }

    // optional uint32 IsKilled = 3;
    if (has_iskilled()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->iskilled());
    }

    // optional uint32 Level = 4;
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->level());
    }

    // optional uint32 StarLv = 5;
    if (has_starlv()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->starlv());
    }

    // optional uint32 Hid = 6;
    if (has_hid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->hid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TCrossChallengeBattleHeroStatus::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TCrossChallengeBattleHeroStatus* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TCrossChallengeBattleHeroStatus*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TCrossChallengeBattleHeroStatus::MergeFrom(const TCrossChallengeBattleHeroStatus& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_htid()) {
      set_htid(from.htid());
    }
    if (from.has_pos()) {
      set_pos(from.pos());
    }
    if (from.has_iskilled()) {
      set_iskilled(from.iskilled());
    }
    if (from.has_level()) {
      set_level(from.level());
    }
    if (from.has_starlv()) {
      set_starlv(from.starlv());
    }
    if (from.has_hid()) {
      set_hid(from.hid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TCrossChallengeBattleHeroStatus::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TCrossChallengeBattleHeroStatus::CopyFrom(const TCrossChallengeBattleHeroStatus& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TCrossChallengeBattleHeroStatus::IsInitialized() const {

  return true;
}

void TCrossChallengeBattleHeroStatus::Swap(TCrossChallengeBattleHeroStatus* other) {
  if (other != this) {
    std::swap(htid_, other->htid_);
    std::swap(pos_, other->pos_);
    std::swap(iskilled_, other->iskilled_);
    std::swap(level_, other->level_);
    std::swap(starlv_, other->starlv_);
    std::swap(hid_, other->hid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TCrossChallengeBattleHeroStatus::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TCrossChallengeBattleHeroStatus_descriptor_;
  metadata.reflection = TCrossChallengeBattleHeroStatus_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TCrossChallengeBattleSingle::kFormationIdFieldNumber;
const int TCrossChallengeBattleSingle::kAtkHeroInfoArrFieldNumber;
const int TCrossChallengeBattleSingle::kDefHeroInfoArrFieldNumber;
const int TCrossChallengeBattleSingle::kIsAtkWinFieldNumber;
#endif  // !_MSC_VER

TCrossChallengeBattleSingle::TCrossChallengeBattleSingle()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TCrossChallengeBattleSingle)
}

void TCrossChallengeBattleSingle::InitAsDefaultInstance() {
}

TCrossChallengeBattleSingle::TCrossChallengeBattleSingle(const TCrossChallengeBattleSingle& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TCrossChallengeBattleSingle)
}

void TCrossChallengeBattleSingle::SharedCtor() {
  _cached_size_ = 0;
  formationid_ = 0u;
  isatkwin_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TCrossChallengeBattleSingle::~TCrossChallengeBattleSingle() {
  // @@protoc_insertion_point(destructor:pb.TCrossChallengeBattleSingle)
  SharedDtor();
}

void TCrossChallengeBattleSingle::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TCrossChallengeBattleSingle::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TCrossChallengeBattleSingle::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TCrossChallengeBattleSingle_descriptor_;
}

const TCrossChallengeBattleSingle& TCrossChallengeBattleSingle::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fCrossChallenge_2eproto();
  return *default_instance_;
}

TCrossChallengeBattleSingle* TCrossChallengeBattleSingle::default_instance_ = NULL;

TCrossChallengeBattleSingle* TCrossChallengeBattleSingle::New() const {
  return new TCrossChallengeBattleSingle;
}

void TCrossChallengeBattleSingle::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<TCrossChallengeBattleSingle*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(formationid_, isatkwin_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  atkheroinfoarr_.Clear();
  defheroinfoarr_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TCrossChallengeBattleSingle::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TCrossChallengeBattleSingle)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 FormationId = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &formationid_)));
          set_has_formationid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_AtkHeroInfoArr;
        break;
      }

      // repeated .pb.TCrossChallengeBattleHeroStatus AtkHeroInfoArr = 2;
      case 2: {
        if (tag == 18) {
         parse_AtkHeroInfoArr:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_atkheroinfoarr()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_AtkHeroInfoArr;
        if (input->ExpectTag(26)) goto parse_DefHeroInfoArr;
        break;
      }

      // repeated .pb.TCrossChallengeBattleHeroStatus DefHeroInfoArr = 3;
      case 3: {
        if (tag == 26) {
         parse_DefHeroInfoArr:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_defheroinfoarr()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_DefHeroInfoArr;
        if (input->ExpectTag(32)) goto parse_IsAtkWin;
        break;
      }

      // optional uint32 IsAtkWin = 4;
      case 4: {
        if (tag == 32) {
         parse_IsAtkWin:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &isatkwin_)));
          set_has_isatkwin();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TCrossChallengeBattleSingle)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TCrossChallengeBattleSingle)
  return false;
#undef DO_
}

void TCrossChallengeBattleSingle::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TCrossChallengeBattleSingle)
  // optional uint32 FormationId = 1;
  if (has_formationid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->formationid(), output);
  }

  // repeated .pb.TCrossChallengeBattleHeroStatus AtkHeroInfoArr = 2;
  for (int i = 0; i < this->atkheroinfoarr_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->atkheroinfoarr(i), output);
  }

  // repeated .pb.TCrossChallengeBattleHeroStatus DefHeroInfoArr = 3;
  for (int i = 0; i < this->defheroinfoarr_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->defheroinfoarr(i), output);
  }

  // optional uint32 IsAtkWin = 4;
  if (has_isatkwin()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->isatkwin(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TCrossChallengeBattleSingle)
}

::google::protobuf::uint8* TCrossChallengeBattleSingle::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TCrossChallengeBattleSingle)
  // optional uint32 FormationId = 1;
  if (has_formationid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->formationid(), target);
  }

  // repeated .pb.TCrossChallengeBattleHeroStatus AtkHeroInfoArr = 2;
  for (int i = 0; i < this->atkheroinfoarr_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->atkheroinfoarr(i), target);
  }

  // repeated .pb.TCrossChallengeBattleHeroStatus DefHeroInfoArr = 3;
  for (int i = 0; i < this->defheroinfoarr_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->defheroinfoarr(i), target);
  }

  // optional uint32 IsAtkWin = 4;
  if (has_isatkwin()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->isatkwin(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TCrossChallengeBattleSingle)
  return target;
}

int TCrossChallengeBattleSingle::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 FormationId = 1;
    if (has_formationid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->formationid());
    }

    // optional uint32 IsAtkWin = 4;
    if (has_isatkwin()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->isatkwin());
    }

  }
  // repeated .pb.TCrossChallengeBattleHeroStatus AtkHeroInfoArr = 2;
  total_size += 1 * this->atkheroinfoarr_size();
  for (int i = 0; i < this->atkheroinfoarr_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->atkheroinfoarr(i));
  }

  // repeated .pb.TCrossChallengeBattleHeroStatus DefHeroInfoArr = 3;
  total_size += 1 * this->defheroinfoarr_size();
  for (int i = 0; i < this->defheroinfoarr_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->defheroinfoarr(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TCrossChallengeBattleSingle::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TCrossChallengeBattleSingle* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TCrossChallengeBattleSingle*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TCrossChallengeBattleSingle::MergeFrom(const TCrossChallengeBattleSingle& from) {
  GOOGLE_CHECK_NE(&from, this);
  atkheroinfoarr_.MergeFrom(from.atkheroinfoarr_);
  defheroinfoarr_.MergeFrom(from.defheroinfoarr_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_formationid()) {
      set_formationid(from.formationid());
    }
    if (from.has_isatkwin()) {
      set_isatkwin(from.isatkwin());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TCrossChallengeBattleSingle::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TCrossChallengeBattleSingle::CopyFrom(const TCrossChallengeBattleSingle& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TCrossChallengeBattleSingle::IsInitialized() const {

  return true;
}

void TCrossChallengeBattleSingle::Swap(TCrossChallengeBattleSingle* other) {
  if (other != this) {
    std::swap(formationid_, other->formationid_);
    atkheroinfoarr_.Swap(&other->atkheroinfoarr_);
    defheroinfoarr_.Swap(&other->defheroinfoarr_);
    std::swap(isatkwin_, other->isatkwin_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TCrossChallengeBattleSingle::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TCrossChallengeBattleSingle_descriptor_;
  metadata.reflection = TCrossChallengeBattleSingle_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TCrossChallengeGetBattleInfoReq::kRidArrFieldNumber;
#endif  // !_MSC_VER

TCrossChallengeGetBattleInfoReq::TCrossChallengeGetBattleInfoReq()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TCrossChallengeGetBattleInfoReq)
}

void TCrossChallengeGetBattleInfoReq::InitAsDefaultInstance() {
}

TCrossChallengeGetBattleInfoReq::TCrossChallengeGetBattleInfoReq(const TCrossChallengeGetBattleInfoReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TCrossChallengeGetBattleInfoReq)
}

void TCrossChallengeGetBattleInfoReq::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TCrossChallengeGetBattleInfoReq::~TCrossChallengeGetBattleInfoReq() {
  // @@protoc_insertion_point(destructor:pb.TCrossChallengeGetBattleInfoReq)
  SharedDtor();
}

void TCrossChallengeGetBattleInfoReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TCrossChallengeGetBattleInfoReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TCrossChallengeGetBattleInfoReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TCrossChallengeGetBattleInfoReq_descriptor_;
}

const TCrossChallengeGetBattleInfoReq& TCrossChallengeGetBattleInfoReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fCrossChallenge_2eproto();
  return *default_instance_;
}

TCrossChallengeGetBattleInfoReq* TCrossChallengeGetBattleInfoReq::default_instance_ = NULL;

TCrossChallengeGetBattleInfoReq* TCrossChallengeGetBattleInfoReq::New() const {
  return new TCrossChallengeGetBattleInfoReq;
}

void TCrossChallengeGetBattleInfoReq::Clear() {
  ridarr_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TCrossChallengeGetBattleInfoReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TCrossChallengeGetBattleInfoReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated uint64 RidArr = 1;
      case 1: {
        if (tag == 8) {
         parse_RidArr:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 1, 8, input, this->mutable_ridarr())));
        } else if (tag == 10) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, this->mutable_ridarr())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(8)) goto parse_RidArr;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TCrossChallengeGetBattleInfoReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TCrossChallengeGetBattleInfoReq)
  return false;
#undef DO_
}

void TCrossChallengeGetBattleInfoReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TCrossChallengeGetBattleInfoReq)
  // repeated uint64 RidArr = 1;
  for (int i = 0; i < this->ridarr_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(
      1, this->ridarr(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TCrossChallengeGetBattleInfoReq)
}

::google::protobuf::uint8* TCrossChallengeGetBattleInfoReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TCrossChallengeGetBattleInfoReq)
  // repeated uint64 RidArr = 1;
  for (int i = 0; i < this->ridarr_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt64ToArray(1, this->ridarr(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TCrossChallengeGetBattleInfoReq)
  return target;
}

int TCrossChallengeGetBattleInfoReq::ByteSize() const {
  int total_size = 0;

  // repeated uint64 RidArr = 1;
  {
    int data_size = 0;
    for (int i = 0; i < this->ridarr_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt64Size(this->ridarr(i));
    }
    total_size += 1 * this->ridarr_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TCrossChallengeGetBattleInfoReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TCrossChallengeGetBattleInfoReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TCrossChallengeGetBattleInfoReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TCrossChallengeGetBattleInfoReq::MergeFrom(const TCrossChallengeGetBattleInfoReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  ridarr_.MergeFrom(from.ridarr_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TCrossChallengeGetBattleInfoReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TCrossChallengeGetBattleInfoReq::CopyFrom(const TCrossChallengeGetBattleInfoReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TCrossChallengeGetBattleInfoReq::IsInitialized() const {

  return true;
}

void TCrossChallengeGetBattleInfoReq::Swap(TCrossChallengeGetBattleInfoReq* other) {
  if (other != this) {
    ridarr_.Swap(&other->ridarr_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TCrossChallengeGetBattleInfoReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TCrossChallengeGetBattleInfoReq_descriptor_;
  metadata.reflection = TCrossChallengeGetBattleInfoReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TCrossChallengeGetBattleInfoRsp::kAtkUserInfoFieldNumber;
const int TCrossChallengeGetBattleInfoRsp::kDefUserInfoFieldNumber;
const int TCrossChallengeGetBattleInfoRsp::kBattleInfoArrFieldNumber;
const int TCrossChallengeGetBattleInfoRsp::kAtkFightForceFieldNumber;
const int TCrossChallengeGetBattleInfoRsp::kDefFightForceFieldNumber;
#endif  // !_MSC_VER

TCrossChallengeGetBattleInfoRsp::TCrossChallengeGetBattleInfoRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TCrossChallengeGetBattleInfoRsp)
}

void TCrossChallengeGetBattleInfoRsp::InitAsDefaultInstance() {
  atkuserinfo_ = const_cast< ::pb::TCrossChallengeUserInfo*>(&::pb::TCrossChallengeUserInfo::default_instance());
  defuserinfo_ = const_cast< ::pb::TCrossChallengeUserInfo*>(&::pb::TCrossChallengeUserInfo::default_instance());
}

TCrossChallengeGetBattleInfoRsp::TCrossChallengeGetBattleInfoRsp(const TCrossChallengeGetBattleInfoRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TCrossChallengeGetBattleInfoRsp)
}

void TCrossChallengeGetBattleInfoRsp::SharedCtor() {
  _cached_size_ = 0;
  atkuserinfo_ = NULL;
  defuserinfo_ = NULL;
  atkfightforce_ = GOOGLE_ULONGLONG(0);
  deffightforce_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TCrossChallengeGetBattleInfoRsp::~TCrossChallengeGetBattleInfoRsp() {
  // @@protoc_insertion_point(destructor:pb.TCrossChallengeGetBattleInfoRsp)
  SharedDtor();
}

void TCrossChallengeGetBattleInfoRsp::SharedDtor() {
  if (this != default_instance_) {
    delete atkuserinfo_;
    delete defuserinfo_;
  }
}

void TCrossChallengeGetBattleInfoRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TCrossChallengeGetBattleInfoRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TCrossChallengeGetBattleInfoRsp_descriptor_;
}

const TCrossChallengeGetBattleInfoRsp& TCrossChallengeGetBattleInfoRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fCrossChallenge_2eproto();
  return *default_instance_;
}

TCrossChallengeGetBattleInfoRsp* TCrossChallengeGetBattleInfoRsp::default_instance_ = NULL;

TCrossChallengeGetBattleInfoRsp* TCrossChallengeGetBattleInfoRsp::New() const {
  return new TCrossChallengeGetBattleInfoRsp;
}

void TCrossChallengeGetBattleInfoRsp::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<TCrossChallengeGetBattleInfoRsp*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 27) {
    ZR_(atkfightforce_, deffightforce_);
    if (has_atkuserinfo()) {
      if (atkuserinfo_ != NULL) atkuserinfo_->::pb::TCrossChallengeUserInfo::Clear();
    }
    if (has_defuserinfo()) {
      if (defuserinfo_ != NULL) defuserinfo_->::pb::TCrossChallengeUserInfo::Clear();
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  battleinfoarr_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TCrossChallengeGetBattleInfoRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TCrossChallengeGetBattleInfoRsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .pb.TCrossChallengeUserInfo AtkUserInfo = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_atkuserinfo()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_DefUserInfo;
        break;
      }

      // optional .pb.TCrossChallengeUserInfo DefUserInfo = 2;
      case 2: {
        if (tag == 18) {
         parse_DefUserInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_defuserinfo()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_BattleInfoArr;
        break;
      }

      // repeated .pb.TCrossChallengeBattleSingle BattleInfoArr = 3;
      case 3: {
        if (tag == 26) {
         parse_BattleInfoArr:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_battleinfoarr()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_BattleInfoArr;
        if (input->ExpectTag(32)) goto parse_AtkFightForce;
        break;
      }

      // optional uint64 AtkFightForce = 4;
      case 4: {
        if (tag == 32) {
         parse_AtkFightForce:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &atkfightforce_)));
          set_has_atkfightforce();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_DefFightForce;
        break;
      }

      // optional uint64 DefFightForce = 5;
      case 5: {
        if (tag == 40) {
         parse_DefFightForce:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &deffightforce_)));
          set_has_deffightforce();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TCrossChallengeGetBattleInfoRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TCrossChallengeGetBattleInfoRsp)
  return false;
#undef DO_
}

void TCrossChallengeGetBattleInfoRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TCrossChallengeGetBattleInfoRsp)
  // optional .pb.TCrossChallengeUserInfo AtkUserInfo = 1;
  if (has_atkuserinfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->atkuserinfo(), output);
  }

  // optional .pb.TCrossChallengeUserInfo DefUserInfo = 2;
  if (has_defuserinfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->defuserinfo(), output);
  }

  // repeated .pb.TCrossChallengeBattleSingle BattleInfoArr = 3;
  for (int i = 0; i < this->battleinfoarr_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->battleinfoarr(i), output);
  }

  // optional uint64 AtkFightForce = 4;
  if (has_atkfightforce()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->atkfightforce(), output);
  }

  // optional uint64 DefFightForce = 5;
  if (has_deffightforce()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(5, this->deffightforce(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TCrossChallengeGetBattleInfoRsp)
}

::google::protobuf::uint8* TCrossChallengeGetBattleInfoRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TCrossChallengeGetBattleInfoRsp)
  // optional .pb.TCrossChallengeUserInfo AtkUserInfo = 1;
  if (has_atkuserinfo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->atkuserinfo(), target);
  }

  // optional .pb.TCrossChallengeUserInfo DefUserInfo = 2;
  if (has_defuserinfo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->defuserinfo(), target);
  }

  // repeated .pb.TCrossChallengeBattleSingle BattleInfoArr = 3;
  for (int i = 0; i < this->battleinfoarr_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->battleinfoarr(i), target);
  }

  // optional uint64 AtkFightForce = 4;
  if (has_atkfightforce()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->atkfightforce(), target);
  }

  // optional uint64 DefFightForce = 5;
  if (has_deffightforce()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(5, this->deffightforce(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TCrossChallengeGetBattleInfoRsp)
  return target;
}

int TCrossChallengeGetBattleInfoRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .pb.TCrossChallengeUserInfo AtkUserInfo = 1;
    if (has_atkuserinfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->atkuserinfo());
    }

    // optional .pb.TCrossChallengeUserInfo DefUserInfo = 2;
    if (has_defuserinfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->defuserinfo());
    }

    // optional uint64 AtkFightForce = 4;
    if (has_atkfightforce()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->atkfightforce());
    }

    // optional uint64 DefFightForce = 5;
    if (has_deffightforce()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->deffightforce());
    }

  }
  // repeated .pb.TCrossChallengeBattleSingle BattleInfoArr = 3;
  total_size += 1 * this->battleinfoarr_size();
  for (int i = 0; i < this->battleinfoarr_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->battleinfoarr(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TCrossChallengeGetBattleInfoRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TCrossChallengeGetBattleInfoRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TCrossChallengeGetBattleInfoRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TCrossChallengeGetBattleInfoRsp::MergeFrom(const TCrossChallengeGetBattleInfoRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  battleinfoarr_.MergeFrom(from.battleinfoarr_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_atkuserinfo()) {
      mutable_atkuserinfo()->::pb::TCrossChallengeUserInfo::MergeFrom(from.atkuserinfo());
    }
    if (from.has_defuserinfo()) {
      mutable_defuserinfo()->::pb::TCrossChallengeUserInfo::MergeFrom(from.defuserinfo());
    }
    if (from.has_atkfightforce()) {
      set_atkfightforce(from.atkfightforce());
    }
    if (from.has_deffightforce()) {
      set_deffightforce(from.deffightforce());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TCrossChallengeGetBattleInfoRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TCrossChallengeGetBattleInfoRsp::CopyFrom(const TCrossChallengeGetBattleInfoRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TCrossChallengeGetBattleInfoRsp::IsInitialized() const {

  return true;
}

void TCrossChallengeGetBattleInfoRsp::Swap(TCrossChallengeGetBattleInfoRsp* other) {
  if (other != this) {
    std::swap(atkuserinfo_, other->atkuserinfo_);
    std::swap(defuserinfo_, other->defuserinfo_);
    battleinfoarr_.Swap(&other->battleinfoarr_);
    std::swap(atkfightforce_, other->atkfightforce_);
    std::swap(deffightforce_, other->deffightforce_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TCrossChallengeGetBattleInfoRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TCrossChallengeGetBattleInfoRsp_descriptor_;
  metadata.reflection = TCrossChallengeGetBattleInfoRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TCrossChallengeGetBattleReportReq::kRidArrFieldNumber;
#endif  // !_MSC_VER

TCrossChallengeGetBattleReportReq::TCrossChallengeGetBattleReportReq()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TCrossChallengeGetBattleReportReq)
}

void TCrossChallengeGetBattleReportReq::InitAsDefaultInstance() {
}

TCrossChallengeGetBattleReportReq::TCrossChallengeGetBattleReportReq(const TCrossChallengeGetBattleReportReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TCrossChallengeGetBattleReportReq)
}

void TCrossChallengeGetBattleReportReq::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TCrossChallengeGetBattleReportReq::~TCrossChallengeGetBattleReportReq() {
  // @@protoc_insertion_point(destructor:pb.TCrossChallengeGetBattleReportReq)
  SharedDtor();
}

void TCrossChallengeGetBattleReportReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TCrossChallengeGetBattleReportReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TCrossChallengeGetBattleReportReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TCrossChallengeGetBattleReportReq_descriptor_;
}

const TCrossChallengeGetBattleReportReq& TCrossChallengeGetBattleReportReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fCrossChallenge_2eproto();
  return *default_instance_;
}

TCrossChallengeGetBattleReportReq* TCrossChallengeGetBattleReportReq::default_instance_ = NULL;

TCrossChallengeGetBattleReportReq* TCrossChallengeGetBattleReportReq::New() const {
  return new TCrossChallengeGetBattleReportReq;
}

void TCrossChallengeGetBattleReportReq::Clear() {
  ridarr_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TCrossChallengeGetBattleReportReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TCrossChallengeGetBattleReportReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated uint64 RidArr = 1;
      case 1: {
        if (tag == 8) {
         parse_RidArr:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 1, 8, input, this->mutable_ridarr())));
        } else if (tag == 10) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, this->mutable_ridarr())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(8)) goto parse_RidArr;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TCrossChallengeGetBattleReportReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TCrossChallengeGetBattleReportReq)
  return false;
#undef DO_
}

void TCrossChallengeGetBattleReportReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TCrossChallengeGetBattleReportReq)
  // repeated uint64 RidArr = 1;
  for (int i = 0; i < this->ridarr_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(
      1, this->ridarr(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TCrossChallengeGetBattleReportReq)
}

::google::protobuf::uint8* TCrossChallengeGetBattleReportReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TCrossChallengeGetBattleReportReq)
  // repeated uint64 RidArr = 1;
  for (int i = 0; i < this->ridarr_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt64ToArray(1, this->ridarr(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TCrossChallengeGetBattleReportReq)
  return target;
}

int TCrossChallengeGetBattleReportReq::ByteSize() const {
  int total_size = 0;

  // repeated uint64 RidArr = 1;
  {
    int data_size = 0;
    for (int i = 0; i < this->ridarr_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt64Size(this->ridarr(i));
    }
    total_size += 1 * this->ridarr_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TCrossChallengeGetBattleReportReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TCrossChallengeGetBattleReportReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TCrossChallengeGetBattleReportReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TCrossChallengeGetBattleReportReq::MergeFrom(const TCrossChallengeGetBattleReportReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  ridarr_.MergeFrom(from.ridarr_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TCrossChallengeGetBattleReportReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TCrossChallengeGetBattleReportReq::CopyFrom(const TCrossChallengeGetBattleReportReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TCrossChallengeGetBattleReportReq::IsInitialized() const {

  return true;
}

void TCrossChallengeGetBattleReportReq::Swap(TCrossChallengeGetBattleReportReq* other) {
  if (other != this) {
    ridarr_.Swap(&other->ridarr_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TCrossChallengeGetBattleReportReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TCrossChallengeGetBattleReportReq_descriptor_;
  metadata.reflection = TCrossChallengeGetBattleReportReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TCrossChallengeGetBattleReportRsp::kResultFieldNumber;
#endif  // !_MSC_VER

TCrossChallengeGetBattleReportRsp::TCrossChallengeGetBattleReportRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TCrossChallengeGetBattleReportRsp)
}

void TCrossChallengeGetBattleReportRsp::InitAsDefaultInstance() {
}

TCrossChallengeGetBattleReportRsp::TCrossChallengeGetBattleReportRsp(const TCrossChallengeGetBattleReportRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TCrossChallengeGetBattleReportRsp)
}

void TCrossChallengeGetBattleReportRsp::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TCrossChallengeGetBattleReportRsp::~TCrossChallengeGetBattleReportRsp() {
  // @@protoc_insertion_point(destructor:pb.TCrossChallengeGetBattleReportRsp)
  SharedDtor();
}

void TCrossChallengeGetBattleReportRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TCrossChallengeGetBattleReportRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TCrossChallengeGetBattleReportRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TCrossChallengeGetBattleReportRsp_descriptor_;
}

const TCrossChallengeGetBattleReportRsp& TCrossChallengeGetBattleReportRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fCrossChallenge_2eproto();
  return *default_instance_;
}

TCrossChallengeGetBattleReportRsp* TCrossChallengeGetBattleReportRsp::default_instance_ = NULL;

TCrossChallengeGetBattleReportRsp* TCrossChallengeGetBattleReportRsp::New() const {
  return new TCrossChallengeGetBattleReportRsp;
}

void TCrossChallengeGetBattleReportRsp::Clear() {
  result_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TCrossChallengeGetBattleReportRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TCrossChallengeGetBattleReportRsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated bytes Result = 1;
      case 1: {
        if (tag == 10) {
         parse_Result:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->add_result()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_Result;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TCrossChallengeGetBattleReportRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TCrossChallengeGetBattleReportRsp)
  return false;
#undef DO_
}

void TCrossChallengeGetBattleReportRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TCrossChallengeGetBattleReportRsp)
  // repeated bytes Result = 1;
  for (int i = 0; i < this->result_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      1, this->result(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TCrossChallengeGetBattleReportRsp)
}

::google::protobuf::uint8* TCrossChallengeGetBattleReportRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TCrossChallengeGetBattleReportRsp)
  // repeated bytes Result = 1;
  for (int i = 0; i < this->result_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteBytesToArray(1, this->result(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TCrossChallengeGetBattleReportRsp)
  return target;
}

int TCrossChallengeGetBattleReportRsp::ByteSize() const {
  int total_size = 0;

  // repeated bytes Result = 1;
  total_size += 1 * this->result_size();
  for (int i = 0; i < this->result_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::BytesSize(
      this->result(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TCrossChallengeGetBattleReportRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TCrossChallengeGetBattleReportRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TCrossChallengeGetBattleReportRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TCrossChallengeGetBattleReportRsp::MergeFrom(const TCrossChallengeGetBattleReportRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  result_.MergeFrom(from.result_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TCrossChallengeGetBattleReportRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TCrossChallengeGetBattleReportRsp::CopyFrom(const TCrossChallengeGetBattleReportRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TCrossChallengeGetBattleReportRsp::IsInitialized() const {

  return true;
}

void TCrossChallengeGetBattleReportRsp::Swap(TCrossChallengeGetBattleReportRsp* other) {
  if (other != this) {
    result_.Swap(&other->result_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TCrossChallengeGetBattleReportRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TCrossChallengeGetBattleReportRsp_descriptor_;
  metadata.reflection = TCrossChallengeGetBattleReportRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TCrossChallengeGetRankRewardReq::kRankIdFieldNumber;
#endif  // !_MSC_VER

TCrossChallengeGetRankRewardReq::TCrossChallengeGetRankRewardReq()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TCrossChallengeGetRankRewardReq)
}

void TCrossChallengeGetRankRewardReq::InitAsDefaultInstance() {
}

TCrossChallengeGetRankRewardReq::TCrossChallengeGetRankRewardReq(const TCrossChallengeGetRankRewardReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TCrossChallengeGetRankRewardReq)
}

void TCrossChallengeGetRankRewardReq::SharedCtor() {
  _cached_size_ = 0;
  rankid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TCrossChallengeGetRankRewardReq::~TCrossChallengeGetRankRewardReq() {
  // @@protoc_insertion_point(destructor:pb.TCrossChallengeGetRankRewardReq)
  SharedDtor();
}

void TCrossChallengeGetRankRewardReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TCrossChallengeGetRankRewardReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TCrossChallengeGetRankRewardReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TCrossChallengeGetRankRewardReq_descriptor_;
}

const TCrossChallengeGetRankRewardReq& TCrossChallengeGetRankRewardReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fCrossChallenge_2eproto();
  return *default_instance_;
}

TCrossChallengeGetRankRewardReq* TCrossChallengeGetRankRewardReq::default_instance_ = NULL;

TCrossChallengeGetRankRewardReq* TCrossChallengeGetRankRewardReq::New() const {
  return new TCrossChallengeGetRankRewardReq;
}

void TCrossChallengeGetRankRewardReq::Clear() {
  rankid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TCrossChallengeGetRankRewardReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TCrossChallengeGetRankRewardReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 RankId = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &rankid_)));
          set_has_rankid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TCrossChallengeGetRankRewardReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TCrossChallengeGetRankRewardReq)
  return false;
#undef DO_
}

void TCrossChallengeGetRankRewardReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TCrossChallengeGetRankRewardReq)
  // optional uint32 RankId = 1;
  if (has_rankid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->rankid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TCrossChallengeGetRankRewardReq)
}

::google::protobuf::uint8* TCrossChallengeGetRankRewardReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TCrossChallengeGetRankRewardReq)
  // optional uint32 RankId = 1;
  if (has_rankid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->rankid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TCrossChallengeGetRankRewardReq)
  return target;
}

int TCrossChallengeGetRankRewardReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 RankId = 1;
    if (has_rankid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->rankid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TCrossChallengeGetRankRewardReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TCrossChallengeGetRankRewardReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TCrossChallengeGetRankRewardReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TCrossChallengeGetRankRewardReq::MergeFrom(const TCrossChallengeGetRankRewardReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_rankid()) {
      set_rankid(from.rankid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TCrossChallengeGetRankRewardReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TCrossChallengeGetRankRewardReq::CopyFrom(const TCrossChallengeGetRankRewardReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TCrossChallengeGetRankRewardReq::IsInitialized() const {

  return true;
}

void TCrossChallengeGetRankRewardReq::Swap(TCrossChallengeGetRankRewardReq* other) {
  if (other != this) {
    std::swap(rankid_, other->rankid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TCrossChallengeGetRankRewardReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TCrossChallengeGetRankRewardReq_descriptor_;
  metadata.reflection = TCrossChallengeGetRankRewardReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TCrossChallengeGetRankRewardRsp::kRewardArrFieldNumber;
#endif  // !_MSC_VER

TCrossChallengeGetRankRewardRsp::TCrossChallengeGetRankRewardRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TCrossChallengeGetRankRewardRsp)
}

void TCrossChallengeGetRankRewardRsp::InitAsDefaultInstance() {
}

TCrossChallengeGetRankRewardRsp::TCrossChallengeGetRankRewardRsp(const TCrossChallengeGetRankRewardRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TCrossChallengeGetRankRewardRsp)
}

void TCrossChallengeGetRankRewardRsp::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TCrossChallengeGetRankRewardRsp::~TCrossChallengeGetRankRewardRsp() {
  // @@protoc_insertion_point(destructor:pb.TCrossChallengeGetRankRewardRsp)
  SharedDtor();
}

void TCrossChallengeGetRankRewardRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TCrossChallengeGetRankRewardRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TCrossChallengeGetRankRewardRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TCrossChallengeGetRankRewardRsp_descriptor_;
}

const TCrossChallengeGetRankRewardRsp& TCrossChallengeGetRankRewardRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fCrossChallenge_2eproto();
  return *default_instance_;
}

TCrossChallengeGetRankRewardRsp* TCrossChallengeGetRankRewardRsp::default_instance_ = NULL;

TCrossChallengeGetRankRewardRsp* TCrossChallengeGetRankRewardRsp::New() const {
  return new TCrossChallengeGetRankRewardRsp;
}

void TCrossChallengeGetRankRewardRsp::Clear() {
  rewardarr_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TCrossChallengeGetRankRewardRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TCrossChallengeGetRankRewardRsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .pb.TCommonReward RewardArr = 1;
      case 1: {
        if (tag == 10) {
         parse_RewardArr:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_rewardarr()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_RewardArr;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TCrossChallengeGetRankRewardRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TCrossChallengeGetRankRewardRsp)
  return false;
#undef DO_
}

void TCrossChallengeGetRankRewardRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TCrossChallengeGetRankRewardRsp)
  // repeated .pb.TCommonReward RewardArr = 1;
  for (int i = 0; i < this->rewardarr_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->rewardarr(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TCrossChallengeGetRankRewardRsp)
}

::google::protobuf::uint8* TCrossChallengeGetRankRewardRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TCrossChallengeGetRankRewardRsp)
  // repeated .pb.TCommonReward RewardArr = 1;
  for (int i = 0; i < this->rewardarr_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->rewardarr(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TCrossChallengeGetRankRewardRsp)
  return target;
}

int TCrossChallengeGetRankRewardRsp::ByteSize() const {
  int total_size = 0;

  // repeated .pb.TCommonReward RewardArr = 1;
  total_size += 1 * this->rewardarr_size();
  for (int i = 0; i < this->rewardarr_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->rewardarr(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TCrossChallengeGetRankRewardRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TCrossChallengeGetRankRewardRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TCrossChallengeGetRankRewardRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TCrossChallengeGetRankRewardRsp::MergeFrom(const TCrossChallengeGetRankRewardRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  rewardarr_.MergeFrom(from.rewardarr_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TCrossChallengeGetRankRewardRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TCrossChallengeGetRankRewardRsp::CopyFrom(const TCrossChallengeGetRankRewardRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TCrossChallengeGetRankRewardRsp::IsInitialized() const {

  return true;
}

void TCrossChallengeGetRankRewardRsp::Swap(TCrossChallengeGetRankRewardRsp* other) {
  if (other != this) {
    rewardarr_.Swap(&other->rewardarr_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TCrossChallengeGetRankRewardRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TCrossChallengeGetRankRewardRsp_descriptor_;
  metadata.reflection = TCrossChallengeGetRankRewardRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TCrossChallengeReportSimpleInfo::kRidArrFieldNumber;
const int TCrossChallengeReportSimpleInfo::kEnemyUserInfoFieldNumber;
const int TCrossChallengeReportSimpleInfo::kIsWinFieldNumber;
const int TCrossChallengeReportSimpleInfo::kFightForceFieldNumber;
#endif  // !_MSC_VER

TCrossChallengeReportSimpleInfo::TCrossChallengeReportSimpleInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TCrossChallengeReportSimpleInfo)
}

void TCrossChallengeReportSimpleInfo::InitAsDefaultInstance() {
  enemyuserinfo_ = const_cast< ::pb::TCrossChallengeUserInfo*>(&::pb::TCrossChallengeUserInfo::default_instance());
}

TCrossChallengeReportSimpleInfo::TCrossChallengeReportSimpleInfo(const TCrossChallengeReportSimpleInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TCrossChallengeReportSimpleInfo)
}

void TCrossChallengeReportSimpleInfo::SharedCtor() {
  _cached_size_ = 0;
  enemyuserinfo_ = NULL;
  iswin_ = 0u;
  fightforce_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TCrossChallengeReportSimpleInfo::~TCrossChallengeReportSimpleInfo() {
  // @@protoc_insertion_point(destructor:pb.TCrossChallengeReportSimpleInfo)
  SharedDtor();
}

void TCrossChallengeReportSimpleInfo::SharedDtor() {
  if (this != default_instance_) {
    delete enemyuserinfo_;
  }
}

void TCrossChallengeReportSimpleInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TCrossChallengeReportSimpleInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TCrossChallengeReportSimpleInfo_descriptor_;
}

const TCrossChallengeReportSimpleInfo& TCrossChallengeReportSimpleInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fCrossChallenge_2eproto();
  return *default_instance_;
}

TCrossChallengeReportSimpleInfo* TCrossChallengeReportSimpleInfo::default_instance_ = NULL;

TCrossChallengeReportSimpleInfo* TCrossChallengeReportSimpleInfo::New() const {
  return new TCrossChallengeReportSimpleInfo;
}

void TCrossChallengeReportSimpleInfo::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<TCrossChallengeReportSimpleInfo*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 14) {
    ZR_(fightforce_, iswin_);
    if (has_enemyuserinfo()) {
      if (enemyuserinfo_ != NULL) enemyuserinfo_->::pb::TCrossChallengeUserInfo::Clear();
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ridarr_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TCrossChallengeReportSimpleInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TCrossChallengeReportSimpleInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated uint64 RidArr = 1;
      case 1: {
        if (tag == 8) {
         parse_RidArr:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 1, 8, input, this->mutable_ridarr())));
        } else if (tag == 10) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, this->mutable_ridarr())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(8)) goto parse_RidArr;
        if (input->ExpectTag(18)) goto parse_EnemyUserInfo;
        break;
      }

      // optional .pb.TCrossChallengeUserInfo EnemyUserInfo = 2;
      case 2: {
        if (tag == 18) {
         parse_EnemyUserInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_enemyuserinfo()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_IsWin;
        break;
      }

      // optional uint32 IsWin = 3;
      case 3: {
        if (tag == 24) {
         parse_IsWin:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &iswin_)));
          set_has_iswin();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_FightForce;
        break;
      }

      // optional uint64 FightForce = 4;
      case 4: {
        if (tag == 32) {
         parse_FightForce:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &fightforce_)));
          set_has_fightforce();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TCrossChallengeReportSimpleInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TCrossChallengeReportSimpleInfo)
  return false;
#undef DO_
}

void TCrossChallengeReportSimpleInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TCrossChallengeReportSimpleInfo)
  // repeated uint64 RidArr = 1;
  for (int i = 0; i < this->ridarr_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(
      1, this->ridarr(i), output);
  }

  // optional .pb.TCrossChallengeUserInfo EnemyUserInfo = 2;
  if (has_enemyuserinfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->enemyuserinfo(), output);
  }

  // optional uint32 IsWin = 3;
  if (has_iswin()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->iswin(), output);
  }

  // optional uint64 FightForce = 4;
  if (has_fightforce()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->fightforce(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TCrossChallengeReportSimpleInfo)
}

::google::protobuf::uint8* TCrossChallengeReportSimpleInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TCrossChallengeReportSimpleInfo)
  // repeated uint64 RidArr = 1;
  for (int i = 0; i < this->ridarr_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt64ToArray(1, this->ridarr(i), target);
  }

  // optional .pb.TCrossChallengeUserInfo EnemyUserInfo = 2;
  if (has_enemyuserinfo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->enemyuserinfo(), target);
  }

  // optional uint32 IsWin = 3;
  if (has_iswin()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->iswin(), target);
  }

  // optional uint64 FightForce = 4;
  if (has_fightforce()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->fightforce(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TCrossChallengeReportSimpleInfo)
  return target;
}

int TCrossChallengeReportSimpleInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // optional .pb.TCrossChallengeUserInfo EnemyUserInfo = 2;
    if (has_enemyuserinfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->enemyuserinfo());
    }

    // optional uint32 IsWin = 3;
    if (has_iswin()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->iswin());
    }

    // optional uint64 FightForce = 4;
    if (has_fightforce()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->fightforce());
    }

  }
  // repeated uint64 RidArr = 1;
  {
    int data_size = 0;
    for (int i = 0; i < this->ridarr_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt64Size(this->ridarr(i));
    }
    total_size += 1 * this->ridarr_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TCrossChallengeReportSimpleInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TCrossChallengeReportSimpleInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TCrossChallengeReportSimpleInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TCrossChallengeReportSimpleInfo::MergeFrom(const TCrossChallengeReportSimpleInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  ridarr_.MergeFrom(from.ridarr_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_enemyuserinfo()) {
      mutable_enemyuserinfo()->::pb::TCrossChallengeUserInfo::MergeFrom(from.enemyuserinfo());
    }
    if (from.has_iswin()) {
      set_iswin(from.iswin());
    }
    if (from.has_fightforce()) {
      set_fightforce(from.fightforce());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TCrossChallengeReportSimpleInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TCrossChallengeReportSimpleInfo::CopyFrom(const TCrossChallengeReportSimpleInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TCrossChallengeReportSimpleInfo::IsInitialized() const {

  return true;
}

void TCrossChallengeReportSimpleInfo::Swap(TCrossChallengeReportSimpleInfo* other) {
  if (other != this) {
    ridarr_.Swap(&other->ridarr_);
    std::swap(enemyuserinfo_, other->enemyuserinfo_);
    std::swap(iswin_, other->iswin_);
    std::swap(fightforce_, other->fightforce_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TCrossChallengeReportSimpleInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TCrossChallengeReportSimpleInfo_descriptor_;
  metadata.reflection = TCrossChallengeReportSimpleInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TCrossChallengeGetAuditionReportArrRsp::kReportArrFieldNumber;
#endif  // !_MSC_VER

TCrossChallengeGetAuditionReportArrRsp::TCrossChallengeGetAuditionReportArrRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TCrossChallengeGetAuditionReportArrRsp)
}

void TCrossChallengeGetAuditionReportArrRsp::InitAsDefaultInstance() {
}

TCrossChallengeGetAuditionReportArrRsp::TCrossChallengeGetAuditionReportArrRsp(const TCrossChallengeGetAuditionReportArrRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TCrossChallengeGetAuditionReportArrRsp)
}

void TCrossChallengeGetAuditionReportArrRsp::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TCrossChallengeGetAuditionReportArrRsp::~TCrossChallengeGetAuditionReportArrRsp() {
  // @@protoc_insertion_point(destructor:pb.TCrossChallengeGetAuditionReportArrRsp)
  SharedDtor();
}

void TCrossChallengeGetAuditionReportArrRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TCrossChallengeGetAuditionReportArrRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TCrossChallengeGetAuditionReportArrRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TCrossChallengeGetAuditionReportArrRsp_descriptor_;
}

const TCrossChallengeGetAuditionReportArrRsp& TCrossChallengeGetAuditionReportArrRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fCrossChallenge_2eproto();
  return *default_instance_;
}

TCrossChallengeGetAuditionReportArrRsp* TCrossChallengeGetAuditionReportArrRsp::default_instance_ = NULL;

TCrossChallengeGetAuditionReportArrRsp* TCrossChallengeGetAuditionReportArrRsp::New() const {
  return new TCrossChallengeGetAuditionReportArrRsp;
}

void TCrossChallengeGetAuditionReportArrRsp::Clear() {
  reportarr_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TCrossChallengeGetAuditionReportArrRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TCrossChallengeGetAuditionReportArrRsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .pb.TCrossChallengeReportSimpleInfo ReportArr = 1;
      case 1: {
        if (tag == 10) {
         parse_ReportArr:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_reportarr()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_ReportArr;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TCrossChallengeGetAuditionReportArrRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TCrossChallengeGetAuditionReportArrRsp)
  return false;
#undef DO_
}

void TCrossChallengeGetAuditionReportArrRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TCrossChallengeGetAuditionReportArrRsp)
  // repeated .pb.TCrossChallengeReportSimpleInfo ReportArr = 1;
  for (int i = 0; i < this->reportarr_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->reportarr(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TCrossChallengeGetAuditionReportArrRsp)
}

::google::protobuf::uint8* TCrossChallengeGetAuditionReportArrRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TCrossChallengeGetAuditionReportArrRsp)
  // repeated .pb.TCrossChallengeReportSimpleInfo ReportArr = 1;
  for (int i = 0; i < this->reportarr_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->reportarr(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TCrossChallengeGetAuditionReportArrRsp)
  return target;
}

int TCrossChallengeGetAuditionReportArrRsp::ByteSize() const {
  int total_size = 0;

  // repeated .pb.TCrossChallengeReportSimpleInfo ReportArr = 1;
  total_size += 1 * this->reportarr_size();
  for (int i = 0; i < this->reportarr_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->reportarr(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TCrossChallengeGetAuditionReportArrRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TCrossChallengeGetAuditionReportArrRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TCrossChallengeGetAuditionReportArrRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TCrossChallengeGetAuditionReportArrRsp::MergeFrom(const TCrossChallengeGetAuditionReportArrRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  reportarr_.MergeFrom(from.reportarr_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TCrossChallengeGetAuditionReportArrRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TCrossChallengeGetAuditionReportArrRsp::CopyFrom(const TCrossChallengeGetAuditionReportArrRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TCrossChallengeGetAuditionReportArrRsp::IsInitialized() const {

  return true;
}

void TCrossChallengeGetAuditionReportArrRsp::Swap(TCrossChallengeGetAuditionReportArrRsp* other) {
  if (other != this) {
    reportarr_.Swap(&other->reportarr_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TCrossChallengeGetAuditionReportArrRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TCrossChallengeGetAuditionReportArrRsp_descriptor_;
  metadata.reflection = TCrossChallengeGetAuditionReportArrRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TCrossChallengeGuessInfo::kStepFieldNumber;
const int TCrossChallengeGuessInfo::kRidArrFieldNumber;
const int TCrossChallengeGuessInfo::kAtkInfoFieldNumber;
const int TCrossChallengeGuessInfo::kDefInfoFieldNumber;
const int TCrossChallengeGuessInfo::kAtkUserFieldNumber;
const int TCrossChallengeGuessInfo::kDefUserFieldNumber;
const int TCrossChallengeGuessInfo::kGuessStatusFieldNumber;
const int TCrossChallengeGuessInfo::kAtkBetNumFieldNumber;
const int TCrossChallengeGuessInfo::kDefBetNumFieldNumber;
const int TCrossChallengeGuessInfo::kIsRewardFieldNumber;
#endif  // !_MSC_VER

TCrossChallengeGuessInfo::TCrossChallengeGuessInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TCrossChallengeGuessInfo)
}

void TCrossChallengeGuessInfo::InitAsDefaultInstance() {
  atkinfo_ = const_cast< ::pb::TCrossChallengeBattleInfo*>(&::pb::TCrossChallengeBattleInfo::default_instance());
  definfo_ = const_cast< ::pb::TCrossChallengeBattleInfo*>(&::pb::TCrossChallengeBattleInfo::default_instance());
  atkuser_ = const_cast< ::pb::TCrossChallengeUserInfo*>(&::pb::TCrossChallengeUserInfo::default_instance());
  defuser_ = const_cast< ::pb::TCrossChallengeUserInfo*>(&::pb::TCrossChallengeUserInfo::default_instance());
}

TCrossChallengeGuessInfo::TCrossChallengeGuessInfo(const TCrossChallengeGuessInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TCrossChallengeGuessInfo)
}

void TCrossChallengeGuessInfo::SharedCtor() {
  _cached_size_ = 0;
  step_ = 1;
  atkinfo_ = NULL;
  definfo_ = NULL;
  atkuser_ = NULL;
  defuser_ = NULL;
  guessstatus_ = 0;
  atkbetnum_ = 0u;
  defbetnum_ = 0u;
  isreward_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TCrossChallengeGuessInfo::~TCrossChallengeGuessInfo() {
  // @@protoc_insertion_point(destructor:pb.TCrossChallengeGuessInfo)
  SharedDtor();
}

void TCrossChallengeGuessInfo::SharedDtor() {
  if (this != default_instance_) {
    delete atkinfo_;
    delete definfo_;
    delete atkuser_;
    delete defuser_;
  }
}

void TCrossChallengeGuessInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TCrossChallengeGuessInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TCrossChallengeGuessInfo_descriptor_;
}

const TCrossChallengeGuessInfo& TCrossChallengeGuessInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fCrossChallenge_2eproto();
  return *default_instance_;
}

TCrossChallengeGuessInfo* TCrossChallengeGuessInfo::default_instance_ = NULL;

TCrossChallengeGuessInfo* TCrossChallengeGuessInfo::New() const {
  return new TCrossChallengeGuessInfo;
}

void TCrossChallengeGuessInfo::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<TCrossChallengeGuessInfo*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 253) {
    step_ = 1;
    if (has_atkinfo()) {
      if (atkinfo_ != NULL) atkinfo_->::pb::TCrossChallengeBattleInfo::Clear();
    }
    if (has_definfo()) {
      if (definfo_ != NULL) definfo_->::pb::TCrossChallengeBattleInfo::Clear();
    }
    if (has_atkuser()) {
      if (atkuser_ != NULL) atkuser_->::pb::TCrossChallengeUserInfo::Clear();
    }
    if (has_defuser()) {
      if (defuser_ != NULL) defuser_->::pb::TCrossChallengeUserInfo::Clear();
    }
    guessstatus_ = 0;
    atkbetnum_ = 0u;
  }
  ZR_(defbetnum_, isreward_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ridarr_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TCrossChallengeGuessInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TCrossChallengeGuessInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .pb.EChallengeStep Step = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::pb::EChallengeStep_IsValid(value)) {
            set_step(static_cast< ::pb::EChallengeStep >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_RidArr;
        break;
      }

      // repeated uint64 RidArr = 2;
      case 2: {
        if (tag == 16) {
         parse_RidArr:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 1, 16, input, this->mutable_ridarr())));
        } else if (tag == 18) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, this->mutable_ridarr())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_RidArr;
        if (input->ExpectTag(26)) goto parse_AtkInfo;
        break;
      }

      // optional .pb.TCrossChallengeBattleInfo AtkInfo = 3;
      case 3: {
        if (tag == 26) {
         parse_AtkInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_atkinfo()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_DefInfo;
        break;
      }

      // optional .pb.TCrossChallengeBattleInfo DefInfo = 4;
      case 4: {
        if (tag == 34) {
         parse_DefInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_definfo()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_AtkUser;
        break;
      }

      // optional .pb.TCrossChallengeUserInfo AtkUser = 5;
      case 5: {
        if (tag == 42) {
         parse_AtkUser:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_atkuser()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_DefUser;
        break;
      }

      // optional .pb.TCrossChallengeUserInfo DefUser = 6;
      case 6: {
        if (tag == 50) {
         parse_DefUser:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_defuser()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_GuessStatus;
        break;
      }

      // optional .pb.EChallengeGuessStatus GuessStatus = 7;
      case 7: {
        if (tag == 56) {
         parse_GuessStatus:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::pb::EChallengeGuessStatus_IsValid(value)) {
            set_guessstatus(static_cast< ::pb::EChallengeGuessStatus >(value));
          } else {
            mutable_unknown_fields()->AddVarint(7, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_AtkBetNum;
        break;
      }

      // optional uint32 AtkBetNum = 8;
      case 8: {
        if (tag == 64) {
         parse_AtkBetNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &atkbetnum_)));
          set_has_atkbetnum();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_DefBetNum;
        break;
      }

      // optional uint32 DefBetNum = 9;
      case 9: {
        if (tag == 72) {
         parse_DefBetNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &defbetnum_)));
          set_has_defbetnum();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(80)) goto parse_IsReward;
        break;
      }

      // optional uint32 IsReward = 10;
      case 10: {
        if (tag == 80) {
         parse_IsReward:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &isreward_)));
          set_has_isreward();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TCrossChallengeGuessInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TCrossChallengeGuessInfo)
  return false;
#undef DO_
}

void TCrossChallengeGuessInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TCrossChallengeGuessInfo)
  // optional .pb.EChallengeStep Step = 1;
  if (has_step()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->step(), output);
  }

  // repeated uint64 RidArr = 2;
  for (int i = 0; i < this->ridarr_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(
      2, this->ridarr(i), output);
  }

  // optional .pb.TCrossChallengeBattleInfo AtkInfo = 3;
  if (has_atkinfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->atkinfo(), output);
  }

  // optional .pb.TCrossChallengeBattleInfo DefInfo = 4;
  if (has_definfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->definfo(), output);
  }

  // optional .pb.TCrossChallengeUserInfo AtkUser = 5;
  if (has_atkuser()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->atkuser(), output);
  }

  // optional .pb.TCrossChallengeUserInfo DefUser = 6;
  if (has_defuser()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->defuser(), output);
  }

  // optional .pb.EChallengeGuessStatus GuessStatus = 7;
  if (has_guessstatus()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      7, this->guessstatus(), output);
  }

  // optional uint32 AtkBetNum = 8;
  if (has_atkbetnum()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->atkbetnum(), output);
  }

  // optional uint32 DefBetNum = 9;
  if (has_defbetnum()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->defbetnum(), output);
  }

  // optional uint32 IsReward = 10;
  if (has_isreward()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->isreward(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TCrossChallengeGuessInfo)
}

::google::protobuf::uint8* TCrossChallengeGuessInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TCrossChallengeGuessInfo)
  // optional .pb.EChallengeStep Step = 1;
  if (has_step()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->step(), target);
  }

  // repeated uint64 RidArr = 2;
  for (int i = 0; i < this->ridarr_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt64ToArray(2, this->ridarr(i), target);
  }

  // optional .pb.TCrossChallengeBattleInfo AtkInfo = 3;
  if (has_atkinfo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->atkinfo(), target);
  }

  // optional .pb.TCrossChallengeBattleInfo DefInfo = 4;
  if (has_definfo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->definfo(), target);
  }

  // optional .pb.TCrossChallengeUserInfo AtkUser = 5;
  if (has_atkuser()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->atkuser(), target);
  }

  // optional .pb.TCrossChallengeUserInfo DefUser = 6;
  if (has_defuser()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->defuser(), target);
  }

  // optional .pb.EChallengeGuessStatus GuessStatus = 7;
  if (has_guessstatus()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      7, this->guessstatus(), target);
  }

  // optional uint32 AtkBetNum = 8;
  if (has_atkbetnum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->atkbetnum(), target);
  }

  // optional uint32 DefBetNum = 9;
  if (has_defbetnum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->defbetnum(), target);
  }

  // optional uint32 IsReward = 10;
  if (has_isreward()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(10, this->isreward(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TCrossChallengeGuessInfo)
  return target;
}

int TCrossChallengeGuessInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .pb.EChallengeStep Step = 1;
    if (has_step()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->step());
    }

    // optional .pb.TCrossChallengeBattleInfo AtkInfo = 3;
    if (has_atkinfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->atkinfo());
    }

    // optional .pb.TCrossChallengeBattleInfo DefInfo = 4;
    if (has_definfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->definfo());
    }

    // optional .pb.TCrossChallengeUserInfo AtkUser = 5;
    if (has_atkuser()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->atkuser());
    }

    // optional .pb.TCrossChallengeUserInfo DefUser = 6;
    if (has_defuser()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->defuser());
    }

    // optional .pb.EChallengeGuessStatus GuessStatus = 7;
    if (has_guessstatus()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->guessstatus());
    }

    // optional uint32 AtkBetNum = 8;
    if (has_atkbetnum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->atkbetnum());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional uint32 DefBetNum = 9;
    if (has_defbetnum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->defbetnum());
    }

    // optional uint32 IsReward = 10;
    if (has_isreward()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->isreward());
    }

  }
  // repeated uint64 RidArr = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->ridarr_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt64Size(this->ridarr(i));
    }
    total_size += 1 * this->ridarr_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TCrossChallengeGuessInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TCrossChallengeGuessInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TCrossChallengeGuessInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TCrossChallengeGuessInfo::MergeFrom(const TCrossChallengeGuessInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  ridarr_.MergeFrom(from.ridarr_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_step()) {
      set_step(from.step());
    }
    if (from.has_atkinfo()) {
      mutable_atkinfo()->::pb::TCrossChallengeBattleInfo::MergeFrom(from.atkinfo());
    }
    if (from.has_definfo()) {
      mutable_definfo()->::pb::TCrossChallengeBattleInfo::MergeFrom(from.definfo());
    }
    if (from.has_atkuser()) {
      mutable_atkuser()->::pb::TCrossChallengeUserInfo::MergeFrom(from.atkuser());
    }
    if (from.has_defuser()) {
      mutable_defuser()->::pb::TCrossChallengeUserInfo::MergeFrom(from.defuser());
    }
    if (from.has_guessstatus()) {
      set_guessstatus(from.guessstatus());
    }
    if (from.has_atkbetnum()) {
      set_atkbetnum(from.atkbetnum());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_defbetnum()) {
      set_defbetnum(from.defbetnum());
    }
    if (from.has_isreward()) {
      set_isreward(from.isreward());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TCrossChallengeGuessInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TCrossChallengeGuessInfo::CopyFrom(const TCrossChallengeGuessInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TCrossChallengeGuessInfo::IsInitialized() const {

  return true;
}

void TCrossChallengeGuessInfo::Swap(TCrossChallengeGuessInfo* other) {
  if (other != this) {
    std::swap(step_, other->step_);
    ridarr_.Swap(&other->ridarr_);
    std::swap(atkinfo_, other->atkinfo_);
    std::swap(definfo_, other->definfo_);
    std::swap(atkuser_, other->atkuser_);
    std::swap(defuser_, other->defuser_);
    std::swap(guessstatus_, other->guessstatus_);
    std::swap(atkbetnum_, other->atkbetnum_);
    std::swap(defbetnum_, other->defbetnum_);
    std::swap(isreward_, other->isreward_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TCrossChallengeGuessInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TCrossChallengeGuessInfo_descriptor_;
  metadata.reflection = TCrossChallengeGuessInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TCrossChallengeGetGuessInfoRsp::kGuessArrFieldNumber;
#endif  // !_MSC_VER

TCrossChallengeGetGuessInfoRsp::TCrossChallengeGetGuessInfoRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TCrossChallengeGetGuessInfoRsp)
}

void TCrossChallengeGetGuessInfoRsp::InitAsDefaultInstance() {
}

TCrossChallengeGetGuessInfoRsp::TCrossChallengeGetGuessInfoRsp(const TCrossChallengeGetGuessInfoRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TCrossChallengeGetGuessInfoRsp)
}

void TCrossChallengeGetGuessInfoRsp::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TCrossChallengeGetGuessInfoRsp::~TCrossChallengeGetGuessInfoRsp() {
  // @@protoc_insertion_point(destructor:pb.TCrossChallengeGetGuessInfoRsp)
  SharedDtor();
}

void TCrossChallengeGetGuessInfoRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TCrossChallengeGetGuessInfoRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TCrossChallengeGetGuessInfoRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TCrossChallengeGetGuessInfoRsp_descriptor_;
}

const TCrossChallengeGetGuessInfoRsp& TCrossChallengeGetGuessInfoRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fCrossChallenge_2eproto();
  return *default_instance_;
}

TCrossChallengeGetGuessInfoRsp* TCrossChallengeGetGuessInfoRsp::default_instance_ = NULL;

TCrossChallengeGetGuessInfoRsp* TCrossChallengeGetGuessInfoRsp::New() const {
  return new TCrossChallengeGetGuessInfoRsp;
}

void TCrossChallengeGetGuessInfoRsp::Clear() {
  guessarr_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TCrossChallengeGetGuessInfoRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TCrossChallengeGetGuessInfoRsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .pb.TCrossChallengeGuessInfo GuessArr = 1;
      case 1: {
        if (tag == 10) {
         parse_GuessArr:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_guessarr()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_GuessArr;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TCrossChallengeGetGuessInfoRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TCrossChallengeGetGuessInfoRsp)
  return false;
#undef DO_
}

void TCrossChallengeGetGuessInfoRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TCrossChallengeGetGuessInfoRsp)
  // repeated .pb.TCrossChallengeGuessInfo GuessArr = 1;
  for (int i = 0; i < this->guessarr_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->guessarr(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TCrossChallengeGetGuessInfoRsp)
}

::google::protobuf::uint8* TCrossChallengeGetGuessInfoRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TCrossChallengeGetGuessInfoRsp)
  // repeated .pb.TCrossChallengeGuessInfo GuessArr = 1;
  for (int i = 0; i < this->guessarr_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->guessarr(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TCrossChallengeGetGuessInfoRsp)
  return target;
}

int TCrossChallengeGetGuessInfoRsp::ByteSize() const {
  int total_size = 0;

  // repeated .pb.TCrossChallengeGuessInfo GuessArr = 1;
  total_size += 1 * this->guessarr_size();
  for (int i = 0; i < this->guessarr_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->guessarr(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TCrossChallengeGetGuessInfoRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TCrossChallengeGetGuessInfoRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TCrossChallengeGetGuessInfoRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TCrossChallengeGetGuessInfoRsp::MergeFrom(const TCrossChallengeGetGuessInfoRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  guessarr_.MergeFrom(from.guessarr_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TCrossChallengeGetGuessInfoRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TCrossChallengeGetGuessInfoRsp::CopyFrom(const TCrossChallengeGetGuessInfoRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TCrossChallengeGetGuessInfoRsp::IsInitialized() const {

  return true;
}

void TCrossChallengeGetGuessInfoRsp::Swap(TCrossChallengeGetGuessInfoRsp* other) {
  if (other != this) {
    guessarr_.Swap(&other->guessarr_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TCrossChallengeGetGuessInfoRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TCrossChallengeGetGuessInfoRsp_descriptor_;
  metadata.reflection = TCrossChallengeGetGuessInfoRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TCrossChallengeGetCurrentGuessInfoRsp::kGuessInfoFieldNumber;
#endif  // !_MSC_VER

TCrossChallengeGetCurrentGuessInfoRsp::TCrossChallengeGetCurrentGuessInfoRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TCrossChallengeGetCurrentGuessInfoRsp)
}

void TCrossChallengeGetCurrentGuessInfoRsp::InitAsDefaultInstance() {
  guessinfo_ = const_cast< ::pb::TCrossChallengeGuessInfo*>(&::pb::TCrossChallengeGuessInfo::default_instance());
}

TCrossChallengeGetCurrentGuessInfoRsp::TCrossChallengeGetCurrentGuessInfoRsp(const TCrossChallengeGetCurrentGuessInfoRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TCrossChallengeGetCurrentGuessInfoRsp)
}

void TCrossChallengeGetCurrentGuessInfoRsp::SharedCtor() {
  _cached_size_ = 0;
  guessinfo_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TCrossChallengeGetCurrentGuessInfoRsp::~TCrossChallengeGetCurrentGuessInfoRsp() {
  // @@protoc_insertion_point(destructor:pb.TCrossChallengeGetCurrentGuessInfoRsp)
  SharedDtor();
}

void TCrossChallengeGetCurrentGuessInfoRsp::SharedDtor() {
  if (this != default_instance_) {
    delete guessinfo_;
  }
}

void TCrossChallengeGetCurrentGuessInfoRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TCrossChallengeGetCurrentGuessInfoRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TCrossChallengeGetCurrentGuessInfoRsp_descriptor_;
}

const TCrossChallengeGetCurrentGuessInfoRsp& TCrossChallengeGetCurrentGuessInfoRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fCrossChallenge_2eproto();
  return *default_instance_;
}

TCrossChallengeGetCurrentGuessInfoRsp* TCrossChallengeGetCurrentGuessInfoRsp::default_instance_ = NULL;

TCrossChallengeGetCurrentGuessInfoRsp* TCrossChallengeGetCurrentGuessInfoRsp::New() const {
  return new TCrossChallengeGetCurrentGuessInfoRsp;
}

void TCrossChallengeGetCurrentGuessInfoRsp::Clear() {
  if (has_guessinfo()) {
    if (guessinfo_ != NULL) guessinfo_->::pb::TCrossChallengeGuessInfo::Clear();
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TCrossChallengeGetCurrentGuessInfoRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TCrossChallengeGetCurrentGuessInfoRsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .pb.TCrossChallengeGuessInfo GuessInfo = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_guessinfo()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TCrossChallengeGetCurrentGuessInfoRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TCrossChallengeGetCurrentGuessInfoRsp)
  return false;
#undef DO_
}

void TCrossChallengeGetCurrentGuessInfoRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TCrossChallengeGetCurrentGuessInfoRsp)
  // optional .pb.TCrossChallengeGuessInfo GuessInfo = 1;
  if (has_guessinfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->guessinfo(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TCrossChallengeGetCurrentGuessInfoRsp)
}

::google::protobuf::uint8* TCrossChallengeGetCurrentGuessInfoRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TCrossChallengeGetCurrentGuessInfoRsp)
  // optional .pb.TCrossChallengeGuessInfo GuessInfo = 1;
  if (has_guessinfo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->guessinfo(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TCrossChallengeGetCurrentGuessInfoRsp)
  return target;
}

int TCrossChallengeGetCurrentGuessInfoRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .pb.TCrossChallengeGuessInfo GuessInfo = 1;
    if (has_guessinfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->guessinfo());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TCrossChallengeGetCurrentGuessInfoRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TCrossChallengeGetCurrentGuessInfoRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TCrossChallengeGetCurrentGuessInfoRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TCrossChallengeGetCurrentGuessInfoRsp::MergeFrom(const TCrossChallengeGetCurrentGuessInfoRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_guessinfo()) {
      mutable_guessinfo()->::pb::TCrossChallengeGuessInfo::MergeFrom(from.guessinfo());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TCrossChallengeGetCurrentGuessInfoRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TCrossChallengeGetCurrentGuessInfoRsp::CopyFrom(const TCrossChallengeGetCurrentGuessInfoRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TCrossChallengeGetCurrentGuessInfoRsp::IsInitialized() const {

  return true;
}

void TCrossChallengeGetCurrentGuessInfoRsp::Swap(TCrossChallengeGetCurrentGuessInfoRsp* other) {
  if (other != this) {
    std::swap(guessinfo_, other->guessinfo_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TCrossChallengeGetCurrentGuessInfoRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TCrossChallengeGetCurrentGuessInfoRsp_descriptor_;
  metadata.reflection = TCrossChallengeGetCurrentGuessInfoRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TCrossChallengeGuessingReq::kStepFieldNumber;
const int TCrossChallengeGuessingReq::kUidFieldNumber;
#endif  // !_MSC_VER

TCrossChallengeGuessingReq::TCrossChallengeGuessingReq()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TCrossChallengeGuessingReq)
}

void TCrossChallengeGuessingReq::InitAsDefaultInstance() {
}

TCrossChallengeGuessingReq::TCrossChallengeGuessingReq(const TCrossChallengeGuessingReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TCrossChallengeGuessingReq)
}

void TCrossChallengeGuessingReq::SharedCtor() {
  _cached_size_ = 0;
  step_ = 1;
  uid_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TCrossChallengeGuessingReq::~TCrossChallengeGuessingReq() {
  // @@protoc_insertion_point(destructor:pb.TCrossChallengeGuessingReq)
  SharedDtor();
}

void TCrossChallengeGuessingReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TCrossChallengeGuessingReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TCrossChallengeGuessingReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TCrossChallengeGuessingReq_descriptor_;
}

const TCrossChallengeGuessingReq& TCrossChallengeGuessingReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fCrossChallenge_2eproto();
  return *default_instance_;
}

TCrossChallengeGuessingReq* TCrossChallengeGuessingReq::default_instance_ = NULL;

TCrossChallengeGuessingReq* TCrossChallengeGuessingReq::New() const {
  return new TCrossChallengeGuessingReq;
}

void TCrossChallengeGuessingReq::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    step_ = 1;
    uid_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TCrossChallengeGuessingReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TCrossChallengeGuessingReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .pb.EChallengeStep Step = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::pb::EChallengeStep_IsValid(value)) {
            set_step(static_cast< ::pb::EChallengeStep >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_Uid;
        break;
      }

      // optional uint64 Uid = 2;
      case 2: {
        if (tag == 16) {
         parse_Uid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &uid_)));
          set_has_uid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TCrossChallengeGuessingReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TCrossChallengeGuessingReq)
  return false;
#undef DO_
}

void TCrossChallengeGuessingReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TCrossChallengeGuessingReq)
  // optional .pb.EChallengeStep Step = 1;
  if (has_step()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->step(), output);
  }

  // optional uint64 Uid = 2;
  if (has_uid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->uid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TCrossChallengeGuessingReq)
}

::google::protobuf::uint8* TCrossChallengeGuessingReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TCrossChallengeGuessingReq)
  // optional .pb.EChallengeStep Step = 1;
  if (has_step()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->step(), target);
  }

  // optional uint64 Uid = 2;
  if (has_uid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->uid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TCrossChallengeGuessingReq)
  return target;
}

int TCrossChallengeGuessingReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .pb.EChallengeStep Step = 1;
    if (has_step()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->step());
    }

    // optional uint64 Uid = 2;
    if (has_uid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->uid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TCrossChallengeGuessingReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TCrossChallengeGuessingReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TCrossChallengeGuessingReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TCrossChallengeGuessingReq::MergeFrom(const TCrossChallengeGuessingReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_step()) {
      set_step(from.step());
    }
    if (from.has_uid()) {
      set_uid(from.uid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TCrossChallengeGuessingReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TCrossChallengeGuessingReq::CopyFrom(const TCrossChallengeGuessingReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TCrossChallengeGuessingReq::IsInitialized() const {

  return true;
}

void TCrossChallengeGuessingReq::Swap(TCrossChallengeGuessingReq* other) {
  if (other != this) {
    std::swap(step_, other->step_);
    std::swap(uid_, other->uid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TCrossChallengeGuessingReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TCrossChallengeGuessingReq_descriptor_;
  metadata.reflection = TCrossChallengeGuessingReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TCrossChallengeGetGuessRewardReq::kStepFieldNumber;
#endif  // !_MSC_VER

TCrossChallengeGetGuessRewardReq::TCrossChallengeGetGuessRewardReq()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TCrossChallengeGetGuessRewardReq)
}

void TCrossChallengeGetGuessRewardReq::InitAsDefaultInstance() {
}

TCrossChallengeGetGuessRewardReq::TCrossChallengeGetGuessRewardReq(const TCrossChallengeGetGuessRewardReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TCrossChallengeGetGuessRewardReq)
}

void TCrossChallengeGetGuessRewardReq::SharedCtor() {
  _cached_size_ = 0;
  step_ = 1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TCrossChallengeGetGuessRewardReq::~TCrossChallengeGetGuessRewardReq() {
  // @@protoc_insertion_point(destructor:pb.TCrossChallengeGetGuessRewardReq)
  SharedDtor();
}

void TCrossChallengeGetGuessRewardReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TCrossChallengeGetGuessRewardReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TCrossChallengeGetGuessRewardReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TCrossChallengeGetGuessRewardReq_descriptor_;
}

const TCrossChallengeGetGuessRewardReq& TCrossChallengeGetGuessRewardReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fCrossChallenge_2eproto();
  return *default_instance_;
}

TCrossChallengeGetGuessRewardReq* TCrossChallengeGetGuessRewardReq::default_instance_ = NULL;

TCrossChallengeGetGuessRewardReq* TCrossChallengeGetGuessRewardReq::New() const {
  return new TCrossChallengeGetGuessRewardReq;
}

void TCrossChallengeGetGuessRewardReq::Clear() {
  step_ = 1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TCrossChallengeGetGuessRewardReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TCrossChallengeGetGuessRewardReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .pb.EChallengeStep Step = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::pb::EChallengeStep_IsValid(value)) {
            set_step(static_cast< ::pb::EChallengeStep >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TCrossChallengeGetGuessRewardReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TCrossChallengeGetGuessRewardReq)
  return false;
#undef DO_
}

void TCrossChallengeGetGuessRewardReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TCrossChallengeGetGuessRewardReq)
  // optional .pb.EChallengeStep Step = 1;
  if (has_step()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->step(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TCrossChallengeGetGuessRewardReq)
}

::google::protobuf::uint8* TCrossChallengeGetGuessRewardReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TCrossChallengeGetGuessRewardReq)
  // optional .pb.EChallengeStep Step = 1;
  if (has_step()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->step(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TCrossChallengeGetGuessRewardReq)
  return target;
}

int TCrossChallengeGetGuessRewardReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .pb.EChallengeStep Step = 1;
    if (has_step()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->step());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TCrossChallengeGetGuessRewardReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TCrossChallengeGetGuessRewardReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TCrossChallengeGetGuessRewardReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TCrossChallengeGetGuessRewardReq::MergeFrom(const TCrossChallengeGetGuessRewardReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_step()) {
      set_step(from.step());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TCrossChallengeGetGuessRewardReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TCrossChallengeGetGuessRewardReq::CopyFrom(const TCrossChallengeGetGuessRewardReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TCrossChallengeGetGuessRewardReq::IsInitialized() const {

  return true;
}

void TCrossChallengeGetGuessRewardReq::Swap(TCrossChallengeGetGuessRewardReq* other) {
  if (other != this) {
    std::swap(step_, other->step_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TCrossChallengeGetGuessRewardReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TCrossChallengeGetGuessRewardReq_descriptor_;
  metadata.reflection = TCrossChallengeGetGuessRewardReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TCrossChallengeGetGuessRewardRsp::kRewardArrFieldNumber;
#endif  // !_MSC_VER

TCrossChallengeGetGuessRewardRsp::TCrossChallengeGetGuessRewardRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TCrossChallengeGetGuessRewardRsp)
}

void TCrossChallengeGetGuessRewardRsp::InitAsDefaultInstance() {
}

TCrossChallengeGetGuessRewardRsp::TCrossChallengeGetGuessRewardRsp(const TCrossChallengeGetGuessRewardRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TCrossChallengeGetGuessRewardRsp)
}

void TCrossChallengeGetGuessRewardRsp::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TCrossChallengeGetGuessRewardRsp::~TCrossChallengeGetGuessRewardRsp() {
  // @@protoc_insertion_point(destructor:pb.TCrossChallengeGetGuessRewardRsp)
  SharedDtor();
}

void TCrossChallengeGetGuessRewardRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TCrossChallengeGetGuessRewardRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TCrossChallengeGetGuessRewardRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TCrossChallengeGetGuessRewardRsp_descriptor_;
}

const TCrossChallengeGetGuessRewardRsp& TCrossChallengeGetGuessRewardRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fCrossChallenge_2eproto();
  return *default_instance_;
}

TCrossChallengeGetGuessRewardRsp* TCrossChallengeGetGuessRewardRsp::default_instance_ = NULL;

TCrossChallengeGetGuessRewardRsp* TCrossChallengeGetGuessRewardRsp::New() const {
  return new TCrossChallengeGetGuessRewardRsp;
}

void TCrossChallengeGetGuessRewardRsp::Clear() {
  rewardarr_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TCrossChallengeGetGuessRewardRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TCrossChallengeGetGuessRewardRsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .pb.TCommonReward RewardArr = 1;
      case 1: {
        if (tag == 10) {
         parse_RewardArr:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_rewardarr()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_RewardArr;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TCrossChallengeGetGuessRewardRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TCrossChallengeGetGuessRewardRsp)
  return false;
#undef DO_
}

void TCrossChallengeGetGuessRewardRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TCrossChallengeGetGuessRewardRsp)
  // repeated .pb.TCommonReward RewardArr = 1;
  for (int i = 0; i < this->rewardarr_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->rewardarr(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TCrossChallengeGetGuessRewardRsp)
}

::google::protobuf::uint8* TCrossChallengeGetGuessRewardRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TCrossChallengeGetGuessRewardRsp)
  // repeated .pb.TCommonReward RewardArr = 1;
  for (int i = 0; i < this->rewardarr_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->rewardarr(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TCrossChallengeGetGuessRewardRsp)
  return target;
}

int TCrossChallengeGetGuessRewardRsp::ByteSize() const {
  int total_size = 0;

  // repeated .pb.TCommonReward RewardArr = 1;
  total_size += 1 * this->rewardarr_size();
  for (int i = 0; i < this->rewardarr_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->rewardarr(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TCrossChallengeGetGuessRewardRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TCrossChallengeGetGuessRewardRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TCrossChallengeGetGuessRewardRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TCrossChallengeGetGuessRewardRsp::MergeFrom(const TCrossChallengeGetGuessRewardRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  rewardarr_.MergeFrom(from.rewardarr_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TCrossChallengeGetGuessRewardRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TCrossChallengeGetGuessRewardRsp::CopyFrom(const TCrossChallengeGetGuessRewardRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TCrossChallengeGetGuessRewardRsp::IsInitialized() const {

  return true;
}

void TCrossChallengeGetGuessRewardRsp::Swap(TCrossChallengeGetGuessRewardRsp* other) {
  if (other != this) {
    rewardarr_.Swap(&other->rewardarr_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TCrossChallengeGetGuessRewardRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TCrossChallengeGetGuessRewardRsp_descriptor_;
  metadata.reflection = TCrossChallengeGetGuessRewardRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TCrossChallengeGuessingRsp::kAtkBetNumFieldNumber;
const int TCrossChallengeGuessingRsp::kDefBetNumFieldNumber;
#endif  // !_MSC_VER

TCrossChallengeGuessingRsp::TCrossChallengeGuessingRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TCrossChallengeGuessingRsp)
}

void TCrossChallengeGuessingRsp::InitAsDefaultInstance() {
}

TCrossChallengeGuessingRsp::TCrossChallengeGuessingRsp(const TCrossChallengeGuessingRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TCrossChallengeGuessingRsp)
}

void TCrossChallengeGuessingRsp::SharedCtor() {
  _cached_size_ = 0;
  atkbetnum_ = 0u;
  defbetnum_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TCrossChallengeGuessingRsp::~TCrossChallengeGuessingRsp() {
  // @@protoc_insertion_point(destructor:pb.TCrossChallengeGuessingRsp)
  SharedDtor();
}

void TCrossChallengeGuessingRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TCrossChallengeGuessingRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TCrossChallengeGuessingRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TCrossChallengeGuessingRsp_descriptor_;
}

const TCrossChallengeGuessingRsp& TCrossChallengeGuessingRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fCrossChallenge_2eproto();
  return *default_instance_;
}

TCrossChallengeGuessingRsp* TCrossChallengeGuessingRsp::default_instance_ = NULL;

TCrossChallengeGuessingRsp* TCrossChallengeGuessingRsp::New() const {
  return new TCrossChallengeGuessingRsp;
}

void TCrossChallengeGuessingRsp::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<TCrossChallengeGuessingRsp*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(atkbetnum_, defbetnum_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TCrossChallengeGuessingRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TCrossChallengeGuessingRsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 AtkBetNum = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &atkbetnum_)));
          set_has_atkbetnum();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_DefBetNum;
        break;
      }

      // optional uint32 DefBetNum = 2;
      case 2: {
        if (tag == 16) {
         parse_DefBetNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &defbetnum_)));
          set_has_defbetnum();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TCrossChallengeGuessingRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TCrossChallengeGuessingRsp)
  return false;
#undef DO_
}

void TCrossChallengeGuessingRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TCrossChallengeGuessingRsp)
  // optional uint32 AtkBetNum = 1;
  if (has_atkbetnum()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->atkbetnum(), output);
  }

  // optional uint32 DefBetNum = 2;
  if (has_defbetnum()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->defbetnum(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TCrossChallengeGuessingRsp)
}

::google::protobuf::uint8* TCrossChallengeGuessingRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TCrossChallengeGuessingRsp)
  // optional uint32 AtkBetNum = 1;
  if (has_atkbetnum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->atkbetnum(), target);
  }

  // optional uint32 DefBetNum = 2;
  if (has_defbetnum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->defbetnum(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TCrossChallengeGuessingRsp)
  return target;
}

int TCrossChallengeGuessingRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 AtkBetNum = 1;
    if (has_atkbetnum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->atkbetnum());
    }

    // optional uint32 DefBetNum = 2;
    if (has_defbetnum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->defbetnum());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TCrossChallengeGuessingRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TCrossChallengeGuessingRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TCrossChallengeGuessingRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TCrossChallengeGuessingRsp::MergeFrom(const TCrossChallengeGuessingRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_atkbetnum()) {
      set_atkbetnum(from.atkbetnum());
    }
    if (from.has_defbetnum()) {
      set_defbetnum(from.defbetnum());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TCrossChallengeGuessingRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TCrossChallengeGuessingRsp::CopyFrom(const TCrossChallengeGuessingRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TCrossChallengeGuessingRsp::IsInitialized() const {

  return true;
}

void TCrossChallengeGuessingRsp::Swap(TCrossChallengeGuessingRsp* other) {
  if (other != this) {
    std::swap(atkbetnum_, other->atkbetnum_);
    std::swap(defbetnum_, other->defbetnum_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TCrossChallengeGuessingRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TCrossChallengeGuessingRsp_descriptor_;
  metadata.reflection = TCrossChallengeGuessingRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TCrossChallengeBattleArmy::kFidFieldNumber;
const int TCrossChallengeBattleArmy::kArmyInfoFieldNumber;
#endif  // !_MSC_VER

TCrossChallengeBattleArmy::TCrossChallengeBattleArmy()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TCrossChallengeBattleArmy)
}

void TCrossChallengeBattleArmy::InitAsDefaultInstance() {
  armyinfo_ = const_cast< ::pb::TArmyInfo*>(&::pb::TArmyInfo::default_instance());
}

TCrossChallengeBattleArmy::TCrossChallengeBattleArmy(const TCrossChallengeBattleArmy& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TCrossChallengeBattleArmy)
}

void TCrossChallengeBattleArmy::SharedCtor() {
  _cached_size_ = 0;
  fid_ = 0u;
  armyinfo_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TCrossChallengeBattleArmy::~TCrossChallengeBattleArmy() {
  // @@protoc_insertion_point(destructor:pb.TCrossChallengeBattleArmy)
  SharedDtor();
}

void TCrossChallengeBattleArmy::SharedDtor() {
  if (this != default_instance_) {
    delete armyinfo_;
  }
}

void TCrossChallengeBattleArmy::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TCrossChallengeBattleArmy::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TCrossChallengeBattleArmy_descriptor_;
}

const TCrossChallengeBattleArmy& TCrossChallengeBattleArmy::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fCrossChallenge_2eproto();
  return *default_instance_;
}

TCrossChallengeBattleArmy* TCrossChallengeBattleArmy::default_instance_ = NULL;

TCrossChallengeBattleArmy* TCrossChallengeBattleArmy::New() const {
  return new TCrossChallengeBattleArmy;
}

void TCrossChallengeBattleArmy::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    fid_ = 0u;
    if (has_armyinfo()) {
      if (armyinfo_ != NULL) armyinfo_->::pb::TArmyInfo::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TCrossChallengeBattleArmy::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TCrossChallengeBattleArmy)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 Fid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &fid_)));
          set_has_fid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_ArmyInfo;
        break;
      }

      // optional .pb.TArmyInfo ArmyInfo = 2;
      case 2: {
        if (tag == 18) {
         parse_ArmyInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_armyinfo()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TCrossChallengeBattleArmy)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TCrossChallengeBattleArmy)
  return false;
#undef DO_
}

void TCrossChallengeBattleArmy::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TCrossChallengeBattleArmy)
  // optional uint32 Fid = 1;
  if (has_fid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->fid(), output);
  }

  // optional .pb.TArmyInfo ArmyInfo = 2;
  if (has_armyinfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->armyinfo(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TCrossChallengeBattleArmy)
}

::google::protobuf::uint8* TCrossChallengeBattleArmy::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TCrossChallengeBattleArmy)
  // optional uint32 Fid = 1;
  if (has_fid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->fid(), target);
  }

  // optional .pb.TArmyInfo ArmyInfo = 2;
  if (has_armyinfo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->armyinfo(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TCrossChallengeBattleArmy)
  return target;
}

int TCrossChallengeBattleArmy::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 Fid = 1;
    if (has_fid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->fid());
    }

    // optional .pb.TArmyInfo ArmyInfo = 2;
    if (has_armyinfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->armyinfo());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TCrossChallengeBattleArmy::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TCrossChallengeBattleArmy* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TCrossChallengeBattleArmy*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TCrossChallengeBattleArmy::MergeFrom(const TCrossChallengeBattleArmy& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_fid()) {
      set_fid(from.fid());
    }
    if (from.has_armyinfo()) {
      mutable_armyinfo()->::pb::TArmyInfo::MergeFrom(from.armyinfo());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TCrossChallengeBattleArmy::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TCrossChallengeBattleArmy::CopyFrom(const TCrossChallengeBattleArmy& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TCrossChallengeBattleArmy::IsInitialized() const {

  if (has_armyinfo()) {
    if (!this->armyinfo().IsInitialized()) return false;
  }
  return true;
}

void TCrossChallengeBattleArmy::Swap(TCrossChallengeBattleArmy* other) {
  if (other != this) {
    std::swap(fid_, other->fid_);
    std::swap(armyinfo_, other->armyinfo_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TCrossChallengeBattleArmy::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TCrossChallengeBattleArmy_descriptor_;
  metadata.reflection = TCrossChallengeBattleArmy_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TCrossChallengeBattleArmyArr::kUidFieldNumber;
const int TCrossChallengeBattleArmyArr::kArmyArrFieldNumber;
#endif  // !_MSC_VER

TCrossChallengeBattleArmyArr::TCrossChallengeBattleArmyArr()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TCrossChallengeBattleArmyArr)
}

void TCrossChallengeBattleArmyArr::InitAsDefaultInstance() {
}

TCrossChallengeBattleArmyArr::TCrossChallengeBattleArmyArr(const TCrossChallengeBattleArmyArr& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TCrossChallengeBattleArmyArr)
}

void TCrossChallengeBattleArmyArr::SharedCtor() {
  _cached_size_ = 0;
  uid_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TCrossChallengeBattleArmyArr::~TCrossChallengeBattleArmyArr() {
  // @@protoc_insertion_point(destructor:pb.TCrossChallengeBattleArmyArr)
  SharedDtor();
}

void TCrossChallengeBattleArmyArr::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TCrossChallengeBattleArmyArr::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TCrossChallengeBattleArmyArr::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TCrossChallengeBattleArmyArr_descriptor_;
}

const TCrossChallengeBattleArmyArr& TCrossChallengeBattleArmyArr::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fCrossChallenge_2eproto();
  return *default_instance_;
}

TCrossChallengeBattleArmyArr* TCrossChallengeBattleArmyArr::default_instance_ = NULL;

TCrossChallengeBattleArmyArr* TCrossChallengeBattleArmyArr::New() const {
  return new TCrossChallengeBattleArmyArr;
}

void TCrossChallengeBattleArmyArr::Clear() {
  uid_ = GOOGLE_ULONGLONG(0);
  armyarr_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TCrossChallengeBattleArmyArr::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TCrossChallengeBattleArmyArr)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 Uid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &uid_)));
          set_has_uid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_ArmyArr;
        break;
      }

      // repeated .pb.TCrossChallengeBattleArmy ArmyArr = 2;
      case 2: {
        if (tag == 18) {
         parse_ArmyArr:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_armyarr()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_ArmyArr;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TCrossChallengeBattleArmyArr)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TCrossChallengeBattleArmyArr)
  return false;
#undef DO_
}

void TCrossChallengeBattleArmyArr::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TCrossChallengeBattleArmyArr)
  // optional uint64 Uid = 1;
  if (has_uid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->uid(), output);
  }

  // repeated .pb.TCrossChallengeBattleArmy ArmyArr = 2;
  for (int i = 0; i < this->armyarr_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->armyarr(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TCrossChallengeBattleArmyArr)
}

::google::protobuf::uint8* TCrossChallengeBattleArmyArr::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TCrossChallengeBattleArmyArr)
  // optional uint64 Uid = 1;
  if (has_uid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->uid(), target);
  }

  // repeated .pb.TCrossChallengeBattleArmy ArmyArr = 2;
  for (int i = 0; i < this->armyarr_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->armyarr(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TCrossChallengeBattleArmyArr)
  return target;
}

int TCrossChallengeBattleArmyArr::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 Uid = 1;
    if (has_uid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->uid());
    }

  }
  // repeated .pb.TCrossChallengeBattleArmy ArmyArr = 2;
  total_size += 1 * this->armyarr_size();
  for (int i = 0; i < this->armyarr_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->armyarr(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TCrossChallengeBattleArmyArr::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TCrossChallengeBattleArmyArr* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TCrossChallengeBattleArmyArr*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TCrossChallengeBattleArmyArr::MergeFrom(const TCrossChallengeBattleArmyArr& from) {
  GOOGLE_CHECK_NE(&from, this);
  armyarr_.MergeFrom(from.armyarr_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_uid()) {
      set_uid(from.uid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TCrossChallengeBattleArmyArr::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TCrossChallengeBattleArmyArr::CopyFrom(const TCrossChallengeBattleArmyArr& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TCrossChallengeBattleArmyArr::IsInitialized() const {

  if (!::google::protobuf::internal::AllAreInitialized(this->armyarr())) return false;
  return true;
}

void TCrossChallengeBattleArmyArr::Swap(TCrossChallengeBattleArmyArr* other) {
  if (other != this) {
    std::swap(uid_, other->uid_);
    armyarr_.Swap(&other->armyarr_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TCrossChallengeBattleArmyArr::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TCrossChallengeBattleArmyArr_descriptor_;
  metadata.reflection = TCrossChallengeBattleArmyArr_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TCrossChallengeGetUserArrFromArenaReq::kNumFieldNumber;
#endif  // !_MSC_VER

TCrossChallengeGetUserArrFromArenaReq::TCrossChallengeGetUserArrFromArenaReq()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TCrossChallengeGetUserArrFromArenaReq)
}

void TCrossChallengeGetUserArrFromArenaReq::InitAsDefaultInstance() {
}

TCrossChallengeGetUserArrFromArenaReq::TCrossChallengeGetUserArrFromArenaReq(const TCrossChallengeGetUserArrFromArenaReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TCrossChallengeGetUserArrFromArenaReq)
}

void TCrossChallengeGetUserArrFromArenaReq::SharedCtor() {
  _cached_size_ = 0;
  num_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TCrossChallengeGetUserArrFromArenaReq::~TCrossChallengeGetUserArrFromArenaReq() {
  // @@protoc_insertion_point(destructor:pb.TCrossChallengeGetUserArrFromArenaReq)
  SharedDtor();
}

void TCrossChallengeGetUserArrFromArenaReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TCrossChallengeGetUserArrFromArenaReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TCrossChallengeGetUserArrFromArenaReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TCrossChallengeGetUserArrFromArenaReq_descriptor_;
}

const TCrossChallengeGetUserArrFromArenaReq& TCrossChallengeGetUserArrFromArenaReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fCrossChallenge_2eproto();
  return *default_instance_;
}

TCrossChallengeGetUserArrFromArenaReq* TCrossChallengeGetUserArrFromArenaReq::default_instance_ = NULL;

TCrossChallengeGetUserArrFromArenaReq* TCrossChallengeGetUserArrFromArenaReq::New() const {
  return new TCrossChallengeGetUserArrFromArenaReq;
}

void TCrossChallengeGetUserArrFromArenaReq::Clear() {
  num_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TCrossChallengeGetUserArrFromArenaReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TCrossChallengeGetUserArrFromArenaReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 Num = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &num_)));
          set_has_num();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TCrossChallengeGetUserArrFromArenaReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TCrossChallengeGetUserArrFromArenaReq)
  return false;
#undef DO_
}

void TCrossChallengeGetUserArrFromArenaReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TCrossChallengeGetUserArrFromArenaReq)
  // optional uint32 Num = 1;
  if (has_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->num(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TCrossChallengeGetUserArrFromArenaReq)
}

::google::protobuf::uint8* TCrossChallengeGetUserArrFromArenaReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TCrossChallengeGetUserArrFromArenaReq)
  // optional uint32 Num = 1;
  if (has_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->num(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TCrossChallengeGetUserArrFromArenaReq)
  return target;
}

int TCrossChallengeGetUserArrFromArenaReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 Num = 1;
    if (has_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->num());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TCrossChallengeGetUserArrFromArenaReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TCrossChallengeGetUserArrFromArenaReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TCrossChallengeGetUserArrFromArenaReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TCrossChallengeGetUserArrFromArenaReq::MergeFrom(const TCrossChallengeGetUserArrFromArenaReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_num()) {
      set_num(from.num());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TCrossChallengeGetUserArrFromArenaReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TCrossChallengeGetUserArrFromArenaReq::CopyFrom(const TCrossChallengeGetUserArrFromArenaReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TCrossChallengeGetUserArrFromArenaReq::IsInitialized() const {

  return true;
}

void TCrossChallengeGetUserArrFromArenaReq::Swap(TCrossChallengeGetUserArrFromArenaReq* other) {
  if (other != this) {
    std::swap(num_, other->num_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TCrossChallengeGetUserArrFromArenaReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TCrossChallengeGetUserArrFromArenaReq_descriptor_;
  metadata.reflection = TCrossChallengeGetUserArrFromArenaReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TCrossChallengeGetUserArrFromArenaRsp::kUidArrFieldNumber;
#endif  // !_MSC_VER

TCrossChallengeGetUserArrFromArenaRsp::TCrossChallengeGetUserArrFromArenaRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TCrossChallengeGetUserArrFromArenaRsp)
}

void TCrossChallengeGetUserArrFromArenaRsp::InitAsDefaultInstance() {
}

TCrossChallengeGetUserArrFromArenaRsp::TCrossChallengeGetUserArrFromArenaRsp(const TCrossChallengeGetUserArrFromArenaRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TCrossChallengeGetUserArrFromArenaRsp)
}

void TCrossChallengeGetUserArrFromArenaRsp::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TCrossChallengeGetUserArrFromArenaRsp::~TCrossChallengeGetUserArrFromArenaRsp() {
  // @@protoc_insertion_point(destructor:pb.TCrossChallengeGetUserArrFromArenaRsp)
  SharedDtor();
}

void TCrossChallengeGetUserArrFromArenaRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TCrossChallengeGetUserArrFromArenaRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TCrossChallengeGetUserArrFromArenaRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TCrossChallengeGetUserArrFromArenaRsp_descriptor_;
}

const TCrossChallengeGetUserArrFromArenaRsp& TCrossChallengeGetUserArrFromArenaRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fCrossChallenge_2eproto();
  return *default_instance_;
}

TCrossChallengeGetUserArrFromArenaRsp* TCrossChallengeGetUserArrFromArenaRsp::default_instance_ = NULL;

TCrossChallengeGetUserArrFromArenaRsp* TCrossChallengeGetUserArrFromArenaRsp::New() const {
  return new TCrossChallengeGetUserArrFromArenaRsp;
}

void TCrossChallengeGetUserArrFromArenaRsp::Clear() {
  uidarr_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TCrossChallengeGetUserArrFromArenaRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TCrossChallengeGetUserArrFromArenaRsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated uint64 UidArr = 1;
      case 1: {
        if (tag == 8) {
         parse_UidArr:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 1, 8, input, this->mutable_uidarr())));
        } else if (tag == 10) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, this->mutable_uidarr())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(8)) goto parse_UidArr;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TCrossChallengeGetUserArrFromArenaRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TCrossChallengeGetUserArrFromArenaRsp)
  return false;
#undef DO_
}

void TCrossChallengeGetUserArrFromArenaRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TCrossChallengeGetUserArrFromArenaRsp)
  // repeated uint64 UidArr = 1;
  for (int i = 0; i < this->uidarr_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(
      1, this->uidarr(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TCrossChallengeGetUserArrFromArenaRsp)
}

::google::protobuf::uint8* TCrossChallengeGetUserArrFromArenaRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TCrossChallengeGetUserArrFromArenaRsp)
  // repeated uint64 UidArr = 1;
  for (int i = 0; i < this->uidarr_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt64ToArray(1, this->uidarr(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TCrossChallengeGetUserArrFromArenaRsp)
  return target;
}

int TCrossChallengeGetUserArrFromArenaRsp::ByteSize() const {
  int total_size = 0;

  // repeated uint64 UidArr = 1;
  {
    int data_size = 0;
    for (int i = 0; i < this->uidarr_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt64Size(this->uidarr(i));
    }
    total_size += 1 * this->uidarr_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TCrossChallengeGetUserArrFromArenaRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TCrossChallengeGetUserArrFromArenaRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TCrossChallengeGetUserArrFromArenaRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TCrossChallengeGetUserArrFromArenaRsp::MergeFrom(const TCrossChallengeGetUserArrFromArenaRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  uidarr_.MergeFrom(from.uidarr_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TCrossChallengeGetUserArrFromArenaRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TCrossChallengeGetUserArrFromArenaRsp::CopyFrom(const TCrossChallengeGetUserArrFromArenaRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TCrossChallengeGetUserArrFromArenaRsp::IsInitialized() const {

  return true;
}

void TCrossChallengeGetUserArrFromArenaRsp::Swap(TCrossChallengeGetUserArrFromArenaRsp* other) {
  if (other != this) {
    uidarr_.Swap(&other->uidarr_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TCrossChallengeGetUserArrFromArenaRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TCrossChallengeGetUserArrFromArenaRsp_descriptor_;
  metadata.reflection = TCrossChallengeGetUserArrFromArenaRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TCrossChallengeGetBattleUserArrReq::kStepFieldNumber;
const int TCrossChallengeGetBattleUserArrReq::kUidArrFieldNumber;
#endif  // !_MSC_VER

TCrossChallengeGetBattleUserArrReq::TCrossChallengeGetBattleUserArrReq()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TCrossChallengeGetBattleUserArrReq)
}

void TCrossChallengeGetBattleUserArrReq::InitAsDefaultInstance() {
}

TCrossChallengeGetBattleUserArrReq::TCrossChallengeGetBattleUserArrReq(const TCrossChallengeGetBattleUserArrReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TCrossChallengeGetBattleUserArrReq)
}

void TCrossChallengeGetBattleUserArrReq::SharedCtor() {
  _cached_size_ = 0;
  step_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TCrossChallengeGetBattleUserArrReq::~TCrossChallengeGetBattleUserArrReq() {
  // @@protoc_insertion_point(destructor:pb.TCrossChallengeGetBattleUserArrReq)
  SharedDtor();
}

void TCrossChallengeGetBattleUserArrReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TCrossChallengeGetBattleUserArrReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TCrossChallengeGetBattleUserArrReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TCrossChallengeGetBattleUserArrReq_descriptor_;
}

const TCrossChallengeGetBattleUserArrReq& TCrossChallengeGetBattleUserArrReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fCrossChallenge_2eproto();
  return *default_instance_;
}

TCrossChallengeGetBattleUserArrReq* TCrossChallengeGetBattleUserArrReq::default_instance_ = NULL;

TCrossChallengeGetBattleUserArrReq* TCrossChallengeGetBattleUserArrReq::New() const {
  return new TCrossChallengeGetBattleUserArrReq;
}

void TCrossChallengeGetBattleUserArrReq::Clear() {
  step_ = 0u;
  uidarr_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TCrossChallengeGetBattleUserArrReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TCrossChallengeGetBattleUserArrReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 Step = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &step_)));
          set_has_step();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_UidArr;
        break;
      }

      // repeated uint64 UidArr = 2;
      case 2: {
        if (tag == 16) {
         parse_UidArr:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 1, 16, input, this->mutable_uidarr())));
        } else if (tag == 18) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, this->mutable_uidarr())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_UidArr;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TCrossChallengeGetBattleUserArrReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TCrossChallengeGetBattleUserArrReq)
  return false;
#undef DO_
}

void TCrossChallengeGetBattleUserArrReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TCrossChallengeGetBattleUserArrReq)
  // optional uint32 Step = 1;
  if (has_step()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->step(), output);
  }

  // repeated uint64 UidArr = 2;
  for (int i = 0; i < this->uidarr_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(
      2, this->uidarr(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TCrossChallengeGetBattleUserArrReq)
}

::google::protobuf::uint8* TCrossChallengeGetBattleUserArrReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TCrossChallengeGetBattleUserArrReq)
  // optional uint32 Step = 1;
  if (has_step()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->step(), target);
  }

  // repeated uint64 UidArr = 2;
  for (int i = 0; i < this->uidarr_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt64ToArray(2, this->uidarr(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TCrossChallengeGetBattleUserArrReq)
  return target;
}

int TCrossChallengeGetBattleUserArrReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 Step = 1;
    if (has_step()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->step());
    }

  }
  // repeated uint64 UidArr = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->uidarr_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt64Size(this->uidarr(i));
    }
    total_size += 1 * this->uidarr_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TCrossChallengeGetBattleUserArrReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TCrossChallengeGetBattleUserArrReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TCrossChallengeGetBattleUserArrReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TCrossChallengeGetBattleUserArrReq::MergeFrom(const TCrossChallengeGetBattleUserArrReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  uidarr_.MergeFrom(from.uidarr_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_step()) {
      set_step(from.step());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TCrossChallengeGetBattleUserArrReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TCrossChallengeGetBattleUserArrReq::CopyFrom(const TCrossChallengeGetBattleUserArrReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TCrossChallengeGetBattleUserArrReq::IsInitialized() const {

  return true;
}

void TCrossChallengeGetBattleUserArrReq::Swap(TCrossChallengeGetBattleUserArrReq* other) {
  if (other != this) {
    std::swap(step_, other->step_);
    uidarr_.Swap(&other->uidarr_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TCrossChallengeGetBattleUserArrReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TCrossChallengeGetBattleUserArrReq_descriptor_;
  metadata.reflection = TCrossChallengeGetBattleUserArrReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TCrossChallengeGetBattleUserArrRsp::kChallengeArrFieldNumber;
#endif  // !_MSC_VER

TCrossChallengeGetBattleUserArrRsp::TCrossChallengeGetBattleUserArrRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TCrossChallengeGetBattleUserArrRsp)
}

void TCrossChallengeGetBattleUserArrRsp::InitAsDefaultInstance() {
}

TCrossChallengeGetBattleUserArrRsp::TCrossChallengeGetBattleUserArrRsp(const TCrossChallengeGetBattleUserArrRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TCrossChallengeGetBattleUserArrRsp)
}

void TCrossChallengeGetBattleUserArrRsp::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TCrossChallengeGetBattleUserArrRsp::~TCrossChallengeGetBattleUserArrRsp() {
  // @@protoc_insertion_point(destructor:pb.TCrossChallengeGetBattleUserArrRsp)
  SharedDtor();
}

void TCrossChallengeGetBattleUserArrRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TCrossChallengeGetBattleUserArrRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TCrossChallengeGetBattleUserArrRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TCrossChallengeGetBattleUserArrRsp_descriptor_;
}

const TCrossChallengeGetBattleUserArrRsp& TCrossChallengeGetBattleUserArrRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fCrossChallenge_2eproto();
  return *default_instance_;
}

TCrossChallengeGetBattleUserArrRsp* TCrossChallengeGetBattleUserArrRsp::default_instance_ = NULL;

TCrossChallengeGetBattleUserArrRsp* TCrossChallengeGetBattleUserArrRsp::New() const {
  return new TCrossChallengeGetBattleUserArrRsp;
}

void TCrossChallengeGetBattleUserArrRsp::Clear() {
  challengearr_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TCrossChallengeGetBattleUserArrRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TCrossChallengeGetBattleUserArrRsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .pb.TCrossChallengeBattleArmyArr ChallengeArr = 1;
      case 1: {
        if (tag == 10) {
         parse_ChallengeArr:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_challengearr()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_ChallengeArr;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TCrossChallengeGetBattleUserArrRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TCrossChallengeGetBattleUserArrRsp)
  return false;
#undef DO_
}

void TCrossChallengeGetBattleUserArrRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TCrossChallengeGetBattleUserArrRsp)
  // repeated .pb.TCrossChallengeBattleArmyArr ChallengeArr = 1;
  for (int i = 0; i < this->challengearr_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->challengearr(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TCrossChallengeGetBattleUserArrRsp)
}

::google::protobuf::uint8* TCrossChallengeGetBattleUserArrRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TCrossChallengeGetBattleUserArrRsp)
  // repeated .pb.TCrossChallengeBattleArmyArr ChallengeArr = 1;
  for (int i = 0; i < this->challengearr_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->challengearr(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TCrossChallengeGetBattleUserArrRsp)
  return target;
}

int TCrossChallengeGetBattleUserArrRsp::ByteSize() const {
  int total_size = 0;

  // repeated .pb.TCrossChallengeBattleArmyArr ChallengeArr = 1;
  total_size += 1 * this->challengearr_size();
  for (int i = 0; i < this->challengearr_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->challengearr(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TCrossChallengeGetBattleUserArrRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TCrossChallengeGetBattleUserArrRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TCrossChallengeGetBattleUserArrRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TCrossChallengeGetBattleUserArrRsp::MergeFrom(const TCrossChallengeGetBattleUserArrRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  challengearr_.MergeFrom(from.challengearr_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TCrossChallengeGetBattleUserArrRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TCrossChallengeGetBattleUserArrRsp::CopyFrom(const TCrossChallengeGetBattleUserArrRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TCrossChallengeGetBattleUserArrRsp::IsInitialized() const {

  if (!::google::protobuf::internal::AllAreInitialized(this->challengearr())) return false;
  return true;
}

void TCrossChallengeGetBattleUserArrRsp::Swap(TCrossChallengeGetBattleUserArrRsp* other) {
  if (other != this) {
    challengearr_.Swap(&other->challengearr_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TCrossChallengeGetBattleUserArrRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TCrossChallengeGetBattleUserArrRsp_descriptor_;
  metadata.reflection = TCrossChallengeGetBattleUserArrRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TCrossChallengeAuditionSingle::kRidArrFieldNumber;
const int TCrossChallengeAuditionSingle::kUidFieldNumber;
const int TCrossChallengeAuditionSingle::kServerIdFieldNumber;
const int TCrossChallengeAuditionSingle::kFightForceFieldNumber;
const int TCrossChallengeAuditionSingle::kIsWinFieldNumber;
#endif  // !_MSC_VER

TCrossChallengeAuditionSingle::TCrossChallengeAuditionSingle()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TCrossChallengeAuditionSingle)
}

void TCrossChallengeAuditionSingle::InitAsDefaultInstance() {
}

TCrossChallengeAuditionSingle::TCrossChallengeAuditionSingle(const TCrossChallengeAuditionSingle& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TCrossChallengeAuditionSingle)
}

void TCrossChallengeAuditionSingle::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  uid_ = GOOGLE_ULONGLONG(0);
  serverid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  fightforce_ = GOOGLE_ULONGLONG(0);
  iswin_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TCrossChallengeAuditionSingle::~TCrossChallengeAuditionSingle() {
  // @@protoc_insertion_point(destructor:pb.TCrossChallengeAuditionSingle)
  SharedDtor();
}

void TCrossChallengeAuditionSingle::SharedDtor() {
  if (serverid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete serverid_;
  }
  if (this != default_instance_) {
  }
}

void TCrossChallengeAuditionSingle::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TCrossChallengeAuditionSingle::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TCrossChallengeAuditionSingle_descriptor_;
}

const TCrossChallengeAuditionSingle& TCrossChallengeAuditionSingle::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fCrossChallenge_2eproto();
  return *default_instance_;
}

TCrossChallengeAuditionSingle* TCrossChallengeAuditionSingle::default_instance_ = NULL;

TCrossChallengeAuditionSingle* TCrossChallengeAuditionSingle::New() const {
  return new TCrossChallengeAuditionSingle;
}

void TCrossChallengeAuditionSingle::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<TCrossChallengeAuditionSingle*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 30) {
    ZR_(fightforce_, iswin_);
    uid_ = GOOGLE_ULONGLONG(0);
    if (has_serverid()) {
      if (serverid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        serverid_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ridarr_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TCrossChallengeAuditionSingle::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TCrossChallengeAuditionSingle)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated uint64 RidArr = 1;
      case 1: {
        if (tag == 8) {
         parse_RidArr:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 1, 8, input, this->mutable_ridarr())));
        } else if (tag == 10) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, this->mutable_ridarr())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(8)) goto parse_RidArr;
        if (input->ExpectTag(16)) goto parse_Uid;
        break;
      }

      // optional uint64 Uid = 2;
      case 2: {
        if (tag == 16) {
         parse_Uid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &uid_)));
          set_has_uid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_ServerId;
        break;
      }

      // optional string ServerId = 3;
      case 3: {
        if (tag == 26) {
         parse_ServerId:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_serverid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->serverid().data(), this->serverid().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "serverid");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_FightForce;
        break;
      }

      // optional uint64 FightForce = 4;
      case 4: {
        if (tag == 32) {
         parse_FightForce:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &fightforce_)));
          set_has_fightforce();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_IsWin;
        break;
      }

      // optional uint32 IsWin = 5;
      case 5: {
        if (tag == 40) {
         parse_IsWin:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &iswin_)));
          set_has_iswin();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TCrossChallengeAuditionSingle)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TCrossChallengeAuditionSingle)
  return false;
#undef DO_
}

void TCrossChallengeAuditionSingle::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TCrossChallengeAuditionSingle)
  // repeated uint64 RidArr = 1;
  for (int i = 0; i < this->ridarr_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(
      1, this->ridarr(i), output);
  }

  // optional uint64 Uid = 2;
  if (has_uid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->uid(), output);
  }

  // optional string ServerId = 3;
  if (has_serverid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->serverid().data(), this->serverid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "serverid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->serverid(), output);
  }

  // optional uint64 FightForce = 4;
  if (has_fightforce()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->fightforce(), output);
  }

  // optional uint32 IsWin = 5;
  if (has_iswin()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->iswin(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TCrossChallengeAuditionSingle)
}

::google::protobuf::uint8* TCrossChallengeAuditionSingle::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TCrossChallengeAuditionSingle)
  // repeated uint64 RidArr = 1;
  for (int i = 0; i < this->ridarr_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt64ToArray(1, this->ridarr(i), target);
  }

  // optional uint64 Uid = 2;
  if (has_uid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->uid(), target);
  }

  // optional string ServerId = 3;
  if (has_serverid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->serverid().data(), this->serverid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "serverid");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->serverid(), target);
  }

  // optional uint64 FightForce = 4;
  if (has_fightforce()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->fightforce(), target);
  }

  // optional uint32 IsWin = 5;
  if (has_iswin()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->iswin(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TCrossChallengeAuditionSingle)
  return target;
}

int TCrossChallengeAuditionSingle::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // optional uint64 Uid = 2;
    if (has_uid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->uid());
    }

    // optional string ServerId = 3;
    if (has_serverid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->serverid());
    }

    // optional uint64 FightForce = 4;
    if (has_fightforce()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->fightforce());
    }

    // optional uint32 IsWin = 5;
    if (has_iswin()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->iswin());
    }

  }
  // repeated uint64 RidArr = 1;
  {
    int data_size = 0;
    for (int i = 0; i < this->ridarr_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt64Size(this->ridarr(i));
    }
    total_size += 1 * this->ridarr_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TCrossChallengeAuditionSingle::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TCrossChallengeAuditionSingle* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TCrossChallengeAuditionSingle*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TCrossChallengeAuditionSingle::MergeFrom(const TCrossChallengeAuditionSingle& from) {
  GOOGLE_CHECK_NE(&from, this);
  ridarr_.MergeFrom(from.ridarr_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_uid()) {
      set_uid(from.uid());
    }
    if (from.has_serverid()) {
      set_serverid(from.serverid());
    }
    if (from.has_fightforce()) {
      set_fightforce(from.fightforce());
    }
    if (from.has_iswin()) {
      set_iswin(from.iswin());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TCrossChallengeAuditionSingle::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TCrossChallengeAuditionSingle::CopyFrom(const TCrossChallengeAuditionSingle& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TCrossChallengeAuditionSingle::IsInitialized() const {

  return true;
}

void TCrossChallengeAuditionSingle::Swap(TCrossChallengeAuditionSingle* other) {
  if (other != this) {
    ridarr_.Swap(&other->ridarr_);
    std::swap(uid_, other->uid_);
    std::swap(serverid_, other->serverid_);
    std::swap(fightforce_, other->fightforce_);
    std::swap(iswin_, other->iswin_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TCrossChallengeAuditionSingle::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TCrossChallengeAuditionSingle_descriptor_;
  metadata.reflection = TCrossChallengeAuditionSingle_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TCrossChallengeAuditionUser::kUidFieldNumber;
const int TCrossChallengeAuditionUser::kIsWinFieldNumber;
const int TCrossChallengeAuditionUser::kRecordArrFieldNumber;
#endif  // !_MSC_VER

TCrossChallengeAuditionUser::TCrossChallengeAuditionUser()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TCrossChallengeAuditionUser)
}

void TCrossChallengeAuditionUser::InitAsDefaultInstance() {
}

TCrossChallengeAuditionUser::TCrossChallengeAuditionUser(const TCrossChallengeAuditionUser& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TCrossChallengeAuditionUser)
}

void TCrossChallengeAuditionUser::SharedCtor() {
  _cached_size_ = 0;
  uid_ = GOOGLE_ULONGLONG(0);
  iswin_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TCrossChallengeAuditionUser::~TCrossChallengeAuditionUser() {
  // @@protoc_insertion_point(destructor:pb.TCrossChallengeAuditionUser)
  SharedDtor();
}

void TCrossChallengeAuditionUser::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TCrossChallengeAuditionUser::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TCrossChallengeAuditionUser::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TCrossChallengeAuditionUser_descriptor_;
}

const TCrossChallengeAuditionUser& TCrossChallengeAuditionUser::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fCrossChallenge_2eproto();
  return *default_instance_;
}

TCrossChallengeAuditionUser* TCrossChallengeAuditionUser::default_instance_ = NULL;

TCrossChallengeAuditionUser* TCrossChallengeAuditionUser::New() const {
  return new TCrossChallengeAuditionUser;
}

void TCrossChallengeAuditionUser::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    uid_ = GOOGLE_ULONGLONG(0);
    iswin_ = 0u;
  }
  recordarr_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TCrossChallengeAuditionUser::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TCrossChallengeAuditionUser)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 Uid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &uid_)));
          set_has_uid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_IsWin;
        break;
      }

      // optional uint32 IsWin = 2;
      case 2: {
        if (tag == 16) {
         parse_IsWin:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &iswin_)));
          set_has_iswin();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_RecordArr;
        break;
      }

      // repeated .pb.TCrossChallengeAuditionSingle RecordArr = 3;
      case 3: {
        if (tag == 26) {
         parse_RecordArr:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_recordarr()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_RecordArr;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TCrossChallengeAuditionUser)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TCrossChallengeAuditionUser)
  return false;
#undef DO_
}

void TCrossChallengeAuditionUser::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TCrossChallengeAuditionUser)
  // optional uint64 Uid = 1;
  if (has_uid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->uid(), output);
  }

  // optional uint32 IsWin = 2;
  if (has_iswin()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->iswin(), output);
  }

  // repeated .pb.TCrossChallengeAuditionSingle RecordArr = 3;
  for (int i = 0; i < this->recordarr_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->recordarr(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TCrossChallengeAuditionUser)
}

::google::protobuf::uint8* TCrossChallengeAuditionUser::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TCrossChallengeAuditionUser)
  // optional uint64 Uid = 1;
  if (has_uid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->uid(), target);
  }

  // optional uint32 IsWin = 2;
  if (has_iswin()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->iswin(), target);
  }

  // repeated .pb.TCrossChallengeAuditionSingle RecordArr = 3;
  for (int i = 0; i < this->recordarr_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->recordarr(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TCrossChallengeAuditionUser)
  return target;
}

int TCrossChallengeAuditionUser::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 Uid = 1;
    if (has_uid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->uid());
    }

    // optional uint32 IsWin = 2;
    if (has_iswin()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->iswin());
    }

  }
  // repeated .pb.TCrossChallengeAuditionSingle RecordArr = 3;
  total_size += 1 * this->recordarr_size();
  for (int i = 0; i < this->recordarr_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->recordarr(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TCrossChallengeAuditionUser::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TCrossChallengeAuditionUser* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TCrossChallengeAuditionUser*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TCrossChallengeAuditionUser::MergeFrom(const TCrossChallengeAuditionUser& from) {
  GOOGLE_CHECK_NE(&from, this);
  recordarr_.MergeFrom(from.recordarr_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_uid()) {
      set_uid(from.uid());
    }
    if (from.has_iswin()) {
      set_iswin(from.iswin());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TCrossChallengeAuditionUser::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TCrossChallengeAuditionUser::CopyFrom(const TCrossChallengeAuditionUser& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TCrossChallengeAuditionUser::IsInitialized() const {

  return true;
}

void TCrossChallengeAuditionUser::Swap(TCrossChallengeAuditionUser* other) {
  if (other != this) {
    std::swap(uid_, other->uid_);
    std::swap(iswin_, other->iswin_);
    recordarr_.Swap(&other->recordarr_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TCrossChallengeAuditionUser::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TCrossChallengeAuditionUser_descriptor_;
  metadata.reflection = TCrossChallengeAuditionUser_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TCrossChallengeAuditionNotifyReq::kUserRecordArrFieldNumber;
#endif  // !_MSC_VER

TCrossChallengeAuditionNotifyReq::TCrossChallengeAuditionNotifyReq()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TCrossChallengeAuditionNotifyReq)
}

void TCrossChallengeAuditionNotifyReq::InitAsDefaultInstance() {
}

TCrossChallengeAuditionNotifyReq::TCrossChallengeAuditionNotifyReq(const TCrossChallengeAuditionNotifyReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TCrossChallengeAuditionNotifyReq)
}

void TCrossChallengeAuditionNotifyReq::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TCrossChallengeAuditionNotifyReq::~TCrossChallengeAuditionNotifyReq() {
  // @@protoc_insertion_point(destructor:pb.TCrossChallengeAuditionNotifyReq)
  SharedDtor();
}

void TCrossChallengeAuditionNotifyReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TCrossChallengeAuditionNotifyReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TCrossChallengeAuditionNotifyReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TCrossChallengeAuditionNotifyReq_descriptor_;
}

const TCrossChallengeAuditionNotifyReq& TCrossChallengeAuditionNotifyReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fCrossChallenge_2eproto();
  return *default_instance_;
}

TCrossChallengeAuditionNotifyReq* TCrossChallengeAuditionNotifyReq::default_instance_ = NULL;

TCrossChallengeAuditionNotifyReq* TCrossChallengeAuditionNotifyReq::New() const {
  return new TCrossChallengeAuditionNotifyReq;
}

void TCrossChallengeAuditionNotifyReq::Clear() {
  userrecordarr_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TCrossChallengeAuditionNotifyReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TCrossChallengeAuditionNotifyReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .pb.TCrossChallengeAuditionUser UserRecordArr = 1;
      case 1: {
        if (tag == 10) {
         parse_UserRecordArr:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_userrecordarr()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_UserRecordArr;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TCrossChallengeAuditionNotifyReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TCrossChallengeAuditionNotifyReq)
  return false;
#undef DO_
}

void TCrossChallengeAuditionNotifyReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TCrossChallengeAuditionNotifyReq)
  // repeated .pb.TCrossChallengeAuditionUser UserRecordArr = 1;
  for (int i = 0; i < this->userrecordarr_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->userrecordarr(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TCrossChallengeAuditionNotifyReq)
}

::google::protobuf::uint8* TCrossChallengeAuditionNotifyReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TCrossChallengeAuditionNotifyReq)
  // repeated .pb.TCrossChallengeAuditionUser UserRecordArr = 1;
  for (int i = 0; i < this->userrecordarr_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->userrecordarr(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TCrossChallengeAuditionNotifyReq)
  return target;
}

int TCrossChallengeAuditionNotifyReq::ByteSize() const {
  int total_size = 0;

  // repeated .pb.TCrossChallengeAuditionUser UserRecordArr = 1;
  total_size += 1 * this->userrecordarr_size();
  for (int i = 0; i < this->userrecordarr_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->userrecordarr(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TCrossChallengeAuditionNotifyReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TCrossChallengeAuditionNotifyReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TCrossChallengeAuditionNotifyReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TCrossChallengeAuditionNotifyReq::MergeFrom(const TCrossChallengeAuditionNotifyReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  userrecordarr_.MergeFrom(from.userrecordarr_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TCrossChallengeAuditionNotifyReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TCrossChallengeAuditionNotifyReq::CopyFrom(const TCrossChallengeAuditionNotifyReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TCrossChallengeAuditionNotifyReq::IsInitialized() const {

  return true;
}

void TCrossChallengeAuditionNotifyReq::Swap(TCrossChallengeAuditionNotifyReq* other) {
  if (other != this) {
    userrecordarr_.Swap(&other->userrecordarr_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TCrossChallengeAuditionNotifyReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TCrossChallengeAuditionNotifyReq_descriptor_;
  metadata.reflection = TCrossChallengeAuditionNotifyReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TCrossChallengeBattleUser::kUidFieldNumber;
const int TCrossChallengeBattleUser::kIsWinFieldNumber;
const int TCrossChallengeBattleUser::kRidArrFieldNumber;
#endif  // !_MSC_VER

TCrossChallengeBattleUser::TCrossChallengeBattleUser()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TCrossChallengeBattleUser)
}

void TCrossChallengeBattleUser::InitAsDefaultInstance() {
}

TCrossChallengeBattleUser::TCrossChallengeBattleUser(const TCrossChallengeBattleUser& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TCrossChallengeBattleUser)
}

void TCrossChallengeBattleUser::SharedCtor() {
  _cached_size_ = 0;
  uid_ = GOOGLE_ULONGLONG(0);
  iswin_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TCrossChallengeBattleUser::~TCrossChallengeBattleUser() {
  // @@protoc_insertion_point(destructor:pb.TCrossChallengeBattleUser)
  SharedDtor();
}

void TCrossChallengeBattleUser::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TCrossChallengeBattleUser::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TCrossChallengeBattleUser::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TCrossChallengeBattleUser_descriptor_;
}

const TCrossChallengeBattleUser& TCrossChallengeBattleUser::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fCrossChallenge_2eproto();
  return *default_instance_;
}

TCrossChallengeBattleUser* TCrossChallengeBattleUser::default_instance_ = NULL;

TCrossChallengeBattleUser* TCrossChallengeBattleUser::New() const {
  return new TCrossChallengeBattleUser;
}

void TCrossChallengeBattleUser::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    uid_ = GOOGLE_ULONGLONG(0);
    iswin_ = 0u;
  }
  ridarr_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TCrossChallengeBattleUser::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TCrossChallengeBattleUser)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 Uid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &uid_)));
          set_has_uid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_IsWin;
        break;
      }

      // optional uint32 IsWin = 2;
      case 2: {
        if (tag == 16) {
         parse_IsWin:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &iswin_)));
          set_has_iswin();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_RidArr;
        break;
      }

      // repeated uint64 RidArr = 3;
      case 3: {
        if (tag == 24) {
         parse_RidArr:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 1, 24, input, this->mutable_ridarr())));
        } else if (tag == 26) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, this->mutable_ridarr())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_RidArr;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TCrossChallengeBattleUser)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TCrossChallengeBattleUser)
  return false;
#undef DO_
}

void TCrossChallengeBattleUser::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TCrossChallengeBattleUser)
  // optional uint64 Uid = 1;
  if (has_uid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->uid(), output);
  }

  // optional uint32 IsWin = 2;
  if (has_iswin()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->iswin(), output);
  }

  // repeated uint64 RidArr = 3;
  for (int i = 0; i < this->ridarr_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(
      3, this->ridarr(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TCrossChallengeBattleUser)
}

::google::protobuf::uint8* TCrossChallengeBattleUser::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TCrossChallengeBattleUser)
  // optional uint64 Uid = 1;
  if (has_uid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->uid(), target);
  }

  // optional uint32 IsWin = 2;
  if (has_iswin()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->iswin(), target);
  }

  // repeated uint64 RidArr = 3;
  for (int i = 0; i < this->ridarr_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt64ToArray(3, this->ridarr(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TCrossChallengeBattleUser)
  return target;
}

int TCrossChallengeBattleUser::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 Uid = 1;
    if (has_uid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->uid());
    }

    // optional uint32 IsWin = 2;
    if (has_iswin()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->iswin());
    }

  }
  // repeated uint64 RidArr = 3;
  {
    int data_size = 0;
    for (int i = 0; i < this->ridarr_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt64Size(this->ridarr(i));
    }
    total_size += 1 * this->ridarr_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TCrossChallengeBattleUser::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TCrossChallengeBattleUser* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TCrossChallengeBattleUser*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TCrossChallengeBattleUser::MergeFrom(const TCrossChallengeBattleUser& from) {
  GOOGLE_CHECK_NE(&from, this);
  ridarr_.MergeFrom(from.ridarr_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_uid()) {
      set_uid(from.uid());
    }
    if (from.has_iswin()) {
      set_iswin(from.iswin());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TCrossChallengeBattleUser::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TCrossChallengeBattleUser::CopyFrom(const TCrossChallengeBattleUser& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TCrossChallengeBattleUser::IsInitialized() const {

  return true;
}

void TCrossChallengeBattleUser::Swap(TCrossChallengeBattleUser* other) {
  if (other != this) {
    std::swap(uid_, other->uid_);
    std::swap(iswin_, other->iswin_);
    ridarr_.Swap(&other->ridarr_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TCrossChallengeBattleUser::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TCrossChallengeBattleUser_descriptor_;
  metadata.reflection = TCrossChallengeBattleUser_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TCrossChallengeStepBattleNotifyReq::kStepFieldNumber;
const int TCrossChallengeStepBattleNotifyReq::kUserRecordArrFieldNumber;
#endif  // !_MSC_VER

TCrossChallengeStepBattleNotifyReq::TCrossChallengeStepBattleNotifyReq()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TCrossChallengeStepBattleNotifyReq)
}

void TCrossChallengeStepBattleNotifyReq::InitAsDefaultInstance() {
}

TCrossChallengeStepBattleNotifyReq::TCrossChallengeStepBattleNotifyReq(const TCrossChallengeStepBattleNotifyReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TCrossChallengeStepBattleNotifyReq)
}

void TCrossChallengeStepBattleNotifyReq::SharedCtor() {
  _cached_size_ = 0;
  step_ = 1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TCrossChallengeStepBattleNotifyReq::~TCrossChallengeStepBattleNotifyReq() {
  // @@protoc_insertion_point(destructor:pb.TCrossChallengeStepBattleNotifyReq)
  SharedDtor();
}

void TCrossChallengeStepBattleNotifyReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TCrossChallengeStepBattleNotifyReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TCrossChallengeStepBattleNotifyReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TCrossChallengeStepBattleNotifyReq_descriptor_;
}

const TCrossChallengeStepBattleNotifyReq& TCrossChallengeStepBattleNotifyReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fCrossChallenge_2eproto();
  return *default_instance_;
}

TCrossChallengeStepBattleNotifyReq* TCrossChallengeStepBattleNotifyReq::default_instance_ = NULL;

TCrossChallengeStepBattleNotifyReq* TCrossChallengeStepBattleNotifyReq::New() const {
  return new TCrossChallengeStepBattleNotifyReq;
}

void TCrossChallengeStepBattleNotifyReq::Clear() {
  step_ = 1;
  userrecordarr_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TCrossChallengeStepBattleNotifyReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TCrossChallengeStepBattleNotifyReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .pb.EChallengeStep Step = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::pb::EChallengeStep_IsValid(value)) {
            set_step(static_cast< ::pb::EChallengeStep >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_UserRecordArr;
        break;
      }

      // repeated .pb.TCrossChallengeBattleUser UserRecordArr = 2;
      case 2: {
        if (tag == 18) {
         parse_UserRecordArr:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_userrecordarr()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_UserRecordArr;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TCrossChallengeStepBattleNotifyReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TCrossChallengeStepBattleNotifyReq)
  return false;
#undef DO_
}

void TCrossChallengeStepBattleNotifyReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TCrossChallengeStepBattleNotifyReq)
  // optional .pb.EChallengeStep Step = 1;
  if (has_step()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->step(), output);
  }

  // repeated .pb.TCrossChallengeBattleUser UserRecordArr = 2;
  for (int i = 0; i < this->userrecordarr_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->userrecordarr(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TCrossChallengeStepBattleNotifyReq)
}

::google::protobuf::uint8* TCrossChallengeStepBattleNotifyReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TCrossChallengeStepBattleNotifyReq)
  // optional .pb.EChallengeStep Step = 1;
  if (has_step()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->step(), target);
  }

  // repeated .pb.TCrossChallengeBattleUser UserRecordArr = 2;
  for (int i = 0; i < this->userrecordarr_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->userrecordarr(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TCrossChallengeStepBattleNotifyReq)
  return target;
}

int TCrossChallengeStepBattleNotifyReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .pb.EChallengeStep Step = 1;
    if (has_step()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->step());
    }

  }
  // repeated .pb.TCrossChallengeBattleUser UserRecordArr = 2;
  total_size += 1 * this->userrecordarr_size();
  for (int i = 0; i < this->userrecordarr_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->userrecordarr(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TCrossChallengeStepBattleNotifyReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TCrossChallengeStepBattleNotifyReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TCrossChallengeStepBattleNotifyReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TCrossChallengeStepBattleNotifyReq::MergeFrom(const TCrossChallengeStepBattleNotifyReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  userrecordarr_.MergeFrom(from.userrecordarr_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_step()) {
      set_step(from.step());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TCrossChallengeStepBattleNotifyReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TCrossChallengeStepBattleNotifyReq::CopyFrom(const TCrossChallengeStepBattleNotifyReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TCrossChallengeStepBattleNotifyReq::IsInitialized() const {

  return true;
}

void TCrossChallengeStepBattleNotifyReq::Swap(TCrossChallengeStepBattleNotifyReq* other) {
  if (other != this) {
    std::swap(step_, other->step_);
    userrecordarr_.Swap(&other->userrecordarr_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TCrossChallengeStepBattleNotifyReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TCrossChallengeStepBattleNotifyReq_descriptor_;
  metadata.reflection = TCrossChallengeStepBattleNotifyReq_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace pb

// @@protoc_insertion_point(global_scope)
