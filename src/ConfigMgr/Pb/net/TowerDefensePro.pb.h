// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: net/TowerDefensePro.proto

#ifndef PROTOBUF_net_2fTowerDefensePro_2eproto__INCLUDED
#define PROTOBUF_net_2fTowerDefensePro_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
#include "net/Battle.pb.h"
#include "net/CommonReward.pb.h"
#include "net/User.pb.h"
// @@protoc_insertion_point(includes)

namespace pb {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_net_2fTowerDefensePro_2eproto();
void protobuf_AssignDesc_net_2fTowerDefensePro_2eproto();
void protobuf_ShutdownFile_net_2fTowerDefensePro_2eproto();

class TTowerDefenseProSimpleInfo;
class TTowerDefenseProGetSimpleInfoRsp;
class TTowerDefenseProGetInfoRsp;
class TTowerDefenseProSetPlotEndRsp;
class TTowerDefenseProGetHangRewardReq;
class TTowerDefenseProGetHangRewardRsp;
class TTowerDefenseProGetQuickHangRewardRsp;
class TTowerDefenseProSetFormationReq;
class TTowerDefenseProDoBattleReq;
class TTowerDefenseProDoBattleRsp;
class TTowerDefenseProReportBattleReq;
class TTowerDefenseProReportBattleRsp;
class TTowerDefenseProRoundRankInfo;
class TTowerDefenseProGetRoundRankReq;
class TTowerDefenseProGetRoundRankRsp;

// ===================================================================

/*FOR2LUA
<Record>
	<name>TTowerDefenseProSimpleInfo</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/TowerDefensePro.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TTowerDefenseProSimpleInfo : public ::google::protobuf::Message {
 public:
  TTowerDefenseProSimpleInfo();
  virtual ~TTowerDefenseProSimpleInfo();

  TTowerDefenseProSimpleInfo(const TTowerDefenseProSimpleInfo& from);

  inline TTowerDefenseProSimpleInfo& operator=(const TTowerDefenseProSimpleInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TTowerDefenseProSimpleInfo& default_instance();

  void Swap(TTowerDefenseProSimpleInfo* other);

  // implements Message ----------------------------------------------

  TTowerDefenseProSimpleInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TTowerDefenseProSimpleInfo& from);
  void MergeFrom(const TTowerDefenseProSimpleInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 CurRoundId = 1;
  inline bool has_curroundid() const;
  inline void clear_curroundid();
  static const int kCurRoundIdFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TTowerDefenseProSimpleInfo</name>
  	<Function>
  		<name>curroundid</name>
  		<replaceName>CurRoundId</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_curroundid</name>
  		<replaceName>CurRoundId</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_curroundid</name>
  		<replaceName>CurRoundId</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 curroundid() const;
  inline void set_curroundid(::google::protobuf::uint32 value);

  // optional uint32 MaxRoundId = 2;
  inline bool has_maxroundid() const;
  inline void clear_maxroundid();
  static const int kMaxRoundIdFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TTowerDefenseProSimpleInfo</name>
  	<Function>
  		<name>maxroundid</name>
  		<replaceName>MaxRoundId</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_maxroundid</name>
  		<replaceName>MaxRoundId</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_maxroundid</name>
  		<replaceName>MaxRoundId</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 maxroundid() const;
  inline void set_maxroundid(::google::protobuf::uint32 value);

  // optional uint64 PlotEndTime = 3;
  inline bool has_plotendtime() const;
  inline void clear_plotendtime();
  static const int kPlotEndTimeFieldNumber = 3;
  /*FOR2LUA
  <Record>
  	<name>TTowerDefenseProSimpleInfo</name>
  	<Function>
  		<name>plotendtime</name>
  		<replaceName>PlotEndTime</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_plotendtime</name>
  		<replaceName>PlotEndTime</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_plotendtime</name>
  		<replaceName>PlotEndTime</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint64 plotendtime() const;
  inline void set_plotendtime(::google::protobuf::uint64 value);

  // optional uint64 HangBeginTime = 4;
  inline bool has_hangbegintime() const;
  inline void clear_hangbegintime();
  static const int kHangBeginTimeFieldNumber = 4;
  /*FOR2LUA
  <Record>
  	<name>TTowerDefenseProSimpleInfo</name>
  	<Function>
  		<name>hangbegintime</name>
  		<replaceName>HangBeginTime</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_hangbegintime</name>
  		<replaceName>HangBeginTime</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_hangbegintime</name>
  		<replaceName>HangBeginTime</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint64 hangbegintime() const;
  inline void set_hangbegintime(::google::protobuf::uint64 value);

  // optional uint64 ReceiveTime = 5;
  inline bool has_receivetime() const;
  inline void clear_receivetime();
  static const int kReceiveTimeFieldNumber = 5;
  /*FOR2LUA
  <Record>
  	<name>TTowerDefenseProSimpleInfo</name>
  	<Function>
  		<name>receivetime</name>
  		<replaceName>ReceiveTime</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_receivetime</name>
  		<replaceName>ReceiveTime</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_receivetime</name>
  		<replaceName>ReceiveTime</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint64 receivetime() const;
  inline void set_receivetime(::google::protobuf::uint64 value);

  // optional uint64 SettleTime = 6;
  inline bool has_settletime() const;
  inline void clear_settletime();
  static const int kSettleTimeFieldNumber = 6;
  /*FOR2LUA
  <Record>
  	<name>TTowerDefenseProSimpleInfo</name>
  	<Function>
  		<name>settletime</name>
  		<replaceName>SettleTime</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_settletime</name>
  		<replaceName>SettleTime</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_settletime</name>
  		<replaceName>SettleTime</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint64 settletime() const;
  inline void set_settletime(::google::protobuf::uint64 value);

  // optional uint64 HangDuration = 7;
  inline bool has_hangduration() const;
  inline void clear_hangduration();
  static const int kHangDurationFieldNumber = 7;
  /*FOR2LUA
  <Record>
  	<name>TTowerDefenseProSimpleInfo</name>
  	<Function>
  		<name>hangduration</name>
  		<replaceName>HangDuration</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_hangduration</name>
  		<replaceName>HangDuration</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_hangduration</name>
  		<replaceName>HangDuration</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint64 hangduration() const;
  inline void set_hangduration(::google::protobuf::uint64 value);

  // optional uint32 QuickNum = 8;
  inline bool has_quicknum() const;
  inline void clear_quicknum();
  static const int kQuickNumFieldNumber = 8;
  /*FOR2LUA
  <Record>
  	<name>TTowerDefenseProSimpleInfo</name>
  	<Function>
  		<name>quicknum</name>
  		<replaceName>QuickNum</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_quicknum</name>
  		<replaceName>QuickNum</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_quicknum</name>
  		<replaceName>QuickNum</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 quicknum() const;
  inline void set_quicknum(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:pb.TTowerDefenseProSimpleInfo)
 private:
  inline void set_has_curroundid();
  inline void clear_has_curroundid();
  inline void set_has_maxroundid();
  inline void clear_has_maxroundid();
  inline void set_has_plotendtime();
  inline void clear_has_plotendtime();
  inline void set_has_hangbegintime();
  inline void clear_has_hangbegintime();
  inline void set_has_receivetime();
  inline void clear_has_receivetime();
  inline void set_has_settletime();
  inline void clear_has_settletime();
  inline void set_has_hangduration();
  inline void clear_has_hangduration();
  inline void set_has_quicknum();
  inline void clear_has_quicknum();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 curroundid_;
  ::google::protobuf::uint32 maxroundid_;
  ::google::protobuf::uint64 plotendtime_;
  ::google::protobuf::uint64 hangbegintime_;
  ::google::protobuf::uint64 receivetime_;
  ::google::protobuf::uint64 settletime_;
  ::google::protobuf::uint64 hangduration_;
  ::google::protobuf::uint32 quicknum_;
  friend void  protobuf_AddDesc_net_2fTowerDefensePro_2eproto();
  friend void protobuf_AssignDesc_net_2fTowerDefensePro_2eproto();
  friend void protobuf_ShutdownFile_net_2fTowerDefensePro_2eproto();

  void InitAsDefaultInstance();
  static TTowerDefenseProSimpleInfo* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TTowerDefenseProGetSimpleInfoRsp</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/TowerDefensePro.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TTowerDefenseProGetSimpleInfoRsp : public ::google::protobuf::Message {
 public:
  TTowerDefenseProGetSimpleInfoRsp();
  virtual ~TTowerDefenseProGetSimpleInfoRsp();

  TTowerDefenseProGetSimpleInfoRsp(const TTowerDefenseProGetSimpleInfoRsp& from);

  inline TTowerDefenseProGetSimpleInfoRsp& operator=(const TTowerDefenseProGetSimpleInfoRsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TTowerDefenseProGetSimpleInfoRsp& default_instance();

  void Swap(TTowerDefenseProGetSimpleInfoRsp* other);

  // implements Message ----------------------------------------------

  TTowerDefenseProGetSimpleInfoRsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TTowerDefenseProGetSimpleInfoRsp& from);
  void MergeFrom(const TTowerDefenseProGetSimpleInfoRsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .pb.TTowerDefenseProSimpleInfo SimpleInfo = 1;
  inline bool has_simpleinfo() const;
  inline void clear_simpleinfo();
  static const int kSimpleInfoFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TTowerDefenseProGetSimpleInfoRsp</name>
  	<Function>
  		<name>simpleinfo</name>
  		<replaceName>SimpleInfo</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_simpleinfo</name>
  		<replaceName>SimpleInfo</replaceName>
  		<handler>descripter = pb_set_message_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_allocated_simpleinfo</name>
  		<replaceName>SimpleInfo</replaceName>
  		<handler>descripter = pb_set_message_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_simpleinfo</name>
  		<replaceName>SimpleInfo</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TTowerDefenseProSimpleInfo& simpleinfo() const;
  inline ::pb::TTowerDefenseProSimpleInfo* mutable_simpleinfo();
  inline ::pb::TTowerDefenseProSimpleInfo* release_simpleinfo();
  inline void set_allocated_simpleinfo(::pb::TTowerDefenseProSimpleInfo* simpleinfo);

  // @@protoc_insertion_point(class_scope:pb.TTowerDefenseProGetSimpleInfoRsp)
 private:
  inline void set_has_simpleinfo();
  inline void clear_has_simpleinfo();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::pb::TTowerDefenseProSimpleInfo* simpleinfo_;
  friend void  protobuf_AddDesc_net_2fTowerDefensePro_2eproto();
  friend void protobuf_AssignDesc_net_2fTowerDefensePro_2eproto();
  friend void protobuf_ShutdownFile_net_2fTowerDefensePro_2eproto();

  void InitAsDefaultInstance();
  static TTowerDefenseProGetSimpleInfoRsp* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TTowerDefenseProGetInfoRsp</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/TowerDefensePro.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TTowerDefenseProGetInfoRsp : public ::google::protobuf::Message {
 public:
  TTowerDefenseProGetInfoRsp();
  virtual ~TTowerDefenseProGetInfoRsp();

  TTowerDefenseProGetInfoRsp(const TTowerDefenseProGetInfoRsp& from);

  inline TTowerDefenseProGetInfoRsp& operator=(const TTowerDefenseProGetInfoRsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TTowerDefenseProGetInfoRsp& default_instance();

  void Swap(TTowerDefenseProGetInfoRsp* other);

  // implements Message ----------------------------------------------

  TTowerDefenseProGetInfoRsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TTowerDefenseProGetInfoRsp& from);
  void MergeFrom(const TTowerDefenseProGetInfoRsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .pb.TTowerDefenseProSimpleInfo SimpleInfo = 1;
  inline bool has_simpleinfo() const;
  inline void clear_simpleinfo();
  static const int kSimpleInfoFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TTowerDefenseProGetInfoRsp</name>
  	<Function>
  		<name>simpleinfo</name>
  		<replaceName>SimpleInfo</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_simpleinfo</name>
  		<replaceName>SimpleInfo</replaceName>
  		<handler>descripter = pb_set_message_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_allocated_simpleinfo</name>
  		<replaceName>SimpleInfo</replaceName>
  		<handler>descripter = pb_set_message_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_simpleinfo</name>
  		<replaceName>SimpleInfo</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TTowerDefenseProSimpleInfo& simpleinfo() const;
  inline ::pb::TTowerDefenseProSimpleInfo* mutable_simpleinfo();
  inline ::pb::TTowerDefenseProSimpleInfo* release_simpleinfo();
  inline void set_allocated_simpleinfo(::pb::TTowerDefenseProSimpleInfo* simpleinfo);

  // optional uint32 WaveNum = 2;
  inline bool has_wavenum() const;
  inline void clear_wavenum();
  static const int kWaveNumFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TTowerDefenseProGetInfoRsp</name>
  	<Function>
  		<name>wavenum</name>
  		<replaceName>WaveNum</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_wavenum</name>
  		<replaceName>WaveNum</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_wavenum</name>
  		<replaceName>WaveNum</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 wavenum() const;
  inline void set_wavenum(::google::protobuf::uint32 value);

  // optional bytes BattleArgsData = 3;
  inline bool has_battleargsdata() const;
  inline void clear_battleargsdata();
  static const int kBattleArgsDataFieldNumber = 3;
  /*FOR2LUA
  <Record>
  	<name>TTowerDefenseProGetInfoRsp</name>
  	<Function>
  		<name>battleargsdata</name>
  		<replaceName>BattleArgsData</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_battleargsdata</name>
  		<replaceName>BattleArgsData</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_battleargsdata</name>
  		<replaceName>BattleArgsData</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::std::string& battleargsdata() const;
  inline void set_battleargsdata(const ::std::string& value);
  inline void set_battleargsdata(const char* value);
  inline void set_battleargsdata(const void* value, size_t size);
  inline ::std::string* mutable_battleargsdata();
  inline ::std::string* release_battleargsdata();
  inline void set_allocated_battleargsdata(::std::string* battleargsdata);

  // repeated .pb.TCommonReward ArrHangReward = 4;
  inline int arrhangreward_size() const;
  inline void clear_arrhangreward();
  static const int kArrHangRewardFieldNumber = 4;
  /*FOR2LUA
  <Record>
  	<name>TTowerDefenseProGetInfoRsp</name>
  	<Function>
  		<name>arrhangreward</name>
  		<replaceName>ArrHangReward</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_arrhangreward</name>
  		<replaceName>ArrHangReward</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_arrhangreward</name>
  		<replaceName>ArrHangReward</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_arrhangreward</name>
  		<replaceName>ArrHangReward</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>arrhangreward_size</name>
  		<replaceName>ArrHangReward</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TCommonReward& arrhangreward(int index) const;
  inline ::pb::TCommonReward* mutable_arrhangreward(int index);
  inline ::pb::TCommonReward* add_arrhangreward();
  inline const ::google::protobuf::RepeatedPtrField< ::pb::TCommonReward >&
      arrhangreward() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb::TCommonReward >*
      mutable_arrhangreward();

  // @@protoc_insertion_point(class_scope:pb.TTowerDefenseProGetInfoRsp)
 private:
  inline void set_has_simpleinfo();
  inline void clear_has_simpleinfo();
  inline void set_has_wavenum();
  inline void clear_has_wavenum();
  inline void set_has_battleargsdata();
  inline void clear_has_battleargsdata();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::pb::TTowerDefenseProSimpleInfo* simpleinfo_;
  ::std::string* battleargsdata_;
  ::google::protobuf::RepeatedPtrField< ::pb::TCommonReward > arrhangreward_;
  ::google::protobuf::uint32 wavenum_;
  friend void  protobuf_AddDesc_net_2fTowerDefensePro_2eproto();
  friend void protobuf_AssignDesc_net_2fTowerDefensePro_2eproto();
  friend void protobuf_ShutdownFile_net_2fTowerDefensePro_2eproto();

  void InitAsDefaultInstance();
  static TTowerDefenseProGetInfoRsp* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TTowerDefenseProSetPlotEndRsp</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/TowerDefensePro.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TTowerDefenseProSetPlotEndRsp : public ::google::protobuf::Message {
 public:
  TTowerDefenseProSetPlotEndRsp();
  virtual ~TTowerDefenseProSetPlotEndRsp();

  TTowerDefenseProSetPlotEndRsp(const TTowerDefenseProSetPlotEndRsp& from);

  inline TTowerDefenseProSetPlotEndRsp& operator=(const TTowerDefenseProSetPlotEndRsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TTowerDefenseProSetPlotEndRsp& default_instance();

  void Swap(TTowerDefenseProSetPlotEndRsp* other);

  // implements Message ----------------------------------------------

  TTowerDefenseProSetPlotEndRsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TTowerDefenseProSetPlotEndRsp& from);
  void MergeFrom(const TTowerDefenseProSetPlotEndRsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bytes BattleArgsData = 1;
  inline bool has_battleargsdata() const;
  inline void clear_battleargsdata();
  static const int kBattleArgsDataFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TTowerDefenseProSetPlotEndRsp</name>
  	<Function>
  		<name>battleargsdata</name>
  		<replaceName>BattleArgsData</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_battleargsdata</name>
  		<replaceName>BattleArgsData</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_battleargsdata</name>
  		<replaceName>BattleArgsData</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::std::string& battleargsdata() const;
  inline void set_battleargsdata(const ::std::string& value);
  inline void set_battleargsdata(const char* value);
  inline void set_battleargsdata(const void* value, size_t size);
  inline ::std::string* mutable_battleargsdata();
  inline ::std::string* release_battleargsdata();
  inline void set_allocated_battleargsdata(::std::string* battleargsdata);

  // @@protoc_insertion_point(class_scope:pb.TTowerDefenseProSetPlotEndRsp)
 private:
  inline void set_has_battleargsdata();
  inline void clear_has_battleargsdata();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* battleargsdata_;
  friend void  protobuf_AddDesc_net_2fTowerDefensePro_2eproto();
  friend void protobuf_AssignDesc_net_2fTowerDefensePro_2eproto();
  friend void protobuf_ShutdownFile_net_2fTowerDefensePro_2eproto();

  void InitAsDefaultInstance();
  static TTowerDefenseProSetPlotEndRsp* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TTowerDefenseProGetHangRewardReq</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/TowerDefensePro.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TTowerDefenseProGetHangRewardReq : public ::google::protobuf::Message {
 public:
  TTowerDefenseProGetHangRewardReq();
  virtual ~TTowerDefenseProGetHangRewardReq();

  TTowerDefenseProGetHangRewardReq(const TTowerDefenseProGetHangRewardReq& from);

  inline TTowerDefenseProGetHangRewardReq& operator=(const TTowerDefenseProGetHangRewardReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TTowerDefenseProGetHangRewardReq& default_instance();

  void Swap(TTowerDefenseProGetHangRewardReq* other);

  // implements Message ----------------------------------------------

  TTowerDefenseProGetHangRewardReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TTowerDefenseProGetHangRewardReq& from);
  void MergeFrom(const TTowerDefenseProGetHangRewardReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bool IsPreview = 1;
  inline bool has_ispreview() const;
  inline void clear_ispreview();
  static const int kIsPreviewFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TTowerDefenseProGetHangRewardReq</name>
  	<Function>
  		<name>ispreview</name>
  		<replaceName>IsPreview</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_ispreview</name>
  		<replaceName>IsPreview</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_ispreview</name>
  		<replaceName>IsPreview</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline bool ispreview() const;
  inline void set_ispreview(bool value);

  // @@protoc_insertion_point(class_scope:pb.TTowerDefenseProGetHangRewardReq)
 private:
  inline void set_has_ispreview();
  inline void clear_has_ispreview();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  bool ispreview_;
  friend void  protobuf_AddDesc_net_2fTowerDefensePro_2eproto();
  friend void protobuf_AssignDesc_net_2fTowerDefensePro_2eproto();
  friend void protobuf_ShutdownFile_net_2fTowerDefensePro_2eproto();

  void InitAsDefaultInstance();
  static TTowerDefenseProGetHangRewardReq* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TTowerDefenseProGetHangRewardRsp</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/TowerDefensePro.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TTowerDefenseProGetHangRewardRsp : public ::google::protobuf::Message {
 public:
  TTowerDefenseProGetHangRewardRsp();
  virtual ~TTowerDefenseProGetHangRewardRsp();

  TTowerDefenseProGetHangRewardRsp(const TTowerDefenseProGetHangRewardRsp& from);

  inline TTowerDefenseProGetHangRewardRsp& operator=(const TTowerDefenseProGetHangRewardRsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TTowerDefenseProGetHangRewardRsp& default_instance();

  void Swap(TTowerDefenseProGetHangRewardRsp* other);

  // implements Message ----------------------------------------------

  TTowerDefenseProGetHangRewardRsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TTowerDefenseProGetHangRewardRsp& from);
  void MergeFrom(const TTowerDefenseProGetHangRewardRsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint64 HangBeginTime = 1;
  inline bool has_hangbegintime() const;
  inline void clear_hangbegintime();
  static const int kHangBeginTimeFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TTowerDefenseProGetHangRewardRsp</name>
  	<Function>
  		<name>hangbegintime</name>
  		<replaceName>HangBeginTime</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_hangbegintime</name>
  		<replaceName>HangBeginTime</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_hangbegintime</name>
  		<replaceName>HangBeginTime</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint64 hangbegintime() const;
  inline void set_hangbegintime(::google::protobuf::uint64 value);

  // optional uint64 ReceiveTime = 2;
  inline bool has_receivetime() const;
  inline void clear_receivetime();
  static const int kReceiveTimeFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TTowerDefenseProGetHangRewardRsp</name>
  	<Function>
  		<name>receivetime</name>
  		<replaceName>ReceiveTime</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_receivetime</name>
  		<replaceName>ReceiveTime</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_receivetime</name>
  		<replaceName>ReceiveTime</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint64 receivetime() const;
  inline void set_receivetime(::google::protobuf::uint64 value);

  // repeated .pb.TCommonReward ArrHangReward = 3;
  inline int arrhangreward_size() const;
  inline void clear_arrhangreward();
  static const int kArrHangRewardFieldNumber = 3;
  /*FOR2LUA
  <Record>
  	<name>TTowerDefenseProGetHangRewardRsp</name>
  	<Function>
  		<name>arrhangreward</name>
  		<replaceName>ArrHangReward</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_arrhangreward</name>
  		<replaceName>ArrHangReward</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_arrhangreward</name>
  		<replaceName>ArrHangReward</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_arrhangreward</name>
  		<replaceName>ArrHangReward</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>arrhangreward_size</name>
  		<replaceName>ArrHangReward</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TCommonReward& arrhangreward(int index) const;
  inline ::pb::TCommonReward* mutable_arrhangreward(int index);
  inline ::pb::TCommonReward* add_arrhangreward();
  inline const ::google::protobuf::RepeatedPtrField< ::pb::TCommonReward >&
      arrhangreward() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb::TCommonReward >*
      mutable_arrhangreward();

  // optional uint64 SettleTime = 4;
  inline bool has_settletime() const;
  inline void clear_settletime();
  static const int kSettleTimeFieldNumber = 4;
  /*FOR2LUA
  <Record>
  	<name>TTowerDefenseProGetHangRewardRsp</name>
  	<Function>
  		<name>settletime</name>
  		<replaceName>SettleTime</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_settletime</name>
  		<replaceName>SettleTime</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_settletime</name>
  		<replaceName>SettleTime</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint64 settletime() const;
  inline void set_settletime(::google::protobuf::uint64 value);

  // optional uint64 HangDuration = 5;
  inline bool has_hangduration() const;
  inline void clear_hangduration();
  static const int kHangDurationFieldNumber = 5;
  /*FOR2LUA
  <Record>
  	<name>TTowerDefenseProGetHangRewardRsp</name>
  	<Function>
  		<name>hangduration</name>
  		<replaceName>HangDuration</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_hangduration</name>
  		<replaceName>HangDuration</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_hangduration</name>
  		<replaceName>HangDuration</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint64 hangduration() const;
  inline void set_hangduration(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:pb.TTowerDefenseProGetHangRewardRsp)
 private:
  inline void set_has_hangbegintime();
  inline void clear_has_hangbegintime();
  inline void set_has_receivetime();
  inline void clear_has_receivetime();
  inline void set_has_settletime();
  inline void clear_has_settletime();
  inline void set_has_hangduration();
  inline void clear_has_hangduration();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint64 hangbegintime_;
  ::google::protobuf::uint64 receivetime_;
  ::google::protobuf::RepeatedPtrField< ::pb::TCommonReward > arrhangreward_;
  ::google::protobuf::uint64 settletime_;
  ::google::protobuf::uint64 hangduration_;
  friend void  protobuf_AddDesc_net_2fTowerDefensePro_2eproto();
  friend void protobuf_AssignDesc_net_2fTowerDefensePro_2eproto();
  friend void protobuf_ShutdownFile_net_2fTowerDefensePro_2eproto();

  void InitAsDefaultInstance();
  static TTowerDefenseProGetHangRewardRsp* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TTowerDefenseProGetQuickHangRewardRsp</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/TowerDefensePro.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TTowerDefenseProGetQuickHangRewardRsp : public ::google::protobuf::Message {
 public:
  TTowerDefenseProGetQuickHangRewardRsp();
  virtual ~TTowerDefenseProGetQuickHangRewardRsp();

  TTowerDefenseProGetQuickHangRewardRsp(const TTowerDefenseProGetQuickHangRewardRsp& from);

  inline TTowerDefenseProGetQuickHangRewardRsp& operator=(const TTowerDefenseProGetQuickHangRewardRsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TTowerDefenseProGetQuickHangRewardRsp& default_instance();

  void Swap(TTowerDefenseProGetQuickHangRewardRsp* other);

  // implements Message ----------------------------------------------

  TTowerDefenseProGetQuickHangRewardRsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TTowerDefenseProGetQuickHangRewardRsp& from);
  void MergeFrom(const TTowerDefenseProGetQuickHangRewardRsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .pb.TCommonReward ArrHangReward = 1;
  inline int arrhangreward_size() const;
  inline void clear_arrhangreward();
  static const int kArrHangRewardFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TTowerDefenseProGetQuickHangRewardRsp</name>
  	<Function>
  		<name>arrhangreward</name>
  		<replaceName>ArrHangReward</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_arrhangreward</name>
  		<replaceName>ArrHangReward</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_arrhangreward</name>
  		<replaceName>ArrHangReward</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_arrhangreward</name>
  		<replaceName>ArrHangReward</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>arrhangreward_size</name>
  		<replaceName>ArrHangReward</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TCommonReward& arrhangreward(int index) const;
  inline ::pb::TCommonReward* mutable_arrhangreward(int index);
  inline ::pb::TCommonReward* add_arrhangreward();
  inline const ::google::protobuf::RepeatedPtrField< ::pb::TCommonReward >&
      arrhangreward() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb::TCommonReward >*
      mutable_arrhangreward();

  // @@protoc_insertion_point(class_scope:pb.TTowerDefenseProGetQuickHangRewardRsp)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::pb::TCommonReward > arrhangreward_;
  friend void  protobuf_AddDesc_net_2fTowerDefensePro_2eproto();
  friend void protobuf_AssignDesc_net_2fTowerDefensePro_2eproto();
  friend void protobuf_ShutdownFile_net_2fTowerDefensePro_2eproto();

  void InitAsDefaultInstance();
  static TTowerDefenseProGetQuickHangRewardRsp* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TTowerDefenseProSetFormationReq</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/TowerDefensePro.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TTowerDefenseProSetFormationReq : public ::google::protobuf::Message {
 public:
  TTowerDefenseProSetFormationReq();
  virtual ~TTowerDefenseProSetFormationReq();

  TTowerDefenseProSetFormationReq(const TTowerDefenseProSetFormationReq& from);

  inline TTowerDefenseProSetFormationReq& operator=(const TTowerDefenseProSetFormationReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TTowerDefenseProSetFormationReq& default_instance();

  void Swap(TTowerDefenseProSetFormationReq* other);

  // implements Message ----------------------------------------------

  TTowerDefenseProSetFormationReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TTowerDefenseProSetFormationReq& from);
  void MergeFrom(const TTowerDefenseProSetFormationReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .pb.TUnitFormation ArrFormation = 1;
  inline int arrformation_size() const;
  inline void clear_arrformation();
  static const int kArrFormationFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TTowerDefenseProSetFormationReq</name>
  	<Function>
  		<name>arrformation</name>
  		<replaceName>ArrFormation</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_arrformation</name>
  		<replaceName>ArrFormation</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_arrformation</name>
  		<replaceName>ArrFormation</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_arrformation</name>
  		<replaceName>ArrFormation</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>arrformation_size</name>
  		<replaceName>ArrFormation</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TUnitFormation& arrformation(int index) const;
  inline ::pb::TUnitFormation* mutable_arrformation(int index);
  inline ::pb::TUnitFormation* add_arrformation();
  inline const ::google::protobuf::RepeatedPtrField< ::pb::TUnitFormation >&
      arrformation() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb::TUnitFormation >*
      mutable_arrformation();

  // @@protoc_insertion_point(class_scope:pb.TTowerDefenseProSetFormationReq)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::pb::TUnitFormation > arrformation_;
  friend void  protobuf_AddDesc_net_2fTowerDefensePro_2eproto();
  friend void protobuf_AssignDesc_net_2fTowerDefensePro_2eproto();
  friend void protobuf_ShutdownFile_net_2fTowerDefensePro_2eproto();

  void InitAsDefaultInstance();
  static TTowerDefenseProSetFormationReq* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TTowerDefenseProDoBattleReq</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/TowerDefensePro.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TTowerDefenseProDoBattleReq : public ::google::protobuf::Message {
 public:
  TTowerDefenseProDoBattleReq();
  virtual ~TTowerDefenseProDoBattleReq();

  TTowerDefenseProDoBattleReq(const TTowerDefenseProDoBattleReq& from);

  inline TTowerDefenseProDoBattleReq& operator=(const TTowerDefenseProDoBattleReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TTowerDefenseProDoBattleReq& default_instance();

  void Swap(TTowerDefenseProDoBattleReq* other);

  // implements Message ----------------------------------------------

  TTowerDefenseProDoBattleReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TTowerDefenseProDoBattleReq& from);
  void MergeFrom(const TTowerDefenseProDoBattleReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 RoundId = 1;
  inline bool has_roundid() const;
  inline void clear_roundid();
  static const int kRoundIdFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TTowerDefenseProDoBattleReq</name>
  	<Function>
  		<name>roundid</name>
  		<replaceName>RoundId</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_roundid</name>
  		<replaceName>RoundId</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_roundid</name>
  		<replaceName>RoundId</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 roundid() const;
  inline void set_roundid(::google::protobuf::uint32 value);

  // optional .pb.TBattleCheckParam BattleCheckParam = 2;
  inline bool has_battlecheckparam() const;
  inline void clear_battlecheckparam();
  static const int kBattleCheckParamFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TTowerDefenseProDoBattleReq</name>
  	<Function>
  		<name>battlecheckparam</name>
  		<replaceName>BattleCheckParam</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_battlecheckparam</name>
  		<replaceName>BattleCheckParam</replaceName>
  		<handler>descripter = pb_set_message_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_allocated_battlecheckparam</name>
  		<replaceName>BattleCheckParam</replaceName>
  		<handler>descripter = pb_set_message_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_battlecheckparam</name>
  		<replaceName>BattleCheckParam</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TBattleCheckParam& battlecheckparam() const;
  inline ::pb::TBattleCheckParam* mutable_battlecheckparam();
  inline ::pb::TBattleCheckParam* release_battlecheckparam();
  inline void set_allocated_battlecheckparam(::pb::TBattleCheckParam* battlecheckparam);

  // @@protoc_insertion_point(class_scope:pb.TTowerDefenseProDoBattleReq)
 private:
  inline void set_has_roundid();
  inline void clear_has_roundid();
  inline void set_has_battlecheckparam();
  inline void clear_has_battlecheckparam();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::pb::TBattleCheckParam* battlecheckparam_;
  ::google::protobuf::uint32 roundid_;
  friend void  protobuf_AddDesc_net_2fTowerDefensePro_2eproto();
  friend void protobuf_AssignDesc_net_2fTowerDefensePro_2eproto();
  friend void protobuf_ShutdownFile_net_2fTowerDefensePro_2eproto();

  void InitAsDefaultInstance();
  static TTowerDefenseProDoBattleReq* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TTowerDefenseProDoBattleRsp</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/TowerDefensePro.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TTowerDefenseProDoBattleRsp : public ::google::protobuf::Message {
 public:
  TTowerDefenseProDoBattleRsp();
  virtual ~TTowerDefenseProDoBattleRsp();

  TTowerDefenseProDoBattleRsp(const TTowerDefenseProDoBattleRsp& from);

  inline TTowerDefenseProDoBattleRsp& operator=(const TTowerDefenseProDoBattleRsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TTowerDefenseProDoBattleRsp& default_instance();

  void Swap(TTowerDefenseProDoBattleRsp* other);

  // implements Message ----------------------------------------------

  TTowerDefenseProDoBattleRsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TTowerDefenseProDoBattleRsp& from);
  void MergeFrom(const TTowerDefenseProDoBattleRsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bytes BattleArgsData = 1;
  inline bool has_battleargsdata() const;
  inline void clear_battleargsdata();
  static const int kBattleArgsDataFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TTowerDefenseProDoBattleRsp</name>
  	<Function>
  		<name>battleargsdata</name>
  		<replaceName>BattleArgsData</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_battleargsdata</name>
  		<replaceName>BattleArgsData</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_battleargsdata</name>
  		<replaceName>BattleArgsData</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::std::string& battleargsdata() const;
  inline void set_battleargsdata(const ::std::string& value);
  inline void set_battleargsdata(const char* value);
  inline void set_battleargsdata(const void* value, size_t size);
  inline ::std::string* mutable_battleargsdata();
  inline ::std::string* release_battleargsdata();
  inline void set_allocated_battleargsdata(::std::string* battleargsdata);

  // @@protoc_insertion_point(class_scope:pb.TTowerDefenseProDoBattleRsp)
 private:
  inline void set_has_battleargsdata();
  inline void clear_has_battleargsdata();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* battleargsdata_;
  friend void  protobuf_AddDesc_net_2fTowerDefensePro_2eproto();
  friend void protobuf_AssignDesc_net_2fTowerDefensePro_2eproto();
  friend void protobuf_ShutdownFile_net_2fTowerDefensePro_2eproto();

  void InitAsDefaultInstance();
  static TTowerDefenseProDoBattleRsp* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TTowerDefenseProReportBattleReq</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/TowerDefensePro.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TTowerDefenseProReportBattleReq : public ::google::protobuf::Message {
 public:
  TTowerDefenseProReportBattleReq();
  virtual ~TTowerDefenseProReportBattleReq();

  TTowerDefenseProReportBattleReq(const TTowerDefenseProReportBattleReq& from);

  inline TTowerDefenseProReportBattleReq& operator=(const TTowerDefenseProReportBattleReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TTowerDefenseProReportBattleReq& default_instance();

  void Swap(TTowerDefenseProReportBattleReq* other);

  // implements Message ----------------------------------------------

  TTowerDefenseProReportBattleReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TTowerDefenseProReportBattleReq& from);
  void MergeFrom(const TTowerDefenseProReportBattleReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 RoundId = 1;
  inline bool has_roundid() const;
  inline void clear_roundid();
  static const int kRoundIdFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TTowerDefenseProReportBattleReq</name>
  	<Function>
  		<name>roundid</name>
  		<replaceName>RoundId</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_roundid</name>
  		<replaceName>RoundId</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_roundid</name>
  		<replaceName>RoundId</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 roundid() const;
  inline void set_roundid(::google::protobuf::uint32 value);

  // optional bytes BattleResultBytes = 2;
  inline bool has_battleresultbytes() const;
  inline void clear_battleresultbytes();
  static const int kBattleResultBytesFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TTowerDefenseProReportBattleReq</name>
  	<Function>
  		<name>battleresultbytes</name>
  		<replaceName>BattleResultBytes</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_battleresultbytes</name>
  		<replaceName>BattleResultBytes</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_battleresultbytes</name>
  		<replaceName>BattleResultBytes</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::std::string& battleresultbytes() const;
  inline void set_battleresultbytes(const ::std::string& value);
  inline void set_battleresultbytes(const char* value);
  inline void set_battleresultbytes(const void* value, size_t size);
  inline ::std::string* mutable_battleresultbytes();
  inline ::std::string* release_battleresultbytes();
  inline void set_allocated_battleresultbytes(::std::string* battleresultbytes);

  // @@protoc_insertion_point(class_scope:pb.TTowerDefenseProReportBattleReq)
 private:
  inline void set_has_roundid();
  inline void clear_has_roundid();
  inline void set_has_battleresultbytes();
  inline void clear_has_battleresultbytes();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* battleresultbytes_;
  ::google::protobuf::uint32 roundid_;
  friend void  protobuf_AddDesc_net_2fTowerDefensePro_2eproto();
  friend void protobuf_AssignDesc_net_2fTowerDefensePro_2eproto();
  friend void protobuf_ShutdownFile_net_2fTowerDefensePro_2eproto();

  void InitAsDefaultInstance();
  static TTowerDefenseProReportBattleReq* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TTowerDefenseProReportBattleRsp</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/TowerDefensePro.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TTowerDefenseProReportBattleRsp : public ::google::protobuf::Message {
 public:
  TTowerDefenseProReportBattleRsp();
  virtual ~TTowerDefenseProReportBattleRsp();

  TTowerDefenseProReportBattleRsp(const TTowerDefenseProReportBattleRsp& from);

  inline TTowerDefenseProReportBattleRsp& operator=(const TTowerDefenseProReportBattleRsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TTowerDefenseProReportBattleRsp& default_instance();

  void Swap(TTowerDefenseProReportBattleRsp* other);

  // implements Message ----------------------------------------------

  TTowerDefenseProReportBattleRsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TTowerDefenseProReportBattleRsp& from);
  void MergeFrom(const TTowerDefenseProReportBattleRsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .pb.TCommonReward DropArray = 1;
  inline int droparray_size() const;
  inline void clear_droparray();
  static const int kDropArrayFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TTowerDefenseProReportBattleRsp</name>
  	<Function>
  		<name>droparray</name>
  		<replaceName>DropArray</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_droparray</name>
  		<replaceName>DropArray</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_droparray</name>
  		<replaceName>DropArray</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_droparray</name>
  		<replaceName>DropArray</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>droparray_size</name>
  		<replaceName>DropArray</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TCommonReward& droparray(int index) const;
  inline ::pb::TCommonReward* mutable_droparray(int index);
  inline ::pb::TCommonReward* add_droparray();
  inline const ::google::protobuf::RepeatedPtrField< ::pb::TCommonReward >&
      droparray() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb::TCommonReward >*
      mutable_droparray();

  // optional bytes BattleArgsData = 2;
  inline bool has_battleargsdata() const;
  inline void clear_battleargsdata();
  static const int kBattleArgsDataFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TTowerDefenseProReportBattleRsp</name>
  	<Function>
  		<name>battleargsdata</name>
  		<replaceName>BattleArgsData</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_battleargsdata</name>
  		<replaceName>BattleArgsData</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_battleargsdata</name>
  		<replaceName>BattleArgsData</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::std::string& battleargsdata() const;
  inline void set_battleargsdata(const ::std::string& value);
  inline void set_battleargsdata(const char* value);
  inline void set_battleargsdata(const void* value, size_t size);
  inline ::std::string* mutable_battleargsdata();
  inline ::std::string* release_battleargsdata();
  inline void set_allocated_battleargsdata(::std::string* battleargsdata);

  // @@protoc_insertion_point(class_scope:pb.TTowerDefenseProReportBattleRsp)
 private:
  inline void set_has_battleargsdata();
  inline void clear_has_battleargsdata();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::pb::TCommonReward > droparray_;
  ::std::string* battleargsdata_;
  friend void  protobuf_AddDesc_net_2fTowerDefensePro_2eproto();
  friend void protobuf_AssignDesc_net_2fTowerDefensePro_2eproto();
  friend void protobuf_ShutdownFile_net_2fTowerDefensePro_2eproto();

  void InitAsDefaultInstance();
  static TTowerDefenseProReportBattleRsp* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TTowerDefenseProRoundRankInfo</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/TowerDefensePro.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TTowerDefenseProRoundRankInfo : public ::google::protobuf::Message {
 public:
  TTowerDefenseProRoundRankInfo();
  virtual ~TTowerDefenseProRoundRankInfo();

  TTowerDefenseProRoundRankInfo(const TTowerDefenseProRoundRankInfo& from);

  inline TTowerDefenseProRoundRankInfo& operator=(const TTowerDefenseProRoundRankInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TTowerDefenseProRoundRankInfo& default_instance();

  void Swap(TTowerDefenseProRoundRankInfo* other);

  // implements Message ----------------------------------------------

  TTowerDefenseProRoundRankInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TTowerDefenseProRoundRankInfo& from);
  void MergeFrom(const TTowerDefenseProRoundRankInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .pb.TUserSimpleInfo UserInfo = 1;
  inline bool has_userinfo() const;
  inline void clear_userinfo();
  static const int kUserInfoFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TTowerDefenseProRoundRankInfo</name>
  	<Function>
  		<name>userinfo</name>
  		<replaceName>UserInfo</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_userinfo</name>
  		<replaceName>UserInfo</replaceName>
  		<handler>descripter = pb_set_message_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_allocated_userinfo</name>
  		<replaceName>UserInfo</replaceName>
  		<handler>descripter = pb_set_message_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_userinfo</name>
  		<replaceName>UserInfo</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TUserSimpleInfo& userinfo() const;
  inline ::pb::TUserSimpleInfo* mutable_userinfo();
  inline ::pb::TUserSimpleInfo* release_userinfo();
  inline void set_allocated_userinfo(::pb::TUserSimpleInfo* userinfo);

  // optional uint32 RoundId = 2;
  inline bool has_roundid() const;
  inline void clear_roundid();
  static const int kRoundIdFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TTowerDefenseProRoundRankInfo</name>
  	<Function>
  		<name>roundid</name>
  		<replaceName>RoundId</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_roundid</name>
  		<replaceName>RoundId</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_roundid</name>
  		<replaceName>RoundId</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 roundid() const;
  inline void set_roundid(::google::protobuf::uint32 value);

  // optional uint64 UpdateTime = 3;
  inline bool has_updatetime() const;
  inline void clear_updatetime();
  static const int kUpdateTimeFieldNumber = 3;
  /*FOR2LUA
  <Record>
  	<name>TTowerDefenseProRoundRankInfo</name>
  	<Function>
  		<name>updatetime</name>
  		<replaceName>UpdateTime</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_updatetime</name>
  		<replaceName>UpdateTime</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_updatetime</name>
  		<replaceName>UpdateTime</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint64 updatetime() const;
  inline void set_updatetime(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:pb.TTowerDefenseProRoundRankInfo)
 private:
  inline void set_has_userinfo();
  inline void clear_has_userinfo();
  inline void set_has_roundid();
  inline void clear_has_roundid();
  inline void set_has_updatetime();
  inline void clear_has_updatetime();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::pb::TUserSimpleInfo* userinfo_;
  ::google::protobuf::uint64 updatetime_;
  ::google::protobuf::uint32 roundid_;
  friend void  protobuf_AddDesc_net_2fTowerDefensePro_2eproto();
  friend void protobuf_AssignDesc_net_2fTowerDefensePro_2eproto();
  friend void protobuf_ShutdownFile_net_2fTowerDefensePro_2eproto();

  void InitAsDefaultInstance();
  static TTowerDefenseProRoundRankInfo* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TTowerDefenseProGetRoundRankReq</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/TowerDefensePro.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TTowerDefenseProGetRoundRankReq : public ::google::protobuf::Message {
 public:
  TTowerDefenseProGetRoundRankReq();
  virtual ~TTowerDefenseProGetRoundRankReq();

  TTowerDefenseProGetRoundRankReq(const TTowerDefenseProGetRoundRankReq& from);

  inline TTowerDefenseProGetRoundRankReq& operator=(const TTowerDefenseProGetRoundRankReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TTowerDefenseProGetRoundRankReq& default_instance();

  void Swap(TTowerDefenseProGetRoundRankReq* other);

  // implements Message ----------------------------------------------

  TTowerDefenseProGetRoundRankReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TTowerDefenseProGetRoundRankReq& from);
  void MergeFrom(const TTowerDefenseProGetRoundRankReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 Offset = 1;
  inline bool has_offset() const;
  inline void clear_offset();
  static const int kOffsetFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TTowerDefenseProGetRoundRankReq</name>
  	<Function>
  		<name>offset</name>
  		<replaceName>Offset</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_offset</name>
  		<replaceName>Offset</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_offset</name>
  		<replaceName>Offset</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 offset() const;
  inline void set_offset(::google::protobuf::uint32 value);

  // optional uint32 Limit = 2;
  inline bool has_limit() const;
  inline void clear_limit();
  static const int kLimitFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TTowerDefenseProGetRoundRankReq</name>
  	<Function>
  		<name>limit</name>
  		<replaceName>Limit</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_limit</name>
  		<replaceName>Limit</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_limit</name>
  		<replaceName>Limit</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 limit() const;
  inline void set_limit(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:pb.TTowerDefenseProGetRoundRankReq)
 private:
  inline void set_has_offset();
  inline void clear_has_offset();
  inline void set_has_limit();
  inline void clear_has_limit();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 offset_;
  ::google::protobuf::uint32 limit_;
  friend void  protobuf_AddDesc_net_2fTowerDefensePro_2eproto();
  friend void protobuf_AssignDesc_net_2fTowerDefensePro_2eproto();
  friend void protobuf_ShutdownFile_net_2fTowerDefensePro_2eproto();

  void InitAsDefaultInstance();
  static TTowerDefenseProGetRoundRankReq* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TTowerDefenseProGetRoundRankRsp</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/TowerDefensePro.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TTowerDefenseProGetRoundRankRsp : public ::google::protobuf::Message {
 public:
  TTowerDefenseProGetRoundRankRsp();
  virtual ~TTowerDefenseProGetRoundRankRsp();

  TTowerDefenseProGetRoundRankRsp(const TTowerDefenseProGetRoundRankRsp& from);

  inline TTowerDefenseProGetRoundRankRsp& operator=(const TTowerDefenseProGetRoundRankRsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TTowerDefenseProGetRoundRankRsp& default_instance();

  void Swap(TTowerDefenseProGetRoundRankRsp* other);

  // implements Message ----------------------------------------------

  TTowerDefenseProGetRoundRankRsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TTowerDefenseProGetRoundRankRsp& from);
  void MergeFrom(const TTowerDefenseProGetRoundRankRsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .pb.TTowerDefenseProRoundRankInfo RankArr = 1;
  inline int rankarr_size() const;
  inline void clear_rankarr();
  static const int kRankArrFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TTowerDefenseProGetRoundRankRsp</name>
  	<Function>
  		<name>rankarr</name>
  		<replaceName>RankArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_rankarr</name>
  		<replaceName>RankArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_rankarr</name>
  		<replaceName>RankArr</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_rankarr</name>
  		<replaceName>RankArr</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>rankarr_size</name>
  		<replaceName>RankArr</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TTowerDefenseProRoundRankInfo& rankarr(int index) const;
  inline ::pb::TTowerDefenseProRoundRankInfo* mutable_rankarr(int index);
  inline ::pb::TTowerDefenseProRoundRankInfo* add_rankarr();
  inline const ::google::protobuf::RepeatedPtrField< ::pb::TTowerDefenseProRoundRankInfo >&
      rankarr() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb::TTowerDefenseProRoundRankInfo >*
      mutable_rankarr();

  // optional int32 MyRank = 2;
  inline bool has_myrank() const;
  inline void clear_myrank();
  static const int kMyRankFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TTowerDefenseProGetRoundRankRsp</name>
  	<Function>
  		<name>myrank</name>
  		<replaceName>MyRank</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_myrank</name>
  		<replaceName>MyRank</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_myrank</name>
  		<replaceName>MyRank</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::int32 myrank() const;
  inline void set_myrank(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:pb.TTowerDefenseProGetRoundRankRsp)
 private:
  inline void set_has_myrank();
  inline void clear_has_myrank();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::pb::TTowerDefenseProRoundRankInfo > rankarr_;
  ::google::protobuf::int32 myrank_;
  friend void  protobuf_AddDesc_net_2fTowerDefensePro_2eproto();
  friend void protobuf_AssignDesc_net_2fTowerDefensePro_2eproto();
  friend void protobuf_ShutdownFile_net_2fTowerDefensePro_2eproto();

  void InitAsDefaultInstance();
  static TTowerDefenseProGetRoundRankRsp* default_instance_;
};
// ===================================================================


// ===================================================================

// TTowerDefenseProSimpleInfo

// optional uint32 CurRoundId = 1;
inline bool TTowerDefenseProSimpleInfo::has_curroundid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TTowerDefenseProSimpleInfo::set_has_curroundid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TTowerDefenseProSimpleInfo::clear_has_curroundid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TTowerDefenseProSimpleInfo::clear_curroundid() {
  curroundid_ = 0u;
  clear_has_curroundid();
}
inline ::google::protobuf::uint32 TTowerDefenseProSimpleInfo::curroundid() const {
  // @@protoc_insertion_point(field_get:pb.TTowerDefenseProSimpleInfo.CurRoundId)
  return curroundid_;
}
inline void TTowerDefenseProSimpleInfo::set_curroundid(::google::protobuf::uint32 value) {
  set_has_curroundid();
  curroundid_ = value;
  // @@protoc_insertion_point(field_set:pb.TTowerDefenseProSimpleInfo.CurRoundId)
}

// optional uint32 MaxRoundId = 2;
inline bool TTowerDefenseProSimpleInfo::has_maxroundid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TTowerDefenseProSimpleInfo::set_has_maxroundid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TTowerDefenseProSimpleInfo::clear_has_maxroundid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TTowerDefenseProSimpleInfo::clear_maxroundid() {
  maxroundid_ = 0u;
  clear_has_maxroundid();
}
inline ::google::protobuf::uint32 TTowerDefenseProSimpleInfo::maxroundid() const {
  // @@protoc_insertion_point(field_get:pb.TTowerDefenseProSimpleInfo.MaxRoundId)
  return maxroundid_;
}
inline void TTowerDefenseProSimpleInfo::set_maxroundid(::google::protobuf::uint32 value) {
  set_has_maxroundid();
  maxroundid_ = value;
  // @@protoc_insertion_point(field_set:pb.TTowerDefenseProSimpleInfo.MaxRoundId)
}

// optional uint64 PlotEndTime = 3;
inline bool TTowerDefenseProSimpleInfo::has_plotendtime() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void TTowerDefenseProSimpleInfo::set_has_plotendtime() {
  _has_bits_[0] |= 0x00000004u;
}
inline void TTowerDefenseProSimpleInfo::clear_has_plotendtime() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void TTowerDefenseProSimpleInfo::clear_plotendtime() {
  plotendtime_ = GOOGLE_ULONGLONG(0);
  clear_has_plotendtime();
}
inline ::google::protobuf::uint64 TTowerDefenseProSimpleInfo::plotendtime() const {
  // @@protoc_insertion_point(field_get:pb.TTowerDefenseProSimpleInfo.PlotEndTime)
  return plotendtime_;
}
inline void TTowerDefenseProSimpleInfo::set_plotendtime(::google::protobuf::uint64 value) {
  set_has_plotendtime();
  plotendtime_ = value;
  // @@protoc_insertion_point(field_set:pb.TTowerDefenseProSimpleInfo.PlotEndTime)
}

// optional uint64 HangBeginTime = 4;
inline bool TTowerDefenseProSimpleInfo::has_hangbegintime() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void TTowerDefenseProSimpleInfo::set_has_hangbegintime() {
  _has_bits_[0] |= 0x00000008u;
}
inline void TTowerDefenseProSimpleInfo::clear_has_hangbegintime() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void TTowerDefenseProSimpleInfo::clear_hangbegintime() {
  hangbegintime_ = GOOGLE_ULONGLONG(0);
  clear_has_hangbegintime();
}
inline ::google::protobuf::uint64 TTowerDefenseProSimpleInfo::hangbegintime() const {
  // @@protoc_insertion_point(field_get:pb.TTowerDefenseProSimpleInfo.HangBeginTime)
  return hangbegintime_;
}
inline void TTowerDefenseProSimpleInfo::set_hangbegintime(::google::protobuf::uint64 value) {
  set_has_hangbegintime();
  hangbegintime_ = value;
  // @@protoc_insertion_point(field_set:pb.TTowerDefenseProSimpleInfo.HangBeginTime)
}

// optional uint64 ReceiveTime = 5;
inline bool TTowerDefenseProSimpleInfo::has_receivetime() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void TTowerDefenseProSimpleInfo::set_has_receivetime() {
  _has_bits_[0] |= 0x00000010u;
}
inline void TTowerDefenseProSimpleInfo::clear_has_receivetime() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void TTowerDefenseProSimpleInfo::clear_receivetime() {
  receivetime_ = GOOGLE_ULONGLONG(0);
  clear_has_receivetime();
}
inline ::google::protobuf::uint64 TTowerDefenseProSimpleInfo::receivetime() const {
  // @@protoc_insertion_point(field_get:pb.TTowerDefenseProSimpleInfo.ReceiveTime)
  return receivetime_;
}
inline void TTowerDefenseProSimpleInfo::set_receivetime(::google::protobuf::uint64 value) {
  set_has_receivetime();
  receivetime_ = value;
  // @@protoc_insertion_point(field_set:pb.TTowerDefenseProSimpleInfo.ReceiveTime)
}

// optional uint64 SettleTime = 6;
inline bool TTowerDefenseProSimpleInfo::has_settletime() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void TTowerDefenseProSimpleInfo::set_has_settletime() {
  _has_bits_[0] |= 0x00000020u;
}
inline void TTowerDefenseProSimpleInfo::clear_has_settletime() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void TTowerDefenseProSimpleInfo::clear_settletime() {
  settletime_ = GOOGLE_ULONGLONG(0);
  clear_has_settletime();
}
inline ::google::protobuf::uint64 TTowerDefenseProSimpleInfo::settletime() const {
  // @@protoc_insertion_point(field_get:pb.TTowerDefenseProSimpleInfo.SettleTime)
  return settletime_;
}
inline void TTowerDefenseProSimpleInfo::set_settletime(::google::protobuf::uint64 value) {
  set_has_settletime();
  settletime_ = value;
  // @@protoc_insertion_point(field_set:pb.TTowerDefenseProSimpleInfo.SettleTime)
}

// optional uint64 HangDuration = 7;
inline bool TTowerDefenseProSimpleInfo::has_hangduration() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void TTowerDefenseProSimpleInfo::set_has_hangduration() {
  _has_bits_[0] |= 0x00000040u;
}
inline void TTowerDefenseProSimpleInfo::clear_has_hangduration() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void TTowerDefenseProSimpleInfo::clear_hangduration() {
  hangduration_ = GOOGLE_ULONGLONG(0);
  clear_has_hangduration();
}
inline ::google::protobuf::uint64 TTowerDefenseProSimpleInfo::hangduration() const {
  // @@protoc_insertion_point(field_get:pb.TTowerDefenseProSimpleInfo.HangDuration)
  return hangduration_;
}
inline void TTowerDefenseProSimpleInfo::set_hangduration(::google::protobuf::uint64 value) {
  set_has_hangduration();
  hangduration_ = value;
  // @@protoc_insertion_point(field_set:pb.TTowerDefenseProSimpleInfo.HangDuration)
}

// optional uint32 QuickNum = 8;
inline bool TTowerDefenseProSimpleInfo::has_quicknum() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void TTowerDefenseProSimpleInfo::set_has_quicknum() {
  _has_bits_[0] |= 0x00000080u;
}
inline void TTowerDefenseProSimpleInfo::clear_has_quicknum() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void TTowerDefenseProSimpleInfo::clear_quicknum() {
  quicknum_ = 0u;
  clear_has_quicknum();
}
inline ::google::protobuf::uint32 TTowerDefenseProSimpleInfo::quicknum() const {
  // @@protoc_insertion_point(field_get:pb.TTowerDefenseProSimpleInfo.QuickNum)
  return quicknum_;
}
inline void TTowerDefenseProSimpleInfo::set_quicknum(::google::protobuf::uint32 value) {
  set_has_quicknum();
  quicknum_ = value;
  // @@protoc_insertion_point(field_set:pb.TTowerDefenseProSimpleInfo.QuickNum)
}

// -------------------------------------------------------------------

// TTowerDefenseProGetSimpleInfoRsp

// optional .pb.TTowerDefenseProSimpleInfo SimpleInfo = 1;
inline bool TTowerDefenseProGetSimpleInfoRsp::has_simpleinfo() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TTowerDefenseProGetSimpleInfoRsp::set_has_simpleinfo() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TTowerDefenseProGetSimpleInfoRsp::clear_has_simpleinfo() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TTowerDefenseProGetSimpleInfoRsp::clear_simpleinfo() {
  if (simpleinfo_ != NULL) simpleinfo_->::pb::TTowerDefenseProSimpleInfo::Clear();
  clear_has_simpleinfo();
}
inline const ::pb::TTowerDefenseProSimpleInfo& TTowerDefenseProGetSimpleInfoRsp::simpleinfo() const {
  // @@protoc_insertion_point(field_get:pb.TTowerDefenseProGetSimpleInfoRsp.SimpleInfo)
  return simpleinfo_ != NULL ? *simpleinfo_ : *default_instance_->simpleinfo_;
}
inline ::pb::TTowerDefenseProSimpleInfo* TTowerDefenseProGetSimpleInfoRsp::mutable_simpleinfo() {
  set_has_simpleinfo();
  if (simpleinfo_ == NULL) simpleinfo_ = new ::pb::TTowerDefenseProSimpleInfo;
  // @@protoc_insertion_point(field_mutable:pb.TTowerDefenseProGetSimpleInfoRsp.SimpleInfo)
  return simpleinfo_;
}
inline ::pb::TTowerDefenseProSimpleInfo* TTowerDefenseProGetSimpleInfoRsp::release_simpleinfo() {
  clear_has_simpleinfo();
  ::pb::TTowerDefenseProSimpleInfo* temp = simpleinfo_;
  simpleinfo_ = NULL;
  return temp;
}
inline void TTowerDefenseProGetSimpleInfoRsp::set_allocated_simpleinfo(::pb::TTowerDefenseProSimpleInfo* simpleinfo) {
  delete simpleinfo_;
  simpleinfo_ = simpleinfo;
  if (simpleinfo) {
    set_has_simpleinfo();
  } else {
    clear_has_simpleinfo();
  }
  // @@protoc_insertion_point(field_set_allocated:pb.TTowerDefenseProGetSimpleInfoRsp.SimpleInfo)
}

// -------------------------------------------------------------------

// TTowerDefenseProGetInfoRsp

// optional .pb.TTowerDefenseProSimpleInfo SimpleInfo = 1;
inline bool TTowerDefenseProGetInfoRsp::has_simpleinfo() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TTowerDefenseProGetInfoRsp::set_has_simpleinfo() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TTowerDefenseProGetInfoRsp::clear_has_simpleinfo() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TTowerDefenseProGetInfoRsp::clear_simpleinfo() {
  if (simpleinfo_ != NULL) simpleinfo_->::pb::TTowerDefenseProSimpleInfo::Clear();
  clear_has_simpleinfo();
}
inline const ::pb::TTowerDefenseProSimpleInfo& TTowerDefenseProGetInfoRsp::simpleinfo() const {
  // @@protoc_insertion_point(field_get:pb.TTowerDefenseProGetInfoRsp.SimpleInfo)
  return simpleinfo_ != NULL ? *simpleinfo_ : *default_instance_->simpleinfo_;
}
inline ::pb::TTowerDefenseProSimpleInfo* TTowerDefenseProGetInfoRsp::mutable_simpleinfo() {
  set_has_simpleinfo();
  if (simpleinfo_ == NULL) simpleinfo_ = new ::pb::TTowerDefenseProSimpleInfo;
  // @@protoc_insertion_point(field_mutable:pb.TTowerDefenseProGetInfoRsp.SimpleInfo)
  return simpleinfo_;
}
inline ::pb::TTowerDefenseProSimpleInfo* TTowerDefenseProGetInfoRsp::release_simpleinfo() {
  clear_has_simpleinfo();
  ::pb::TTowerDefenseProSimpleInfo* temp = simpleinfo_;
  simpleinfo_ = NULL;
  return temp;
}
inline void TTowerDefenseProGetInfoRsp::set_allocated_simpleinfo(::pb::TTowerDefenseProSimpleInfo* simpleinfo) {
  delete simpleinfo_;
  simpleinfo_ = simpleinfo;
  if (simpleinfo) {
    set_has_simpleinfo();
  } else {
    clear_has_simpleinfo();
  }
  // @@protoc_insertion_point(field_set_allocated:pb.TTowerDefenseProGetInfoRsp.SimpleInfo)
}

// optional uint32 WaveNum = 2;
inline bool TTowerDefenseProGetInfoRsp::has_wavenum() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TTowerDefenseProGetInfoRsp::set_has_wavenum() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TTowerDefenseProGetInfoRsp::clear_has_wavenum() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TTowerDefenseProGetInfoRsp::clear_wavenum() {
  wavenum_ = 0u;
  clear_has_wavenum();
}
inline ::google::protobuf::uint32 TTowerDefenseProGetInfoRsp::wavenum() const {
  // @@protoc_insertion_point(field_get:pb.TTowerDefenseProGetInfoRsp.WaveNum)
  return wavenum_;
}
inline void TTowerDefenseProGetInfoRsp::set_wavenum(::google::protobuf::uint32 value) {
  set_has_wavenum();
  wavenum_ = value;
  // @@protoc_insertion_point(field_set:pb.TTowerDefenseProGetInfoRsp.WaveNum)
}

// optional bytes BattleArgsData = 3;
inline bool TTowerDefenseProGetInfoRsp::has_battleargsdata() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void TTowerDefenseProGetInfoRsp::set_has_battleargsdata() {
  _has_bits_[0] |= 0x00000004u;
}
inline void TTowerDefenseProGetInfoRsp::clear_has_battleargsdata() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void TTowerDefenseProGetInfoRsp::clear_battleargsdata() {
  if (battleargsdata_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    battleargsdata_->clear();
  }
  clear_has_battleargsdata();
}
inline const ::std::string& TTowerDefenseProGetInfoRsp::battleargsdata() const {
  // @@protoc_insertion_point(field_get:pb.TTowerDefenseProGetInfoRsp.BattleArgsData)
  return *battleargsdata_;
}
inline void TTowerDefenseProGetInfoRsp::set_battleargsdata(const ::std::string& value) {
  set_has_battleargsdata();
  if (battleargsdata_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    battleargsdata_ = new ::std::string;
  }
  battleargsdata_->assign(value);
  // @@protoc_insertion_point(field_set:pb.TTowerDefenseProGetInfoRsp.BattleArgsData)
}
inline void TTowerDefenseProGetInfoRsp::set_battleargsdata(const char* value) {
  set_has_battleargsdata();
  if (battleargsdata_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    battleargsdata_ = new ::std::string;
  }
  battleargsdata_->assign(value);
  // @@protoc_insertion_point(field_set_char:pb.TTowerDefenseProGetInfoRsp.BattleArgsData)
}
inline void TTowerDefenseProGetInfoRsp::set_battleargsdata(const void* value, size_t size) {
  set_has_battleargsdata();
  if (battleargsdata_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    battleargsdata_ = new ::std::string;
  }
  battleargsdata_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:pb.TTowerDefenseProGetInfoRsp.BattleArgsData)
}
inline ::std::string* TTowerDefenseProGetInfoRsp::mutable_battleargsdata() {
  set_has_battleargsdata();
  if (battleargsdata_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    battleargsdata_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:pb.TTowerDefenseProGetInfoRsp.BattleArgsData)
  return battleargsdata_;
}
inline ::std::string* TTowerDefenseProGetInfoRsp::release_battleargsdata() {
  clear_has_battleargsdata();
  if (battleargsdata_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = battleargsdata_;
    battleargsdata_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void TTowerDefenseProGetInfoRsp::set_allocated_battleargsdata(::std::string* battleargsdata) {
  if (battleargsdata_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete battleargsdata_;
  }
  if (battleargsdata) {
    set_has_battleargsdata();
    battleargsdata_ = battleargsdata;
  } else {
    clear_has_battleargsdata();
    battleargsdata_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:pb.TTowerDefenseProGetInfoRsp.BattleArgsData)
}

// repeated .pb.TCommonReward ArrHangReward = 4;
inline int TTowerDefenseProGetInfoRsp::arrhangreward_size() const {
  return arrhangreward_.size();
}
inline void TTowerDefenseProGetInfoRsp::clear_arrhangreward() {
  arrhangreward_.Clear();
}
inline const ::pb::TCommonReward& TTowerDefenseProGetInfoRsp::arrhangreward(int index) const {
  // @@protoc_insertion_point(field_get:pb.TTowerDefenseProGetInfoRsp.ArrHangReward)
  return arrhangreward_.Get(index);
}
inline ::pb::TCommonReward* TTowerDefenseProGetInfoRsp::mutable_arrhangreward(int index) {
  // @@protoc_insertion_point(field_mutable:pb.TTowerDefenseProGetInfoRsp.ArrHangReward)
  return arrhangreward_.Mutable(index);
}
inline ::pb::TCommonReward* TTowerDefenseProGetInfoRsp::add_arrhangreward() {
  // @@protoc_insertion_point(field_add:pb.TTowerDefenseProGetInfoRsp.ArrHangReward)
  return arrhangreward_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::TCommonReward >&
TTowerDefenseProGetInfoRsp::arrhangreward() const {
  // @@protoc_insertion_point(field_list:pb.TTowerDefenseProGetInfoRsp.ArrHangReward)
  return arrhangreward_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb::TCommonReward >*
TTowerDefenseProGetInfoRsp::mutable_arrhangreward() {
  // @@protoc_insertion_point(field_mutable_list:pb.TTowerDefenseProGetInfoRsp.ArrHangReward)
  return &arrhangreward_;
}

// -------------------------------------------------------------------

// TTowerDefenseProSetPlotEndRsp

// optional bytes BattleArgsData = 1;
inline bool TTowerDefenseProSetPlotEndRsp::has_battleargsdata() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TTowerDefenseProSetPlotEndRsp::set_has_battleargsdata() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TTowerDefenseProSetPlotEndRsp::clear_has_battleargsdata() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TTowerDefenseProSetPlotEndRsp::clear_battleargsdata() {
  if (battleargsdata_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    battleargsdata_->clear();
  }
  clear_has_battleargsdata();
}
inline const ::std::string& TTowerDefenseProSetPlotEndRsp::battleargsdata() const {
  // @@protoc_insertion_point(field_get:pb.TTowerDefenseProSetPlotEndRsp.BattleArgsData)
  return *battleargsdata_;
}
inline void TTowerDefenseProSetPlotEndRsp::set_battleargsdata(const ::std::string& value) {
  set_has_battleargsdata();
  if (battleargsdata_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    battleargsdata_ = new ::std::string;
  }
  battleargsdata_->assign(value);
  // @@protoc_insertion_point(field_set:pb.TTowerDefenseProSetPlotEndRsp.BattleArgsData)
}
inline void TTowerDefenseProSetPlotEndRsp::set_battleargsdata(const char* value) {
  set_has_battleargsdata();
  if (battleargsdata_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    battleargsdata_ = new ::std::string;
  }
  battleargsdata_->assign(value);
  // @@protoc_insertion_point(field_set_char:pb.TTowerDefenseProSetPlotEndRsp.BattleArgsData)
}
inline void TTowerDefenseProSetPlotEndRsp::set_battleargsdata(const void* value, size_t size) {
  set_has_battleargsdata();
  if (battleargsdata_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    battleargsdata_ = new ::std::string;
  }
  battleargsdata_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:pb.TTowerDefenseProSetPlotEndRsp.BattleArgsData)
}
inline ::std::string* TTowerDefenseProSetPlotEndRsp::mutable_battleargsdata() {
  set_has_battleargsdata();
  if (battleargsdata_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    battleargsdata_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:pb.TTowerDefenseProSetPlotEndRsp.BattleArgsData)
  return battleargsdata_;
}
inline ::std::string* TTowerDefenseProSetPlotEndRsp::release_battleargsdata() {
  clear_has_battleargsdata();
  if (battleargsdata_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = battleargsdata_;
    battleargsdata_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void TTowerDefenseProSetPlotEndRsp::set_allocated_battleargsdata(::std::string* battleargsdata) {
  if (battleargsdata_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete battleargsdata_;
  }
  if (battleargsdata) {
    set_has_battleargsdata();
    battleargsdata_ = battleargsdata;
  } else {
    clear_has_battleargsdata();
    battleargsdata_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:pb.TTowerDefenseProSetPlotEndRsp.BattleArgsData)
}

// -------------------------------------------------------------------

// TTowerDefenseProGetHangRewardReq

// optional bool IsPreview = 1;
inline bool TTowerDefenseProGetHangRewardReq::has_ispreview() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TTowerDefenseProGetHangRewardReq::set_has_ispreview() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TTowerDefenseProGetHangRewardReq::clear_has_ispreview() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TTowerDefenseProGetHangRewardReq::clear_ispreview() {
  ispreview_ = false;
  clear_has_ispreview();
}
inline bool TTowerDefenseProGetHangRewardReq::ispreview() const {
  // @@protoc_insertion_point(field_get:pb.TTowerDefenseProGetHangRewardReq.IsPreview)
  return ispreview_;
}
inline void TTowerDefenseProGetHangRewardReq::set_ispreview(bool value) {
  set_has_ispreview();
  ispreview_ = value;
  // @@protoc_insertion_point(field_set:pb.TTowerDefenseProGetHangRewardReq.IsPreview)
}

// -------------------------------------------------------------------

// TTowerDefenseProGetHangRewardRsp

// optional uint64 HangBeginTime = 1;
inline bool TTowerDefenseProGetHangRewardRsp::has_hangbegintime() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TTowerDefenseProGetHangRewardRsp::set_has_hangbegintime() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TTowerDefenseProGetHangRewardRsp::clear_has_hangbegintime() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TTowerDefenseProGetHangRewardRsp::clear_hangbegintime() {
  hangbegintime_ = GOOGLE_ULONGLONG(0);
  clear_has_hangbegintime();
}
inline ::google::protobuf::uint64 TTowerDefenseProGetHangRewardRsp::hangbegintime() const {
  // @@protoc_insertion_point(field_get:pb.TTowerDefenseProGetHangRewardRsp.HangBeginTime)
  return hangbegintime_;
}
inline void TTowerDefenseProGetHangRewardRsp::set_hangbegintime(::google::protobuf::uint64 value) {
  set_has_hangbegintime();
  hangbegintime_ = value;
  // @@protoc_insertion_point(field_set:pb.TTowerDefenseProGetHangRewardRsp.HangBeginTime)
}

// optional uint64 ReceiveTime = 2;
inline bool TTowerDefenseProGetHangRewardRsp::has_receivetime() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TTowerDefenseProGetHangRewardRsp::set_has_receivetime() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TTowerDefenseProGetHangRewardRsp::clear_has_receivetime() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TTowerDefenseProGetHangRewardRsp::clear_receivetime() {
  receivetime_ = GOOGLE_ULONGLONG(0);
  clear_has_receivetime();
}
inline ::google::protobuf::uint64 TTowerDefenseProGetHangRewardRsp::receivetime() const {
  // @@protoc_insertion_point(field_get:pb.TTowerDefenseProGetHangRewardRsp.ReceiveTime)
  return receivetime_;
}
inline void TTowerDefenseProGetHangRewardRsp::set_receivetime(::google::protobuf::uint64 value) {
  set_has_receivetime();
  receivetime_ = value;
  // @@protoc_insertion_point(field_set:pb.TTowerDefenseProGetHangRewardRsp.ReceiveTime)
}

// repeated .pb.TCommonReward ArrHangReward = 3;
inline int TTowerDefenseProGetHangRewardRsp::arrhangreward_size() const {
  return arrhangreward_.size();
}
inline void TTowerDefenseProGetHangRewardRsp::clear_arrhangreward() {
  arrhangreward_.Clear();
}
inline const ::pb::TCommonReward& TTowerDefenseProGetHangRewardRsp::arrhangreward(int index) const {
  // @@protoc_insertion_point(field_get:pb.TTowerDefenseProGetHangRewardRsp.ArrHangReward)
  return arrhangreward_.Get(index);
}
inline ::pb::TCommonReward* TTowerDefenseProGetHangRewardRsp::mutable_arrhangreward(int index) {
  // @@protoc_insertion_point(field_mutable:pb.TTowerDefenseProGetHangRewardRsp.ArrHangReward)
  return arrhangreward_.Mutable(index);
}
inline ::pb::TCommonReward* TTowerDefenseProGetHangRewardRsp::add_arrhangreward() {
  // @@protoc_insertion_point(field_add:pb.TTowerDefenseProGetHangRewardRsp.ArrHangReward)
  return arrhangreward_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::TCommonReward >&
TTowerDefenseProGetHangRewardRsp::arrhangreward() const {
  // @@protoc_insertion_point(field_list:pb.TTowerDefenseProGetHangRewardRsp.ArrHangReward)
  return arrhangreward_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb::TCommonReward >*
TTowerDefenseProGetHangRewardRsp::mutable_arrhangreward() {
  // @@protoc_insertion_point(field_mutable_list:pb.TTowerDefenseProGetHangRewardRsp.ArrHangReward)
  return &arrhangreward_;
}

// optional uint64 SettleTime = 4;
inline bool TTowerDefenseProGetHangRewardRsp::has_settletime() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void TTowerDefenseProGetHangRewardRsp::set_has_settletime() {
  _has_bits_[0] |= 0x00000008u;
}
inline void TTowerDefenseProGetHangRewardRsp::clear_has_settletime() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void TTowerDefenseProGetHangRewardRsp::clear_settletime() {
  settletime_ = GOOGLE_ULONGLONG(0);
  clear_has_settletime();
}
inline ::google::protobuf::uint64 TTowerDefenseProGetHangRewardRsp::settletime() const {
  // @@protoc_insertion_point(field_get:pb.TTowerDefenseProGetHangRewardRsp.SettleTime)
  return settletime_;
}
inline void TTowerDefenseProGetHangRewardRsp::set_settletime(::google::protobuf::uint64 value) {
  set_has_settletime();
  settletime_ = value;
  // @@protoc_insertion_point(field_set:pb.TTowerDefenseProGetHangRewardRsp.SettleTime)
}

// optional uint64 HangDuration = 5;
inline bool TTowerDefenseProGetHangRewardRsp::has_hangduration() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void TTowerDefenseProGetHangRewardRsp::set_has_hangduration() {
  _has_bits_[0] |= 0x00000010u;
}
inline void TTowerDefenseProGetHangRewardRsp::clear_has_hangduration() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void TTowerDefenseProGetHangRewardRsp::clear_hangduration() {
  hangduration_ = GOOGLE_ULONGLONG(0);
  clear_has_hangduration();
}
inline ::google::protobuf::uint64 TTowerDefenseProGetHangRewardRsp::hangduration() const {
  // @@protoc_insertion_point(field_get:pb.TTowerDefenseProGetHangRewardRsp.HangDuration)
  return hangduration_;
}
inline void TTowerDefenseProGetHangRewardRsp::set_hangduration(::google::protobuf::uint64 value) {
  set_has_hangduration();
  hangduration_ = value;
  // @@protoc_insertion_point(field_set:pb.TTowerDefenseProGetHangRewardRsp.HangDuration)
}

// -------------------------------------------------------------------

// TTowerDefenseProGetQuickHangRewardRsp

// repeated .pb.TCommonReward ArrHangReward = 1;
inline int TTowerDefenseProGetQuickHangRewardRsp::arrhangreward_size() const {
  return arrhangreward_.size();
}
inline void TTowerDefenseProGetQuickHangRewardRsp::clear_arrhangreward() {
  arrhangreward_.Clear();
}
inline const ::pb::TCommonReward& TTowerDefenseProGetQuickHangRewardRsp::arrhangreward(int index) const {
  // @@protoc_insertion_point(field_get:pb.TTowerDefenseProGetQuickHangRewardRsp.ArrHangReward)
  return arrhangreward_.Get(index);
}
inline ::pb::TCommonReward* TTowerDefenseProGetQuickHangRewardRsp::mutable_arrhangreward(int index) {
  // @@protoc_insertion_point(field_mutable:pb.TTowerDefenseProGetQuickHangRewardRsp.ArrHangReward)
  return arrhangreward_.Mutable(index);
}
inline ::pb::TCommonReward* TTowerDefenseProGetQuickHangRewardRsp::add_arrhangreward() {
  // @@protoc_insertion_point(field_add:pb.TTowerDefenseProGetQuickHangRewardRsp.ArrHangReward)
  return arrhangreward_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::TCommonReward >&
TTowerDefenseProGetQuickHangRewardRsp::arrhangreward() const {
  // @@protoc_insertion_point(field_list:pb.TTowerDefenseProGetQuickHangRewardRsp.ArrHangReward)
  return arrhangreward_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb::TCommonReward >*
TTowerDefenseProGetQuickHangRewardRsp::mutable_arrhangreward() {
  // @@protoc_insertion_point(field_mutable_list:pb.TTowerDefenseProGetQuickHangRewardRsp.ArrHangReward)
  return &arrhangreward_;
}

// -------------------------------------------------------------------

// TTowerDefenseProSetFormationReq

// repeated .pb.TUnitFormation ArrFormation = 1;
inline int TTowerDefenseProSetFormationReq::arrformation_size() const {
  return arrformation_.size();
}
inline void TTowerDefenseProSetFormationReq::clear_arrformation() {
  arrformation_.Clear();
}
inline const ::pb::TUnitFormation& TTowerDefenseProSetFormationReq::arrformation(int index) const {
  // @@protoc_insertion_point(field_get:pb.TTowerDefenseProSetFormationReq.ArrFormation)
  return arrformation_.Get(index);
}
inline ::pb::TUnitFormation* TTowerDefenseProSetFormationReq::mutable_arrformation(int index) {
  // @@protoc_insertion_point(field_mutable:pb.TTowerDefenseProSetFormationReq.ArrFormation)
  return arrformation_.Mutable(index);
}
inline ::pb::TUnitFormation* TTowerDefenseProSetFormationReq::add_arrformation() {
  // @@protoc_insertion_point(field_add:pb.TTowerDefenseProSetFormationReq.ArrFormation)
  return arrformation_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::TUnitFormation >&
TTowerDefenseProSetFormationReq::arrformation() const {
  // @@protoc_insertion_point(field_list:pb.TTowerDefenseProSetFormationReq.ArrFormation)
  return arrformation_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb::TUnitFormation >*
TTowerDefenseProSetFormationReq::mutable_arrformation() {
  // @@protoc_insertion_point(field_mutable_list:pb.TTowerDefenseProSetFormationReq.ArrFormation)
  return &arrformation_;
}

// -------------------------------------------------------------------

// TTowerDefenseProDoBattleReq

// optional uint32 RoundId = 1;
inline bool TTowerDefenseProDoBattleReq::has_roundid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TTowerDefenseProDoBattleReq::set_has_roundid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TTowerDefenseProDoBattleReq::clear_has_roundid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TTowerDefenseProDoBattleReq::clear_roundid() {
  roundid_ = 0u;
  clear_has_roundid();
}
inline ::google::protobuf::uint32 TTowerDefenseProDoBattleReq::roundid() const {
  // @@protoc_insertion_point(field_get:pb.TTowerDefenseProDoBattleReq.RoundId)
  return roundid_;
}
inline void TTowerDefenseProDoBattleReq::set_roundid(::google::protobuf::uint32 value) {
  set_has_roundid();
  roundid_ = value;
  // @@protoc_insertion_point(field_set:pb.TTowerDefenseProDoBattleReq.RoundId)
}

// optional .pb.TBattleCheckParam BattleCheckParam = 2;
inline bool TTowerDefenseProDoBattleReq::has_battlecheckparam() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TTowerDefenseProDoBattleReq::set_has_battlecheckparam() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TTowerDefenseProDoBattleReq::clear_has_battlecheckparam() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TTowerDefenseProDoBattleReq::clear_battlecheckparam() {
  if (battlecheckparam_ != NULL) battlecheckparam_->::pb::TBattleCheckParam::Clear();
  clear_has_battlecheckparam();
}
inline const ::pb::TBattleCheckParam& TTowerDefenseProDoBattleReq::battlecheckparam() const {
  // @@protoc_insertion_point(field_get:pb.TTowerDefenseProDoBattleReq.BattleCheckParam)
  return battlecheckparam_ != NULL ? *battlecheckparam_ : *default_instance_->battlecheckparam_;
}
inline ::pb::TBattleCheckParam* TTowerDefenseProDoBattleReq::mutable_battlecheckparam() {
  set_has_battlecheckparam();
  if (battlecheckparam_ == NULL) battlecheckparam_ = new ::pb::TBattleCheckParam;
  // @@protoc_insertion_point(field_mutable:pb.TTowerDefenseProDoBattleReq.BattleCheckParam)
  return battlecheckparam_;
}
inline ::pb::TBattleCheckParam* TTowerDefenseProDoBattleReq::release_battlecheckparam() {
  clear_has_battlecheckparam();
  ::pb::TBattleCheckParam* temp = battlecheckparam_;
  battlecheckparam_ = NULL;
  return temp;
}
inline void TTowerDefenseProDoBattleReq::set_allocated_battlecheckparam(::pb::TBattleCheckParam* battlecheckparam) {
  delete battlecheckparam_;
  battlecheckparam_ = battlecheckparam;
  if (battlecheckparam) {
    set_has_battlecheckparam();
  } else {
    clear_has_battlecheckparam();
  }
  // @@protoc_insertion_point(field_set_allocated:pb.TTowerDefenseProDoBattleReq.BattleCheckParam)
}

// -------------------------------------------------------------------

// TTowerDefenseProDoBattleRsp

// optional bytes BattleArgsData = 1;
inline bool TTowerDefenseProDoBattleRsp::has_battleargsdata() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TTowerDefenseProDoBattleRsp::set_has_battleargsdata() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TTowerDefenseProDoBattleRsp::clear_has_battleargsdata() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TTowerDefenseProDoBattleRsp::clear_battleargsdata() {
  if (battleargsdata_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    battleargsdata_->clear();
  }
  clear_has_battleargsdata();
}
inline const ::std::string& TTowerDefenseProDoBattleRsp::battleargsdata() const {
  // @@protoc_insertion_point(field_get:pb.TTowerDefenseProDoBattleRsp.BattleArgsData)
  return *battleargsdata_;
}
inline void TTowerDefenseProDoBattleRsp::set_battleargsdata(const ::std::string& value) {
  set_has_battleargsdata();
  if (battleargsdata_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    battleargsdata_ = new ::std::string;
  }
  battleargsdata_->assign(value);
  // @@protoc_insertion_point(field_set:pb.TTowerDefenseProDoBattleRsp.BattleArgsData)
}
inline void TTowerDefenseProDoBattleRsp::set_battleargsdata(const char* value) {
  set_has_battleargsdata();
  if (battleargsdata_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    battleargsdata_ = new ::std::string;
  }
  battleargsdata_->assign(value);
  // @@protoc_insertion_point(field_set_char:pb.TTowerDefenseProDoBattleRsp.BattleArgsData)
}
inline void TTowerDefenseProDoBattleRsp::set_battleargsdata(const void* value, size_t size) {
  set_has_battleargsdata();
  if (battleargsdata_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    battleargsdata_ = new ::std::string;
  }
  battleargsdata_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:pb.TTowerDefenseProDoBattleRsp.BattleArgsData)
}
inline ::std::string* TTowerDefenseProDoBattleRsp::mutable_battleargsdata() {
  set_has_battleargsdata();
  if (battleargsdata_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    battleargsdata_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:pb.TTowerDefenseProDoBattleRsp.BattleArgsData)
  return battleargsdata_;
}
inline ::std::string* TTowerDefenseProDoBattleRsp::release_battleargsdata() {
  clear_has_battleargsdata();
  if (battleargsdata_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = battleargsdata_;
    battleargsdata_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void TTowerDefenseProDoBattleRsp::set_allocated_battleargsdata(::std::string* battleargsdata) {
  if (battleargsdata_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete battleargsdata_;
  }
  if (battleargsdata) {
    set_has_battleargsdata();
    battleargsdata_ = battleargsdata;
  } else {
    clear_has_battleargsdata();
    battleargsdata_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:pb.TTowerDefenseProDoBattleRsp.BattleArgsData)
}

// -------------------------------------------------------------------

// TTowerDefenseProReportBattleReq

// optional uint32 RoundId = 1;
inline bool TTowerDefenseProReportBattleReq::has_roundid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TTowerDefenseProReportBattleReq::set_has_roundid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TTowerDefenseProReportBattleReq::clear_has_roundid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TTowerDefenseProReportBattleReq::clear_roundid() {
  roundid_ = 0u;
  clear_has_roundid();
}
inline ::google::protobuf::uint32 TTowerDefenseProReportBattleReq::roundid() const {
  // @@protoc_insertion_point(field_get:pb.TTowerDefenseProReportBattleReq.RoundId)
  return roundid_;
}
inline void TTowerDefenseProReportBattleReq::set_roundid(::google::protobuf::uint32 value) {
  set_has_roundid();
  roundid_ = value;
  // @@protoc_insertion_point(field_set:pb.TTowerDefenseProReportBattleReq.RoundId)
}

// optional bytes BattleResultBytes = 2;
inline bool TTowerDefenseProReportBattleReq::has_battleresultbytes() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TTowerDefenseProReportBattleReq::set_has_battleresultbytes() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TTowerDefenseProReportBattleReq::clear_has_battleresultbytes() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TTowerDefenseProReportBattleReq::clear_battleresultbytes() {
  if (battleresultbytes_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    battleresultbytes_->clear();
  }
  clear_has_battleresultbytes();
}
inline const ::std::string& TTowerDefenseProReportBattleReq::battleresultbytes() const {
  // @@protoc_insertion_point(field_get:pb.TTowerDefenseProReportBattleReq.BattleResultBytes)
  return *battleresultbytes_;
}
inline void TTowerDefenseProReportBattleReq::set_battleresultbytes(const ::std::string& value) {
  set_has_battleresultbytes();
  if (battleresultbytes_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    battleresultbytes_ = new ::std::string;
  }
  battleresultbytes_->assign(value);
  // @@protoc_insertion_point(field_set:pb.TTowerDefenseProReportBattleReq.BattleResultBytes)
}
inline void TTowerDefenseProReportBattleReq::set_battleresultbytes(const char* value) {
  set_has_battleresultbytes();
  if (battleresultbytes_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    battleresultbytes_ = new ::std::string;
  }
  battleresultbytes_->assign(value);
  // @@protoc_insertion_point(field_set_char:pb.TTowerDefenseProReportBattleReq.BattleResultBytes)
}
inline void TTowerDefenseProReportBattleReq::set_battleresultbytes(const void* value, size_t size) {
  set_has_battleresultbytes();
  if (battleresultbytes_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    battleresultbytes_ = new ::std::string;
  }
  battleresultbytes_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:pb.TTowerDefenseProReportBattleReq.BattleResultBytes)
}
inline ::std::string* TTowerDefenseProReportBattleReq::mutable_battleresultbytes() {
  set_has_battleresultbytes();
  if (battleresultbytes_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    battleresultbytes_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:pb.TTowerDefenseProReportBattleReq.BattleResultBytes)
  return battleresultbytes_;
}
inline ::std::string* TTowerDefenseProReportBattleReq::release_battleresultbytes() {
  clear_has_battleresultbytes();
  if (battleresultbytes_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = battleresultbytes_;
    battleresultbytes_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void TTowerDefenseProReportBattleReq::set_allocated_battleresultbytes(::std::string* battleresultbytes) {
  if (battleresultbytes_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete battleresultbytes_;
  }
  if (battleresultbytes) {
    set_has_battleresultbytes();
    battleresultbytes_ = battleresultbytes;
  } else {
    clear_has_battleresultbytes();
    battleresultbytes_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:pb.TTowerDefenseProReportBattleReq.BattleResultBytes)
}

// -------------------------------------------------------------------

// TTowerDefenseProReportBattleRsp

// repeated .pb.TCommonReward DropArray = 1;
inline int TTowerDefenseProReportBattleRsp::droparray_size() const {
  return droparray_.size();
}
inline void TTowerDefenseProReportBattleRsp::clear_droparray() {
  droparray_.Clear();
}
inline const ::pb::TCommonReward& TTowerDefenseProReportBattleRsp::droparray(int index) const {
  // @@protoc_insertion_point(field_get:pb.TTowerDefenseProReportBattleRsp.DropArray)
  return droparray_.Get(index);
}
inline ::pb::TCommonReward* TTowerDefenseProReportBattleRsp::mutable_droparray(int index) {
  // @@protoc_insertion_point(field_mutable:pb.TTowerDefenseProReportBattleRsp.DropArray)
  return droparray_.Mutable(index);
}
inline ::pb::TCommonReward* TTowerDefenseProReportBattleRsp::add_droparray() {
  // @@protoc_insertion_point(field_add:pb.TTowerDefenseProReportBattleRsp.DropArray)
  return droparray_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::TCommonReward >&
TTowerDefenseProReportBattleRsp::droparray() const {
  // @@protoc_insertion_point(field_list:pb.TTowerDefenseProReportBattleRsp.DropArray)
  return droparray_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb::TCommonReward >*
TTowerDefenseProReportBattleRsp::mutable_droparray() {
  // @@protoc_insertion_point(field_mutable_list:pb.TTowerDefenseProReportBattleRsp.DropArray)
  return &droparray_;
}

// optional bytes BattleArgsData = 2;
inline bool TTowerDefenseProReportBattleRsp::has_battleargsdata() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TTowerDefenseProReportBattleRsp::set_has_battleargsdata() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TTowerDefenseProReportBattleRsp::clear_has_battleargsdata() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TTowerDefenseProReportBattleRsp::clear_battleargsdata() {
  if (battleargsdata_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    battleargsdata_->clear();
  }
  clear_has_battleargsdata();
}
inline const ::std::string& TTowerDefenseProReportBattleRsp::battleargsdata() const {
  // @@protoc_insertion_point(field_get:pb.TTowerDefenseProReportBattleRsp.BattleArgsData)
  return *battleargsdata_;
}
inline void TTowerDefenseProReportBattleRsp::set_battleargsdata(const ::std::string& value) {
  set_has_battleargsdata();
  if (battleargsdata_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    battleargsdata_ = new ::std::string;
  }
  battleargsdata_->assign(value);
  // @@protoc_insertion_point(field_set:pb.TTowerDefenseProReportBattleRsp.BattleArgsData)
}
inline void TTowerDefenseProReportBattleRsp::set_battleargsdata(const char* value) {
  set_has_battleargsdata();
  if (battleargsdata_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    battleargsdata_ = new ::std::string;
  }
  battleargsdata_->assign(value);
  // @@protoc_insertion_point(field_set_char:pb.TTowerDefenseProReportBattleRsp.BattleArgsData)
}
inline void TTowerDefenseProReportBattleRsp::set_battleargsdata(const void* value, size_t size) {
  set_has_battleargsdata();
  if (battleargsdata_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    battleargsdata_ = new ::std::string;
  }
  battleargsdata_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:pb.TTowerDefenseProReportBattleRsp.BattleArgsData)
}
inline ::std::string* TTowerDefenseProReportBattleRsp::mutable_battleargsdata() {
  set_has_battleargsdata();
  if (battleargsdata_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    battleargsdata_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:pb.TTowerDefenseProReportBattleRsp.BattleArgsData)
  return battleargsdata_;
}
inline ::std::string* TTowerDefenseProReportBattleRsp::release_battleargsdata() {
  clear_has_battleargsdata();
  if (battleargsdata_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = battleargsdata_;
    battleargsdata_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void TTowerDefenseProReportBattleRsp::set_allocated_battleargsdata(::std::string* battleargsdata) {
  if (battleargsdata_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete battleargsdata_;
  }
  if (battleargsdata) {
    set_has_battleargsdata();
    battleargsdata_ = battleargsdata;
  } else {
    clear_has_battleargsdata();
    battleargsdata_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:pb.TTowerDefenseProReportBattleRsp.BattleArgsData)
}

// -------------------------------------------------------------------

// TTowerDefenseProRoundRankInfo

// optional .pb.TUserSimpleInfo UserInfo = 1;
inline bool TTowerDefenseProRoundRankInfo::has_userinfo() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TTowerDefenseProRoundRankInfo::set_has_userinfo() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TTowerDefenseProRoundRankInfo::clear_has_userinfo() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TTowerDefenseProRoundRankInfo::clear_userinfo() {
  if (userinfo_ != NULL) userinfo_->::pb::TUserSimpleInfo::Clear();
  clear_has_userinfo();
}
inline const ::pb::TUserSimpleInfo& TTowerDefenseProRoundRankInfo::userinfo() const {
  // @@protoc_insertion_point(field_get:pb.TTowerDefenseProRoundRankInfo.UserInfo)
  return userinfo_ != NULL ? *userinfo_ : *default_instance_->userinfo_;
}
inline ::pb::TUserSimpleInfo* TTowerDefenseProRoundRankInfo::mutable_userinfo() {
  set_has_userinfo();
  if (userinfo_ == NULL) userinfo_ = new ::pb::TUserSimpleInfo;
  // @@protoc_insertion_point(field_mutable:pb.TTowerDefenseProRoundRankInfo.UserInfo)
  return userinfo_;
}
inline ::pb::TUserSimpleInfo* TTowerDefenseProRoundRankInfo::release_userinfo() {
  clear_has_userinfo();
  ::pb::TUserSimpleInfo* temp = userinfo_;
  userinfo_ = NULL;
  return temp;
}
inline void TTowerDefenseProRoundRankInfo::set_allocated_userinfo(::pb::TUserSimpleInfo* userinfo) {
  delete userinfo_;
  userinfo_ = userinfo;
  if (userinfo) {
    set_has_userinfo();
  } else {
    clear_has_userinfo();
  }
  // @@protoc_insertion_point(field_set_allocated:pb.TTowerDefenseProRoundRankInfo.UserInfo)
}

// optional uint32 RoundId = 2;
inline bool TTowerDefenseProRoundRankInfo::has_roundid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TTowerDefenseProRoundRankInfo::set_has_roundid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TTowerDefenseProRoundRankInfo::clear_has_roundid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TTowerDefenseProRoundRankInfo::clear_roundid() {
  roundid_ = 0u;
  clear_has_roundid();
}
inline ::google::protobuf::uint32 TTowerDefenseProRoundRankInfo::roundid() const {
  // @@protoc_insertion_point(field_get:pb.TTowerDefenseProRoundRankInfo.RoundId)
  return roundid_;
}
inline void TTowerDefenseProRoundRankInfo::set_roundid(::google::protobuf::uint32 value) {
  set_has_roundid();
  roundid_ = value;
  // @@protoc_insertion_point(field_set:pb.TTowerDefenseProRoundRankInfo.RoundId)
}

// optional uint64 UpdateTime = 3;
inline bool TTowerDefenseProRoundRankInfo::has_updatetime() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void TTowerDefenseProRoundRankInfo::set_has_updatetime() {
  _has_bits_[0] |= 0x00000004u;
}
inline void TTowerDefenseProRoundRankInfo::clear_has_updatetime() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void TTowerDefenseProRoundRankInfo::clear_updatetime() {
  updatetime_ = GOOGLE_ULONGLONG(0);
  clear_has_updatetime();
}
inline ::google::protobuf::uint64 TTowerDefenseProRoundRankInfo::updatetime() const {
  // @@protoc_insertion_point(field_get:pb.TTowerDefenseProRoundRankInfo.UpdateTime)
  return updatetime_;
}
inline void TTowerDefenseProRoundRankInfo::set_updatetime(::google::protobuf::uint64 value) {
  set_has_updatetime();
  updatetime_ = value;
  // @@protoc_insertion_point(field_set:pb.TTowerDefenseProRoundRankInfo.UpdateTime)
}

// -------------------------------------------------------------------

// TTowerDefenseProGetRoundRankReq

// optional uint32 Offset = 1;
inline bool TTowerDefenseProGetRoundRankReq::has_offset() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TTowerDefenseProGetRoundRankReq::set_has_offset() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TTowerDefenseProGetRoundRankReq::clear_has_offset() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TTowerDefenseProGetRoundRankReq::clear_offset() {
  offset_ = 0u;
  clear_has_offset();
}
inline ::google::protobuf::uint32 TTowerDefenseProGetRoundRankReq::offset() const {
  // @@protoc_insertion_point(field_get:pb.TTowerDefenseProGetRoundRankReq.Offset)
  return offset_;
}
inline void TTowerDefenseProGetRoundRankReq::set_offset(::google::protobuf::uint32 value) {
  set_has_offset();
  offset_ = value;
  // @@protoc_insertion_point(field_set:pb.TTowerDefenseProGetRoundRankReq.Offset)
}

// optional uint32 Limit = 2;
inline bool TTowerDefenseProGetRoundRankReq::has_limit() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TTowerDefenseProGetRoundRankReq::set_has_limit() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TTowerDefenseProGetRoundRankReq::clear_has_limit() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TTowerDefenseProGetRoundRankReq::clear_limit() {
  limit_ = 0u;
  clear_has_limit();
}
inline ::google::protobuf::uint32 TTowerDefenseProGetRoundRankReq::limit() const {
  // @@protoc_insertion_point(field_get:pb.TTowerDefenseProGetRoundRankReq.Limit)
  return limit_;
}
inline void TTowerDefenseProGetRoundRankReq::set_limit(::google::protobuf::uint32 value) {
  set_has_limit();
  limit_ = value;
  // @@protoc_insertion_point(field_set:pb.TTowerDefenseProGetRoundRankReq.Limit)
}

// -------------------------------------------------------------------

// TTowerDefenseProGetRoundRankRsp

// repeated .pb.TTowerDefenseProRoundRankInfo RankArr = 1;
inline int TTowerDefenseProGetRoundRankRsp::rankarr_size() const {
  return rankarr_.size();
}
inline void TTowerDefenseProGetRoundRankRsp::clear_rankarr() {
  rankarr_.Clear();
}
inline const ::pb::TTowerDefenseProRoundRankInfo& TTowerDefenseProGetRoundRankRsp::rankarr(int index) const {
  // @@protoc_insertion_point(field_get:pb.TTowerDefenseProGetRoundRankRsp.RankArr)
  return rankarr_.Get(index);
}
inline ::pb::TTowerDefenseProRoundRankInfo* TTowerDefenseProGetRoundRankRsp::mutable_rankarr(int index) {
  // @@protoc_insertion_point(field_mutable:pb.TTowerDefenseProGetRoundRankRsp.RankArr)
  return rankarr_.Mutable(index);
}
inline ::pb::TTowerDefenseProRoundRankInfo* TTowerDefenseProGetRoundRankRsp::add_rankarr() {
  // @@protoc_insertion_point(field_add:pb.TTowerDefenseProGetRoundRankRsp.RankArr)
  return rankarr_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::TTowerDefenseProRoundRankInfo >&
TTowerDefenseProGetRoundRankRsp::rankarr() const {
  // @@protoc_insertion_point(field_list:pb.TTowerDefenseProGetRoundRankRsp.RankArr)
  return rankarr_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb::TTowerDefenseProRoundRankInfo >*
TTowerDefenseProGetRoundRankRsp::mutable_rankarr() {
  // @@protoc_insertion_point(field_mutable_list:pb.TTowerDefenseProGetRoundRankRsp.RankArr)
  return &rankarr_;
}

// optional int32 MyRank = 2;
inline bool TTowerDefenseProGetRoundRankRsp::has_myrank() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TTowerDefenseProGetRoundRankRsp::set_has_myrank() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TTowerDefenseProGetRoundRankRsp::clear_has_myrank() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TTowerDefenseProGetRoundRankRsp::clear_myrank() {
  myrank_ = 0;
  clear_has_myrank();
}
inline ::google::protobuf::int32 TTowerDefenseProGetRoundRankRsp::myrank() const {
  // @@protoc_insertion_point(field_get:pb.TTowerDefenseProGetRoundRankRsp.MyRank)
  return myrank_;
}
inline void TTowerDefenseProGetRoundRankRsp::set_myrank(::google::protobuf::int32 value) {
  set_has_myrank();
  myrank_ = value;
  // @@protoc_insertion_point(field_set:pb.TTowerDefenseProGetRoundRankRsp.MyRank)
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace pb

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_net_2fTowerDefensePro_2eproto__INCLUDED
