// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: net/Mount.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "net/Mount.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace pb {

namespace {

const ::google::protobuf::Descriptor* TMountEquip_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TMountEquip_reflection_ = NULL;
const ::google::protobuf::Descriptor* MountSingleInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MountSingleInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* TOtherMountSingleInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TOtherMountSingleInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* TOtherMountEquip_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TOtherMountEquip_reflection_ = NULL;
const ::google::protobuf::Descriptor* TMountGetInfoRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TMountGetInfoRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* TMountLevelUpReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TMountLevelUpReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* TMountSetFigureReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TMountSetFigureReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* TMountRebornReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TMountRebornReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* TMountEquipReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TMountEquipReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* TMountEquipMountReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TMountEquipMountReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* TMountEquipMountRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TMountEquipMountRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* TMountEquipAspectMountReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TMountEquipAspectMountReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* TMountNotify_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TMountNotify_reflection_ = NULL;
const ::google::protobuf::Descriptor* TMountFigureNotify_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TMountFigureNotify_reflection_ = NULL;
const ::google::protobuf::Descriptor* TMountActivateBookReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TMountActivateBookReq_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_net_2fMount_2eproto() {
  protobuf_AddDesc_net_2fMount_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "net/Mount.proto");
  GOOGLE_CHECK(file != NULL);
  TMountEquip_descriptor_ = file->message_type(0);
  static const int TMountEquip_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TMountEquip, itemid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TMountEquip, itemtid_),
  };
  TMountEquip_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TMountEquip_descriptor_,
      TMountEquip::default_instance_,
      TMountEquip_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TMountEquip, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TMountEquip, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TMountEquip));
  MountSingleInfo_descriptor_ = file->message_type(1);
  static const int MountSingleInfo_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MountSingleInfo, level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MountSingleInfo, figure_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MountSingleInfo, expiretime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MountSingleInfo, mounttid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MountSingleInfo, equiparr_),
  };
  MountSingleInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MountSingleInfo_descriptor_,
      MountSingleInfo::default_instance_,
      MountSingleInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MountSingleInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MountSingleInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MountSingleInfo));
  TOtherMountSingleInfo_descriptor_ = file->message_type(2);
  static const int TOtherMountSingleInfo_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TOtherMountSingleInfo, level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TOtherMountSingleInfo, figure_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TOtherMountSingleInfo, expiretime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TOtherMountSingleInfo, mounttid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TOtherMountSingleInfo, equiparr_),
  };
  TOtherMountSingleInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TOtherMountSingleInfo_descriptor_,
      TOtherMountSingleInfo::default_instance_,
      TOtherMountSingleInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TOtherMountSingleInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TOtherMountSingleInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TOtherMountSingleInfo));
  TOtherMountEquip_descriptor_ = file->message_type(3);
  static const int TOtherMountEquip_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TOtherMountEquip, itemid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TOtherMountEquip, itemtid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TOtherMountEquip, exp_),
  };
  TOtherMountEquip_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TOtherMountEquip_descriptor_,
      TOtherMountEquip::default_instance_,
      TOtherMountEquip_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TOtherMountEquip, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TOtherMountEquip, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TOtherMountEquip));
  TMountGetInfoRsp_descriptor_ = file->message_type(4);
  static const int TMountGetInfoRsp_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TMountGetInfoRsp, curmount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TMountGetInfoRsp, mountarr_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TMountGetInfoRsp, figurearr_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TMountGetInfoRsp, activebookidarr_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TMountGetInfoRsp, curaspectmount_),
  };
  TMountGetInfoRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TMountGetInfoRsp_descriptor_,
      TMountGetInfoRsp::default_instance_,
      TMountGetInfoRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TMountGetInfoRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TMountGetInfoRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TMountGetInfoRsp));
  TMountLevelUpReq_descriptor_ = file->message_type(5);
  static const int TMountLevelUpReq_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TMountLevelUpReq, mounttid_),
  };
  TMountLevelUpReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TMountLevelUpReq_descriptor_,
      TMountLevelUpReq::default_instance_,
      TMountLevelUpReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TMountLevelUpReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TMountLevelUpReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TMountLevelUpReq));
  TMountSetFigureReq_descriptor_ = file->message_type(6);
  static const int TMountSetFigureReq_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TMountSetFigureReq, mounttid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TMountSetFigureReq, figureid_),
  };
  TMountSetFigureReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TMountSetFigureReq_descriptor_,
      TMountSetFigureReq::default_instance_,
      TMountSetFigureReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TMountSetFigureReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TMountSetFigureReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TMountSetFigureReq));
  TMountRebornReq_descriptor_ = file->message_type(7);
  static const int TMountRebornReq_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TMountRebornReq, mounttid_),
  };
  TMountRebornReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TMountRebornReq_descriptor_,
      TMountRebornReq::default_instance_,
      TMountRebornReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TMountRebornReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TMountRebornReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TMountRebornReq));
  TMountEquipReq_descriptor_ = file->message_type(8);
  static const int TMountEquipReq_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TMountEquipReq, mounttid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TMountEquipReq, preitemid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TMountEquipReq, itemid_),
  };
  TMountEquipReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TMountEquipReq_descriptor_,
      TMountEquipReq::default_instance_,
      TMountEquipReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TMountEquipReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TMountEquipReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TMountEquipReq));
  TMountEquipMountReq_descriptor_ = file->message_type(9);
  static const int TMountEquipMountReq_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TMountEquipMountReq, mounttid_),
  };
  TMountEquipMountReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TMountEquipMountReq_descriptor_,
      TMountEquipMountReq::default_instance_,
      TMountEquipMountReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TMountEquipMountReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TMountEquipMountReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TMountEquipMountReq));
  TMountEquipMountRsp_descriptor_ = file->message_type(10);
  static const int TMountEquipMountRsp_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TMountEquipMountRsp, returnitem_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TMountEquipMountRsp, mountarr_),
  };
  TMountEquipMountRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TMountEquipMountRsp_descriptor_,
      TMountEquipMountRsp::default_instance_,
      TMountEquipMountRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TMountEquipMountRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TMountEquipMountRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TMountEquipMountRsp));
  TMountEquipAspectMountReq_descriptor_ = file->message_type(11);
  static const int TMountEquipAspectMountReq_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TMountEquipAspectMountReq, mounttid_),
  };
  TMountEquipAspectMountReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TMountEquipAspectMountReq_descriptor_,
      TMountEquipAspectMountReq::default_instance_,
      TMountEquipAspectMountReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TMountEquipAspectMountReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TMountEquipAspectMountReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TMountEquipAspectMountReq));
  TMountNotify_descriptor_ = file->message_type(12);
  static const int TMountNotify_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TMountNotify, mounttid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TMountNotify, mountinfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TMountNotify, rewardarr_),
  };
  TMountNotify_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TMountNotify_descriptor_,
      TMountNotify::default_instance_,
      TMountNotify_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TMountNotify, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TMountNotify, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TMountNotify));
  TMountFigureNotify_descriptor_ = file->message_type(13);
  static const int TMountFigureNotify_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TMountFigureNotify, figureid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TMountFigureNotify, resolved_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TMountFigureNotify, rewardarr_),
  };
  TMountFigureNotify_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TMountFigureNotify_descriptor_,
      TMountFigureNotify::default_instance_,
      TMountFigureNotify_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TMountFigureNotify, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TMountFigureNotify, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TMountFigureNotify));
  TMountActivateBookReq_descriptor_ = file->message_type(14);
  static const int TMountActivateBookReq_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TMountActivateBookReq, bookid_),
  };
  TMountActivateBookReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TMountActivateBookReq_descriptor_,
      TMountActivateBookReq::default_instance_,
      TMountActivateBookReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TMountActivateBookReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TMountActivateBookReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TMountActivateBookReq));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_net_2fMount_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TMountEquip_descriptor_, &TMountEquip::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MountSingleInfo_descriptor_, &MountSingleInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TOtherMountSingleInfo_descriptor_, &TOtherMountSingleInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TOtherMountEquip_descriptor_, &TOtherMountEquip::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TMountGetInfoRsp_descriptor_, &TMountGetInfoRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TMountLevelUpReq_descriptor_, &TMountLevelUpReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TMountSetFigureReq_descriptor_, &TMountSetFigureReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TMountRebornReq_descriptor_, &TMountRebornReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TMountEquipReq_descriptor_, &TMountEquipReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TMountEquipMountReq_descriptor_, &TMountEquipMountReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TMountEquipMountRsp_descriptor_, &TMountEquipMountRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TMountEquipAspectMountReq_descriptor_, &TMountEquipAspectMountReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TMountNotify_descriptor_, &TMountNotify::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TMountFigureNotify_descriptor_, &TMountFigureNotify::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TMountActivateBookReq_descriptor_, &TMountActivateBookReq::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_net_2fMount_2eproto() {
  delete TMountEquip::default_instance_;
  delete TMountEquip_reflection_;
  delete MountSingleInfo::default_instance_;
  delete MountSingleInfo_reflection_;
  delete TOtherMountSingleInfo::default_instance_;
  delete TOtherMountSingleInfo_reflection_;
  delete TOtherMountEquip::default_instance_;
  delete TOtherMountEquip_reflection_;
  delete TMountGetInfoRsp::default_instance_;
  delete TMountGetInfoRsp_reflection_;
  delete TMountLevelUpReq::default_instance_;
  delete TMountLevelUpReq_reflection_;
  delete TMountSetFigureReq::default_instance_;
  delete TMountSetFigureReq_reflection_;
  delete TMountRebornReq::default_instance_;
  delete TMountRebornReq_reflection_;
  delete TMountEquipReq::default_instance_;
  delete TMountEquipReq_reflection_;
  delete TMountEquipMountReq::default_instance_;
  delete TMountEquipMountReq_reflection_;
  delete TMountEquipMountRsp::default_instance_;
  delete TMountEquipMountRsp_reflection_;
  delete TMountEquipAspectMountReq::default_instance_;
  delete TMountEquipAspectMountReq_reflection_;
  delete TMountNotify::default_instance_;
  delete TMountNotify_reflection_;
  delete TMountFigureNotify::default_instance_;
  delete TMountFigureNotify_reflection_;
  delete TMountActivateBookReq::default_instance_;
  delete TMountActivateBookReq_reflection_;
}

void protobuf_AddDesc_net_2fMount_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::pb::protobuf_AddDesc_net_2fCommonReward_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\017net/Mount.proto\022\002pb\032\026net/CommonReward."
    "proto\".\n\013TMountEquip\022\016\n\006ItemId\030\001 \001(\r\022\017\n\007"
    "ItemTid\030\002 \001(\r\"y\n\017MountSingleInfo\022\r\n\005Leve"
    "l\030\001 \001(\r\022\016\n\006Figure\030\002 \001(\r\022\022\n\nExpireTime\030\003 "
    "\001(\004\022\020\n\010MountTid\030\004 \001(\r\022!\n\010EquipArr\030\005 \003(\0132"
    "\017.pb.TMountEquip\"\204\001\n\025TOtherMountSingleIn"
    "fo\022\r\n\005Level\030\001 \001(\r\022\016\n\006Figure\030\002 \001(\r\022\022\n\nExp"
    "ireTime\030\003 \001(\004\022\020\n\010MountTid\030\004 \001(\r\022&\n\010Equip"
    "Arr\030\005 \003(\0132\024.pb.TOtherMountEquip\"@\n\020TOthe"
    "rMountEquip\022\016\n\006ItemId\030\001 \001(\r\022\017\n\007ItemTid\030\002"
    " \001(\r\022\013\n\003Exp\030\003 \001(\r\"\217\001\n\020TMountGetInfoRsp\022\020"
    "\n\010CurMount\030\001 \001(\r\022%\n\010MountArr\030\002 \003(\0132\023.pb."
    "MountSingleInfo\022\021\n\tFigureArr\030\003 \003(\r\022\027\n\017Ac"
    "tiveBookIdArr\030\004 \003(\r\022\026\n\016CurAspectMount\030\005 "
    "\001(\r\"$\n\020TMountLevelUpReq\022\020\n\010MountTid\030\001 \001("
    "\r\"8\n\022TMountSetFigureReq\022\020\n\010MountTid\030\002 \001("
    "\r\022\020\n\010FigureId\030\001 \001(\r\"#\n\017TMountRebornReq\022\020"
    "\n\010MountTid\030\001 \003(\r\"E\n\016TMountEquipReq\022\020\n\010Mo"
    "untTid\030\001 \001(\r\022\021\n\tPreItemId\030\002 \001(\r\022\016\n\006ItemI"
    "d\030\003 \001(\r\"\'\n\023TMountEquipMountReq\022\020\n\010MountT"
    "id\030\001 \001(\r\"c\n\023TMountEquipMountRsp\022%\n\nRetur"
    "nItem\030\001 \003(\0132\021.pb.TCommonReward\022%\n\010MountA"
    "rr\030\002 \003(\0132\023.pb.MountSingleInfo\"-\n\031TMountE"
    "quipAspectMountReq\022\020\n\010MountTid\030\001 \001(\r\"n\n\014"
    "TMountNotify\022\020\n\010MountTid\030\001 \001(\r\022&\n\tMountI"
    "nfo\030\002 \001(\0132\023.pb.MountSingleInfo\022$\n\tReward"
    "Arr\030\003 \003(\0132\021.pb.TCommonReward\"^\n\022TMountFi"
    "gureNotify\022\020\n\010FigureId\030\001 \001(\r\022\020\n\010Resolved"
    "\030\002 \001(\r\022$\n\tRewardArr\030\003 \003(\0132\021.pb.TCommonRe"
    "ward\"\'\n\025TMountActivateBookReq\022\016\n\006BookId\030"
    "\001 \001(\r", 1205);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "net/Mount.proto", &protobuf_RegisterTypes);
  TMountEquip::default_instance_ = new TMountEquip();
  MountSingleInfo::default_instance_ = new MountSingleInfo();
  TOtherMountSingleInfo::default_instance_ = new TOtherMountSingleInfo();
  TOtherMountEquip::default_instance_ = new TOtherMountEquip();
  TMountGetInfoRsp::default_instance_ = new TMountGetInfoRsp();
  TMountLevelUpReq::default_instance_ = new TMountLevelUpReq();
  TMountSetFigureReq::default_instance_ = new TMountSetFigureReq();
  TMountRebornReq::default_instance_ = new TMountRebornReq();
  TMountEquipReq::default_instance_ = new TMountEquipReq();
  TMountEquipMountReq::default_instance_ = new TMountEquipMountReq();
  TMountEquipMountRsp::default_instance_ = new TMountEquipMountRsp();
  TMountEquipAspectMountReq::default_instance_ = new TMountEquipAspectMountReq();
  TMountNotify::default_instance_ = new TMountNotify();
  TMountFigureNotify::default_instance_ = new TMountFigureNotify();
  TMountActivateBookReq::default_instance_ = new TMountActivateBookReq();
  TMountEquip::default_instance_->InitAsDefaultInstance();
  MountSingleInfo::default_instance_->InitAsDefaultInstance();
  TOtherMountSingleInfo::default_instance_->InitAsDefaultInstance();
  TOtherMountEquip::default_instance_->InitAsDefaultInstance();
  TMountGetInfoRsp::default_instance_->InitAsDefaultInstance();
  TMountLevelUpReq::default_instance_->InitAsDefaultInstance();
  TMountSetFigureReq::default_instance_->InitAsDefaultInstance();
  TMountRebornReq::default_instance_->InitAsDefaultInstance();
  TMountEquipReq::default_instance_->InitAsDefaultInstance();
  TMountEquipMountReq::default_instance_->InitAsDefaultInstance();
  TMountEquipMountRsp::default_instance_->InitAsDefaultInstance();
  TMountEquipAspectMountReq::default_instance_->InitAsDefaultInstance();
  TMountNotify::default_instance_->InitAsDefaultInstance();
  TMountFigureNotify::default_instance_->InitAsDefaultInstance();
  TMountActivateBookReq::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_net_2fMount_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_net_2fMount_2eproto {
  StaticDescriptorInitializer_net_2fMount_2eproto() {
    protobuf_AddDesc_net_2fMount_2eproto();
  }
} static_descriptor_initializer_net_2fMount_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int TMountEquip::kItemIdFieldNumber;
const int TMountEquip::kItemTidFieldNumber;
#endif  // !_MSC_VER

TMountEquip::TMountEquip()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TMountEquip)
}

void TMountEquip::InitAsDefaultInstance() {
}

TMountEquip::TMountEquip(const TMountEquip& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TMountEquip)
}

void TMountEquip::SharedCtor() {
  _cached_size_ = 0;
  itemid_ = 0u;
  itemtid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TMountEquip::~TMountEquip() {
  // @@protoc_insertion_point(destructor:pb.TMountEquip)
  SharedDtor();
}

void TMountEquip::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TMountEquip::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TMountEquip::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TMountEquip_descriptor_;
}

const TMountEquip& TMountEquip::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fMount_2eproto();
  return *default_instance_;
}

TMountEquip* TMountEquip::default_instance_ = NULL;

TMountEquip* TMountEquip::New() const {
  return new TMountEquip;
}

void TMountEquip::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<TMountEquip*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(itemid_, itemtid_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TMountEquip::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TMountEquip)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 ItemId = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &itemid_)));
          set_has_itemid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_ItemTid;
        break;
      }

      // optional uint32 ItemTid = 2;
      case 2: {
        if (tag == 16) {
         parse_ItemTid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &itemtid_)));
          set_has_itemtid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TMountEquip)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TMountEquip)
  return false;
#undef DO_
}

void TMountEquip::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TMountEquip)
  // optional uint32 ItemId = 1;
  if (has_itemid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->itemid(), output);
  }

  // optional uint32 ItemTid = 2;
  if (has_itemtid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->itemtid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TMountEquip)
}

::google::protobuf::uint8* TMountEquip::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TMountEquip)
  // optional uint32 ItemId = 1;
  if (has_itemid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->itemid(), target);
  }

  // optional uint32 ItemTid = 2;
  if (has_itemtid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->itemtid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TMountEquip)
  return target;
}

int TMountEquip::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 ItemId = 1;
    if (has_itemid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->itemid());
    }

    // optional uint32 ItemTid = 2;
    if (has_itemtid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->itemtid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TMountEquip::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TMountEquip* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TMountEquip*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TMountEquip::MergeFrom(const TMountEquip& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_itemid()) {
      set_itemid(from.itemid());
    }
    if (from.has_itemtid()) {
      set_itemtid(from.itemtid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TMountEquip::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TMountEquip::CopyFrom(const TMountEquip& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TMountEquip::IsInitialized() const {

  return true;
}

void TMountEquip::Swap(TMountEquip* other) {
  if (other != this) {
    std::swap(itemid_, other->itemid_);
    std::swap(itemtid_, other->itemtid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TMountEquip::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TMountEquip_descriptor_;
  metadata.reflection = TMountEquip_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MountSingleInfo::kLevelFieldNumber;
const int MountSingleInfo::kFigureFieldNumber;
const int MountSingleInfo::kExpireTimeFieldNumber;
const int MountSingleInfo::kMountTidFieldNumber;
const int MountSingleInfo::kEquipArrFieldNumber;
#endif  // !_MSC_VER

MountSingleInfo::MountSingleInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.MountSingleInfo)
}

void MountSingleInfo::InitAsDefaultInstance() {
}

MountSingleInfo::MountSingleInfo(const MountSingleInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.MountSingleInfo)
}

void MountSingleInfo::SharedCtor() {
  _cached_size_ = 0;
  level_ = 0u;
  figure_ = 0u;
  expiretime_ = GOOGLE_ULONGLONG(0);
  mounttid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MountSingleInfo::~MountSingleInfo() {
  // @@protoc_insertion_point(destructor:pb.MountSingleInfo)
  SharedDtor();
}

void MountSingleInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MountSingleInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MountSingleInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MountSingleInfo_descriptor_;
}

const MountSingleInfo& MountSingleInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fMount_2eproto();
  return *default_instance_;
}

MountSingleInfo* MountSingleInfo::default_instance_ = NULL;

MountSingleInfo* MountSingleInfo::New() const {
  return new MountSingleInfo;
}

void MountSingleInfo::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<MountSingleInfo*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 15) {
    ZR_(level_, expiretime_);
    mounttid_ = 0u;
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  equiparr_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MountSingleInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.MountSingleInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 Level = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &level_)));
          set_has_level();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_Figure;
        break;
      }

      // optional uint32 Figure = 2;
      case 2: {
        if (tag == 16) {
         parse_Figure:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &figure_)));
          set_has_figure();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_ExpireTime;
        break;
      }

      // optional uint64 ExpireTime = 3;
      case 3: {
        if (tag == 24) {
         parse_ExpireTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &expiretime_)));
          set_has_expiretime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_MountTid;
        break;
      }

      // optional uint32 MountTid = 4;
      case 4: {
        if (tag == 32) {
         parse_MountTid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &mounttid_)));
          set_has_mounttid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_EquipArr;
        break;
      }

      // repeated .pb.TMountEquip EquipArr = 5;
      case 5: {
        if (tag == 42) {
         parse_EquipArr:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_equiparr()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_EquipArr;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.MountSingleInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.MountSingleInfo)
  return false;
#undef DO_
}

void MountSingleInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.MountSingleInfo)
  // optional uint32 Level = 1;
  if (has_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->level(), output);
  }

  // optional uint32 Figure = 2;
  if (has_figure()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->figure(), output);
  }

  // optional uint64 ExpireTime = 3;
  if (has_expiretime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->expiretime(), output);
  }

  // optional uint32 MountTid = 4;
  if (has_mounttid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->mounttid(), output);
  }

  // repeated .pb.TMountEquip EquipArr = 5;
  for (int i = 0; i < this->equiparr_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->equiparr(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.MountSingleInfo)
}

::google::protobuf::uint8* MountSingleInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.MountSingleInfo)
  // optional uint32 Level = 1;
  if (has_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->level(), target);
  }

  // optional uint32 Figure = 2;
  if (has_figure()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->figure(), target);
  }

  // optional uint64 ExpireTime = 3;
  if (has_expiretime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->expiretime(), target);
  }

  // optional uint32 MountTid = 4;
  if (has_mounttid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->mounttid(), target);
  }

  // repeated .pb.TMountEquip EquipArr = 5;
  for (int i = 0; i < this->equiparr_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->equiparr(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.MountSingleInfo)
  return target;
}

int MountSingleInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 Level = 1;
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->level());
    }

    // optional uint32 Figure = 2;
    if (has_figure()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->figure());
    }

    // optional uint64 ExpireTime = 3;
    if (has_expiretime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->expiretime());
    }

    // optional uint32 MountTid = 4;
    if (has_mounttid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->mounttid());
    }

  }
  // repeated .pb.TMountEquip EquipArr = 5;
  total_size += 1 * this->equiparr_size();
  for (int i = 0; i < this->equiparr_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->equiparr(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MountSingleInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MountSingleInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MountSingleInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MountSingleInfo::MergeFrom(const MountSingleInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  equiparr_.MergeFrom(from.equiparr_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_level()) {
      set_level(from.level());
    }
    if (from.has_figure()) {
      set_figure(from.figure());
    }
    if (from.has_expiretime()) {
      set_expiretime(from.expiretime());
    }
    if (from.has_mounttid()) {
      set_mounttid(from.mounttid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MountSingleInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MountSingleInfo::CopyFrom(const MountSingleInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MountSingleInfo::IsInitialized() const {

  return true;
}

void MountSingleInfo::Swap(MountSingleInfo* other) {
  if (other != this) {
    std::swap(level_, other->level_);
    std::swap(figure_, other->figure_);
    std::swap(expiretime_, other->expiretime_);
    std::swap(mounttid_, other->mounttid_);
    equiparr_.Swap(&other->equiparr_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MountSingleInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MountSingleInfo_descriptor_;
  metadata.reflection = MountSingleInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TOtherMountSingleInfo::kLevelFieldNumber;
const int TOtherMountSingleInfo::kFigureFieldNumber;
const int TOtherMountSingleInfo::kExpireTimeFieldNumber;
const int TOtherMountSingleInfo::kMountTidFieldNumber;
const int TOtherMountSingleInfo::kEquipArrFieldNumber;
#endif  // !_MSC_VER

TOtherMountSingleInfo::TOtherMountSingleInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TOtherMountSingleInfo)
}

void TOtherMountSingleInfo::InitAsDefaultInstance() {
}

TOtherMountSingleInfo::TOtherMountSingleInfo(const TOtherMountSingleInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TOtherMountSingleInfo)
}

void TOtherMountSingleInfo::SharedCtor() {
  _cached_size_ = 0;
  level_ = 0u;
  figure_ = 0u;
  expiretime_ = GOOGLE_ULONGLONG(0);
  mounttid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TOtherMountSingleInfo::~TOtherMountSingleInfo() {
  // @@protoc_insertion_point(destructor:pb.TOtherMountSingleInfo)
  SharedDtor();
}

void TOtherMountSingleInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TOtherMountSingleInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TOtherMountSingleInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TOtherMountSingleInfo_descriptor_;
}

const TOtherMountSingleInfo& TOtherMountSingleInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fMount_2eproto();
  return *default_instance_;
}

TOtherMountSingleInfo* TOtherMountSingleInfo::default_instance_ = NULL;

TOtherMountSingleInfo* TOtherMountSingleInfo::New() const {
  return new TOtherMountSingleInfo;
}

void TOtherMountSingleInfo::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<TOtherMountSingleInfo*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 15) {
    ZR_(level_, expiretime_);
    mounttid_ = 0u;
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  equiparr_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TOtherMountSingleInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TOtherMountSingleInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 Level = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &level_)));
          set_has_level();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_Figure;
        break;
      }

      // optional uint32 Figure = 2;
      case 2: {
        if (tag == 16) {
         parse_Figure:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &figure_)));
          set_has_figure();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_ExpireTime;
        break;
      }

      // optional uint64 ExpireTime = 3;
      case 3: {
        if (tag == 24) {
         parse_ExpireTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &expiretime_)));
          set_has_expiretime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_MountTid;
        break;
      }

      // optional uint32 MountTid = 4;
      case 4: {
        if (tag == 32) {
         parse_MountTid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &mounttid_)));
          set_has_mounttid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_EquipArr;
        break;
      }

      // repeated .pb.TOtherMountEquip EquipArr = 5;
      case 5: {
        if (tag == 42) {
         parse_EquipArr:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_equiparr()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_EquipArr;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TOtherMountSingleInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TOtherMountSingleInfo)
  return false;
#undef DO_
}

void TOtherMountSingleInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TOtherMountSingleInfo)
  // optional uint32 Level = 1;
  if (has_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->level(), output);
  }

  // optional uint32 Figure = 2;
  if (has_figure()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->figure(), output);
  }

  // optional uint64 ExpireTime = 3;
  if (has_expiretime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->expiretime(), output);
  }

  // optional uint32 MountTid = 4;
  if (has_mounttid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->mounttid(), output);
  }

  // repeated .pb.TOtherMountEquip EquipArr = 5;
  for (int i = 0; i < this->equiparr_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->equiparr(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TOtherMountSingleInfo)
}

::google::protobuf::uint8* TOtherMountSingleInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TOtherMountSingleInfo)
  // optional uint32 Level = 1;
  if (has_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->level(), target);
  }

  // optional uint32 Figure = 2;
  if (has_figure()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->figure(), target);
  }

  // optional uint64 ExpireTime = 3;
  if (has_expiretime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->expiretime(), target);
  }

  // optional uint32 MountTid = 4;
  if (has_mounttid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->mounttid(), target);
  }

  // repeated .pb.TOtherMountEquip EquipArr = 5;
  for (int i = 0; i < this->equiparr_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->equiparr(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TOtherMountSingleInfo)
  return target;
}

int TOtherMountSingleInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 Level = 1;
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->level());
    }

    // optional uint32 Figure = 2;
    if (has_figure()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->figure());
    }

    // optional uint64 ExpireTime = 3;
    if (has_expiretime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->expiretime());
    }

    // optional uint32 MountTid = 4;
    if (has_mounttid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->mounttid());
    }

  }
  // repeated .pb.TOtherMountEquip EquipArr = 5;
  total_size += 1 * this->equiparr_size();
  for (int i = 0; i < this->equiparr_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->equiparr(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TOtherMountSingleInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TOtherMountSingleInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TOtherMountSingleInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TOtherMountSingleInfo::MergeFrom(const TOtherMountSingleInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  equiparr_.MergeFrom(from.equiparr_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_level()) {
      set_level(from.level());
    }
    if (from.has_figure()) {
      set_figure(from.figure());
    }
    if (from.has_expiretime()) {
      set_expiretime(from.expiretime());
    }
    if (from.has_mounttid()) {
      set_mounttid(from.mounttid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TOtherMountSingleInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TOtherMountSingleInfo::CopyFrom(const TOtherMountSingleInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TOtherMountSingleInfo::IsInitialized() const {

  return true;
}

void TOtherMountSingleInfo::Swap(TOtherMountSingleInfo* other) {
  if (other != this) {
    std::swap(level_, other->level_);
    std::swap(figure_, other->figure_);
    std::swap(expiretime_, other->expiretime_);
    std::swap(mounttid_, other->mounttid_);
    equiparr_.Swap(&other->equiparr_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TOtherMountSingleInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TOtherMountSingleInfo_descriptor_;
  metadata.reflection = TOtherMountSingleInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TOtherMountEquip::kItemIdFieldNumber;
const int TOtherMountEquip::kItemTidFieldNumber;
const int TOtherMountEquip::kExpFieldNumber;
#endif  // !_MSC_VER

TOtherMountEquip::TOtherMountEquip()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TOtherMountEquip)
}

void TOtherMountEquip::InitAsDefaultInstance() {
}

TOtherMountEquip::TOtherMountEquip(const TOtherMountEquip& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TOtherMountEquip)
}

void TOtherMountEquip::SharedCtor() {
  _cached_size_ = 0;
  itemid_ = 0u;
  itemtid_ = 0u;
  exp_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TOtherMountEquip::~TOtherMountEquip() {
  // @@protoc_insertion_point(destructor:pb.TOtherMountEquip)
  SharedDtor();
}

void TOtherMountEquip::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TOtherMountEquip::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TOtherMountEquip::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TOtherMountEquip_descriptor_;
}

const TOtherMountEquip& TOtherMountEquip::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fMount_2eproto();
  return *default_instance_;
}

TOtherMountEquip* TOtherMountEquip::default_instance_ = NULL;

TOtherMountEquip* TOtherMountEquip::New() const {
  return new TOtherMountEquip;
}

void TOtherMountEquip::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<TOtherMountEquip*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(itemid_, exp_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TOtherMountEquip::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TOtherMountEquip)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 ItemId = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &itemid_)));
          set_has_itemid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_ItemTid;
        break;
      }

      // optional uint32 ItemTid = 2;
      case 2: {
        if (tag == 16) {
         parse_ItemTid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &itemtid_)));
          set_has_itemtid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_Exp;
        break;
      }

      // optional uint32 Exp = 3;
      case 3: {
        if (tag == 24) {
         parse_Exp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &exp_)));
          set_has_exp();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TOtherMountEquip)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TOtherMountEquip)
  return false;
#undef DO_
}

void TOtherMountEquip::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TOtherMountEquip)
  // optional uint32 ItemId = 1;
  if (has_itemid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->itemid(), output);
  }

  // optional uint32 ItemTid = 2;
  if (has_itemtid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->itemtid(), output);
  }

  // optional uint32 Exp = 3;
  if (has_exp()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->exp(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TOtherMountEquip)
}

::google::protobuf::uint8* TOtherMountEquip::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TOtherMountEquip)
  // optional uint32 ItemId = 1;
  if (has_itemid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->itemid(), target);
  }

  // optional uint32 ItemTid = 2;
  if (has_itemtid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->itemtid(), target);
  }

  // optional uint32 Exp = 3;
  if (has_exp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->exp(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TOtherMountEquip)
  return target;
}

int TOtherMountEquip::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 ItemId = 1;
    if (has_itemid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->itemid());
    }

    // optional uint32 ItemTid = 2;
    if (has_itemtid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->itemtid());
    }

    // optional uint32 Exp = 3;
    if (has_exp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->exp());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TOtherMountEquip::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TOtherMountEquip* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TOtherMountEquip*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TOtherMountEquip::MergeFrom(const TOtherMountEquip& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_itemid()) {
      set_itemid(from.itemid());
    }
    if (from.has_itemtid()) {
      set_itemtid(from.itemtid());
    }
    if (from.has_exp()) {
      set_exp(from.exp());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TOtherMountEquip::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TOtherMountEquip::CopyFrom(const TOtherMountEquip& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TOtherMountEquip::IsInitialized() const {

  return true;
}

void TOtherMountEquip::Swap(TOtherMountEquip* other) {
  if (other != this) {
    std::swap(itemid_, other->itemid_);
    std::swap(itemtid_, other->itemtid_);
    std::swap(exp_, other->exp_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TOtherMountEquip::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TOtherMountEquip_descriptor_;
  metadata.reflection = TOtherMountEquip_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TMountGetInfoRsp::kCurMountFieldNumber;
const int TMountGetInfoRsp::kMountArrFieldNumber;
const int TMountGetInfoRsp::kFigureArrFieldNumber;
const int TMountGetInfoRsp::kActiveBookIdArrFieldNumber;
const int TMountGetInfoRsp::kCurAspectMountFieldNumber;
#endif  // !_MSC_VER

TMountGetInfoRsp::TMountGetInfoRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TMountGetInfoRsp)
}

void TMountGetInfoRsp::InitAsDefaultInstance() {
}

TMountGetInfoRsp::TMountGetInfoRsp(const TMountGetInfoRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TMountGetInfoRsp)
}

void TMountGetInfoRsp::SharedCtor() {
  _cached_size_ = 0;
  curmount_ = 0u;
  curaspectmount_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TMountGetInfoRsp::~TMountGetInfoRsp() {
  // @@protoc_insertion_point(destructor:pb.TMountGetInfoRsp)
  SharedDtor();
}

void TMountGetInfoRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TMountGetInfoRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TMountGetInfoRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TMountGetInfoRsp_descriptor_;
}

const TMountGetInfoRsp& TMountGetInfoRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fMount_2eproto();
  return *default_instance_;
}

TMountGetInfoRsp* TMountGetInfoRsp::default_instance_ = NULL;

TMountGetInfoRsp* TMountGetInfoRsp::New() const {
  return new TMountGetInfoRsp;
}

void TMountGetInfoRsp::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<TMountGetInfoRsp*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(curmount_, curaspectmount_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  mountarr_.Clear();
  figurearr_.Clear();
  activebookidarr_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TMountGetInfoRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TMountGetInfoRsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 CurMount = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &curmount_)));
          set_has_curmount();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_MountArr;
        break;
      }

      // repeated .pb.MountSingleInfo MountArr = 2;
      case 2: {
        if (tag == 18) {
         parse_MountArr:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_mountarr()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_MountArr;
        if (input->ExpectTag(24)) goto parse_FigureArr;
        break;
      }

      // repeated uint32 FigureArr = 3;
      case 3: {
        if (tag == 24) {
         parse_FigureArr:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 24, input, this->mutable_figurearr())));
        } else if (tag == 26) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_figurearr())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_FigureArr;
        if (input->ExpectTag(32)) goto parse_ActiveBookIdArr;
        break;
      }

      // repeated uint32 ActiveBookIdArr = 4;
      case 4: {
        if (tag == 32) {
         parse_ActiveBookIdArr:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 32, input, this->mutable_activebookidarr())));
        } else if (tag == 34) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_activebookidarr())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_ActiveBookIdArr;
        if (input->ExpectTag(40)) goto parse_CurAspectMount;
        break;
      }

      // optional uint32 CurAspectMount = 5;
      case 5: {
        if (tag == 40) {
         parse_CurAspectMount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &curaspectmount_)));
          set_has_curaspectmount();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TMountGetInfoRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TMountGetInfoRsp)
  return false;
#undef DO_
}

void TMountGetInfoRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TMountGetInfoRsp)
  // optional uint32 CurMount = 1;
  if (has_curmount()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->curmount(), output);
  }

  // repeated .pb.MountSingleInfo MountArr = 2;
  for (int i = 0; i < this->mountarr_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->mountarr(i), output);
  }

  // repeated uint32 FigureArr = 3;
  for (int i = 0; i < this->figurearr_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      3, this->figurearr(i), output);
  }

  // repeated uint32 ActiveBookIdArr = 4;
  for (int i = 0; i < this->activebookidarr_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      4, this->activebookidarr(i), output);
  }

  // optional uint32 CurAspectMount = 5;
  if (has_curaspectmount()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->curaspectmount(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TMountGetInfoRsp)
}

::google::protobuf::uint8* TMountGetInfoRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TMountGetInfoRsp)
  // optional uint32 CurMount = 1;
  if (has_curmount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->curmount(), target);
  }

  // repeated .pb.MountSingleInfo MountArr = 2;
  for (int i = 0; i < this->mountarr_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->mountarr(i), target);
  }

  // repeated uint32 FigureArr = 3;
  for (int i = 0; i < this->figurearr_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(3, this->figurearr(i), target);
  }

  // repeated uint32 ActiveBookIdArr = 4;
  for (int i = 0; i < this->activebookidarr_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(4, this->activebookidarr(i), target);
  }

  // optional uint32 CurAspectMount = 5;
  if (has_curaspectmount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->curaspectmount(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TMountGetInfoRsp)
  return target;
}

int TMountGetInfoRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 CurMount = 1;
    if (has_curmount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->curmount());
    }

    // optional uint32 CurAspectMount = 5;
    if (has_curaspectmount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->curaspectmount());
    }

  }
  // repeated .pb.MountSingleInfo MountArr = 2;
  total_size += 1 * this->mountarr_size();
  for (int i = 0; i < this->mountarr_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->mountarr(i));
  }

  // repeated uint32 FigureArr = 3;
  {
    int data_size = 0;
    for (int i = 0; i < this->figurearr_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->figurearr(i));
    }
    total_size += 1 * this->figurearr_size() + data_size;
  }

  // repeated uint32 ActiveBookIdArr = 4;
  {
    int data_size = 0;
    for (int i = 0; i < this->activebookidarr_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->activebookidarr(i));
    }
    total_size += 1 * this->activebookidarr_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TMountGetInfoRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TMountGetInfoRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TMountGetInfoRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TMountGetInfoRsp::MergeFrom(const TMountGetInfoRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  mountarr_.MergeFrom(from.mountarr_);
  figurearr_.MergeFrom(from.figurearr_);
  activebookidarr_.MergeFrom(from.activebookidarr_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_curmount()) {
      set_curmount(from.curmount());
    }
    if (from.has_curaspectmount()) {
      set_curaspectmount(from.curaspectmount());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TMountGetInfoRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TMountGetInfoRsp::CopyFrom(const TMountGetInfoRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TMountGetInfoRsp::IsInitialized() const {

  return true;
}

void TMountGetInfoRsp::Swap(TMountGetInfoRsp* other) {
  if (other != this) {
    std::swap(curmount_, other->curmount_);
    mountarr_.Swap(&other->mountarr_);
    figurearr_.Swap(&other->figurearr_);
    activebookidarr_.Swap(&other->activebookidarr_);
    std::swap(curaspectmount_, other->curaspectmount_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TMountGetInfoRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TMountGetInfoRsp_descriptor_;
  metadata.reflection = TMountGetInfoRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TMountLevelUpReq::kMountTidFieldNumber;
#endif  // !_MSC_VER

TMountLevelUpReq::TMountLevelUpReq()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TMountLevelUpReq)
}

void TMountLevelUpReq::InitAsDefaultInstance() {
}

TMountLevelUpReq::TMountLevelUpReq(const TMountLevelUpReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TMountLevelUpReq)
}

void TMountLevelUpReq::SharedCtor() {
  _cached_size_ = 0;
  mounttid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TMountLevelUpReq::~TMountLevelUpReq() {
  // @@protoc_insertion_point(destructor:pb.TMountLevelUpReq)
  SharedDtor();
}

void TMountLevelUpReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TMountLevelUpReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TMountLevelUpReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TMountLevelUpReq_descriptor_;
}

const TMountLevelUpReq& TMountLevelUpReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fMount_2eproto();
  return *default_instance_;
}

TMountLevelUpReq* TMountLevelUpReq::default_instance_ = NULL;

TMountLevelUpReq* TMountLevelUpReq::New() const {
  return new TMountLevelUpReq;
}

void TMountLevelUpReq::Clear() {
  mounttid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TMountLevelUpReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TMountLevelUpReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 MountTid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &mounttid_)));
          set_has_mounttid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TMountLevelUpReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TMountLevelUpReq)
  return false;
#undef DO_
}

void TMountLevelUpReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TMountLevelUpReq)
  // optional uint32 MountTid = 1;
  if (has_mounttid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->mounttid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TMountLevelUpReq)
}

::google::protobuf::uint8* TMountLevelUpReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TMountLevelUpReq)
  // optional uint32 MountTid = 1;
  if (has_mounttid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->mounttid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TMountLevelUpReq)
  return target;
}

int TMountLevelUpReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 MountTid = 1;
    if (has_mounttid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->mounttid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TMountLevelUpReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TMountLevelUpReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TMountLevelUpReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TMountLevelUpReq::MergeFrom(const TMountLevelUpReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_mounttid()) {
      set_mounttid(from.mounttid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TMountLevelUpReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TMountLevelUpReq::CopyFrom(const TMountLevelUpReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TMountLevelUpReq::IsInitialized() const {

  return true;
}

void TMountLevelUpReq::Swap(TMountLevelUpReq* other) {
  if (other != this) {
    std::swap(mounttid_, other->mounttid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TMountLevelUpReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TMountLevelUpReq_descriptor_;
  metadata.reflection = TMountLevelUpReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TMountSetFigureReq::kMountTidFieldNumber;
const int TMountSetFigureReq::kFigureIdFieldNumber;
#endif  // !_MSC_VER

TMountSetFigureReq::TMountSetFigureReq()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TMountSetFigureReq)
}

void TMountSetFigureReq::InitAsDefaultInstance() {
}

TMountSetFigureReq::TMountSetFigureReq(const TMountSetFigureReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TMountSetFigureReq)
}

void TMountSetFigureReq::SharedCtor() {
  _cached_size_ = 0;
  mounttid_ = 0u;
  figureid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TMountSetFigureReq::~TMountSetFigureReq() {
  // @@protoc_insertion_point(destructor:pb.TMountSetFigureReq)
  SharedDtor();
}

void TMountSetFigureReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TMountSetFigureReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TMountSetFigureReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TMountSetFigureReq_descriptor_;
}

const TMountSetFigureReq& TMountSetFigureReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fMount_2eproto();
  return *default_instance_;
}

TMountSetFigureReq* TMountSetFigureReq::default_instance_ = NULL;

TMountSetFigureReq* TMountSetFigureReq::New() const {
  return new TMountSetFigureReq;
}

void TMountSetFigureReq::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<TMountSetFigureReq*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(mounttid_, figureid_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TMountSetFigureReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TMountSetFigureReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 FigureId = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &figureid_)));
          set_has_figureid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_MountTid;
        break;
      }

      // optional uint32 MountTid = 2;
      case 2: {
        if (tag == 16) {
         parse_MountTid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &mounttid_)));
          set_has_mounttid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TMountSetFigureReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TMountSetFigureReq)
  return false;
#undef DO_
}

void TMountSetFigureReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TMountSetFigureReq)
  // optional uint32 FigureId = 1;
  if (has_figureid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->figureid(), output);
  }

  // optional uint32 MountTid = 2;
  if (has_mounttid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->mounttid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TMountSetFigureReq)
}

::google::protobuf::uint8* TMountSetFigureReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TMountSetFigureReq)
  // optional uint32 FigureId = 1;
  if (has_figureid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->figureid(), target);
  }

  // optional uint32 MountTid = 2;
  if (has_mounttid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->mounttid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TMountSetFigureReq)
  return target;
}

int TMountSetFigureReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 MountTid = 2;
    if (has_mounttid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->mounttid());
    }

    // optional uint32 FigureId = 1;
    if (has_figureid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->figureid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TMountSetFigureReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TMountSetFigureReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TMountSetFigureReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TMountSetFigureReq::MergeFrom(const TMountSetFigureReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_mounttid()) {
      set_mounttid(from.mounttid());
    }
    if (from.has_figureid()) {
      set_figureid(from.figureid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TMountSetFigureReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TMountSetFigureReq::CopyFrom(const TMountSetFigureReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TMountSetFigureReq::IsInitialized() const {

  return true;
}

void TMountSetFigureReq::Swap(TMountSetFigureReq* other) {
  if (other != this) {
    std::swap(mounttid_, other->mounttid_);
    std::swap(figureid_, other->figureid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TMountSetFigureReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TMountSetFigureReq_descriptor_;
  metadata.reflection = TMountSetFigureReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TMountRebornReq::kMountTidFieldNumber;
#endif  // !_MSC_VER

TMountRebornReq::TMountRebornReq()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TMountRebornReq)
}

void TMountRebornReq::InitAsDefaultInstance() {
}

TMountRebornReq::TMountRebornReq(const TMountRebornReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TMountRebornReq)
}

void TMountRebornReq::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TMountRebornReq::~TMountRebornReq() {
  // @@protoc_insertion_point(destructor:pb.TMountRebornReq)
  SharedDtor();
}

void TMountRebornReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TMountRebornReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TMountRebornReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TMountRebornReq_descriptor_;
}

const TMountRebornReq& TMountRebornReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fMount_2eproto();
  return *default_instance_;
}

TMountRebornReq* TMountRebornReq::default_instance_ = NULL;

TMountRebornReq* TMountRebornReq::New() const {
  return new TMountRebornReq;
}

void TMountRebornReq::Clear() {
  mounttid_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TMountRebornReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TMountRebornReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated uint32 MountTid = 1;
      case 1: {
        if (tag == 8) {
         parse_MountTid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 8, input, this->mutable_mounttid())));
        } else if (tag == 10) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_mounttid())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(8)) goto parse_MountTid;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TMountRebornReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TMountRebornReq)
  return false;
#undef DO_
}

void TMountRebornReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TMountRebornReq)
  // repeated uint32 MountTid = 1;
  for (int i = 0; i < this->mounttid_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      1, this->mounttid(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TMountRebornReq)
}

::google::protobuf::uint8* TMountRebornReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TMountRebornReq)
  // repeated uint32 MountTid = 1;
  for (int i = 0; i < this->mounttid_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(1, this->mounttid(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TMountRebornReq)
  return target;
}

int TMountRebornReq::ByteSize() const {
  int total_size = 0;

  // repeated uint32 MountTid = 1;
  {
    int data_size = 0;
    for (int i = 0; i < this->mounttid_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->mounttid(i));
    }
    total_size += 1 * this->mounttid_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TMountRebornReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TMountRebornReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TMountRebornReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TMountRebornReq::MergeFrom(const TMountRebornReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  mounttid_.MergeFrom(from.mounttid_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TMountRebornReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TMountRebornReq::CopyFrom(const TMountRebornReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TMountRebornReq::IsInitialized() const {

  return true;
}

void TMountRebornReq::Swap(TMountRebornReq* other) {
  if (other != this) {
    mounttid_.Swap(&other->mounttid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TMountRebornReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TMountRebornReq_descriptor_;
  metadata.reflection = TMountRebornReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TMountEquipReq::kMountTidFieldNumber;
const int TMountEquipReq::kPreItemIdFieldNumber;
const int TMountEquipReq::kItemIdFieldNumber;
#endif  // !_MSC_VER

TMountEquipReq::TMountEquipReq()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TMountEquipReq)
}

void TMountEquipReq::InitAsDefaultInstance() {
}

TMountEquipReq::TMountEquipReq(const TMountEquipReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TMountEquipReq)
}

void TMountEquipReq::SharedCtor() {
  _cached_size_ = 0;
  mounttid_ = 0u;
  preitemid_ = 0u;
  itemid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TMountEquipReq::~TMountEquipReq() {
  // @@protoc_insertion_point(destructor:pb.TMountEquipReq)
  SharedDtor();
}

void TMountEquipReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TMountEquipReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TMountEquipReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TMountEquipReq_descriptor_;
}

const TMountEquipReq& TMountEquipReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fMount_2eproto();
  return *default_instance_;
}

TMountEquipReq* TMountEquipReq::default_instance_ = NULL;

TMountEquipReq* TMountEquipReq::New() const {
  return new TMountEquipReq;
}

void TMountEquipReq::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<TMountEquipReq*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(mounttid_, itemid_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TMountEquipReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TMountEquipReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 MountTid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &mounttid_)));
          set_has_mounttid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_PreItemId;
        break;
      }

      // optional uint32 PreItemId = 2;
      case 2: {
        if (tag == 16) {
         parse_PreItemId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &preitemid_)));
          set_has_preitemid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_ItemId;
        break;
      }

      // optional uint32 ItemId = 3;
      case 3: {
        if (tag == 24) {
         parse_ItemId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &itemid_)));
          set_has_itemid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TMountEquipReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TMountEquipReq)
  return false;
#undef DO_
}

void TMountEquipReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TMountEquipReq)
  // optional uint32 MountTid = 1;
  if (has_mounttid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->mounttid(), output);
  }

  // optional uint32 PreItemId = 2;
  if (has_preitemid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->preitemid(), output);
  }

  // optional uint32 ItemId = 3;
  if (has_itemid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->itemid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TMountEquipReq)
}

::google::protobuf::uint8* TMountEquipReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TMountEquipReq)
  // optional uint32 MountTid = 1;
  if (has_mounttid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->mounttid(), target);
  }

  // optional uint32 PreItemId = 2;
  if (has_preitemid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->preitemid(), target);
  }

  // optional uint32 ItemId = 3;
  if (has_itemid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->itemid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TMountEquipReq)
  return target;
}

int TMountEquipReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 MountTid = 1;
    if (has_mounttid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->mounttid());
    }

    // optional uint32 PreItemId = 2;
    if (has_preitemid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->preitemid());
    }

    // optional uint32 ItemId = 3;
    if (has_itemid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->itemid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TMountEquipReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TMountEquipReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TMountEquipReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TMountEquipReq::MergeFrom(const TMountEquipReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_mounttid()) {
      set_mounttid(from.mounttid());
    }
    if (from.has_preitemid()) {
      set_preitemid(from.preitemid());
    }
    if (from.has_itemid()) {
      set_itemid(from.itemid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TMountEquipReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TMountEquipReq::CopyFrom(const TMountEquipReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TMountEquipReq::IsInitialized() const {

  return true;
}

void TMountEquipReq::Swap(TMountEquipReq* other) {
  if (other != this) {
    std::swap(mounttid_, other->mounttid_);
    std::swap(preitemid_, other->preitemid_);
    std::swap(itemid_, other->itemid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TMountEquipReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TMountEquipReq_descriptor_;
  metadata.reflection = TMountEquipReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TMountEquipMountReq::kMountTidFieldNumber;
#endif  // !_MSC_VER

TMountEquipMountReq::TMountEquipMountReq()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TMountEquipMountReq)
}

void TMountEquipMountReq::InitAsDefaultInstance() {
}

TMountEquipMountReq::TMountEquipMountReq(const TMountEquipMountReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TMountEquipMountReq)
}

void TMountEquipMountReq::SharedCtor() {
  _cached_size_ = 0;
  mounttid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TMountEquipMountReq::~TMountEquipMountReq() {
  // @@protoc_insertion_point(destructor:pb.TMountEquipMountReq)
  SharedDtor();
}

void TMountEquipMountReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TMountEquipMountReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TMountEquipMountReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TMountEquipMountReq_descriptor_;
}

const TMountEquipMountReq& TMountEquipMountReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fMount_2eproto();
  return *default_instance_;
}

TMountEquipMountReq* TMountEquipMountReq::default_instance_ = NULL;

TMountEquipMountReq* TMountEquipMountReq::New() const {
  return new TMountEquipMountReq;
}

void TMountEquipMountReq::Clear() {
  mounttid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TMountEquipMountReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TMountEquipMountReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 MountTid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &mounttid_)));
          set_has_mounttid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TMountEquipMountReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TMountEquipMountReq)
  return false;
#undef DO_
}

void TMountEquipMountReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TMountEquipMountReq)
  // optional uint32 MountTid = 1;
  if (has_mounttid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->mounttid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TMountEquipMountReq)
}

::google::protobuf::uint8* TMountEquipMountReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TMountEquipMountReq)
  // optional uint32 MountTid = 1;
  if (has_mounttid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->mounttid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TMountEquipMountReq)
  return target;
}

int TMountEquipMountReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 MountTid = 1;
    if (has_mounttid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->mounttid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TMountEquipMountReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TMountEquipMountReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TMountEquipMountReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TMountEquipMountReq::MergeFrom(const TMountEquipMountReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_mounttid()) {
      set_mounttid(from.mounttid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TMountEquipMountReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TMountEquipMountReq::CopyFrom(const TMountEquipMountReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TMountEquipMountReq::IsInitialized() const {

  return true;
}

void TMountEquipMountReq::Swap(TMountEquipMountReq* other) {
  if (other != this) {
    std::swap(mounttid_, other->mounttid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TMountEquipMountReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TMountEquipMountReq_descriptor_;
  metadata.reflection = TMountEquipMountReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TMountEquipMountRsp::kReturnItemFieldNumber;
const int TMountEquipMountRsp::kMountArrFieldNumber;
#endif  // !_MSC_VER

TMountEquipMountRsp::TMountEquipMountRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TMountEquipMountRsp)
}

void TMountEquipMountRsp::InitAsDefaultInstance() {
}

TMountEquipMountRsp::TMountEquipMountRsp(const TMountEquipMountRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TMountEquipMountRsp)
}

void TMountEquipMountRsp::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TMountEquipMountRsp::~TMountEquipMountRsp() {
  // @@protoc_insertion_point(destructor:pb.TMountEquipMountRsp)
  SharedDtor();
}

void TMountEquipMountRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TMountEquipMountRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TMountEquipMountRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TMountEquipMountRsp_descriptor_;
}

const TMountEquipMountRsp& TMountEquipMountRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fMount_2eproto();
  return *default_instance_;
}

TMountEquipMountRsp* TMountEquipMountRsp::default_instance_ = NULL;

TMountEquipMountRsp* TMountEquipMountRsp::New() const {
  return new TMountEquipMountRsp;
}

void TMountEquipMountRsp::Clear() {
  returnitem_.Clear();
  mountarr_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TMountEquipMountRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TMountEquipMountRsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .pb.TCommonReward ReturnItem = 1;
      case 1: {
        if (tag == 10) {
         parse_ReturnItem:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_returnitem()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_ReturnItem;
        if (input->ExpectTag(18)) goto parse_MountArr;
        break;
      }

      // repeated .pb.MountSingleInfo MountArr = 2;
      case 2: {
        if (tag == 18) {
         parse_MountArr:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_mountarr()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_MountArr;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TMountEquipMountRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TMountEquipMountRsp)
  return false;
#undef DO_
}

void TMountEquipMountRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TMountEquipMountRsp)
  // repeated .pb.TCommonReward ReturnItem = 1;
  for (int i = 0; i < this->returnitem_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->returnitem(i), output);
  }

  // repeated .pb.MountSingleInfo MountArr = 2;
  for (int i = 0; i < this->mountarr_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->mountarr(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TMountEquipMountRsp)
}

::google::protobuf::uint8* TMountEquipMountRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TMountEquipMountRsp)
  // repeated .pb.TCommonReward ReturnItem = 1;
  for (int i = 0; i < this->returnitem_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->returnitem(i), target);
  }

  // repeated .pb.MountSingleInfo MountArr = 2;
  for (int i = 0; i < this->mountarr_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->mountarr(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TMountEquipMountRsp)
  return target;
}

int TMountEquipMountRsp::ByteSize() const {
  int total_size = 0;

  // repeated .pb.TCommonReward ReturnItem = 1;
  total_size += 1 * this->returnitem_size();
  for (int i = 0; i < this->returnitem_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->returnitem(i));
  }

  // repeated .pb.MountSingleInfo MountArr = 2;
  total_size += 1 * this->mountarr_size();
  for (int i = 0; i < this->mountarr_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->mountarr(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TMountEquipMountRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TMountEquipMountRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TMountEquipMountRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TMountEquipMountRsp::MergeFrom(const TMountEquipMountRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  returnitem_.MergeFrom(from.returnitem_);
  mountarr_.MergeFrom(from.mountarr_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TMountEquipMountRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TMountEquipMountRsp::CopyFrom(const TMountEquipMountRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TMountEquipMountRsp::IsInitialized() const {

  return true;
}

void TMountEquipMountRsp::Swap(TMountEquipMountRsp* other) {
  if (other != this) {
    returnitem_.Swap(&other->returnitem_);
    mountarr_.Swap(&other->mountarr_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TMountEquipMountRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TMountEquipMountRsp_descriptor_;
  metadata.reflection = TMountEquipMountRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TMountEquipAspectMountReq::kMountTidFieldNumber;
#endif  // !_MSC_VER

TMountEquipAspectMountReq::TMountEquipAspectMountReq()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TMountEquipAspectMountReq)
}

void TMountEquipAspectMountReq::InitAsDefaultInstance() {
}

TMountEquipAspectMountReq::TMountEquipAspectMountReq(const TMountEquipAspectMountReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TMountEquipAspectMountReq)
}

void TMountEquipAspectMountReq::SharedCtor() {
  _cached_size_ = 0;
  mounttid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TMountEquipAspectMountReq::~TMountEquipAspectMountReq() {
  // @@protoc_insertion_point(destructor:pb.TMountEquipAspectMountReq)
  SharedDtor();
}

void TMountEquipAspectMountReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TMountEquipAspectMountReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TMountEquipAspectMountReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TMountEquipAspectMountReq_descriptor_;
}

const TMountEquipAspectMountReq& TMountEquipAspectMountReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fMount_2eproto();
  return *default_instance_;
}

TMountEquipAspectMountReq* TMountEquipAspectMountReq::default_instance_ = NULL;

TMountEquipAspectMountReq* TMountEquipAspectMountReq::New() const {
  return new TMountEquipAspectMountReq;
}

void TMountEquipAspectMountReq::Clear() {
  mounttid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TMountEquipAspectMountReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TMountEquipAspectMountReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 MountTid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &mounttid_)));
          set_has_mounttid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TMountEquipAspectMountReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TMountEquipAspectMountReq)
  return false;
#undef DO_
}

void TMountEquipAspectMountReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TMountEquipAspectMountReq)
  // optional uint32 MountTid = 1;
  if (has_mounttid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->mounttid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TMountEquipAspectMountReq)
}

::google::protobuf::uint8* TMountEquipAspectMountReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TMountEquipAspectMountReq)
  // optional uint32 MountTid = 1;
  if (has_mounttid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->mounttid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TMountEquipAspectMountReq)
  return target;
}

int TMountEquipAspectMountReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 MountTid = 1;
    if (has_mounttid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->mounttid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TMountEquipAspectMountReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TMountEquipAspectMountReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TMountEquipAspectMountReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TMountEquipAspectMountReq::MergeFrom(const TMountEquipAspectMountReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_mounttid()) {
      set_mounttid(from.mounttid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TMountEquipAspectMountReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TMountEquipAspectMountReq::CopyFrom(const TMountEquipAspectMountReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TMountEquipAspectMountReq::IsInitialized() const {

  return true;
}

void TMountEquipAspectMountReq::Swap(TMountEquipAspectMountReq* other) {
  if (other != this) {
    std::swap(mounttid_, other->mounttid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TMountEquipAspectMountReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TMountEquipAspectMountReq_descriptor_;
  metadata.reflection = TMountEquipAspectMountReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TMountNotify::kMountTidFieldNumber;
const int TMountNotify::kMountInfoFieldNumber;
const int TMountNotify::kRewardArrFieldNumber;
#endif  // !_MSC_VER

TMountNotify::TMountNotify()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TMountNotify)
}

void TMountNotify::InitAsDefaultInstance() {
  mountinfo_ = const_cast< ::pb::MountSingleInfo*>(&::pb::MountSingleInfo::default_instance());
}

TMountNotify::TMountNotify(const TMountNotify& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TMountNotify)
}

void TMountNotify::SharedCtor() {
  _cached_size_ = 0;
  mounttid_ = 0u;
  mountinfo_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TMountNotify::~TMountNotify() {
  // @@protoc_insertion_point(destructor:pb.TMountNotify)
  SharedDtor();
}

void TMountNotify::SharedDtor() {
  if (this != default_instance_) {
    delete mountinfo_;
  }
}

void TMountNotify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TMountNotify::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TMountNotify_descriptor_;
}

const TMountNotify& TMountNotify::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fMount_2eproto();
  return *default_instance_;
}

TMountNotify* TMountNotify::default_instance_ = NULL;

TMountNotify* TMountNotify::New() const {
  return new TMountNotify;
}

void TMountNotify::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    mounttid_ = 0u;
    if (has_mountinfo()) {
      if (mountinfo_ != NULL) mountinfo_->::pb::MountSingleInfo::Clear();
    }
  }
  rewardarr_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TMountNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TMountNotify)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 MountTid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &mounttid_)));
          set_has_mounttid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_MountInfo;
        break;
      }

      // optional .pb.MountSingleInfo MountInfo = 2;
      case 2: {
        if (tag == 18) {
         parse_MountInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_mountinfo()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_RewardArr;
        break;
      }

      // repeated .pb.TCommonReward RewardArr = 3;
      case 3: {
        if (tag == 26) {
         parse_RewardArr:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_rewardarr()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_RewardArr;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TMountNotify)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TMountNotify)
  return false;
#undef DO_
}

void TMountNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TMountNotify)
  // optional uint32 MountTid = 1;
  if (has_mounttid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->mounttid(), output);
  }

  // optional .pb.MountSingleInfo MountInfo = 2;
  if (has_mountinfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->mountinfo(), output);
  }

  // repeated .pb.TCommonReward RewardArr = 3;
  for (int i = 0; i < this->rewardarr_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->rewardarr(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TMountNotify)
}

::google::protobuf::uint8* TMountNotify::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TMountNotify)
  // optional uint32 MountTid = 1;
  if (has_mounttid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->mounttid(), target);
  }

  // optional .pb.MountSingleInfo MountInfo = 2;
  if (has_mountinfo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->mountinfo(), target);
  }

  // repeated .pb.TCommonReward RewardArr = 3;
  for (int i = 0; i < this->rewardarr_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->rewardarr(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TMountNotify)
  return target;
}

int TMountNotify::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 MountTid = 1;
    if (has_mounttid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->mounttid());
    }

    // optional .pb.MountSingleInfo MountInfo = 2;
    if (has_mountinfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->mountinfo());
    }

  }
  // repeated .pb.TCommonReward RewardArr = 3;
  total_size += 1 * this->rewardarr_size();
  for (int i = 0; i < this->rewardarr_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->rewardarr(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TMountNotify::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TMountNotify* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TMountNotify*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TMountNotify::MergeFrom(const TMountNotify& from) {
  GOOGLE_CHECK_NE(&from, this);
  rewardarr_.MergeFrom(from.rewardarr_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_mounttid()) {
      set_mounttid(from.mounttid());
    }
    if (from.has_mountinfo()) {
      mutable_mountinfo()->::pb::MountSingleInfo::MergeFrom(from.mountinfo());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TMountNotify::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TMountNotify::CopyFrom(const TMountNotify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TMountNotify::IsInitialized() const {

  return true;
}

void TMountNotify::Swap(TMountNotify* other) {
  if (other != this) {
    std::swap(mounttid_, other->mounttid_);
    std::swap(mountinfo_, other->mountinfo_);
    rewardarr_.Swap(&other->rewardarr_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TMountNotify::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TMountNotify_descriptor_;
  metadata.reflection = TMountNotify_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TMountFigureNotify::kFigureIdFieldNumber;
const int TMountFigureNotify::kResolvedFieldNumber;
const int TMountFigureNotify::kRewardArrFieldNumber;
#endif  // !_MSC_VER

TMountFigureNotify::TMountFigureNotify()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TMountFigureNotify)
}

void TMountFigureNotify::InitAsDefaultInstance() {
}

TMountFigureNotify::TMountFigureNotify(const TMountFigureNotify& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TMountFigureNotify)
}

void TMountFigureNotify::SharedCtor() {
  _cached_size_ = 0;
  figureid_ = 0u;
  resolved_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TMountFigureNotify::~TMountFigureNotify() {
  // @@protoc_insertion_point(destructor:pb.TMountFigureNotify)
  SharedDtor();
}

void TMountFigureNotify::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TMountFigureNotify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TMountFigureNotify::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TMountFigureNotify_descriptor_;
}

const TMountFigureNotify& TMountFigureNotify::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fMount_2eproto();
  return *default_instance_;
}

TMountFigureNotify* TMountFigureNotify::default_instance_ = NULL;

TMountFigureNotify* TMountFigureNotify::New() const {
  return new TMountFigureNotify;
}

void TMountFigureNotify::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<TMountFigureNotify*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(figureid_, resolved_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  rewardarr_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TMountFigureNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TMountFigureNotify)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 FigureId = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &figureid_)));
          set_has_figureid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_Resolved;
        break;
      }

      // optional uint32 Resolved = 2;
      case 2: {
        if (tag == 16) {
         parse_Resolved:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &resolved_)));
          set_has_resolved();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_RewardArr;
        break;
      }

      // repeated .pb.TCommonReward RewardArr = 3;
      case 3: {
        if (tag == 26) {
         parse_RewardArr:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_rewardarr()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_RewardArr;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TMountFigureNotify)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TMountFigureNotify)
  return false;
#undef DO_
}

void TMountFigureNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TMountFigureNotify)
  // optional uint32 FigureId = 1;
  if (has_figureid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->figureid(), output);
  }

  // optional uint32 Resolved = 2;
  if (has_resolved()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->resolved(), output);
  }

  // repeated .pb.TCommonReward RewardArr = 3;
  for (int i = 0; i < this->rewardarr_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->rewardarr(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TMountFigureNotify)
}

::google::protobuf::uint8* TMountFigureNotify::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TMountFigureNotify)
  // optional uint32 FigureId = 1;
  if (has_figureid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->figureid(), target);
  }

  // optional uint32 Resolved = 2;
  if (has_resolved()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->resolved(), target);
  }

  // repeated .pb.TCommonReward RewardArr = 3;
  for (int i = 0; i < this->rewardarr_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->rewardarr(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TMountFigureNotify)
  return target;
}

int TMountFigureNotify::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 FigureId = 1;
    if (has_figureid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->figureid());
    }

    // optional uint32 Resolved = 2;
    if (has_resolved()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->resolved());
    }

  }
  // repeated .pb.TCommonReward RewardArr = 3;
  total_size += 1 * this->rewardarr_size();
  for (int i = 0; i < this->rewardarr_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->rewardarr(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TMountFigureNotify::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TMountFigureNotify* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TMountFigureNotify*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TMountFigureNotify::MergeFrom(const TMountFigureNotify& from) {
  GOOGLE_CHECK_NE(&from, this);
  rewardarr_.MergeFrom(from.rewardarr_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_figureid()) {
      set_figureid(from.figureid());
    }
    if (from.has_resolved()) {
      set_resolved(from.resolved());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TMountFigureNotify::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TMountFigureNotify::CopyFrom(const TMountFigureNotify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TMountFigureNotify::IsInitialized() const {

  return true;
}

void TMountFigureNotify::Swap(TMountFigureNotify* other) {
  if (other != this) {
    std::swap(figureid_, other->figureid_);
    std::swap(resolved_, other->resolved_);
    rewardarr_.Swap(&other->rewardarr_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TMountFigureNotify::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TMountFigureNotify_descriptor_;
  metadata.reflection = TMountFigureNotify_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TMountActivateBookReq::kBookIdFieldNumber;
#endif  // !_MSC_VER

TMountActivateBookReq::TMountActivateBookReq()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TMountActivateBookReq)
}

void TMountActivateBookReq::InitAsDefaultInstance() {
}

TMountActivateBookReq::TMountActivateBookReq(const TMountActivateBookReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TMountActivateBookReq)
}

void TMountActivateBookReq::SharedCtor() {
  _cached_size_ = 0;
  bookid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TMountActivateBookReq::~TMountActivateBookReq() {
  // @@protoc_insertion_point(destructor:pb.TMountActivateBookReq)
  SharedDtor();
}

void TMountActivateBookReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TMountActivateBookReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TMountActivateBookReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TMountActivateBookReq_descriptor_;
}

const TMountActivateBookReq& TMountActivateBookReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fMount_2eproto();
  return *default_instance_;
}

TMountActivateBookReq* TMountActivateBookReq::default_instance_ = NULL;

TMountActivateBookReq* TMountActivateBookReq::New() const {
  return new TMountActivateBookReq;
}

void TMountActivateBookReq::Clear() {
  bookid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TMountActivateBookReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TMountActivateBookReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 BookId = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &bookid_)));
          set_has_bookid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TMountActivateBookReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TMountActivateBookReq)
  return false;
#undef DO_
}

void TMountActivateBookReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TMountActivateBookReq)
  // optional uint32 BookId = 1;
  if (has_bookid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->bookid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TMountActivateBookReq)
}

::google::protobuf::uint8* TMountActivateBookReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TMountActivateBookReq)
  // optional uint32 BookId = 1;
  if (has_bookid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->bookid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TMountActivateBookReq)
  return target;
}

int TMountActivateBookReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 BookId = 1;
    if (has_bookid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->bookid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TMountActivateBookReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TMountActivateBookReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TMountActivateBookReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TMountActivateBookReq::MergeFrom(const TMountActivateBookReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_bookid()) {
      set_bookid(from.bookid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TMountActivateBookReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TMountActivateBookReq::CopyFrom(const TMountActivateBookReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TMountActivateBookReq::IsInitialized() const {

  return true;
}

void TMountActivateBookReq::Swap(TMountActivateBookReq* other) {
  if (other != this) {
    std::swap(bookid_, other->bookid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TMountActivateBookReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TMountActivateBookReq_descriptor_;
  metadata.reflection = TMountActivateBookReq_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace pb

// @@protoc_insertion_point(global_scope)
